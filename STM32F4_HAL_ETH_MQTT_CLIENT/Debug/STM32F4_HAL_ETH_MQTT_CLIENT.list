
STM32F4_HAL_ETH_MQTT_CLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018d44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003df0  08018ef4  08018ef4  00028ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801cce4  0801cce4  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801cce4  0801cce4  0002cce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ccec  0801ccec  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ccec  0801ccec  0002ccec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ccf0  0801ccf0  0002ccf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801ccf4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000fcbc  200001f0  0801cee4  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000feac  0801cee4  0003feac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049409  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000087ea  00000000  00000000  00079629  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000022c8  00000000  00000000  00081e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002150  00000000  00000000  000840e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035d96  00000000  00000000  00086230  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002d57a  00000000  00000000  000bbfc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fd151  00000000  00000000  000e9540  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001e6691  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009410  00000000  00000000  001e670c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018edc 	.word	0x08018edc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08018edc 	.word	0x08018edc

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_Init+0x40>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a0d      	ldr	r2, [pc, #52]	; (8000600 <HAL_Init+0x40>)
 80005ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80005ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <HAL_Init+0x40>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a0a      	ldr	r2, [pc, #40]	; (8000600 <HAL_Init+0x40>)
 80005d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005dc:	4b08      	ldr	r3, [pc, #32]	; (8000600 <HAL_Init+0x40>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a07      	ldr	r2, [pc, #28]	; (8000600 <HAL_Init+0x40>)
 80005e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005e8:	2003      	movs	r0, #3
 80005ea:	f000 f8fa 	bl	80007e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ee:	2000      	movs	r0, #0
 80005f0:	f017 fb22 	bl	8017c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005f4:	f017 faf4 	bl	8017be0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005f8:	2300      	movs	r3, #0
}
 80005fa:	4618      	mov	r0, r3
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023c00 	.word	0x40023c00

08000604 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <HAL_IncTick+0x20>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	461a      	mov	r2, r3
 800060e:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_IncTick+0x24>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4413      	add	r3, r2
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <HAL_IncTick+0x24>)
 8000616:	6013      	str	r3, [r2, #0]
}
 8000618:	bf00      	nop
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000004 	.word	0x20000004
 8000628:	20008d60 	.word	0x20008d60

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20008d60 	.word	0x20008d60

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d005      	beq.n	800066a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_Delay+0x40>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	461a      	mov	r2, r3
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	4413      	add	r3, r2
 8000668:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800066a:	bf00      	nop
 800066c:	f7ff ffde 	bl	800062c <HAL_GetTick>
 8000670:	4602      	mov	r2, r0
 8000672:	68bb      	ldr	r3, [r7, #8]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	429a      	cmp	r2, r3
 800067a:	d8f7      	bhi.n	800066c <HAL_Delay+0x28>
  {
  }
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000004 	.word	0x20000004

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	db0b      	blt.n	8000716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006fe:	79fb      	ldrb	r3, [r7, #7]
 8000700:	f003 021f 	and.w	r2, r3, #31
 8000704:	4907      	ldr	r1, [pc, #28]	; (8000724 <__NVIC_EnableIRQ+0x38>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	095b      	lsrs	r3, r3, #5
 800070c:	2001      	movs	r0, #1
 800070e:	fa00 f202 	lsl.w	r2, r0, r2
 8000712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000716:	bf00      	nop
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	e000e100 	.word	0xe000e100

08000728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	4603      	mov	r3, r0
 8000730:	6039      	str	r1, [r7, #0]
 8000732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000738:	2b00      	cmp	r3, #0
 800073a:	db0a      	blt.n	8000752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	b2da      	uxtb	r2, r3
 8000740:	490c      	ldr	r1, [pc, #48]	; (8000774 <__NVIC_SetPriority+0x4c>)
 8000742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000746:	0112      	lsls	r2, r2, #4
 8000748:	b2d2      	uxtb	r2, r2
 800074a:	440b      	add	r3, r1
 800074c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000750:	e00a      	b.n	8000768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2da      	uxtb	r2, r3
 8000756:	4908      	ldr	r1, [pc, #32]	; (8000778 <__NVIC_SetPriority+0x50>)
 8000758:	79fb      	ldrb	r3, [r7, #7]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	3b04      	subs	r3, #4
 8000760:	0112      	lsls	r2, r2, #4
 8000762:	b2d2      	uxtb	r2, r2
 8000764:	440b      	add	r3, r1
 8000766:	761a      	strb	r2, [r3, #24]
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800077c:	b480      	push	{r7}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	60f8      	str	r0, [r7, #12]
 8000784:	60b9      	str	r1, [r7, #8]
 8000786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	f003 0307 	and.w	r3, r3, #7
 800078e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	f1c3 0307 	rsb	r3, r3, #7
 8000796:	2b04      	cmp	r3, #4
 8000798:	bf28      	it	cs
 800079a:	2304      	movcs	r3, #4
 800079c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	3304      	adds	r3, #4
 80007a2:	2b06      	cmp	r3, #6
 80007a4:	d902      	bls.n	80007ac <NVIC_EncodePriority+0x30>
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3b03      	subs	r3, #3
 80007aa:	e000      	b.n	80007ae <NVIC_EncodePriority+0x32>
 80007ac:	2300      	movs	r3, #0
 80007ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	69bb      	ldr	r3, [r7, #24]
 80007b6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ba:	43da      	mvns	r2, r3
 80007bc:	68bb      	ldr	r3, [r7, #8]
 80007be:	401a      	ands	r2, r3
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007c4:	f04f 31ff 	mov.w	r1, #4294967295
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	fa01 f303 	lsl.w	r3, r1, r3
 80007ce:	43d9      	mvns	r1, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007d4:	4313      	orrs	r3, r2
         );
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3724      	adds	r7, #36	; 0x24
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f7ff ff4c 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007f0:	bf00      	nop
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	60b9      	str	r1, [r7, #8]
 8000802:	607a      	str	r2, [r7, #4]
 8000804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000806:	2300      	movs	r3, #0
 8000808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800080a:	f7ff ff61 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 800080e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000810:	687a      	ldr	r2, [r7, #4]
 8000812:	68b9      	ldr	r1, [r7, #8]
 8000814:	6978      	ldr	r0, [r7, #20]
 8000816:	f7ff ffb1 	bl	800077c <NVIC_EncodePriority>
 800081a:	4602      	mov	r2, r0
 800081c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000820:	4611      	mov	r1, r2
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff ff80 	bl	8000728 <__NVIC_SetPriority>
}
 8000828:	bf00      	nop
 800082a:	3718      	adds	r7, #24
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff ff54 	bl	80006ec <__NVIC_EnableIRQ>
}
 8000844:	bf00      	nop
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b088      	sub	sp, #32
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000854:	2300      	movs	r3, #0
 8000856:	61fb      	str	r3, [r7, #28]
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800085c:	4baa      	ldr	r3, [pc, #680]	; (8000b08 <HAL_ETH_Init+0x2bc>)
 800085e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	d101      	bne.n	8000872 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e185      	b.n	8000b7e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000878:	b2db      	uxtb	r3, r3
 800087a:	2b00      	cmp	r3, #0
 800087c:	d106      	bne.n	800088c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2200      	movs	r2, #0
 8000882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f016 fa74 	bl	8016d74 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088c:	2300      	movs	r3, #0
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	4b9e      	ldr	r3, [pc, #632]	; (8000b0c <HAL_ETH_Init+0x2c0>)
 8000892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000894:	4a9d      	ldr	r2, [pc, #628]	; (8000b0c <HAL_ETH_Init+0x2c0>)
 8000896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800089a:	6453      	str	r3, [r2, #68]	; 0x44
 800089c:	4b9b      	ldr	r3, [pc, #620]	; (8000b0c <HAL_ETH_Init+0x2c0>)
 800089e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80008a8:	4b99      	ldr	r3, [pc, #612]	; (8000b10 <HAL_ETH_Init+0x2c4>)
 80008aa:	685b      	ldr	r3, [r3, #4]
 80008ac:	4a98      	ldr	r2, [pc, #608]	; (8000b10 <HAL_ETH_Init+0x2c4>)
 80008ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80008b2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80008b4:	4b96      	ldr	r3, [pc, #600]	; (8000b10 <HAL_ETH_Init+0x2c4>)
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6a1b      	ldr	r3, [r3, #32]
 80008bc:	4994      	ldr	r1, [pc, #592]	; (8000b10 <HAL_ETH_Init+0x2c4>)
 80008be:	4313      	orrs	r3, r2
 80008c0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008ca:	681a      	ldr	r2, [r3, #0]
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f042 0201 	orr.w	r2, r2, #1
 80008d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80008d8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80008da:	f7ff fea7 	bl	800062c <HAL_GetTick>
 80008de:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80008e0:	e011      	b.n	8000906 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80008e2:	f7ff fea3 	bl	800062c <HAL_GetTick>
 80008e6:	4602      	mov	r2, r0
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1ad3      	subs	r3, r2, r3
 80008ec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80008f0:	d909      	bls.n	8000906 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2203      	movs	r2, #3
 80008f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000902:	2303      	movs	r3, #3
 8000904:	e13b      	b.n	8000b7e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f003 0301 	and.w	r3, r3, #1
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1e4      	bne.n	80008e2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	691b      	ldr	r3, [r3, #16]
 800091e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	f023 031c 	bic.w	r3, r3, #28
 8000926:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000928:	f001 ff42 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 800092c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	4a78      	ldr	r2, [pc, #480]	; (8000b14 <HAL_ETH_Init+0x2c8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d908      	bls.n	8000948 <HAL_ETH_Init+0xfc>
 8000936:	69bb      	ldr	r3, [r7, #24]
 8000938:	4a77      	ldr	r2, [pc, #476]	; (8000b18 <HAL_ETH_Init+0x2cc>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d804      	bhi.n	8000948 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	f043 0308 	orr.w	r3, r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
 8000946:	e027      	b.n	8000998 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	4a73      	ldr	r2, [pc, #460]	; (8000b18 <HAL_ETH_Init+0x2cc>)
 800094c:	4293      	cmp	r3, r2
 800094e:	d908      	bls.n	8000962 <HAL_ETH_Init+0x116>
 8000950:	69bb      	ldr	r3, [r7, #24]
 8000952:	4a72      	ldr	r2, [pc, #456]	; (8000b1c <HAL_ETH_Init+0x2d0>)
 8000954:	4293      	cmp	r3, r2
 8000956:	d804      	bhi.n	8000962 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f043 030c 	orr.w	r3, r3, #12
 800095e:	61fb      	str	r3, [r7, #28]
 8000960:	e01a      	b.n	8000998 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000962:	69bb      	ldr	r3, [r7, #24]
 8000964:	4a6d      	ldr	r2, [pc, #436]	; (8000b1c <HAL_ETH_Init+0x2d0>)
 8000966:	4293      	cmp	r3, r2
 8000968:	d903      	bls.n	8000972 <HAL_ETH_Init+0x126>
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	4a6c      	ldr	r2, [pc, #432]	; (8000b20 <HAL_ETH_Init+0x2d4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d911      	bls.n	8000996 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4a6a      	ldr	r2, [pc, #424]	; (8000b20 <HAL_ETH_Init+0x2d4>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d908      	bls.n	800098c <HAL_ETH_Init+0x140>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	4a69      	ldr	r2, [pc, #420]	; (8000b24 <HAL_ETH_Init+0x2d8>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d804      	bhi.n	800098c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000982:	69fb      	ldr	r3, [r7, #28]
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	61fb      	str	r3, [r7, #28]
 800098a:	e005      	b.n	8000998 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	61fb      	str	r3, [r7, #28]
 8000994:	e000      	b.n	8000998 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000996:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	69fa      	ldr	r2, [r7, #28]
 800099e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80009a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a4:	2100      	movs	r1, #0
 80009a6:	6878      	ldr	r0, [r7, #4]
 80009a8:	f000 fc19 	bl	80011de <HAL_ETH_WritePHYRegister>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d00b      	beq.n	80009ca <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80009b2:	2301      	movs	r3, #1
 80009b4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80009b6:	6939      	ldr	r1, [r7, #16]
 80009b8:	6878      	ldr	r0, [r7, #4]
 80009ba:	f000 fdcf 	bl	800155c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2201      	movs	r2, #1
 80009c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	e0d9      	b.n	8000b7e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80009ca:	20ff      	movs	r0, #255	; 0xff
 80009cc:	f7ff fe3a 	bl	8000644 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	685b      	ldr	r3, [r3, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	f000 80a7 	beq.w	8000b28 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80009da:	f7ff fe27 	bl	800062c <HAL_GetTick>
 80009de:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	461a      	mov	r2, r3
 80009e6:	2101      	movs	r1, #1
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 fb90 	bl	800110e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80009ee:	f7ff fe1d 	bl	800062c <HAL_GetTick>
 80009f2:	4602      	mov	r2, r0
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80009fc:	4293      	cmp	r3, r2
 80009fe:	d90f      	bls.n	8000a20 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a04:	6939      	ldr	r1, [r7, #16]
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f000 fda8 	bl	800155c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2201      	movs	r2, #1
 8000a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	2200      	movs	r2, #0
 8000a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	e0ae      	b.n	8000b7e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0da      	beq.n	80009e0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000a2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a2e:	2100      	movs	r1, #0
 8000a30:	6878      	ldr	r0, [r7, #4]
 8000a32:	f000 fbd4 	bl	80011de <HAL_ETH_WritePHYRegister>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000a40:	6939      	ldr	r1, [r7, #16]
 8000a42:	6878      	ldr	r0, [r7, #4]
 8000a44:	f000 fd8a 	bl	800155c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000a50:	2301      	movs	r3, #1
 8000a52:	e094      	b.n	8000b7e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000a54:	f7ff fdea 	bl	800062c <HAL_GetTick>
 8000a58:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	461a      	mov	r2, r3
 8000a60:	2101      	movs	r1, #1
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f000 fb53 	bl	800110e <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000a68:	f7ff fde0 	bl	800062c <HAL_GetTick>
 8000a6c:	4602      	mov	r2, r0
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d90f      	bls.n	8000a9a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000a7e:	6939      	ldr	r1, [r7, #16]
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f000 fd6b 	bl	800155c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2201      	movs	r2, #1
 8000a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000a96:	2303      	movs	r3, #3
 8000a98:	e071      	b.n	8000b7e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f003 0320 	and.w	r3, r3, #32
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d0da      	beq.n	8000a5a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000aa4:	f107 030c 	add.w	r3, r7, #12
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	211f      	movs	r1, #31
 8000aac:	6878      	ldr	r0, [r7, #4]
 8000aae:	f000 fb2e 	bl	800110e <HAL_ETH_ReadPHYRegister>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d00b      	beq.n	8000ad0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000abc:	6939      	ldr	r1, [r7, #16]
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	f000 fd4c 	bl	800155c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000acc:	2301      	movs	r3, #1
 8000ace:	e056      	b.n	8000b7e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0310 	and.w	r3, r3, #16
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d004      	beq.n	8000ae4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	e002      	b.n	8000aea <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f003 0304 	and.w	r3, r3, #4
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
 8000afa:	e037      	b.n	8000b6c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	e032      	b.n	8000b6c <HAL_ETH_Init+0x320>
 8000b06:	bf00      	nop
 8000b08:	03938700 	.word	0x03938700
 8000b0c:	40023800 	.word	0x40023800
 8000b10:	40013800 	.word	0x40013800
 8000b14:	01312cff 	.word	0x01312cff
 8000b18:	02160ebf 	.word	0x02160ebf
 8000b1c:	039386ff 	.word	0x039386ff
 8000b20:	05f5e0ff 	.word	0x05f5e0ff
 8000b24:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	68db      	ldr	r3, [r3, #12]
 8000b2c:	08db      	lsrs	r3, r3, #3
 8000b2e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689b      	ldr	r3, [r3, #8]
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	6878      	ldr	r0, [r7, #4]
 8000b42:	f000 fb4c 	bl	80011de <HAL_ETH_WritePHYRegister>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d00b      	beq.n	8000b64 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000b50:	6939      	ldr	r1, [r7, #16]
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f000 fd02 	bl	800155c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8000b60:	2301      	movs	r3, #1
 8000b62:	e00c      	b.n	8000b7e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8000b64:	f640 70ff 	movw	r0, #4095	; 0xfff
 8000b68:	f7ff fd6c 	bl	8000644 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8000b6c:	6939      	ldr	r1, [r7, #16]
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f000 fcf4 	bl	800155c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2201      	movs	r2, #1
 8000b78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8000b7c:	2300      	movs	r3, #0
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3720      	adds	r7, #32
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop

08000b88 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b087      	sub	sp, #28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
 8000b94:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d101      	bne.n	8000ba8 <HAL_ETH_DMATxDescListInit+0x20>
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	e052      	b.n	8000c4e <HAL_ETH_DMATxDescListInit+0xc6>
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	2201      	movs	r2, #1
 8000bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2202      	movs	r2, #2
 8000bb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	68ba      	ldr	r2, [r7, #8]
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	e030      	b.n	8000c26 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	015b      	lsls	r3, r3, #5
 8000bc8:	68ba      	ldr	r2, [r7, #8]
 8000bca:	4413      	add	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bd4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000bdc:	fb02 f303 	mul.w	r3, r2, r3
 8000be0:	687a      	ldr	r2, [r7, #4]
 8000be2:	4413      	add	r3, r2
 8000be4:	461a      	mov	r2, r3
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d105      	bne.n	8000bfe <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	697a      	ldr	r2, [r7, #20]
 8000c04:	429a      	cmp	r2, r3
 8000c06:	d208      	bcs.n	8000c1a <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8000c08:	697b      	ldr	r3, [r7, #20]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	015b      	lsls	r3, r3, #5
 8000c0e:	68ba      	ldr	r2, [r7, #8]
 8000c10:	4413      	add	r3, r2
 8000c12:	461a      	mov	r2, r3
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	e002      	b.n	8000c20 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8000c1a:	68ba      	ldr	r2, [r7, #8]
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	3301      	adds	r3, #1
 8000c24:	617b      	str	r3, [r7, #20]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3ca      	bcc.n	8000bc4 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	68ba      	ldr	r2, [r7, #8]
 8000c34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000c38:	3310      	adds	r3, #16
 8000c3a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	2200      	movs	r2, #0
 8000c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000c4c:	2300      	movs	r3, #0
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	371c      	adds	r7, #28
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b087      	sub	sp, #28
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	60f8      	str	r0, [r7, #12]
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d101      	bne.n	8000c7a <HAL_ETH_DMARxDescListInit+0x20>
 8000c76:	2302      	movs	r3, #2
 8000c78:	e056      	b.n	8000d28 <HAL_ETH_DMARxDescListInit+0xce>
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	2202      	movs	r2, #2
 8000c86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	68ba      	ldr	r2, [r7, #8]
 8000c8e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e034      	b.n	8000d00 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	015b      	lsls	r3, r3, #5
 8000c9a:	68ba      	ldr	r2, [r7, #8]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ca6:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8000cae:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000cb6:	fb02 f303 	mul.w	r3, r2, r3
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	693b      	ldr	r3, [r7, #16]
 8000cc2:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	699b      	ldr	r3, [r3, #24]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d105      	bne.n	8000cd8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8000cd4:	693b      	ldr	r3, [r7, #16]
 8000cd6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	697a      	ldr	r2, [r7, #20]
 8000cde:	429a      	cmp	r2, r3
 8000ce0:	d208      	bcs.n	8000cf4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	015b      	lsls	r3, r3, #5
 8000ce8:	68ba      	ldr	r2, [r7, #8]
 8000cea:	4413      	add	r3, r2
 8000cec:	461a      	mov	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	e002      	b.n	8000cfa <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d3c6      	bcc.n	8000c96 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	68ba      	ldr	r2, [r7, #8]
 8000d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000d12:	330c      	adds	r3, #12
 8000d14:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2200      	movs	r2, #0
 8000d22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000d26:	2300      	movs	r3, #0
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	371c      	adds	r7, #28
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr

08000d34 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b087      	sub	sp, #28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000d50:	2b01      	cmp	r3, #1
 8000d52:	d101      	bne.n	8000d58 <HAL_ETH_TransmitFrame+0x24>
 8000d54:	2302      	movs	r3, #2
 8000d56:	e0cd      	b.n	8000ef4 <HAL_ETH_TransmitFrame+0x1c0>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2202      	movs	r2, #2
 8000d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d109      	bne.n	8000d82 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2201      	movs	r2, #1
 8000d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e0b8      	b.n	8000ef4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	da09      	bge.n	8000da0 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2212      	movs	r2, #18
 8000d90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e0a9      	b.n	8000ef4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d915      	bls.n	8000dd6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	4a54      	ldr	r2, [pc, #336]	; (8000f00 <HAL_ETH_TransmitFrame+0x1cc>)
 8000dae:	fba2 2303 	umull	r2, r3, r2, r3
 8000db2:	0a9b      	lsrs	r3, r3, #10
 8000db4:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8000db6:	683a      	ldr	r2, [r7, #0]
 8000db8:	4b51      	ldr	r3, [pc, #324]	; (8000f00 <HAL_ETH_TransmitFrame+0x1cc>)
 8000dba:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbe:	0a9b      	lsrs	r3, r3, #10
 8000dc0:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8000dc4:	fb01 f303 	mul.w	r3, r1, r3
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d005      	beq.n	8000dda <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	e001      	b.n	8000dda <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b01      	cmp	r3, #1
 8000dde:	d11c      	bne.n	8000e1a <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dea:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8000dee:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	683a      	ldr	r2, [r7, #0]
 8000df6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000dfa:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e0a:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e10:	68db      	ldr	r3, [r3, #12]
 8000e12:	461a      	mov	r2, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e18:	e04b      	b.n	8000eb2 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	e044      	b.n	8000eaa <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e2a:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e2e:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d107      	bne.n	8000e46 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e44:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e4a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000e4e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d116      	bne.n	8000e88 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e64:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000e68:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4a25      	ldr	r2, [pc, #148]	; (8000f04 <HAL_ETH_TransmitFrame+0x1d0>)
 8000e6e:	fb02 f203 	mul.w	r2, r2, r3
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	4413      	add	r3, r2
 8000e76:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8000e7a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e80:	68fa      	ldr	r2, [r7, #12]
 8000e82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8000e86:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000e96:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	613b      	str	r3, [r7, #16]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	429a      	cmp	r2, r3
 8000eb0:	d3b6      	bcc.n	8000e20 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000eba:	3314      	adds	r3, #20
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ece:	3314      	adds	r3, #20
 8000ed0:	2204      	movs	r2, #4
 8000ed2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000edc:	3304      	adds	r3, #4
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2200      	movs	r2, #0
 8000eee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8000ef2:	2300      	movs	r3, #0
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	ac02b00b 	.word	0xac02b00b
 8000f04:	fffffa0c 	.word	0xfffffa0c

08000f08 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e074      	b.n	800100c <HAL_ETH_GetReceivedFrame_IT+0x104>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2201      	movs	r2, #1
 8000f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000f32:	e05a      	b.n	8000fea <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f48:	d10d      	bne.n	8000f66 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2201      	movs	r2, #1
 8000f56:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	629a      	str	r2, [r3, #40]	; 0x28
 8000f64:	e041      	b.n	8000fea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d10b      	bne.n	8000f8c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f78:	1c5a      	adds	r2, r3, #1
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	461a      	mov	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	629a      	str	r2, [r3, #40]	; 0x28
 8000f8a:	e02e      	b.n	8000fea <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f98:	1c5a      	adds	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d103      	bne.n	8000fae <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0c1b      	lsrs	r3, r3, #16
 8000fb6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000fba:	1f1a      	subs	r2, r3, #4
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e010      	b.n	800100c <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db02      	blt.n	8000ffa <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	d99c      	bls.n	8000f34 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2200      	movs	r2, #0
 8001006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
}
 800100c:	4618      	mov	r0, r3
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001028:	3314      	adds	r3, #20
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001030:	2b40      	cmp	r3, #64	; 0x40
 8001032:	d112      	bne.n	800105a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f015 ff6b 	bl	8016f10 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001042:	3314      	adds	r3, #20
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001058:	e01b      	b.n	8001092 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001062:	3314      	adds	r3, #20
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	2b01      	cmp	r3, #1
 800106c:	d111      	bne.n	8001092 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f000 f839 	bl	80010e6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800107c:	3314      	adds	r3, #20
 800107e:	2201      	movs	r2, #1
 8001080:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800109a:	3314      	adds	r3, #20
 800109c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010a0:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010aa:	3314      	adds	r3, #20
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010b6:	d112      	bne.n	80010de <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f000 f81e 	bl	80010fa <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80010c6:	3314      	adds	r3, #20
 80010c8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80010cc:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2201      	movs	r2, #1
 80010d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2200      	movs	r2, #0
 80010da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80010de:	bf00      	nop
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}

080010e6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80010ee:	bf00      	nop
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	460b      	mov	r3, r1
 8001118:	607a      	str	r2, [r7, #4]
 800111a:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001120:	2300      	movs	r3, #0
 8001122:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b82      	cmp	r3, #130	; 0x82
 800112e:	d101      	bne.n	8001134 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001130:	2302      	movs	r3, #2
 8001132:	e050      	b.n	80011d6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2282      	movs	r2, #130	; 0x82
 8001138:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 031c 	and.w	r3, r3, #28
 800114a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	8a1b      	ldrh	r3, [r3, #16]
 8001150:	02db      	lsls	r3, r3, #11
 8001152:	b29b      	uxth	r3, r3
 8001154:	697a      	ldr	r2, [r7, #20]
 8001156:	4313      	orrs	r3, r2
 8001158:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800115a:	897b      	ldrh	r3, [r7, #10]
 800115c:	019b      	lsls	r3, r3, #6
 800115e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001162:	697a      	ldr	r2, [r7, #20]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	f023 0302 	bic.w	r3, r3, #2
 800116e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	f043 0301 	orr.w	r3, r3, #1
 8001176:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001180:	f7ff fa54 	bl	800062c <HAL_GetTick>
 8001184:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001186:	e015      	b.n	80011b4 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001188:	f7ff fa50 	bl	800062c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001196:	d309      	bcc.n	80011ac <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2201      	movs	r2, #1
 800119c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e014      	b.n	80011d6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	691b      	ldr	r3, [r3, #16]
 80011b2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1e4      	bne.n	8001188 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	695b      	ldr	r3, [r3, #20]
 80011c4:	b29b      	uxth	r3, r3
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b086      	sub	sp, #24
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	460b      	mov	r3, r1
 80011e8:	607a      	str	r2, [r7, #4]
 80011ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80011fa:	b2db      	uxtb	r3, r3
 80011fc:	2b42      	cmp	r3, #66	; 0x42
 80011fe:	d101      	bne.n	8001204 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001200:	2302      	movs	r3, #2
 8001202:	e04e      	b.n	80012a2 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2242      	movs	r2, #66	; 0x42
 8001208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001214:	697b      	ldr	r3, [r7, #20]
 8001216:	f003 031c 	and.w	r3, r3, #28
 800121a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	8a1b      	ldrh	r3, [r3, #16]
 8001220:	02db      	lsls	r3, r3, #11
 8001222:	b29b      	uxth	r3, r3
 8001224:	697a      	ldr	r2, [r7, #20]
 8001226:	4313      	orrs	r3, r2
 8001228:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 800122a:	897b      	ldrh	r3, [r7, #10]
 800122c:	019b      	lsls	r3, r3, #6
 800122e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	4313      	orrs	r3, r2
 8001236:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f043 0302 	orr.w	r3, r3, #2
 800123e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	b29a      	uxth	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800125a:	f7ff f9e7 	bl	800062c <HAL_GetTick>
 800125e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001260:	e015      	b.n	800128e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001262:	f7ff f9e3 	bl	800062c <HAL_GetTick>
 8001266:	4602      	mov	r2, r0
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	1ad3      	subs	r3, r2, r3
 800126c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001270:	d309      	bcc.n	8001286 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e00d      	b.n	80012a2 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	691b      	ldr	r3, [r3, #16]
 800128c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1e4      	bne.n	8001262 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80012a0:	2300      	movs	r3, #0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d101      	bne.n	80012c0 <HAL_ETH_Start+0x16>
 80012bc:	2302      	movs	r3, #2
 80012be:	e01f      	b.n	8001300 <HAL_ETH_Start+0x56>
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2201      	movs	r2, #1
 80012c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 fb45 	bl	8001960 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f000 fb7c 	bl	80019d4 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f000 fc13 	bl	8001b08 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f000 fbb0 	bl	8001a48 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f000 fbdd 	bl	8001aa8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2201      	movs	r2, #1
 80012f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	2200      	movs	r2, #0
 80012fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80012fe:	2300      	movs	r3, #0
}
 8001300:	4618      	mov	r0, r3
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001316:	2b01      	cmp	r3, #1
 8001318:	d101      	bne.n	800131e <HAL_ETH_Stop+0x16>
 800131a:	2302      	movs	r3, #2
 800131c:	e01f      	b.n	800135e <HAL_ETH_Stop+0x56>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2202      	movs	r2, #2
 800132a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 fba2 	bl	8001a78 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 fbcf 	bl	8001ad8 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fb67 	bl	8001a0e <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fbe1 	bl	8001b08 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 fb27 	bl	800199a <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800137c:	2b01      	cmp	r3, #1
 800137e:	d101      	bne.n	8001384 <HAL_ETH_ConfigMAC+0x1c>
 8001380:	2302      	movs	r3, #2
 8001382:	e0e4      	b.n	800154e <HAL_ETH_ConfigMAC+0x1e6>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2201      	movs	r2, #1
 8001388:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2202      	movs	r2, #2
 8001390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	f000 80b1 	beq.w	80014fe <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	4b6c      	ldr	r3, [pc, #432]	; (8001558 <HAL_ETH_ConfigMAC+0x1f0>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80013b4:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80013ba:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80013c0:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80013c6:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80013cc:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80013d2:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80013d8:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80013de:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80013e4:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80013ea:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80013f0:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80013f6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff f918 	bl	8000644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	68fa      	ldr	r2, [r7, #12]
 800141a:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001424:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800142a:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001430:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001436:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 800143c:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001442:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800144e:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001450:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800145a:	2001      	movs	r0, #1
 800145c:	f7ff f8f2 	bl	8000644 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001470:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800147a:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001484:	68fa      	ldr	r2, [r7, #12]
 8001486:	f64f 7341 	movw	r3, #65345	; 0xff41
 800148a:	4013      	ands	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001498:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800149e:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80014a4:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80014aa:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80014b0:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	699b      	ldr	r3, [r3, #24]
 80014c6:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f7ff f8bb 	bl	8000644 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	430a      	orrs	r2, r1
 80014e4:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	69db      	ldr	r3, [r3, #28]
 80014ec:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f7ff f8a8 	bl	8000644 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	68fa      	ldr	r2, [r7, #12]
 80014fa:	61da      	str	r2, [r3, #28]
 80014fc:	e01e      	b.n	800153c <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800150c:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689a      	ldr	r2, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	4313      	orrs	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	68fa      	ldr	r2, [r7, #12]
 8001524:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800152e:	2001      	movs	r0, #1
 8001530:	f7ff f888 	bl	8000644 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	68fa      	ldr	r2, [r7, #12]
 800153a:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	ff20810f 	.word	0xff20810f

0800155c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b0b0      	sub	sp, #192	; 0xc0
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001566:	2300      	movs	r3, #0
 8001568:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d007      	beq.n	8001582 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001578:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001580:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001582:	2300      	movs	r3, #0
 8001584:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800158a:	2300      	movs	r3, #0
 800158c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800158e:	2300      	movs	r3, #0
 8001590:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001592:	2300      	movs	r3, #0
 8001594:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d103      	bne.n	80015aa <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80015a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015a6:	663b      	str	r3, [r7, #96]	; 0x60
 80015a8:	e001      	b.n	80015ae <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80015ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015b2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80015b4:	2300      	movs	r3, #0
 80015b6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80015b8:	2300      	movs	r3, #0
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80015c4:	2300      	movs	r3, #0
 80015c6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80015c8:	2340      	movs	r3, #64	; 0x40
 80015ca:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80015d8:	2300      	movs	r3, #0
 80015da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80015de:	2300      	movs	r3, #0
 80015e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80015fc:	2380      	movs	r3, #128	; 0x80
 80015fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800161a:	2300      	movs	r3, #0
 800161c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001630:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001634:	4bac      	ldr	r3, [pc, #688]	; (80018e8 <ETH_MACDMAConfig+0x38c>)
 8001636:	4013      	ands	r3, r2
 8001638:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800163c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800163e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001640:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001642:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001644:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001648:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800164e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001650:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001652:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001654:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001656:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800165c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800165e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001660:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001662:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001664:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001666:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001668:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800166a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800166c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800166e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001670:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001672:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001676:	4313      	orrs	r3, r2
 8001678:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001684:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001690:	2001      	movs	r0, #1
 8001692:	f7fe ffd7 	bl	8000644 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800169e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016a0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80016a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016a4:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 80016a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80016a8:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 80016aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80016ae:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80016b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80016b4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80016b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80016ba:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80016bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80016c0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80016c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80016cc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80016ce:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80016da:	2001      	movs	r0, #1
 80016dc:	f7fe ffb2 	bl	8000644 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80016e8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80016f2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80016fc:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001708:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800170c:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001710:	4013      	ands	r3, r2
 8001712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001716:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800171a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800171c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001720:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001722:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001726:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001728:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800172c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800172e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001732:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001734:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001738:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800173a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800173e:	4313      	orrs	r3, r2
 8001740:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800174c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001758:	2001      	movs	r0, #1
 800175a:	f7fe ff73 	bl	8000644 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001766:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001768:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800176c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001782:	2001      	movs	r0, #1
 8001784:	f7fe ff5e 	bl	8000644 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001790:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001796:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800179a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800179c:	2300      	movs	r3, #0
 800179e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80017a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80017a4:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80017a6:	2300      	movs	r3, #0
 80017a8:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80017ae:	2300      	movs	r3, #0
 80017b0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80017b6:	2304      	movs	r3, #4
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80017ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017be:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80017c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80017c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017ca:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80017cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80017d2:	2380      	movs	r3, #128	; 0x80
 80017d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80017d6:	2300      	movs	r3, #0
 80017d8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80017da:	2300      	movs	r3, #0
 80017dc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e6:	3318      	adds	r3, #24
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80017ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80017f2:	4b3e      	ldr	r3, [pc, #248]	; (80018ec <ETH_MACDMAConfig+0x390>)
 80017f4:	4013      	ands	r3, r2
 80017f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017fa:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80017fc:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80017fe:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001800:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001802:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001804:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001806:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001808:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 800180a:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 800180c:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800180e:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001810:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001812:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001816:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800181a:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800181c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001820:	4313      	orrs	r3, r2
 8001822:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800182e:	3318      	adds	r3, #24
 8001830:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001834:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	3318      	adds	r3, #24
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001846:	2001      	movs	r0, #1
 8001848:	f7fe fefc 	bl	8000644 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001854:	3318      	adds	r3, #24
 8001856:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800185a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800185c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001860:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001864:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001868:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800186c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800186e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001870:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001872:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001876:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001884:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001894:	2001      	movs	r0, #1
 8001896:	f7fe fed5 	bl	8000644 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80018a6:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	2b01      	cmp	r3, #1
 80018ae:	d10f      	bne.n	80018d0 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018b8:	331c      	adds	r3, #28
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80018c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80018c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018cc:	331c      	adds	r3, #28
 80018ce:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	461a      	mov	r2, r3
 80018d6:	2100      	movs	r1, #0
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f809 	bl	80018f0 <ETH_MACAddressConfig>
}
 80018de:	bf00      	nop
 80018e0:	37c0      	adds	r7, #192	; 0xc0
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	ff20810f 	.word	0xff20810f
 80018ec:	f8de3f23 	.word	0xf8de3f23

080018f0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b087      	sub	sp, #28
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3305      	adds	r3, #5
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	021b      	lsls	r3, r3, #8
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	3204      	adds	r2, #4
 8001908:	7812      	ldrb	r2, [r2, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	4b11      	ldr	r3, [pc, #68]	; (8001958 <ETH_MACAddressConfig+0x68>)
 8001912:	4413      	add	r3, r2
 8001914:	461a      	mov	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3303      	adds	r3, #3
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	061a      	lsls	r2, r3, #24
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	3302      	adds	r3, #2
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	431a      	orrs	r2, r3
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	3301      	adds	r3, #1
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	021b      	lsls	r3, r3, #8
 8001934:	4313      	orrs	r3, r2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	7812      	ldrb	r2, [r2, #0]
 800193a:	4313      	orrs	r3, r2
 800193c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800193e:	68ba      	ldr	r2, [r7, #8]
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <ETH_MACAddressConfig+0x6c>)
 8001942:	4413      	add	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	6013      	str	r3, [r2, #0]
}
 800194a:	bf00      	nop
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40028040 	.word	0x40028040
 800195c:	40028044 	.word	0x40028044

08001960 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001968:	2300      	movs	r3, #0
 800196a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f042 0208 	orr.w	r2, r2, #8
 800197a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001984:	2001      	movs	r0, #1
 8001986:	f000 f8e9 	bl	8001b5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68fa      	ldr	r2, [r7, #12]
 8001990:	601a      	str	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f022 0208 	bic.w	r2, r2, #8
 80019b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80019be:	2001      	movs	r0, #1
 80019c0:	f000 f8cc 	bl	8001b5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	68fa      	ldr	r2, [r7, #12]
 80019ca:	601a      	str	r2, [r3, #0]
}
 80019cc:	bf00      	nop
 80019ce:	3710      	adds	r7, #16
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80019dc:	2300      	movs	r3, #0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0204 	orr.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80019f8:	2001      	movs	r0, #1
 80019fa:	f000 f8af 	bl	8001b5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	68fa      	ldr	r2, [r7, #12]
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001a0e:	b580      	push	{r7, lr}
 8001a10:	b084      	sub	sp, #16
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 0204 	bic.w	r2, r2, #4
 8001a28:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001a32:	2001      	movs	r0, #1
 8001a34:	f000 f892 	bl	8001b5c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	601a      	str	r2, [r3, #0]
}
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a58:	3318      	adds	r3, #24
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	3318      	adds	r3, #24
 8001a6a:	601a      	str	r2, [r3, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	3318      	adds	r3, #24
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a98:	3318      	adds	r3, #24
 8001a9a:	601a      	str	r2, [r3, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ab8:	3318      	adds	r3, #24
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f042 0202 	orr.w	r2, r2, #2
 8001ac4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac8:	3318      	adds	r3, #24
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	3318      	adds	r3, #24
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f022 0202 	bic.w	r2, r2, #2
 8001af4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af8:	3318      	adds	r3, #24
 8001afa:	601a      	str	r2, [r3, #0]
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1c:	3318      	adds	r3, #24
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b38:	3318      	adds	r3, #24
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f000 f80c 	bl	8001b5c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4e:	3318      	adds	r3, #24
 8001b50:	601a      	str	r2, [r3, #0]
}
 8001b52:	bf00      	nop
 8001b54:	3710      	adds	r7, #16
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
	...

08001b5c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <ETH_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <ETH_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001b78:	bf00      	nop
  } 
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <ETH_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	3714      	adds	r7, #20
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr
 8001b90:	2000001c 	.word	0x2000001c
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
 8001bb2:	e177      	b.n	8001ea4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bb4:	2201      	movs	r2, #1
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	697b      	ldr	r3, [r7, #20]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	f040 8166 	bne.w	8001e9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_GPIO_Init+0x5a>
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d007      	beq.n	8001bf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001be6:	2b11      	cmp	r3, #17
 8001be8:	d003      	beq.n	8001bf2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	2b12      	cmp	r3, #18
 8001bf0:	d130      	bne.n	8001c54 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	005b      	lsls	r3, r3, #1
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	69ba      	ldr	r2, [r7, #24]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c28:	2201      	movs	r2, #1
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	43db      	mvns	r3, r3
 8001c32:	69ba      	ldr	r2, [r7, #24]
 8001c34:	4013      	ands	r3, r2
 8001c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	091b      	lsrs	r3, r3, #4
 8001c3e:	f003 0201 	and.w	r2, r3, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d003      	beq.n	8001c94 <HAL_GPIO_Init+0xfc>
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b12      	cmp	r3, #18
 8001c92:	d123      	bne.n	8001cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ca2:	69fb      	ldr	r3, [r7, #28]
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	220f      	movs	r2, #15
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	691a      	ldr	r2, [r3, #16]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	08da      	lsrs	r2, r3, #3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3208      	adds	r2, #8
 8001cd6:	69b9      	ldr	r1, [r7, #24]
 8001cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f003 0203 	and.w	r2, r3, #3
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	f000 80c0 	beq.w	8001e9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	4b65      	ldr	r3, [pc, #404]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a64      	ldr	r2, [pc, #400]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b62      	ldr	r3, [pc, #392]	; (8001eb8 <HAL_GPIO_Init+0x320>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	60fb      	str	r3, [r7, #12]
 8001d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d3a:	4a60      	ldr	r2, [pc, #384]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	089b      	lsrs	r3, r3, #2
 8001d40:	3302      	adds	r3, #2
 8001d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	220f      	movs	r2, #15
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	69ba      	ldr	r2, [r7, #24]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a57      	ldr	r2, [pc, #348]	; (8001ec0 <HAL_GPIO_Init+0x328>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d037      	beq.n	8001dd6 <HAL_GPIO_Init+0x23e>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a56      	ldr	r2, [pc, #344]	; (8001ec4 <HAL_GPIO_Init+0x32c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d031      	beq.n	8001dd2 <HAL_GPIO_Init+0x23a>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a55      	ldr	r2, [pc, #340]	; (8001ec8 <HAL_GPIO_Init+0x330>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d02b      	beq.n	8001dce <HAL_GPIO_Init+0x236>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a54      	ldr	r2, [pc, #336]	; (8001ecc <HAL_GPIO_Init+0x334>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d025      	beq.n	8001dca <HAL_GPIO_Init+0x232>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a53      	ldr	r2, [pc, #332]	; (8001ed0 <HAL_GPIO_Init+0x338>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d01f      	beq.n	8001dc6 <HAL_GPIO_Init+0x22e>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	; (8001ed4 <HAL_GPIO_Init+0x33c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d019      	beq.n	8001dc2 <HAL_GPIO_Init+0x22a>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a51      	ldr	r2, [pc, #324]	; (8001ed8 <HAL_GPIO_Init+0x340>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d013      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a50      	ldr	r2, [pc, #320]	; (8001edc <HAL_GPIO_Init+0x344>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d00d      	beq.n	8001dba <HAL_GPIO_Init+0x222>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	; (8001ee0 <HAL_GPIO_Init+0x348>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d007      	beq.n	8001db6 <HAL_GPIO_Init+0x21e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	; (8001ee4 <HAL_GPIO_Init+0x34c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d101      	bne.n	8001db2 <HAL_GPIO_Init+0x21a>
 8001dae:	2309      	movs	r3, #9
 8001db0:	e012      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db2:	230a      	movs	r3, #10
 8001db4:	e010      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001db6:	2308      	movs	r3, #8
 8001db8:	e00e      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00c      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dbe:	2306      	movs	r3, #6
 8001dc0:	e00a      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc2:	2305      	movs	r3, #5
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x240>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4934      	ldr	r1, [pc, #208]	; (8001ebc <HAL_GPIO_Init+0x324>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001df6:	4b3c      	ldr	r3, [pc, #240]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e1a:	4a33      	ldr	r2, [pc, #204]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e20:	4b31      	ldr	r3, [pc, #196]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e44:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e6e:	4a1e      	ldr	r2, [pc, #120]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e74:	4b1c      	ldr	r3, [pc, #112]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e98:	4a13      	ldr	r2, [pc, #76]	; (8001ee8 <HAL_GPIO_Init+0x350>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f ae84 	bls.w	8001bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	3724      	adds	r7, #36	; 0x24
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40021c00 	.word	0x40021c00
 8001ee0:	40022000 	.word	0x40022000
 8001ee4:	40022400 	.word	0x40022400
 8001ee8:	40013c00 	.word	0x40013c00

08001eec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	807b      	strh	r3, [r7, #2]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001efc:	787b      	ldrb	r3, [r7, #1]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f02:	887a      	ldrh	r2, [r7, #2]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f08:	e003      	b.n	8001f12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f0a:	887b      	ldrh	r3, [r7, #2]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	619a      	str	r2, [r3, #24]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	460b      	mov	r3, r1
 8001f28:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	695a      	ldr	r2, [r3, #20]
 8001f2e:	887b      	ldrh	r3, [r7, #2]
 8001f30:	401a      	ands	r2, r3
 8001f32:	887b      	ldrh	r3, [r7, #2]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d104      	bne.n	8001f42 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f38:	887b      	ldrh	r3, [r7, #2]
 8001f3a:	041a      	lsls	r2, r3, #16
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001f40:	e002      	b.n	8001f48 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001f42:	887a      	ldrh	r2, [r7, #2]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	619a      	str	r2, [r3, #24]
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b086      	sub	sp, #24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e25b      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d075      	beq.n	800205e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f72:	4ba3      	ldr	r3, [pc, #652]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f003 030c 	and.w	r3, r3, #12
 8001f7a:	2b04      	cmp	r3, #4
 8001f7c:	d00c      	beq.n	8001f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f7e:	4ba0      	ldr	r3, [pc, #640]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f86:	2b08      	cmp	r3, #8
 8001f88:	d112      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f8a:	4b9d      	ldr	r3, [pc, #628]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f96:	d10b      	bne.n	8001fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f98:	4b99      	ldr	r3, [pc, #612]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d05b      	beq.n	800205c <HAL_RCC_OscConfig+0x108>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d157      	bne.n	800205c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e236      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fb8:	d106      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x74>
 8001fba:	4b91      	ldr	r3, [pc, #580]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a90      	ldr	r2, [pc, #576]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fc4:	6013      	str	r3, [r2, #0]
 8001fc6:	e01d      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fd0:	d10c      	bne.n	8001fec <HAL_RCC_OscConfig+0x98>
 8001fd2:	4b8b      	ldr	r3, [pc, #556]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a8a      	ldr	r2, [pc, #552]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b88      	ldr	r3, [pc, #544]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a87      	ldr	r2, [pc, #540]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	e00b      	b.n	8002004 <HAL_RCC_OscConfig+0xb0>
 8001fec:	4b84      	ldr	r3, [pc, #528]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a83      	ldr	r2, [pc, #524]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b81      	ldr	r3, [pc, #516]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a80      	ldr	r2, [pc, #512]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8001ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d013      	beq.n	8002034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800200c:	f7fe fb0e 	bl	800062c <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002012:	e008      	b.n	8002026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe fb0a 	bl	800062c <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b64      	cmp	r3, #100	; 0x64
 8002020:	d901      	bls.n	8002026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e1fb      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b76      	ldr	r3, [pc, #472]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d0f0      	beq.n	8002014 <HAL_RCC_OscConfig+0xc0>
 8002032:	e014      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002034:	f7fe fafa 	bl	800062c <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800203c:	f7fe faf6 	bl	800062c <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b64      	cmp	r3, #100	; 0x64
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e1e7      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800204e:	4b6c      	ldr	r3, [pc, #432]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d1f0      	bne.n	800203c <HAL_RCC_OscConfig+0xe8>
 800205a:	e000      	b.n	800205e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800205c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d063      	beq.n	8002132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800206a:	4b65      	ldr	r3, [pc, #404]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002076:	4b62      	ldr	r3, [pc, #392]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800207e:	2b08      	cmp	r3, #8
 8002080:	d11c      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002082:	4b5f      	ldr	r3, [pc, #380]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d116      	bne.n	80020bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800208e:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e1bb      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020a6:	4b56      	ldr	r3, [pc, #344]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4952      	ldr	r1, [pc, #328]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020ba:	e03a      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d020      	beq.n	8002106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020c4:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <HAL_RCC_OscConfig+0x2b0>)
 80020c6:	2201      	movs	r2, #1
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ca:	f7fe faaf 	bl	800062c <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d2:	f7fe faab 	bl	800062c <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e19c      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020e4:	4b46      	ldr	r3, [pc, #280]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d0f0      	beq.n	80020d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020f0:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4940      	ldr	r1, [pc, #256]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002100:	4313      	orrs	r3, r2
 8002102:	600b      	str	r3, [r1, #0]
 8002104:	e015      	b.n	8002132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002106:	4b3f      	ldr	r3, [pc, #252]	; (8002204 <HAL_RCC_OscConfig+0x2b0>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7fe fa8e 	bl	800062c <HAL_GetTick>
 8002110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002114:	f7fe fa8a 	bl	800062c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e17b      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0308 	and.w	r3, r3, #8
 800213a:	2b00      	cmp	r3, #0
 800213c:	d030      	beq.n	80021a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d016      	beq.n	8002174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002146:	4b30      	ldr	r3, [pc, #192]	; (8002208 <HAL_RCC_OscConfig+0x2b4>)
 8002148:	2201      	movs	r2, #1
 800214a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800214c:	f7fe fa6e 	bl	800062c <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002154:	f7fe fa6a 	bl	800062c <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e15b      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f0      	beq.n	8002154 <HAL_RCC_OscConfig+0x200>
 8002172:	e015      	b.n	80021a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002174:	4b24      	ldr	r3, [pc, #144]	; (8002208 <HAL_RCC_OscConfig+0x2b4>)
 8002176:	2200      	movs	r2, #0
 8002178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800217a:	f7fe fa57 	bl	800062c <HAL_GetTick>
 800217e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002182:	f7fe fa53 	bl	800062c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e144      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002194:	4b1a      	ldr	r3, [pc, #104]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 8002196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f0      	bne.n	8002182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 0304 	and.w	r3, r3, #4
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 80a0 	beq.w	80022ee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021ae:	2300      	movs	r3, #0
 80021b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60bb      	str	r3, [r7, #8]
 80021c2:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	4a0e      	ldr	r2, [pc, #56]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80021c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021cc:	6413      	str	r3, [r2, #64]	; 0x40
 80021ce:	4b0c      	ldr	r3, [pc, #48]	; (8002200 <HAL_RCC_OscConfig+0x2ac>)
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021da:	2301      	movs	r3, #1
 80021dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021de:	4b0b      	ldr	r3, [pc, #44]	; (800220c <HAL_RCC_OscConfig+0x2b8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d121      	bne.n	800222e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021ea:	4b08      	ldr	r3, [pc, #32]	; (800220c <HAL_RCC_OscConfig+0x2b8>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a07      	ldr	r2, [pc, #28]	; (800220c <HAL_RCC_OscConfig+0x2b8>)
 80021f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021f6:	f7fe fa19 	bl	800062c <HAL_GetTick>
 80021fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021fc:	e011      	b.n	8002222 <HAL_RCC_OscConfig+0x2ce>
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	42470000 	.word	0x42470000
 8002208:	42470e80 	.word	0x42470e80
 800220c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002210:	f7fe fa0c 	bl	800062c <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e0fd      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002222:	4b81      	ldr	r3, [pc, #516]	; (8002428 <HAL_RCC_OscConfig+0x4d4>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	2b01      	cmp	r3, #1
 8002234:	d106      	bne.n	8002244 <HAL_RCC_OscConfig+0x2f0>
 8002236:	4b7d      	ldr	r3, [pc, #500]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a7c      	ldr	r2, [pc, #496]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	e01c      	b.n	800227e <HAL_RCC_OscConfig+0x32a>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	2b05      	cmp	r3, #5
 800224a:	d10c      	bne.n	8002266 <HAL_RCC_OscConfig+0x312>
 800224c:	4b77      	ldr	r3, [pc, #476]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	4a76      	ldr	r2, [pc, #472]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002252:	f043 0304 	orr.w	r3, r3, #4
 8002256:	6713      	str	r3, [r2, #112]	; 0x70
 8002258:	4b74      	ldr	r3, [pc, #464]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800225a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225c:	4a73      	ldr	r2, [pc, #460]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6713      	str	r3, [r2, #112]	; 0x70
 8002264:	e00b      	b.n	800227e <HAL_RCC_OscConfig+0x32a>
 8002266:	4b71      	ldr	r3, [pc, #452]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800226a:	4a70      	ldr	r2, [pc, #448]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800226c:	f023 0301 	bic.w	r3, r3, #1
 8002270:	6713      	str	r3, [r2, #112]	; 0x70
 8002272:	4b6e      	ldr	r3, [pc, #440]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002276:	4a6d      	ldr	r2, [pc, #436]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002278:	f023 0304 	bic.w	r3, r3, #4
 800227c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d015      	beq.n	80022b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002286:	f7fe f9d1 	bl	800062c <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe f9cd 	bl	800062c <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e0bc      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a4:	4b61      	ldr	r3, [pc, #388]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80022a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0ee      	beq.n	800228e <HAL_RCC_OscConfig+0x33a>
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b2:	f7fe f9bb 	bl	800062c <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022b8:	e00a      	b.n	80022d0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022ba:	f7fe f9b7 	bl	800062c <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e0a6      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d0:	4b56      	ldr	r3, [pc, #344]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80022d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1ee      	bne.n	80022ba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022dc:	7dfb      	ldrb	r3, [r7, #23]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d105      	bne.n	80022ee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e2:	4b52      	ldr	r3, [pc, #328]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	4a51      	ldr	r2, [pc, #324]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80022e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f000 8092 	beq.w	800241c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	2b08      	cmp	r3, #8
 8002302:	d05c      	beq.n	80023be <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	2b02      	cmp	r3, #2
 800230a:	d141      	bne.n	8002390 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <HAL_RCC_OscConfig+0x4dc>)
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe f98b 	bl	800062c <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800231a:	f7fe f987 	bl	800062c <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e078      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800232c:	4b3f      	ldr	r3, [pc, #252]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d1f0      	bne.n	800231a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69da      	ldr	r2, [r3, #28]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002346:	019b      	lsls	r3, r3, #6
 8002348:	431a      	orrs	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234e:	085b      	lsrs	r3, r3, #1
 8002350:	3b01      	subs	r3, #1
 8002352:	041b      	lsls	r3, r3, #16
 8002354:	431a      	orrs	r2, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800235a:	061b      	lsls	r3, r3, #24
 800235c:	4933      	ldr	r1, [pc, #204]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 800235e:	4313      	orrs	r3, r2
 8002360:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002362:	4b33      	ldr	r3, [pc, #204]	; (8002430 <HAL_RCC_OscConfig+0x4dc>)
 8002364:	2201      	movs	r2, #1
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002368:	f7fe f960 	bl	800062c <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002370:	f7fe f95c 	bl	800062c <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e04d      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002382:	4b2a      	ldr	r3, [pc, #168]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x41c>
 800238e:	e045      	b.n	800241c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_OscConfig+0x4dc>)
 8002392:	2200      	movs	r2, #0
 8002394:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002396:	f7fe f949 	bl	800062c <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239e:	f7fe f945 	bl	800062c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e036      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80023b0:	4b1e      	ldr	r3, [pc, #120]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f0      	bne.n	800239e <HAL_RCC_OscConfig+0x44a>
 80023bc:	e02e      	b.n	800241c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	699b      	ldr	r3, [r3, #24]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e029      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023ca:	4b18      	ldr	r3, [pc, #96]	; (800242c <HAL_RCC_OscConfig+0x4d8>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11c      	bne.n	8002418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d115      	bne.n	8002418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80023ec:	68fa      	ldr	r2, [r7, #12]
 80023ee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023f2:	4013      	ands	r3, r2
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d10d      	bne.n	8002418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002406:	429a      	cmp	r2, r3
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002414:	429a      	cmp	r2, r3
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e000      	b.n	800241e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	40007000 	.word	0x40007000
 800242c:	40023800 	.word	0x40023800
 8002430:	42470060 	.word	0x42470060

08002434 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e0cc      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002448:	4b68      	ldr	r3, [pc, #416]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d90c      	bls.n	8002470 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002456:	4b65      	ldr	r3, [pc, #404]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e0b8      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	2b00      	cmp	r3, #0
 800247a:	d020      	beq.n	80024be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d005      	beq.n	8002494 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002488:	4b59      	ldr	r3, [pc, #356]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	4a58      	ldr	r2, [pc, #352]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002492:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0308 	and.w	r3, r3, #8
 800249c:	2b00      	cmp	r3, #0
 800249e:	d005      	beq.n	80024ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a0:	4b53      	ldr	r3, [pc, #332]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	4a52      	ldr	r2, [pc, #328]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80024aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024ac:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	494d      	ldr	r1, [pc, #308]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d044      	beq.n	8002554 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d107      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024d2:	4b47      	ldr	r3, [pc, #284]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d119      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e07f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d003      	beq.n	80024f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ee:	2b03      	cmp	r3, #3
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024f2:	4b3f      	ldr	r3, [pc, #252]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002502:	4b3b      	ldr	r3, [pc, #236]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e067      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002512:	4b37      	ldr	r3, [pc, #220]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f023 0203 	bic.w	r2, r3, #3
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	4934      	ldr	r1, [pc, #208]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002520:	4313      	orrs	r3, r2
 8002522:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002524:	f7fe f882 	bl	800062c <HAL_GetTick>
 8002528:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800252a:	e00a      	b.n	8002542 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800252c:	f7fe f87e 	bl	800062c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	f241 3288 	movw	r2, #5000	; 0x1388
 800253a:	4293      	cmp	r3, r2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e04f      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	4b2b      	ldr	r3, [pc, #172]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 020c 	and.w	r2, r3, #12
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	429a      	cmp	r2, r3
 8002552:	d1eb      	bne.n	800252c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 030f 	and.w	r3, r3, #15
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	429a      	cmp	r2, r3
 8002560:	d20c      	bcs.n	800257c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002562:	4b22      	ldr	r3, [pc, #136]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800256a:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 030f 	and.w	r3, r3, #15
 8002572:	683a      	ldr	r2, [r7, #0]
 8002574:	429a      	cmp	r2, r3
 8002576:	d001      	beq.n	800257c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e032      	b.n	80025e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b00      	cmp	r3, #0
 8002586:	d008      	beq.n	800259a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002588:	4b19      	ldr	r3, [pc, #100]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	4916      	ldr	r1, [pc, #88]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d009      	beq.n	80025ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025a6:	4b12      	ldr	r3, [pc, #72]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	00db      	lsls	r3, r3, #3
 80025b4:	490e      	ldr	r1, [pc, #56]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ba:	f000 f821 	bl	8002600 <HAL_RCC_GetSysClockFreq>
 80025be:	4601      	mov	r1, r0
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_RCC_ClockConfig+0x1bc>)
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	091b      	lsrs	r3, r3, #4
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	5cd3      	ldrb	r3, [r2, r3]
 80025ce:	fa21 f303 	lsr.w	r3, r1, r3
 80025d2:	4a09      	ldr	r2, [pc, #36]	; (80025f8 <HAL_RCC_ClockConfig+0x1c4>)
 80025d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025d6:	4b09      	ldr	r3, [pc, #36]	; (80025fc <HAL_RCC_ClockConfig+0x1c8>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f015 fb2c 	bl	8017c38 <HAL_InitTick>

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00
 80025f0:	40023800 	.word	0x40023800
 80025f4:	0801cb28 	.word	0x0801cb28
 80025f8:	2000001c 	.word	0x2000001c
 80025fc:	20000000 	.word	0x20000000

08002600 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002600:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	607b      	str	r3, [r7, #4]
 800260a:	2300      	movs	r3, #0
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	2300      	movs	r3, #0
 8002610:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002612:	2300      	movs	r3, #0
 8002614:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002616:	4b63      	ldr	r3, [pc, #396]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d007      	beq.n	8002632 <HAL_RCC_GetSysClockFreq+0x32>
 8002622:	2b08      	cmp	r3, #8
 8002624:	d008      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0x38>
 8002626:	2b00      	cmp	r3, #0
 8002628:	f040 80b4 	bne.w	8002794 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800262c:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800262e:	60bb      	str	r3, [r7, #8]
       break;
 8002630:	e0b3      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002632:	4b5e      	ldr	r3, [pc, #376]	; (80027ac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002634:	60bb      	str	r3, [r7, #8]
      break;
 8002636:	e0b0      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002638:	4b5a      	ldr	r3, [pc, #360]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002640:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002642:	4b58      	ldr	r3, [pc, #352]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d04a      	beq.n	80026e4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264e:	4b55      	ldr	r3, [pc, #340]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	099b      	lsrs	r3, r3, #6
 8002654:	f04f 0400 	mov.w	r4, #0
 8002658:	f240 11ff 	movw	r1, #511	; 0x1ff
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	ea03 0501 	and.w	r5, r3, r1
 8002664:	ea04 0602 	and.w	r6, r4, r2
 8002668:	4629      	mov	r1, r5
 800266a:	4632      	mov	r2, r6
 800266c:	f04f 0300 	mov.w	r3, #0
 8002670:	f04f 0400 	mov.w	r4, #0
 8002674:	0154      	lsls	r4, r2, #5
 8002676:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800267a:	014b      	lsls	r3, r1, #5
 800267c:	4619      	mov	r1, r3
 800267e:	4622      	mov	r2, r4
 8002680:	1b49      	subs	r1, r1, r5
 8002682:	eb62 0206 	sbc.w	r2, r2, r6
 8002686:	f04f 0300 	mov.w	r3, #0
 800268a:	f04f 0400 	mov.w	r4, #0
 800268e:	0194      	lsls	r4, r2, #6
 8002690:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002694:	018b      	lsls	r3, r1, #6
 8002696:	1a5b      	subs	r3, r3, r1
 8002698:	eb64 0402 	sbc.w	r4, r4, r2
 800269c:	f04f 0100 	mov.w	r1, #0
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	00e2      	lsls	r2, r4, #3
 80026a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80026aa:	00d9      	lsls	r1, r3, #3
 80026ac:	460b      	mov	r3, r1
 80026ae:	4614      	mov	r4, r2
 80026b0:	195b      	adds	r3, r3, r5
 80026b2:	eb44 0406 	adc.w	r4, r4, r6
 80026b6:	f04f 0100 	mov.w	r1, #0
 80026ba:	f04f 0200 	mov.w	r2, #0
 80026be:	0262      	lsls	r2, r4, #9
 80026c0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80026c4:	0259      	lsls	r1, r3, #9
 80026c6:	460b      	mov	r3, r1
 80026c8:	4614      	mov	r4, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	4621      	mov	r1, r4
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f04f 0400 	mov.w	r4, #0
 80026d4:	461a      	mov	r2, r3
 80026d6:	4623      	mov	r3, r4
 80026d8:	f7fd fdf2 	bl	80002c0 <__aeabi_uldivmod>
 80026dc:	4603      	mov	r3, r0
 80026de:	460c      	mov	r4, r1
 80026e0:	60fb      	str	r3, [r7, #12]
 80026e2:	e049      	b.n	8002778 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	099b      	lsrs	r3, r3, #6
 80026ea:	f04f 0400 	mov.w	r4, #0
 80026ee:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	ea03 0501 	and.w	r5, r3, r1
 80026fa:	ea04 0602 	and.w	r6, r4, r2
 80026fe:	4629      	mov	r1, r5
 8002700:	4632      	mov	r2, r6
 8002702:	f04f 0300 	mov.w	r3, #0
 8002706:	f04f 0400 	mov.w	r4, #0
 800270a:	0154      	lsls	r4, r2, #5
 800270c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002710:	014b      	lsls	r3, r1, #5
 8002712:	4619      	mov	r1, r3
 8002714:	4622      	mov	r2, r4
 8002716:	1b49      	subs	r1, r1, r5
 8002718:	eb62 0206 	sbc.w	r2, r2, r6
 800271c:	f04f 0300 	mov.w	r3, #0
 8002720:	f04f 0400 	mov.w	r4, #0
 8002724:	0194      	lsls	r4, r2, #6
 8002726:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800272a:	018b      	lsls	r3, r1, #6
 800272c:	1a5b      	subs	r3, r3, r1
 800272e:	eb64 0402 	sbc.w	r4, r4, r2
 8002732:	f04f 0100 	mov.w	r1, #0
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	00e2      	lsls	r2, r4, #3
 800273c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002740:	00d9      	lsls	r1, r3, #3
 8002742:	460b      	mov	r3, r1
 8002744:	4614      	mov	r4, r2
 8002746:	195b      	adds	r3, r3, r5
 8002748:	eb44 0406 	adc.w	r4, r4, r6
 800274c:	f04f 0100 	mov.w	r1, #0
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	02a2      	lsls	r2, r4, #10
 8002756:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800275a:	0299      	lsls	r1, r3, #10
 800275c:	460b      	mov	r3, r1
 800275e:	4614      	mov	r4, r2
 8002760:	4618      	mov	r0, r3
 8002762:	4621      	mov	r1, r4
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f04f 0400 	mov.w	r4, #0
 800276a:	461a      	mov	r2, r3
 800276c:	4623      	mov	r3, r4
 800276e:	f7fd fda7 	bl	80002c0 <__aeabi_uldivmod>
 8002772:	4603      	mov	r3, r0
 8002774:	460c      	mov	r4, r1
 8002776:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	0c1b      	lsrs	r3, r3, #16
 800277e:	f003 0303 	and.w	r3, r3, #3
 8002782:	3301      	adds	r3, #1
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002790:	60bb      	str	r3, [r7, #8]
      break;
 8002792:	e002      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002794:	4b04      	ldr	r3, [pc, #16]	; (80027a8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002796:	60bb      	str	r3, [r7, #8]
      break;
 8002798:	bf00      	nop
    }
  }
  return sysclockfreq;
 800279a:	68bb      	ldr	r3, [r7, #8]
}
 800279c:	4618      	mov	r0, r3
 800279e:	3714      	adds	r7, #20
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027a4:	40023800 	.word	0x40023800
 80027a8:	00f42400 	.word	0x00f42400
 80027ac:	007a1200 	.word	0x007a1200

080027b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027b4:	4b03      	ldr	r3, [pc, #12]	; (80027c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027b6:	681b      	ldr	r3, [r3, #0]
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	2000001c 	.word	0x2000001c

080027c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027cc:	f7ff fff0 	bl	80027b0 <HAL_RCC_GetHCLKFreq>
 80027d0:	4601      	mov	r1, r0
 80027d2:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	0a9b      	lsrs	r3, r3, #10
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	4a03      	ldr	r2, [pc, #12]	; (80027ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	40023800 	.word	0x40023800
 80027ec:	0801cb38 	.word	0x0801cb38

080027f0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	220f      	movs	r2, #15
 80027fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f003 0203 	and.w	r2, r3, #3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_GetClockConfig+0x5c>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002832:	4b07      	ldr	r3, [pc, #28]	; (8002850 <HAL_RCC_GetClockConfig+0x60>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 020f 	and.w	r2, r3, #15
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	601a      	str	r2, [r3, #0]
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr
 800284a:	bf00      	nop
 800284c:	40023800 	.word	0x40023800
 8002850:	40023c00 	.word	0x40023c00

08002854 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d101      	bne.n	8002866 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e01d      	b.n	80028a2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d106      	bne.n	8002880 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2200      	movs	r2, #0
 8002876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f815 	bl	80028aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2202      	movs	r2, #2
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3304      	adds	r3, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4610      	mov	r0, r2
 8002894:	f000 f968 	bl	8002b68 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80028aa:	b480      	push	{r7}
 80028ac:	b083      	sub	sp, #12
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80028b2:	bf00      	nop
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028be:	b480      	push	{r7}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68da      	ldr	r2, [r3, #12]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f042 0201 	orr.w	r2, r2, #1
 80028d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2b06      	cmp	r3, #6
 80028e6:	d007      	beq.n	80028f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f042 0201 	orr.w	r2, r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b082      	sub	sp, #8
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	f003 0302 	and.w	r3, r3, #2
 8002918:	2b02      	cmp	r3, #2
 800291a:	d122      	bne.n	8002962 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b02      	cmp	r3, #2
 8002928:	d11b      	bne.n	8002962 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f06f 0202 	mvn.w	r2, #2
 8002932:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	f003 0303 	and.w	r3, r3, #3
 8002944:	2b00      	cmp	r3, #0
 8002946:	d003      	beq.n	8002950 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f8ee 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 800294e:	e005      	b.n	800295c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8e0 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f000 f8f1 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b04      	cmp	r3, #4
 800296e:	d122      	bne.n	80029b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b04      	cmp	r3, #4
 800297c:	d11b      	bne.n	80029b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0204 	mvn.w	r2, #4
 8002986:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2202      	movs	r2, #2
 800298c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	699b      	ldr	r3, [r3, #24]
 8002994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002998:	2b00      	cmp	r3, #0
 800299a:	d003      	beq.n	80029a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f8c4 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 80029a2:	e005      	b.n	80029b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f8b6 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f000 f8c7 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d122      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b08      	cmp	r3, #8
 80029d0:	d11b      	bne.n	8002a0a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f06f 0208 	mvn.w	r2, #8
 80029da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2204      	movs	r2, #4
 80029e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69db      	ldr	r3, [r3, #28]
 80029e8:	f003 0303 	and.w	r3, r3, #3
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f000 f89a 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 80029f6:	e005      	b.n	8002a04 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f8:	6878      	ldr	r0, [r7, #4]
 80029fa:	f000 f88c 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f89d 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d122      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	68db      	ldr	r3, [r3, #12]
 8002a1e:	f003 0310 	and.w	r3, r3, #16
 8002a22:	2b10      	cmp	r3, #16
 8002a24:	d11b      	bne.n	8002a5e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0210 	mvn.w	r2, #16
 8002a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2208      	movs	r2, #8
 8002a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	69db      	ldr	r3, [r3, #28]
 8002a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a44:	6878      	ldr	r0, [r7, #4]
 8002a46:	f000 f870 	bl	8002b2a <HAL_TIM_IC_CaptureCallback>
 8002a4a:	e005      	b.n	8002a58 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f862 	bl	8002b16 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f873 	bl	8002b3e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d10e      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68db      	ldr	r3, [r3, #12]
 8002a72:	f003 0301 	and.w	r3, r3, #1
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d107      	bne.n	8002a8a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f06f 0201 	mvn.w	r2, #1
 8002a82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f015 f885 	bl	8017b94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a94:	2b80      	cmp	r3, #128	; 0x80
 8002a96:	d10e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa2:	2b80      	cmp	r3, #128	; 0x80
 8002aa4:	d107      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002aae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 f903 	bl	8002cbc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac0:	2b40      	cmp	r3, #64	; 0x40
 8002ac2:	d10e      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ace:	2b40      	cmp	r3, #64	; 0x40
 8002ad0:	d107      	bne.n	8002ae2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f838 	bl	8002b52 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
 8002ae8:	f003 0320 	and.w	r3, r3, #32
 8002aec:	2b20      	cmp	r3, #32
 8002aee:	d10e      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	68db      	ldr	r3, [r3, #12]
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d107      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f06f 0220 	mvn.w	r2, #32
 8002b06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8cd 	bl	8002ca8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b083      	sub	sp, #12
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b46:	bf00      	nop
 8002b48:	370c      	adds	r7, #12
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b50:	4770      	bx	lr

08002b52 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b5a:	bf00      	nop
 8002b5c:	370c      	adds	r7, #12
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr
	...

08002b68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b085      	sub	sp, #20
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a40      	ldr	r2, [pc, #256]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d013      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b86:	d00f      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a3d      	ldr	r2, [pc, #244]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d00b      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d007      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d003      	beq.n	8002ba8 <TIM_Base_SetConfig+0x40>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a3a      	ldr	r2, [pc, #232]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d108      	bne.n	8002bba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a2f      	ldr	r2, [pc, #188]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d02b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d027      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a2c      	ldr	r2, [pc, #176]	; (8002c80 <TIM_Base_SetConfig+0x118>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d023      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4a2b      	ldr	r2, [pc, #172]	; (8002c84 <TIM_Base_SetConfig+0x11c>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d01f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a2a      	ldr	r2, [pc, #168]	; (8002c88 <TIM_Base_SetConfig+0x120>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d01b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a29      	ldr	r2, [pc, #164]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d017      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <TIM_Base_SetConfig+0x128>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d013      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a27      	ldr	r2, [pc, #156]	; (8002c94 <TIM_Base_SetConfig+0x12c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d00f      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a26      	ldr	r2, [pc, #152]	; (8002c98 <TIM_Base_SetConfig+0x130>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d00b      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a25      	ldr	r2, [pc, #148]	; (8002c9c <TIM_Base_SetConfig+0x134>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d007      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4a24      	ldr	r2, [pc, #144]	; (8002ca0 <TIM_Base_SetConfig+0x138>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d003      	beq.n	8002c1a <TIM_Base_SetConfig+0xb2>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a23      	ldr	r2, [pc, #140]	; (8002ca4 <TIM_Base_SetConfig+0x13c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d108      	bne.n	8002c2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	4313      	orrs	r3, r2
 8002c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	4a0a      	ldr	r2, [pc, #40]	; (8002c7c <TIM_Base_SetConfig+0x114>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d003      	beq.n	8002c60 <TIM_Base_SetConfig+0xf8>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <TIM_Base_SetConfig+0x124>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d103      	bne.n	8002c68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	615a      	str	r2, [r3, #20]
}
 8002c6e:	bf00      	nop
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	40010000 	.word	0x40010000
 8002c80:	40000400 	.word	0x40000400
 8002c84:	40000800 	.word	0x40000800
 8002c88:	40000c00 	.word	0x40000c00
 8002c8c:	40010400 	.word	0x40010400
 8002c90:	40014000 	.word	0x40014000
 8002c94:	40014400 	.word	0x40014400
 8002c98:	40014800 	.word	0x40014800
 8002c9c:	40001800 	.word	0x40001800
 8002ca0:	40001c00 	.word	0x40001c00
 8002ca4:	40002000 	.word	0x40002000

08002ca8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b085      	sub	sp, #20
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002cde:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ce2:	2b84      	cmp	r3, #132	; 0x84
 8002ce4:	d005      	beq.n	8002cf2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002ce6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4413      	add	r3, r2
 8002cee:	3303      	adds	r3, #3
 8002cf0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3714      	adds	r7, #20
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002d06:	f3ef 8305 	mrs	r3, IPSR
 8002d0a:	607b      	str	r3, [r7, #4]
  return(result);
 8002d0c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	bf14      	ite	ne
 8002d12:	2301      	movne	r3, #1
 8002d14:	2300      	moveq	r3, #0
 8002d16:	b2db      	uxtb	r3, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	370c      	adds	r7, #12
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr

08002d24 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002d28:	f001 fd10 	bl	800474c <vTaskStartScheduler>
  
  return osOK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8002d36:	f7ff ffe3 	bl	8002d00 <inHandlerMode>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8002d40:	f001 fe1c 	bl	800497c <xTaskGetTickCountFromISR>
 8002d44:	4603      	mov	r3, r0
 8002d46:	e002      	b.n	8002d4e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8002d48:	f001 fe08 	bl	800495c <xTaskGetTickCount>
 8002d4c:	4603      	mov	r3, r0
  }
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	bd80      	pop	{r7, pc}

08002d52 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002d52:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d54:	b089      	sub	sp, #36	; 0x24
 8002d56:	af04      	add	r7, sp, #16
 8002d58:	6078      	str	r0, [r7, #4]
 8002d5a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <osThreadCreate+0x54>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d01c      	beq.n	8002da6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685c      	ldr	r4, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681d      	ldr	r5, [r3, #0]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691e      	ldr	r6, [r3, #16]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ffa6 	bl	8002cd0 <makeFreeRtosPriority>
 8002d84:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	695b      	ldr	r3, [r3, #20]
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002d8e:	9202      	str	r2, [sp, #8]
 8002d90:	9301      	str	r3, [sp, #4]
 8002d92:	9100      	str	r1, [sp, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	4632      	mov	r2, r6
 8002d98:	4629      	mov	r1, r5
 8002d9a:	4620      	mov	r0, r4
 8002d9c:	f001 fb0a 	bl	80043b4 <xTaskCreateStatic>
 8002da0:	4603      	mov	r3, r0
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	e01c      	b.n	8002de0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685c      	ldr	r4, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002db2:	b29e      	uxth	r6, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7ff ff88 	bl	8002cd0 <makeFreeRtosPriority>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	f107 030c 	add.w	r3, r7, #12
 8002dc6:	9301      	str	r3, [sp, #4]
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	4632      	mov	r2, r6
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f001 fb49 	bl	8004468 <xTaskCreate>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d001      	beq.n	8002de0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	e000      	b.n	8002de2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002de0:	68fb      	ldr	r3, [r7, #12]
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dea <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <osDelay+0x16>
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	e000      	b.n	8002e02 <osDelay+0x18>
 8002e00:	2301      	movs	r3, #1
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fc6e 	bl	80046e4 <vTaskDelay>
  
  return osOK;
 8002e08:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3710      	adds	r7, #16
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b082      	sub	sp, #8
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	4619      	mov	r1, r3
 8002e28:	2001      	movs	r0, #1
 8002e2a:	f000 fc80 	bl	800372e <xQueueCreateMutexStatic>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	e003      	b.n	8002e3a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8002e32:	2001      	movs	r0, #1
 8002e34:	f000 fc63 	bl	80036fe <xQueueCreateMutex>
 8002e38:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <osMutexWait+0x18>
    return osErrorParameter;
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	e03a      	b.n	8002ed2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d103      	bne.n	8002e70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8002e68:	f04f 33ff 	mov.w	r3, #4294967295
 8002e6c:	60fb      	str	r3, [r7, #12]
 8002e6e:	e009      	b.n	8002e84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <osMutexWait+0x40>
      ticks = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002e84:	f7ff ff3c 	bl	8002d00 <inHandlerMode>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d017      	beq.n	8002ebe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002e8e:	f107 0308 	add.w	r3, r7, #8
 8002e92:	461a      	mov	r2, r3
 8002e94:	2100      	movs	r1, #0
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 f860 	bl	8003f5c <xQueueReceiveFromISR>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d001      	beq.n	8002ea6 <osMutexWait+0x62>
      return osErrorOS;
 8002ea2:	23ff      	movs	r3, #255	; 0xff
 8002ea4:	e015      	b.n	8002ed2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <osMutexWait+0x8c>
 8002eac:	4b0b      	ldr	r3, [pc, #44]	; (8002edc <osMutexWait+0x98>)
 8002eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	f3bf 8f6f 	isb	sy
 8002ebc:	e008      	b.n	8002ed0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 ff43 	bl	8003d4c <xQueueSemaphoreTake>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d001      	beq.n	8002ed0 <osMutexWait+0x8c>
    return osErrorOS;
 8002ecc:	23ff      	movs	r3, #255	; 0xff
 8002ece:	e000      	b.n	8002ed2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8002ef0:	f7ff ff06 	bl	8002d00 <inHandlerMode>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d016      	beq.n	8002f28 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8002efa:	f107 0308 	add.w	r3, r7, #8
 8002efe:	4619      	mov	r1, r3
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f000 fdbd 	bl	8003a80 <xQueueGiveFromISR>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d001      	beq.n	8002f10 <osMutexRelease+0x30>
      return osErrorOS;
 8002f0c:	23ff      	movs	r3, #255	; 0xff
 8002f0e:	e017      	b.n	8002f40 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d013      	beq.n	8002f3e <osMutexRelease+0x5e>
 8002f16:	4b0c      	ldr	r3, [pc, #48]	; (8002f48 <osMutexRelease+0x68>)
 8002f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f1c:	601a      	str	r2, [r3, #0]
 8002f1e:	f3bf 8f4f 	dsb	sy
 8002f22:	f3bf 8f6f 	isb	sy
 8002f26:	e00a      	b.n	8002f3e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8002f28:	2300      	movs	r3, #0
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 fc18 	bl	8003764 <xQueueGenericSend>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d001      	beq.n	8002f3e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8002f3a:	23ff      	movs	r3, #255	; 0xff
 8002f3c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3710      	adds	r7, #16
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	e000ed04 	.word	0xe000ed04

08002f4c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af02      	add	r7, sp, #8
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d010      	beq.n	8002f80 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d10b      	bne.n	8002f7c <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	2303      	movs	r3, #3
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	2100      	movs	r1, #0
 8002f72:	2001      	movs	r0, #1
 8002f74:	f000 fad8 	bl	8003528 <xQueueGenericCreateStatic>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	e016      	b.n	8002faa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	e014      	b.n	8002faa <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d110      	bne.n	8002fa8 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 8002f86:	2203      	movs	r2, #3
 8002f88:	2100      	movs	r1, #0
 8002f8a:	2001      	movs	r0, #1
 8002f8c:	f000 fb3f 	bl	800360e <xQueueGenericCreate>
 8002f90:	60f8      	str	r0, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d005      	beq.n	8002fa4 <osSemaphoreCreate+0x58>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 fbe0 	bl	8003764 <xQueueGenericSend>
      return sema;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	e000      	b.n	8002faa <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8002fa8:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8002fc8:	2380      	movs	r3, #128	; 0x80
 8002fca:	e03a      	b.n	8003042 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd6:	d103      	bne.n	8002fe0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8002fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e009      	b.n	8002ff4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d006      	beq.n	8002ff4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <osSemaphoreWait+0x40>
      ticks = 1;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8002ff4:	f7ff fe84 	bl	8002d00 <inHandlerMode>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d017      	beq.n	800302e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8002ffe:	f107 0308 	add.w	r3, r7, #8
 8003002:	461a      	mov	r2, r3
 8003004:	2100      	movs	r1, #0
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 ffa8 	bl	8003f5c <xQueueReceiveFromISR>
 800300c:	4603      	mov	r3, r0
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <osSemaphoreWait+0x62>
      return osErrorOS;
 8003012:	23ff      	movs	r3, #255	; 0xff
 8003014:	e015      	b.n	8003042 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d011      	beq.n	8003040 <osSemaphoreWait+0x8c>
 800301c:	4b0b      	ldr	r3, [pc, #44]	; (800304c <osSemaphoreWait+0x98>)
 800301e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003022:	601a      	str	r2, [r3, #0]
 8003024:	f3bf 8f4f 	dsb	sy
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	e008      	b.n	8003040 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800302e:	68f9      	ldr	r1, [r7, #12]
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 fe8b 	bl	8003d4c <xQueueSemaphoreTake>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d001      	beq.n	8003040 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800303c:	23ff      	movs	r3, #255	; 0xff
 800303e:	e000      	b.n	8003042 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	e000ed04 	.word	0xe000ed04

08003050 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003060:	f7ff fe4e 	bl	8002d00 <inHandlerMode>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d016      	beq.n	8003098 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800306a:	f107 0308 	add.w	r3, r7, #8
 800306e:	4619      	mov	r1, r3
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fd05 	bl	8003a80 <xQueueGiveFromISR>
 8003076:	4603      	mov	r3, r0
 8003078:	2b01      	cmp	r3, #1
 800307a:	d001      	beq.n	8003080 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800307c:	23ff      	movs	r3, #255	; 0xff
 800307e:	e017      	b.n	80030b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d013      	beq.n	80030ae <osSemaphoreRelease+0x5e>
 8003086:	4b0c      	ldr	r3, [pc, #48]	; (80030b8 <osSemaphoreRelease+0x68>)
 8003088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	f3bf 8f4f 	dsb	sy
 8003092:	f3bf 8f6f 	isb	sy
 8003096:	e00a      	b.n	80030ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8003098:	2300      	movs	r3, #0
 800309a:	2200      	movs	r2, #0
 800309c:	2100      	movs	r1, #0
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb60 	bl	8003764 <xQueueGenericSend>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d001      	beq.n	80030ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80030aa:	23ff      	movs	r3, #255	; 0xff
 80030ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80030ae:	68fb      	ldr	r3, [r7, #12]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3710      	adds	r7, #16
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	e000ed04 	.word	0xe000ed04

080030bc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80030c4:	f7ff fe1c 	bl	8002d00 <inHandlerMode>
 80030c8:	4603      	mov	r3, r0
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80030ce:	2382      	movs	r3, #130	; 0x82
 80030d0:	e003      	b.n	80030da <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fff9 	bl	80040ca <vQueueDelete>

  return osOK; 
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80030e2:	b590      	push	{r4, r7, lr}
 80030e4:	b085      	sub	sp, #20
 80030e6:	af02      	add	r7, sp, #8
 80030e8:	6078      	str	r0, [r7, #4]
 80030ea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <osMessageCreate+0x38>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6818      	ldr	r0, [r3, #0]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6859      	ldr	r1, [r3, #4]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689a      	ldr	r2, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68dc      	ldr	r4, [r3, #12]
 800310c:	2300      	movs	r3, #0
 800310e:	9300      	str	r3, [sp, #0]
 8003110:	4623      	mov	r3, r4
 8003112:	f000 fa09 	bl	8003528 <xQueueGenericCreateStatic>
 8003116:	4603      	mov	r3, r0
 8003118:	e008      	b.n	800312c <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6818      	ldr	r0, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	4619      	mov	r1, r3
 8003126:	f000 fa72 	bl	800360e <xQueueGenericCreate>
 800312a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800312c:	4618      	mov	r0, r3
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}

08003134 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003140:	2300      	movs	r3, #0
 8003142:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <osMessagePut+0x1e>
    ticks = 1;
 800314e:	2301      	movs	r3, #1
 8003150:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003152:	f7ff fdd5 	bl	8002d00 <inHandlerMode>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d018      	beq.n	800318e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800315c:	f107 0210 	add.w	r2, r7, #16
 8003160:	f107 0108 	add.w	r1, r7, #8
 8003164:	2300      	movs	r3, #0
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fbf6 	bl	8003958 <xQueueGenericSendFromISR>
 800316c:	4603      	mov	r3, r0
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <osMessagePut+0x42>
      return osErrorOS;
 8003172:	23ff      	movs	r3, #255	; 0xff
 8003174:	e018      	b.n	80031a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d014      	beq.n	80031a6 <osMessagePut+0x72>
 800317c:	4b0c      	ldr	r3, [pc, #48]	; (80031b0 <osMessagePut+0x7c>)
 800317e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	f3bf 8f4f 	dsb	sy
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	e00b      	b.n	80031a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800318e:	f107 0108 	add.w	r1, r7, #8
 8003192:	2300      	movs	r3, #0
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fae4 	bl	8003764 <xQueueGenericSend>
 800319c:	4603      	mov	r3, r0
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d001      	beq.n	80031a6 <osMessagePut+0x72>
      return osErrorOS;
 80031a2:	23ff      	movs	r3, #255	; 0xff
 80031a4:	e000      	b.n	80031a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	e000ed04 	.word	0xe000ed04

080031b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80031b4:	b590      	push	{r4, r7, lr}
 80031b6:	b08b      	sub	sp, #44	; 0x2c
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	60f8      	str	r0, [r7, #12]
 80031bc:	60b9      	str	r1, [r7, #8]
 80031be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10a      	bne.n	80031e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80031ce:	2380      	movs	r3, #128	; 0x80
 80031d0:	617b      	str	r3, [r7, #20]
    return event;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	461c      	mov	r4, r3
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031e2:	e054      	b.n	800328e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80031e4:	2300      	movs	r3, #0
 80031e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80031e8:	2300      	movs	r3, #0
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f2:	d103      	bne.n	80031fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80031f4:	f04f 33ff 	mov.w	r3, #4294967295
 80031f8:	627b      	str	r3, [r7, #36]	; 0x24
 80031fa:	e009      	b.n	8003210 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003208:	2b00      	cmp	r3, #0
 800320a:	d101      	bne.n	8003210 <osMessageGet+0x5c>
      ticks = 1;
 800320c:	2301      	movs	r3, #1
 800320e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003210:	f7ff fd76 	bl	8002d00 <inHandlerMode>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d01c      	beq.n	8003254 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800321a:	f107 0220 	add.w	r2, r7, #32
 800321e:	f107 0314 	add.w	r3, r7, #20
 8003222:	3304      	adds	r3, #4
 8003224:	4619      	mov	r1, r3
 8003226:	68b8      	ldr	r0, [r7, #8]
 8003228:	f000 fe98 	bl	8003f5c <xQueueReceiveFromISR>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	d102      	bne.n	8003238 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003232:	2310      	movs	r3, #16
 8003234:	617b      	str	r3, [r7, #20]
 8003236:	e001      	b.n	800323c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003238:	2300      	movs	r3, #0
 800323a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01d      	beq.n	800327e <osMessageGet+0xca>
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <osMessageGet+0xe4>)
 8003244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003248:	601a      	str	r2, [r3, #0]
 800324a:	f3bf 8f4f 	dsb	sy
 800324e:	f3bf 8f6f 	isb	sy
 8003252:	e014      	b.n	800327e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003254:	f107 0314 	add.w	r3, r7, #20
 8003258:	3304      	adds	r3, #4
 800325a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800325c:	4619      	mov	r1, r3
 800325e:	68b8      	ldr	r0, [r7, #8]
 8003260:	f000 fc98 	bl	8003b94 <xQueueReceive>
 8003264:	4603      	mov	r3, r0
 8003266:	2b01      	cmp	r3, #1
 8003268:	d102      	bne.n	8003270 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800326a:	2310      	movs	r3, #16
 800326c:	617b      	str	r3, [r7, #20]
 800326e:	e006      	b.n	800327e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <osMessageGet+0xc6>
 8003276:	2300      	movs	r3, #0
 8003278:	e000      	b.n	800327c <osMessageGet+0xc8>
 800327a:	2340      	movs	r3, #64	; 0x40
 800327c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	461c      	mov	r4, r3
 8003282:	f107 0314 	add.w	r3, r7, #20
 8003286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800328a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800328e:	68f8      	ldr	r0, [r7, #12]
 8003290:	372c      	adds	r7, #44	; 0x2c
 8003292:	46bd      	mov	sp, r7
 8003294:	bd90      	pop	{r4, r7, pc}
 8003296:	bf00      	nop
 8003298:	e000ed04 	.word	0xe000ed04

0800329c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80032a4:	f7ff fd2c 	bl	8002d00 <inHandlerMode>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 feee 	bl	8004090 <uxQueueMessagesWaitingFromISR>
 80032b4:	4603      	mov	r3, r0
 80032b6:	e003      	b.n	80032c0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fecc 	bl	8004056 <uxQueueMessagesWaiting>
 80032be:	4603      	mov	r3, r0
  }
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80032d0:	f7ff fd16 	bl	8002d00 <inHandlerMode>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <osMessageDelete+0x16>
    return osErrorISR;
 80032da:	2382      	movs	r3, #130	; 0x82
 80032dc:	e003      	b.n	80032e6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f000 fef3 	bl	80040ca <vQueueDelete>

  return osOK; 
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3708      	adds	r7, #8
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	f103 0208 	add.w	r2, r3, #8
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f04f 32ff 	mov.w	r2, #4294967295
 8003306:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f103 0208 	add.w	r2, r3, #8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	f103 0208 	add.w	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800333c:	bf00      	nop
 800333e:	370c      	adds	r7, #12
 8003340:	46bd      	mov	sp, r7
 8003342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003346:	4770      	bx	lr

08003348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
 8003350:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	68fa      	ldr	r2, [r7, #12]
 800335c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	683a      	ldr	r2, [r7, #0]
 8003372:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	1c5a      	adds	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	601a      	str	r2, [r3, #0]
}
 8003384:	bf00      	nop
 8003386:	3714      	adds	r7, #20
 8003388:	46bd      	mov	sp, r7
 800338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338e:	4770      	bx	lr

08003390 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
 8003398:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033a6:	d103      	bne.n	80033b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	60fb      	str	r3, [r7, #12]
 80033ae:	e00c      	b.n	80033ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3308      	adds	r3, #8
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	e002      	b.n	80033be <vListInsert+0x2e>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d2f6      	bcs.n	80033b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6892      	ldr	r2, [r2, #8]
 8003418:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6852      	ldr	r2, [r2, #4]
 8003422:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	429a      	cmp	r2, r3
 800342c:	d103      	bne.n	8003436 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d109      	bne.n	8003480 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	e7fe      	b.n	800347e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003480:	f002 f8fc 	bl	800567c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348c:	68f9      	ldr	r1, [r7, #12]
 800348e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	441a      	add	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681a      	ldr	r2, [r3, #0]
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b0:	3b01      	subs	r3, #1
 80034b2:	68f9      	ldr	r1, [r7, #12]
 80034b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034b6:	fb01 f303 	mul.w	r3, r1, r3
 80034ba:	441a      	add	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	22ff      	movs	r2, #255	; 0xff
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	22ff      	movs	r2, #255	; 0xff
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d114      	bne.n	8003500 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	691b      	ldr	r3, [r3, #16]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d01a      	beq.n	8003514 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3310      	adds	r3, #16
 80034e2:	4618      	mov	r0, r3
 80034e4:	f001 fbb8 	bl	8004c58 <xTaskRemoveFromEventList>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d012      	beq.n	8003514 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034ee:	4b0d      	ldr	r3, [pc, #52]	; (8003524 <xQueueGenericReset+0xcc>)
 80034f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f4:	601a      	str	r2, [r3, #0]
 80034f6:	f3bf 8f4f 	dsb	sy
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	e009      	b.n	8003514 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3310      	adds	r3, #16
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff fef2 	bl	80032ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	3324      	adds	r3, #36	; 0x24
 800350e:	4618      	mov	r0, r3
 8003510:	f7ff feed 	bl	80032ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003514:	f002 f8e0 	bl	80056d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003518:	2301      	movs	r3, #1
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d109      	bne.n	8003550 <xQueueGenericCreateStatic+0x28>
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
 800354e:	e7fe      	b.n	800354e <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d109      	bne.n	800356a <xQueueGenericCreateStatic+0x42>
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
 8003568:	e7fe      	b.n	8003568 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <xQueueGenericCreateStatic+0x4e>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <xQueueGenericCreateStatic+0x52>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <xQueueGenericCreateStatic+0x54>
 800357a:	2300      	movs	r3, #0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d109      	bne.n	8003594 <xQueueGenericCreateStatic+0x6c>
 8003580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003584:	f383 8811 	msr	BASEPRI, r3
 8003588:	f3bf 8f6f 	isb	sy
 800358c:	f3bf 8f4f 	dsb	sy
 8003590:	623b      	str	r3, [r7, #32]
 8003592:	e7fe      	b.n	8003592 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d102      	bne.n	80035a0 <xQueueGenericCreateStatic+0x78>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d101      	bne.n	80035a4 <xQueueGenericCreateStatic+0x7c>
 80035a0:	2301      	movs	r3, #1
 80035a2:	e000      	b.n	80035a6 <xQueueGenericCreateStatic+0x7e>
 80035a4:	2300      	movs	r3, #0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <xQueueGenericCreateStatic+0x96>
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	61fb      	str	r3, [r7, #28]
 80035bc:	e7fe      	b.n	80035bc <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035be:	2348      	movs	r3, #72	; 0x48
 80035c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2b48      	cmp	r3, #72	; 0x48
 80035c6:	d009      	beq.n	80035dc <xQueueGenericCreateStatic+0xb4>
 80035c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035cc:	f383 8811 	msr	BASEPRI, r3
 80035d0:	f3bf 8f6f 	isb	sy
 80035d4:	f3bf 8f4f 	dsb	sy
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	e7fe      	b.n	80035da <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d00d      	beq.n	8003604 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035f0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f844 	bl	800368c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003606:	4618      	mov	r0, r3
 8003608:	3730      	adds	r7, #48	; 0x30
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800360e:	b580      	push	{r7, lr}
 8003610:	b08a      	sub	sp, #40	; 0x28
 8003612:	af02      	add	r7, sp, #8
 8003614:	60f8      	str	r0, [r7, #12]
 8003616:	60b9      	str	r1, [r7, #8]
 8003618:	4613      	mov	r3, r2
 800361a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d109      	bne.n	8003636 <xQueueGenericCreate+0x28>
 8003622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003626:	f383 8811 	msr	BASEPRI, r3
 800362a:	f3bf 8f6f 	isb	sy
 800362e:	f3bf 8f4f 	dsb	sy
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	e7fe      	b.n	8003634 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d102      	bne.n	8003642 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800363c:	2300      	movs	r3, #0
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	e004      	b.n	800364c <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	68ba      	ldr	r2, [r7, #8]
 8003646:	fb02 f303 	mul.w	r3, r2, r3
 800364a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	3348      	adds	r3, #72	; 0x48
 8003650:	4618      	mov	r0, r3
 8003652:	f002 f92d 	bl	80058b0 <pvPortMalloc>
 8003656:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d011      	beq.n	8003682 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003668:	69bb      	ldr	r3, [r7, #24]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003670:	79fa      	ldrb	r2, [r7, #7]
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	4613      	mov	r3, r2
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	68b9      	ldr	r1, [r7, #8]
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f000 f805 	bl	800368c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003682:	69bb      	ldr	r3, [r7, #24]
	}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d103      	bne.n	80036a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036a0:	69bb      	ldr	r3, [r7, #24]
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e002      	b.n	80036ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036a8:	69bb      	ldr	r3, [r7, #24]
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	68fa      	ldr	r2, [r7, #12]
 80036b2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036ba:	2101      	movs	r1, #1
 80036bc:	69b8      	ldr	r0, [r7, #24]
 80036be:	f7ff fecb 	bl	8003458 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80036ca:	b580      	push	{r7, lr}
 80036cc:	b082      	sub	sp, #8
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d00e      	beq.n	80036f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80036ea:	2300      	movs	r3, #0
 80036ec:	2200      	movs	r2, #0
 80036ee:	2100      	movs	r1, #0
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f000 f837 	bl	8003764 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80036f6:	bf00      	nop
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b086      	sub	sp, #24
 8003702:	af00      	add	r7, sp, #0
 8003704:	4603      	mov	r3, r0
 8003706:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003708:	2301      	movs	r3, #1
 800370a:	617b      	str	r3, [r7, #20]
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	461a      	mov	r2, r3
 8003714:	6939      	ldr	r1, [r7, #16]
 8003716:	6978      	ldr	r0, [r7, #20]
 8003718:	f7ff ff79 	bl	800360e <xQueueGenericCreate>
 800371c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f7ff ffd3 	bl	80036ca <prvInitialiseMutex>

		return xNewQueue;
 8003724:	68fb      	ldr	r3, [r7, #12]
	}
 8003726:	4618      	mov	r0, r3
 8003728:	3718      	adds	r7, #24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800372e:	b580      	push	{r7, lr}
 8003730:	b088      	sub	sp, #32
 8003732:	af02      	add	r7, sp, #8
 8003734:	4603      	mov	r3, r0
 8003736:	6039      	str	r1, [r7, #0]
 8003738:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800373a:	2301      	movs	r3, #1
 800373c:	617b      	str	r3, [r7, #20]
 800373e:	2300      	movs	r3, #0
 8003740:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8003742:	79fb      	ldrb	r3, [r7, #7]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	2200      	movs	r2, #0
 800374a:	6939      	ldr	r1, [r7, #16]
 800374c:	6978      	ldr	r0, [r7, #20]
 800374e:	f7ff feeb 	bl	8003528 <xQueueGenericCreateStatic>
 8003752:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f7ff ffb8 	bl	80036ca <prvInitialiseMutex>

		return xNewQueue;
 800375a:	68fb      	ldr	r3, [r7, #12]
	}
 800375c:	4618      	mov	r0, r3
 800375e:	3718      	adds	r7, #24
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08e      	sub	sp, #56	; 0x38
 8003768:	af00      	add	r7, sp, #0
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	607a      	str	r2, [r7, #4]
 8003770:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003772:	2300      	movs	r3, #0
 8003774:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800377a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377c:	2b00      	cmp	r3, #0
 800377e:	d109      	bne.n	8003794 <xQueueGenericSend+0x30>
 8003780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	62bb      	str	r3, [r7, #40]	; 0x28
 8003792:	e7fe      	b.n	8003792 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d103      	bne.n	80037a2 <xQueueGenericSend+0x3e>
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <xQueueGenericSend+0x42>
 80037a2:	2301      	movs	r3, #1
 80037a4:	e000      	b.n	80037a8 <xQueueGenericSend+0x44>
 80037a6:	2300      	movs	r3, #0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <xQueueGenericSend+0x5c>
 80037ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b0:	f383 8811 	msr	BASEPRI, r3
 80037b4:	f3bf 8f6f 	isb	sy
 80037b8:	f3bf 8f4f 	dsb	sy
 80037bc:	627b      	str	r3, [r7, #36]	; 0x24
 80037be:	e7fe      	b.n	80037be <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d103      	bne.n	80037ce <xQueueGenericSend+0x6a>
 80037c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d101      	bne.n	80037d2 <xQueueGenericSend+0x6e>
 80037ce:	2301      	movs	r3, #1
 80037d0:	e000      	b.n	80037d4 <xQueueGenericSend+0x70>
 80037d2:	2300      	movs	r3, #0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <xQueueGenericSend+0x88>
 80037d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037dc:	f383 8811 	msr	BASEPRI, r3
 80037e0:	f3bf 8f6f 	isb	sy
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	623b      	str	r3, [r7, #32]
 80037ea:	e7fe      	b.n	80037ea <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80037ec:	f001 fbea 	bl	8004fc4 <xTaskGetSchedulerState>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d102      	bne.n	80037fc <xQueueGenericSend+0x98>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d101      	bne.n	8003800 <xQueueGenericSend+0x9c>
 80037fc:	2301      	movs	r3, #1
 80037fe:	e000      	b.n	8003802 <xQueueGenericSend+0x9e>
 8003800:	2300      	movs	r3, #0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d109      	bne.n	800381a <xQueueGenericSend+0xb6>
 8003806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800380a:	f383 8811 	msr	BASEPRI, r3
 800380e:	f3bf 8f6f 	isb	sy
 8003812:	f3bf 8f4f 	dsb	sy
 8003816:	61fb      	str	r3, [r7, #28]
 8003818:	e7fe      	b.n	8003818 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800381a:	f001 ff2f 	bl	800567c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800381e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003820:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003826:	429a      	cmp	r2, r3
 8003828:	d302      	bcc.n	8003830 <xQueueGenericSend+0xcc>
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d129      	bne.n	8003884 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003830:	683a      	ldr	r2, [r7, #0]
 8003832:	68b9      	ldr	r1, [r7, #8]
 8003834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003836:	f000 fc82 	bl	800413e <prvCopyDataToQueue>
 800383a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2b00      	cmp	r3, #0
 8003842:	d010      	beq.n	8003866 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003846:	3324      	adds	r3, #36	; 0x24
 8003848:	4618      	mov	r0, r3
 800384a:	f001 fa05 	bl	8004c58 <xTaskRemoveFromEventList>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d013      	beq.n	800387c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003854:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <xQueueGenericSend+0x1f0>)
 8003856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	f3bf 8f4f 	dsb	sy
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	e00a      	b.n	800387c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800386c:	4b39      	ldr	r3, [pc, #228]	; (8003954 <xQueueGenericSend+0x1f0>)
 800386e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800387c:	f001 ff2c 	bl	80056d8 <vPortExitCritical>
				return pdPASS;
 8003880:	2301      	movs	r3, #1
 8003882:	e063      	b.n	800394c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d103      	bne.n	8003892 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800388a:	f001 ff25 	bl	80056d8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800388e:	2300      	movs	r3, #0
 8003890:	e05c      	b.n	800394c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003894:	2b00      	cmp	r3, #0
 8003896:	d106      	bne.n	80038a6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003898:	f107 0314 	add.w	r3, r7, #20
 800389c:	4618      	mov	r0, r3
 800389e:	f001 fa3d 	bl	8004d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80038a2:	2301      	movs	r3, #1
 80038a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80038a6:	f001 ff17 	bl	80056d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80038aa:	f000 ffad 	bl	8004808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80038ae:	f001 fee5 	bl	800567c <vPortEnterCritical>
 80038b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038b8:	b25b      	sxtb	r3, r3
 80038ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038be:	d103      	bne.n	80038c8 <xQueueGenericSend+0x164>
 80038c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038ce:	b25b      	sxtb	r3, r3
 80038d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038d4:	d103      	bne.n	80038de <xQueueGenericSend+0x17a>
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80038de:	f001 fefb 	bl	80056d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80038e2:	1d3a      	adds	r2, r7, #4
 80038e4:	f107 0314 	add.w	r3, r7, #20
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f001 fa2c 	bl	8004d48 <xTaskCheckForTimeOut>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d124      	bne.n	8003940 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80038f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038f8:	f000 fd19 	bl	800432e <prvIsQueueFull>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d018      	beq.n	8003934 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003904:	3310      	adds	r3, #16
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	4611      	mov	r1, r2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f980 	bl	8004c10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003910:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003912:	f000 fca4 	bl	800425e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003916:	f000 ff85 	bl	8004824 <xTaskResumeAll>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f af7c 	bne.w	800381a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003922:	4b0c      	ldr	r3, [pc, #48]	; (8003954 <xQueueGenericSend+0x1f0>)
 8003924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	e772      	b.n	800381a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003934:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003936:	f000 fc92 	bl	800425e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800393a:	f000 ff73 	bl	8004824 <xTaskResumeAll>
 800393e:	e76c      	b.n	800381a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003940:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003942:	f000 fc8c 	bl	800425e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003946:	f000 ff6d 	bl	8004824 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800394a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800394c:	4618      	mov	r0, r3
 800394e:	3738      	adds	r7, #56	; 0x38
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	e000ed04 	.word	0xe000ed04

08003958 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b08e      	sub	sp, #56	; 0x38
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
 8003964:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800396a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <xQueueGenericSendFromISR+0x2c>
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	627b      	str	r3, [r7, #36]	; 0x24
 8003982:	e7fe      	b.n	8003982 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d103      	bne.n	8003992 <xQueueGenericSendFromISR+0x3a>
 800398a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d101      	bne.n	8003996 <xQueueGenericSendFromISR+0x3e>
 8003992:	2301      	movs	r3, #1
 8003994:	e000      	b.n	8003998 <xQueueGenericSendFromISR+0x40>
 8003996:	2300      	movs	r3, #0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d109      	bne.n	80039b0 <xQueueGenericSendFromISR+0x58>
 800399c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039a0:	f383 8811 	msr	BASEPRI, r3
 80039a4:	f3bf 8f6f 	isb	sy
 80039a8:	f3bf 8f4f 	dsb	sy
 80039ac:	623b      	str	r3, [r7, #32]
 80039ae:	e7fe      	b.n	80039ae <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d103      	bne.n	80039be <xQueueGenericSendFromISR+0x66>
 80039b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d101      	bne.n	80039c2 <xQueueGenericSendFromISR+0x6a>
 80039be:	2301      	movs	r3, #1
 80039c0:	e000      	b.n	80039c4 <xQueueGenericSendFromISR+0x6c>
 80039c2:	2300      	movs	r3, #0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d109      	bne.n	80039dc <xQueueGenericSendFromISR+0x84>
 80039c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039cc:	f383 8811 	msr	BASEPRI, r3
 80039d0:	f3bf 8f6f 	isb	sy
 80039d4:	f3bf 8f4f 	dsb	sy
 80039d8:	61fb      	str	r3, [r7, #28]
 80039da:	e7fe      	b.n	80039da <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80039dc:	f001 ff2a 	bl	8005834 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80039e0:	f3ef 8211 	mrs	r2, BASEPRI
 80039e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e8:	f383 8811 	msr	BASEPRI, r3
 80039ec:	f3bf 8f6f 	isb	sy
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	61ba      	str	r2, [r7, #24]
 80039f6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80039f8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80039fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d302      	bcc.n	8003a0e <xQueueGenericSendFromISR+0xb6>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d12c      	bne.n	8003a68 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	68b9      	ldr	r1, [r7, #8]
 8003a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1e:	f000 fb8e 	bl	800413e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003a22:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003a26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a2a:	d112      	bne.n	8003a52 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d016      	beq.n	8003a62 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	3324      	adds	r3, #36	; 0x24
 8003a38:	4618      	mov	r0, r3
 8003a3a:	f001 f90d 	bl	8004c58 <xTaskRemoveFromEventList>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00e      	beq.n	8003a62 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00b      	beq.n	8003a62 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	e007      	b.n	8003a62 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003a52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003a56:	3301      	adds	r3, #1
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	b25a      	sxtb	r2, r3
 8003a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003a62:	2301      	movs	r3, #1
 8003a64:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8003a66:	e001      	b.n	8003a6c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3738      	adds	r7, #56	; 0x38
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d109      	bne.n	8003aa8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	e7fe      	b.n	8003aa6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d009      	beq.n	8003ac4 <xQueueGiveFromISR+0x44>
 8003ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab4:	f383 8811 	msr	BASEPRI, r3
 8003ab8:	f3bf 8f6f 	isb	sy
 8003abc:	f3bf 8f4f 	dsb	sy
 8003ac0:	61fb      	str	r3, [r7, #28]
 8003ac2:	e7fe      	b.n	8003ac2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d103      	bne.n	8003ad4 <xQueueGiveFromISR+0x54>
 8003acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <xQueueGiveFromISR+0x58>
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e000      	b.n	8003ada <xQueueGiveFromISR+0x5a>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d109      	bne.n	8003af2 <xQueueGiveFromISR+0x72>
 8003ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae2:	f383 8811 	msr	BASEPRI, r3
 8003ae6:	f3bf 8f6f 	isb	sy
 8003aea:	f3bf 8f4f 	dsb	sy
 8003aee:	61bb      	str	r3, [r7, #24]
 8003af0:	e7fe      	b.n	8003af0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003af2:	f001 fe9f 	bl	8005834 <vPortValidateInterruptPriority>
	__asm volatile
 8003af6:	f3ef 8211 	mrs	r2, BASEPRI
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	617a      	str	r2, [r7, #20]
 8003b0c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003b0e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003b10:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d22b      	bcs.n	8003b7a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b34:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3c:	d112      	bne.n	8003b64 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d016      	beq.n	8003b74 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b48:	3324      	adds	r3, #36	; 0x24
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f001 f884 	bl	8004c58 <xTaskRemoveFromEventList>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00b      	beq.n	8003b74 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2201      	movs	r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	e007      	b.n	8003b74 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b68:	3301      	adds	r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	b25a      	sxtb	r2, r3
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b74:	2301      	movs	r3, #1
 8003b76:	637b      	str	r3, [r7, #52]	; 0x34
 8003b78:	e001      	b.n	8003b7e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b80:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3738      	adds	r7, #56	; 0x38
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
	...

08003b94 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b08c      	sub	sp, #48	; 0x30
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	60b9      	str	r1, [r7, #8]
 8003b9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d109      	bne.n	8003bc2 <xQueueReceive+0x2e>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	623b      	str	r3, [r7, #32]
 8003bc0:	e7fe      	b.n	8003bc0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d103      	bne.n	8003bd0 <xQueueReceive+0x3c>
 8003bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <xQueueReceive+0x40>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <xQueueReceive+0x42>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <xQueueReceive+0x5a>
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e7fe      	b.n	8003bec <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bee:	f001 f9e9 	bl	8004fc4 <xTaskGetSchedulerState>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d102      	bne.n	8003bfe <xQueueReceive+0x6a>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d101      	bne.n	8003c02 <xQueueReceive+0x6e>
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e000      	b.n	8003c04 <xQueueReceive+0x70>
 8003c02:	2300      	movs	r3, #0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d109      	bne.n	8003c1c <xQueueReceive+0x88>
 8003c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c0c:	f383 8811 	msr	BASEPRI, r3
 8003c10:	f3bf 8f6f 	isb	sy
 8003c14:	f3bf 8f4f 	dsb	sy
 8003c18:	61bb      	str	r3, [r7, #24]
 8003c1a:	e7fe      	b.n	8003c1a <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c1c:	f001 fd2e 	bl	800567c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d01f      	beq.n	8003c6c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003c2c:	68b9      	ldr	r1, [r7, #8]
 8003c2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c30:	f000 faef 	bl	8004212 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c36:	1e5a      	subs	r2, r3, #1
 8003c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00f      	beq.n	8003c64 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	3310      	adds	r3, #16
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f001 f805 	bl	8004c58 <xTaskRemoveFromEventList>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d007      	beq.n	8003c64 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c54:	4b3c      	ldr	r3, [pc, #240]	; (8003d48 <xQueueReceive+0x1b4>)
 8003c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c5a:	601a      	str	r2, [r3, #0]
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c64:	f001 fd38 	bl	80056d8 <vPortExitCritical>
				return pdPASS;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e069      	b.n	8003d40 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d103      	bne.n	8003c7a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c72:	f001 fd31 	bl	80056d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c76:	2300      	movs	r3, #0
 8003c78:	e062      	b.n	8003d40 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d106      	bne.n	8003c8e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c80:	f107 0310 	add.w	r3, r7, #16
 8003c84:	4618      	mov	r0, r3
 8003c86:	f001 f849 	bl	8004d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c8e:	f001 fd23 	bl	80056d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c92:	f000 fdb9 	bl	8004808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c96:	f001 fcf1 	bl	800567c <vPortEnterCritical>
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ca0:	b25b      	sxtb	r3, r3
 8003ca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ca6:	d103      	bne.n	8003cb0 <xQueueReceive+0x11c>
 8003ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003caa:	2200      	movs	r2, #0
 8003cac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb6:	b25b      	sxtb	r3, r3
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d103      	bne.n	8003cc6 <xQueueReceive+0x132>
 8003cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cc6:	f001 fd07 	bl	80056d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cca:	1d3a      	adds	r2, r7, #4
 8003ccc:	f107 0310 	add.w	r3, r7, #16
 8003cd0:	4611      	mov	r1, r2
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f838 	bl	8004d48 <xTaskCheckForTimeOut>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d123      	bne.n	8003d26 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cde:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ce0:	f000 fb0f 	bl	8004302 <prvIsQueueEmpty>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d017      	beq.n	8003d1a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cec:	3324      	adds	r3, #36	; 0x24
 8003cee:	687a      	ldr	r2, [r7, #4]
 8003cf0:	4611      	mov	r1, r2
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f000 ff8c 	bl	8004c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cfa:	f000 fab0 	bl	800425e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003cfe:	f000 fd91 	bl	8004824 <xTaskResumeAll>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d189      	bne.n	8003c1c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8003d08:	4b0f      	ldr	r3, [pc, #60]	; (8003d48 <xQueueReceive+0x1b4>)
 8003d0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	f3bf 8f6f 	isb	sy
 8003d18:	e780      	b.n	8003c1c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d1c:	f000 fa9f 	bl	800425e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d20:	f000 fd80 	bl	8004824 <xTaskResumeAll>
 8003d24:	e77a      	b.n	8003c1c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003d26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d28:	f000 fa99 	bl	800425e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d2c:	f000 fd7a 	bl	8004824 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d32:	f000 fae6 	bl	8004302 <prvIsQueueEmpty>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	f43f af6f 	beq.w	8003c1c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3730      	adds	r7, #48	; 0x30
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	e000ed04 	.word	0xe000ed04

08003d4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08e      	sub	sp, #56	; 0x38
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003d56:	2300      	movs	r3, #0
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <xQueueSemaphoreTake+0x30>
 8003d68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d6c:	f383 8811 	msr	BASEPRI, r3
 8003d70:	f3bf 8f6f 	isb	sy
 8003d74:	f3bf 8f4f 	dsb	sy
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	e7fe      	b.n	8003d7a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d009      	beq.n	8003d98 <xQueueSemaphoreTake+0x4c>
 8003d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d88:	f383 8811 	msr	BASEPRI, r3
 8003d8c:	f3bf 8f6f 	isb	sy
 8003d90:	f3bf 8f4f 	dsb	sy
 8003d94:	61fb      	str	r3, [r7, #28]
 8003d96:	e7fe      	b.n	8003d96 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d98:	f001 f914 	bl	8004fc4 <xTaskGetSchedulerState>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d102      	bne.n	8003da8 <xQueueSemaphoreTake+0x5c>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <xQueueSemaphoreTake+0x60>
 8003da8:	2301      	movs	r3, #1
 8003daa:	e000      	b.n	8003dae <xQueueSemaphoreTake+0x62>
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <xQueueSemaphoreTake+0x7a>
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	61bb      	str	r3, [r7, #24]
 8003dc4:	e7fe      	b.n	8003dc4 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dc6:	f001 fc59 	bl	800567c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d024      	beq.n	8003e20 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	1e5a      	subs	r2, r3, #1
 8003dda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ddc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d104      	bne.n	8003df0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003de6:	f001 faa7 	bl	8005338 <pvTaskIncrementMutexHeldCount>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00f      	beq.n	8003e18 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dfa:	3310      	adds	r3, #16
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f000 ff2b 	bl	8004c58 <xTaskRemoveFromEventList>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d007      	beq.n	8003e18 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003e08:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <xQueueSemaphoreTake+0x20c>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003e18:	f001 fc5e 	bl	80056d8 <vPortExitCritical>
				return pdPASS;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e096      	b.n	8003f4e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d110      	bne.n	8003e48 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d009      	beq.n	8003e40 <xQueueSemaphoreTake+0xf4>
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e7fe      	b.n	8003e3e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003e40:	f001 fc4a 	bl	80056d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003e44:	2300      	movs	r3, #0
 8003e46:	e082      	b.n	8003f4e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 ff62 	bl	8004d1c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e5c:	f001 fc3c 	bl	80056d8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e60:	f000 fcd2 	bl	8004808 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e64:	f001 fc0a 	bl	800567c <vPortEnterCritical>
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <xQueueSemaphoreTake+0x132>
 8003e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d103      	bne.n	8003e94 <xQueueSemaphoreTake+0x148>
 8003e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e94:	f001 fc20 	bl	80056d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e98:	463a      	mov	r2, r7
 8003e9a:	f107 030c 	add.w	r3, r7, #12
 8003e9e:	4611      	mov	r1, r2
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f000 ff51 	bl	8004d48 <xTaskCheckForTimeOut>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d132      	bne.n	8003f12 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003eae:	f000 fa28 	bl	8004302 <prvIsQueueEmpty>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d026      	beq.n	8003f06 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003ec0:	f001 fbdc 	bl	800567c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f001 f899 	bl	8005000 <xTaskPriorityInherit>
 8003ece:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003ed0:	f001 fc02 	bl	80056d8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	3324      	adds	r3, #36	; 0x24
 8003ed8:	683a      	ldr	r2, [r7, #0]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fe97 	bl	8004c10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ee2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ee4:	f000 f9bb 	bl	800425e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ee8:	f000 fc9c 	bl	8004824 <xTaskResumeAll>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f47f af69 	bne.w	8003dc6 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003ef4:	4b18      	ldr	r3, [pc, #96]	; (8003f58 <xQueueSemaphoreTake+0x20c>)
 8003ef6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	f3bf 8f4f 	dsb	sy
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	e75f      	b.n	8003dc6 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f08:	f000 f9a9 	bl	800425e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f0c:	f000 fc8a 	bl	8004824 <xTaskResumeAll>
 8003f10:	e759      	b.n	8003dc6 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003f12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f14:	f000 f9a3 	bl	800425e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f18:	f000 fc84 	bl	8004824 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f1c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f1e:	f000 f9f0 	bl	8004302 <prvIsQueueEmpty>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f43f af4e 	beq.w	8003dc6 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00d      	beq.n	8003f4c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003f30:	f001 fba4 	bl	800567c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003f34:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f36:	f000 f8ea 	bl	800410e <prvGetDisinheritPriorityAfterTimeout>
 8003f3a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f001 f960 	bl	8005208 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003f48:	f001 fbc6 	bl	80056d8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f4c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3738      	adds	r7, #56	; 0x38
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	e000ed04 	.word	0xe000ed04

08003f5c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08e      	sub	sp, #56	; 0x38
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d109      	bne.n	8003f86 <xQueueReceiveFromISR+0x2a>
 8003f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f76:	f383 8811 	msr	BASEPRI, r3
 8003f7a:	f3bf 8f6f 	isb	sy
 8003f7e:	f3bf 8f4f 	dsb	sy
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	e7fe      	b.n	8003f84 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <xQueueReceiveFromISR+0x38>
 8003f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <xQueueReceiveFromISR+0x3c>
 8003f94:	2301      	movs	r3, #1
 8003f96:	e000      	b.n	8003f9a <xQueueReceiveFromISR+0x3e>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d109      	bne.n	8003fb2 <xQueueReceiveFromISR+0x56>
 8003f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa2:	f383 8811 	msr	BASEPRI, r3
 8003fa6:	f3bf 8f6f 	isb	sy
 8003faa:	f3bf 8f4f 	dsb	sy
 8003fae:	61fb      	str	r3, [r7, #28]
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fb2:	f001 fc3f 	bl	8005834 <vPortValidateInterruptPriority>
	__asm volatile
 8003fb6:	f3ef 8211 	mrs	r2, BASEPRI
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	61ba      	str	r2, [r7, #24]
 8003fcc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003fce:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02f      	beq.n	800403e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003fe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003fe8:	68b9      	ldr	r1, [r7, #8]
 8003fea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fec:	f000 f911 	bl	8004212 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003ff8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d112      	bne.n	8004028 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	691b      	ldr	r3, [r3, #16]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800400a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400c:	3310      	adds	r3, #16
 800400e:	4618      	mov	r0, r3
 8004010:	f000 fe22 	bl	8004c58 <xTaskRemoveFromEventList>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00e      	beq.n	8004038 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00b      	beq.n	8004038 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e007      	b.n	8004038 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004028:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800402c:	3301      	adds	r3, #1
 800402e:	b2db      	uxtb	r3, r3
 8004030:	b25a      	sxtb	r2, r3
 8004032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	637b      	str	r3, [r7, #52]	; 0x34
 800403c:	e001      	b.n	8004042 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800403e:	2300      	movs	r3, #0
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
 8004042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004044:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800404e:	4618      	mov	r0, r3
 8004050:	3738      	adds	r7, #56	; 0x38
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	e7fe      	b.n	8004076 <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8004078:	f001 fb00 	bl	800567c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004080:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8004082:	f001 fb29 	bl	80056d8 <vPortExitCritical>

	return uxReturn;
 8004086:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004088:	4618      	mov	r0, r3
 800408a:	3710      	adds	r7, #16
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d109      	bne.n	80040b6 <uxQueueMessagesWaitingFromISR+0x26>
 80040a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a6:	f383 8811 	msr	BASEPRI, r3
 80040aa:	f3bf 8f6f 	isb	sy
 80040ae:	f3bf 8f4f 	dsb	sy
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	e7fe      	b.n	80040b4 <uxQueueMessagesWaitingFromISR+0x24>
	uxReturn = pxQueue->uxMessagesWaiting;
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ba:	613b      	str	r3, [r7, #16]

	return uxReturn;
 80040bc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80040be:	4618      	mov	r0, r3
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <vQueueDelete+0x26>
 80040dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e0:	f383 8811 	msr	BASEPRI, r3
 80040e4:	f3bf 8f6f 	isb	sy
 80040e8:	f3bf 8f4f 	dsb	sy
 80040ec:	60bb      	str	r3, [r7, #8]
 80040ee:	e7fe      	b.n	80040ee <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f935 	bl	8004360 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d102      	bne.n	8004106 <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8004100:	68f8      	ldr	r0, [r7, #12]
 8004102:	f001 fc97 	bl	8005a34 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004106:	bf00      	nop
 8004108:	3710      	adds	r7, #16
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d006      	beq.n	800412c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f1c3 0307 	rsb	r3, r3, #7
 8004128:	60fb      	str	r3, [r7, #12]
 800412a:	e001      	b.n	8004130 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800412c:	2300      	movs	r3, #0
 800412e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004130:	68fb      	ldr	r3, [r7, #12]
	}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr

0800413e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800413e:	b580      	push	{r7, lr}
 8004140:	b086      	sub	sp, #24
 8004142:	af00      	add	r7, sp, #0
 8004144:	60f8      	str	r0, [r7, #12]
 8004146:	60b9      	str	r1, [r7, #8]
 8004148:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004152:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10d      	bne.n	8004178 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d14d      	bne.n	8004200 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	4618      	mov	r0, r3
 800416a:	f000 ffc9 	bl	8005100 <xTaskPriorityDisinherit>
 800416e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
 8004176:	e043      	b.n	8004200 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d119      	bne.n	80041b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6858      	ldr	r0, [r3, #4]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	461a      	mov	r2, r3
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	f013 fef0 	bl	8017f6e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	441a      	add	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d32b      	bcc.n	8004200 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	605a      	str	r2, [r3, #4]
 80041b0:	e026      	b.n	8004200 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	68d8      	ldr	r0, [r3, #12]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ba:	461a      	mov	r2, r3
 80041bc:	68b9      	ldr	r1, [r7, #8]
 80041be:	f013 fed6 	bl	8017f6e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ca:	425b      	negs	r3, r3
 80041cc:	441a      	add	r2, r3
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	68da      	ldr	r2, [r3, #12]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d207      	bcs.n	80041ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e6:	425b      	negs	r3, r3
 80041e8:	441a      	add	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d105      	bne.n	8004200 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004208:	697b      	ldr	r3, [r7, #20]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004212:	b580      	push	{r7, lr}
 8004214:	b082      	sub	sp, #8
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	d018      	beq.n	8004256 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68da      	ldr	r2, [r3, #12]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	441a      	add	r2, r3
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68da      	ldr	r2, [r3, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	429a      	cmp	r2, r3
 800423c:	d303      	bcc.n	8004246 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68d9      	ldr	r1, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	461a      	mov	r2, r3
 8004250:	6838      	ldr	r0, [r7, #0]
 8004252:	f013 fe8c 	bl	8017f6e <memcpy>
	}
}
 8004256:	bf00      	nop
 8004258:	3708      	adds	r7, #8
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b084      	sub	sp, #16
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004266:	f001 fa09 	bl	800567c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004270:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004272:	e011      	b.n	8004298 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004278:	2b00      	cmp	r3, #0
 800427a:	d012      	beq.n	80042a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	3324      	adds	r3, #36	; 0x24
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fce9 	bl	8004c58 <xTaskRemoveFromEventList>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800428c:	f000 fdbc 	bl	8004e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004290:	7bfb      	ldrb	r3, [r7, #15]
 8004292:	3b01      	subs	r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004298:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800429c:	2b00      	cmp	r3, #0
 800429e:	dce9      	bgt.n	8004274 <prvUnlockQueue+0x16>
 80042a0:	e000      	b.n	80042a4 <prvUnlockQueue+0x46>
					break;
 80042a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	22ff      	movs	r2, #255	; 0xff
 80042a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80042ac:	f001 fa14 	bl	80056d8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80042b0:	f001 f9e4 	bl	800567c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042bc:	e011      	b.n	80042e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d012      	beq.n	80042ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	3310      	adds	r3, #16
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 fcc4 	bl	8004c58 <xTaskRemoveFromEventList>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80042d6:	f000 fd97 	bl	8004e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80042da:	7bbb      	ldrb	r3, [r7, #14]
 80042dc:	3b01      	subs	r3, #1
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80042e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dce9      	bgt.n	80042be <prvUnlockQueue+0x60>
 80042ea:	e000      	b.n	80042ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80042ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	22ff      	movs	r2, #255	; 0xff
 80042f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80042f6:	f001 f9ef 	bl	80056d8 <vPortExitCritical>
}
 80042fa:	bf00      	nop
 80042fc:	3710      	adds	r7, #16
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b084      	sub	sp, #16
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800430a:	f001 f9b7 	bl	800567c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	2b00      	cmp	r3, #0
 8004314:	d102      	bne.n	800431c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004316:	2301      	movs	r3, #1
 8004318:	60fb      	str	r3, [r7, #12]
 800431a:	e001      	b.n	8004320 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800431c:	2300      	movs	r3, #0
 800431e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004320:	f001 f9da 	bl	80056d8 <vPortExitCritical>

	return xReturn;
 8004324:	68fb      	ldr	r3, [r7, #12]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3710      	adds	r7, #16
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800432e:	b580      	push	{r7, lr}
 8004330:	b084      	sub	sp, #16
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004336:	f001 f9a1 	bl	800567c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004342:	429a      	cmp	r2, r3
 8004344:	d102      	bne.n	800434c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004346:	2301      	movs	r3, #1
 8004348:	60fb      	str	r3, [r7, #12]
 800434a:	e001      	b.n	8004350 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004350:	f001 f9c2 	bl	80056d8 <vPortExitCritical>

	return xReturn;
 8004354:	68fb      	ldr	r3, [r7, #12]
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004368:	2300      	movs	r3, #0
 800436a:	60fb      	str	r3, [r7, #12]
 800436c:	e016      	b.n	800439c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800436e:	4a10      	ldr	r2, [pc, #64]	; (80043b0 <vQueueUnregisterQueue+0x50>)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4413      	add	r3, r2
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d10b      	bne.n	8004396 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800437e:	4a0c      	ldr	r2, [pc, #48]	; (80043b0 <vQueueUnregisterQueue+0x50>)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2100      	movs	r1, #0
 8004384:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <vQueueUnregisterQueue+0x50>)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	00db      	lsls	r3, r3, #3
 800438e:	4413      	add	r3, r2
 8004390:	2200      	movs	r2, #0
 8004392:	605a      	str	r2, [r3, #4]
				break;
 8004394:	e005      	b.n	80043a2 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b07      	cmp	r3, #7
 80043a0:	d9e5      	bls.n	800436e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80043a2:	bf00      	nop
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	20008d64 	.word	0x20008d64

080043b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08e      	sub	sp, #56	; 0x38
 80043b8:	af04      	add	r7, sp, #16
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80043c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d109      	bne.n	80043dc <xTaskCreateStatic+0x28>
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	e7fe      	b.n	80043da <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d109      	bne.n	80043f6 <xTaskCreateStatic+0x42>
 80043e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e6:	f383 8811 	msr	BASEPRI, r3
 80043ea:	f3bf 8f6f 	isb	sy
 80043ee:	f3bf 8f4f 	dsb	sy
 80043f2:	61fb      	str	r3, [r7, #28]
 80043f4:	e7fe      	b.n	80043f4 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80043f6:	2354      	movs	r3, #84	; 0x54
 80043f8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b54      	cmp	r3, #84	; 0x54
 80043fe:	d009      	beq.n	8004414 <xTaskCreateStatic+0x60>
 8004400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	61bb      	str	r3, [r7, #24]
 8004412:	e7fe      	b.n	8004412 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004414:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004418:	2b00      	cmp	r3, #0
 800441a:	d01e      	beq.n	800445a <xTaskCreateStatic+0xa6>
 800441c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01b      	beq.n	800445a <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004424:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004428:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800442a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	2202      	movs	r2, #2
 8004430:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004434:	2300      	movs	r3, #0
 8004436:	9303      	str	r3, [sp, #12]
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	9302      	str	r3, [sp, #8]
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	68b9      	ldr	r1, [r7, #8]
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f000 f850 	bl	80044f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004454:	f000 f8dc 	bl	8004610 <prvAddNewTaskToReadyList>
 8004458:	e001      	b.n	800445e <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800445e:	697b      	ldr	r3, [r7, #20]
	}
 8004460:	4618      	mov	r0, r3
 8004462:	3728      	adds	r7, #40	; 0x28
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08c      	sub	sp, #48	; 0x30
 800446c:	af04      	add	r7, sp, #16
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004478:	88fb      	ldrh	r3, [r7, #6]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f001 fa17 	bl	80058b0 <pvPortMalloc>
 8004482:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00e      	beq.n	80044a8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800448a:	2054      	movs	r0, #84	; 0x54
 800448c:	f001 fa10 	bl	80058b0 <pvPortMalloc>
 8004490:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d003      	beq.n	80044a0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004498:	69fb      	ldr	r3, [r7, #28]
 800449a:	697a      	ldr	r2, [r7, #20]
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
 800449e:	e005      	b.n	80044ac <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80044a0:	6978      	ldr	r0, [r7, #20]
 80044a2:	f001 fac7 	bl	8005a34 <vPortFree>
 80044a6:	e001      	b.n	80044ac <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80044a8:	2300      	movs	r3, #0
 80044aa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d017      	beq.n	80044e2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80044b2:	69fb      	ldr	r3, [r7, #28]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80044ba:	88fa      	ldrh	r2, [r7, #6]
 80044bc:	2300      	movs	r3, #0
 80044be:	9303      	str	r3, [sp, #12]
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	9302      	str	r3, [sp, #8]
 80044c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c6:	9301      	str	r3, [sp, #4]
 80044c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ca:	9300      	str	r3, [sp, #0]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	68b9      	ldr	r1, [r7, #8]
 80044d0:	68f8      	ldr	r0, [r7, #12]
 80044d2:	f000 f80e 	bl	80044f2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044d6:	69f8      	ldr	r0, [r7, #28]
 80044d8:	f000 f89a 	bl	8004610 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80044dc:	2301      	movs	r3, #1
 80044de:	61bb      	str	r3, [r7, #24]
 80044e0:	e002      	b.n	80044e8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80044e2:	f04f 33ff 	mov.w	r3, #4294967295
 80044e6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80044e8:	69bb      	ldr	r3, [r7, #24]
	}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3720      	adds	r7, #32
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b088      	sub	sp, #32
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	60b9      	str	r1, [r7, #8]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	461a      	mov	r2, r3
 800450a:	21a5      	movs	r1, #165	; 0xa5
 800450c:	f013 fd3a 	bl	8017f84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004512:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800451a:	3b01      	subs	r3, #1
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4413      	add	r3, r2
 8004520:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	f023 0307 	bic.w	r3, r3, #7
 8004528:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	2b00      	cmp	r3, #0
 8004532:	d009      	beq.n	8004548 <prvInitialiseNewTask+0x56>
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e7fe      	b.n	8004546 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d01f      	beq.n	800458e <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
 8004552:	e012      	b.n	800457a <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004554:	68ba      	ldr	r2, [r7, #8]
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	4413      	add	r3, r2
 800455a:	7819      	ldrb	r1, [r3, #0]
 800455c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	3334      	adds	r3, #52	; 0x34
 8004564:	460a      	mov	r2, r1
 8004566:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	4413      	add	r3, r2
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d006      	beq.n	8004582 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	3301      	adds	r3, #1
 8004578:	61fb      	str	r3, [r7, #28]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	2b0f      	cmp	r3, #15
 800457e:	d9e9      	bls.n	8004554 <prvInitialiseNewTask+0x62>
 8004580:	e000      	b.n	8004584 <prvInitialiseNewTask+0x92>
			{
				break;
 8004582:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004586:	2200      	movs	r2, #0
 8004588:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800458c:	e003      	b.n	8004596 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004598:	2b06      	cmp	r3, #6
 800459a:	d901      	bls.n	80045a0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800459c:	2306      	movs	r3, #6
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80045a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045aa:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80045ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ae:	2200      	movs	r2, #0
 80045b0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	3304      	adds	r3, #4
 80045b6:	4618      	mov	r0, r3
 80045b8:	f7fe feb9 	bl	800332e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80045bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045be:	3318      	adds	r3, #24
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe feb4 	bl	800332e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80045c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ce:	f1c3 0207 	rsb	r2, r3, #7
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80045d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	2200      	movs	r2, #0
 80045e0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80045e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	69b8      	ldr	r0, [r7, #24]
 80045f0:	f000 ff1c 	bl	800542c <pxPortInitialiseStack>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d002      	beq.n	8004606 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004602:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004606:	bf00      	nop
 8004608:	3720      	adds	r7, #32
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}
	...

08004610 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004618:	f001 f830 	bl	800567c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800461c:	4b2a      	ldr	r3, [pc, #168]	; (80046c8 <prvAddNewTaskToReadyList+0xb8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3301      	adds	r3, #1
 8004622:	4a29      	ldr	r2, [pc, #164]	; (80046c8 <prvAddNewTaskToReadyList+0xb8>)
 8004624:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004626:	4b29      	ldr	r3, [pc, #164]	; (80046cc <prvAddNewTaskToReadyList+0xbc>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d109      	bne.n	8004642 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800462e:	4a27      	ldr	r2, [pc, #156]	; (80046cc <prvAddNewTaskToReadyList+0xbc>)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004634:	4b24      	ldr	r3, [pc, #144]	; (80046c8 <prvAddNewTaskToReadyList+0xb8>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d110      	bne.n	800465e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800463c:	f000 fc08 	bl	8004e50 <prvInitialiseTaskLists>
 8004640:	e00d      	b.n	800465e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004642:	4b23      	ldr	r3, [pc, #140]	; (80046d0 <prvAddNewTaskToReadyList+0xc0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d109      	bne.n	800465e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800464a:	4b20      	ldr	r3, [pc, #128]	; (80046cc <prvAddNewTaskToReadyList+0xbc>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004654:	429a      	cmp	r2, r3
 8004656:	d802      	bhi.n	800465e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004658:	4a1c      	ldr	r2, [pc, #112]	; (80046cc <prvAddNewTaskToReadyList+0xbc>)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800465e:	4b1d      	ldr	r3, [pc, #116]	; (80046d4 <prvAddNewTaskToReadyList+0xc4>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	3301      	adds	r3, #1
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <prvAddNewTaskToReadyList+0xc4>)
 8004666:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466c:	2201      	movs	r2, #1
 800466e:	409a      	lsls	r2, r3
 8004670:	4b19      	ldr	r3, [pc, #100]	; (80046d8 <prvAddNewTaskToReadyList+0xc8>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4313      	orrs	r3, r2
 8004676:	4a18      	ldr	r2, [pc, #96]	; (80046d8 <prvAddNewTaskToReadyList+0xc8>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800467e:	4613      	mov	r3, r2
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	4413      	add	r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <prvAddNewTaskToReadyList+0xcc>)
 8004688:	441a      	add	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	3304      	adds	r3, #4
 800468e:	4619      	mov	r1, r3
 8004690:	4610      	mov	r0, r2
 8004692:	f7fe fe59 	bl	8003348 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004696:	f001 f81f 	bl	80056d8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800469a:	4b0d      	ldr	r3, [pc, #52]	; (80046d0 <prvAddNewTaskToReadyList+0xc0>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00e      	beq.n	80046c0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80046a2:	4b0a      	ldr	r3, [pc, #40]	; (80046cc <prvAddNewTaskToReadyList+0xbc>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d207      	bcs.n	80046c0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <prvAddNewTaskToReadyList+0xd0>)
 80046b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046c0:	bf00      	nop
 80046c2:	3708      	adds	r7, #8
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	2000030c 	.word	0x2000030c
 80046cc:	2000020c 	.word	0x2000020c
 80046d0:	20000318 	.word	0x20000318
 80046d4:	20000328 	.word	0x20000328
 80046d8:	20000314 	.word	0x20000314
 80046dc:	20000210 	.word	0x20000210
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b084      	sub	sp, #16
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046ec:	2300      	movs	r3, #0
 80046ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d016      	beq.n	8004724 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046f6:	4b13      	ldr	r3, [pc, #76]	; (8004744 <vTaskDelay+0x60>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d009      	beq.n	8004712 <vTaskDelay+0x2e>
 80046fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004702:	f383 8811 	msr	BASEPRI, r3
 8004706:	f3bf 8f6f 	isb	sy
 800470a:	f3bf 8f4f 	dsb	sy
 800470e:	60bb      	str	r3, [r7, #8]
 8004710:	e7fe      	b.n	8004710 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004712:	f000 f879 	bl	8004808 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004716:	2100      	movs	r1, #0
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fe21 	bl	8005360 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800471e:	f000 f881 	bl	8004824 <xTaskResumeAll>
 8004722:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d107      	bne.n	800473a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <vTaskDelay+0x64>)
 800472c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004730:	601a      	str	r2, [r3, #0]
 8004732:	f3bf 8f4f 	dsb	sy
 8004736:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800473a:	bf00      	nop
 800473c:	3710      	adds	r7, #16
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	20000334 	.word	0x20000334
 8004748:	e000ed04 	.word	0xe000ed04

0800474c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	; 0x28
 8004750:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004756:	2300      	movs	r3, #0
 8004758:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800475a:	463a      	mov	r2, r7
 800475c:	1d39      	adds	r1, r7, #4
 800475e:	f107 0308 	add.w	r3, r7, #8
 8004762:	4618      	mov	r0, r3
 8004764:	f012 ff54 	bl	8017610 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004768:	6839      	ldr	r1, [r7, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68ba      	ldr	r2, [r7, #8]
 800476e:	9202      	str	r2, [sp, #8]
 8004770:	9301      	str	r3, [sp, #4]
 8004772:	2300      	movs	r3, #0
 8004774:	9300      	str	r3, [sp, #0]
 8004776:	2300      	movs	r3, #0
 8004778:	460a      	mov	r2, r1
 800477a:	491d      	ldr	r1, [pc, #116]	; (80047f0 <vTaskStartScheduler+0xa4>)
 800477c:	481d      	ldr	r0, [pc, #116]	; (80047f4 <vTaskStartScheduler+0xa8>)
 800477e:	f7ff fe19 	bl	80043b4 <xTaskCreateStatic>
 8004782:	4602      	mov	r2, r0
 8004784:	4b1c      	ldr	r3, [pc, #112]	; (80047f8 <vTaskStartScheduler+0xac>)
 8004786:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004788:	4b1b      	ldr	r3, [pc, #108]	; (80047f8 <vTaskStartScheduler+0xac>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d002      	beq.n	8004796 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004790:	2301      	movs	r3, #1
 8004792:	617b      	str	r3, [r7, #20]
 8004794:	e001      	b.n	800479a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004796:	2300      	movs	r3, #0
 8004798:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d115      	bne.n	80047cc <vTaskStartScheduler+0x80>
 80047a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047a4:	f383 8811 	msr	BASEPRI, r3
 80047a8:	f3bf 8f6f 	isb	sy
 80047ac:	f3bf 8f4f 	dsb	sy
 80047b0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <vTaskStartScheduler+0xb0>)
 80047b4:	f04f 32ff 	mov.w	r2, #4294967295
 80047b8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80047ba:	4b11      	ldr	r3, [pc, #68]	; (8004800 <vTaskStartScheduler+0xb4>)
 80047bc:	2201      	movs	r2, #1
 80047be:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <vTaskStartScheduler+0xb8>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80047c6:	f000 febb 	bl	8005540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80047ca:	e00d      	b.n	80047e8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d2:	d109      	bne.n	80047e8 <vTaskStartScheduler+0x9c>
 80047d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d8:	f383 8811 	msr	BASEPRI, r3
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f3bf 8f4f 	dsb	sy
 80047e4:	60fb      	str	r3, [r7, #12]
 80047e6:	e7fe      	b.n	80047e6 <vTaskStartScheduler+0x9a>
}
 80047e8:	bf00      	nop
 80047ea:	3718      	adds	r7, #24
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	08018ef4 	.word	0x08018ef4
 80047f4:	08004e21 	.word	0x08004e21
 80047f8:	20000330 	.word	0x20000330
 80047fc:	2000032c 	.word	0x2000032c
 8004800:	20000318 	.word	0x20000318
 8004804:	20000310 	.word	0x20000310

08004808 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800480c:	4b04      	ldr	r3, [pc, #16]	; (8004820 <vTaskSuspendAll+0x18>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3301      	adds	r3, #1
 8004812:	4a03      	ldr	r2, [pc, #12]	; (8004820 <vTaskSuspendAll+0x18>)
 8004814:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8004816:	bf00      	nop
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	20000334 	.word	0x20000334

08004824 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004832:	4b41      	ldr	r3, [pc, #260]	; (8004938 <xTaskResumeAll+0x114>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d109      	bne.n	800484e <xTaskResumeAll+0x2a>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	e7fe      	b.n	800484c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800484e:	f000 ff15 	bl	800567c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004852:	4b39      	ldr	r3, [pc, #228]	; (8004938 <xTaskResumeAll+0x114>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	3b01      	subs	r3, #1
 8004858:	4a37      	ldr	r2, [pc, #220]	; (8004938 <xTaskResumeAll+0x114>)
 800485a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800485c:	4b36      	ldr	r3, [pc, #216]	; (8004938 <xTaskResumeAll+0x114>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d161      	bne.n	8004928 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004864:	4b35      	ldr	r3, [pc, #212]	; (800493c <xTaskResumeAll+0x118>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d05d      	beq.n	8004928 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800486c:	e02e      	b.n	80048cc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800486e:	4b34      	ldr	r3, [pc, #208]	; (8004940 <xTaskResumeAll+0x11c>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3318      	adds	r3, #24
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe fdc1 	bl	8003402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	3304      	adds	r3, #4
 8004884:	4618      	mov	r0, r3
 8004886:	f7fe fdbc 	bl	8003402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800488e:	2201      	movs	r2, #1
 8004890:	409a      	lsls	r2, r3
 8004892:	4b2c      	ldr	r3, [pc, #176]	; (8004944 <xTaskResumeAll+0x120>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4313      	orrs	r3, r2
 8004898:	4a2a      	ldr	r2, [pc, #168]	; (8004944 <xTaskResumeAll+0x120>)
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a0:	4613      	mov	r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4413      	add	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4a27      	ldr	r2, [pc, #156]	; (8004948 <xTaskResumeAll+0x124>)
 80048aa:	441a      	add	r2, r3
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	3304      	adds	r3, #4
 80048b0:	4619      	mov	r1, r3
 80048b2:	4610      	mov	r0, r2
 80048b4:	f7fe fd48 	bl	8003348 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048bc:	4b23      	ldr	r3, [pc, #140]	; (800494c <xTaskResumeAll+0x128>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d302      	bcc.n	80048cc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80048c6:	4b22      	ldr	r3, [pc, #136]	; (8004950 <xTaskResumeAll+0x12c>)
 80048c8:	2201      	movs	r2, #1
 80048ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048cc:	4b1c      	ldr	r3, [pc, #112]	; (8004940 <xTaskResumeAll+0x11c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d1cc      	bne.n	800486e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80048da:	f000 fb53 	bl	8004f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80048de:	4b1d      	ldr	r3, [pc, #116]	; (8004954 <xTaskResumeAll+0x130>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d010      	beq.n	800490c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80048ea:	f000 f859 	bl	80049a0 <xTaskIncrementTick>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80048f4:	4b16      	ldr	r3, [pc, #88]	; (8004950 <xTaskResumeAll+0x12c>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3b01      	subs	r3, #1
 80048fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f1      	bne.n	80048ea <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8004906:	4b13      	ldr	r3, [pc, #76]	; (8004954 <xTaskResumeAll+0x130>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800490c:	4b10      	ldr	r3, [pc, #64]	; (8004950 <xTaskResumeAll+0x12c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d009      	beq.n	8004928 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004914:	2301      	movs	r3, #1
 8004916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004918:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <xTaskResumeAll+0x134>)
 800491a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	f3bf 8f4f 	dsb	sy
 8004924:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004928:	f000 fed6 	bl	80056d8 <vPortExitCritical>

	return xAlreadyYielded;
 800492c:	68bb      	ldr	r3, [r7, #8]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3710      	adds	r7, #16
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20000334 	.word	0x20000334
 800493c:	2000030c 	.word	0x2000030c
 8004940:	200002cc 	.word	0x200002cc
 8004944:	20000314 	.word	0x20000314
 8004948:	20000210 	.word	0x20000210
 800494c:	2000020c 	.word	0x2000020c
 8004950:	20000320 	.word	0x20000320
 8004954:	2000031c 	.word	0x2000031c
 8004958:	e000ed04 	.word	0xe000ed04

0800495c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800495c:	b480      	push	{r7}
 800495e:	b083      	sub	sp, #12
 8004960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <xTaskGetTickCount+0x1c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004968:	687b      	ldr	r3, [r7, #4]
}
 800496a:	4618      	mov	r0, r3
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	20000310 	.word	0x20000310

0800497c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004982:	f000 ff57 	bl	8005834 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8004986:	2300      	movs	r3, #0
 8004988:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800498a:	4b04      	ldr	r3, [pc, #16]	; (800499c <xTaskGetTickCountFromISR+0x20>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004990:	683b      	ldr	r3, [r7, #0]
}
 8004992:	4618      	mov	r0, r3
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000310 	.word	0x20000310

080049a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80049aa:	4b4e      	ldr	r3, [pc, #312]	; (8004ae4 <xTaskIncrementTick+0x144>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f040 8087 	bne.w	8004ac2 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049b4:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <xTaskIncrementTick+0x148>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049bc:	4a4a      	ldr	r2, [pc, #296]	; (8004ae8 <xTaskIncrementTick+0x148>)
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11f      	bne.n	8004a08 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80049c8:	4b48      	ldr	r3, [pc, #288]	; (8004aec <xTaskIncrementTick+0x14c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d009      	beq.n	80049e6 <xTaskIncrementTick+0x46>
 80049d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d6:	f383 8811 	msr	BASEPRI, r3
 80049da:	f3bf 8f6f 	isb	sy
 80049de:	f3bf 8f4f 	dsb	sy
 80049e2:	603b      	str	r3, [r7, #0]
 80049e4:	e7fe      	b.n	80049e4 <xTaskIncrementTick+0x44>
 80049e6:	4b41      	ldr	r3, [pc, #260]	; (8004aec <xTaskIncrementTick+0x14c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <xTaskIncrementTick+0x150>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a3e      	ldr	r2, [pc, #248]	; (8004aec <xTaskIncrementTick+0x14c>)
 80049f2:	6013      	str	r3, [r2, #0]
 80049f4:	4a3e      	ldr	r2, [pc, #248]	; (8004af0 <xTaskIncrementTick+0x150>)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6013      	str	r3, [r2, #0]
 80049fa:	4b3e      	ldr	r3, [pc, #248]	; (8004af4 <xTaskIncrementTick+0x154>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	3301      	adds	r3, #1
 8004a00:	4a3c      	ldr	r2, [pc, #240]	; (8004af4 <xTaskIncrementTick+0x154>)
 8004a02:	6013      	str	r3, [r2, #0]
 8004a04:	f000 fabe 	bl	8004f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a08:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <xTaskIncrementTick+0x158>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d348      	bcc.n	8004aa4 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a12:	4b36      	ldr	r3, [pc, #216]	; (8004aec <xTaskIncrementTick+0x14c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d104      	bne.n	8004a26 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a1c:	4b36      	ldr	r3, [pc, #216]	; (8004af8 <xTaskIncrementTick+0x158>)
 8004a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8004a22:	601a      	str	r2, [r3, #0]
					break;
 8004a24:	e03e      	b.n	8004aa4 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a26:	4b31      	ldr	r3, [pc, #196]	; (8004aec <xTaskIncrementTick+0x14c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a36:	693a      	ldr	r2, [r7, #16]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d203      	bcs.n	8004a46 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a3e:	4a2e      	ldr	r2, [pc, #184]	; (8004af8 <xTaskIncrementTick+0x158>)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a44:	e02e      	b.n	8004aa4 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7fe fcd9 	bl	8003402 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	3318      	adds	r3, #24
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f7fe fcd0 	bl	8003402 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a66:	2201      	movs	r2, #1
 8004a68:	409a      	lsls	r2, r3
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <xTaskIncrementTick+0x15c>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	4a22      	ldr	r2, [pc, #136]	; (8004afc <xTaskIncrementTick+0x15c>)
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4a1f      	ldr	r2, [pc, #124]	; (8004b00 <xTaskIncrementTick+0x160>)
 8004a82:	441a      	add	r2, r3
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	3304      	adds	r3, #4
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4610      	mov	r0, r2
 8004a8c:	f7fe fc5c 	bl	8003348 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a94:	4b1b      	ldr	r3, [pc, #108]	; (8004b04 <xTaskIncrementTick+0x164>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d3b9      	bcc.n	8004a12 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004aa2:	e7b6      	b.n	8004a12 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004aa4:	4b17      	ldr	r3, [pc, #92]	; (8004b04 <xTaskIncrementTick+0x164>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aaa:	4915      	ldr	r1, [pc, #84]	; (8004b00 <xTaskIncrementTick+0x160>)
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d907      	bls.n	8004acc <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	617b      	str	r3, [r7, #20]
 8004ac0:	e004      	b.n	8004acc <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <xTaskIncrementTick+0x168>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	4a0f      	ldr	r2, [pc, #60]	; (8004b08 <xTaskIncrementTick+0x168>)
 8004aca:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004acc:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <xTaskIncrementTick+0x16c>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d001      	beq.n	8004ad8 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004ad8:	697b      	ldr	r3, [r7, #20]
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3718      	adds	r7, #24
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	20000334 	.word	0x20000334
 8004ae8:	20000310 	.word	0x20000310
 8004aec:	200002c4 	.word	0x200002c4
 8004af0:	200002c8 	.word	0x200002c8
 8004af4:	20000324 	.word	0x20000324
 8004af8:	2000032c 	.word	0x2000032c
 8004afc:	20000314 	.word	0x20000314
 8004b00:	20000210 	.word	0x20000210
 8004b04:	2000020c 	.word	0x2000020c
 8004b08:	2000031c 	.word	0x2000031c
 8004b0c:	20000320 	.word	0x20000320

08004b10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b088      	sub	sp, #32
 8004b14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <vTaskSwitchContext+0xec>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b1e:	4b38      	ldr	r3, [pc, #224]	; (8004c00 <vTaskSwitchContext+0xf0>)
 8004b20:	2201      	movs	r2, #1
 8004b22:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b24:	e065      	b.n	8004bf2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 8004b26:	4b36      	ldr	r3, [pc, #216]	; (8004c00 <vTaskSwitchContext+0xf0>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8004b2c:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <vTaskSwitchContext+0xf4>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b32:	61fb      	str	r3, [r7, #28]
 8004b34:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8004b38:	61bb      	str	r3, [r7, #24]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69ba      	ldr	r2, [r7, #24]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d111      	bne.n	8004b68 <vTaskSwitchContext+0x58>
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3304      	adds	r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d10b      	bne.n	8004b68 <vTaskSwitchContext+0x58>
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	3308      	adds	r3, #8
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d105      	bne.n	8004b68 <vTaskSwitchContext+0x58>
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	330c      	adds	r3, #12
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69ba      	ldr	r2, [r7, #24]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d008      	beq.n	8004b7a <vTaskSwitchContext+0x6a>
 8004b68:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <vTaskSwitchContext+0xf4>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	4b25      	ldr	r3, [pc, #148]	; (8004c04 <vTaskSwitchContext+0xf4>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3334      	adds	r3, #52	; 0x34
 8004b72:	4619      	mov	r1, r3
 8004b74:	4610      	mov	r0, r2
 8004b76:	f012 fd39 	bl	80175ec <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <vTaskSwitchContext+0xf8>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	fab3 f383 	clz	r3, r3
 8004b86:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b88:	7afb      	ldrb	r3, [r7, #11]
 8004b8a:	f1c3 031f 	rsb	r3, r3, #31
 8004b8e:	617b      	str	r3, [r7, #20]
 8004b90:	491e      	ldr	r1, [pc, #120]	; (8004c0c <vTaskSwitchContext+0xfc>)
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	4613      	mov	r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d109      	bne.n	8004bb8 <vTaskSwitchContext+0xa8>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	607b      	str	r3, [r7, #4]
 8004bb6:	e7fe      	b.n	8004bb6 <vTaskSwitchContext+0xa6>
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <vTaskSwitchContext+0xfc>)
 8004bc4:	4413      	add	r3, r2
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	685a      	ldr	r2, [r3, #4]
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	605a      	str	r2, [r3, #4]
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d104      	bne.n	8004be8 <vTaskSwitchContext+0xd8>
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	605a      	str	r2, [r3, #4]
 8004be8:	693b      	ldr	r3, [r7, #16]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <vTaskSwitchContext+0xf4>)
 8004bf0:	6013      	str	r3, [r2, #0]
}
 8004bf2:	bf00      	nop
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	20000334 	.word	0x20000334
 8004c00:	20000320 	.word	0x20000320
 8004c04:	2000020c 	.word	0x2000020c
 8004c08:	20000314 	.word	0x20000314
 8004c0c:	20000210 	.word	0x20000210

08004c10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b084      	sub	sp, #16
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d109      	bne.n	8004c34 <vTaskPlaceOnEventList+0x24>
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	e7fe      	b.n	8004c32 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c34:	4b07      	ldr	r3, [pc, #28]	; (8004c54 <vTaskPlaceOnEventList+0x44>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3318      	adds	r3, #24
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f7fe fba7 	bl	8003390 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c42:	2101      	movs	r1, #1
 8004c44:	6838      	ldr	r0, [r7, #0]
 8004c46:	f000 fb8b 	bl	8005360 <prvAddCurrentTaskToDelayedList>
}
 8004c4a:	bf00      	nop
 8004c4c:	3710      	adds	r7, #16
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	2000020c 	.word	0x2000020c

08004c58 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	b086      	sub	sp, #24
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	68db      	ldr	r3, [r3, #12]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d109      	bne.n	8004c82 <xTaskRemoveFromEventList+0x2a>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	e7fe      	b.n	8004c80 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	3318      	adds	r3, #24
 8004c86:	4618      	mov	r0, r3
 8004c88:	f7fe fbbb 	bl	8003402 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c8c:	4b1d      	ldr	r3, [pc, #116]	; (8004d04 <xTaskRemoveFromEventList+0xac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d11c      	bne.n	8004cce <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	3304      	adds	r3, #4
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f7fe fbb2 	bl	8003402 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	409a      	lsls	r2, r3
 8004ca6:	4b18      	ldr	r3, [pc, #96]	; (8004d08 <xTaskRemoveFromEventList+0xb0>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	4a16      	ldr	r2, [pc, #88]	; (8004d08 <xTaskRemoveFromEventList+0xb0>)
 8004cae:	6013      	str	r3, [r2, #0]
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4a13      	ldr	r2, [pc, #76]	; (8004d0c <xTaskRemoveFromEventList+0xb4>)
 8004cbe:	441a      	add	r2, r3
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	3304      	adds	r3, #4
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f7fe fb3e 	bl	8003348 <vListInsertEnd>
 8004ccc:	e005      	b.n	8004cda <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	3318      	adds	r3, #24
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	480e      	ldr	r0, [pc, #56]	; (8004d10 <xTaskRemoveFromEventList+0xb8>)
 8004cd6:	f7fe fb37 	bl	8003348 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <xTaskRemoveFromEventList+0xbc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d905      	bls.n	8004cf4 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cec:	4b0a      	ldr	r3, [pc, #40]	; (8004d18 <xTaskRemoveFromEventList+0xc0>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e001      	b.n	8004cf8 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cf8:	697b      	ldr	r3, [r7, #20]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	3718      	adds	r7, #24
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20000334 	.word	0x20000334
 8004d08:	20000314 	.word	0x20000314
 8004d0c:	20000210 	.word	0x20000210
 8004d10:	200002cc 	.word	0x200002cc
 8004d14:	2000020c 	.word	0x2000020c
 8004d18:	20000320 	.word	0x20000320

08004d1c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <vTaskInternalSetTimeOutState+0x24>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d2c:	4b05      	ldr	r3, [pc, #20]	; (8004d44 <vTaskInternalSetTimeOutState+0x28>)
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	605a      	str	r2, [r3, #4]
}
 8004d34:	bf00      	nop
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	20000324 	.word	0x20000324
 8004d44:	20000310 	.word	0x20000310

08004d48 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d109      	bne.n	8004d6c <xTaskCheckForTimeOut+0x24>
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	613b      	str	r3, [r7, #16]
 8004d6a:	e7fe      	b.n	8004d6a <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d109      	bne.n	8004d86 <xTaskCheckForTimeOut+0x3e>
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
 8004d84:	e7fe      	b.n	8004d84 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8004d86:	f000 fc79 	bl	800567c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d8a:	4b1d      	ldr	r3, [pc, #116]	; (8004e00 <xTaskCheckForTimeOut+0xb8>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d102      	bne.n	8004daa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004da4:	2300      	movs	r3, #0
 8004da6:	61fb      	str	r3, [r7, #28]
 8004da8:	e023      	b.n	8004df2 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <xTaskCheckForTimeOut+0xbc>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d007      	beq.n	8004dc6 <xTaskCheckForTimeOut+0x7e>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d302      	bcc.n	8004dc6 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	61fb      	str	r3, [r7, #28]
 8004dc4:	e015      	b.n	8004df2 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d20b      	bcs.n	8004de8 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad2      	subs	r2, r2, r3
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ddc:	6878      	ldr	r0, [r7, #4]
 8004dde:	f7ff ff9d 	bl	8004d1c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	61fb      	str	r3, [r7, #28]
 8004de6:	e004      	b.n	8004df2 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dee:	2301      	movs	r3, #1
 8004df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004df2:	f000 fc71 	bl	80056d8 <vPortExitCritical>

	return xReturn;
 8004df6:	69fb      	ldr	r3, [r7, #28]
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3720      	adds	r7, #32
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000310 	.word	0x20000310
 8004e04:	20000324 	.word	0x20000324

08004e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <vTaskMissedYield+0x14>)
 8004e0e:	2201      	movs	r2, #1
 8004e10:	601a      	str	r2, [r3, #0]
}
 8004e12:	bf00      	nop
 8004e14:	46bd      	mov	sp, r7
 8004e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1a:	4770      	bx	lr
 8004e1c:	20000320 	.word	0x20000320

08004e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e28:	f000 f852 	bl	8004ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e2c:	4b06      	ldr	r3, [pc, #24]	; (8004e48 <prvIdleTask+0x28>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d9f9      	bls.n	8004e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e34:	4b05      	ldr	r3, [pc, #20]	; (8004e4c <prvIdleTask+0x2c>)
 8004e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	f3bf 8f4f 	dsb	sy
 8004e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e44:	e7f0      	b.n	8004e28 <prvIdleTask+0x8>
 8004e46:	bf00      	nop
 8004e48:	20000210 	.word	0x20000210
 8004e4c:	e000ed04 	.word	0xe000ed04

08004e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e56:	2300      	movs	r3, #0
 8004e58:	607b      	str	r3, [r7, #4]
 8004e5a:	e00c      	b.n	8004e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	4413      	add	r3, r2
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	4a12      	ldr	r2, [pc, #72]	; (8004eb0 <prvInitialiseTaskLists+0x60>)
 8004e68:	4413      	add	r3, r2
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe fa3f 	bl	80032ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3301      	adds	r3, #1
 8004e74:	607b      	str	r3, [r7, #4]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b06      	cmp	r3, #6
 8004e7a:	d9ef      	bls.n	8004e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e7c:	480d      	ldr	r0, [pc, #52]	; (8004eb4 <prvInitialiseTaskLists+0x64>)
 8004e7e:	f7fe fa36 	bl	80032ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e82:	480d      	ldr	r0, [pc, #52]	; (8004eb8 <prvInitialiseTaskLists+0x68>)
 8004e84:	f7fe fa33 	bl	80032ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e88:	480c      	ldr	r0, [pc, #48]	; (8004ebc <prvInitialiseTaskLists+0x6c>)
 8004e8a:	f7fe fa30 	bl	80032ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e8e:	480c      	ldr	r0, [pc, #48]	; (8004ec0 <prvInitialiseTaskLists+0x70>)
 8004e90:	f7fe fa2d 	bl	80032ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e94:	480b      	ldr	r0, [pc, #44]	; (8004ec4 <prvInitialiseTaskLists+0x74>)
 8004e96:	f7fe fa2a 	bl	80032ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e9a:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <prvInitialiseTaskLists+0x78>)
 8004e9c:	4a05      	ldr	r2, [pc, #20]	; (8004eb4 <prvInitialiseTaskLists+0x64>)
 8004e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ea0:	4b0a      	ldr	r3, [pc, #40]	; (8004ecc <prvInitialiseTaskLists+0x7c>)
 8004ea2:	4a05      	ldr	r2, [pc, #20]	; (8004eb8 <prvInitialiseTaskLists+0x68>)
 8004ea4:	601a      	str	r2, [r3, #0]
}
 8004ea6:	bf00      	nop
 8004ea8:	3708      	adds	r7, #8
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000210 	.word	0x20000210
 8004eb4:	2000029c 	.word	0x2000029c
 8004eb8:	200002b0 	.word	0x200002b0
 8004ebc:	200002cc 	.word	0x200002cc
 8004ec0:	200002e0 	.word	0x200002e0
 8004ec4:	200002f8 	.word	0x200002f8
 8004ec8:	200002c4 	.word	0x200002c4
 8004ecc:	200002c8 	.word	0x200002c8

08004ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b082      	sub	sp, #8
 8004ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed6:	e019      	b.n	8004f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ed8:	f000 fbd0 	bl	800567c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004edc:	4b0f      	ldr	r3, [pc, #60]	; (8004f1c <prvCheckTasksWaitingTermination+0x4c>)
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f7fe fa8a 	bl	8003402 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eee:	4b0c      	ldr	r3, [pc, #48]	; (8004f20 <prvCheckTasksWaitingTermination+0x50>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <prvCheckTasksWaitingTermination+0x50>)
 8004ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ef8:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <prvCheckTasksWaitingTermination+0x54>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3b01      	subs	r3, #1
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <prvCheckTasksWaitingTermination+0x54>)
 8004f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004f02:	f000 fbe9 	bl	80056d8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f000 f80e 	bl	8004f28 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004f0c:	4b05      	ldr	r3, [pc, #20]	; (8004f24 <prvCheckTasksWaitingTermination+0x54>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1e1      	bne.n	8004ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004f14:	bf00      	nop
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}
 8004f1c:	200002e0 	.word	0x200002e0
 8004f20:	2000030c 	.word	0x2000030c
 8004f24:	200002f4 	.word	0x200002f4

08004f28 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d108      	bne.n	8004f4c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	4618      	mov	r0, r3
 8004f40:	f000 fd78 	bl	8005a34 <vPortFree>
				vPortFree( pxTCB );
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f000 fd75 	bl	8005a34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f4a:	e017      	b.n	8004f7c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d103      	bne.n	8004f5e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f56:	6878      	ldr	r0, [r7, #4]
 8004f58:	f000 fd6c 	bl	8005a34 <vPortFree>
	}
 8004f5c:	e00e      	b.n	8004f7c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d009      	beq.n	8004f7c <prvDeleteTCB+0x54>
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e7fe      	b.n	8004f7a <prvDeleteTCB+0x52>
	}
 8004f7c:	bf00      	nop
 8004f7e:	3710      	adds	r7, #16
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b083      	sub	sp, #12
 8004f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	; (8004fbc <prvResetNextTaskUnblockTime+0x38>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f94:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004f96:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f9c:	e008      	b.n	8004fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <prvResetNextTaskUnblockTime+0x38>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	4a04      	ldr	r2, [pc, #16]	; (8004fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8004fae:	6013      	str	r3, [r2, #0]
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	200002c4 	.word	0x200002c4
 8004fc0:	2000032c 	.word	0x2000032c

08004fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b083      	sub	sp, #12
 8004fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fca:	4b0b      	ldr	r3, [pc, #44]	; (8004ff8 <xTaskGetSchedulerState+0x34>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d102      	bne.n	8004fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	607b      	str	r3, [r7, #4]
 8004fd6:	e008      	b.n	8004fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd8:	4b08      	ldr	r3, [pc, #32]	; (8004ffc <xTaskGetSchedulerState+0x38>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	607b      	str	r3, [r7, #4]
 8004fe4:	e001      	b.n	8004fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fea:	687b      	ldr	r3, [r7, #4]
	}
 8004fec:	4618      	mov	r0, r3
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	20000318 	.word	0x20000318
 8004ffc:	20000334 	.word	0x20000334

08005000 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800500c:	2300      	movs	r3, #0
 800500e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d069      	beq.n	80050ea <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800501a:	4b36      	ldr	r3, [pc, #216]	; (80050f4 <xTaskPriorityInherit+0xf4>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005020:	429a      	cmp	r2, r3
 8005022:	d259      	bcs.n	80050d8 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	699b      	ldr	r3, [r3, #24]
 8005028:	2b00      	cmp	r3, #0
 800502a:	db06      	blt.n	800503a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <xTaskPriorityInherit+0xf4>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005032:	f1c3 0207 	rsb	r2, r3, #7
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6959      	ldr	r1, [r3, #20]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4a2b      	ldr	r2, [pc, #172]	; (80050f8 <xTaskPriorityInherit+0xf8>)
 800504c:	4413      	add	r3, r2
 800504e:	4299      	cmp	r1, r3
 8005050:	d13a      	bne.n	80050c8 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	3304      	adds	r3, #4
 8005056:	4618      	mov	r0, r3
 8005058:	f7fe f9d3 	bl	8003402 <uxListRemove>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d115      	bne.n	800508e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	4924      	ldr	r1, [pc, #144]	; (80050f8 <xTaskPriorityInherit+0xf8>)
 8005068:	4613      	mov	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4413      	add	r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xTaskPriorityInherit+0x8e>
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507c:	2201      	movs	r2, #1
 800507e:	fa02 f303 	lsl.w	r3, r2, r3
 8005082:	43da      	mvns	r2, r3
 8005084:	4b1d      	ldr	r3, [pc, #116]	; (80050fc <xTaskPriorityInherit+0xfc>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4013      	ands	r3, r2
 800508a:	4a1c      	ldr	r2, [pc, #112]	; (80050fc <xTaskPriorityInherit+0xfc>)
 800508c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800508e:	4b19      	ldr	r3, [pc, #100]	; (80050f4 <xTaskPriorityInherit+0xf4>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800509c:	2201      	movs	r2, #1
 800509e:	409a      	lsls	r2, r3
 80050a0:	4b16      	ldr	r3, [pc, #88]	; (80050fc <xTaskPriorityInherit+0xfc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	4a15      	ldr	r2, [pc, #84]	; (80050fc <xTaskPriorityInherit+0xfc>)
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ae:	4613      	mov	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	4413      	add	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4a10      	ldr	r2, [pc, #64]	; (80050f8 <xTaskPriorityInherit+0xf8>)
 80050b8:	441a      	add	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	3304      	adds	r3, #4
 80050be:	4619      	mov	r1, r3
 80050c0:	4610      	mov	r0, r2
 80050c2:	f7fe f941 	bl	8003348 <vListInsertEnd>
 80050c6:	e004      	b.n	80050d2 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80050c8:	4b0a      	ldr	r3, [pc, #40]	; (80050f4 <xTaskPriorityInherit+0xf4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	60fb      	str	r3, [r7, #12]
 80050d6:	e008      	b.n	80050ea <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050dc:	4b05      	ldr	r3, [pc, #20]	; (80050f4 <xTaskPriorityInherit+0xf4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d201      	bcs.n	80050ea <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050e6:	2301      	movs	r3, #1
 80050e8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050ea:	68fb      	ldr	r3, [r7, #12]
	}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	2000020c 	.word	0x2000020c
 80050f8:	20000210 	.word	0x20000210
 80050fc:	20000314 	.word	0x20000314

08005100 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800510c:	2300      	movs	r3, #0
 800510e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d06c      	beq.n	80051f0 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005116:	4b39      	ldr	r3, [pc, #228]	; (80051fc <xTaskPriorityDisinherit+0xfc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	429a      	cmp	r2, r3
 800511e:	d009      	beq.n	8005134 <xTaskPriorityDisinherit+0x34>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e7fe      	b.n	8005132 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005138:	2b00      	cmp	r3, #0
 800513a:	d109      	bne.n	8005150 <xTaskPriorityDisinherit+0x50>
 800513c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005140:	f383 8811 	msr	BASEPRI, r3
 8005144:	f3bf 8f6f 	isb	sy
 8005148:	f3bf 8f4f 	dsb	sy
 800514c:	60bb      	str	r3, [r7, #8]
 800514e:	e7fe      	b.n	800514e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005154:	1e5a      	subs	r2, r3, #1
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005162:	429a      	cmp	r2, r3
 8005164:	d044      	beq.n	80051f0 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516a:	2b00      	cmp	r3, #0
 800516c:	d140      	bne.n	80051f0 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	3304      	adds	r3, #4
 8005172:	4618      	mov	r0, r3
 8005174:	f7fe f945 	bl	8003402 <uxListRemove>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d115      	bne.n	80051aa <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005182:	491f      	ldr	r1, [pc, #124]	; (8005200 <xTaskPriorityDisinherit+0x100>)
 8005184:	4613      	mov	r3, r2
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d10a      	bne.n	80051aa <xTaskPriorityDisinherit+0xaa>
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005198:	2201      	movs	r2, #1
 800519a:	fa02 f303 	lsl.w	r3, r2, r3
 800519e:	43da      	mvns	r2, r3
 80051a0:	4b18      	ldr	r3, [pc, #96]	; (8005204 <xTaskPriorityDisinherit+0x104>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4013      	ands	r3, r2
 80051a6:	4a17      	ldr	r2, [pc, #92]	; (8005204 <xTaskPriorityDisinherit+0x104>)
 80051a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b6:	f1c3 0207 	rsb	r2, r3, #7
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051c2:	2201      	movs	r2, #1
 80051c4:	409a      	lsls	r2, r3
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <xTaskPriorityDisinherit+0x104>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	4a0d      	ldr	r2, [pc, #52]	; (8005204 <xTaskPriorityDisinherit+0x104>)
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051d4:	4613      	mov	r3, r2
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	4413      	add	r3, r2
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4a08      	ldr	r2, [pc, #32]	; (8005200 <xTaskPriorityDisinherit+0x100>)
 80051de:	441a      	add	r2, r3
 80051e0:	693b      	ldr	r3, [r7, #16]
 80051e2:	3304      	adds	r3, #4
 80051e4:	4619      	mov	r1, r3
 80051e6:	4610      	mov	r0, r2
 80051e8:	f7fe f8ae 	bl	8003348 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80051ec:	2301      	movs	r3, #1
 80051ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80051f0:	697b      	ldr	r3, [r7, #20]
	}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	2000020c 	.word	0x2000020c
 8005200:	20000210 	.word	0x20000210
 8005204:	20000314 	.word	0x20000314

08005208 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005216:	2301      	movs	r3, #1
 8005218:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8081 	beq.w	8005324 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005222:	69bb      	ldr	r3, [r7, #24]
 8005224:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <vTaskPriorityDisinheritAfterTimeout+0x36>
 800522a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800522e:	f383 8811 	msr	BASEPRI, r3
 8005232:	f3bf 8f6f 	isb	sy
 8005236:	f3bf 8f4f 	dsb	sy
 800523a:	60fb      	str	r3, [r7, #12]
 800523c:	e7fe      	b.n	800523c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	429a      	cmp	r2, r3
 8005246:	d902      	bls.n	800524e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	61fb      	str	r3, [r7, #28]
 800524c:	e002      	b.n	8005254 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005252:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	69fa      	ldr	r2, [r7, #28]
 800525a:	429a      	cmp	r2, r3
 800525c:	d062      	beq.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800525e:	69bb      	ldr	r3, [r7, #24]
 8005260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	429a      	cmp	r2, r3
 8005266:	d15d      	bne.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005268:	4b30      	ldr	r3, [pc, #192]	; (800532c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	429a      	cmp	r2, r3
 8005270:	d109      	bne.n	8005286 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8005272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005276:	f383 8811 	msr	BASEPRI, r3
 800527a:	f3bf 8f6f 	isb	sy
 800527e:	f3bf 8f4f 	dsb	sy
 8005282:	60bb      	str	r3, [r7, #8]
 8005284:	e7fe      	b.n	8005284 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	699b      	ldr	r3, [r3, #24]
 8005296:	2b00      	cmp	r3, #0
 8005298:	db04      	blt.n	80052a4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	f1c3 0207 	rsb	r2, r3, #7
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	6959      	ldr	r1, [r3, #20]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4613      	mov	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	4a1f      	ldr	r2, [pc, #124]	; (8005330 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80052b4:	4413      	add	r3, r2
 80052b6:	4299      	cmp	r1, r3
 80052b8:	d134      	bne.n	8005324 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ba:	69bb      	ldr	r3, [r7, #24]
 80052bc:	3304      	adds	r3, #4
 80052be:	4618      	mov	r0, r3
 80052c0:	f7fe f89f 	bl	8003402 <uxListRemove>
 80052c4:	4603      	mov	r3, r0
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d115      	bne.n	80052f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ce:	4918      	ldr	r1, [pc, #96]	; (8005330 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 80052d0:	4613      	mov	r3, r2
 80052d2:	009b      	lsls	r3, r3, #2
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <vTaskPriorityDisinheritAfterTimeout+0xee>
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	2201      	movs	r2, #1
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43da      	mvns	r2, r3
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	4013      	ands	r3, r2
 80052f2:	4a10      	ldr	r2, [pc, #64]	; (8005334 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 80052f4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fa:	2201      	movs	r2, #1
 80052fc:	409a      	lsls	r2, r3
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4313      	orrs	r3, r2
 8005304:	4a0b      	ldr	r2, [pc, #44]	; (8005334 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8005306:	6013      	str	r3, [r2, #0]
 8005308:	69bb      	ldr	r3, [r7, #24]
 800530a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800530c:	4613      	mov	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	4413      	add	r3, r2
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	4a06      	ldr	r2, [pc, #24]	; (8005330 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8005316:	441a      	add	r2, r3
 8005318:	69bb      	ldr	r3, [r7, #24]
 800531a:	3304      	adds	r3, #4
 800531c:	4619      	mov	r1, r3
 800531e:	4610      	mov	r0, r2
 8005320:	f7fe f812 	bl	8003348 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005324:	bf00      	nop
 8005326:	3720      	adds	r7, #32
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	2000020c 	.word	0x2000020c
 8005330:	20000210 	.word	0x20000210
 8005334:	20000314 	.word	0x20000314

08005338 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800533c:	4b07      	ldr	r3, [pc, #28]	; (800535c <pvTaskIncrementMutexHeldCount+0x24>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005344:	4b05      	ldr	r3, [pc, #20]	; (800535c <pvTaskIncrementMutexHeldCount+0x24>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800534a:	3201      	adds	r2, #1
 800534c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800534e:	4b03      	ldr	r3, [pc, #12]	; (800535c <pvTaskIncrementMutexHeldCount+0x24>)
 8005350:	681b      	ldr	r3, [r3, #0]
	}
 8005352:	4618      	mov	r0, r3
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	2000020c 	.word	0x2000020c

08005360 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800536a:	4b29      	ldr	r3, [pc, #164]	; (8005410 <prvAddCurrentTaskToDelayedList+0xb0>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005370:	4b28      	ldr	r3, [pc, #160]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe f843 	bl	8003402 <uxListRemove>
 800537c:	4603      	mov	r3, r0
 800537e:	2b00      	cmp	r3, #0
 8005380:	d10b      	bne.n	800539a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005382:	4b24      	ldr	r3, [pc, #144]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005388:	2201      	movs	r2, #1
 800538a:	fa02 f303 	lsl.w	r3, r2, r3
 800538e:	43da      	mvns	r2, r3
 8005390:	4b21      	ldr	r3, [pc, #132]	; (8005418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4013      	ands	r3, r2
 8005396:	4a20      	ldr	r2, [pc, #128]	; (8005418 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005398:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053a0:	d10a      	bne.n	80053b8 <prvAddCurrentTaskToDelayedList+0x58>
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d007      	beq.n	80053b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053a8:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3304      	adds	r3, #4
 80053ae:	4619      	mov	r1, r3
 80053b0:	481a      	ldr	r0, [pc, #104]	; (800541c <prvAddCurrentTaskToDelayedList+0xbc>)
 80053b2:	f7fd ffc9 	bl	8003348 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80053b6:	e026      	b.n	8005406 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80053c0:	4b14      	ldr	r3, [pc, #80]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80053c8:	68ba      	ldr	r2, [r7, #8]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d209      	bcs.n	80053e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053d0:	4b13      	ldr	r3, [pc, #76]	; (8005420 <prvAddCurrentTaskToDelayedList+0xc0>)
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	4b0f      	ldr	r3, [pc, #60]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	3304      	adds	r3, #4
 80053da:	4619      	mov	r1, r3
 80053dc:	4610      	mov	r0, r2
 80053de:	f7fd ffd7 	bl	8003390 <vListInsert>
}
 80053e2:	e010      	b.n	8005406 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <prvAddCurrentTaskToDelayedList+0xc4>)
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <prvAddCurrentTaskToDelayedList+0xb4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	3304      	adds	r3, #4
 80053ee:	4619      	mov	r1, r3
 80053f0:	4610      	mov	r0, r2
 80053f2:	f7fd ffcd 	bl	8003390 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <prvAddCurrentTaskToDelayedList+0xc8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d202      	bcs.n	8005406 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005400:	4a09      	ldr	r2, [pc, #36]	; (8005428 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	6013      	str	r3, [r2, #0]
}
 8005406:	bf00      	nop
 8005408:	3710      	adds	r7, #16
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000310 	.word	0x20000310
 8005414:	2000020c 	.word	0x2000020c
 8005418:	20000314 	.word	0x20000314
 800541c:	200002f8 	.word	0x200002f8
 8005420:	200002c8 	.word	0x200002c8
 8005424:	200002c4 	.word	0x200002c4
 8005428:	2000032c 	.word	0x2000032c

0800542c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3b04      	subs	r3, #4
 800543c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	3b04      	subs	r3, #4
 800544a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	3b04      	subs	r3, #4
 800545a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800545c:	4a0c      	ldr	r2, [pc, #48]	; (8005490 <pxPortInitialiseStack+0x64>)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	3b14      	subs	r3, #20
 8005466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	3b04      	subs	r3, #4
 8005472:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f06f 0202 	mvn.w	r2, #2
 800547a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3b20      	subs	r3, #32
 8005480:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005482:	68fb      	ldr	r3, [r7, #12]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3714      	adds	r7, #20
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	08005495 	.word	0x08005495

08005494 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800549e:	4b11      	ldr	r3, [pc, #68]	; (80054e4 <prvTaskExitError+0x50>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054a6:	d009      	beq.n	80054bc <prvTaskExitError+0x28>
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	60fb      	str	r3, [r7, #12]
 80054ba:	e7fe      	b.n	80054ba <prvTaskExitError+0x26>
 80054bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
 80054c8:	f3bf 8f4f 	dsb	sy
 80054cc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80054ce:	bf00      	nop
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0fc      	beq.n	80054d0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80054d6:	bf00      	nop
 80054d8:	3714      	adds	r7, #20
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	20000008 	.word	0x20000008
	...

080054f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80054f0:	4b07      	ldr	r3, [pc, #28]	; (8005510 <pxCurrentTCBConst2>)
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	6808      	ldr	r0, [r1, #0]
 80054f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fa:	f380 8809 	msr	PSP, r0
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f04f 0000 	mov.w	r0, #0
 8005506:	f380 8811 	msr	BASEPRI, r0
 800550a:	4770      	bx	lr
 800550c:	f3af 8000 	nop.w

08005510 <pxCurrentTCBConst2>:
 8005510:	2000020c 	.word	0x2000020c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005518:	4808      	ldr	r0, [pc, #32]	; (800553c <prvPortStartFirstTask+0x24>)
 800551a:	6800      	ldr	r0, [r0, #0]
 800551c:	6800      	ldr	r0, [r0, #0]
 800551e:	f380 8808 	msr	MSP, r0
 8005522:	f04f 0000 	mov.w	r0, #0
 8005526:	f380 8814 	msr	CONTROL, r0
 800552a:	b662      	cpsie	i
 800552c:	b661      	cpsie	f
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	f3bf 8f6f 	isb	sy
 8005536:	df00      	svc	0
 8005538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800553a:	bf00      	nop
 800553c:	e000ed08 	.word	0xe000ed08

08005540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005546:	4b44      	ldr	r3, [pc, #272]	; (8005658 <xPortStartScheduler+0x118>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a44      	ldr	r2, [pc, #272]	; (800565c <xPortStartScheduler+0x11c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d109      	bne.n	8005564 <xPortStartScheduler+0x24>
 8005550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005554:	f383 8811 	msr	BASEPRI, r3
 8005558:	f3bf 8f6f 	isb	sy
 800555c:	f3bf 8f4f 	dsb	sy
 8005560:	613b      	str	r3, [r7, #16]
 8005562:	e7fe      	b.n	8005562 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005564:	4b3c      	ldr	r3, [pc, #240]	; (8005658 <xPortStartScheduler+0x118>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a3d      	ldr	r2, [pc, #244]	; (8005660 <xPortStartScheduler+0x120>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d109      	bne.n	8005582 <xPortStartScheduler+0x42>
 800556e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60fb      	str	r3, [r7, #12]
 8005580:	e7fe      	b.n	8005580 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005582:	4b38      	ldr	r3, [pc, #224]	; (8005664 <xPortStartScheduler+0x124>)
 8005584:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	b2db      	uxtb	r3, r3
 800558c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4b30      	ldr	r3, [pc, #192]	; (8005668 <xPortStartScheduler+0x128>)
 80055a8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80055aa:	4b30      	ldr	r3, [pc, #192]	; (800566c <xPortStartScheduler+0x12c>)
 80055ac:	2207      	movs	r2, #7
 80055ae:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055b0:	e009      	b.n	80055c6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80055b2:	4b2e      	ldr	r3, [pc, #184]	; (800566c <xPortStartScheduler+0x12c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	3b01      	subs	r3, #1
 80055b8:	4a2c      	ldr	r2, [pc, #176]	; (800566c <xPortStartScheduler+0x12c>)
 80055ba:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80055bc:	78fb      	ldrb	r3, [r7, #3]
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	005b      	lsls	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ce:	2b80      	cmp	r3, #128	; 0x80
 80055d0:	d0ef      	beq.n	80055b2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80055d2:	4b26      	ldr	r3, [pc, #152]	; (800566c <xPortStartScheduler+0x12c>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f1c3 0307 	rsb	r3, r3, #7
 80055da:	2b04      	cmp	r3, #4
 80055dc:	d009      	beq.n	80055f2 <xPortStartScheduler+0xb2>
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	60bb      	str	r3, [r7, #8]
 80055f0:	e7fe      	b.n	80055f0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80055f2:	4b1e      	ldr	r3, [pc, #120]	; (800566c <xPortStartScheduler+0x12c>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	021b      	lsls	r3, r3, #8
 80055f8:	4a1c      	ldr	r2, [pc, #112]	; (800566c <xPortStartScheduler+0x12c>)
 80055fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80055fc:	4b1b      	ldr	r3, [pc, #108]	; (800566c <xPortStartScheduler+0x12c>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005604:	4a19      	ldr	r2, [pc, #100]	; (800566c <xPortStartScheduler+0x12c>)
 8005606:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	b2da      	uxtb	r2, r3
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005610:	4b17      	ldr	r3, [pc, #92]	; (8005670 <xPortStartScheduler+0x130>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a16      	ldr	r2, [pc, #88]	; (8005670 <xPortStartScheduler+0x130>)
 8005616:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800561a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800561c:	4b14      	ldr	r3, [pc, #80]	; (8005670 <xPortStartScheduler+0x130>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a13      	ldr	r2, [pc, #76]	; (8005670 <xPortStartScheduler+0x130>)
 8005622:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005626:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005628:	f000 f8d6 	bl	80057d8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800562c:	4b11      	ldr	r3, [pc, #68]	; (8005674 <xPortStartScheduler+0x134>)
 800562e:	2200      	movs	r2, #0
 8005630:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005632:	f000 f8f5 	bl	8005820 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <xPortStartScheduler+0x138>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a0f      	ldr	r2, [pc, #60]	; (8005678 <xPortStartScheduler+0x138>)
 800563c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005640:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005642:	f7ff ff69 	bl	8005518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005646:	f7ff fa63 	bl	8004b10 <vTaskSwitchContext>
	prvTaskExitError();
 800564a:	f7ff ff23 	bl	8005494 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3718      	adds	r7, #24
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	e000ed00 	.word	0xe000ed00
 800565c:	410fc271 	.word	0x410fc271
 8005660:	410fc270 	.word	0x410fc270
 8005664:	e000e400 	.word	0xe000e400
 8005668:	20000338 	.word	0x20000338
 800566c:	2000033c 	.word	0x2000033c
 8005670:	e000ed20 	.word	0xe000ed20
 8005674:	20000008 	.word	0x20000008
 8005678:	e000ef34 	.word	0xe000ef34

0800567c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005694:	4b0e      	ldr	r3, [pc, #56]	; (80056d0 <vPortEnterCritical+0x54>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3301      	adds	r3, #1
 800569a:	4a0d      	ldr	r2, [pc, #52]	; (80056d0 <vPortEnterCritical+0x54>)
 800569c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800569e:	4b0c      	ldr	r3, [pc, #48]	; (80056d0 <vPortEnterCritical+0x54>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d10e      	bne.n	80056c4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80056a6:	4b0b      	ldr	r3, [pc, #44]	; (80056d4 <vPortEnterCritical+0x58>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <vPortEnterCritical+0x48>
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	f383 8811 	msr	BASEPRI, r3
 80056b8:	f3bf 8f6f 	isb	sy
 80056bc:	f3bf 8f4f 	dsb	sy
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	e7fe      	b.n	80056c2 <vPortEnterCritical+0x46>
	}
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr
 80056d0:	20000008 	.word	0x20000008
 80056d4:	e000ed04 	.word	0xe000ed04

080056d8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80056de:	4b11      	ldr	r3, [pc, #68]	; (8005724 <vPortExitCritical+0x4c>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d109      	bne.n	80056fa <vPortExitCritical+0x22>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	f383 8811 	msr	BASEPRI, r3
 80056ee:	f3bf 8f6f 	isb	sy
 80056f2:	f3bf 8f4f 	dsb	sy
 80056f6:	607b      	str	r3, [r7, #4]
 80056f8:	e7fe      	b.n	80056f8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80056fa:	4b0a      	ldr	r3, [pc, #40]	; (8005724 <vPortExitCritical+0x4c>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	3b01      	subs	r3, #1
 8005700:	4a08      	ldr	r2, [pc, #32]	; (8005724 <vPortExitCritical+0x4c>)
 8005702:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <vPortExitCritical+0x4c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d104      	bne.n	8005716 <vPortExitCritical+0x3e>
 800570c:	2300      	movs	r3, #0
 800570e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	20000008 	.word	0x20000008
	...

08005730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005730:	f3ef 8009 	mrs	r0, PSP
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	4b15      	ldr	r3, [pc, #84]	; (8005790 <pxCurrentTCBConst>)
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	f01e 0f10 	tst.w	lr, #16
 8005740:	bf08      	it	eq
 8005742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800574a:	6010      	str	r0, [r2, #0]
 800574c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005750:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005754:	f380 8811 	msr	BASEPRI, r0
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	f3bf 8f6f 	isb	sy
 8005760:	f7ff f9d6 	bl	8004b10 <vTaskSwitchContext>
 8005764:	f04f 0000 	mov.w	r0, #0
 8005768:	f380 8811 	msr	BASEPRI, r0
 800576c:	bc09      	pop	{r0, r3}
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	6808      	ldr	r0, [r1, #0]
 8005772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005776:	f01e 0f10 	tst.w	lr, #16
 800577a:	bf08      	it	eq
 800577c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005780:	f380 8809 	msr	PSP, r0
 8005784:	f3bf 8f6f 	isb	sy
 8005788:	4770      	bx	lr
 800578a:	bf00      	nop
 800578c:	f3af 8000 	nop.w

08005790 <pxCurrentTCBConst>:
 8005790:	2000020c 	.word	0x2000020c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005794:	bf00      	nop
 8005796:	bf00      	nop

08005798 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
	__asm volatile
 800579e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a2:	f383 8811 	msr	BASEPRI, r3
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80057b0:	f7ff f8f6 	bl	80049a0 <xTaskIncrementTick>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d003      	beq.n	80057c2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80057ba:	4b06      	ldr	r3, [pc, #24]	; (80057d4 <SysTick_Handler+0x3c>)
 80057bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80057cc:	bf00      	nop
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	e000ed04 	.word	0xe000ed04

080057d8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80057dc:	4b0b      	ldr	r3, [pc, #44]	; (800580c <vPortSetupTimerInterrupt+0x34>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80057e2:	4b0b      	ldr	r3, [pc, #44]	; (8005810 <vPortSetupTimerInterrupt+0x38>)
 80057e4:	2200      	movs	r2, #0
 80057e6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <vPortSetupTimerInterrupt+0x3c>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a0a      	ldr	r2, [pc, #40]	; (8005818 <vPortSetupTimerInterrupt+0x40>)
 80057ee:	fba2 2303 	umull	r2, r3, r2, r3
 80057f2:	099b      	lsrs	r3, r3, #6
 80057f4:	4a09      	ldr	r2, [pc, #36]	; (800581c <vPortSetupTimerInterrupt+0x44>)
 80057f6:	3b01      	subs	r3, #1
 80057f8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80057fa:	4b04      	ldr	r3, [pc, #16]	; (800580c <vPortSetupTimerInterrupt+0x34>)
 80057fc:	2207      	movs	r2, #7
 80057fe:	601a      	str	r2, [r3, #0]
}
 8005800:	bf00      	nop
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	e000e010 	.word	0xe000e010
 8005810:	e000e018 	.word	0xe000e018
 8005814:	2000001c 	.word	0x2000001c
 8005818:	10624dd3 	.word	0x10624dd3
 800581c:	e000e014 	.word	0xe000e014

08005820 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005820:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005830 <vPortEnableVFP+0x10>
 8005824:	6801      	ldr	r1, [r0, #0]
 8005826:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800582a:	6001      	str	r1, [r0, #0]
 800582c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800582e:	bf00      	nop
 8005830:	e000ed88 	.word	0xe000ed88

08005834 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800583a:	f3ef 8305 	mrs	r3, IPSR
 800583e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b0f      	cmp	r3, #15
 8005844:	d913      	bls.n	800586e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005846:	4a16      	ldr	r2, [pc, #88]	; (80058a0 <vPortValidateInterruptPriority+0x6c>)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005850:	4b14      	ldr	r3, [pc, #80]	; (80058a4 <vPortValidateInterruptPriority+0x70>)
 8005852:	781b      	ldrb	r3, [r3, #0]
 8005854:	7afa      	ldrb	r2, [r7, #11]
 8005856:	429a      	cmp	r2, r3
 8005858:	d209      	bcs.n	800586e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585e:	f383 8811 	msr	BASEPRI, r3
 8005862:	f3bf 8f6f 	isb	sy
 8005866:	f3bf 8f4f 	dsb	sy
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	e7fe      	b.n	800586c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800586e:	4b0e      	ldr	r3, [pc, #56]	; (80058a8 <vPortValidateInterruptPriority+0x74>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005876:	4b0d      	ldr	r3, [pc, #52]	; (80058ac <vPortValidateInterruptPriority+0x78>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	429a      	cmp	r2, r3
 800587c:	d909      	bls.n	8005892 <vPortValidateInterruptPriority+0x5e>
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	603b      	str	r3, [r7, #0]
 8005890:	e7fe      	b.n	8005890 <vPortValidateInterruptPriority+0x5c>
	}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
 800589e:	bf00      	nop
 80058a0:	e000e3f0 	.word	0xe000e3f0
 80058a4:	20000338 	.word	0x20000338
 80058a8:	e000ed0c 	.word	0xe000ed0c
 80058ac:	2000033c 	.word	0x2000033c

080058b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08a      	sub	sp, #40	; 0x28
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80058bc:	f7fe ffa4 	bl	8004808 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80058c0:	4b57      	ldr	r3, [pc, #348]	; (8005a20 <pvPortMalloc+0x170>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d101      	bne.n	80058cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80058c8:	f000 f90c 	bl	8005ae4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80058cc:	4b55      	ldr	r3, [pc, #340]	; (8005a24 <pvPortMalloc+0x174>)
 80058ce:	681a      	ldr	r2, [r3, #0]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4013      	ands	r3, r2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	f040 808c 	bne.w	80059f2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01c      	beq.n	800591a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80058e0:	2208      	movs	r2, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4413      	add	r3, r2
 80058e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d013      	beq.n	800591a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f023 0307 	bic.w	r3, r3, #7
 80058f8:	3308      	adds	r3, #8
 80058fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f003 0307 	and.w	r3, r3, #7
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <pvPortMalloc+0x6a>
 8005906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590a:	f383 8811 	msr	BASEPRI, r3
 800590e:	f3bf 8f6f 	isb	sy
 8005912:	f3bf 8f4f 	dsb	sy
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e7fe      	b.n	8005918 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d068      	beq.n	80059f2 <pvPortMalloc+0x142>
 8005920:	4b41      	ldr	r3, [pc, #260]	; (8005a28 <pvPortMalloc+0x178>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	429a      	cmp	r2, r3
 8005928:	d863      	bhi.n	80059f2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800592a:	4b40      	ldr	r3, [pc, #256]	; (8005a2c <pvPortMalloc+0x17c>)
 800592c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <pvPortMalloc+0x17c>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005934:	e004      	b.n	8005940 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	429a      	cmp	r2, r3
 8005948:	d903      	bls.n	8005952 <pvPortMalloc+0xa2>
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d1f1      	bne.n	8005936 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005952:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <pvPortMalloc+0x170>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005958:	429a      	cmp	r2, r3
 800595a:	d04a      	beq.n	80059f2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800595c:	6a3b      	ldr	r3, [r7, #32]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	2208      	movs	r2, #8
 8005962:	4413      	add	r3, r2
 8005964:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	6a3b      	ldr	r3, [r7, #32]
 800596c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800596e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005970:	685a      	ldr	r2, [r3, #4]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	1ad2      	subs	r2, r2, r3
 8005976:	2308      	movs	r3, #8
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	429a      	cmp	r2, r3
 800597c:	d91e      	bls.n	80059bc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800597e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4413      	add	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f003 0307 	and.w	r3, r3, #7
 800598c:	2b00      	cmp	r3, #0
 800598e:	d009      	beq.n	80059a4 <pvPortMalloc+0xf4>
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	613b      	str	r3, [r7, #16]
 80059a2:	e7fe      	b.n	80059a2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	685a      	ldr	r2, [r3, #4]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	1ad2      	subs	r2, r2, r3
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80059b6:	69b8      	ldr	r0, [r7, #24]
 80059b8:	f000 f8f6 	bl	8005ba8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80059bc:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <pvPortMalloc+0x178>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	1ad3      	subs	r3, r2, r3
 80059c6:	4a18      	ldr	r2, [pc, #96]	; (8005a28 <pvPortMalloc+0x178>)
 80059c8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80059ca:	4b17      	ldr	r3, [pc, #92]	; (8005a28 <pvPortMalloc+0x178>)
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	4b18      	ldr	r3, [pc, #96]	; (8005a30 <pvPortMalloc+0x180>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d203      	bcs.n	80059de <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80059d6:	4b14      	ldr	r3, [pc, #80]	; (8005a28 <pvPortMalloc+0x178>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a15      	ldr	r2, [pc, #84]	; (8005a30 <pvPortMalloc+0x180>)
 80059dc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	4b10      	ldr	r3, [pc, #64]	; (8005a24 <pvPortMalloc+0x174>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	431a      	orrs	r2, r3
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80059ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80059f2:	f7fe ff17 	bl	8004824 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0307 	and.w	r3, r3, #7
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d009      	beq.n	8005a14 <pvPortMalloc+0x164>
 8005a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a04:	f383 8811 	msr	BASEPRI, r3
 8005a08:	f3bf 8f6f 	isb	sy
 8005a0c:	f3bf 8f4f 	dsb	sy
 8005a10:	60fb      	str	r3, [r7, #12]
 8005a12:	e7fe      	b.n	8005a12 <pvPortMalloc+0x162>
	return pvReturn;
 8005a14:	69fb      	ldr	r3, [r7, #28]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3728      	adds	r7, #40	; 0x28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20008348 	.word	0x20008348
 8005a24:	20008354 	.word	0x20008354
 8005a28:	2000834c 	.word	0x2000834c
 8005a2c:	20008340 	.word	0x20008340
 8005a30:	20008350 	.word	0x20008350

08005a34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b086      	sub	sp, #24
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d046      	beq.n	8005ad4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005a46:	2308      	movs	r3, #8
 8005a48:	425b      	negs	r3, r3
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	685a      	ldr	r2, [r3, #4]
 8005a58:	4b20      	ldr	r3, [pc, #128]	; (8005adc <vPortFree+0xa8>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d109      	bne.n	8005a76 <vPortFree+0x42>
 8005a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a66:	f383 8811 	msr	BASEPRI, r3
 8005a6a:	f3bf 8f6f 	isb	sy
 8005a6e:	f3bf 8f4f 	dsb	sy
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	e7fe      	b.n	8005a74 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d009      	beq.n	8005a92 <vPortFree+0x5e>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	60bb      	str	r3, [r7, #8]
 8005a90:	e7fe      	b.n	8005a90 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	685a      	ldr	r2, [r3, #4]
 8005a96:	4b11      	ldr	r3, [pc, #68]	; (8005adc <vPortFree+0xa8>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4013      	ands	r3, r2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d019      	beq.n	8005ad4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d115      	bne.n	8005ad4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	685a      	ldr	r2, [r3, #4]
 8005aac:	4b0b      	ldr	r3, [pc, #44]	; (8005adc <vPortFree+0xa8>)
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005ab8:	f7fe fea6 	bl	8004808 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	4b07      	ldr	r3, [pc, #28]	; (8005ae0 <vPortFree+0xac>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4413      	add	r3, r2
 8005ac6:	4a06      	ldr	r2, [pc, #24]	; (8005ae0 <vPortFree+0xac>)
 8005ac8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005aca:	6938      	ldr	r0, [r7, #16]
 8005acc:	f000 f86c 	bl	8005ba8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005ad0:	f7fe fea8 	bl	8004824 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005ad4:	bf00      	nop
 8005ad6:	3718      	adds	r7, #24
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	20008354 	.word	0x20008354
 8005ae0:	2000834c 	.word	0x2000834c

08005ae4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b085      	sub	sp, #20
 8005ae8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005aea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005af0:	4b27      	ldr	r3, [pc, #156]	; (8005b90 <prvHeapInit+0xac>)
 8005af2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f003 0307 	and.w	r3, r3, #7
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00c      	beq.n	8005b18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	3307      	adds	r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	f023 0307 	bic.w	r3, r3, #7
 8005b0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <prvHeapInit+0xac>)
 8005b14:	4413      	add	r3, r2
 8005b16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <prvHeapInit+0xb0>)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005b22:	4b1c      	ldr	r3, [pc, #112]	; (8005b94 <prvHeapInit+0xb0>)
 8005b24:	2200      	movs	r2, #0
 8005b26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005b30:	2208      	movs	r2, #8
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f023 0307 	bic.w	r3, r3, #7
 8005b3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a15      	ldr	r2, [pc, #84]	; (8005b98 <prvHeapInit+0xb4>)
 8005b44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <prvHeapInit+0xb4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005b4e:	4b12      	ldr	r3, [pc, #72]	; (8005b98 <prvHeapInit+0xb4>)
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	1ad2      	subs	r2, r2, r3
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <prvHeapInit+0xb4>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <prvHeapInit+0xb8>)
 8005b72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	4a09      	ldr	r2, [pc, #36]	; (8005ba0 <prvHeapInit+0xbc>)
 8005b7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b7c:	4b09      	ldr	r3, [pc, #36]	; (8005ba4 <prvHeapInit+0xc0>)
 8005b7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b82:	601a      	str	r2, [r3, #0]
}
 8005b84:	bf00      	nop
 8005b86:	3714      	adds	r7, #20
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000340 	.word	0x20000340
 8005b94:	20008340 	.word	0x20008340
 8005b98:	20008348 	.word	0x20008348
 8005b9c:	20008350 	.word	0x20008350
 8005ba0:	2000834c 	.word	0x2000834c
 8005ba4:	20008354 	.word	0x20008354

08005ba8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005bb0:	4b28      	ldr	r3, [pc, #160]	; (8005c54 <prvInsertBlockIntoFreeList+0xac>)
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	e002      	b.n	8005bbc <prvInsertBlockIntoFreeList+0x14>
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d8f7      	bhi.n	8005bb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d108      	bne.n	8005bea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	441a      	add	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	68ba      	ldr	r2, [r7, #8]
 8005bf4:	441a      	add	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d118      	bne.n	8005c30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681a      	ldr	r2, [r3, #0]
 8005c02:	4b15      	ldr	r3, [pc, #84]	; (8005c58 <prvInsertBlockIntoFreeList+0xb0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00d      	beq.n	8005c26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	441a      	add	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	e008      	b.n	8005c38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005c26:	4b0c      	ldr	r3, [pc, #48]	; (8005c58 <prvInsertBlockIntoFreeList+0xb0>)
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	601a      	str	r2, [r3, #0]
 8005c2e:	e003      	b.n	8005c38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d002      	beq.n	8005c46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	687a      	ldr	r2, [r7, #4]
 8005c44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c46:	bf00      	nop
 8005c48:	3714      	adds	r7, #20
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	20008340 	.word	0x20008340
 8005c58:	20008348 	.word	0x20008348

08005c5c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	6839      	ldr	r1, [r7, #0]
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f002 f99f 	bl	8007fb4 <tcpip_send_msg_wait_sem>
 8005c76:	4603      	mov	r3, r0
 8005c78:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8005c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d103      	bne.n	8005c8a <netconn_apimsg+0x2e>
    return apimsg->err;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8005c88:	e001      	b.n	8005c8e <netconn_apimsg+0x32>
  }
  return err;
 8005c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08c      	sub	sp, #48	; 0x30
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	603a      	str	r2, [r7, #0]
 8005ca2:	71fb      	strb	r3, [r7, #7]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	4618      	mov	r0, r3
 8005cae:	f000 ffab 	bl	8006c08 <netconn_alloc>
 8005cb2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8005cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d054      	beq.n	8005d64 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8005cba:	79bb      	ldrb	r3, [r7, #6]
 8005cbc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8005cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc0:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8005cc2:	f107 0308 	add.w	r3, r7, #8
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4829      	ldr	r0, [pc, #164]	; (8005d70 <netconn_new_with_proto_and_callback+0xd8>)
 8005cca:	f7ff ffc7 	bl	8005c5c <netconn_apimsg>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8005cd4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d043      	beq.n	8005d64 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8005cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d005      	beq.n	8005cf0 <netconn_new_with_proto_and_callback+0x58>
 8005ce4:	4b23      	ldr	r3, [pc, #140]	; (8005d74 <netconn_new_with_proto_and_callback+0xdc>)
 8005ce6:	22a3      	movs	r2, #163	; 0xa3
 8005ce8:	4923      	ldr	r1, [pc, #140]	; (8005d78 <netconn_new_with_proto_and_callback+0xe0>)
 8005cea:	4824      	ldr	r0, [pc, #144]	; (8005d7c <netconn_new_with_proto_and_callback+0xe4>)
 8005cec:	f012 f952 	bl	8017f94 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8005cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf2:	3310      	adds	r3, #16
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f00f f9ee 	bl	80150d6 <sys_mbox_valid>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d105      	bne.n	8005d0c <netconn_new_with_proto_and_callback+0x74>
 8005d00:	4b1c      	ldr	r3, [pc, #112]	; (8005d74 <netconn_new_with_proto_and_callback+0xdc>)
 8005d02:	22a4      	movs	r2, #164	; 0xa4
 8005d04:	491e      	ldr	r1, [pc, #120]	; (8005d80 <netconn_new_with_proto_and_callback+0xe8>)
 8005d06:	481d      	ldr	r0, [pc, #116]	; (8005d7c <netconn_new_with_proto_and_callback+0xe4>)
 8005d08:	f012 f944 	bl	8017f94 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	3314      	adds	r3, #20
 8005d10:	4618      	mov	r0, r3
 8005d12:	f00f f9e0 	bl	80150d6 <sys_mbox_valid>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <netconn_new_with_proto_and_callback+0x90>
 8005d1c:	4b15      	ldr	r3, [pc, #84]	; (8005d74 <netconn_new_with_proto_and_callback+0xdc>)
 8005d1e:	22a6      	movs	r2, #166	; 0xa6
 8005d20:	4918      	ldr	r1, [pc, #96]	; (8005d84 <netconn_new_with_proto_and_callback+0xec>)
 8005d22:	4816      	ldr	r0, [pc, #88]	; (8005d7c <netconn_new_with_proto_and_callback+0xe4>)
 8005d24:	f012 f936 	bl	8017f94 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8005d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d2a:	330c      	adds	r3, #12
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f00f fa63 	bl	80151f8 <sys_sem_valid>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d105      	bne.n	8005d44 <netconn_new_with_proto_and_callback+0xac>
 8005d38:	4b0e      	ldr	r3, [pc, #56]	; (8005d74 <netconn_new_with_proto_and_callback+0xdc>)
 8005d3a:	22a9      	movs	r2, #169	; 0xa9
 8005d3c:	4912      	ldr	r1, [pc, #72]	; (8005d88 <netconn_new_with_proto_and_callback+0xf0>)
 8005d3e:	480f      	ldr	r0, [pc, #60]	; (8005d7c <netconn_new_with_proto_and_callback+0xe4>)
 8005d40:	f012 f928 	bl	8017f94 <iprintf>
      sys_sem_free(&conn->op_completed);
 8005d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d46:	330c      	adds	r3, #12
 8005d48:	4618      	mov	r0, r3
 8005d4a:	f00f fa48 	bl	80151de <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8005d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d50:	3310      	adds	r3, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f00f f938 	bl	8014fc8 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8005d58:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d5a:	2007      	movs	r0, #7
 8005d5c:	f002 fe92 	bl	8008a84 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8005d60:	2300      	movs	r3, #0
 8005d62:	e000      	b.n	8005d66 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8005d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3730      	adds	r7, #48	; 0x30
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	08006bdd 	.word	0x08006bdd
 8005d74:	08018efc 	.word	0x08018efc
 8005d78:	08018f30 	.word	0x08018f30
 8005d7c:	08018f54 	.word	0x08018f54
 8005d80:	08018f7c 	.word	0x08018f7c
 8005d84:	08018f94 	.word	0x08018f94
 8005d88:	08018fb8 	.word	0x08018fb8

08005d8c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b08c      	sub	sp, #48	; 0x30
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <netconn_prepare_delete+0x12>
    return ERR_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e014      	b.n	8005dc8 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8005da2:	2329      	movs	r3, #41	; 0x29
 8005da4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8005da6:	f107 030c 	add.w	r3, r7, #12
 8005daa:	4619      	mov	r1, r3
 8005dac:	4808      	ldr	r0, [pc, #32]	; (8005dd0 <netconn_prepare_delete+0x44>)
 8005dae:	f7ff ff55 	bl	8005c5c <netconn_apimsg>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8005db8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d002      	beq.n	8005dc6 <netconn_prepare_delete+0x3a>
    return err;
 8005dc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005dc4:	e000      	b.n	8005dc8 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3730      	adds	r7, #48	; 0x30
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	08007141 	.word	0x08007141

08005dd4 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <netconn_delete+0x12>
    return ERR_OK;
 8005de2:	2300      	movs	r3, #0
 8005de4:	e00d      	b.n	8005e02 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ffd0 	bl	8005d8c <netconn_prepare_delete>
 8005dec:	4603      	mov	r3, r0
 8005dee:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8005df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d102      	bne.n	8005dfe <netconn_delete+0x2a>
    netconn_free(conn);
 8005df8:	6878      	ldr	r0, [r7, #4]
 8005dfa:	f000 ff73 	bl	8006ce4 <netconn_free>
  }
  return err;
 8005dfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08e      	sub	sp, #56	; 0x38
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d109      	bne.n	8005e34 <netconn_connect+0x28>
 8005e20:	4b11      	ldr	r3, [pc, #68]	; (8005e68 <netconn_connect+0x5c>)
 8005e22:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8005e26:	4911      	ldr	r1, [pc, #68]	; (8005e6c <netconn_connect+0x60>)
 8005e28:	4811      	ldr	r0, [pc, #68]	; (8005e70 <netconn_connect+0x64>)
 8005e2a:	f012 f8b3 	bl	8017f94 <iprintf>
 8005e2e:	f06f 030f 	mvn.w	r3, #15
 8005e32:	e015      	b.n	8005e60 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8005e3a:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <netconn_connect+0x68>)
 8005e3c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8005e42:	68bb      	ldr	r3, [r7, #8]
 8005e44:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8005e46:	88fb      	ldrh	r3, [r7, #6]
 8005e48:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8005e4a:	f107 0314 	add.w	r3, r7, #20
 8005e4e:	4619      	mov	r1, r3
 8005e50:	4809      	ldr	r0, [pc, #36]	; (8005e78 <netconn_connect+0x6c>)
 8005e52:	f7ff ff03 	bl	8005c5c <netconn_apimsg>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8005e5c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3738      	adds	r7, #56	; 0x38
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	08018efc 	.word	0x08018efc
 8005e6c:	08019070 	.word	0x08019070
 8005e70:	08018f54 	.word	0x08018f54
 8005e74:	0801cb08 	.word	0x0801cb08
 8005e78:	08007429 	.word	0x08007429

08005e7c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b088      	sub	sp, #32
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	60f8      	str	r0, [r7, #12]
 8005e84:	60b9      	str	r1, [r7, #8]
 8005e86:	4613      	mov	r3, r2
 8005e88:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d109      	bne.n	8005ea8 <netconn_recv_data+0x2c>
 8005e94:	4b58      	ldr	r3, [pc, #352]	; (8005ff8 <netconn_recv_data+0x17c>)
 8005e96:	f44f 7212 	mov.w	r2, #584	; 0x248
 8005e9a:	4958      	ldr	r1, [pc, #352]	; (8005ffc <netconn_recv_data+0x180>)
 8005e9c:	4858      	ldr	r0, [pc, #352]	; (8006000 <netconn_recv_data+0x184>)
 8005e9e:	f012 f879 	bl	8017f94 <iprintf>
 8005ea2:	f06f 030f 	mvn.w	r3, #15
 8005ea6:	e0a2      	b.n	8005fee <netconn_recv_data+0x172>
  *new_buf = NULL;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d109      	bne.n	8005ec8 <netconn_recv_data+0x4c>
 8005eb4:	4b50      	ldr	r3, [pc, #320]	; (8005ff8 <netconn_recv_data+0x17c>)
 8005eb6:	f240 224a 	movw	r2, #586	; 0x24a
 8005eba:	4952      	ldr	r1, [pc, #328]	; (8006004 <netconn_recv_data+0x188>)
 8005ebc:	4850      	ldr	r0, [pc, #320]	; (8006000 <netconn_recv_data+0x184>)
 8005ebe:	f012 f869 	bl	8017f94 <iprintf>
 8005ec2:	f06f 030f 	mvn.w	r3, #15
 8005ec6:	e092      	b.n	8005fee <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	3310      	adds	r3, #16
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f00f f902 	bl	80150d6 <sys_mbox_valid>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10e      	bne.n	8005ef6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8005ed8:	68f8      	ldr	r0, [r7, #12]
 8005eda:	f000 fad4 	bl	8006486 <netconn_err>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8005ee2:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8005eea:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8005eee:	e07e      	b.n	8005fee <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8005ef0:	f06f 030a 	mvn.w	r3, #10
 8005ef4:	e07b      	b.n	8005fee <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	7f1b      	ldrb	r3, [r3, #28]
 8005efa:	f003 0302 	and.w	r3, r3, #2
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d10f      	bne.n	8005f22 <netconn_recv_data+0xa6>
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	f003 0304 	and.w	r3, r3, #4
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	7f1b      	ldrb	r3, [r3, #28]
 8005f10:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d023      	beq.n	8005f6a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	3310      	adds	r3, #16
 8005f26:	f107 0218 	add.w	r2, r7, #24
 8005f2a:	4611      	mov	r1, r2
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f00f f8b6 	bl	801509e <sys_arch_mbox_tryfetch>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f38:	d11f      	bne.n	8005f7a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8005f3a:	68f8      	ldr	r0, [r7, #12]
 8005f3c:	f000 faa3 	bl	8006486 <netconn_err>
 8005f40:	4603      	mov	r3, r0
 8005f42:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8005f44:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d002      	beq.n	8005f52 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8005f4c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8005f50:	e04d      	b.n	8005fee <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	7f1b      	ldrb	r3, [r3, #28]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8005f5e:	f06f 030a 	mvn.w	r3, #10
 8005f62:	e044      	b.n	8005fee <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8005f64:	f06f 0306 	mvn.w	r3, #6
 8005f68:	e041      	b.n	8005fee <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3310      	adds	r3, #16
 8005f6e:	f107 0118 	add.w	r1, r7, #24
 8005f72:	2200      	movs	r2, #0
 8005f74:	4618      	mov	r0, r3
 8005f76:	f00f f853 	bl	8015020 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005f82:	2b10      	cmp	r3, #16
 8005f84:	d117      	bne.n	8005fb6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8005f86:	69bb      	ldr	r3, [r7, #24]
 8005f88:	f107 0217 	add.w	r2, r7, #23
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fac6 	bl	8006520 <lwip_netconn_is_err_msg>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d009      	beq.n	8005fae <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8005f9a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005f9e:	f113 0f0f 	cmn.w	r3, #15
 8005fa2:	d101      	bne.n	8005fa8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	e022      	b.n	8005fee <netconn_recv_data+0x172>
      }
      return err;
 8005fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005fac:	e01f      	b.n	8005fee <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8005fae:	69bb      	ldr	r3, [r7, #24]
 8005fb0:	891b      	ldrh	r3, [r3, #8]
 8005fb2:	83fb      	strh	r3, [r7, #30]
 8005fb4:	e00d      	b.n	8005fd2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8005fb6:	69bb      	ldr	r3, [r7, #24]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <netconn_recv_data+0x14e>
 8005fbc:	4b0e      	ldr	r3, [pc, #56]	; (8005ff8 <netconn_recv_data+0x17c>)
 8005fbe:	f240 2291 	movw	r2, #657	; 0x291
 8005fc2:	4911      	ldr	r1, [pc, #68]	; (8006008 <netconn_recv_data+0x18c>)
 8005fc4:	480e      	ldr	r0, [pc, #56]	; (8006000 <netconn_recv_data+0x184>)
 8005fc6:	f011 ffe5 	bl	8017f94 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	891b      	ldrh	r3, [r3, #8]
 8005fd0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <netconn_recv_data+0x16a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	8bfa      	ldrh	r2, [r7, #30]
 8005fe0:	2101      	movs	r1, #1
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8005fec:	2300      	movs	r3, #0
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	3720      	adds	r7, #32
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	bf00      	nop
 8005ff8:	08018efc 	.word	0x08018efc
 8005ffc:	08019114 	.word	0x08019114
 8006000:	08018f54 	.word	0x08018f54
 8006004:	08019134 	.word	0x08019134
 8006008:	08019150 	.word	0x08019150

0800600c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d005      	beq.n	800602a <netconn_tcp_recvd_msg+0x1e>
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006026:	2b10      	cmp	r3, #16
 8006028:	d009      	beq.n	800603e <netconn_tcp_recvd_msg+0x32>
 800602a:	4b0c      	ldr	r3, [pc, #48]	; (800605c <netconn_tcp_recvd_msg+0x50>)
 800602c:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8006030:	490b      	ldr	r1, [pc, #44]	; (8006060 <netconn_tcp_recvd_msg+0x54>)
 8006032:	480c      	ldr	r0, [pc, #48]	; (8006064 <netconn_tcp_recvd_msg+0x58>)
 8006034:	f011 ffae 	bl	8017f94 <iprintf>
 8006038:	f06f 030f 	mvn.w	r3, #15
 800603c:	e00a      	b.n	8006054 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800604a:	6879      	ldr	r1, [r7, #4]
 800604c:	4806      	ldr	r0, [pc, #24]	; (8006068 <netconn_tcp_recvd_msg+0x5c>)
 800604e:	f7ff fe05 	bl	8005c5c <netconn_apimsg>
 8006052:	4603      	mov	r3, r0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	08018efc 	.word	0x08018efc
 8006060:	0801915c 	.word	0x0801915c
 8006064:	08018f54 	.word	0x08018f54
 8006068:	080075a5 	.word	0x080075a5

0800606c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b090      	sub	sp, #64	; 0x40
 8006070:	af00      	add	r7, sp, #0
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	60b9      	str	r1, [r7, #8]
 8006076:	4613      	mov	r3, r2
 8006078:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	3310      	adds	r3, #16
 800607e:	4618      	mov	r0, r3
 8006080:	f00f f829 	bl	80150d6 <sys_mbox_valid>
 8006084:	4603      	mov	r3, r0
 8006086:	2b00      	cmp	r3, #0
 8006088:	d102      	bne.n	8006090 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800608a:	f06f 030a 	mvn.w	r3, #10
 800608e:	e06d      	b.n	800616c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	7f1b      	ldrb	r3, [r3, #28]
 8006094:	b25b      	sxtb	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	da07      	bge.n	80060aa <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	7f1b      	ldrb	r3, [r3, #28]
 800609e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a2:	b2da      	uxtb	r2, r3
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80060a8:	e039      	b.n	800611e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80060aa:	79fb      	ldrb	r3, [r7, #7]
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f7ff fee3 	bl	8005e7c <netconn_recv_data>
 80060b6:	4603      	mov	r3, r0
 80060b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80060bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80060c4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80060c8:	e050      	b.n	800616c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80060d0:	79fb      	ldrb	r3, [r7, #7]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10e      	bne.n	80060f8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d002      	beq.n	80060e6 <netconn_recv_data_tcp+0x7a>
 80060e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e2:	891b      	ldrh	r3, [r3, #8]
 80060e4:	e000      	b.n	80060e8 <netconn_recv_data_tcp+0x7c>
 80060e6:	2301      	movs	r3, #1
 80060e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 80060ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060ec:	f107 0214 	add.w	r2, r7, #20
 80060f0:	4619      	mov	r1, r3
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff ff8a 	bl	800600c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 80060f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d134      	bne.n	8006168 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	f003 0310 	and.w	r3, r3, #16
 8006104:	2b00      	cmp	r3, #0
 8006106:	d009      	beq.n	800611c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	7f1b      	ldrb	r3, [r3, #28]
 800610c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006110:	b2da      	uxtb	r2, r3
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8006116:	f06f 0306 	mvn.w	r3, #6
 800611a:	e027      	b.n	800616c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800611c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d005      	beq.n	8006132 <netconn_recv_data_tcp+0xc6>
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612a:	2200      	movs	r2, #0
 800612c:	2101      	movs	r1, #1
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800613a:	68f8      	ldr	r0, [r7, #12]
 800613c:	f000 f9a3 	bl	8006486 <netconn_err>
 8006140:	4603      	mov	r3, r0
 8006142:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8006146:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800614a:	2b00      	cmp	r3, #0
 800614c:	d002      	beq.n	8006154 <netconn_recv_data_tcp+0xe8>
          return err;
 800614e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006152:	e00b      	b.n	800616c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8006154:	f06f 030d 	mvn.w	r3, #13
 8006158:	e008      	b.n	800616c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800615a:	2101      	movs	r1, #1
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f000 f955 	bl	800640c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8006162:	f06f 030e 	mvn.w	r3, #14
 8006166:	e001      	b.n	800616c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8006168:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800616c:	4618      	mov	r0, r3
 800616e:	3740      	adds	r7, #64	; 0x40
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b086      	sub	sp, #24
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800617e:	2300      	movs	r3, #0
 8006180:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d109      	bne.n	800619c <netconn_recv+0x28>
 8006188:	4b32      	ldr	r3, [pc, #200]	; (8006254 <netconn_recv+0xe0>)
 800618a:	f240 3263 	movw	r2, #867	; 0x363
 800618e:	4932      	ldr	r1, [pc, #200]	; (8006258 <netconn_recv+0xe4>)
 8006190:	4832      	ldr	r0, [pc, #200]	; (800625c <netconn_recv+0xe8>)
 8006192:	f011 feff 	bl	8017f94 <iprintf>
 8006196:	f06f 030f 	mvn.w	r3, #15
 800619a:	e056      	b.n	800624a <netconn_recv+0xd6>
  *new_buf = NULL;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d109      	bne.n	80061bc <netconn_recv+0x48>
 80061a8:	4b2a      	ldr	r3, [pc, #168]	; (8006254 <netconn_recv+0xe0>)
 80061aa:	f240 3265 	movw	r2, #869	; 0x365
 80061ae:	492c      	ldr	r1, [pc, #176]	; (8006260 <netconn_recv+0xec>)
 80061b0:	482a      	ldr	r0, [pc, #168]	; (800625c <netconn_recv+0xe8>)
 80061b2:	f011 feef 	bl	8017f94 <iprintf>
 80061b6:	f06f 030f 	mvn.w	r3, #15
 80061ba:	e046      	b.n	800624a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061c4:	2b10      	cmp	r3, #16
 80061c6:	d13a      	bne.n	800623e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80061cc:	2006      	movs	r0, #6
 80061ce:	f002 fc07 	bl	80089e0 <memp_malloc>
 80061d2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d102      	bne.n	80061e0 <netconn_recv+0x6c>
      return ERR_MEM;
 80061da:	f04f 33ff 	mov.w	r3, #4294967295
 80061de:	e034      	b.n	800624a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 80061e0:	f107 030c 	add.w	r3, r7, #12
 80061e4:	2200      	movs	r2, #0
 80061e6:	4619      	mov	r1, r3
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7ff ff3f 	bl	800606c <netconn_recv_data_tcp>
 80061ee:	4603      	mov	r3, r0
 80061f0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80061f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d006      	beq.n	8006208 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 80061fa:	6979      	ldr	r1, [r7, #20]
 80061fc:	2006      	movs	r0, #6
 80061fe:	f002 fc41 	bl	8008a84 <memp_free>
      return err;
 8006202:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006206:	e020      	b.n	800624a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d106      	bne.n	800621c <netconn_recv+0xa8>
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <netconn_recv+0xe0>)
 8006210:	f240 3279 	movw	r2, #889	; 0x379
 8006214:	4913      	ldr	r1, [pc, #76]	; (8006264 <netconn_recv+0xf0>)
 8006216:	4811      	ldr	r0, [pc, #68]	; (800625c <netconn_recv+0xe8>)
 8006218:	f011 febc 	bl	8017f94 <iprintf>

    buf->p = p;
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	2200      	movs	r2, #0
 800622c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2200      	movs	r2, #0
 8006232:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800623a:	2300      	movs	r3, #0
 800623c:	e005      	b.n	800624a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800623e:	2200      	movs	r2, #0
 8006240:	6839      	ldr	r1, [r7, #0]
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	f7ff fe1a 	bl	8005e7c <netconn_recv_data>
 8006248:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800624a:	4618      	mov	r0, r3
 800624c:	3718      	adds	r7, #24
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	08018efc 	.word	0x08018efc
 8006258:	08019114 	.word	0x08019114
 800625c:	08018f54 	.word	0x08018f54
 8006260:	08019134 	.word	0x08019134
 8006264:	080191ac 	.word	0x080191ac

08006268 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b088      	sub	sp, #32
 800626c:	af02      	add	r7, sp, #8
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800627e:	78fa      	ldrb	r2, [r7, #3]
 8006280:	f107 0110 	add.w	r1, r7, #16
 8006284:	6a3b      	ldr	r3, [r7, #32]
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	2201      	movs	r2, #1
 800628c:	68f8      	ldr	r0, [r7, #12]
 800628e:	f000 f805 	bl	800629c <netconn_write_vectors_partly>
 8006292:	4603      	mov	r3, r0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3718      	adds	r7, #24
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b092      	sub	sp, #72	; 0x48
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4611      	mov	r1, r2
 80062a8:	461a      	mov	r2, r3
 80062aa:	460b      	mov	r3, r1
 80062ac:	80fb      	strh	r3, [r7, #6]
 80062ae:	4613      	mov	r3, r2
 80062b0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d109      	bne.n	80062cc <netconn_write_vectors_partly+0x30>
 80062b8:	4b4e      	ldr	r3, [pc, #312]	; (80063f4 <netconn_write_vectors_partly+0x158>)
 80062ba:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80062be:	494e      	ldr	r1, [pc, #312]	; (80063f8 <netconn_write_vectors_partly+0x15c>)
 80062c0:	484e      	ldr	r0, [pc, #312]	; (80063fc <netconn_write_vectors_partly+0x160>)
 80062c2:	f011 fe67 	bl	8017f94 <iprintf>
 80062c6:	f06f 030f 	mvn.w	r3, #15
 80062ca:	e08e      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	781b      	ldrb	r3, [r3, #0]
 80062d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062d4:	2b10      	cmp	r3, #16
 80062d6:	d009      	beq.n	80062ec <netconn_write_vectors_partly+0x50>
 80062d8:	4b46      	ldr	r3, [pc, #280]	; (80063f4 <netconn_write_vectors_partly+0x158>)
 80062da:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80062de:	4948      	ldr	r1, [pc, #288]	; (8006400 <netconn_write_vectors_partly+0x164>)
 80062e0:	4846      	ldr	r0, [pc, #280]	; (80063fc <netconn_write_vectors_partly+0x160>)
 80062e2:	f011 fe57 	bl	8017f94 <iprintf>
 80062e6:	f06f 0305 	mvn.w	r3, #5
 80062ea:	e07e      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	7f1b      	ldrb	r3, [r3, #28]
 80062f0:	f003 0302 	and.w	r3, r3, #2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d104      	bne.n	8006302 <netconn_write_vectors_partly+0x66>
 80062f8:	797b      	ldrb	r3, [r7, #5]
 80062fa:	f003 0304 	and.w	r3, r3, #4
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d001      	beq.n	8006306 <netconn_write_vectors_partly+0x6a>
 8006302:	2301      	movs	r3, #1
 8006304:	e000      	b.n	8006308 <netconn_write_vectors_partly+0x6c>
 8006306:	2300      	movs	r3, #0
 8006308:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800630c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006310:	2b00      	cmp	r3, #0
 8006312:	d005      	beq.n	8006320 <netconn_write_vectors_partly+0x84>
 8006314:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006316:	2b00      	cmp	r3, #0
 8006318:	d102      	bne.n	8006320 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800631a:	f06f 0305 	mvn.w	r3, #5
 800631e:	e064      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8006324:	2300      	movs	r3, #0
 8006326:	643b      	str	r3, [r7, #64]	; 0x40
 8006328:	e015      	b.n	8006356 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800632a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	68ba      	ldr	r2, [r7, #8]
 8006330:	4413      	add	r3, r2
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006336:	4413      	add	r3, r2
 8006338:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 800633a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	4413      	add	r3, r2
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006346:	429a      	cmp	r2, r3
 8006348:	d202      	bcs.n	8006350 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800634a:	f06f 0305 	mvn.w	r3, #5
 800634e:	e04c      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8006350:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006352:	3301      	adds	r3, #1
 8006354:	643b      	str	r3, [r7, #64]	; 0x40
 8006356:	88fb      	ldrh	r3, [r7, #6]
 8006358:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800635a:	429a      	cmp	r2, r3
 800635c:	dbe5      	blt.n	800632a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800635e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006360:	2b00      	cmp	r3, #0
 8006362:	d101      	bne.n	8006368 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8006364:	2300      	movs	r3, #0
 8006366:	e040      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8006368:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800636a:	2b00      	cmp	r3, #0
 800636c:	da0a      	bge.n	8006384 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800636e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006370:	2b00      	cmp	r3, #0
 8006372:	d102      	bne.n	800637a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8006374:	f06f 0305 	mvn.w	r3, #5
 8006378:	e037      	b.n	80063ea <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800637a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800637e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8006380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006382:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800638c:	88fb      	ldrh	r3, [r7, #6]
 800638e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8006390:	2300      	movs	r3, #0
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8006394:	797b      	ldrb	r3, [r7, #5]
 8006396:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800639a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 80063a2:	f107 0314 	add.w	r3, r7, #20
 80063a6:	4619      	mov	r1, r3
 80063a8:	4816      	ldr	r0, [pc, #88]	; (8006404 <netconn_write_vectors_partly+0x168>)
 80063aa:	f7ff fc57 	bl	8005c5c <netconn_apimsg>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 80063b4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d114      	bne.n	80063e6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 80063bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 80063c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 80063c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80063d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d006      	beq.n	80063e6 <netconn_write_vectors_partly+0x14a>
 80063d8:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <netconn_write_vectors_partly+0x158>)
 80063da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80063de:	490a      	ldr	r1, [pc, #40]	; (8006408 <netconn_write_vectors_partly+0x16c>)
 80063e0:	4806      	ldr	r0, [pc, #24]	; (80063fc <netconn_write_vectors_partly+0x160>)
 80063e2:	f011 fdd7 	bl	8017f94 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80063e6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3748      	adds	r7, #72	; 0x48
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	08018efc 	.word	0x08018efc
 80063f8:	080191d4 	.word	0x080191d4
 80063fc:	08018f54 	.word	0x08018f54
 8006400:	080191f0 	.word	0x080191f0
 8006404:	080079a9 	.word	0x080079a9
 8006408:	08019214 	.word	0x08019214

0800640c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b08c      	sub	sp, #48	; 0x30
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	460b      	mov	r3, r1
 8006416:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <netconn_close_shutdown+0x26>
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <netconn_close_shutdown+0x50>)
 8006420:	f240 4247 	movw	r2, #1095	; 0x447
 8006424:	490e      	ldr	r1, [pc, #56]	; (8006460 <netconn_close_shutdown+0x54>)
 8006426:	480f      	ldr	r0, [pc, #60]	; (8006464 <netconn_close_shutdown+0x58>)
 8006428:	f011 fdb4 	bl	8017f94 <iprintf>
 800642c:	f06f 030f 	mvn.w	r3, #15
 8006430:	e010      	b.n	8006454 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800643a:	2329      	movs	r3, #41	; 0x29
 800643c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800643e:	f107 030c 	add.w	r3, r7, #12
 8006442:	4619      	mov	r1, r3
 8006444:	4808      	ldr	r0, [pc, #32]	; (8006468 <netconn_close_shutdown+0x5c>)
 8006446:	f7ff fc09 	bl	8005c5c <netconn_apimsg>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8006450:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006454:	4618      	mov	r0, r3
 8006456:	3730      	adds	r7, #48	; 0x30
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	08018efc 	.word	0x08018efc
 8006460:	08019238 	.word	0x08019238
 8006464:	08018f54 	.word	0x08018f54
 8006468:	08007ac1 	.word	0x08007ac1

0800646c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8006474:	2103      	movs	r1, #3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f7ff ffc8 	bl	800640c <netconn_close_shutdown>
 800647c:	4603      	mov	r3, r0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b084      	sub	sp, #16
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <netconn_err+0x12>
    return ERR_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	e00d      	b.n	80064b4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8006498:	f00e ff38 	bl	801530c <sys_arch_protect>
 800649c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	7a1b      	ldrb	r3, [r3, #8]
 80064a2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80064aa:	68f8      	ldr	r0, [r7, #12]
 80064ac:	f00e ff3c 	bl	8015328 <sys_arch_unprotect>
  return err;
 80064b0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80064b4:	4618      	mov	r0, r3
 80064b6:	3710      	adds	r7, #16
 80064b8:	46bd      	mov	sp, r7
 80064ba:	bd80      	pop	{r7, pc}

080064bc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b082      	sub	sp, #8
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	4603      	mov	r3, r0
 80064c4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80064c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ca:	f113 0f0e 	cmn.w	r3, #14
 80064ce:	d008      	beq.n	80064e2 <lwip_netconn_err_to_msg+0x26>
 80064d0:	f113 0f0d 	cmn.w	r3, #13
 80064d4:	d003      	beq.n	80064de <lwip_netconn_err_to_msg+0x22>
 80064d6:	f113 0f0f 	cmn.w	r3, #15
 80064da:	d004      	beq.n	80064e6 <lwip_netconn_err_to_msg+0x2a>
 80064dc:	e005      	b.n	80064ea <lwip_netconn_err_to_msg+0x2e>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80064de:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <lwip_netconn_err_to_msg+0x4c>)
 80064e0:	e00e      	b.n	8006500 <lwip_netconn_err_to_msg+0x44>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80064e2:	4b0a      	ldr	r3, [pc, #40]	; (800650c <lwip_netconn_err_to_msg+0x50>)
 80064e4:	e00c      	b.n	8006500 <lwip_netconn_err_to_msg+0x44>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80064e6:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <lwip_netconn_err_to_msg+0x54>)
 80064e8:	e00a      	b.n	8006500 <lwip_netconn_err_to_msg+0x44>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80064ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d005      	beq.n	80064fe <lwip_netconn_err_to_msg+0x42>
 80064f2:	4b08      	ldr	r3, [pc, #32]	; (8006514 <lwip_netconn_err_to_msg+0x58>)
 80064f4:	227d      	movs	r2, #125	; 0x7d
 80064f6:	4908      	ldr	r1, [pc, #32]	; (8006518 <lwip_netconn_err_to_msg+0x5c>)
 80064f8:	4808      	ldr	r0, [pc, #32]	; (800651c <lwip_netconn_err_to_msg+0x60>)
 80064fa:	f011 fd4b 	bl	8017f94 <iprintf>
      return NULL;
 80064fe:	2300      	movs	r3, #0
  }
}
 8006500:	4618      	mov	r0, r3
 8006502:	3708      	adds	r7, #8
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}
 8006508:	0801c9e5 	.word	0x0801c9e5
 800650c:	0801c9e6 	.word	0x0801c9e6
 8006510:	0801c9e7 	.word	0x0801c9e7
 8006514:	08019254 	.word	0x08019254
 8006518:	08019288 	.word	0x08019288
 800651c:	08019298 	.word	0x08019298

08006520 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b082      	sub	sp, #8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d105      	bne.n	800653c <lwip_netconn_is_err_msg+0x1c>
 8006530:	4b12      	ldr	r3, [pc, #72]	; (800657c <lwip_netconn_is_err_msg+0x5c>)
 8006532:	2285      	movs	r2, #133	; 0x85
 8006534:	4912      	ldr	r1, [pc, #72]	; (8006580 <lwip_netconn_is_err_msg+0x60>)
 8006536:	4813      	ldr	r0, [pc, #76]	; (8006584 <lwip_netconn_is_err_msg+0x64>)
 8006538:	f011 fd2c 	bl	8017f94 <iprintf>

  if (msg == &netconn_aborted) {
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a12      	ldr	r2, [pc, #72]	; (8006588 <lwip_netconn_is_err_msg+0x68>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d104      	bne.n	800654e <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	22f3      	movs	r2, #243	; 0xf3
 8006548:	701a      	strb	r2, [r3, #0]
    return 1;
 800654a:	2301      	movs	r3, #1
 800654c:	e012      	b.n	8006574 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a0e      	ldr	r2, [pc, #56]	; (800658c <lwip_netconn_is_err_msg+0x6c>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d104      	bne.n	8006560 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	22f2      	movs	r2, #242	; 0xf2
 800655a:	701a      	strb	r2, [r3, #0]
    return 1;
 800655c:	2301      	movs	r3, #1
 800655e:	e009      	b.n	8006574 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a0b      	ldr	r2, [pc, #44]	; (8006590 <lwip_netconn_is_err_msg+0x70>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d104      	bne.n	8006572 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	22f1      	movs	r2, #241	; 0xf1
 800656c:	701a      	strb	r2, [r3, #0]
    return 1;
 800656e:	2301      	movs	r3, #1
 8006570:	e000      	b.n	8006574 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8006572:	2300      	movs	r3, #0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}
 800657c:	08019254 	.word	0x08019254
 8006580:	080192c0 	.word	0x080192c0
 8006584:	08019298 	.word	0x08019298
 8006588:	0801c9e5 	.word	0x0801c9e5
 800658c:	0801c9e6 	.word	0x0801c9e6
 8006590:	0801c9e7 	.word	0x0801c9e7

08006594 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b088      	sub	sp, #32
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	60b9      	str	r1, [r7, #8]
 800659e:	607a      	str	r2, [r7, #4]
 80065a0:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d105      	bne.n	80065b4 <recv_udp+0x20>
 80065a8:	4b34      	ldr	r3, [pc, #208]	; (800667c <recv_udp+0xe8>)
 80065aa:	22e5      	movs	r2, #229	; 0xe5
 80065ac:	4934      	ldr	r1, [pc, #208]	; (8006680 <recv_udp+0xec>)
 80065ae:	4835      	ldr	r0, [pc, #212]	; (8006684 <recv_udp+0xf0>)
 80065b0:	f011 fcf0 	bl	8017f94 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d105      	bne.n	80065c6 <recv_udp+0x32>
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <recv_udp+0xe8>)
 80065bc:	22e6      	movs	r2, #230	; 0xe6
 80065be:	4932      	ldr	r1, [pc, #200]	; (8006688 <recv_udp+0xf4>)
 80065c0:	4830      	ldr	r0, [pc, #192]	; (8006684 <recv_udp+0xf0>)
 80065c2:	f011 fce7 	bl	8017f94 <iprintf>
  conn = (struct netconn *)arg;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <recv_udp+0x44>
    pbuf_free(p);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f003 f903 	bl	80097dc <pbuf_free>
    return;
 80065d6:	e04d      	b.n	8006674 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	68ba      	ldr	r2, [r7, #8]
 80065de:	429a      	cmp	r2, r3
 80065e0:	d005      	beq.n	80065ee <recv_udp+0x5a>
 80065e2:	4b26      	ldr	r3, [pc, #152]	; (800667c <recv_udp+0xe8>)
 80065e4:	22ee      	movs	r2, #238	; 0xee
 80065e6:	4929      	ldr	r1, [pc, #164]	; (800668c <recv_udp+0xf8>)
 80065e8:	4826      	ldr	r0, [pc, #152]	; (8006684 <recv_udp+0xf0>)
 80065ea:	f011 fcd3 	bl	8017f94 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80065ee:	69fb      	ldr	r3, [r7, #28]
 80065f0:	3310      	adds	r3, #16
 80065f2:	4618      	mov	r0, r3
 80065f4:	f00e fd6f 	bl	80150d6 <sys_mbox_valid>
 80065f8:	4603      	mov	r3, r0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f003 f8ec 	bl	80097dc <pbuf_free>
    return;
 8006604:	e036      	b.n	8006674 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8006606:	2006      	movs	r0, #6
 8006608:	f002 f9ea 	bl	80089e0 <memp_malloc>
 800660c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d103      	bne.n	800661c <recv_udp+0x88>
    pbuf_free(p);
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f003 f8e1 	bl	80097dc <pbuf_free>
    return;
 800661a:	e02b      	b.n	8006674 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800661c:	69bb      	ldr	r3, [r7, #24]
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	687a      	ldr	r2, [r7, #4]
 8006626:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d002      	beq.n	8006634 <recv_udp+0xa0>
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	e000      	b.n	8006636 <recv_udp+0xa2>
 8006634:	2300      	movs	r3, #0
 8006636:	69ba      	ldr	r2, [r7, #24]
 8006638:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800663e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	891b      	ldrh	r3, [r3, #8]
 8006644:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3310      	adds	r3, #16
 800664a:	69b9      	ldr	r1, [r7, #24]
 800664c:	4618      	mov	r0, r3
 800664e:	f00e fccd 	bl	8014fec <sys_mbox_trypost>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d003      	beq.n	8006660 <recv_udp+0xcc>
    netbuf_delete(buf);
 8006658:	69b8      	ldr	r0, [r7, #24]
 800665a:	f001 fabd 	bl	8007bd8 <netbuf_delete>
    return;
 800665e:	e009      	b.n	8006674 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006660:	69fb      	ldr	r3, [r7, #28]
 8006662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006664:	2b00      	cmp	r3, #0
 8006666:	d005      	beq.n	8006674 <recv_udp+0xe0>
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	8afa      	ldrh	r2, [r7, #22]
 800666e:	2100      	movs	r1, #0
 8006670:	69f8      	ldr	r0, [r7, #28]
 8006672:	4798      	blx	r3
  }
}
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	08019254 	.word	0x08019254
 8006680:	080192cc 	.word	0x080192cc
 8006684:	08019298 	.word	0x08019298
 8006688:	080192f0 	.word	0x080192f0
 800668c:	08019310 	.word	0x08019310

08006690 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d106      	bne.n	80066b2 <recv_tcp+0x22>
 80066a4:	4b36      	ldr	r3, [pc, #216]	; (8006780 <recv_tcp+0xf0>)
 80066a6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80066aa:	4936      	ldr	r1, [pc, #216]	; (8006784 <recv_tcp+0xf4>)
 80066ac:	4836      	ldr	r0, [pc, #216]	; (8006788 <recv_tcp+0xf8>)
 80066ae:	f011 fc71 	bl	8017f94 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <recv_tcp+0x36>
 80066b8:	4b31      	ldr	r3, [pc, #196]	; (8006780 <recv_tcp+0xf0>)
 80066ba:	f240 122d 	movw	r2, #301	; 0x12d
 80066be:	4933      	ldr	r1, [pc, #204]	; (800678c <recv_tcp+0xfc>)
 80066c0:	4831      	ldr	r0, [pc, #196]	; (8006788 <recv_tcp+0xf8>)
 80066c2:	f011 fc67 	bl	8017f94 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80066c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <recv_tcp+0x4c>
 80066ce:	4b2c      	ldr	r3, [pc, #176]	; (8006780 <recv_tcp+0xf0>)
 80066d0:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80066d4:	492e      	ldr	r1, [pc, #184]	; (8006790 <recv_tcp+0x100>)
 80066d6:	482c      	ldr	r0, [pc, #176]	; (8006788 <recv_tcp+0xf8>)
 80066d8:	f011 fc5c 	bl	8017f94 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d102      	bne.n	80066ec <recv_tcp+0x5c>
    return ERR_VAL;
 80066e6:	f06f 0305 	mvn.w	r3, #5
 80066ea:	e045      	b.n	8006778 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d006      	beq.n	8006704 <recv_tcp+0x74>
 80066f6:	4b22      	ldr	r3, [pc, #136]	; (8006780 <recv_tcp+0xf0>)
 80066f8:	f240 1235 	movw	r2, #309	; 0x135
 80066fc:	4925      	ldr	r1, [pc, #148]	; (8006794 <recv_tcp+0x104>)
 80066fe:	4822      	ldr	r0, [pc, #136]	; (8006788 <recv_tcp+0xf8>)
 8006700:	f011 fc48 	bl	8017f94 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	3310      	adds	r3, #16
 8006708:	4618      	mov	r0, r3
 800670a:	f00e fce4 	bl	80150d6 <sys_mbox_valid>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10d      	bne.n	8006730 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d008      	beq.n	800672c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	891b      	ldrh	r3, [r3, #8]
 800671e:	4619      	mov	r1, r3
 8006720:	68b8      	ldr	r0, [r7, #8]
 8006722:	f003 feb7 	bl	800a494 <tcp_recved>
      pbuf_free(p);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f003 f858 	bl	80097dc <pbuf_free>
    }
    return ERR_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e023      	b.n	8006778 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d005      	beq.n	8006742 <recv_tcp+0xb2>
    msg = p;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	891b      	ldrh	r3, [r3, #8]
 800673e:	83fb      	strh	r3, [r7, #30]
 8006740:	e003      	b.n	800674a <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8006742:	4b15      	ldr	r3, [pc, #84]	; (8006798 <recv_tcp+0x108>)
 8006744:	61bb      	str	r3, [r7, #24]
    len = 0;
 8006746:	2300      	movs	r3, #0
 8006748:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	3310      	adds	r3, #16
 800674e:	69b9      	ldr	r1, [r7, #24]
 8006750:	4618      	mov	r0, r3
 8006752:	f00e fc4b 	bl	8014fec <sys_mbox_trypost>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d002      	beq.n	8006762 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
 8006760:	e00a      	b.n	8006778 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006766:	2b00      	cmp	r3, #0
 8006768:	d005      	beq.n	8006776 <recv_tcp+0xe6>
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	8bfa      	ldrh	r2, [r7, #30]
 8006770:	2100      	movs	r1, #0
 8006772:	6978      	ldr	r0, [r7, #20]
 8006774:	4798      	blx	r3
  }

  return ERR_OK;
 8006776:	2300      	movs	r3, #0
}
 8006778:	4618      	mov	r0, r3
 800677a:	3720      	adds	r7, #32
 800677c:	46bd      	mov	sp, r7
 800677e:	bd80      	pop	{r7, pc}
 8006780:	08019254 	.word	0x08019254
 8006784:	08019330 	.word	0x08019330
 8006788:	08019298 	.word	0x08019298
 800678c:	08019354 	.word	0x08019354
 8006790:	08019374 	.word	0x08019374
 8006794:	0801938c 	.word	0x0801938c
 8006798:	0801c9e7 	.word	0x0801c9e7

0800679c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d106      	bne.n	80067be <poll_tcp+0x22>
 80067b0:	4b29      	ldr	r3, [pc, #164]	; (8006858 <poll_tcp+0xbc>)
 80067b2:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80067b6:	4929      	ldr	r1, [pc, #164]	; (800685c <poll_tcp+0xc0>)
 80067b8:	4829      	ldr	r0, [pc, #164]	; (8006860 <poll_tcp+0xc4>)
 80067ba:	f011 fbeb 	bl	8017f94 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	785b      	ldrb	r3, [r3, #1]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d104      	bne.n	80067d0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80067c6:	2101      	movs	r1, #1
 80067c8:	68f8      	ldr	r0, [r7, #12]
 80067ca:	f000 ff21 	bl	8007610 <lwip_netconn_do_writemore>
 80067ce:	e016      	b.n	80067fe <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	785b      	ldrb	r3, [r3, #1]
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d112      	bne.n	80067fe <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a1b      	ldr	r3, [r3, #32]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00a      	beq.n	80067f6 <poll_tcp+0x5a>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	7a5b      	ldrb	r3, [r3, #9]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d005      	beq.n	80067f6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	7a5a      	ldrb	r2, [r3, #9]
 80067f0:	3a01      	subs	r2, #1
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80067f6:	2101      	movs	r1, #1
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fb3b 	bl	8006e74 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	7f1b      	ldrb	r3, [r3, #28]
 8006802:	f003 0310 	and.w	r3, r3, #16
 8006806:	2b00      	cmp	r3, #0
 8006808:	d021      	beq.n	800684e <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	685b      	ldr	r3, [r3, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d01d      	beq.n	800684e <poll_tcp+0xb2>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800681a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800681e:	d316      	bcc.n	800684e <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8006828:	2b04      	cmp	r3, #4
 800682a:	d810      	bhi.n	800684e <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	7f1b      	ldrb	r3, [r3, #28]
 8006830:	f023 0310 	bic.w	r3, r3, #16
 8006834:	b2da      	uxtb	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683e:	2b00      	cmp	r3, #0
 8006840:	d005      	beq.n	800684e <poll_tcp+0xb2>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006846:	2200      	movs	r2, #0
 8006848:	2102      	movs	r1, #2
 800684a:	68f8      	ldr	r0, [r7, #12]
 800684c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800684e:	2300      	movs	r3, #0
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}
 8006858:	08019254 	.word	0x08019254
 800685c:	080193ac 	.word	0x080193ac
 8006860:	08019298 	.word	0x08019298

08006864 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b086      	sub	sp, #24
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d106      	bne.n	800688a <sent_tcp+0x26>
 800687c:	4b20      	ldr	r3, [pc, #128]	; (8006900 <sent_tcp+0x9c>)
 800687e:	f240 1293 	movw	r2, #403	; 0x193
 8006882:	4920      	ldr	r1, [pc, #128]	; (8006904 <sent_tcp+0xa0>)
 8006884:	4820      	ldr	r0, [pc, #128]	; (8006908 <sent_tcp+0xa4>)
 8006886:	f011 fb85 	bl	8017f94 <iprintf>

  if (conn) {
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d032      	beq.n	80068f6 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	785b      	ldrb	r3, [r3, #1]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d104      	bne.n	80068a2 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8006898:	2101      	movs	r1, #1
 800689a:	6978      	ldr	r0, [r7, #20]
 800689c:	f000 feb8 	bl	8007610 <lwip_netconn_do_writemore>
 80068a0:	e007      	b.n	80068b2 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	785b      	ldrb	r3, [r3, #1]
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d103      	bne.n	80068b2 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80068aa:	2101      	movs	r1, #1
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	f000 fae1 	bl	8006e74 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01d      	beq.n	80068f6 <sent_tcp+0x92>
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80068c2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80068c6:	d316      	bcc.n	80068f6 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80068d0:	2b04      	cmp	r3, #4
 80068d2:	d810      	bhi.n	80068f6 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	7f1b      	ldrb	r3, [r3, #28]
 80068d8:	f023 0310 	bic.w	r3, r3, #16
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d005      	beq.n	80068f6 <sent_tcp+0x92>
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068ee:	88fa      	ldrh	r2, [r7, #6]
 80068f0:	2102      	movs	r1, #2
 80068f2:	6978      	ldr	r0, [r7, #20]
 80068f4:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3718      	adds	r7, #24
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}
 8006900:	08019254 	.word	0x08019254
 8006904:	080193ac 	.word	0x080193ac
 8006908:	08019298 	.word	0x08019298

0800690c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b088      	sub	sp, #32
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <err_tcp+0x24>
 8006922:	4b5f      	ldr	r3, [pc, #380]	; (8006aa0 <err_tcp+0x194>)
 8006924:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8006928:	495e      	ldr	r1, [pc, #376]	; (8006aa4 <err_tcp+0x198>)
 800692a:	485f      	ldr	r0, [pc, #380]	; (8006aa8 <err_tcp+0x19c>)
 800692c:	f011 fb32 	bl	8017f94 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8006930:	f00e fcec 	bl	801530c <sys_arch_protect>
 8006934:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	2200      	movs	r2, #0
 800693a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	78fa      	ldrb	r2, [r7, #3]
 8006940:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	7f1b      	ldrb	r3, [r3, #28]
 8006946:	f043 0301 	orr.w	r3, r3, #1
 800694a:	b2da      	uxtb	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2200      	movs	r2, #0
 800695a:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800695c:	69b8      	ldr	r0, [r7, #24]
 800695e:	f00e fce3 	bl	8015328 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d005      	beq.n	8006976 <err_tcp+0x6a>
 800696a:	69fb      	ldr	r3, [r7, #28]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	2200      	movs	r2, #0
 8006970:	2104      	movs	r1, #4
 8006972:	69f8      	ldr	r0, [r7, #28]
 8006974:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800697a:	2b00      	cmp	r3, #0
 800697c:	d005      	beq.n	800698a <err_tcp+0x7e>
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	2200      	movs	r2, #0
 8006984:	2100      	movs	r1, #0
 8006986:	69f8      	ldr	r0, [r7, #28]
 8006988:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <err_tcp+0x92>
 8006992:	69fb      	ldr	r3, [r7, #28]
 8006994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006996:	2200      	movs	r2, #0
 8006998:	2102      	movs	r1, #2
 800699a:	69f8      	ldr	r0, [r7, #28]
 800699c:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800699e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069a2:	4618      	mov	r0, r3
 80069a4:	f7ff fd8a 	bl	80064bc <lwip_netconn_err_to_msg>
 80069a8:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	3310      	adds	r3, #16
 80069ae:	4618      	mov	r0, r3
 80069b0:	f00e fb91 	bl	80150d6 <sys_mbox_valid>
 80069b4:	4603      	mov	r3, r0
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d005      	beq.n	80069c6 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	3310      	adds	r3, #16
 80069be:	6939      	ldr	r1, [r7, #16]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f00e fb13 	bl	8014fec <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	3314      	adds	r3, #20
 80069ca:	4618      	mov	r0, r3
 80069cc:	f00e fb83 	bl	80150d6 <sys_mbox_valid>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d005      	beq.n	80069e2 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 80069d6:	69fb      	ldr	r3, [r7, #28]
 80069d8:	3314      	adds	r3, #20
 80069da:	6939      	ldr	r1, [r7, #16]
 80069dc:	4618      	mov	r0, r3
 80069de:	f00e fb05 	bl	8014fec <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d005      	beq.n	80069f4 <err_tcp+0xe8>
 80069e8:	7dfb      	ldrb	r3, [r7, #23]
 80069ea:	2b04      	cmp	r3, #4
 80069ec:	d002      	beq.n	80069f4 <err_tcp+0xe8>
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	d143      	bne.n	8006a7c <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	7f1b      	ldrb	r3, [r3, #28]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bf14      	ite	ne
 8006a00:	2301      	movne	r3, #1
 8006a02:	2300      	moveq	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	7f1b      	ldrb	r3, [r3, #28]
 8006a0c:	f023 0304 	bic.w	r3, r3, #4
 8006a10:	b2da      	uxtb	r2, r3
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d13b      	bne.n	8006a94 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	6a1b      	ldr	r3, [r3, #32]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d106      	bne.n	8006a32 <err_tcp+0x126>
 8006a24:	4b1e      	ldr	r3, [pc, #120]	; (8006aa0 <err_tcp+0x194>)
 8006a26:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8006a2a:	4920      	ldr	r1, [pc, #128]	; (8006aac <err_tcp+0x1a0>)
 8006a2c:	481e      	ldr	r0, [pc, #120]	; (8006aa8 <err_tcp+0x19c>)
 8006a2e:	f011 fab1 	bl	8017f94 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	2b04      	cmp	r3, #4
 8006a36:	d104      	bne.n	8006a42 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	711a      	strb	r2, [r3, #4]
 8006a40:	e003      	b.n	8006a4a <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	78fa      	ldrb	r2, [r7, #3]
 8006a48:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8006a54:	68b8      	ldr	r0, [r7, #8]
 8006a56:	f00e fbcf 	bl	80151f8 <sys_sem_valid>
 8006a5a:	4603      	mov	r3, r0
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d106      	bne.n	8006a6e <err_tcp+0x162>
 8006a60:	4b0f      	ldr	r3, [pc, #60]	; (8006aa0 <err_tcp+0x194>)
 8006a62:	f240 12ef 	movw	r2, #495	; 0x1ef
 8006a66:	4912      	ldr	r1, [pc, #72]	; (8006ab0 <err_tcp+0x1a4>)
 8006a68:	480f      	ldr	r0, [pc, #60]	; (8006aa8 <err_tcp+0x19c>)
 8006a6a:	f011 fa93 	bl	8017f94 <iprintf>
      conn->current_msg = NULL;
 8006a6e:	69fb      	ldr	r3, [r7, #28]
 8006a70:	2200      	movs	r2, #0
 8006a72:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8006a74:	68b8      	ldr	r0, [r7, #8]
 8006a76:	f00e fba5 	bl	80151c4 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8006a7a:	e00b      	b.n	8006a94 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	6a1b      	ldr	r3, [r3, #32]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d008      	beq.n	8006a96 <err_tcp+0x18a>
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <err_tcp+0x194>)
 8006a86:	f240 12f7 	movw	r2, #503	; 0x1f7
 8006a8a:	490a      	ldr	r1, [pc, #40]	; (8006ab4 <err_tcp+0x1a8>)
 8006a8c:	4806      	ldr	r0, [pc, #24]	; (8006aa8 <err_tcp+0x19c>)
 8006a8e:	f011 fa81 	bl	8017f94 <iprintf>
  }
}
 8006a92:	e000      	b.n	8006a96 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8006a94:	bf00      	nop
}
 8006a96:	bf00      	nop
 8006a98:	3720      	adds	r7, #32
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	08019254 	.word	0x08019254
 8006aa4:	080193ac 	.word	0x080193ac
 8006aa8:	08019298 	.word	0x08019298
 8006aac:	080193bc 	.word	0x080193bc
 8006ab0:	080193d8 	.word	0x080193d8
 8006ab4:	080193f4 	.word	0x080193f4

08006ab8 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f004 fcbd 	bl	800b448 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8006ace:	490a      	ldr	r1, [pc, #40]	; (8006af8 <setup_tcp+0x40>)
 8006ad0:	68f8      	ldr	r0, [r7, #12]
 8006ad2:	f004 fccb 	bl	800b46c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8006ad6:	4909      	ldr	r1, [pc, #36]	; (8006afc <setup_tcp+0x44>)
 8006ad8:	68f8      	ldr	r0, [r7, #12]
 8006ada:	f004 fce9 	bl	800b4b0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8006ade:	2202      	movs	r2, #2
 8006ae0:	4907      	ldr	r1, [pc, #28]	; (8006b00 <setup_tcp+0x48>)
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f004 fd40 	bl	800b568 <tcp_poll>
  tcp_err(pcb, err_tcp);
 8006ae8:	4906      	ldr	r1, [pc, #24]	; (8006b04 <setup_tcp+0x4c>)
 8006aea:	68f8      	ldr	r0, [r7, #12]
 8006aec:	f004 fd02 	bl	800b4f4 <tcp_err>
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	08006691 	.word	0x08006691
 8006afc:	08006865 	.word	0x08006865
 8006b00:	0800679d 	.word	0x0800679d
 8006b04:	0800690d 	.word	0x0800690d

08006b08 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8006b08:	b590      	push	{r4, r7, lr}
 8006b0a:	b085      	sub	sp, #20
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8006b10:	2300      	movs	r3, #0
 8006b12:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d006      	beq.n	8006b2c <pcb_new+0x24>
 8006b1e:	4b2b      	ldr	r3, [pc, #172]	; (8006bcc <pcb_new+0xc4>)
 8006b20:	f240 2265 	movw	r2, #613	; 0x265
 8006b24:	492a      	ldr	r1, [pc, #168]	; (8006bd0 <pcb_new+0xc8>)
 8006b26:	482b      	ldr	r0, [pc, #172]	; (8006bd4 <pcb_new+0xcc>)
 8006b28:	f011 fa34 	bl	8017f94 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b36:	2b10      	cmp	r3, #16
 8006b38:	d022      	beq.n	8006b80 <pcb_new+0x78>
 8006b3a:	2b20      	cmp	r3, #32
 8006b3c:	d133      	bne.n	8006ba6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681c      	ldr	r4, [r3, #0]
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f009 ff30 	bl	80109aa <udp_new_ip_type>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d02a      	beq.n	8006bae <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	781b      	ldrb	r3, [r3, #0]
 8006b5e:	2b22      	cmp	r3, #34	; 0x22
 8006b60:	d104      	bne.n	8006b6c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	2201      	movs	r2, #1
 8006b6a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	6858      	ldr	r0, [r3, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	4917      	ldr	r1, [pc, #92]	; (8006bd8 <pcb_new+0xd0>)
 8006b7a:	f009 fe9d 	bl	80108b8 <udp_recv>
      }
      break;
 8006b7e:	e016      	b.n	8006bae <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681c      	ldr	r4, [r3, #0]
 8006b84:	7bfb      	ldrb	r3, [r7, #15]
 8006b86:	4618      	mov	r0, r3
 8006b88:	f004 fc50 	bl	800b42c <tcp_new_ip_type>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d00b      	beq.n	8006bb2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7ff ff8a 	bl	8006ab8 <setup_tcp>
      }
      break;
 8006ba4:	e005      	b.n	8006bb2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	22fa      	movs	r2, #250	; 0xfa
 8006baa:	711a      	strb	r2, [r3, #4]
      return;
 8006bac:	e00a      	b.n	8006bc4 <pcb_new+0xbc>
      break;
 8006bae:	bf00      	nop
 8006bb0:	e000      	b.n	8006bb4 <pcb_new+0xac>
      break;
 8006bb2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d102      	bne.n	8006bc4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	22ff      	movs	r2, #255	; 0xff
 8006bc2:	711a      	strb	r2, [r3, #4]
  }
}
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	bd90      	pop	{r4, r7, pc}
 8006bca:	bf00      	nop
 8006bcc:	08019254 	.word	0x08019254
 8006bd0:	08019438 	.word	0x08019438
 8006bd4:	08019298 	.word	0x08019298
 8006bd8:	08006595 	.word	0x08006595

08006bdc <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b084      	sub	sp, #16
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d102      	bne.n	8006bfe <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f7ff ff85 	bl	8006b08 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8006bfe:	bf00      	nop
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
	...

08006c08 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b086      	sub	sp, #24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	4603      	mov	r3, r0
 8006c10:	6039      	str	r1, [r7, #0]
 8006c12:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8006c14:	2300      	movs	r3, #0
 8006c16:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8006c18:	2007      	movs	r0, #7
 8006c1a:	f001 fee1 	bl	80089e0 <memp_malloc>
 8006c1e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <netconn_alloc+0x22>
    return NULL;
 8006c26:	2300      	movs	r3, #0
 8006c28:	e052      	b.n	8006cd0 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	79fa      	ldrb	r2, [r7, #7]
 8006c34:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c42:	2b10      	cmp	r3, #16
 8006c44:	d004      	beq.n	8006c50 <netconn_alloc+0x48>
 8006c46:	2b20      	cmp	r3, #32
 8006c48:	d105      	bne.n	8006c56 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8006c4a:	2306      	movs	r3, #6
 8006c4c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8006c4e:	e00a      	b.n	8006c66 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8006c50:	2306      	movs	r3, #6
 8006c52:	617b      	str	r3, [r7, #20]
      break;
 8006c54:	e007      	b.n	8006c66 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8006c56:	4b20      	ldr	r3, [pc, #128]	; (8006cd8 <netconn_alloc+0xd0>)
 8006c58:	f240 22e5 	movw	r2, #741	; 0x2e5
 8006c5c:	491f      	ldr	r1, [pc, #124]	; (8006cdc <netconn_alloc+0xd4>)
 8006c5e:	4820      	ldr	r0, [pc, #128]	; (8006ce0 <netconn_alloc+0xd8>)
 8006c60:	f011 f998 	bl	8017f94 <iprintf>
      goto free_and_return;
 8006c64:	e02f      	b.n	8006cc6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	3310      	adds	r3, #16
 8006c6a:	6979      	ldr	r1, [r7, #20]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f00e f989 	bl	8014f84 <sys_mbox_new>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d125      	bne.n	8006cc4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	330c      	adds	r3, #12
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f00e fa47 	bl	8015112 <sys_sem_new>
 8006c84:	4603      	mov	r3, r0
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d005      	beq.n	8006c96 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	3310      	adds	r3, #16
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f00e f99a 	bl	8014fc8 <sys_mbox_free>
    goto free_and_return;
 8006c94:	e017      	b.n	8006cc6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	3314      	adds	r3, #20
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f00e fa2c 	bl	80150f8 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8006cac:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	7cfa      	ldrb	r2, [r7, #19]
 8006cbe:	771a      	strb	r2, [r3, #28]
  return conn;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	e005      	b.n	8006cd0 <netconn_alloc+0xc8>
    goto free_and_return;
 8006cc4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8006cc6:	68f9      	ldr	r1, [r7, #12]
 8006cc8:	2007      	movs	r0, #7
 8006cca:	f001 fedb 	bl	8008a84 <memp_free>
  return NULL;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	08019254 	.word	0x08019254
 8006cdc:	08019458 	.word	0x08019458
 8006ce0:	08019298 	.word	0x08019298

08006ce4 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b082      	sub	sp, #8
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d006      	beq.n	8006d02 <netconn_free+0x1e>
 8006cf4:	4b1b      	ldr	r3, [pc, #108]	; (8006d64 <netconn_free+0x80>)
 8006cf6:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8006cfa:	491b      	ldr	r1, [pc, #108]	; (8006d68 <netconn_free+0x84>)
 8006cfc:	481b      	ldr	r0, [pc, #108]	; (8006d6c <netconn_free+0x88>)
 8006cfe:	f011 f949 	bl	8017f94 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	3310      	adds	r3, #16
 8006d06:	4618      	mov	r0, r3
 8006d08:	f00e f9e5 	bl	80150d6 <sys_mbox_valid>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d006      	beq.n	8006d20 <netconn_free+0x3c>
 8006d12:	4b14      	ldr	r3, [pc, #80]	; (8006d64 <netconn_free+0x80>)
 8006d14:	f44f 7249 	mov.w	r2, #804	; 0x324
 8006d18:	4915      	ldr	r1, [pc, #84]	; (8006d70 <netconn_free+0x8c>)
 8006d1a:	4814      	ldr	r0, [pc, #80]	; (8006d6c <netconn_free+0x88>)
 8006d1c:	f011 f93a 	bl	8017f94 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	3314      	adds	r3, #20
 8006d24:	4618      	mov	r0, r3
 8006d26:	f00e f9d6 	bl	80150d6 <sys_mbox_valid>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <netconn_free+0x5a>
 8006d30:	4b0c      	ldr	r3, [pc, #48]	; (8006d64 <netconn_free+0x80>)
 8006d32:	f240 3227 	movw	r2, #807	; 0x327
 8006d36:	490f      	ldr	r1, [pc, #60]	; (8006d74 <netconn_free+0x90>)
 8006d38:	480c      	ldr	r0, [pc, #48]	; (8006d6c <netconn_free+0x88>)
 8006d3a:	f011 f92b 	bl	8017f94 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	330c      	adds	r3, #12
 8006d42:	4618      	mov	r0, r3
 8006d44:	f00e fa4b 	bl	80151de <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	330c      	adds	r3, #12
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f00e fa64 	bl	801521a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8006d52:	6879      	ldr	r1, [r7, #4]
 8006d54:	2007      	movs	r0, #7
 8006d56:	f001 fe95 	bl	8008a84 <memp_free>
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	08019254 	.word	0x08019254
 8006d68:	08019480 	.word	0x08019480
 8006d6c:	08019298 	.word	0x08019298
 8006d70:	080194b0 	.word	0x080194b0
 8006d74:	080194ec 	.word	0x080194ec

08006d78 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	3310      	adds	r3, #16
 8006d84:	4618      	mov	r0, r3
 8006d86:	f00e f9a6 	bl	80150d6 <sys_mbox_valid>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d02f      	beq.n	8006df0 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006d90:	e018      	b.n	8006dc4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d9a:	2b10      	cmp	r3, #16
 8006d9c:	d10e      	bne.n	8006dbc <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f107 020f 	add.w	r2, r7, #15
 8006da4:	4611      	mov	r1, r2
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fbba 	bl	8006520 <lwip_netconn_is_err_msg>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d108      	bne.n	8006dc4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f002 fd11 	bl	80097dc <pbuf_free>
 8006dba:	e003      	b.n	8006dc4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 ff0a 	bl	8007bd8 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	3310      	adds	r3, #16
 8006dc8:	f107 0210 	add.w	r2, r7, #16
 8006dcc:	4611      	mov	r1, r2
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f00e f965 	bl	801509e <sys_arch_mbox_tryfetch>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dda:	d1da      	bne.n	8006d92 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	3310      	adds	r3, #16
 8006de0:	4618      	mov	r0, r3
 8006de2:	f00e f8f1 	bl	8014fc8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	3310      	adds	r3, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f00e f984 	bl	80150f8 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	3314      	adds	r3, #20
 8006df4:	4618      	mov	r0, r3
 8006df6:	f00e f96e 	bl	80150d6 <sys_mbox_valid>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d034      	beq.n	8006e6a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006e00:	e01d      	b.n	8006e3e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	f107 020e 	add.w	r2, r7, #14
 8006e08:	4611      	mov	r1, r2
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f7ff fb88 	bl	8006520 <lwip_netconn_is_err_msg>
 8006e10:	4603      	mov	r3, r0
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d113      	bne.n	8006e3e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8006e1a:	6978      	ldr	r0, [r7, #20]
 8006e1c:	f7ff ffac 	bl	8006d78 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d007      	beq.n	8006e38 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f003 facb 	bl	800a3c8 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8006e38:	6978      	ldr	r0, [r7, #20]
 8006e3a:	f7ff ff53 	bl	8006ce4 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	3314      	adds	r3, #20
 8006e42:	f107 0210 	add.w	r2, r7, #16
 8006e46:	4611      	mov	r1, r2
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f00e f928 	bl	801509e <sys_arch_mbox_tryfetch>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e54:	d1d5      	bne.n	8006e02 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	3314      	adds	r3, #20
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f00e f8b4 	bl	8014fc8 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3314      	adds	r3, #20
 8006e64:	4618      	mov	r0, r3
 8006e66:	f00e f947 	bl	80150f8 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8006e6a:	bf00      	nop
 8006e6c:	3718      	adds	r7, #24
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	bd80      	pop	{r7, pc}
	...

08006e74 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	460b      	mov	r3, r1
 8006e7e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8006e80:	2300      	movs	r3, #0
 8006e82:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d106      	bne.n	8006e98 <lwip_netconn_do_close_internal+0x24>
 8006e8a:	4ba1      	ldr	r3, [pc, #644]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 8006e8c:	f240 32a2 	movw	r2, #930	; 0x3a2
 8006e90:	49a0      	ldr	r1, [pc, #640]	; (8007114 <lwip_netconn_do_close_internal+0x2a0>)
 8006e92:	48a1      	ldr	r0, [pc, #644]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 8006e94:	f011 f87e 	bl	8017f94 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d006      	beq.n	8006eb2 <lwip_netconn_do_close_internal+0x3e>
 8006ea4:	4b9a      	ldr	r3, [pc, #616]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 8006ea6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8006eaa:	499c      	ldr	r1, [pc, #624]	; (800711c <lwip_netconn_do_close_internal+0x2a8>)
 8006eac:	489a      	ldr	r0, [pc, #616]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 8006eae:	f011 f871 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b04      	cmp	r3, #4
 8006eb8:	d006      	beq.n	8006ec8 <lwip_netconn_do_close_internal+0x54>
 8006eba:	4b95      	ldr	r3, [pc, #596]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 8006ebc:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8006ec0:	4997      	ldr	r1, [pc, #604]	; (8007120 <lwip_netconn_do_close_internal+0x2ac>)
 8006ec2:	4895      	ldr	r0, [pc, #596]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 8006ec4:	f011 f866 	bl	8017f94 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d106      	bne.n	8006ede <lwip_netconn_do_close_internal+0x6a>
 8006ed0:	4b8f      	ldr	r3, [pc, #572]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 8006ed2:	f240 32a5 	movw	r2, #933	; 0x3a5
 8006ed6:	4993      	ldr	r1, [pc, #588]	; (8007124 <lwip_netconn_do_close_internal+0x2b0>)
 8006ed8:	488f      	ldr	r0, [pc, #572]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 8006eda:	f011 f85b 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <lwip_netconn_do_close_internal+0x80>
 8006ee6:	4b8a      	ldr	r3, [pc, #552]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 8006ee8:	f240 32a6 	movw	r2, #934	; 0x3a6
 8006eec:	498e      	ldr	r1, [pc, #568]	; (8007128 <lwip_netconn_do_close_internal+0x2b4>)
 8006eee:	488a      	ldr	r0, [pc, #552]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 8006ef0:	f011 f850 	bl	8017f94 <iprintf>

  tpcb = conn->pcb.tcp;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a1b      	ldr	r3, [r3, #32]
 8006efe:	7a1b      	ldrb	r3, [r3, #8]
 8006f00:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8006f0a:	7bfb      	ldrb	r3, [r7, #15]
 8006f0c:	f003 0302 	and.w	r3, r3, #2
 8006f10:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	2b03      	cmp	r3, #3
 8006f16:	d102      	bne.n	8006f1e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8006f18:	2301      	movs	r3, #1
 8006f1a:	75bb      	strb	r3, [r7, #22]
 8006f1c:	e01f      	b.n	8006f5e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8006f1e:	7bbb      	ldrb	r3, [r7, #14]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00e      	beq.n	8006f42 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8006f28:	2b05      	cmp	r3, #5
 8006f2a:	d007      	beq.n	8006f3c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8006f2c:	693b      	ldr	r3, [r7, #16]
 8006f2e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8006f30:	2b06      	cmp	r3, #6
 8006f32:	d003      	beq.n	8006f3c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8006f38:	2b08      	cmp	r3, #8
 8006f3a:	d102      	bne.n	8006f42 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	75bb      	strb	r3, [r7, #22]
 8006f40:	e00d      	b.n	8006f5e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8006f42:	7b7b      	ldrb	r3, [r7, #13]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d008      	beq.n	8006f5a <lwip_netconn_do_close_internal+0xe6>
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	8b5b      	ldrh	r3, [r3, #26]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d002      	beq.n	8006f5a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8006f54:	2301      	movs	r3, #1
 8006f56:	75bb      	strb	r3, [r7, #22]
 8006f58:	e001      	b.n	8006f5e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8006f5e:	7dbb      	ldrb	r3, [r7, #22]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8006f64:	2100      	movs	r1, #0
 8006f66:	6938      	ldr	r0, [r7, #16]
 8006f68:	f004 fa6e 	bl	800b448 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	7d1b      	ldrb	r3, [r3, #20]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d104      	bne.n	8006f7e <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8006f74:	2100      	movs	r1, #0
 8006f76:	6938      	ldr	r0, [r7, #16]
 8006f78:	f004 fade 	bl	800b538 <tcp_accept>
 8006f7c:	e01d      	b.n	8006fba <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8006f84:	2100      	movs	r1, #0
 8006f86:	6938      	ldr	r0, [r7, #16]
 8006f88:	f004 fa70 	bl	800b46c <tcp_recv>
      tcp_accept(tpcb, NULL);
 8006f8c:	2100      	movs	r1, #0
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f004 fad2 	bl	800b538 <tcp_accept>
    }
    if (shut_tx) {
 8006f94:	7b7b      	ldrb	r3, [r7, #13]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8006f9a:	2100      	movs	r1, #0
 8006f9c:	6938      	ldr	r0, [r7, #16]
 8006f9e:	f004 fa87 	bl	800b4b0 <tcp_sent>
    }
    if (shut_close) {
 8006fa2:	7dbb      	ldrb	r3, [r7, #22]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d008      	beq.n	8006fba <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8006fa8:	2200      	movs	r2, #0
 8006faa:	2100      	movs	r1, #0
 8006fac:	6938      	ldr	r0, [r7, #16]
 8006fae:	f004 fadb 	bl	800b568 <tcp_poll>
      tcp_err(tpcb, NULL);
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	6938      	ldr	r0, [r7, #16]
 8006fb6:	f004 fa9d 	bl	800b4f4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8006fba:	7dbb      	ldrb	r3, [r7, #22]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d005      	beq.n	8006fcc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8006fc0:	6938      	ldr	r0, [r7, #16]
 8006fc2:	f003 f8bd 	bl	800a140 <tcp_close>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	75fb      	strb	r3, [r7, #23]
 8006fca:	e007      	b.n	8006fdc <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8006fcc:	7bbb      	ldrb	r3, [r7, #14]
 8006fce:	7b7a      	ldrb	r2, [r7, #13]
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6938      	ldr	r0, [r7, #16]
 8006fd4:	f003 f8e0 	bl	800a198 <tcp_shutdown>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8006fdc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d102      	bne.n	8006fea <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	757b      	strb	r3, [r7, #21]
 8006fe8:	e016      	b.n	8007018 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8006fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff2:	d10f      	bne.n	8007014 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6a1b      	ldr	r3, [r3, #32]
 8006ff8:	7a5b      	ldrb	r3, [r3, #9]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10c      	bne.n	8007018 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8006ffe:	2301      	movs	r3, #1
 8007000:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8007002:	7dbb      	ldrb	r3, [r7, #22]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8007008:	6938      	ldr	r0, [r7, #16]
 800700a:	f003 f9dd 	bl	800a3c8 <tcp_abort>
          err = ERR_OK;
 800700e:	2300      	movs	r3, #0
 8007010:	75fb      	strb	r3, [r7, #23]
 8007012:	e001      	b.n	8007018 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007014:	2301      	movs	r3, #1
 8007016:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8007018:	7d7b      	ldrb	r3, [r7, #21]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d044      	beq.n	80070a8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a1b      	ldr	r3, [r3, #32]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	330c      	adds	r3, #12
 8007026:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	7dfa      	ldrb	r2, [r7, #23]
 800702e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2200      	movs	r2, #0
 8007034:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2200      	movs	r2, #0
 800703a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800703c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d129      	bne.n	8007098 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8007044:	7dbb      	ldrb	r3, [r7, #22]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d00c      	beq.n	8007064 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	2200      	movs	r2, #0
 800704e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007054:	2b00      	cmp	r3, #0
 8007056:	d005      	beq.n	8007064 <lwip_netconn_do_close_internal+0x1f0>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705c:	2200      	movs	r2, #0
 800705e:	2104      	movs	r1, #4
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	4798      	blx	r3
      }
      if (shut_rx) {
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d009      	beq.n	800707e <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706e:	2b00      	cmp	r3, #0
 8007070:	d005      	beq.n	800707e <lwip_netconn_do_close_internal+0x20a>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007076:	2200      	movs	r2, #0
 8007078:	2100      	movs	r1, #0
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	4798      	blx	r3
      }
      if (shut_tx) {
 800707e:	7b7b      	ldrb	r3, [r7, #13]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d009      	beq.n	8007098 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <lwip_netconn_do_close_internal+0x224>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007090:	2200      	movs	r2, #0
 8007092:	2102      	movs	r1, #2
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8007098:	78fb      	ldrb	r3, [r7, #3]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d002      	beq.n	80070a4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800709e:	68b8      	ldr	r0, [r7, #8]
 80070a0:	f00e f890 	bl	80151c4 <sys_sem_signal>
    }
    return ERR_OK;
 80070a4:	2300      	movs	r3, #0
 80070a6:	e02e      	b.n	8007106 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80070a8:	7d7b      	ldrb	r3, [r7, #21]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11e      	bne.n	80070ec <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	7d1b      	ldrb	r3, [r3, #20]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d106      	bne.n	80070c4 <lwip_netconn_do_close_internal+0x250>
 80070b6:	4b16      	ldr	r3, [pc, #88]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 80070b8:	f240 4241 	movw	r2, #1089	; 0x441
 80070bc:	491b      	ldr	r1, [pc, #108]	; (800712c <lwip_netconn_do_close_internal+0x2b8>)
 80070be:	4816      	ldr	r0, [pc, #88]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 80070c0:	f010 ff68 	bl	8017f94 <iprintf>
    if (shut_tx) {
 80070c4:	7b7b      	ldrb	r3, [r7, #13]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80070ca:	4919      	ldr	r1, [pc, #100]	; (8007130 <lwip_netconn_do_close_internal+0x2bc>)
 80070cc:	6938      	ldr	r0, [r7, #16]
 80070ce:	f004 f9ef 	bl	800b4b0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80070d2:	2201      	movs	r2, #1
 80070d4:	4917      	ldr	r1, [pc, #92]	; (8007134 <lwip_netconn_do_close_internal+0x2c0>)
 80070d6:	6938      	ldr	r0, [r7, #16]
 80070d8:	f004 fa46 	bl	800b568 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80070dc:	4916      	ldr	r1, [pc, #88]	; (8007138 <lwip_netconn_do_close_internal+0x2c4>)
 80070de:	6938      	ldr	r0, [r7, #16]
 80070e0:	f004 fa08 	bl	800b4f4 <tcp_err>
    tcp_arg(tpcb, conn);
 80070e4:	6879      	ldr	r1, [r7, #4]
 80070e6:	6938      	ldr	r0, [r7, #16]
 80070e8:	f004 f9ae 	bl	800b448 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80070ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d106      	bne.n	8007102 <lwip_netconn_do_close_internal+0x28e>
 80070f4:	4b06      	ldr	r3, [pc, #24]	; (8007110 <lwip_netconn_do_close_internal+0x29c>)
 80070f6:	f240 424d 	movw	r2, #1101	; 0x44d
 80070fa:	4910      	ldr	r1, [pc, #64]	; (800713c <lwip_netconn_do_close_internal+0x2c8>)
 80070fc:	4806      	ldr	r0, [pc, #24]	; (8007118 <lwip_netconn_do_close_internal+0x2a4>)
 80070fe:	f010 ff49 	bl	8017f94 <iprintf>
  return err;
 8007102:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3718      	adds	r7, #24
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	08019254 	.word	0x08019254
 8007114:	08019528 	.word	0x08019528
 8007118:	08019298 	.word	0x08019298
 800711c:	08019538 	.word	0x08019538
 8007120:	08019558 	.word	0x08019558
 8007124:	0801957c 	.word	0x0801957c
 8007128:	080193bc 	.word	0x080193bc
 800712c:	08019590 	.word	0x08019590
 8007130:	08006865 	.word	0x08006865
 8007134:	0800679d 	.word	0x0800679d
 8007138:	0800690d 	.word	0x0800690d
 800713c:	080195b4 	.word	0x080195b4

08007140 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8007154:	7afb      	ldrb	r3, [r7, #11]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00d      	beq.n	8007176 <lwip_netconn_do_delconn+0x36>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007164:	2b10      	cmp	r3, #16
 8007166:	d006      	beq.n	8007176 <lwip_netconn_do_delconn+0x36>
 8007168:	4b60      	ldr	r3, [pc, #384]	; (80072ec <lwip_netconn_do_delconn+0x1ac>)
 800716a:	f240 425f 	movw	r2, #1119	; 0x45f
 800716e:	4960      	ldr	r1, [pc, #384]	; (80072f0 <lwip_netconn_do_delconn+0x1b0>)
 8007170:	4860      	ldr	r0, [pc, #384]	; (80072f4 <lwip_netconn_do_delconn+0x1b4>)
 8007172:	f010 ff0f 	bl	8017f94 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8007176:	7afb      	ldrb	r3, [r7, #11]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <lwip_netconn_do_delconn+0x48>
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	2b02      	cmp	r3, #2
 8007180:	d002      	beq.n	8007188 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8007182:	7afb      	ldrb	r3, [r7, #11]
 8007184:	2b03      	cmp	r3, #3
 8007186:	d109      	bne.n	800719c <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8007188:	7afb      	ldrb	r3, [r7, #11]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d10a      	bne.n	80071a4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	7f1b      	ldrb	r3, [r3, #28]
 8007194:	f003 0304 	and.w	r3, r3, #4
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	22fb      	movs	r2, #251	; 0xfb
 80071a0:	711a      	strb	r2, [r3, #4]
 80071a2:	e097      	b.n	80072d4 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80071a4:	7afb      	ldrb	r3, [r7, #11]
 80071a6:	2b03      	cmp	r3, #3
 80071a8:	d10d      	bne.n	80071c6 <lwip_netconn_do_delconn+0x86>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	7f1b      	ldrb	r3, [r3, #28]
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d106      	bne.n	80071c6 <lwip_netconn_do_delconn+0x86>
 80071b8:	4b4c      	ldr	r3, [pc, #304]	; (80072ec <lwip_netconn_do_delconn+0x1ac>)
 80071ba:	f240 427b 	movw	r2, #1147	; 0x47b
 80071be:	494e      	ldr	r1, [pc, #312]	; (80072f8 <lwip_netconn_do_delconn+0x1b8>)
 80071c0:	484c      	ldr	r0, [pc, #304]	; (80072f4 <lwip_netconn_do_delconn+0x1b4>)
 80071c2:	f010 fee7 	bl	8017f94 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff fdd1 	bl	8006d78 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d05f      	beq.n	80072a0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071ea:	2b10      	cmp	r3, #16
 80071ec:	d00e      	beq.n	800720c <lwip_netconn_do_delconn+0xcc>
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d000      	beq.n	80071f4 <lwip_netconn_do_delconn+0xb4>
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
#endif /* LWIP_TCP */
        default:
          break;
 80071f2:	e051      	b.n	8007298 <lwip_netconn_do_delconn+0x158>
          msg->conn->pcb.udp->recv_arg = NULL;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	685b      	ldr	r3, [r3, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	4618      	mov	r0, r3
 8007206:	f009 fb77 	bl	80108f8 <udp_remove>
          break;
 800720a:	e045      	b.n	8007298 <lwip_netconn_do_delconn+0x158>
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d006      	beq.n	8007224 <lwip_netconn_do_delconn+0xe4>
 8007216:	4b35      	ldr	r3, [pc, #212]	; (80072ec <lwip_netconn_do_delconn+0x1ac>)
 8007218:	f240 4294 	movw	r2, #1172	; 0x494
 800721c:	4937      	ldr	r1, [pc, #220]	; (80072fc <lwip_netconn_do_delconn+0x1bc>)
 800721e:	4835      	ldr	r0, [pc, #212]	; (80072f4 <lwip_netconn_do_delconn+0x1b4>)
 8007220:	f010 feb8 	bl	8017f94 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2204      	movs	r2, #4
 800722a:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2203      	movs	r2, #3
 8007230:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	68fa      	ldr	r2, [r7, #12]
 8007238:	621a      	str	r2, [r3, #32]
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2100      	movs	r1, #0
 8007240:	4618      	mov	r0, r3
 8007242:	f7ff fe17 	bl	8006e74 <lwip_netconn_do_close_internal>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d04a      	beq.n	80072e2 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	785b      	ldrb	r3, [r3, #1]
 8007252:	2b04      	cmp	r3, #4
 8007254:	d006      	beq.n	8007264 <lwip_netconn_do_delconn+0x124>
 8007256:	4b25      	ldr	r3, [pc, #148]	; (80072ec <lwip_netconn_do_delconn+0x1ac>)
 8007258:	f240 429a 	movw	r2, #1178	; 0x49a
 800725c:	4928      	ldr	r1, [pc, #160]	; (8007300 <lwip_netconn_do_delconn+0x1c0>)
 800725e:	4825      	ldr	r0, [pc, #148]	; (80072f4 <lwip_netconn_do_delconn+0x1b4>)
 8007260:	f010 fe98 	bl	8017f94 <iprintf>
            UNLOCK_TCPIP_CORE();
 8007264:	4827      	ldr	r0, [pc, #156]	; (8007304 <lwip_netconn_do_delconn+0x1c4>)
 8007266:	f00e f81e 	bl	80152a6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	330c      	adds	r3, #12
 8007270:	2100      	movs	r1, #0
 8007272:	4618      	mov	r0, r3
 8007274:	f00d ff75 	bl	8015162 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8007278:	4822      	ldr	r0, [pc, #136]	; (8007304 <lwip_netconn_do_delconn+0x1c4>)
 800727a:	f00e f805 	bl	8015288 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	785b      	ldrb	r3, [r3, #1]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d02c      	beq.n	80072e2 <lwip_netconn_do_delconn+0x1a2>
 8007288:	4b18      	ldr	r3, [pc, #96]	; (80072ec <lwip_netconn_do_delconn+0x1ac>)
 800728a:	f240 429e 	movw	r2, #1182	; 0x49e
 800728e:	491c      	ldr	r1, [pc, #112]	; (8007300 <lwip_netconn_do_delconn+0x1c0>)
 8007290:	4818      	ldr	r0, [pc, #96]	; (80072f4 <lwip_netconn_do_delconn+0x1b4>)
 8007292:	f010 fe7f 	bl	8017f94 <iprintf>
          return;
 8007296:	e024      	b.n	80072e2 <lwip_netconn_do_delconn+0x1a2>
      }
      msg->conn->pcb.tcp = NULL;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	2200      	movs	r2, #0
 800729e:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d007      	beq.n	80072ba <lwip_netconn_do_delconn+0x17a>
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	6810      	ldr	r0, [r2, #0]
 80072b4:	2200      	movs	r2, #0
 80072b6:	2100      	movs	r1, #0
 80072b8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d007      	beq.n	80072d4 <lwip_netconn_do_delconn+0x194>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	6810      	ldr	r0, [r2, #0]
 80072ce:	2200      	movs	r2, #0
 80072d0:	2102      	movs	r1, #2
 80072d2:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	330c      	adds	r3, #12
 80072da:	4618      	mov	r0, r3
 80072dc:	f00d ff8c 	bl	80151f8 <sys_sem_valid>
 80072e0:	e000      	b.n	80072e4 <lwip_netconn_do_delconn+0x1a4>
          return;
 80072e2:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}
 80072ea:	bf00      	nop
 80072ec:	08019254 	.word	0x08019254
 80072f0:	080195c4 	.word	0x080195c4
 80072f4:	08019298 	.word	0x08019298
 80072f8:	080195d8 	.word	0x080195d8
 80072fc:	080195f8 	.word	0x080195f8
 8007300:	08019614 	.word	0x08019614
 8007304:	20008da4 	.word	0x20008da4

08007308 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8007308:	b580      	push	{r7, lr}
 800730a:	b088      	sub	sp, #32
 800730c:	af00      	add	r7, sp, #0
 800730e:	60f8      	str	r0, [r7, #12]
 8007310:	60b9      	str	r1, [r7, #8]
 8007312:	4613      	mov	r3, r2
 8007314:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 8007316:	2300      	movs	r3, #0
 8007318:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d102      	bne.n	800732a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 8007324:	f06f 0305 	mvn.w	r3, #5
 8007328:	e070      	b.n	800740c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	785b      	ldrb	r3, [r3, #1]
 800732e:	2b03      	cmp	r3, #3
 8007330:	d006      	beq.n	8007340 <lwip_netconn_do_connected+0x38>
 8007332:	4b38      	ldr	r3, [pc, #224]	; (8007414 <lwip_netconn_do_connected+0x10c>)
 8007334:	f240 5223 	movw	r2, #1315	; 0x523
 8007338:	4937      	ldr	r1, [pc, #220]	; (8007418 <lwip_netconn_do_connected+0x110>)
 800733a:	4838      	ldr	r0, [pc, #224]	; (800741c <lwip_netconn_do_connected+0x114>)
 800733c:	f010 fe2a 	bl	8017f94 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	6a1b      	ldr	r3, [r3, #32]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10c      	bne.n	8007362 <lwip_netconn_do_connected+0x5a>
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	7f1b      	ldrb	r3, [r3, #28]
 800734c:	f003 0304 	and.w	r3, r3, #4
 8007350:	2b00      	cmp	r3, #0
 8007352:	d106      	bne.n	8007362 <lwip_netconn_do_connected+0x5a>
 8007354:	4b2f      	ldr	r3, [pc, #188]	; (8007414 <lwip_netconn_do_connected+0x10c>)
 8007356:	f240 5225 	movw	r2, #1317	; 0x525
 800735a:	4931      	ldr	r1, [pc, #196]	; (8007420 <lwip_netconn_do_connected+0x118>)
 800735c:	482f      	ldr	r0, [pc, #188]	; (800741c <lwip_netconn_do_connected+0x114>)
 800735e:	f010 fe19 	bl	8017f94 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8007362:	69bb      	ldr	r3, [r7, #24]
 8007364:	6a1b      	ldr	r3, [r3, #32]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d008      	beq.n	800737c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	79fa      	ldrb	r2, [r7, #7]
 8007370:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	330c      	adds	r3, #12
 800737a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800737c:	69bb      	ldr	r3, [r7, #24]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007384:	2b10      	cmp	r3, #16
 8007386:	d106      	bne.n	8007396 <lwip_netconn_do_connected+0x8e>
 8007388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d102      	bne.n	8007396 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8007390:	69b8      	ldr	r0, [r7, #24]
 8007392:	f7ff fb91 	bl	8006ab8 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	7f1b      	ldrb	r3, [r3, #28]
 800739a:	f003 0304 	and.w	r3, r3, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bf0c      	ite	eq
 80073a2:	2301      	moveq	r3, #1
 80073a4:	2300      	movne	r3, #0
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	7f1b      	ldrb	r3, [r3, #28]
 80073ae:	f023 0304 	bic.w	r3, r3, #4
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 80073b8:	697b      	ldr	r3, [r7, #20]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <lwip_netconn_do_connected+0xbc>
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10c      	bne.n	80073de <lwip_netconn_do_connected+0xd6>
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d102      	bne.n	80073d0 <lwip_netconn_do_connected+0xc8>
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d006      	beq.n	80073de <lwip_netconn_do_connected+0xd6>
 80073d0:	4b10      	ldr	r3, [pc, #64]	; (8007414 <lwip_netconn_do_connected+0x10c>)
 80073d2:	f240 5232 	movw	r2, #1330	; 0x532
 80073d6:	4913      	ldr	r1, [pc, #76]	; (8007424 <lwip_netconn_do_connected+0x11c>)
 80073d8:	4810      	ldr	r0, [pc, #64]	; (800741c <lwip_netconn_do_connected+0x114>)
 80073da:	f010 fddb 	bl	8017f94 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	2200      	movs	r2, #0
 80073e2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2200      	movs	r2, #0
 80073e8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d005      	beq.n	80073fe <lwip_netconn_do_connected+0xf6>
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	2200      	movs	r2, #0
 80073f8:	2102      	movs	r1, #2
 80073fa:	69b8      	ldr	r0, [r7, #24]
 80073fc:	4798      	blx	r3

  if (was_blocking) {
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 8007404:	69f8      	ldr	r0, [r7, #28]
 8007406:	f00d fedd 	bl	80151c4 <sys_sem_signal>
  }
  return ERR_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3720      	adds	r7, #32
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}
 8007414:	08019254 	.word	0x08019254
 8007418:	0801961c 	.word	0x0801961c
 800741c:	08019298 	.word	0x08019298
 8007420:	0801963c 	.word	0x0801963c
 8007424:	0801967c 	.word	0x0801967c

08007428 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b086      	sub	sp, #24
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	685b      	ldr	r3, [r3, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d102      	bne.n	8007444 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800743e:	23f1      	movs	r3, #241	; 0xf1
 8007440:	75fb      	strb	r3, [r7, #23]
 8007442:	e09b      	b.n	800757c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8007444:	693b      	ldr	r3, [r7, #16]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800744e:	2b10      	cmp	r3, #16
 8007450:	d00f      	beq.n	8007472 <lwip_netconn_do_connect+0x4a>
 8007452:	2b20      	cmp	r3, #32
 8007454:	f040 8087 	bne.w	8007566 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	6858      	ldr	r0, [r3, #4]
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	6899      	ldr	r1, [r3, #8]
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	899b      	ldrh	r3, [r3, #12]
 8007466:	461a      	mov	r2, r3
 8007468:	f009 f9b8 	bl	80107dc <udp_connect>
 800746c:	4603      	mov	r3, r0
 800746e:	75fb      	strb	r3, [r7, #23]
        break;
 8007470:	e084      	b.n	800757c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8007472:	693b      	ldr	r3, [r7, #16]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	785b      	ldrb	r3, [r3, #1]
 8007478:	2b03      	cmp	r3, #3
 800747a:	d102      	bne.n	8007482 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800747c:	23f7      	movs	r3, #247	; 0xf7
 800747e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8007480:	e07b      	b.n	800757a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	785b      	ldrb	r3, [r3, #1]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800748c:	23f6      	movs	r3, #246	; 0xf6
 800748e:	75fb      	strb	r3, [r7, #23]
        break;
 8007490:	e073      	b.n	800757a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f7ff fb0e 	bl	8006ab8 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6858      	ldr	r0, [r3, #4]
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	6899      	ldr	r1, [r3, #8]
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	899a      	ldrh	r2, [r3, #12]
 80074aa:	4b38      	ldr	r3, [pc, #224]	; (800758c <lwip_netconn_do_connect+0x164>)
 80074ac:	f003 f888 	bl	800a5c0 <tcp_connect>
 80074b0:	4603      	mov	r3, r0
 80074b2:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 80074b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d15e      	bne.n	800757a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	7f1b      	ldrb	r3, [r3, #28]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	bf14      	ite	ne
 80074ca:	2301      	movne	r3, #1
 80074cc:	2300      	moveq	r3, #0
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2203      	movs	r2, #3
 80074d8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80074da:	7bfb      	ldrb	r3, [r7, #15]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d009      	beq.n	80074f4 <lwip_netconn_do_connect+0xcc>
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	7f1a      	ldrb	r2, [r3, #28]
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f042 0204 	orr.w	r2, r2, #4
 80074ee:	b2d2      	uxtb	r2, r2
 80074f0:	771a      	strb	r2, [r3, #28]
 80074f2:	e008      	b.n	8007506 <lwip_netconn_do_connect+0xde>
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	7f1a      	ldrb	r2, [r3, #28]
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0204 	bic.w	r2, r2, #4
 8007502:	b2d2      	uxtb	r2, r2
 8007504:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 8007506:	7bfb      	ldrb	r3, [r7, #15]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d002      	beq.n	8007512 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800750c:	23fb      	movs	r3, #251	; 0xfb
 800750e:	75fb      	strb	r3, [r7, #23]
        break;
 8007510:	e033      	b.n	800757a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	693a      	ldr	r2, [r7, #16]
 8007518:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	785b      	ldrb	r3, [r3, #1]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d006      	beq.n	8007532 <lwip_netconn_do_connect+0x10a>
 8007524:	4b1a      	ldr	r3, [pc, #104]	; (8007590 <lwip_netconn_do_connect+0x168>)
 8007526:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800752a:	491a      	ldr	r1, [pc, #104]	; (8007594 <lwip_netconn_do_connect+0x16c>)
 800752c:	481a      	ldr	r0, [pc, #104]	; (8007598 <lwip_netconn_do_connect+0x170>)
 800752e:	f010 fd31 	bl	8017f94 <iprintf>
              UNLOCK_TCPIP_CORE();
 8007532:	481a      	ldr	r0, [pc, #104]	; (800759c <lwip_netconn_do_connect+0x174>)
 8007534:	f00d feb7 	bl	80152a6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	330c      	adds	r3, #12
 800753e:	2100      	movs	r1, #0
 8007540:	4618      	mov	r0, r3
 8007542:	f00d fe0e 	bl	8015162 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8007546:	4815      	ldr	r0, [pc, #84]	; (800759c <lwip_netconn_do_connect+0x174>)
 8007548:	f00d fe9e 	bl	8015288 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	785b      	ldrb	r3, [r3, #1]
 8007552:	2b03      	cmp	r3, #3
 8007554:	d116      	bne.n	8007584 <lwip_netconn_do_connect+0x15c>
 8007556:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <lwip_netconn_do_connect+0x168>)
 8007558:	f240 5274 	movw	r2, #1396	; 0x574
 800755c:	490d      	ldr	r1, [pc, #52]	; (8007594 <lwip_netconn_do_connect+0x16c>)
 800755e:	480e      	ldr	r0, [pc, #56]	; (8007598 <lwip_netconn_do_connect+0x170>)
 8007560:	f010 fd18 	bl	8017f94 <iprintf>
              return;
 8007564:	e00e      	b.n	8007584 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8007566:	4b0a      	ldr	r3, [pc, #40]	; (8007590 <lwip_netconn_do_connect+0x168>)
 8007568:	f240 527f 	movw	r2, #1407	; 0x57f
 800756c:	490c      	ldr	r1, [pc, #48]	; (80075a0 <lwip_netconn_do_connect+0x178>)
 800756e:	480a      	ldr	r0, [pc, #40]	; (8007598 <lwip_netconn_do_connect+0x170>)
 8007570:	f010 fd10 	bl	8017f94 <iprintf>
 8007574:	23fa      	movs	r3, #250	; 0xfa
 8007576:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8007578:	e000      	b.n	800757c <lwip_netconn_do_connect+0x154>
        break;
 800757a:	bf00      	nop
    }
  }
  msg->err = err;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	7dfa      	ldrb	r2, [r7, #23]
 8007580:	711a      	strb	r2, [r3, #4]
 8007582:	e000      	b.n	8007586 <lwip_netconn_do_connect+0x15e>
              return;
 8007584:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8007586:	3718      	adds	r7, #24
 8007588:	46bd      	mov	sp, r7
 800758a:	bd80      	pop	{r7, pc}
 800758c:	08007309 	.word	0x08007309
 8007590:	08019254 	.word	0x08019254
 8007594:	08019614 	.word	0x08019614
 8007598:	08019298 	.word	0x08019298
 800759c:	20008da4 	.word	0x20008da4
 80075a0:	0801969c 	.word	0x0801969c

080075a4 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	2200      	movs	r2, #0
 80075b4:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d022      	beq.n	8007606 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ca:	2b10      	cmp	r3, #16
 80075cc:	d11b      	bne.n	8007606 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075da:	d202      	bcs.n	80075e2 <lwip_netconn_do_recv+0x3e>
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	e001      	b.n	80075e6 <lwip_netconn_do_recv+0x42>
 80075e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80075e6:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	89fa      	ldrh	r2, [r7, #14]
 80075f0:	4611      	mov	r1, r2
 80075f2:	4618      	mov	r0, r3
 80075f4:	f002 ff4e 	bl	800a494 <tcp_recved>
        remaining -= recved;
 80075f8:	89fb      	ldrh	r3, [r7, #14]
 80075fa:	697a      	ldr	r2, [r7, #20]
 80075fc:	1ad3      	subs	r3, r2, r3
 80075fe:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d1e6      	bne.n	80075d4 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007606:	bf00      	nop
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b088      	sub	sp, #32
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800761c:	2300      	movs	r3, #0
 800761e:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d106      	bne.n	8007634 <lwip_netconn_do_writemore+0x24>
 8007626:	4b96      	ldr	r3, [pc, #600]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 8007628:	f240 6273 	movw	r2, #1651	; 0x673
 800762c:	4995      	ldr	r1, [pc, #596]	; (8007884 <lwip_netconn_do_writemore+0x274>)
 800762e:	4896      	ldr	r0, [pc, #600]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 8007630:	f010 fcb0 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d006      	beq.n	800764a <lwip_netconn_do_writemore+0x3a>
 800763c:	4b90      	ldr	r3, [pc, #576]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 800763e:	f240 6274 	movw	r2, #1652	; 0x674
 8007642:	4992      	ldr	r1, [pc, #584]	; (800788c <lwip_netconn_do_writemore+0x27c>)
 8007644:	4890      	ldr	r0, [pc, #576]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 8007646:	f010 fca5 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6a1b      	ldr	r3, [r3, #32]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d106      	bne.n	8007660 <lwip_netconn_do_writemore+0x50>
 8007652:	4b8b      	ldr	r3, [pc, #556]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 8007654:	f240 6275 	movw	r2, #1653	; 0x675
 8007658:	498d      	ldr	r1, [pc, #564]	; (8007890 <lwip_netconn_do_writemore+0x280>)
 800765a:	488b      	ldr	r0, [pc, #556]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 800765c:	f010 fc9a 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <lwip_netconn_do_writemore+0x66>
 8007668:	4b85      	ldr	r3, [pc, #532]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 800766a:	f240 6276 	movw	r2, #1654	; 0x676
 800766e:	4989      	ldr	r1, [pc, #548]	; (8007894 <lwip_netconn_do_writemore+0x284>)
 8007670:	4885      	ldr	r0, [pc, #532]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 8007672:	f010 fc8f 	bl	8017f94 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1b      	ldr	r3, [r3, #32]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	429a      	cmp	r2, r3
 8007684:	d306      	bcc.n	8007694 <lwip_netconn_do_writemore+0x84>
 8007686:	4b7e      	ldr	r3, [pc, #504]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 8007688:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800768c:	4982      	ldr	r1, [pc, #520]	; (8007898 <lwip_netconn_do_writemore+0x288>)
 800768e:	487e      	ldr	r0, [pc, #504]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 8007690:	f010 fc80 	bl	8017f94 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	899b      	ldrh	r3, [r3, #12]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <lwip_netconn_do_writemore+0x9c>
 800769e:	4b78      	ldr	r3, [pc, #480]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 80076a0:	f240 6279 	movw	r2, #1657	; 0x679
 80076a4:	497d      	ldr	r1, [pc, #500]	; (800789c <lwip_netconn_do_writemore+0x28c>)
 80076a6:	4878      	ldr	r0, [pc, #480]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 80076a8:	f010 fc74 	bl	8017f94 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6a1b      	ldr	r3, [r3, #32]
 80076b0:	7f1b      	ldrb	r3, [r3, #28]
 80076b2:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	7f1b      	ldrb	r3, [r3, #28]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d104      	bne.n	80076ca <lwip_netconn_do_writemore+0xba>
 80076c0:	7ebb      	ldrb	r3, [r7, #26]
 80076c2:	f003 0304 	and.w	r3, r3, #4
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <lwip_netconn_do_writemore+0xbe>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e000      	b.n	80076d0 <lwip_netconn_do_writemore+0xc0>
 80076ce:	2300      	movs	r3, #0
 80076d0:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1b      	ldr	r3, [r3, #32]
 80076d6:	689b      	ldr	r3, [r3, #8]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	4413      	add	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	685a      	ldr	r2, [r3, #4]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	1ad3      	subs	r3, r2, r3
 80076f4:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076fc:	d307      	bcc.n	800770e <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80076fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007702:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8007704:	7ebb      	ldrb	r3, [r7, #26]
 8007706:	f043 0302 	orr.w	r3, r3, #2
 800770a:	76bb      	strb	r3, [r7, #26]
 800770c:	e001      	b.n	8007712 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800771a:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800771c:	89fa      	ldrh	r2, [r7, #14]
 800771e:	8bbb      	ldrh	r3, [r7, #28]
 8007720:	429a      	cmp	r2, r3
 8007722:	d216      	bcs.n	8007752 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8007724:	89fb      	ldrh	r3, [r7, #14]
 8007726:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8007728:	7e3b      	ldrb	r3, [r7, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d00d      	beq.n	800774a <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800772e:	8bbb      	ldrh	r3, [r7, #28]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10e      	bne.n	8007752 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6a1b      	ldr	r3, [r3, #32]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d102      	bne.n	8007744 <lwip_netconn_do_writemore+0x134>
 800773e:	f06f 0306 	mvn.w	r3, #6
 8007742:	e000      	b.n	8007746 <lwip_netconn_do_writemore+0x136>
 8007744:	2300      	movs	r3, #0
 8007746:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8007748:	e07d      	b.n	8007846 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800774a:	7ebb      	ldrb	r3, [r7, #26]
 800774c:	f043 0302 	orr.w	r3, r3, #2
 8007750:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6a1b      	ldr	r3, [r3, #32]
 8007756:	691a      	ldr	r2, [r3, #16]
 8007758:	8bbb      	ldrh	r3, [r7, #28]
 800775a:	441a      	add	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	685b      	ldr	r3, [r3, #4]
 8007764:	429a      	cmp	r2, r3
 8007766:	d906      	bls.n	8007776 <lwip_netconn_do_writemore+0x166>
 8007768:	4b45      	ldr	r3, [pc, #276]	; (8007880 <lwip_netconn_do_writemore+0x270>)
 800776a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800776e:	494c      	ldr	r1, [pc, #304]	; (80078a0 <lwip_netconn_do_writemore+0x290>)
 8007770:	4845      	ldr	r0, [pc, #276]	; (8007888 <lwip_netconn_do_writemore+0x278>)
 8007772:	f010 fc0f 	bl	8017f94 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8007776:	8bbb      	ldrh	r3, [r7, #28]
 8007778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800777c:	4293      	cmp	r3, r2
 800777e:	d103      	bne.n	8007788 <lwip_netconn_do_writemore+0x178>
 8007780:	693b      	ldr	r3, [r7, #16]
 8007782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007786:	d209      	bcs.n	800779c <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800778c:	8bba      	ldrh	r2, [r7, #28]
 800778e:	429a      	cmp	r2, r3
 8007790:	d10b      	bne.n	80077aa <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	899b      	ldrh	r3, [r3, #12]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d906      	bls.n	80077aa <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800779c:	2301      	movs	r3, #1
 800779e:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80077a0:	7ebb      	ldrb	r3, [r7, #26]
 80077a2:	f043 0302 	orr.w	r3, r3, #2
 80077a6:	76bb      	strb	r3, [r7, #26]
 80077a8:	e001      	b.n	80077ae <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80077aa:	2300      	movs	r3, #0
 80077ac:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6858      	ldr	r0, [r3, #4]
 80077b2:	7ebb      	ldrb	r3, [r7, #26]
 80077b4:	8bba      	ldrh	r2, [r7, #28]
 80077b6:	6979      	ldr	r1, [r7, #20]
 80077b8:	f006 fd82 	bl	800e2c0 <tcp_write>
 80077bc:	4603      	mov	r3, r0
 80077be:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80077c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d12c      	bne.n	8007822 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	6999      	ldr	r1, [r3, #24]
 80077ce:	8bba      	ldrh	r2, [r7, #28]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	6a1b      	ldr	r3, [r3, #32]
 80077d4:	440a      	add	r2, r1
 80077d6:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	6919      	ldr	r1, [r3, #16]
 80077de:	8bba      	ldrh	r2, [r7, #28]
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6a1b      	ldr	r3, [r3, #32]
 80077e4:	440a      	add	r2, r1
 80077e6:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a1b      	ldr	r3, [r3, #32]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a1b      	ldr	r3, [r3, #32]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	429a      	cmp	r2, r3
 80077f8:	d113      	bne.n	8007822 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	6a1b      	ldr	r3, [r3, #32]
 80077fe:	899a      	ldrh	r2, [r3, #12]
 8007800:	3a01      	subs	r2, #1
 8007802:	b292      	uxth	r2, r2
 8007804:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	6a1b      	ldr	r3, [r3, #32]
 800780a:	899b      	ldrh	r3, [r3, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d008      	beq.n	8007822 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	3208      	adds	r2, #8
 8007818:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
 800781e:	2200      	movs	r2, #0
 8007820:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8007822:	7e7b      	ldrb	r3, [r7, #25]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d004      	beq.n	8007832 <lwip_netconn_do_writemore+0x222>
 8007828:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f43f af50 	beq.w	80076d2 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8007832:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d004      	beq.n	8007844 <lwip_netconn_do_writemore+0x234>
 800783a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800783e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007842:	d146      	bne.n	80078d2 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8007844:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8007846:	7e3b      	ldrb	r3, [r7, #24]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d02b      	beq.n	80078a4 <lwip_netconn_do_writemore+0x294>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	699a      	ldr	r2, [r3, #24]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6a1b      	ldr	r3, [r3, #32]
 8007856:	695b      	ldr	r3, [r3, #20]
 8007858:	429a      	cmp	r2, r3
 800785a:	d223      	bcs.n	80078a4 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	2b00      	cmp	r3, #0
 8007862:	d005      	beq.n	8007870 <lwip_netconn_do_writemore+0x260>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007868:	2200      	movs	r2, #0
 800786a:	2103      	movs	r1, #3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	7f1b      	ldrb	r3, [r3, #28]
 8007874:	f043 0310 	orr.w	r3, r3, #16
 8007878:	b2da      	uxtb	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	771a      	strb	r2, [r3, #28]
 800787e:	e028      	b.n	80078d2 <lwip_netconn_do_writemore+0x2c2>
 8007880:	08019254 	.word	0x08019254
 8007884:	080193ac 	.word	0x080193ac
 8007888:	08019298 	.word	0x08019298
 800788c:	080196b4 	.word	0x080196b4
 8007890:	080193bc 	.word	0x080193bc
 8007894:	080196d4 	.word	0x080196d4
 8007898:	080196ec 	.word	0x080196ec
 800789c:	0801972c 	.word	0x0801972c
 80078a0:	08019754 	.word	0x08019754
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80078ac:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80078b0:	d305      	bcc.n	80078be <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d909      	bls.n	80078d2 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d005      	beq.n	80078d2 <lwip_netconn_do_writemore+0x2c2>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	2200      	movs	r2, #0
 80078cc:	2103      	movs	r1, #3
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80078d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d11d      	bne.n	8007916 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6a1b      	ldr	r3, [r3, #32]
 80078de:	699a      	ldr	r2, [r3, #24]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6a1b      	ldr	r3, [r3, #32]
 80078e4:	695b      	ldr	r3, [r3, #20]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d002      	beq.n	80078f0 <lwip_netconn_do_writemore+0x2e0>
 80078ea:	7e3b      	ldrb	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80078f0:	2301      	movs	r3, #1
 80078f2:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	4618      	mov	r0, r3
 80078fa:	f007 facd 	bl	800ee98 <tcp_output>
 80078fe:	4603      	mov	r3, r0
 8007900:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8007902:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8007906:	f113 0f04 	cmn.w	r3, #4
 800790a:	d12c      	bne.n	8007966 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800790c:	7b3b      	ldrb	r3, [r7, #12]
 800790e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8007910:	2301      	movs	r3, #1
 8007912:	76fb      	strb	r3, [r7, #27]
 8007914:	e027      	b.n	8007966 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8007916:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800791a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791e:	d120      	bne.n	8007962 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	4618      	mov	r0, r3
 8007926:	f007 fab7 	bl	800ee98 <tcp_output>
 800792a:	4603      	mov	r3, r0
 800792c:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800792e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8007932:	f113 0f04 	cmn.w	r3, #4
 8007936:	d104      	bne.n	8007942 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8007938:	7b7b      	ldrb	r3, [r7, #13]
 800793a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800793c:	2301      	movs	r3, #1
 800793e:	76fb      	strb	r3, [r7, #27]
 8007940:	e011      	b.n	8007966 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8007942:	7e3b      	ldrb	r3, [r7, #24]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d00e      	beq.n	8007966 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	699b      	ldr	r3, [r3, #24]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <lwip_netconn_do_writemore+0x348>
 8007952:	f06f 0306 	mvn.w	r3, #6
 8007956:	e000      	b.n	800795a <lwip_netconn_do_writemore+0x34a>
 8007958:	2300      	movs	r3, #0
 800795a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800795c:	2301      	movs	r3, #1
 800795e:	76fb      	strb	r3, [r7, #27]
 8007960:	e001      	b.n	8007966 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8007962:	2301      	movs	r3, #1
 8007964:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8007966:	7efb      	ldrb	r3, [r7, #27]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d015      	beq.n	8007998 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	330c      	adds	r3, #12
 8007974:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	7ffa      	ldrb	r2, [r7, #31]
 800797c:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	2200      	movs	r2, #0
 8007982:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800798a:	78fb      	ldrb	r3, [r7, #3]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d006      	beq.n	800799e <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8007990:	68b8      	ldr	r0, [r7, #8]
 8007992:	f00d fc17 	bl	80151c4 <sys_sem_signal>
 8007996:	e002      	b.n	800799e <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8007998:	f04f 33ff 	mov.w	r3, #4294967295
 800799c:	e000      	b.n	80079a0 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800799e:	2300      	movs	r3, #0
}
 80079a0:	4618      	mov	r0, r3
 80079a2:	3720      	adds	r7, #32
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b084      	sub	sp, #16
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4618      	mov	r0, r3
 80079ba:	f7fe fd64 	bl	8006486 <netconn_err>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80079c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d166      	bne.n	8007a98 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80079d4:	2b10      	cmp	r3, #16
 80079d6:	d15d      	bne.n	8007a94 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	785b      	ldrb	r3, [r3, #1]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 80079e2:	23fb      	movs	r3, #251	; 0xfb
 80079e4:	73fb      	strb	r3, [r7, #15]
 80079e6:	e057      	b.n	8007a98 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d04d      	beq.n	8007a8e <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2201      	movs	r2, #1
 80079f8:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	6a1b      	ldr	r3, [r3, #32]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d006      	beq.n	8007a12 <lwip_netconn_do_write+0x6a>
 8007a04:	4b28      	ldr	r3, [pc, #160]	; (8007aa8 <lwip_netconn_do_write+0x100>)
 8007a06:	f240 7223 	movw	r2, #1827	; 0x723
 8007a0a:	4928      	ldr	r1, [pc, #160]	; (8007aac <lwip_netconn_do_write+0x104>)
 8007a0c:	4828      	ldr	r0, [pc, #160]	; (8007ab0 <lwip_netconn_do_write+0x108>)
 8007a0e:	f010 fac1 	bl	8017f94 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d106      	bne.n	8007a28 <lwip_netconn_do_write+0x80>
 8007a1a:	4b23      	ldr	r3, [pc, #140]	; (8007aa8 <lwip_netconn_do_write+0x100>)
 8007a1c:	f240 7224 	movw	r2, #1828	; 0x724
 8007a20:	4924      	ldr	r1, [pc, #144]	; (8007ab4 <lwip_netconn_do_write+0x10c>)
 8007a22:	4823      	ldr	r0, [pc, #140]	; (8007ab0 <lwip_netconn_do_write+0x108>)
 8007a24:	f010 fab6 	bl	8017f94 <iprintf>
        msg->conn->current_msg = msg;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	68ba      	ldr	r2, [r7, #8]
 8007a2e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	2100      	movs	r1, #0
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff fdea 	bl	8007610 <lwip_netconn_do_writemore>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d02e      	beq.n	8007aa0 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	785b      	ldrb	r3, [r3, #1]
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d006      	beq.n	8007a5a <lwip_netconn_do_write+0xb2>
 8007a4c:	4b16      	ldr	r3, [pc, #88]	; (8007aa8 <lwip_netconn_do_write+0x100>)
 8007a4e:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8007a52:	4919      	ldr	r1, [pc, #100]	; (8007ab8 <lwip_netconn_do_write+0x110>)
 8007a54:	4816      	ldr	r0, [pc, #88]	; (8007ab0 <lwip_netconn_do_write+0x108>)
 8007a56:	f010 fa9d 	bl	8017f94 <iprintf>
          UNLOCK_TCPIP_CORE();
 8007a5a:	4818      	ldr	r0, [pc, #96]	; (8007abc <lwip_netconn_do_write+0x114>)
 8007a5c:	f00d fc23 	bl	80152a6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	330c      	adds	r3, #12
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f00d fb7a 	bl	8015162 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8007a6e:	4813      	ldr	r0, [pc, #76]	; (8007abc <lwip_netconn_do_write+0x114>)
 8007a70:	f00d fc0a 	bl	8015288 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	785b      	ldrb	r3, [r3, #1]
 8007a7a:	2b01      	cmp	r3, #1
 8007a7c:	d110      	bne.n	8007aa0 <lwip_netconn_do_write+0xf8>
 8007a7e:	4b0a      	ldr	r3, [pc, #40]	; (8007aa8 <lwip_netconn_do_write+0x100>)
 8007a80:	f240 722c 	movw	r2, #1836	; 0x72c
 8007a84:	490c      	ldr	r1, [pc, #48]	; (8007ab8 <lwip_netconn_do_write+0x110>)
 8007a86:	480a      	ldr	r0, [pc, #40]	; (8007ab0 <lwip_netconn_do_write+0x108>)
 8007a88:	f010 fa84 	bl	8017f94 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8007a8c:	e008      	b.n	8007aa0 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8007a8e:	23f5      	movs	r3, #245	; 0xf5
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	e001      	b.n	8007a98 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 8007a94:	23fa      	movs	r3, #250	; 0xfa
 8007a96:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	7bfa      	ldrb	r2, [r7, #15]
 8007a9c:	711a      	strb	r2, [r3, #4]
 8007a9e:	e000      	b.n	8007aa2 <lwip_netconn_do_write+0xfa>
        return;
 8007aa0:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}
 8007aa8:	08019254 	.word	0x08019254
 8007aac:	080195f8 	.word	0x080195f8
 8007ab0:	08019298 	.word	0x08019298
 8007ab4:	08019780 	.word	0x08019780
 8007ab8:	08019614 	.word	0x08019614
 8007abc:	20008da4 	.word	0x20008da4

08007ac0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	785b      	ldrb	r3, [r3, #1]
 8007ad2:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d069      	beq.n	8007bb2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d162      	bne.n	8007bb2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d002      	beq.n	8007afa <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8007af4:	7afb      	ldrb	r3, [r7, #11]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d05b      	beq.n	8007bb2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8007afa:	7afb      	ldrb	r3, [r7, #11]
 8007afc:	2b03      	cmp	r3, #3
 8007afe:	d103      	bne.n	8007b08 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	22f5      	movs	r2, #245	; 0xf5
 8007b04:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8007b06:	e059      	b.n	8007bbc <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8007b08:	7afb      	ldrb	r3, [r7, #11]
 8007b0a:	2b01      	cmp	r3, #1
 8007b0c:	d103      	bne.n	8007b16 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	22fb      	movs	r2, #251	; 0xfb
 8007b12:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8007b14:	e052      	b.n	8007bbc <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	7a1b      	ldrb	r3, [r3, #8]
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d004      	beq.n	8007b2c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f7ff f926 	bl	8006d78 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <lwip_netconn_do_close+0x84>
 8007b36:	4b23      	ldr	r3, [pc, #140]	; (8007bc4 <lwip_netconn_do_close+0x104>)
 8007b38:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8007b3c:	4922      	ldr	r1, [pc, #136]	; (8007bc8 <lwip_netconn_do_close+0x108>)
 8007b3e:	4823      	ldr	r0, [pc, #140]	; (8007bcc <lwip_netconn_do_close+0x10c>)
 8007b40:	f010 fa28 	bl	8017f94 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2204      	movs	r2, #4
 8007b4a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	68fa      	ldr	r2, [r7, #12]
 8007b52:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f7ff f98a 	bl	8006e74 <lwip_netconn_do_close_internal>
 8007b60:	4603      	mov	r3, r0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d029      	beq.n	8007bba <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	785b      	ldrb	r3, [r3, #1]
 8007b6c:	2b04      	cmp	r3, #4
 8007b6e:	d006      	beq.n	8007b7e <lwip_netconn_do_close+0xbe>
 8007b70:	4b14      	ldr	r3, [pc, #80]	; (8007bc4 <lwip_netconn_do_close+0x104>)
 8007b72:	f240 72c2 	movw	r2, #1986	; 0x7c2
 8007b76:	4916      	ldr	r1, [pc, #88]	; (8007bd0 <lwip_netconn_do_close+0x110>)
 8007b78:	4814      	ldr	r0, [pc, #80]	; (8007bcc <lwip_netconn_do_close+0x10c>)
 8007b7a:	f010 fa0b 	bl	8017f94 <iprintf>
        UNLOCK_TCPIP_CORE();
 8007b7e:	4815      	ldr	r0, [pc, #84]	; (8007bd4 <lwip_netconn_do_close+0x114>)
 8007b80:	f00d fb91 	bl	80152a6 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	330c      	adds	r3, #12
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f00d fae8 	bl	8015162 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8007b92:	4810      	ldr	r0, [pc, #64]	; (8007bd4 <lwip_netconn_do_close+0x114>)
 8007b94:	f00d fb78 	bl	8015288 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	785b      	ldrb	r3, [r3, #1]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00b      	beq.n	8007bba <lwip_netconn_do_close+0xfa>
 8007ba2:	4b08      	ldr	r3, [pc, #32]	; (8007bc4 <lwip_netconn_do_close+0x104>)
 8007ba4:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8007ba8:	4909      	ldr	r1, [pc, #36]	; (8007bd0 <lwip_netconn_do_close+0x110>)
 8007baa:	4808      	ldr	r0, [pc, #32]	; (8007bcc <lwip_netconn_do_close+0x10c>)
 8007bac:	f010 f9f2 	bl	8017f94 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8007bb0:	e003      	b.n	8007bba <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	22f5      	movs	r2, #245	; 0xf5
 8007bb6:	711a      	strb	r2, [r3, #4]
 8007bb8:	e000      	b.n	8007bbc <lwip_netconn_do_close+0xfc>
      return;
 8007bba:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08019254 	.word	0x08019254
 8007bc8:	080195f8 	.word	0x080195f8
 8007bcc:	08019298 	.word	0x08019298
 8007bd0:	08019614 	.word	0x08019614
 8007bd4:	20008da4 	.word	0x20008da4

08007bd8 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b082      	sub	sp, #8
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d013      	beq.n	8007c0e <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00b      	beq.n	8007c06 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f001 fdf2 	bl	80097dc <pbuf_free>
      buf->p = buf->ptr = NULL;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	605a      	str	r2, [r3, #4]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	2006      	movs	r0, #6
 8007c0a:	f000 ff3b 	bl	8008a84 <memp_free>
  }
}
 8007c0e:	bf00      	nop
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d108      	bne.n	8007c3c <netbuf_data+0x24>
 8007c2a:	4b1b      	ldr	r3, [pc, #108]	; (8007c98 <netbuf_data+0x80>)
 8007c2c:	22c6      	movs	r2, #198	; 0xc6
 8007c2e:	491b      	ldr	r1, [pc, #108]	; (8007c9c <netbuf_data+0x84>)
 8007c30:	481b      	ldr	r0, [pc, #108]	; (8007ca0 <netbuf_data+0x88>)
 8007c32:	f010 f9af 	bl	8017f94 <iprintf>
 8007c36:	f06f 030f 	mvn.w	r3, #15
 8007c3a:	e029      	b.n	8007c90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d108      	bne.n	8007c54 <netbuf_data+0x3c>
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <netbuf_data+0x80>)
 8007c44:	22c7      	movs	r2, #199	; 0xc7
 8007c46:	4917      	ldr	r1, [pc, #92]	; (8007ca4 <netbuf_data+0x8c>)
 8007c48:	4815      	ldr	r0, [pc, #84]	; (8007ca0 <netbuf_data+0x88>)
 8007c4a:	f010 f9a3 	bl	8017f94 <iprintf>
 8007c4e:	f06f 030f 	mvn.w	r3, #15
 8007c52:	e01d      	b.n	8007c90 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d108      	bne.n	8007c6c <netbuf_data+0x54>
 8007c5a:	4b0f      	ldr	r3, [pc, #60]	; (8007c98 <netbuf_data+0x80>)
 8007c5c:	22c8      	movs	r2, #200	; 0xc8
 8007c5e:	4912      	ldr	r1, [pc, #72]	; (8007ca8 <netbuf_data+0x90>)
 8007c60:	480f      	ldr	r0, [pc, #60]	; (8007ca0 <netbuf_data+0x88>)
 8007c62:	f010 f997 	bl	8017f94 <iprintf>
 8007c66:	f06f 030f 	mvn.w	r3, #15
 8007c6a:	e011      	b.n	8007c90 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d102      	bne.n	8007c7a <netbuf_data+0x62>
    return ERR_BUF;
 8007c74:	f06f 0301 	mvn.w	r3, #1
 8007c78:	e00a      	b.n	8007c90 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	685a      	ldr	r2, [r3, #4]
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	895a      	ldrh	r2, [r3, #10]
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8007c8e:	2300      	movs	r3, #0
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3710      	adds	r7, #16
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	080197ac 	.word	0x080197ac
 8007c9c:	080198b4 	.word	0x080198b4
 8007ca0:	080197fc 	.word	0x080197fc
 8007ca4:	080198d0 	.word	0x080198d0
 8007ca8:	080198f0 	.word	0x080198f0

08007cac <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d108      	bne.n	8007ccc <netbuf_next+0x20>
 8007cba:	4b11      	ldr	r3, [pc, #68]	; (8007d00 <netbuf_next+0x54>)
 8007cbc:	22e0      	movs	r2, #224	; 0xe0
 8007cbe:	4911      	ldr	r1, [pc, #68]	; (8007d04 <netbuf_next+0x58>)
 8007cc0:	4811      	ldr	r0, [pc, #68]	; (8007d08 <netbuf_next+0x5c>)
 8007cc2:	f010 f967 	bl	8017f94 <iprintf>
 8007cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cca:	e014      	b.n	8007cf6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d102      	bne.n	8007cdc <netbuf_next+0x30>
    return -1;
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	e00c      	b.n	8007cf6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <netbuf_next+0x48>
    return 1;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e000      	b.n	8007cf6 <netbuf_next+0x4a>
  }
  return 0;
 8007cf4:	2300      	movs	r3, #0
}
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	3708      	adds	r7, #8
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	bd80      	pop	{r7, pc}
 8007cfe:	bf00      	nop
 8007d00:	080197ac 	.word	0x080197ac
 8007d04:	0801990c 	.word	0x0801990c
 8007d08:	080197fc 	.word	0x080197fc

08007d0c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b084      	sub	sp, #16
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
 8007d14:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8007d16:	f008 f985 	bl	8010024 <sys_timeouts_sleeptime>
 8007d1a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d22:	d10b      	bne.n	8007d3c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8007d24:	4813      	ldr	r0, [pc, #76]	; (8007d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007d26:	f00d fabe 	bl	80152a6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	6839      	ldr	r1, [r7, #0]
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f00d f976 	bl	8015020 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8007d34:	480f      	ldr	r0, [pc, #60]	; (8007d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007d36:	f00d faa7 	bl	8015288 <sys_mutex_lock>
    return;
 8007d3a:	e018      	b.n	8007d6e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d102      	bne.n	8007d48 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8007d42:	f008 f935 	bl	800ffb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007d46:	e7e6      	b.n	8007d16 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8007d48:	480a      	ldr	r0, [pc, #40]	; (8007d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007d4a:	f00d faac 	bl	80152a6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	6839      	ldr	r1, [r7, #0]
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f00d f964 	bl	8015020 <sys_arch_mbox_fetch>
 8007d58:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8007d5a:	4806      	ldr	r0, [pc, #24]	; (8007d74 <tcpip_timeouts_mbox_fetch+0x68>)
 8007d5c:	f00d fa94 	bl	8015288 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d66:	d102      	bne.n	8007d6e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8007d68:	f008 f922 	bl	800ffb0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8007d6c:	e7d3      	b.n	8007d16 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	20008da4 	.word	0x20008da4

08007d78 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b084      	sub	sp, #16
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8007d80:	4810      	ldr	r0, [pc, #64]	; (8007dc4 <tcpip_thread+0x4c>)
 8007d82:	f00d fa81 	bl	8015288 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8007d86:	4b10      	ldr	r3, [pc, #64]	; (8007dc8 <tcpip_thread+0x50>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d005      	beq.n	8007d9a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8007d8e:	4b0e      	ldr	r3, [pc, #56]	; (8007dc8 <tcpip_thread+0x50>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a0e      	ldr	r2, [pc, #56]	; (8007dcc <tcpip_thread+0x54>)
 8007d94:	6812      	ldr	r2, [r2, #0]
 8007d96:	4610      	mov	r0, r2
 8007d98:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007d9a:	f107 030c 	add.w	r3, r7, #12
 8007d9e:	4619      	mov	r1, r3
 8007da0:	480b      	ldr	r0, [pc, #44]	; (8007dd0 <tcpip_thread+0x58>)
 8007da2:	f7ff ffb3 	bl	8007d0c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d106      	bne.n	8007dba <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007dac:	4b09      	ldr	r3, [pc, #36]	; (8007dd4 <tcpip_thread+0x5c>)
 8007dae:	2291      	movs	r2, #145	; 0x91
 8007db0:	4909      	ldr	r1, [pc, #36]	; (8007dd8 <tcpip_thread+0x60>)
 8007db2:	480a      	ldr	r0, [pc, #40]	; (8007ddc <tcpip_thread+0x64>)
 8007db4:	f010 f8ee 	bl	8017f94 <iprintf>
      continue;
 8007db8:	e003      	b.n	8007dc2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f000 f80f 	bl	8007de0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8007dc2:	e7ea      	b.n	8007d9a <tcpip_thread+0x22>
 8007dc4:	20008da4 	.word	0x20008da4
 8007dc8:	20008358 	.word	0x20008358
 8007dcc:	2000835c 	.word	0x2000835c
 8007dd0:	20008360 	.word	0x20008360
 8007dd4:	08019944 	.word	0x08019944
 8007dd8:	08019974 	.word	0x08019974
 8007ddc:	08019994 	.word	0x08019994

08007de0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b082      	sub	sp, #8
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d018      	beq.n	8007e22 <tcpip_thread_handle_msg+0x42>
 8007df0:	2b02      	cmp	r3, #2
 8007df2:	d021      	beq.n	8007e38 <tcpip_thread_handle_msg+0x58>
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d126      	bne.n	8007e46 <tcpip_thread_handle_msg+0x66>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68db      	ldr	r3, [r3, #12]
 8007dfc:	687a      	ldr	r2, [r7, #4]
 8007dfe:	6850      	ldr	r0, [r2, #4]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	6892      	ldr	r2, [r2, #8]
 8007e04:	4611      	mov	r1, r2
 8007e06:	4798      	blx	r3
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d004      	beq.n	8007e18 <tcpip_thread_handle_msg+0x38>
        pbuf_free(msg->msg.inp.p);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	4618      	mov	r0, r3
 8007e14:	f001 fce2 	bl	80097dc <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007e18:	6879      	ldr	r1, [r7, #4]
 8007e1a:	2009      	movs	r0, #9
 8007e1c:	f000 fe32 	bl	8008a84 <memp_free>
      break;
 8007e20:	e018      	b.n	8007e54 <tcpip_thread_handle_msg+0x74>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	6892      	ldr	r2, [r2, #8]
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8007e2e:	6879      	ldr	r1, [r7, #4]
 8007e30:	2008      	movs	r0, #8
 8007e32:	f000 fe27 	bl	8008a84 <memp_free>
      break;
 8007e36:	e00d      	b.n	8007e54 <tcpip_thread_handle_msg+0x74>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	6892      	ldr	r2, [r2, #8]
 8007e40:	4610      	mov	r0, r2
 8007e42:	4798      	blx	r3
      break;
 8007e44:	e006      	b.n	8007e54 <tcpip_thread_handle_msg+0x74>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8007e46:	4b05      	ldr	r3, [pc, #20]	; (8007e5c <tcpip_thread_handle_msg+0x7c>)
 8007e48:	22cf      	movs	r2, #207	; 0xcf
 8007e4a:	4905      	ldr	r1, [pc, #20]	; (8007e60 <tcpip_thread_handle_msg+0x80>)
 8007e4c:	4805      	ldr	r0, [pc, #20]	; (8007e64 <tcpip_thread_handle_msg+0x84>)
 8007e4e:	f010 f8a1 	bl	8017f94 <iprintf>
      break;
 8007e52:	bf00      	nop
  }
}
 8007e54:	bf00      	nop
 8007e56:	3708      	adds	r7, #8
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}
 8007e5c:	08019944 	.word	0x08019944
 8007e60:	08019974 	.word	0x08019974
 8007e64:	08019994 	.word	0x08019994

08007e68 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b086      	sub	sp, #24
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007e74:	481a      	ldr	r0, [pc, #104]	; (8007ee0 <tcpip_inpkt+0x78>)
 8007e76:	f00d f92e 	bl	80150d6 <sys_mbox_valid>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d105      	bne.n	8007e8c <tcpip_inpkt+0x24>
 8007e80:	4b18      	ldr	r3, [pc, #96]	; (8007ee4 <tcpip_inpkt+0x7c>)
 8007e82:	22fc      	movs	r2, #252	; 0xfc
 8007e84:	4918      	ldr	r1, [pc, #96]	; (8007ee8 <tcpip_inpkt+0x80>)
 8007e86:	4819      	ldr	r0, [pc, #100]	; (8007eec <tcpip_inpkt+0x84>)
 8007e88:	f010 f884 	bl	8017f94 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8007e8c:	2009      	movs	r0, #9
 8007e8e:	f000 fda7 	bl	80089e0 <memp_malloc>
 8007e92:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d102      	bne.n	8007ea0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8007e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007e9e:	e01a      	b.n	8007ed6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007eb8:	6979      	ldr	r1, [r7, #20]
 8007eba:	4809      	ldr	r0, [pc, #36]	; (8007ee0 <tcpip_inpkt+0x78>)
 8007ebc:	f00d f896 	bl	8014fec <sys_mbox_trypost>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d006      	beq.n	8007ed4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8007ec6:	6979      	ldr	r1, [r7, #20]
 8007ec8:	2009      	movs	r0, #9
 8007eca:	f000 fddb 	bl	8008a84 <memp_free>
    return ERR_MEM;
 8007ece:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed2:	e000      	b.n	8007ed6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8007ed4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	20008360 	.word	0x20008360
 8007ee4:	08019944 	.word	0x08019944
 8007ee8:	080199bc 	.word	0x080199bc
 8007eec:	08019994 	.word	0x08019994

08007ef0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
 8007ef8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f00:	f003 0318 	and.w	r3, r3, #24
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d006      	beq.n	8007f16 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8007f08:	4a08      	ldr	r2, [pc, #32]	; (8007f2c <tcpip_input+0x3c>)
 8007f0a:	6839      	ldr	r1, [r7, #0]
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f7ff ffab 	bl	8007e68 <tcpip_inpkt>
 8007f12:	4603      	mov	r3, r0
 8007f14:	e005      	b.n	8007f22 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8007f16:	4a06      	ldr	r2, [pc, #24]	; (8007f30 <tcpip_input+0x40>)
 8007f18:	6839      	ldr	r1, [r7, #0]
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f7ff ffa4 	bl	8007e68 <tcpip_inpkt>
 8007f20:	4603      	mov	r3, r0
}
 8007f22:	4618      	mov	r0, r3
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	08014dd9 	.word	0x08014dd9
 8007f30:	08013a59 	.word	0x08013a59

08007f34 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8007f3e:	4819      	ldr	r0, [pc, #100]	; (8007fa4 <tcpip_try_callback+0x70>)
 8007f40:	f00d f8c9 	bl	80150d6 <sys_mbox_valid>
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d106      	bne.n	8007f58 <tcpip_try_callback+0x24>
 8007f4a:	4b17      	ldr	r3, [pc, #92]	; (8007fa8 <tcpip_try_callback+0x74>)
 8007f4c:	f240 125d 	movw	r2, #349	; 0x15d
 8007f50:	4916      	ldr	r1, [pc, #88]	; (8007fac <tcpip_try_callback+0x78>)
 8007f52:	4817      	ldr	r0, [pc, #92]	; (8007fb0 <tcpip_try_callback+0x7c>)
 8007f54:	f010 f81e 	bl	8017f94 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8007f58:	2008      	movs	r0, #8
 8007f5a:	f000 fd41 	bl	80089e0 <memp_malloc>
 8007f5e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d102      	bne.n	8007f6c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8007f66:	f04f 33ff 	mov.w	r3, #4294967295
 8007f6a:	e017      	b.n	8007f9c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	687a      	ldr	r2, [r7, #4]
 8007f76:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	683a      	ldr	r2, [r7, #0]
 8007f7c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8007f7e:	68f9      	ldr	r1, [r7, #12]
 8007f80:	4808      	ldr	r0, [pc, #32]	; (8007fa4 <tcpip_try_callback+0x70>)
 8007f82:	f00d f833 	bl	8014fec <sys_mbox_trypost>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d006      	beq.n	8007f9a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8007f8c:	68f9      	ldr	r1, [r7, #12]
 8007f8e:	2008      	movs	r0, #8
 8007f90:	f000 fd78 	bl	8008a84 <memp_free>
    return ERR_MEM;
 8007f94:	f04f 33ff 	mov.w	r3, #4294967295
 8007f98:	e000      	b.n	8007f9c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3710      	adds	r7, #16
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20008360 	.word	0x20008360
 8007fa8:	08019944 	.word	0x08019944
 8007fac:	080199bc 	.word	0x080199bc
 8007fb0:	08019994 	.word	0x08019994

08007fb4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b084      	sub	sp, #16
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8007fc0:	4806      	ldr	r0, [pc, #24]	; (8007fdc <tcpip_send_msg_wait_sem+0x28>)
 8007fc2:	f00d f961 	bl	8015288 <sys_mutex_lock>
  fn(apimsg);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	68b8      	ldr	r0, [r7, #8]
 8007fca:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8007fcc:	4803      	ldr	r0, [pc, #12]	; (8007fdc <tcpip_send_msg_wait_sem+0x28>)
 8007fce:	f00d f96a 	bl	80152a6 <sys_mutex_unlock>
  return ERR_OK;
 8007fd2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20008da4 	.word	0x20008da4

08007fe0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b084      	sub	sp, #16
 8007fe4:	af02      	add	r7, sp, #8
 8007fe6:	6078      	str	r0, [r7, #4]
 8007fe8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8007fea:	f000 f871 	bl	80080d0 <lwip_init>

  tcpip_init_done = initfunc;
 8007fee:	4a17      	ldr	r2, [pc, #92]	; (800804c <tcpip_init+0x6c>)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <tcpip_init+0x70>)
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8007ffa:	2106      	movs	r1, #6
 8007ffc:	4815      	ldr	r0, [pc, #84]	; (8008054 <tcpip_init+0x74>)
 8007ffe:	f00c ffc1 	bl	8014f84 <sys_mbox_new>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d006      	beq.n	8008016 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008008:	4b13      	ldr	r3, [pc, #76]	; (8008058 <tcpip_init+0x78>)
 800800a:	f240 2261 	movw	r2, #609	; 0x261
 800800e:	4913      	ldr	r1, [pc, #76]	; (800805c <tcpip_init+0x7c>)
 8008010:	4813      	ldr	r0, [pc, #76]	; (8008060 <tcpip_init+0x80>)
 8008012:	f00f ffbf 	bl	8017f94 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008016:	4813      	ldr	r0, [pc, #76]	; (8008064 <tcpip_init+0x84>)
 8008018:	f00d f91a 	bl	8015250 <sys_mutex_new>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d006      	beq.n	8008030 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008022:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <tcpip_init+0x78>)
 8008024:	f240 2265 	movw	r2, #613	; 0x265
 8008028:	490f      	ldr	r1, [pc, #60]	; (8008068 <tcpip_init+0x88>)
 800802a:	480d      	ldr	r0, [pc, #52]	; (8008060 <tcpip_init+0x80>)
 800802c:	f00f ffb2 	bl	8017f94 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008030:	2300      	movs	r3, #0
 8008032:	9300      	str	r3, [sp, #0]
 8008034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008038:	2200      	movs	r2, #0
 800803a:	490c      	ldr	r1, [pc, #48]	; (800806c <tcpip_init+0x8c>)
 800803c:	480c      	ldr	r0, [pc, #48]	; (8008070 <tcpip_init+0x90>)
 800803e:	f00d f93f 	bl	80152c0 <sys_thread_new>
}
 8008042:	bf00      	nop
 8008044:	3708      	adds	r7, #8
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	20008358 	.word	0x20008358
 8008050:	2000835c 	.word	0x2000835c
 8008054:	20008360 	.word	0x20008360
 8008058:	08019944 	.word	0x08019944
 800805c:	080199cc 	.word	0x080199cc
 8008060:	08019994 	.word	0x08019994
 8008064:	20008da4 	.word	0x20008da4
 8008068:	080199f0 	.word	0x080199f0
 800806c:	08007d79 	.word	0x08007d79
 8008070:	08019a14 	.word	0x08019a14

08008074 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008074:	b480      	push	{r7}
 8008076:	b083      	sub	sp, #12
 8008078:	af00      	add	r7, sp, #0
 800807a:	4603      	mov	r3, r0
 800807c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800807e:	88fb      	ldrh	r3, [r7, #6]
 8008080:	021b      	lsls	r3, r3, #8
 8008082:	b21a      	sxth	r2, r3
 8008084:	88fb      	ldrh	r3, [r7, #6]
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	b29b      	uxth	r3, r3
 800808a:	b21b      	sxth	r3, r3
 800808c:	4313      	orrs	r3, r2
 800808e:	b21b      	sxth	r3, r3
 8008090:	b29b      	uxth	r3, r3
}
 8008092:	4618      	mov	r0, r3
 8008094:	370c      	adds	r7, #12
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr

0800809e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800809e:	b480      	push	{r7}
 80080a0:	b083      	sub	sp, #12
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	061a      	lsls	r2, r3, #24
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	021b      	lsls	r3, r3, #8
 80080ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80080b2:	431a      	orrs	r2, r3
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	0a1b      	lsrs	r3, r3, #8
 80080b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80080bc:	431a      	orrs	r2, r3
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	0e1b      	lsrs	r3, r3, #24
 80080c2:	4313      	orrs	r3, r2
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	370c      	adds	r7, #12
 80080c8:	46bd      	mov	sp, r7
 80080ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ce:	4770      	bx	lr

080080d0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 80080d6:	2300      	movs	r3, #0
 80080d8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80080da:	f00d f8ab 	bl	8015234 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80080de:	f000 f8d5 	bl	800828c <mem_init>
  memp_init();
 80080e2:	f000 fc31 	bl	8008948 <memp_init>
  pbuf_init();
  netif_init();
 80080e6:	f000 fcf7 	bl	8008ad8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80080ea:	f007 ffd3 	bl	8010094 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80080ee:	f001 fe1f 	bl	8009d30 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80080f2:	f007 ff17 	bl	800ff24 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
	...

08008100 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800810a:	4b05      	ldr	r3, [pc, #20]	; (8008120 <ptr_to_mem+0x20>)
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	88fb      	ldrh	r3, [r7, #6]
 8008110:	4413      	add	r3, r2
}
 8008112:	4618      	mov	r0, r3
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	20008364 	.word	0x20008364

08008124 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	4a05      	ldr	r2, [pc, #20]	; (8008144 <mem_to_ptr+0x20>)
 8008130:	6812      	ldr	r2, [r2, #0]
 8008132:	1a9b      	subs	r3, r3, r2
 8008134:	b29b      	uxth	r3, r3
}
 8008136:	4618      	mov	r0, r3
 8008138:	370c      	adds	r7, #12
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	20008364 	.word	0x20008364

08008148 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8008148:	b590      	push	{r4, r7, lr}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8008150:	4b45      	ldr	r3, [pc, #276]	; (8008268 <plug_holes+0x120>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	687a      	ldr	r2, [r7, #4]
 8008156:	429a      	cmp	r2, r3
 8008158:	d206      	bcs.n	8008168 <plug_holes+0x20>
 800815a:	4b44      	ldr	r3, [pc, #272]	; (800826c <plug_holes+0x124>)
 800815c:	f240 12df 	movw	r2, #479	; 0x1df
 8008160:	4943      	ldr	r1, [pc, #268]	; (8008270 <plug_holes+0x128>)
 8008162:	4844      	ldr	r0, [pc, #272]	; (8008274 <plug_holes+0x12c>)
 8008164:	f00f ff16 	bl	8017f94 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8008168:	4b43      	ldr	r3, [pc, #268]	; (8008278 <plug_holes+0x130>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	429a      	cmp	r2, r3
 8008170:	d306      	bcc.n	8008180 <plug_holes+0x38>
 8008172:	4b3e      	ldr	r3, [pc, #248]	; (800826c <plug_holes+0x124>)
 8008174:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8008178:	4940      	ldr	r1, [pc, #256]	; (800827c <plug_holes+0x134>)
 800817a:	483e      	ldr	r0, [pc, #248]	; (8008274 <plug_holes+0x12c>)
 800817c:	f00f ff0a 	bl	8017f94 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	791b      	ldrb	r3, [r3, #4]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d006      	beq.n	8008196 <plug_holes+0x4e>
 8008188:	4b38      	ldr	r3, [pc, #224]	; (800826c <plug_holes+0x124>)
 800818a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800818e:	493c      	ldr	r1, [pc, #240]	; (8008280 <plug_holes+0x138>)
 8008190:	4838      	ldr	r0, [pc, #224]	; (8008274 <plug_holes+0x12c>)
 8008192:	f00f feff 	bl	8017f94 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	881b      	ldrh	r3, [r3, #0]
 800819a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800819e:	d906      	bls.n	80081ae <plug_holes+0x66>
 80081a0:	4b32      	ldr	r3, [pc, #200]	; (800826c <plug_holes+0x124>)
 80081a2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 80081a6:	4937      	ldr	r1, [pc, #220]	; (8008284 <plug_holes+0x13c>)
 80081a8:	4832      	ldr	r0, [pc, #200]	; (8008274 <plug_holes+0x12c>)
 80081aa:	f00f fef3 	bl	8017f94 <iprintf>

  nmem = ptr_to_mem(mem->next);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7ff ffa4 	bl	8008100 <ptr_to_mem>
 80081b8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	429a      	cmp	r2, r3
 80081c0:	d024      	beq.n	800820c <plug_holes+0xc4>
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	791b      	ldrb	r3, [r3, #4]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d120      	bne.n	800820c <plug_holes+0xc4>
 80081ca:	4b2b      	ldr	r3, [pc, #172]	; (8008278 <plug_holes+0x130>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	429a      	cmp	r2, r3
 80081d2:	d01b      	beq.n	800820c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80081d4:	4b2c      	ldr	r3, [pc, #176]	; (8008288 <plug_holes+0x140>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	429a      	cmp	r2, r3
 80081dc:	d102      	bne.n	80081e4 <plug_holes+0x9c>
      lfree = mem;
 80081de:	4a2a      	ldr	r2, [pc, #168]	; (8008288 <plug_holes+0x140>)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	881a      	ldrh	r2, [r3, #0]
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	881b      	ldrh	r3, [r3, #0]
 80081f0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80081f4:	d00a      	beq.n	800820c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	881b      	ldrh	r3, [r3, #0]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f7ff ff80 	bl	8008100 <ptr_to_mem>
 8008200:	4604      	mov	r4, r0
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f7ff ff8e 	bl	8008124 <mem_to_ptr>
 8008208:	4603      	mov	r3, r0
 800820a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	885b      	ldrh	r3, [r3, #2]
 8008210:	4618      	mov	r0, r3
 8008212:	f7ff ff75 	bl	8008100 <ptr_to_mem>
 8008216:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	429a      	cmp	r2, r3
 800821e:	d01f      	beq.n	8008260 <plug_holes+0x118>
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	791b      	ldrb	r3, [r3, #4]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d11b      	bne.n	8008260 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8008228:	4b17      	ldr	r3, [pc, #92]	; (8008288 <plug_holes+0x140>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	429a      	cmp	r2, r3
 8008230:	d102      	bne.n	8008238 <plug_holes+0xf0>
      lfree = pmem;
 8008232:	4a15      	ldr	r2, [pc, #84]	; (8008288 <plug_holes+0x140>)
 8008234:	68bb      	ldr	r3, [r7, #8]
 8008236:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	881a      	ldrh	r2, [r3, #0]
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008248:	d00a      	beq.n	8008260 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	4618      	mov	r0, r3
 8008250:	f7ff ff56 	bl	8008100 <ptr_to_mem>
 8008254:	4604      	mov	r4, r0
 8008256:	68b8      	ldr	r0, [r7, #8]
 8008258:	f7ff ff64 	bl	8008124 <mem_to_ptr>
 800825c:	4603      	mov	r3, r0
 800825e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8008260:	bf00      	nop
 8008262:	3714      	adds	r7, #20
 8008264:	46bd      	mov	sp, r7
 8008266:	bd90      	pop	{r4, r7, pc}
 8008268:	20008364 	.word	0x20008364
 800826c:	08019a24 	.word	0x08019a24
 8008270:	08019a54 	.word	0x08019a54
 8008274:	08019a6c 	.word	0x08019a6c
 8008278:	20008368 	.word	0x20008368
 800827c:	08019a94 	.word	0x08019a94
 8008280:	08019ab0 	.word	0x08019ab0
 8008284:	08019acc 	.word	0x08019acc
 8008288:	20008370 	.word	0x20008370

0800828c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8008292:	4b1f      	ldr	r3, [pc, #124]	; (8008310 <mem_init+0x84>)
 8008294:	3303      	adds	r3, #3
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	461a      	mov	r2, r3
 800829c:	4b1d      	ldr	r3, [pc, #116]	; (8008314 <mem_init+0x88>)
 800829e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80082a0:	4b1c      	ldr	r3, [pc, #112]	; (8008314 <mem_init+0x88>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80082ac:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80082ba:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80082be:	f7ff ff1f 	bl	8008100 <ptr_to_mem>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b14      	ldr	r3, [pc, #80]	; (8008318 <mem_init+0x8c>)
 80082c6:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 80082c8:	4b13      	ldr	r3, [pc, #76]	; (8008318 <mem_init+0x8c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2201      	movs	r2, #1
 80082ce:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80082d0:	4b11      	ldr	r3, [pc, #68]	; (8008318 <mem_init+0x8c>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80082d8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <mem_init+0x8c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80082e2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80082e4:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <mem_init+0x88>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a0c      	ldr	r2, [pc, #48]	; (800831c <mem_init+0x90>)
 80082ea:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80082ec:	480c      	ldr	r0, [pc, #48]	; (8008320 <mem_init+0x94>)
 80082ee:	f00c ffaf 	bl	8015250 <sys_mutex_new>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d006      	beq.n	8008306 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <mem_init+0x98>)
 80082fa:	f240 221f 	movw	r2, #543	; 0x21f
 80082fe:	490a      	ldr	r1, [pc, #40]	; (8008328 <mem_init+0x9c>)
 8008300:	480a      	ldr	r0, [pc, #40]	; (800832c <mem_init+0xa0>)
 8008302:	f00f fe47 	bl	8017f94 <iprintf>
  }
}
 8008306:	bf00      	nop
 8008308:	3708      	adds	r7, #8
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20008dc0 	.word	0x20008dc0
 8008314:	20008364 	.word	0x20008364
 8008318:	20008368 	.word	0x20008368
 800831c:	20008370 	.word	0x20008370
 8008320:	2000836c 	.word	0x2000836c
 8008324:	08019a24 	.word	0x08019a24
 8008328:	08019af8 	.word	0x08019af8
 800832c:	08019a6c 	.word	0x08019a6c

08008330 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b086      	sub	sp, #24
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f7ff fef3 	bl	8008124 <mem_to_ptr>
 800833e:	4603      	mov	r3, r0
 8008340:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	881b      	ldrh	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7ff feda 	bl	8008100 <ptr_to_mem>
 800834c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	885b      	ldrh	r3, [r3, #2]
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fed4 	bl	8008100 <ptr_to_mem>
 8008358:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	881b      	ldrh	r3, [r3, #0]
 800835e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008362:	d818      	bhi.n	8008396 <mem_link_valid+0x66>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	885b      	ldrh	r3, [r3, #2]
 8008368:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800836c:	d813      	bhi.n	8008396 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8008372:	8afa      	ldrh	r2, [r7, #22]
 8008374:	429a      	cmp	r2, r3
 8008376:	d004      	beq.n	8008382 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	881b      	ldrh	r3, [r3, #0]
 800837c:	8afa      	ldrh	r2, [r7, #22]
 800837e:	429a      	cmp	r2, r3
 8008380:	d109      	bne.n	8008396 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8008382:	4b08      	ldr	r3, [pc, #32]	; (80083a4 <mem_link_valid+0x74>)
 8008384:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	429a      	cmp	r2, r3
 800838a:	d006      	beq.n	800839a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	885b      	ldrh	r3, [r3, #2]
 8008390:	8afa      	ldrh	r2, [r7, #22]
 8008392:	429a      	cmp	r2, r3
 8008394:	d001      	beq.n	800839a <mem_link_valid+0x6a>
    return 0;
 8008396:	2300      	movs	r3, #0
 8008398:	e000      	b.n	800839c <mem_link_valid+0x6c>
  }
  return 1;
 800839a:	2301      	movs	r3, #1
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20008368 	.word	0x20008368

080083a8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d070      	beq.n	8008498 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d00d      	beq.n	80083dc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80083c0:	4b37      	ldr	r3, [pc, #220]	; (80084a0 <mem_free+0xf8>)
 80083c2:	f240 2273 	movw	r2, #627	; 0x273
 80083c6:	4937      	ldr	r1, [pc, #220]	; (80084a4 <mem_free+0xfc>)
 80083c8:	4837      	ldr	r0, [pc, #220]	; (80084a8 <mem_free+0x100>)
 80083ca:	f00f fde3 	bl	8017f94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80083ce:	f00c ff9d 	bl	801530c <sys_arch_protect>
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	f00c ffa7 	bl	8015328 <sys_arch_unprotect>
    return;
 80083da:	e05e      	b.n	800849a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	3b08      	subs	r3, #8
 80083e0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80083e2:	4b32      	ldr	r3, [pc, #200]	; (80084ac <mem_free+0x104>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69fa      	ldr	r2, [r7, #28]
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d306      	bcc.n	80083fa <mem_free+0x52>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	f103 020c 	add.w	r2, r3, #12
 80083f2:	4b2f      	ldr	r3, [pc, #188]	; (80084b0 <mem_free+0x108>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d90d      	bls.n	8008416 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80083fa:	4b29      	ldr	r3, [pc, #164]	; (80084a0 <mem_free+0xf8>)
 80083fc:	f240 227f 	movw	r2, #639	; 0x27f
 8008400:	492c      	ldr	r1, [pc, #176]	; (80084b4 <mem_free+0x10c>)
 8008402:	4829      	ldr	r0, [pc, #164]	; (80084a8 <mem_free+0x100>)
 8008404:	f00f fdc6 	bl	8017f94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008408:	f00c ff80 	bl	801530c <sys_arch_protect>
 800840c:	6138      	str	r0, [r7, #16]
 800840e:	6938      	ldr	r0, [r7, #16]
 8008410:	f00c ff8a 	bl	8015328 <sys_arch_unprotect>
    return;
 8008414:	e041      	b.n	800849a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008416:	4828      	ldr	r0, [pc, #160]	; (80084b8 <mem_free+0x110>)
 8008418:	f00c ff36 	bl	8015288 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	791b      	ldrb	r3, [r3, #4]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d110      	bne.n	8008446 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8008424:	4b1e      	ldr	r3, [pc, #120]	; (80084a0 <mem_free+0xf8>)
 8008426:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800842a:	4924      	ldr	r1, [pc, #144]	; (80084bc <mem_free+0x114>)
 800842c:	481e      	ldr	r0, [pc, #120]	; (80084a8 <mem_free+0x100>)
 800842e:	f00f fdb1 	bl	8017f94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008432:	4821      	ldr	r0, [pc, #132]	; (80084b8 <mem_free+0x110>)
 8008434:	f00c ff37 	bl	80152a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008438:	f00c ff68 	bl	801530c <sys_arch_protect>
 800843c:	6178      	str	r0, [r7, #20]
 800843e:	6978      	ldr	r0, [r7, #20]
 8008440:	f00c ff72 	bl	8015328 <sys_arch_unprotect>
    return;
 8008444:	e029      	b.n	800849a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8008446:	69f8      	ldr	r0, [r7, #28]
 8008448:	f7ff ff72 	bl	8008330 <mem_link_valid>
 800844c:	4603      	mov	r3, r0
 800844e:	2b00      	cmp	r3, #0
 8008450:	d110      	bne.n	8008474 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8008452:	4b13      	ldr	r3, [pc, #76]	; (80084a0 <mem_free+0xf8>)
 8008454:	f240 2295 	movw	r2, #661	; 0x295
 8008458:	4919      	ldr	r1, [pc, #100]	; (80084c0 <mem_free+0x118>)
 800845a:	4813      	ldr	r0, [pc, #76]	; (80084a8 <mem_free+0x100>)
 800845c:	f00f fd9a 	bl	8017f94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8008460:	4815      	ldr	r0, [pc, #84]	; (80084b8 <mem_free+0x110>)
 8008462:	f00c ff20 	bl	80152a6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008466:	f00c ff51 	bl	801530c <sys_arch_protect>
 800846a:	61b8      	str	r0, [r7, #24]
 800846c:	69b8      	ldr	r0, [r7, #24]
 800846e:	f00c ff5b 	bl	8015328 <sys_arch_unprotect>
    return;
 8008472:	e012      	b.n	800849a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	2200      	movs	r2, #0
 8008478:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800847a:	4b12      	ldr	r3, [pc, #72]	; (80084c4 <mem_free+0x11c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	429a      	cmp	r2, r3
 8008482:	d202      	bcs.n	800848a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8008484:	4a0f      	ldr	r2, [pc, #60]	; (80084c4 <mem_free+0x11c>)
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800848a:	69f8      	ldr	r0, [r7, #28]
 800848c:	f7ff fe5c 	bl	8008148 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8008490:	4809      	ldr	r0, [pc, #36]	; (80084b8 <mem_free+0x110>)
 8008492:	f00c ff08 	bl	80152a6 <sys_mutex_unlock>
 8008496:	e000      	b.n	800849a <mem_free+0xf2>
    return;
 8008498:	bf00      	nop
}
 800849a:	3720      	adds	r7, #32
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}
 80084a0:	08019a24 	.word	0x08019a24
 80084a4:	08019b14 	.word	0x08019b14
 80084a8:	08019a6c 	.word	0x08019a6c
 80084ac:	20008364 	.word	0x20008364
 80084b0:	20008368 	.word	0x20008368
 80084b4:	08019b38 	.word	0x08019b38
 80084b8:	2000836c 	.word	0x2000836c
 80084bc:	08019b54 	.word	0x08019b54
 80084c0:	08019b7c 	.word	0x08019b7c
 80084c4:	20008370 	.word	0x20008370

080084c8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b088      	sub	sp, #32
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80084d4:	887b      	ldrh	r3, [r7, #2]
 80084d6:	3303      	adds	r3, #3
 80084d8:	b29b      	uxth	r3, r3
 80084da:	f023 0303 	bic.w	r3, r3, #3
 80084de:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80084e0:	8bfb      	ldrh	r3, [r7, #30]
 80084e2:	2b0b      	cmp	r3, #11
 80084e4:	d801      	bhi.n	80084ea <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80084e6:	230c      	movs	r3, #12
 80084e8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80084ea:	8bfb      	ldrh	r3, [r7, #30]
 80084ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80084f0:	d803      	bhi.n	80084fa <mem_trim+0x32>
 80084f2:	8bfa      	ldrh	r2, [r7, #30]
 80084f4:	887b      	ldrh	r3, [r7, #2]
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d201      	bcs.n	80084fe <mem_trim+0x36>
    return NULL;
 80084fa:	2300      	movs	r3, #0
 80084fc:	e0d8      	b.n	80086b0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80084fe:	4b6e      	ldr	r3, [pc, #440]	; (80086b8 <mem_trim+0x1f0>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	687a      	ldr	r2, [r7, #4]
 8008504:	429a      	cmp	r2, r3
 8008506:	d304      	bcc.n	8008512 <mem_trim+0x4a>
 8008508:	4b6c      	ldr	r3, [pc, #432]	; (80086bc <mem_trim+0x1f4>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	687a      	ldr	r2, [r7, #4]
 800850e:	429a      	cmp	r2, r3
 8008510:	d306      	bcc.n	8008520 <mem_trim+0x58>
 8008512:	4b6b      	ldr	r3, [pc, #428]	; (80086c0 <mem_trim+0x1f8>)
 8008514:	f240 22d2 	movw	r2, #722	; 0x2d2
 8008518:	496a      	ldr	r1, [pc, #424]	; (80086c4 <mem_trim+0x1fc>)
 800851a:	486b      	ldr	r0, [pc, #428]	; (80086c8 <mem_trim+0x200>)
 800851c:	f00f fd3a 	bl	8017f94 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8008520:	4b65      	ldr	r3, [pc, #404]	; (80086b8 <mem_trim+0x1f0>)
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	429a      	cmp	r2, r3
 8008528:	d304      	bcc.n	8008534 <mem_trim+0x6c>
 800852a:	4b64      	ldr	r3, [pc, #400]	; (80086bc <mem_trim+0x1f4>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d307      	bcc.n	8008544 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8008534:	f00c feea 	bl	801530c <sys_arch_protect>
 8008538:	60b8      	str	r0, [r7, #8]
 800853a:	68b8      	ldr	r0, [r7, #8]
 800853c:	f00c fef4 	bl	8015328 <sys_arch_unprotect>
    return rmem;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	e0b5      	b.n	80086b0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	3b08      	subs	r3, #8
 8008548:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800854a:	69b8      	ldr	r0, [r7, #24]
 800854c:	f7ff fdea 	bl	8008124 <mem_to_ptr>
 8008550:	4603      	mov	r3, r0
 8008552:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	881a      	ldrh	r2, [r3, #0]
 8008558:	8afb      	ldrh	r3, [r7, #22]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	b29b      	uxth	r3, r3
 800855e:	3b08      	subs	r3, #8
 8008560:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8008562:	8bfa      	ldrh	r2, [r7, #30]
 8008564:	8abb      	ldrh	r3, [r7, #20]
 8008566:	429a      	cmp	r2, r3
 8008568:	d906      	bls.n	8008578 <mem_trim+0xb0>
 800856a:	4b55      	ldr	r3, [pc, #340]	; (80086c0 <mem_trim+0x1f8>)
 800856c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8008570:	4956      	ldr	r1, [pc, #344]	; (80086cc <mem_trim+0x204>)
 8008572:	4855      	ldr	r0, [pc, #340]	; (80086c8 <mem_trim+0x200>)
 8008574:	f00f fd0e 	bl	8017f94 <iprintf>
  if (newsize > size) {
 8008578:	8bfa      	ldrh	r2, [r7, #30]
 800857a:	8abb      	ldrh	r3, [r7, #20]
 800857c:	429a      	cmp	r2, r3
 800857e:	d901      	bls.n	8008584 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8008580:	2300      	movs	r3, #0
 8008582:	e095      	b.n	80086b0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8008584:	8bfa      	ldrh	r2, [r7, #30]
 8008586:	8abb      	ldrh	r3, [r7, #20]
 8008588:	429a      	cmp	r2, r3
 800858a:	d101      	bne.n	8008590 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	e08f      	b.n	80086b0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8008590:	484f      	ldr	r0, [pc, #316]	; (80086d0 <mem_trim+0x208>)
 8008592:	f00c fe79 	bl	8015288 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8008596:	69bb      	ldr	r3, [r7, #24]
 8008598:	881b      	ldrh	r3, [r3, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff fdb0 	bl	8008100 <ptr_to_mem>
 80085a0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	791b      	ldrb	r3, [r3, #4]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d13f      	bne.n	800862a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	881b      	ldrh	r3, [r3, #0]
 80085ae:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80085b2:	d106      	bne.n	80085c2 <mem_trim+0xfa>
 80085b4:	4b42      	ldr	r3, [pc, #264]	; (80086c0 <mem_trim+0x1f8>)
 80085b6:	f240 22f5 	movw	r2, #757	; 0x2f5
 80085ba:	4946      	ldr	r1, [pc, #280]	; (80086d4 <mem_trim+0x20c>)
 80085bc:	4842      	ldr	r0, [pc, #264]	; (80086c8 <mem_trim+0x200>)
 80085be:	f00f fce9 	bl	8017f94 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80085c8:	8afa      	ldrh	r2, [r7, #22]
 80085ca:	8bfb      	ldrh	r3, [r7, #30]
 80085cc:	4413      	add	r3, r2
 80085ce:	b29b      	uxth	r3, r3
 80085d0:	3308      	adds	r3, #8
 80085d2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80085d4:	4b40      	ldr	r3, [pc, #256]	; (80086d8 <mem_trim+0x210>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d106      	bne.n	80085ec <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80085de:	89fb      	ldrh	r3, [r7, #14]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7ff fd8d 	bl	8008100 <ptr_to_mem>
 80085e6:	4602      	mov	r2, r0
 80085e8:	4b3b      	ldr	r3, [pc, #236]	; (80086d8 <mem_trim+0x210>)
 80085ea:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80085ec:	89fb      	ldrh	r3, [r7, #14]
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff fd86 	bl	8008100 <ptr_to_mem>
 80085f4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80085f6:	693b      	ldr	r3, [r7, #16]
 80085f8:	2200      	movs	r2, #0
 80085fa:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	89ba      	ldrh	r2, [r7, #12]
 8008600:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	8afa      	ldrh	r2, [r7, #22]
 8008606:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8008608:	69bb      	ldr	r3, [r7, #24]
 800860a:	89fa      	ldrh	r2, [r7, #14]
 800860c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	881b      	ldrh	r3, [r3, #0]
 8008612:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008616:	d047      	beq.n	80086a8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	881b      	ldrh	r3, [r3, #0]
 800861c:	4618      	mov	r0, r3
 800861e:	f7ff fd6f 	bl	8008100 <ptr_to_mem>
 8008622:	4602      	mov	r2, r0
 8008624:	89fb      	ldrh	r3, [r7, #14]
 8008626:	8053      	strh	r3, [r2, #2]
 8008628:	e03e      	b.n	80086a8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800862a:	8bfb      	ldrh	r3, [r7, #30]
 800862c:	f103 0214 	add.w	r2, r3, #20
 8008630:	8abb      	ldrh	r3, [r7, #20]
 8008632:	429a      	cmp	r2, r3
 8008634:	d838      	bhi.n	80086a8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8008636:	8afa      	ldrh	r2, [r7, #22]
 8008638:	8bfb      	ldrh	r3, [r7, #30]
 800863a:	4413      	add	r3, r2
 800863c:	b29b      	uxth	r3, r3
 800863e:	3308      	adds	r3, #8
 8008640:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8008642:	69bb      	ldr	r3, [r7, #24]
 8008644:	881b      	ldrh	r3, [r3, #0]
 8008646:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800864a:	d106      	bne.n	800865a <mem_trim+0x192>
 800864c:	4b1c      	ldr	r3, [pc, #112]	; (80086c0 <mem_trim+0x1f8>)
 800864e:	f240 3216 	movw	r2, #790	; 0x316
 8008652:	4920      	ldr	r1, [pc, #128]	; (80086d4 <mem_trim+0x20c>)
 8008654:	481c      	ldr	r0, [pc, #112]	; (80086c8 <mem_trim+0x200>)
 8008656:	f00f fc9d 	bl	8017f94 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800865a:	89fb      	ldrh	r3, [r7, #14]
 800865c:	4618      	mov	r0, r3
 800865e:	f7ff fd4f 	bl	8008100 <ptr_to_mem>
 8008662:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8008664:	4b1c      	ldr	r3, [pc, #112]	; (80086d8 <mem_trim+0x210>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	693a      	ldr	r2, [r7, #16]
 800866a:	429a      	cmp	r2, r3
 800866c:	d202      	bcs.n	8008674 <mem_trim+0x1ac>
      lfree = mem2;
 800866e:	4a1a      	ldr	r2, [pc, #104]	; (80086d8 <mem_trim+0x210>)
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2200      	movs	r2, #0
 8008678:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	881a      	ldrh	r2, [r3, #0]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	8afa      	ldrh	r2, [r7, #22]
 8008686:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8008688:	69bb      	ldr	r3, [r7, #24]
 800868a:	89fa      	ldrh	r2, [r7, #14]
 800868c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	881b      	ldrh	r3, [r3, #0]
 8008692:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008696:	d007      	beq.n	80086a8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8008698:	693b      	ldr	r3, [r7, #16]
 800869a:	881b      	ldrh	r3, [r3, #0]
 800869c:	4618      	mov	r0, r3
 800869e:	f7ff fd2f 	bl	8008100 <ptr_to_mem>
 80086a2:	4602      	mov	r2, r0
 80086a4:	89fb      	ldrh	r3, [r7, #14]
 80086a6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80086a8:	4809      	ldr	r0, [pc, #36]	; (80086d0 <mem_trim+0x208>)
 80086aa:	f00c fdfc 	bl	80152a6 <sys_mutex_unlock>
  return rmem;
 80086ae:	687b      	ldr	r3, [r7, #4]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20008364 	.word	0x20008364
 80086bc:	20008368 	.word	0x20008368
 80086c0:	08019a24 	.word	0x08019a24
 80086c4:	08019bb0 	.word	0x08019bb0
 80086c8:	08019a6c 	.word	0x08019a6c
 80086cc:	08019bc8 	.word	0x08019bc8
 80086d0:	2000836c 	.word	0x2000836c
 80086d4:	08019be8 	.word	0x08019be8
 80086d8:	20008370 	.word	0x20008370

080086dc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b088      	sub	sp, #32
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	4603      	mov	r3, r0
 80086e4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80086e6:	88fb      	ldrh	r3, [r7, #6]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <mem_malloc+0x14>
    return NULL;
 80086ec:	2300      	movs	r3, #0
 80086ee:	e0e2      	b.n	80088b6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80086f0:	88fb      	ldrh	r3, [r7, #6]
 80086f2:	3303      	adds	r3, #3
 80086f4:	b29b      	uxth	r3, r3
 80086f6:	f023 0303 	bic.w	r3, r3, #3
 80086fa:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80086fc:	8bbb      	ldrh	r3, [r7, #28]
 80086fe:	2b0b      	cmp	r3, #11
 8008700:	d801      	bhi.n	8008706 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8008702:	230c      	movs	r3, #12
 8008704:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8008706:	8bbb      	ldrh	r3, [r7, #28]
 8008708:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800870c:	d803      	bhi.n	8008716 <mem_malloc+0x3a>
 800870e:	8bba      	ldrh	r2, [r7, #28]
 8008710:	88fb      	ldrh	r3, [r7, #6]
 8008712:	429a      	cmp	r2, r3
 8008714:	d201      	bcs.n	800871a <mem_malloc+0x3e>
    return NULL;
 8008716:	2300      	movs	r3, #0
 8008718:	e0cd      	b.n	80088b6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800871a:	4869      	ldr	r0, [pc, #420]	; (80088c0 <mem_malloc+0x1e4>)
 800871c:	f00c fdb4 	bl	8015288 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8008720:	4b68      	ldr	r3, [pc, #416]	; (80088c4 <mem_malloc+0x1e8>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	4618      	mov	r0, r3
 8008726:	f7ff fcfd 	bl	8008124 <mem_to_ptr>
 800872a:	4603      	mov	r3, r0
 800872c:	83fb      	strh	r3, [r7, #30]
 800872e:	e0b7      	b.n	80088a0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8008730:	8bfb      	ldrh	r3, [r7, #30]
 8008732:	4618      	mov	r0, r3
 8008734:	f7ff fce4 	bl	8008100 <ptr_to_mem>
 8008738:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	791b      	ldrb	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	f040 80a7 	bne.w	8008892 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	881b      	ldrh	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	8bfb      	ldrh	r3, [r7, #30]
 800874c:	1ad3      	subs	r3, r2, r3
 800874e:	f1a3 0208 	sub.w	r2, r3, #8
 8008752:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8008754:	429a      	cmp	r2, r3
 8008756:	f0c0 809c 	bcc.w	8008892 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	881b      	ldrh	r3, [r3, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	8bfb      	ldrh	r3, [r7, #30]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	f1a3 0208 	sub.w	r2, r3, #8
 8008768:	8bbb      	ldrh	r3, [r7, #28]
 800876a:	3314      	adds	r3, #20
 800876c:	429a      	cmp	r2, r3
 800876e:	d333      	bcc.n	80087d8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8008770:	8bfa      	ldrh	r2, [r7, #30]
 8008772:	8bbb      	ldrh	r3, [r7, #28]
 8008774:	4413      	add	r3, r2
 8008776:	b29b      	uxth	r3, r3
 8008778:	3308      	adds	r3, #8
 800877a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800877c:	8a7b      	ldrh	r3, [r7, #18]
 800877e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8008782:	d106      	bne.n	8008792 <mem_malloc+0xb6>
 8008784:	4b50      	ldr	r3, [pc, #320]	; (80088c8 <mem_malloc+0x1ec>)
 8008786:	f240 3287 	movw	r2, #903	; 0x387
 800878a:	4950      	ldr	r1, [pc, #320]	; (80088cc <mem_malloc+0x1f0>)
 800878c:	4850      	ldr	r0, [pc, #320]	; (80088d0 <mem_malloc+0x1f4>)
 800878e:	f00f fc01 	bl	8017f94 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8008792:	8a7b      	ldrh	r3, [r7, #18]
 8008794:	4618      	mov	r0, r3
 8008796:	f7ff fcb3 	bl	8008100 <ptr_to_mem>
 800879a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2200      	movs	r2, #0
 80087a0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80087a2:	697b      	ldr	r3, [r7, #20]
 80087a4:	881a      	ldrh	r2, [r3, #0]
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	8bfa      	ldrh	r2, [r7, #30]
 80087ae:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	8a7a      	ldrh	r2, [r7, #18]
 80087b4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	2201      	movs	r2, #1
 80087ba:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80087c4:	d00b      	beq.n	80087de <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fc98 	bl	8008100 <ptr_to_mem>
 80087d0:	4602      	mov	r2, r0
 80087d2:	8a7b      	ldrh	r3, [r7, #18]
 80087d4:	8053      	strh	r3, [r2, #2]
 80087d6:	e002      	b.n	80087de <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2201      	movs	r2, #1
 80087dc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80087de:	4b39      	ldr	r3, [pc, #228]	; (80088c4 <mem_malloc+0x1e8>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	697a      	ldr	r2, [r7, #20]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d127      	bne.n	8008838 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80087e8:	4b36      	ldr	r3, [pc, #216]	; (80088c4 <mem_malloc+0x1e8>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80087ee:	e005      	b.n	80087fc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	881b      	ldrh	r3, [r3, #0]
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7ff fc83 	bl	8008100 <ptr_to_mem>
 80087fa:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	791b      	ldrb	r3, [r3, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d004      	beq.n	800880e <mem_malloc+0x132>
 8008804:	4b33      	ldr	r3, [pc, #204]	; (80088d4 <mem_malloc+0x1f8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	69ba      	ldr	r2, [r7, #24]
 800880a:	429a      	cmp	r2, r3
 800880c:	d1f0      	bne.n	80087f0 <mem_malloc+0x114>
          }
          lfree = cur;
 800880e:	4a2d      	ldr	r2, [pc, #180]	; (80088c4 <mem_malloc+0x1e8>)
 8008810:	69bb      	ldr	r3, [r7, #24]
 8008812:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8008814:	4b2b      	ldr	r3, [pc, #172]	; (80088c4 <mem_malloc+0x1e8>)
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <mem_malloc+0x1f8>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	429a      	cmp	r2, r3
 800881e:	d00b      	beq.n	8008838 <mem_malloc+0x15c>
 8008820:	4b28      	ldr	r3, [pc, #160]	; (80088c4 <mem_malloc+0x1e8>)
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d006      	beq.n	8008838 <mem_malloc+0x15c>
 800882a:	4b27      	ldr	r3, [pc, #156]	; (80088c8 <mem_malloc+0x1ec>)
 800882c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8008830:	4929      	ldr	r1, [pc, #164]	; (80088d8 <mem_malloc+0x1fc>)
 8008832:	4827      	ldr	r0, [pc, #156]	; (80088d0 <mem_malloc+0x1f4>)
 8008834:	f00f fbae 	bl	8017f94 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8008838:	4821      	ldr	r0, [pc, #132]	; (80088c0 <mem_malloc+0x1e4>)
 800883a:	f00c fd34 	bl	80152a6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800883e:	8bba      	ldrh	r2, [r7, #28]
 8008840:	697b      	ldr	r3, [r7, #20]
 8008842:	4413      	add	r3, r2
 8008844:	3308      	adds	r3, #8
 8008846:	4a23      	ldr	r2, [pc, #140]	; (80088d4 <mem_malloc+0x1f8>)
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	4293      	cmp	r3, r2
 800884c:	d906      	bls.n	800885c <mem_malloc+0x180>
 800884e:	4b1e      	ldr	r3, [pc, #120]	; (80088c8 <mem_malloc+0x1ec>)
 8008850:	f240 32ba 	movw	r2, #954	; 0x3ba
 8008854:	4921      	ldr	r1, [pc, #132]	; (80088dc <mem_malloc+0x200>)
 8008856:	481e      	ldr	r0, [pc, #120]	; (80088d0 <mem_malloc+0x1f4>)
 8008858:	f00f fb9c 	bl	8017f94 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	f003 0303 	and.w	r3, r3, #3
 8008862:	2b00      	cmp	r3, #0
 8008864:	d006      	beq.n	8008874 <mem_malloc+0x198>
 8008866:	4b18      	ldr	r3, [pc, #96]	; (80088c8 <mem_malloc+0x1ec>)
 8008868:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800886c:	491c      	ldr	r1, [pc, #112]	; (80088e0 <mem_malloc+0x204>)
 800886e:	4818      	ldr	r0, [pc, #96]	; (80088d0 <mem_malloc+0x1f4>)
 8008870:	f00f fb90 	bl	8017f94 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	f003 0303 	and.w	r3, r3, #3
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <mem_malloc+0x1b0>
 800887e:	4b12      	ldr	r3, [pc, #72]	; (80088c8 <mem_malloc+0x1ec>)
 8008880:	f240 32be 	movw	r2, #958	; 0x3be
 8008884:	4917      	ldr	r1, [pc, #92]	; (80088e4 <mem_malloc+0x208>)
 8008886:	4812      	ldr	r0, [pc, #72]	; (80088d0 <mem_malloc+0x1f4>)
 8008888:	f00f fb84 	bl	8017f94 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	3308      	adds	r3, #8
 8008890:	e011      	b.n	80088b6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8008892:	8bfb      	ldrh	r3, [r7, #30]
 8008894:	4618      	mov	r0, r3
 8008896:	f7ff fc33 	bl	8008100 <ptr_to_mem>
 800889a:	4603      	mov	r3, r0
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80088a0:	8bfa      	ldrh	r2, [r7, #30]
 80088a2:	8bbb      	ldrh	r3, [r7, #28]
 80088a4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80088a8:	429a      	cmp	r2, r3
 80088aa:	f4ff af41 	bcc.w	8008730 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80088ae:	4804      	ldr	r0, [pc, #16]	; (80088c0 <mem_malloc+0x1e4>)
 80088b0:	f00c fcf9 	bl	80152a6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80088b4:	2300      	movs	r3, #0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3720      	adds	r7, #32
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	2000836c 	.word	0x2000836c
 80088c4:	20008370 	.word	0x20008370
 80088c8:	08019a24 	.word	0x08019a24
 80088cc:	08019be8 	.word	0x08019be8
 80088d0:	08019a6c 	.word	0x08019a6c
 80088d4:	20008368 	.word	0x20008368
 80088d8:	08019bfc 	.word	0x08019bfc
 80088dc:	08019c18 	.word	0x08019c18
 80088e0:	08019c48 	.word	0x08019c48
 80088e4:	08019c78 	.word	0x08019c78

080088e8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	689b      	ldr	r3, [r3, #8]
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	3303      	adds	r3, #3
 80088fe:	f023 0303 	bic.w	r3, r3, #3
 8008902:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8008904:	2300      	movs	r3, #0
 8008906:	60fb      	str	r3, [r7, #12]
 8008908:	e011      	b.n	800892e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	681a      	ldr	r2, [r3, #0]
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	68ba      	ldr	r2, [r7, #8]
 800891a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	461a      	mov	r2, r3
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	4413      	add	r3, r2
 8008926:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	3301      	adds	r3, #1
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	885b      	ldrh	r3, [r3, #2]
 8008932:	461a      	mov	r2, r3
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4293      	cmp	r3, r2
 8008938:	dbe7      	blt.n	800890a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800893a:	bf00      	nop
 800893c:	3714      	adds	r7, #20
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800894e:	2300      	movs	r3, #0
 8008950:	80fb      	strh	r3, [r7, #6]
 8008952:	e009      	b.n	8008968 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8008954:	88fb      	ldrh	r3, [r7, #6]
 8008956:	4a08      	ldr	r2, [pc, #32]	; (8008978 <memp_init+0x30>)
 8008958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800895c:	4618      	mov	r0, r3
 800895e:	f7ff ffc3 	bl	80088e8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8008962:	88fb      	ldrh	r3, [r7, #6]
 8008964:	3301      	adds	r3, #1
 8008966:	80fb      	strh	r3, [r7, #6]
 8008968:	88fb      	ldrh	r3, [r7, #6]
 800896a:	2b0c      	cmp	r3, #12
 800896c:	d9f2      	bls.n	8008954 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	0801ca84 	.word	0x0801ca84

0800897c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8008984:	f00c fcc2 	bl	801530c <sys_arch_protect>
 8008988:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	689b      	ldr	r3, [r3, #8]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d015      	beq.n	80089c4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	6812      	ldr	r2, [r2, #0]
 80089a0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	f003 0303 	and.w	r3, r3, #3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d006      	beq.n	80089ba <do_memp_malloc_pool+0x3e>
 80089ac:	4b09      	ldr	r3, [pc, #36]	; (80089d4 <do_memp_malloc_pool+0x58>)
 80089ae:	f240 1219 	movw	r2, #281	; 0x119
 80089b2:	4909      	ldr	r1, [pc, #36]	; (80089d8 <do_memp_malloc_pool+0x5c>)
 80089b4:	4809      	ldr	r0, [pc, #36]	; (80089dc <do_memp_malloc_pool+0x60>)
 80089b6:	f00f faed 	bl	8017f94 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80089ba:	68f8      	ldr	r0, [r7, #12]
 80089bc:	f00c fcb4 	bl	8015328 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	e003      	b.n	80089cc <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f00c fcaf 	bl	8015328 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80089ca:	2300      	movs	r3, #0
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3710      	adds	r7, #16
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	08019c9c 	.word	0x08019c9c
 80089d8:	08019ccc 	.word	0x08019ccc
 80089dc:	08019cf0 	.word	0x08019cf0

080089e0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b084      	sub	sp, #16
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	4603      	mov	r3, r0
 80089e8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80089ea:	79fb      	ldrb	r3, [r7, #7]
 80089ec:	2b0c      	cmp	r3, #12
 80089ee:	d908      	bls.n	8008a02 <memp_malloc+0x22>
 80089f0:	4b0a      	ldr	r3, [pc, #40]	; (8008a1c <memp_malloc+0x3c>)
 80089f2:	f240 1257 	movw	r2, #343	; 0x157
 80089f6:	490a      	ldr	r1, [pc, #40]	; (8008a20 <memp_malloc+0x40>)
 80089f8:	480a      	ldr	r0, [pc, #40]	; (8008a24 <memp_malloc+0x44>)
 80089fa:	f00f facb 	bl	8017f94 <iprintf>
 80089fe:	2300      	movs	r3, #0
 8008a00:	e008      	b.n	8008a14 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	4a08      	ldr	r2, [pc, #32]	; (8008a28 <memp_malloc+0x48>)
 8008a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7ff ffb6 	bl	800897c <do_memp_malloc_pool>
 8008a10:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8008a12:	68fb      	ldr	r3, [r7, #12]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	08019c9c 	.word	0x08019c9c
 8008a20:	08019d2c 	.word	0x08019d2c
 8008a24:	08019cf0 	.word	0x08019cf0
 8008a28:	0801ca84 	.word	0x0801ca84

08008a2c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	f003 0303 	and.w	r3, r3, #3
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d006      	beq.n	8008a4e <do_memp_free_pool+0x22>
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <do_memp_free_pool+0x4c>)
 8008a42:	f240 126d 	movw	r2, #365	; 0x16d
 8008a46:	490d      	ldr	r1, [pc, #52]	; (8008a7c <do_memp_free_pool+0x50>)
 8008a48:	480d      	ldr	r0, [pc, #52]	; (8008a80 <do_memp_free_pool+0x54>)
 8008a4a:	f00f faa3 	bl	8017f94 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8008a52:	f00c fc5b 	bl	801530c <sys_arch_protect>
 8008a56:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	689b      	ldr	r3, [r3, #8]
 8008a5c:	681a      	ldr	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	68fa      	ldr	r2, [r7, #12]
 8008a68:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8008a6a:	68b8      	ldr	r0, [r7, #8]
 8008a6c:	f00c fc5c 	bl	8015328 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8008a70:	bf00      	nop
 8008a72:	3710      	adds	r7, #16
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	08019c9c 	.word	0x08019c9c
 8008a7c:	08019d4c 	.word	0x08019d4c
 8008a80:	08019cf0 	.word	0x08019cf0

08008a84 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	2b0c      	cmp	r3, #12
 8008a94:	d907      	bls.n	8008aa6 <memp_free+0x22>
 8008a96:	4b0c      	ldr	r3, [pc, #48]	; (8008ac8 <memp_free+0x44>)
 8008a98:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8008a9c:	490b      	ldr	r1, [pc, #44]	; (8008acc <memp_free+0x48>)
 8008a9e:	480c      	ldr	r0, [pc, #48]	; (8008ad0 <memp_free+0x4c>)
 8008aa0:	f00f fa78 	bl	8017f94 <iprintf>
 8008aa4:	e00c      	b.n	8008ac0 <memp_free+0x3c>

  if (mem == NULL) {
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d008      	beq.n	8008abe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8008aac:	79fb      	ldrb	r3, [r7, #7]
 8008aae:	4a09      	ldr	r2, [pc, #36]	; (8008ad4 <memp_free+0x50>)
 8008ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	f7ff ffb8 	bl	8008a2c <do_memp_free_pool>
 8008abc:	e000      	b.n	8008ac0 <memp_free+0x3c>
    return;
 8008abe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	08019c9c 	.word	0x08019c9c
 8008acc:	08019d6c 	.word	0x08019d6c
 8008ad0:	08019cf0 	.word	0x08019cf0
 8008ad4:	0801ca84 	.word	0x0801ca84

08008ad8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8008adc:	bf00      	nop
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae4:	4770      	bx	lr
	...

08008ae8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b086      	sub	sp, #24
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	60f8      	str	r0, [r7, #12]
 8008af0:	60b9      	str	r1, [r7, #8]
 8008af2:	607a      	str	r2, [r7, #4]
 8008af4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d108      	bne.n	8008b0e <netif_add+0x26>
 8008afc:	4b5b      	ldr	r3, [pc, #364]	; (8008c6c <netif_add+0x184>)
 8008afe:	f240 1227 	movw	r2, #295	; 0x127
 8008b02:	495b      	ldr	r1, [pc, #364]	; (8008c70 <netif_add+0x188>)
 8008b04:	485b      	ldr	r0, [pc, #364]	; (8008c74 <netif_add+0x18c>)
 8008b06:	f00f fa45 	bl	8017f94 <iprintf>
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	e0a9      	b.n	8008c62 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8008b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d108      	bne.n	8008b26 <netif_add+0x3e>
 8008b14:	4b55      	ldr	r3, [pc, #340]	; (8008c6c <netif_add+0x184>)
 8008b16:	f44f 7294 	mov.w	r2, #296	; 0x128
 8008b1a:	4957      	ldr	r1, [pc, #348]	; (8008c78 <netif_add+0x190>)
 8008b1c:	4855      	ldr	r0, [pc, #340]	; (8008c74 <netif_add+0x18c>)
 8008b1e:	f00f fa39 	bl	8017f94 <iprintf>
 8008b22:	2300      	movs	r3, #0
 8008b24:	e09d      	b.n	8008c62 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d101      	bne.n	8008b30 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8008b2c:	4b53      	ldr	r3, [pc, #332]	; (8008c7c <netif_add+0x194>)
 8008b2e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8008b36:	4b51      	ldr	r3, [pc, #324]	; (8008c7c <netif_add+0x194>)
 8008b38:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d101      	bne.n	8008b44 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8008b40:	4b4e      	ldr	r3, [pc, #312]	; (8008c7c <netif_add+0x194>)
 8008b42:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2200      	movs	r2, #0
 8008b48:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2200      	movs	r2, #0
 8008b54:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	4a49      	ldr	r2, [pc, #292]	; (8008c80 <netif_add+0x198>)
 8008b5a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	3324      	adds	r3, #36	; 0x24
 8008b6e:	2204      	movs	r2, #4
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f00f fa06 	bl	8017f84 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	6a3a      	ldr	r2, [r7, #32]
 8008b82:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8008b84:	4b3f      	ldr	r3, [pc, #252]	; (8008c84 <netif_add+0x19c>)
 8008b86:	781a      	ldrb	r2, [r3, #0]
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b92:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	687a      	ldr	r2, [r7, #4]
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 f914 	bl	8008dc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8008ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ba2:	68f8      	ldr	r0, [r7, #12]
 8008ba4:	4798      	blx	r3
 8008ba6:	4603      	mov	r3, r0
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d001      	beq.n	8008bb0 <netif_add+0xc8>
    return NULL;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e058      	b.n	8008c62 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008bb6:	2bff      	cmp	r3, #255	; 0xff
 8008bb8:	d103      	bne.n	8008bc2 <netif_add+0xda>
        netif->num = 0;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008bc6:	4b30      	ldr	r3, [pc, #192]	; (8008c88 <netif_add+0x1a0>)
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	617b      	str	r3, [r7, #20]
 8008bcc:	e02b      	b.n	8008c26 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d106      	bne.n	8008be4 <netif_add+0xfc>
 8008bd6:	4b25      	ldr	r3, [pc, #148]	; (8008c6c <netif_add+0x184>)
 8008bd8:	f240 128b 	movw	r2, #395	; 0x18b
 8008bdc:	492b      	ldr	r1, [pc, #172]	; (8008c8c <netif_add+0x1a4>)
 8008bde:	4825      	ldr	r0, [pc, #148]	; (8008c74 <netif_add+0x18c>)
 8008be0:	f00f f9d8 	bl	8017f94 <iprintf>
        num_netifs++;
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	3301      	adds	r3, #1
 8008be8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2bff      	cmp	r3, #255	; 0xff
 8008bee:	dd06      	ble.n	8008bfe <netif_add+0x116>
 8008bf0:	4b1e      	ldr	r3, [pc, #120]	; (8008c6c <netif_add+0x184>)
 8008bf2:	f240 128d 	movw	r2, #397	; 0x18d
 8008bf6:	4926      	ldr	r1, [pc, #152]	; (8008c90 <netif_add+0x1a8>)
 8008bf8:	481e      	ldr	r0, [pc, #120]	; (8008c74 <netif_add+0x18c>)
 8008bfa:	f00f f9cb 	bl	8017f94 <iprintf>
        if (netif2->num == netif->num) {
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d108      	bne.n	8008c20 <netif_add+0x138>
          netif->num++;
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c14:	3301      	adds	r3, #1
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 8008c1e:	e005      	b.n	8008c2c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	617b      	str	r3, [r7, #20]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d1d0      	bne.n	8008bce <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d1be      	bne.n	8008bb0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c38:	2bfe      	cmp	r3, #254	; 0xfe
 8008c3a:	d103      	bne.n	8008c44 <netif_add+0x15c>
    netif_num = 0;
 8008c3c:	4b11      	ldr	r3, [pc, #68]	; (8008c84 <netif_add+0x19c>)
 8008c3e:	2200      	movs	r2, #0
 8008c40:	701a      	strb	r2, [r3, #0]
 8008c42:	e006      	b.n	8008c52 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	b2da      	uxtb	r2, r3
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <netif_add+0x19c>)
 8008c50:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8008c52:	4b0d      	ldr	r3, [pc, #52]	; (8008c88 <netif_add+0x1a0>)
 8008c54:	681a      	ldr	r2, [r3, #0]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8008c5a:	4a0b      	ldr	r2, [pc, #44]	; (8008c88 <netif_add+0x1a0>)
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8008c60:	68fb      	ldr	r3, [r7, #12]
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3718      	adds	r7, #24
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	08019d88 	.word	0x08019d88
 8008c70:	08019e1c 	.word	0x08019e1c
 8008c74:	08019dd8 	.word	0x08019dd8
 8008c78:	08019e38 	.word	0x08019e38
 8008c7c:	0801cb08 	.word	0x0801cb08
 8008c80:	080090ab 	.word	0x080090ab
 8008c84:	200083a8 	.word	0x200083a8
 8008c88:	2000c4cc 	.word	0x2000c4cc
 8008c8c:	08019e5c 	.word	0x08019e5c
 8008c90:	08019e70 	.word	0x08019e70

08008c94 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8008c9e:	6839      	ldr	r1, [r7, #0]
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f002 fe07 	bl	800b8b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f007 fe8b 	bl	80109c4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
	...

08008cb8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d106      	bne.n	8008cd8 <netif_do_set_ipaddr+0x20>
 8008cca:	4b1d      	ldr	r3, [pc, #116]	; (8008d40 <netif_do_set_ipaddr+0x88>)
 8008ccc:	f240 12cb 	movw	r2, #459	; 0x1cb
 8008cd0:	491c      	ldr	r1, [pc, #112]	; (8008d44 <netif_do_set_ipaddr+0x8c>)
 8008cd2:	481d      	ldr	r0, [pc, #116]	; (8008d48 <netif_do_set_ipaddr+0x90>)
 8008cd4:	f00f f95e 	bl	8017f94 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d106      	bne.n	8008cec <netif_do_set_ipaddr+0x34>
 8008cde:	4b18      	ldr	r3, [pc, #96]	; (8008d40 <netif_do_set_ipaddr+0x88>)
 8008ce0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8008ce4:	4917      	ldr	r1, [pc, #92]	; (8008d44 <netif_do_set_ipaddr+0x8c>)
 8008ce6:	4818      	ldr	r0, [pc, #96]	; (8008d48 <netif_do_set_ipaddr+0x90>)
 8008ce8:	f00f f954 	bl	8017f94 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	681a      	ldr	r2, [r3, #0]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d01c      	beq.n	8008d34 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	3304      	adds	r3, #4
 8008d04:	681a      	ldr	r2, [r3, #0]
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8008d0a:	f107 0314 	add.w	r3, r7, #20
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f7ff ffbf 	bl	8008c94 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <netif_do_set_ipaddr+0x6a>
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	e000      	b.n	8008d24 <netif_do_set_ipaddr+0x6c>
 8008d22:	2300      	movs	r3, #0
 8008d24:	68fa      	ldr	r2, [r7, #12]
 8008d26:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8008d28:	2101      	movs	r1, #1
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f000 f8d2 	bl	8008ed4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8008d30:	2301      	movs	r3, #1
 8008d32:	e000      	b.n	8008d36 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8008d34:	2300      	movs	r3, #0
}
 8008d36:	4618      	mov	r0, r3
 8008d38:	3718      	adds	r7, #24
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	08019d88 	.word	0x08019d88
 8008d44:	08019ea0 	.word	0x08019ea0
 8008d48:	08019dd8 	.word	0x08019dd8

08008d4c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	681a      	ldr	r2, [r3, #0]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	429a      	cmp	r2, r3
 8008d64:	d00a      	beq.n	8008d7c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <netif_do_set_netmask+0x26>
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	e000      	b.n	8008d74 <netif_do_set_netmask+0x28>
 8008d72:	2300      	movs	r3, #0
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8008d78:	2301      	movs	r3, #1
 8008d7a:	e000      	b.n	8008d7e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8008d7c:	2300      	movs	r3, #0
}
 8008d7e:	4618      	mov	r0, r3
 8008d80:	3714      	adds	r7, #20
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	60f8      	str	r0, [r7, #12]
 8008d92:	60b9      	str	r1, [r7, #8]
 8008d94:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	330c      	adds	r3, #12
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d00a      	beq.n	8008dba <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d002      	beq.n	8008db0 <netif_do_set_gw+0x26>
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	e000      	b.n	8008db2 <netif_do_set_gw+0x28>
 8008db0:	2300      	movs	r3, #0
 8008db2:	68fa      	ldr	r2, [r7, #12]
 8008db4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8008dba:	2300      	movs	r3, #0
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	3714      	adds	r7, #20
 8008dc0:	46bd      	mov	sp, r7
 8008dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc6:	4770      	bx	lr

08008dc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d101      	bne.n	8008de8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8008de4:	4b1c      	ldr	r3, [pc, #112]	; (8008e58 <netif_set_addr+0x90>)
 8008de6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d101      	bne.n	8008df2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8008dee:	4b1a      	ldr	r3, [pc, #104]	; (8008e58 <netif_set_addr+0x90>)
 8008df0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8008df8:	4b17      	ldr	r3, [pc, #92]	; (8008e58 <netif_set_addr+0x90>)
 8008dfa:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d003      	beq.n	8008e0a <netif_set_addr+0x42>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d101      	bne.n	8008e0e <netif_set_addr+0x46>
 8008e0a:	2301      	movs	r3, #1
 8008e0c:	e000      	b.n	8008e10 <netif_set_addr+0x48>
 8008e0e:	2300      	movs	r3, #0
 8008e10:	617b      	str	r3, [r7, #20]
  if (remove) {
 8008e12:	697b      	ldr	r3, [r7, #20]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d006      	beq.n	8008e26 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008e18:	f107 0310 	add.w	r3, r7, #16
 8008e1c:	461a      	mov	r2, r3
 8008e1e:	68b9      	ldr	r1, [r7, #8]
 8008e20:	68f8      	ldr	r0, [r7, #12]
 8008e22:	f7ff ff49 	bl	8008cb8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8008e26:	69fa      	ldr	r2, [r7, #28]
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff ff8e 	bl	8008d4c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8008e30:	69ba      	ldr	r2, [r7, #24]
 8008e32:	6839      	ldr	r1, [r7, #0]
 8008e34:	68f8      	ldr	r0, [r7, #12]
 8008e36:	f7ff ffa8 	bl	8008d8a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d106      	bne.n	8008e4e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8008e40:	f107 0310 	add.w	r3, r7, #16
 8008e44:	461a      	mov	r2, r3
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f7ff ff35 	bl	8008cb8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8008e4e:	bf00      	nop
 8008e50:	3720      	adds	r7, #32
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop
 8008e58:	0801cb08 	.word	0x0801cb08

08008e5c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8008e64:	4a04      	ldr	r2, [pc, #16]	; (8008e78 <netif_set_default+0x1c>)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8008e6a:	bf00      	nop
 8008e6c:	370c      	adds	r7, #12
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr
 8008e76:	bf00      	nop
 8008e78:	2000c4d0 	.word	0x2000c4d0

08008e7c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d107      	bne.n	8008e9a <netif_set_up+0x1e>
 8008e8a:	4b0f      	ldr	r3, [pc, #60]	; (8008ec8 <netif_set_up+0x4c>)
 8008e8c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8008e90:	490e      	ldr	r1, [pc, #56]	; (8008ecc <netif_set_up+0x50>)
 8008e92:	480f      	ldr	r0, [pc, #60]	; (8008ed0 <netif_set_up+0x54>)
 8008e94:	f00f f87e 	bl	8017f94 <iprintf>
 8008e98:	e013      	b.n	8008ec2 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008ea0:	f003 0301 	and.w	r3, r3, #1
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10c      	bne.n	8008ec2 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008eae:	f043 0301 	orr.w	r3, r3, #1
 8008eb2:	b2da      	uxtb	r2, r3
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008eba:	2103      	movs	r1, #3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f809 	bl	8008ed4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	08019d88 	.word	0x08019d88
 8008ecc:	08019f10 	.word	0x08019f10
 8008ed0:	08019dd8 	.word	0x08019dd8

08008ed4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b082      	sub	sp, #8
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d106      	bne.n	8008ef4 <netif_issue_reports+0x20>
 8008ee6:	4b18      	ldr	r3, [pc, #96]	; (8008f48 <netif_issue_reports+0x74>)
 8008ee8:	f240 326d 	movw	r2, #877	; 0x36d
 8008eec:	4917      	ldr	r1, [pc, #92]	; (8008f4c <netif_issue_reports+0x78>)
 8008eee:	4818      	ldr	r0, [pc, #96]	; (8008f50 <netif_issue_reports+0x7c>)
 8008ef0:	f00f f850 	bl	8017f94 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008efa:	f003 0304 	and.w	r3, r3, #4
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d01e      	beq.n	8008f40 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f08:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d017      	beq.n	8008f40 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	f003 0301 	and.w	r3, r3, #1
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d013      	beq.n	8008f42 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d00e      	beq.n	8008f42 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f2a:	f003 0308 	and.w	r3, r3, #8
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d007      	beq.n	8008f42 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	3304      	adds	r3, #4
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f00a fb53 	bl	80135e4 <etharp_request>
 8008f3e:	e000      	b.n	8008f42 <netif_issue_reports+0x6e>
    return;
 8008f40:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	08019d88 	.word	0x08019d88
 8008f4c:	08019f2c 	.word	0x08019f2c
 8008f50:	08019dd8 	.word	0x08019dd8

08008f54 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b082      	sub	sp, #8
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d107      	bne.n	8008f72 <netif_set_down+0x1e>
 8008f62:	4b12      	ldr	r3, [pc, #72]	; (8008fac <netif_set_down+0x58>)
 8008f64:	f240 329b 	movw	r2, #923	; 0x39b
 8008f68:	4911      	ldr	r1, [pc, #68]	; (8008fb0 <netif_set_down+0x5c>)
 8008f6a:	4812      	ldr	r0, [pc, #72]	; (8008fb4 <netif_set_down+0x60>)
 8008f6c:	f00f f812 	bl	8017f94 <iprintf>
 8008f70:	e019      	b.n	8008fa6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d012      	beq.n	8008fa6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f86:	f023 0301 	bic.w	r3, r3, #1
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008f98:	f003 0308 	and.w	r3, r3, #8
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d002      	beq.n	8008fa6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f009 fed9 	bl	8012d58 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8008fa6:	3708      	adds	r7, #8
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	08019d88 	.word	0x08019d88
 8008fb0:	08019f50 	.word	0x08019f50
 8008fb4:	08019dd8 	.word	0x08019dd8

08008fb8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b082      	sub	sp, #8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d107      	bne.n	8008fd6 <netif_set_link_up+0x1e>
 8008fc6:	4b15      	ldr	r3, [pc, #84]	; (800901c <netif_set_link_up+0x64>)
 8008fc8:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8008fcc:	4914      	ldr	r1, [pc, #80]	; (8009020 <netif_set_link_up+0x68>)
 8008fce:	4815      	ldr	r0, [pc, #84]	; (8009024 <netif_set_link_up+0x6c>)
 8008fd0:	f00e ffe0 	bl	8017f94 <iprintf>
 8008fd4:	e01e      	b.n	8009014 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008fdc:	f003 0304 	and.w	r3, r3, #4
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d117      	bne.n	8009014 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008fea:	f043 0304 	orr.w	r3, r3, #4
 8008fee:	b2da      	uxtb	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f008 f90e 	bl	8011218 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8008ffc:	2103      	movs	r1, #3
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff ff68 	bl	8008ed4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	69db      	ldr	r3, [r3, #28]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <netif_set_link_up+0x5c>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	69db      	ldr	r3, [r3, #28]
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	08019d88 	.word	0x08019d88
 8009020:	08019f70 	.word	0x08019f70
 8009024:	08019dd8 	.word	0x08019dd8

08009028 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d107      	bne.n	8009046 <netif_set_link_down+0x1e>
 8009036:	4b11      	ldr	r3, [pc, #68]	; (800907c <netif_set_link_down+0x54>)
 8009038:	f240 4206 	movw	r2, #1030	; 0x406
 800903c:	4910      	ldr	r1, [pc, #64]	; (8009080 <netif_set_link_down+0x58>)
 800903e:	4811      	ldr	r0, [pc, #68]	; (8009084 <netif_set_link_down+0x5c>)
 8009040:	f00e ffa8 	bl	8017f94 <iprintf>
 8009044:	e017      	b.n	8009076 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800904c:	f003 0304 	and.w	r3, r3, #4
 8009050:	2b00      	cmp	r3, #0
 8009052:	d010      	beq.n	8009076 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800905a:	f023 0304 	bic.w	r3, r3, #4
 800905e:	b2da      	uxtb	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <netif_set_link_down+0x4e>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8009076:	3708      	adds	r7, #8
 8009078:	46bd      	mov	sp, r7
 800907a:	bd80      	pop	{r7, pc}
 800907c:	08019d88 	.word	0x08019d88
 8009080:	08019f94 	.word	0x08019f94
 8009084:	08019dd8 	.word	0x08019dd8

08009088 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8009088:	b480      	push	{r7}
 800908a:	b083      	sub	sp, #12
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
 8009090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d002      	beq.n	800909e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	61da      	str	r2, [r3, #28]
  }
}
 800909e:	bf00      	nop
 80090a0:	370c      	adds	r7, #12
 80090a2:	46bd      	mov	sp, r7
 80090a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a8:	4770      	bx	lr

080090aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80090aa:	b480      	push	{r7}
 80090ac:	b085      	sub	sp, #20
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	60f8      	str	r0, [r7, #12]
 80090b2:	60b9      	str	r1, [r7, #8]
 80090b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80090b6:	f06f 030b 	mvn.w	r3, #11
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr
	...

080090c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80090c8:	b480      	push	{r7}
 80090ca:	b085      	sub	sp, #20
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	4603      	mov	r3, r0
 80090d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80090d2:	79fb      	ldrb	r3, [r7, #7]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d013      	beq.n	8009100 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80090d8:	4b0d      	ldr	r3, [pc, #52]	; (8009110 <netif_get_by_index+0x48>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	60fb      	str	r3, [r7, #12]
 80090de:	e00c      	b.n	80090fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80090e6:	3301      	adds	r3, #1
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	79fa      	ldrb	r2, [r7, #7]
 80090ec:	429a      	cmp	r2, r3
 80090ee:	d101      	bne.n	80090f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	e006      	b.n	8009102 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	60fb      	str	r3, [r7, #12]
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d1ef      	bne.n	80090e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8009100:	2300      	movs	r3, #0
}
 8009102:	4618      	mov	r0, r3
 8009104:	3714      	adds	r7, #20
 8009106:	46bd      	mov	sp, r7
 8009108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	2000c4cc 	.word	0x2000c4cc

08009114 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800911a:	f00c f8f7 	bl	801530c <sys_arch_protect>
 800911e:	6038      	str	r0, [r7, #0]
 8009120:	4b0d      	ldr	r3, [pc, #52]	; (8009158 <pbuf_free_ooseq+0x44>)
 8009122:	2200      	movs	r2, #0
 8009124:	701a      	strb	r2, [r3, #0]
 8009126:	6838      	ldr	r0, [r7, #0]
 8009128:	f00c f8fe 	bl	8015328 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <pbuf_free_ooseq+0x48>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	607b      	str	r3, [r7, #4]
 8009132:	e00a      	b.n	800914a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	f002 fbf7 	bl	800b930 <tcp_free_ooseq>
      return;
 8009142:	e005      	b.n	8009150 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	607b      	str	r3, [r7, #4]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1f1      	bne.n	8009134 <pbuf_free_ooseq+0x20>
    }
  }
}
 8009150:	3708      	adds	r7, #8
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	2000c4d4 	.word	0x2000c4d4
 800915c:	2000c4dc 	.word	0x2000c4dc

08009160 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b082      	sub	sp, #8
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8009168:	f7ff ffd4 	bl	8009114 <pbuf_free_ooseq>
}
 800916c:	bf00      	nop
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800917a:	f00c f8c7 	bl	801530c <sys_arch_protect>
 800917e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8009180:	4b0f      	ldr	r3, [pc, #60]	; (80091c0 <pbuf_pool_is_empty+0x4c>)
 8009182:	781b      	ldrb	r3, [r3, #0]
 8009184:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8009186:	4b0e      	ldr	r3, [pc, #56]	; (80091c0 <pbuf_pool_is_empty+0x4c>)
 8009188:	2201      	movs	r2, #1
 800918a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f00c f8cb 	bl	8015328 <sys_arch_unprotect>

  if (!queued) {
 8009192:	78fb      	ldrb	r3, [r7, #3]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10f      	bne.n	80091b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8009198:	2100      	movs	r1, #0
 800919a:	480a      	ldr	r0, [pc, #40]	; (80091c4 <pbuf_pool_is_empty+0x50>)
 800919c:	f7fe feca 	bl	8007f34 <tcpip_try_callback>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d008      	beq.n	80091b8 <pbuf_pool_is_empty+0x44>
 80091a6:	f00c f8b1 	bl	801530c <sys_arch_protect>
 80091aa:	6078      	str	r0, [r7, #4]
 80091ac:	4b04      	ldr	r3, [pc, #16]	; (80091c0 <pbuf_pool_is_empty+0x4c>)
 80091ae:	2200      	movs	r2, #0
 80091b0:	701a      	strb	r2, [r3, #0]
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f00c f8b8 	bl	8015328 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80091b8:	bf00      	nop
 80091ba:	3708      	adds	r7, #8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	2000c4d4 	.word	0x2000c4d4
 80091c4:	08009161 	.word	0x08009161

080091c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80091c8:	b480      	push	{r7}
 80091ca:	b085      	sub	sp, #20
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	60f8      	str	r0, [r7, #12]
 80091d0:	60b9      	str	r1, [r7, #8]
 80091d2:	4611      	mov	r1, r2
 80091d4:	461a      	mov	r2, r3
 80091d6:	460b      	mov	r3, r1
 80091d8:	80fb      	strh	r3, [r7, #6]
 80091da:	4613      	mov	r3, r2
 80091dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	88fa      	ldrh	r2, [r7, #6]
 80091ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	88ba      	ldrh	r2, [r7, #4]
 80091f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80091f6:	8b3b      	ldrh	r3, [r7, #24]
 80091f8:	b2da      	uxtb	r2, r3
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	7f3a      	ldrb	r2, [r7, #28]
 8009202:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	2201      	movs	r2, #1
 8009208:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	2200      	movs	r2, #0
 800920e:	73da      	strb	r2, [r3, #15]
}
 8009210:	bf00      	nop
 8009212:	3714      	adds	r7, #20
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b08c      	sub	sp, #48	; 0x30
 8009220:	af02      	add	r7, sp, #8
 8009222:	4603      	mov	r3, r0
 8009224:	71fb      	strb	r3, [r7, #7]
 8009226:	460b      	mov	r3, r1
 8009228:	80bb      	strh	r3, [r7, #4]
 800922a:	4613      	mov	r3, r2
 800922c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800922e:	79fb      	ldrb	r3, [r7, #7]
 8009230:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8009232:	887b      	ldrh	r3, [r7, #2]
 8009234:	2b41      	cmp	r3, #65	; 0x41
 8009236:	d00b      	beq.n	8009250 <pbuf_alloc+0x34>
 8009238:	2b41      	cmp	r3, #65	; 0x41
 800923a:	dc02      	bgt.n	8009242 <pbuf_alloc+0x26>
 800923c:	2b01      	cmp	r3, #1
 800923e:	d007      	beq.n	8009250 <pbuf_alloc+0x34>
 8009240:	e0c2      	b.n	80093c8 <pbuf_alloc+0x1ac>
 8009242:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8009246:	d00b      	beq.n	8009260 <pbuf_alloc+0x44>
 8009248:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800924c:	d070      	beq.n	8009330 <pbuf_alloc+0x114>
 800924e:	e0bb      	b.n	80093c8 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8009250:	887a      	ldrh	r2, [r7, #2]
 8009252:	88bb      	ldrh	r3, [r7, #4]
 8009254:	4619      	mov	r1, r3
 8009256:	2000      	movs	r0, #0
 8009258:	f000 f8d2 	bl	8009400 <pbuf_alloc_reference>
 800925c:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800925e:	e0bd      	b.n	80093dc <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8009260:	2300      	movs	r3, #0
 8009262:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8009264:	2300      	movs	r3, #0
 8009266:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8009268:	88bb      	ldrh	r3, [r7, #4]
 800926a:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800926c:	200c      	movs	r0, #12
 800926e:	f7ff fbb7 	bl	80089e0 <memp_malloc>
 8009272:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d109      	bne.n	800928e <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 800927a:	f7ff ff7b 	bl	8009174 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800927e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009280:	2b00      	cmp	r3, #0
 8009282:	d002      	beq.n	800928a <pbuf_alloc+0x6e>
            pbuf_free(p);
 8009284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009286:	f000 faa9 	bl	80097dc <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800928a:	2300      	movs	r3, #0
 800928c:	e0a7      	b.n	80093de <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800928e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009290:	3303      	adds	r3, #3
 8009292:	b29b      	uxth	r3, r3
 8009294:	f023 0303 	bic.w	r3, r3, #3
 8009298:	b29b      	uxth	r3, r3
 800929a:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800929e:	b29b      	uxth	r3, r3
 80092a0:	8b7a      	ldrh	r2, [r7, #26]
 80092a2:	4293      	cmp	r3, r2
 80092a4:	bf28      	it	cs
 80092a6:	4613      	movcs	r3, r2
 80092a8:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80092aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092ac:	3310      	adds	r3, #16
 80092ae:	693a      	ldr	r2, [r7, #16]
 80092b0:	4413      	add	r3, r2
 80092b2:	3303      	adds	r3, #3
 80092b4:	f023 0303 	bic.w	r3, r3, #3
 80092b8:	4618      	mov	r0, r3
 80092ba:	89f9      	ldrh	r1, [r7, #14]
 80092bc:	8b7a      	ldrh	r2, [r7, #26]
 80092be:	2300      	movs	r3, #0
 80092c0:	9301      	str	r3, [sp, #4]
 80092c2:	887b      	ldrh	r3, [r7, #2]
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	460b      	mov	r3, r1
 80092c8:	4601      	mov	r1, r0
 80092ca:	6938      	ldr	r0, [r7, #16]
 80092cc:	f7ff ff7c 	bl	80091c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	f003 0303 	and.w	r3, r3, #3
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d006      	beq.n	80092ea <pbuf_alloc+0xce>
 80092dc:	4b42      	ldr	r3, [pc, #264]	; (80093e8 <pbuf_alloc+0x1cc>)
 80092de:	f240 1201 	movw	r2, #257	; 0x101
 80092e2:	4942      	ldr	r1, [pc, #264]	; (80093ec <pbuf_alloc+0x1d0>)
 80092e4:	4842      	ldr	r0, [pc, #264]	; (80093f0 <pbuf_alloc+0x1d4>)
 80092e6:	f00e fe55 	bl	8017f94 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80092ea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80092ec:	3303      	adds	r3, #3
 80092ee:	f023 0303 	bic.w	r3, r3, #3
 80092f2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80092f6:	d106      	bne.n	8009306 <pbuf_alloc+0xea>
 80092f8:	4b3b      	ldr	r3, [pc, #236]	; (80093e8 <pbuf_alloc+0x1cc>)
 80092fa:	f240 1203 	movw	r2, #259	; 0x103
 80092fe:	493d      	ldr	r1, [pc, #244]	; (80093f4 <pbuf_alloc+0x1d8>)
 8009300:	483b      	ldr	r0, [pc, #236]	; (80093f0 <pbuf_alloc+0x1d4>)
 8009302:	f00e fe47 	bl	8017f94 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	2b00      	cmp	r3, #0
 800930a:	d102      	bne.n	8009312 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	627b      	str	r3, [r7, #36]	; 0x24
 8009310:	e002      	b.n	8009318 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8009312:	69fb      	ldr	r3, [r7, #28]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8009318:	693b      	ldr	r3, [r7, #16]
 800931a:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800931c:	8b7a      	ldrh	r2, [r7, #26]
 800931e:	89fb      	ldrh	r3, [r7, #14]
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8009328:	8b7b      	ldrh	r3, [r7, #26]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d19e      	bne.n	800926c <pbuf_alloc+0x50>
      break;
 800932e:	e055      	b.n	80093dc <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8009330:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009332:	3303      	adds	r3, #3
 8009334:	b29b      	uxth	r3, r3
 8009336:	f023 0303 	bic.w	r3, r3, #3
 800933a:	b29a      	uxth	r2, r3
 800933c:	88bb      	ldrh	r3, [r7, #4]
 800933e:	3303      	adds	r3, #3
 8009340:	b29b      	uxth	r3, r3
 8009342:	f023 0303 	bic.w	r3, r3, #3
 8009346:	b29b      	uxth	r3, r3
 8009348:	4413      	add	r3, r2
 800934a:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800934c:	8b3b      	ldrh	r3, [r7, #24]
 800934e:	3310      	adds	r3, #16
 8009350:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8009352:	8b3a      	ldrh	r2, [r7, #24]
 8009354:	88bb      	ldrh	r3, [r7, #4]
 8009356:	3303      	adds	r3, #3
 8009358:	f023 0303 	bic.w	r3, r3, #3
 800935c:	429a      	cmp	r2, r3
 800935e:	d306      	bcc.n	800936e <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8009360:	8afa      	ldrh	r2, [r7, #22]
 8009362:	88bb      	ldrh	r3, [r7, #4]
 8009364:	3303      	adds	r3, #3
 8009366:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800936a:	429a      	cmp	r2, r3
 800936c:	d201      	bcs.n	8009372 <pbuf_alloc+0x156>
        return NULL;
 800936e:	2300      	movs	r3, #0
 8009370:	e035      	b.n	80093de <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8009372:	8afb      	ldrh	r3, [r7, #22]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff f9b1 	bl	80086dc <mem_malloc>
 800937a:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	d101      	bne.n	8009386 <pbuf_alloc+0x16a>
        return NULL;
 8009382:	2300      	movs	r3, #0
 8009384:	e02b      	b.n	80093de <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8009386:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009388:	3310      	adds	r3, #16
 800938a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800938c:	4413      	add	r3, r2
 800938e:	3303      	adds	r3, #3
 8009390:	f023 0303 	bic.w	r3, r3, #3
 8009394:	4618      	mov	r0, r3
 8009396:	88b9      	ldrh	r1, [r7, #4]
 8009398:	88ba      	ldrh	r2, [r7, #4]
 800939a:	2300      	movs	r3, #0
 800939c:	9301      	str	r3, [sp, #4]
 800939e:	887b      	ldrh	r3, [r7, #2]
 80093a0:	9300      	str	r3, [sp, #0]
 80093a2:	460b      	mov	r3, r1
 80093a4:	4601      	mov	r1, r0
 80093a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80093a8:	f7ff ff0e 	bl	80091c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80093ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093ae:	685b      	ldr	r3, [r3, #4]
 80093b0:	f003 0303 	and.w	r3, r3, #3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d010      	beq.n	80093da <pbuf_alloc+0x1be>
 80093b8:	4b0b      	ldr	r3, [pc, #44]	; (80093e8 <pbuf_alloc+0x1cc>)
 80093ba:	f240 1223 	movw	r2, #291	; 0x123
 80093be:	490e      	ldr	r1, [pc, #56]	; (80093f8 <pbuf_alloc+0x1dc>)
 80093c0:	480b      	ldr	r0, [pc, #44]	; (80093f0 <pbuf_alloc+0x1d4>)
 80093c2:	f00e fde7 	bl	8017f94 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80093c6:	e008      	b.n	80093da <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80093c8:	4b07      	ldr	r3, [pc, #28]	; (80093e8 <pbuf_alloc+0x1cc>)
 80093ca:	f240 1227 	movw	r2, #295	; 0x127
 80093ce:	490b      	ldr	r1, [pc, #44]	; (80093fc <pbuf_alloc+0x1e0>)
 80093d0:	4807      	ldr	r0, [pc, #28]	; (80093f0 <pbuf_alloc+0x1d4>)
 80093d2:	f00e fddf 	bl	8017f94 <iprintf>
      return NULL;
 80093d6:	2300      	movs	r3, #0
 80093d8:	e001      	b.n	80093de <pbuf_alloc+0x1c2>
      break;
 80093da:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80093dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80093de:	4618      	mov	r0, r3
 80093e0:	3728      	adds	r7, #40	; 0x28
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}
 80093e6:	bf00      	nop
 80093e8:	08019fb8 	.word	0x08019fb8
 80093ec:	08019fe8 	.word	0x08019fe8
 80093f0:	0801a018 	.word	0x0801a018
 80093f4:	0801a040 	.word	0x0801a040
 80093f8:	0801a074 	.word	0x0801a074
 80093fc:	0801a0a0 	.word	0x0801a0a0

08009400 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b086      	sub	sp, #24
 8009404:	af02      	add	r7, sp, #8
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	460b      	mov	r3, r1
 800940a:	807b      	strh	r3, [r7, #2]
 800940c:	4613      	mov	r3, r2
 800940e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8009410:	883b      	ldrh	r3, [r7, #0]
 8009412:	2b41      	cmp	r3, #65	; 0x41
 8009414:	d009      	beq.n	800942a <pbuf_alloc_reference+0x2a>
 8009416:	883b      	ldrh	r3, [r7, #0]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d006      	beq.n	800942a <pbuf_alloc_reference+0x2a>
 800941c:	4b0f      	ldr	r3, [pc, #60]	; (800945c <pbuf_alloc_reference+0x5c>)
 800941e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8009422:	490f      	ldr	r1, [pc, #60]	; (8009460 <pbuf_alloc_reference+0x60>)
 8009424:	480f      	ldr	r0, [pc, #60]	; (8009464 <pbuf_alloc_reference+0x64>)
 8009426:	f00e fdb5 	bl	8017f94 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800942a:	200b      	movs	r0, #11
 800942c:	f7ff fad8 	bl	80089e0 <memp_malloc>
 8009430:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8009438:	2300      	movs	r3, #0
 800943a:	e00b      	b.n	8009454 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800943c:	8879      	ldrh	r1, [r7, #2]
 800943e:	887a      	ldrh	r2, [r7, #2]
 8009440:	2300      	movs	r3, #0
 8009442:	9301      	str	r3, [sp, #4]
 8009444:	883b      	ldrh	r3, [r7, #0]
 8009446:	9300      	str	r3, [sp, #0]
 8009448:	460b      	mov	r3, r1
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	68f8      	ldr	r0, [r7, #12]
 800944e:	f7ff febb 	bl	80091c8 <pbuf_init_alloced_pbuf>
  return p;
 8009452:	68fb      	ldr	r3, [r7, #12]
}
 8009454:	4618      	mov	r0, r3
 8009456:	3710      	adds	r7, #16
 8009458:	46bd      	mov	sp, r7
 800945a:	bd80      	pop	{r7, pc}
 800945c:	08019fb8 	.word	0x08019fb8
 8009460:	0801a0bc 	.word	0x0801a0bc
 8009464:	0801a018 	.word	0x0801a018

08009468 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af02      	add	r7, sp, #8
 800946e:	607b      	str	r3, [r7, #4]
 8009470:	4603      	mov	r3, r0
 8009472:	73fb      	strb	r3, [r7, #15]
 8009474:	460b      	mov	r3, r1
 8009476:	81bb      	strh	r3, [r7, #12]
 8009478:	4613      	mov	r3, r2
 800947a:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800947c:	7bfb      	ldrb	r3, [r7, #15]
 800947e:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8009480:	8a7b      	ldrh	r3, [r7, #18]
 8009482:	3303      	adds	r3, #3
 8009484:	f023 0203 	bic.w	r2, r3, #3
 8009488:	89bb      	ldrh	r3, [r7, #12]
 800948a:	441a      	add	r2, r3
 800948c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800948e:	429a      	cmp	r2, r3
 8009490:	d901      	bls.n	8009496 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8009492:	2300      	movs	r3, #0
 8009494:	e018      	b.n	80094c8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8009496:	6a3b      	ldr	r3, [r7, #32]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d007      	beq.n	80094ac <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800949c:	8a7b      	ldrh	r3, [r7, #18]
 800949e:	3303      	adds	r3, #3
 80094a0:	f023 0303 	bic.w	r3, r3, #3
 80094a4:	6a3a      	ldr	r2, [r7, #32]
 80094a6:	4413      	add	r3, r2
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	e001      	b.n	80094b0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80094ac:	2300      	movs	r3, #0
 80094ae:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	89b9      	ldrh	r1, [r7, #12]
 80094b4:	89ba      	ldrh	r2, [r7, #12]
 80094b6:	2302      	movs	r3, #2
 80094b8:	9301      	str	r3, [sp, #4]
 80094ba:	897b      	ldrh	r3, [r7, #10]
 80094bc:	9300      	str	r3, [sp, #0]
 80094be:	460b      	mov	r3, r1
 80094c0:	6979      	ldr	r1, [r7, #20]
 80094c2:	f7ff fe81 	bl	80091c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80094c6:	687b      	ldr	r3, [r7, #4]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3718      	adds	r7, #24
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d106      	bne.n	80094f0 <pbuf_realloc+0x20>
 80094e2:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <pbuf_realloc+0xfc>)
 80094e4:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80094e8:	4939      	ldr	r1, [pc, #228]	; (80095d0 <pbuf_realloc+0x100>)
 80094ea:	483a      	ldr	r0, [pc, #232]	; (80095d4 <pbuf_realloc+0x104>)
 80094ec:	f00e fd52 	bl	8017f94 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	891b      	ldrh	r3, [r3, #8]
 80094f4:	887a      	ldrh	r2, [r7, #2]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d264      	bcs.n	80095c4 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	891a      	ldrh	r2, [r3, #8]
 80094fe:	887b      	ldrh	r3, [r7, #2]
 8009500:	1ad3      	subs	r3, r2, r3
 8009502:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8009504:	887b      	ldrh	r3, [r7, #2]
 8009506:	817b      	strh	r3, [r7, #10]
  q = p;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800950c:	e018      	b.n	8009540 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	895b      	ldrh	r3, [r3, #10]
 8009512:	897a      	ldrh	r2, [r7, #10]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	891a      	ldrh	r2, [r3, #8]
 800951c:	893b      	ldrh	r3, [r7, #8]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	b29a      	uxth	r2, r3
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d106      	bne.n	8009540 <pbuf_realloc+0x70>
 8009532:	4b26      	ldr	r3, [pc, #152]	; (80095cc <pbuf_realloc+0xfc>)
 8009534:	f240 12af 	movw	r2, #431	; 0x1af
 8009538:	4927      	ldr	r1, [pc, #156]	; (80095d8 <pbuf_realloc+0x108>)
 800953a:	4826      	ldr	r0, [pc, #152]	; (80095d4 <pbuf_realloc+0x104>)
 800953c:	f00e fd2a 	bl	8017f94 <iprintf>
  while (rem_len > q->len) {
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	895b      	ldrh	r3, [r3, #10]
 8009544:	897a      	ldrh	r2, [r7, #10]
 8009546:	429a      	cmp	r2, r3
 8009548:	d8e1      	bhi.n	800950e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	7b1b      	ldrb	r3, [r3, #12]
 800954e:	f003 030f 	and.w	r3, r3, #15
 8009552:	2b00      	cmp	r3, #0
 8009554:	d122      	bne.n	800959c <pbuf_realloc+0xcc>
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	895b      	ldrh	r3, [r3, #10]
 800955a:	897a      	ldrh	r2, [r7, #10]
 800955c:	429a      	cmp	r2, r3
 800955e:	d01d      	beq.n	800959c <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	7b5b      	ldrb	r3, [r3, #13]
 8009564:	f003 0302 	and.w	r3, r3, #2
 8009568:	2b00      	cmp	r3, #0
 800956a:	d117      	bne.n	800959c <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	461a      	mov	r2, r3
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	1ad3      	subs	r3, r2, r3
 8009576:	b29a      	uxth	r2, r3
 8009578:	897b      	ldrh	r3, [r7, #10]
 800957a:	4413      	add	r3, r2
 800957c:	b29b      	uxth	r3, r3
 800957e:	4619      	mov	r1, r3
 8009580:	68f8      	ldr	r0, [r7, #12]
 8009582:	f7fe ffa1 	bl	80084c8 <mem_trim>
 8009586:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d106      	bne.n	800959c <pbuf_realloc+0xcc>
 800958e:	4b0f      	ldr	r3, [pc, #60]	; (80095cc <pbuf_realloc+0xfc>)
 8009590:	f240 12bd 	movw	r2, #445	; 0x1bd
 8009594:	4911      	ldr	r1, [pc, #68]	; (80095dc <pbuf_realloc+0x10c>)
 8009596:	480f      	ldr	r0, [pc, #60]	; (80095d4 <pbuf_realloc+0x104>)
 8009598:	f00e fcfc 	bl	8017f94 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	897a      	ldrh	r2, [r7, #10]
 80095a0:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	895a      	ldrh	r2, [r3, #10]
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d004      	beq.n	80095bc <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4618      	mov	r0, r3
 80095b8:	f000 f910 	bl	80097dc <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	601a      	str	r2, [r3, #0]
 80095c2:	e000      	b.n	80095c6 <pbuf_realloc+0xf6>
    return;
 80095c4:	bf00      	nop

}
 80095c6:	3710      	adds	r7, #16
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	08019fb8 	.word	0x08019fb8
 80095d0:	0801a0d0 	.word	0x0801a0d0
 80095d4:	0801a018 	.word	0x0801a018
 80095d8:	0801a0e8 	.word	0x0801a0e8
 80095dc:	0801a100 	.word	0x0801a100

080095e0 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	60f8      	str	r0, [r7, #12]
 80095e8:	60b9      	str	r1, [r7, #8]
 80095ea:	4613      	mov	r3, r2
 80095ec:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d106      	bne.n	8009602 <pbuf_add_header_impl+0x22>
 80095f4:	4b2b      	ldr	r3, [pc, #172]	; (80096a4 <pbuf_add_header_impl+0xc4>)
 80095f6:	f240 12df 	movw	r2, #479	; 0x1df
 80095fa:	492b      	ldr	r1, [pc, #172]	; (80096a8 <pbuf_add_header_impl+0xc8>)
 80095fc:	482b      	ldr	r0, [pc, #172]	; (80096ac <pbuf_add_header_impl+0xcc>)
 80095fe:	f00e fcc9 	bl	8017f94 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d003      	beq.n	8009610 <pbuf_add_header_impl+0x30>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800960e:	d301      	bcc.n	8009614 <pbuf_add_header_impl+0x34>
    return 1;
 8009610:	2301      	movs	r3, #1
 8009612:	e043      	b.n	800969c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8009614:	68bb      	ldr	r3, [r7, #8]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d101      	bne.n	800961e <pbuf_add_header_impl+0x3e>
    return 0;
 800961a:	2300      	movs	r3, #0
 800961c:	e03e      	b.n	800969c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	891a      	ldrh	r2, [r3, #8]
 8009626:	8a7b      	ldrh	r3, [r7, #18]
 8009628:	4413      	add	r3, r2
 800962a:	b29b      	uxth	r3, r3
 800962c:	8a7a      	ldrh	r2, [r7, #18]
 800962e:	429a      	cmp	r2, r3
 8009630:	d901      	bls.n	8009636 <pbuf_add_header_impl+0x56>
    return 1;
 8009632:	2301      	movs	r3, #1
 8009634:	e032      	b.n	800969c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	7b1b      	ldrb	r3, [r3, #12]
 800963a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800963c:	8a3b      	ldrh	r3, [r7, #16]
 800963e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009642:	2b00      	cmp	r3, #0
 8009644:	d00c      	beq.n	8009660 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	425b      	negs	r3, r3
 800964e:	4413      	add	r3, r2
 8009650:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	3310      	adds	r3, #16
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	429a      	cmp	r2, r3
 800965a:	d20d      	bcs.n	8009678 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800965c:	2301      	movs	r3, #1
 800965e:	e01d      	b.n	800969c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d006      	beq.n	8009674 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	685a      	ldr	r2, [r3, #4]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	425b      	negs	r3, r3
 800966e:	4413      	add	r3, r2
 8009670:	617b      	str	r3, [r7, #20]
 8009672:	e001      	b.n	8009678 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8009674:	2301      	movs	r3, #1
 8009676:	e011      	b.n	800969c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	697a      	ldr	r2, [r7, #20]
 800967c:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	895a      	ldrh	r2, [r3, #10]
 8009682:	8a7b      	ldrh	r3, [r7, #18]
 8009684:	4413      	add	r3, r2
 8009686:	b29a      	uxth	r2, r3
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	891a      	ldrh	r2, [r3, #8]
 8009690:	8a7b      	ldrh	r3, [r7, #18]
 8009692:	4413      	add	r3, r2
 8009694:	b29a      	uxth	r2, r3
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	811a      	strh	r2, [r3, #8]


  return 0;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3718      	adds	r7, #24
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}
 80096a4:	08019fb8 	.word	0x08019fb8
 80096a8:	0801a11c 	.word	0x0801a11c
 80096ac:	0801a018 	.word	0x0801a018

080096b0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b082      	sub	sp, #8
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80096ba:	2200      	movs	r2, #0
 80096bc:	6839      	ldr	r1, [r7, #0]
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f7ff ff8e 	bl	80095e0 <pbuf_add_header_impl>
 80096c4:	4603      	mov	r3, r0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}
	...

080096d0 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d106      	bne.n	80096ee <pbuf_remove_header+0x1e>
 80096e0:	4b20      	ldr	r3, [pc, #128]	; (8009764 <pbuf_remove_header+0x94>)
 80096e2:	f240 224b 	movw	r2, #587	; 0x24b
 80096e6:	4920      	ldr	r1, [pc, #128]	; (8009768 <pbuf_remove_header+0x98>)
 80096e8:	4820      	ldr	r0, [pc, #128]	; (800976c <pbuf_remove_header+0x9c>)
 80096ea:	f00e fc53 	bl	8017f94 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <pbuf_remove_header+0x2c>
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096fa:	d301      	bcc.n	8009700 <pbuf_remove_header+0x30>
    return 1;
 80096fc:	2301      	movs	r3, #1
 80096fe:	e02c      	b.n	800975a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d101      	bne.n	800970a <pbuf_remove_header+0x3a>
    return 0;
 8009706:	2300      	movs	r3, #0
 8009708:	e027      	b.n	800975a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	895b      	ldrh	r3, [r3, #10]
 8009712:	89fa      	ldrh	r2, [r7, #14]
 8009714:	429a      	cmp	r2, r3
 8009716:	d908      	bls.n	800972a <pbuf_remove_header+0x5a>
 8009718:	4b12      	ldr	r3, [pc, #72]	; (8009764 <pbuf_remove_header+0x94>)
 800971a:	f240 2255 	movw	r2, #597	; 0x255
 800971e:	4914      	ldr	r1, [pc, #80]	; (8009770 <pbuf_remove_header+0xa0>)
 8009720:	4812      	ldr	r0, [pc, #72]	; (800976c <pbuf_remove_header+0x9c>)
 8009722:	f00e fc37 	bl	8017f94 <iprintf>
 8009726:	2301      	movs	r3, #1
 8009728:	e017      	b.n	800975a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	685b      	ldr	r3, [r3, #4]
 800972e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	685a      	ldr	r2, [r3, #4]
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	441a      	add	r2, r3
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	895a      	ldrh	r2, [r3, #10]
 8009740:	89fb      	ldrh	r3, [r7, #14]
 8009742:	1ad3      	subs	r3, r2, r3
 8009744:	b29a      	uxth	r2, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	891a      	ldrh	r2, [r3, #8]
 800974e:	89fb      	ldrh	r3, [r7, #14]
 8009750:	1ad3      	subs	r3, r2, r3
 8009752:	b29a      	uxth	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8009758:	2300      	movs	r3, #0
}
 800975a:	4618      	mov	r0, r3
 800975c:	3710      	adds	r7, #16
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	08019fb8 	.word	0x08019fb8
 8009768:	0801a11c 	.word	0x0801a11c
 800976c:	0801a018 	.word	0x0801a018
 8009770:	0801a128 	.word	0x0801a128

08009774 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	460b      	mov	r3, r1
 800977e:	807b      	strh	r3, [r7, #2]
 8009780:	4613      	mov	r3, r2
 8009782:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8009784:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009788:	2b00      	cmp	r3, #0
 800978a:	da08      	bge.n	800979e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800978c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009790:	425b      	negs	r3, r3
 8009792:	4619      	mov	r1, r3
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f7ff ff9b 	bl	80096d0 <pbuf_remove_header>
 800979a:	4603      	mov	r3, r0
 800979c:	e007      	b.n	80097ae <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800979e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097a2:	787a      	ldrb	r2, [r7, #1]
 80097a4:	4619      	mov	r1, r3
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f7ff ff1a 	bl	80095e0 <pbuf_add_header_impl>
 80097ac:	4603      	mov	r3, r0
  }
}
 80097ae:	4618      	mov	r0, r3
 80097b0:	3708      	adds	r7, #8
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}

080097b6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80097b6:	b580      	push	{r7, lr}
 80097b8:	b082      	sub	sp, #8
 80097ba:	af00      	add	r7, sp, #0
 80097bc:	6078      	str	r0, [r7, #4]
 80097be:	460b      	mov	r3, r1
 80097c0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80097c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80097c6:	2201      	movs	r2, #1
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff ffd2 	bl	8009774 <pbuf_header_impl>
 80097d0:	4603      	mov	r3, r0
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
	...

080097dc <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80097dc:	b580      	push	{r7, lr}
 80097de:	b088      	sub	sp, #32
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d10b      	bne.n	8009802 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d106      	bne.n	80097fe <pbuf_free+0x22>
 80097f0:	4b3b      	ldr	r3, [pc, #236]	; (80098e0 <pbuf_free+0x104>)
 80097f2:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80097f6:	493b      	ldr	r1, [pc, #236]	; (80098e4 <pbuf_free+0x108>)
 80097f8:	483b      	ldr	r0, [pc, #236]	; (80098e8 <pbuf_free+0x10c>)
 80097fa:	f00e fbcb 	bl	8017f94 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80097fe:	2300      	movs	r3, #0
 8009800:	e069      	b.n	80098d6 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8009806:	e062      	b.n	80098ce <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8009808:	f00b fd80 	bl	801530c <sys_arch_protect>
 800980c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	7b9b      	ldrb	r3, [r3, #14]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d106      	bne.n	8009824 <pbuf_free+0x48>
 8009816:	4b32      	ldr	r3, [pc, #200]	; (80098e0 <pbuf_free+0x104>)
 8009818:	f240 22f1 	movw	r2, #753	; 0x2f1
 800981c:	4933      	ldr	r1, [pc, #204]	; (80098ec <pbuf_free+0x110>)
 800981e:	4832      	ldr	r0, [pc, #200]	; (80098e8 <pbuf_free+0x10c>)
 8009820:	f00e fbb8 	bl	8017f94 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	7b9b      	ldrb	r3, [r3, #14]
 8009828:	3b01      	subs	r3, #1
 800982a:	b2da      	uxtb	r2, r3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	739a      	strb	r2, [r3, #14]
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	7b9b      	ldrb	r3, [r3, #14]
 8009834:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8009836:	69b8      	ldr	r0, [r7, #24]
 8009838:	f00b fd76 	bl	8015328 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800983c:	7dfb      	ldrb	r3, [r7, #23]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d143      	bne.n	80098ca <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	7b1b      	ldrb	r3, [r3, #12]
 800984c:	f003 030f 	and.w	r3, r3, #15
 8009850:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	7b5b      	ldrb	r3, [r3, #13]
 8009856:	f003 0302 	and.w	r3, r3, #2
 800985a:	2b00      	cmp	r3, #0
 800985c:	d011      	beq.n	8009882 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	691b      	ldr	r3, [r3, #16]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <pbuf_free+0x9c>
 800986a:	4b1d      	ldr	r3, [pc, #116]	; (80098e0 <pbuf_free+0x104>)
 800986c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8009870:	491f      	ldr	r1, [pc, #124]	; (80098f0 <pbuf_free+0x114>)
 8009872:	481d      	ldr	r0, [pc, #116]	; (80098e8 <pbuf_free+0x10c>)
 8009874:	f00e fb8e 	bl	8017f94 <iprintf>
        pc->custom_free_function(p);
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	691b      	ldr	r3, [r3, #16]
 800987c:	6878      	ldr	r0, [r7, #4]
 800987e:	4798      	blx	r3
 8009880:	e01d      	b.n	80098be <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8009882:	7bfb      	ldrb	r3, [r7, #15]
 8009884:	2b02      	cmp	r3, #2
 8009886:	d104      	bne.n	8009892 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8009888:	6879      	ldr	r1, [r7, #4]
 800988a:	200c      	movs	r0, #12
 800988c:	f7ff f8fa 	bl	8008a84 <memp_free>
 8009890:	e015      	b.n	80098be <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8009892:	7bfb      	ldrb	r3, [r7, #15]
 8009894:	2b01      	cmp	r3, #1
 8009896:	d104      	bne.n	80098a2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8009898:	6879      	ldr	r1, [r7, #4]
 800989a:	200b      	movs	r0, #11
 800989c:	f7ff f8f2 	bl	8008a84 <memp_free>
 80098a0:	e00d      	b.n	80098be <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80098a2:	7bfb      	ldrb	r3, [r7, #15]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d103      	bne.n	80098b0 <pbuf_free+0xd4>
          mem_free(p);
 80098a8:	6878      	ldr	r0, [r7, #4]
 80098aa:	f7fe fd7d 	bl	80083a8 <mem_free>
 80098ae:	e006      	b.n	80098be <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80098b0:	4b0b      	ldr	r3, [pc, #44]	; (80098e0 <pbuf_free+0x104>)
 80098b2:	f240 320f 	movw	r2, #783	; 0x30f
 80098b6:	490f      	ldr	r1, [pc, #60]	; (80098f4 <pbuf_free+0x118>)
 80098b8:	480b      	ldr	r0, [pc, #44]	; (80098e8 <pbuf_free+0x10c>)
 80098ba:	f00e fb6b 	bl	8017f94 <iprintf>
        }
      }
      count++;
 80098be:	7ffb      	ldrb	r3, [r7, #31]
 80098c0:	3301      	adds	r3, #1
 80098c2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	607b      	str	r3, [r7, #4]
 80098c8:	e001      	b.n	80098ce <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80098ca:	2300      	movs	r3, #0
 80098cc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d199      	bne.n	8009808 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80098d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3720      	adds	r7, #32
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	08019fb8 	.word	0x08019fb8
 80098e4:	0801a11c 	.word	0x0801a11c
 80098e8:	0801a018 	.word	0x0801a018
 80098ec:	0801a148 	.word	0x0801a148
 80098f0:	0801a160 	.word	0x0801a160
 80098f4:	0801a184 	.word	0x0801a184

080098f8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8009900:	2300      	movs	r3, #0
 8009902:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8009904:	e005      	b.n	8009912 <pbuf_clen+0x1a>
    ++len;
 8009906:	89fb      	ldrh	r3, [r7, #14]
 8009908:	3301      	adds	r3, #1
 800990a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1f6      	bne.n	8009906 <pbuf_clen+0xe>
  }
  return len;
 8009918:	89fb      	ldrh	r3, [r7, #14]
}
 800991a:	4618      	mov	r0, r3
 800991c:	3714      	adds	r7, #20
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr
	...

08009928 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b084      	sub	sp, #16
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d016      	beq.n	8009964 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8009936:	f00b fce9 	bl	801530c <sys_arch_protect>
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	7b9b      	ldrb	r3, [r3, #14]
 8009940:	3301      	adds	r3, #1
 8009942:	b2da      	uxtb	r2, r3
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	739a      	strb	r2, [r3, #14]
 8009948:	68f8      	ldr	r0, [r7, #12]
 800994a:	f00b fced 	bl	8015328 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	7b9b      	ldrb	r3, [r3, #14]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d106      	bne.n	8009964 <pbuf_ref+0x3c>
 8009956:	4b05      	ldr	r3, [pc, #20]	; (800996c <pbuf_ref+0x44>)
 8009958:	f240 3242 	movw	r2, #834	; 0x342
 800995c:	4904      	ldr	r1, [pc, #16]	; (8009970 <pbuf_ref+0x48>)
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <pbuf_ref+0x4c>)
 8009960:	f00e fb18 	bl	8017f94 <iprintf>
  }
}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}
 800996c:	08019fb8 	.word	0x08019fb8
 8009970:	0801a198 	.word	0x0801a198
 8009974:	0801a018 	.word	0x0801a018

08009978 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <pbuf_cat+0x16>
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d107      	bne.n	800999e <pbuf_cat+0x26>
 800998e:	4b20      	ldr	r3, [pc, #128]	; (8009a10 <pbuf_cat+0x98>)
 8009990:	f240 325a 	movw	r2, #858	; 0x35a
 8009994:	491f      	ldr	r1, [pc, #124]	; (8009a14 <pbuf_cat+0x9c>)
 8009996:	4820      	ldr	r0, [pc, #128]	; (8009a18 <pbuf_cat+0xa0>)
 8009998:	f00e fafc 	bl	8017f94 <iprintf>
 800999c:	e034      	b.n	8009a08 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	60fb      	str	r3, [r7, #12]
 80099a2:	e00a      	b.n	80099ba <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	891a      	ldrh	r2, [r3, #8]
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	891b      	ldrh	r3, [r3, #8]
 80099ac:	4413      	add	r3, r2
 80099ae:	b29a      	uxth	r2, r3
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	60fb      	str	r3, [r7, #12]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1f0      	bne.n	80099a4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	891a      	ldrh	r2, [r3, #8]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	895b      	ldrh	r3, [r3, #10]
 80099ca:	429a      	cmp	r2, r3
 80099cc:	d006      	beq.n	80099dc <pbuf_cat+0x64>
 80099ce:	4b10      	ldr	r3, [pc, #64]	; (8009a10 <pbuf_cat+0x98>)
 80099d0:	f240 3262 	movw	r2, #866	; 0x362
 80099d4:	4911      	ldr	r1, [pc, #68]	; (8009a1c <pbuf_cat+0xa4>)
 80099d6:	4810      	ldr	r0, [pc, #64]	; (8009a18 <pbuf_cat+0xa0>)
 80099d8:	f00e fadc 	bl	8017f94 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d006      	beq.n	80099f2 <pbuf_cat+0x7a>
 80099e4:	4b0a      	ldr	r3, [pc, #40]	; (8009a10 <pbuf_cat+0x98>)
 80099e6:	f240 3263 	movw	r2, #867	; 0x363
 80099ea:	490d      	ldr	r1, [pc, #52]	; (8009a20 <pbuf_cat+0xa8>)
 80099ec:	480a      	ldr	r0, [pc, #40]	; (8009a18 <pbuf_cat+0xa0>)
 80099ee:	f00e fad1 	bl	8017f94 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	891a      	ldrh	r2, [r3, #8]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	891b      	ldrh	r3, [r3, #8]
 80099fa:	4413      	add	r3, r2
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	683a      	ldr	r2, [r7, #0]
 8009a06:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8009a08:	3710      	adds	r7, #16
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}
 8009a0e:	bf00      	nop
 8009a10:	08019fb8 	.word	0x08019fb8
 8009a14:	0801a1ac 	.word	0x0801a1ac
 8009a18:	0801a018 	.word	0x0801a018
 8009a1c:	0801a1e4 	.word	0x0801a1e4
 8009a20:	0801a214 	.word	0x0801a214

08009a24 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b082      	sub	sp, #8
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8009a2e:	6839      	ldr	r1, [r7, #0]
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f7ff ffa1 	bl	8009978 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8009a36:	6838      	ldr	r0, [r7, #0]
 8009a38:	f7ff ff76 	bl	8009928 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	b086      	sub	sp, #24
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
 8009a4c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	617b      	str	r3, [r7, #20]
 8009a52:	2300      	movs	r3, #0
 8009a54:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <pbuf_copy+0x2a>
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d005      	beq.n	8009a6e <pbuf_copy+0x2a>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	891a      	ldrh	r2, [r3, #8]
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	891b      	ldrh	r3, [r3, #8]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d209      	bcs.n	8009a82 <pbuf_copy+0x3e>
 8009a6e:	4b57      	ldr	r3, [pc, #348]	; (8009bcc <pbuf_copy+0x188>)
 8009a70:	f240 32ca 	movw	r2, #970	; 0x3ca
 8009a74:	4956      	ldr	r1, [pc, #344]	; (8009bd0 <pbuf_copy+0x18c>)
 8009a76:	4857      	ldr	r0, [pc, #348]	; (8009bd4 <pbuf_copy+0x190>)
 8009a78:	f00e fa8c 	bl	8017f94 <iprintf>
 8009a7c:	f06f 030f 	mvn.w	r3, #15
 8009a80:	e09f      	b.n	8009bc2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	895b      	ldrh	r3, [r3, #10]
 8009a86:	461a      	mov	r2, r3
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	1ad2      	subs	r2, r2, r3
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	895b      	ldrh	r3, [r3, #10]
 8009a90:	4619      	mov	r1, r3
 8009a92:	693b      	ldr	r3, [r7, #16]
 8009a94:	1acb      	subs	r3, r1, r3
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d306      	bcc.n	8009aa8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	895b      	ldrh	r3, [r3, #10]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	60fb      	str	r3, [r7, #12]
 8009aa6:	e005      	b.n	8009ab4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	895b      	ldrh	r3, [r3, #10]
 8009aac:	461a      	mov	r2, r3
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	1ad3      	subs	r3, r2, r3
 8009ab2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685a      	ldr	r2, [r3, #4]
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	18d0      	adds	r0, r2, r3
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	685a      	ldr	r2, [r3, #4]
 8009ac0:	693b      	ldr	r3, [r7, #16]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	68fa      	ldr	r2, [r7, #12]
 8009ac6:	4619      	mov	r1, r3
 8009ac8:	f00e fa51 	bl	8017f6e <memcpy>
    offset_to += len;
 8009acc:	697a      	ldr	r2, [r7, #20]
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	4413      	add	r3, r2
 8009ad2:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8009ad4:	693a      	ldr	r2, [r7, #16]
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	4413      	add	r3, r2
 8009ada:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	895b      	ldrh	r3, [r3, #10]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	4293      	cmp	r3, r2
 8009ae6:	d906      	bls.n	8009af6 <pbuf_copy+0xb2>
 8009ae8:	4b38      	ldr	r3, [pc, #224]	; (8009bcc <pbuf_copy+0x188>)
 8009aea:	f240 32d9 	movw	r2, #985	; 0x3d9
 8009aee:	493a      	ldr	r1, [pc, #232]	; (8009bd8 <pbuf_copy+0x194>)
 8009af0:	4838      	ldr	r0, [pc, #224]	; (8009bd4 <pbuf_copy+0x190>)
 8009af2:	f00e fa4f 	bl	8017f94 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	895b      	ldrh	r3, [r3, #10]
 8009afa:	461a      	mov	r2, r3
 8009afc:	693b      	ldr	r3, [r7, #16]
 8009afe:	4293      	cmp	r3, r2
 8009b00:	d906      	bls.n	8009b10 <pbuf_copy+0xcc>
 8009b02:	4b32      	ldr	r3, [pc, #200]	; (8009bcc <pbuf_copy+0x188>)
 8009b04:	f240 32da 	movw	r2, #986	; 0x3da
 8009b08:	4934      	ldr	r1, [pc, #208]	; (8009bdc <pbuf_copy+0x198>)
 8009b0a:	4832      	ldr	r0, [pc, #200]	; (8009bd4 <pbuf_copy+0x190>)
 8009b0c:	f00e fa42 	bl	8017f94 <iprintf>
    if (offset_from >= p_from->len) {
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	895b      	ldrh	r3, [r3, #10]
 8009b14:	461a      	mov	r2, r3
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d304      	bcc.n	8009b26 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8009b20:	683b      	ldr	r3, [r7, #0]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	895b      	ldrh	r3, [r3, #10]
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d114      	bne.n	8009b5c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8009b32:	2300      	movs	r3, #0
 8009b34:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d10c      	bne.n	8009b5c <pbuf_copy+0x118>
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d009      	beq.n	8009b5c <pbuf_copy+0x118>
 8009b48:	4b20      	ldr	r3, [pc, #128]	; (8009bcc <pbuf_copy+0x188>)
 8009b4a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8009b4e:	4924      	ldr	r1, [pc, #144]	; (8009be0 <pbuf_copy+0x19c>)
 8009b50:	4820      	ldr	r0, [pc, #128]	; (8009bd4 <pbuf_copy+0x190>)
 8009b52:	f00e fa1f 	bl	8017f94 <iprintf>
 8009b56:	f06f 030f 	mvn.w	r3, #15
 8009b5a:	e032      	b.n	8009bc2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d013      	beq.n	8009b8a <pbuf_copy+0x146>
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	895a      	ldrh	r2, [r3, #10]
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	891b      	ldrh	r3, [r3, #8]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d10d      	bne.n	8009b8a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d009      	beq.n	8009b8a <pbuf_copy+0x146>
 8009b76:	4b15      	ldr	r3, [pc, #84]	; (8009bcc <pbuf_copy+0x188>)
 8009b78:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8009b7c:	4919      	ldr	r1, [pc, #100]	; (8009be4 <pbuf_copy+0x1a0>)
 8009b7e:	4815      	ldr	r0, [pc, #84]	; (8009bd4 <pbuf_copy+0x190>)
 8009b80:	f00e fa08 	bl	8017f94 <iprintf>
 8009b84:	f06f 0305 	mvn.w	r3, #5
 8009b88:	e01b      	b.n	8009bc2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d013      	beq.n	8009bb8 <pbuf_copy+0x174>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	895a      	ldrh	r2, [r3, #10]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	891b      	ldrh	r3, [r3, #8]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d10d      	bne.n	8009bb8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d009      	beq.n	8009bb8 <pbuf_copy+0x174>
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <pbuf_copy+0x188>)
 8009ba6:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009baa:	490e      	ldr	r1, [pc, #56]	; (8009be4 <pbuf_copy+0x1a0>)
 8009bac:	4809      	ldr	r0, [pc, #36]	; (8009bd4 <pbuf_copy+0x190>)
 8009bae:	f00e f9f1 	bl	8017f94 <iprintf>
 8009bb2:	f06f 0305 	mvn.w	r3, #5
 8009bb6:	e004      	b.n	8009bc2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	f47f af61 	bne.w	8009a82 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8009bc0:	2300      	movs	r3, #0
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	08019fb8 	.word	0x08019fb8
 8009bd0:	0801a260 	.word	0x0801a260
 8009bd4:	0801a018 	.word	0x0801a018
 8009bd8:	0801a290 	.word	0x0801a290
 8009bdc:	0801a2a8 	.word	0x0801a2a8
 8009be0:	0801a2c4 	.word	0x0801a2c4
 8009be4:	0801a2d4 	.word	0x0801a2d4

08009be8 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b088      	sub	sp, #32
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4611      	mov	r1, r2
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	460b      	mov	r3, r1
 8009bf8:	80fb      	strh	r3, [r7, #6]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8009c02:	2300      	movs	r3, #0
 8009c04:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d108      	bne.n	8009c1e <pbuf_copy_partial+0x36>
 8009c0c:	4b2b      	ldr	r3, [pc, #172]	; (8009cbc <pbuf_copy_partial+0xd4>)
 8009c0e:	f240 420a 	movw	r2, #1034	; 0x40a
 8009c12:	492b      	ldr	r1, [pc, #172]	; (8009cc0 <pbuf_copy_partial+0xd8>)
 8009c14:	482b      	ldr	r0, [pc, #172]	; (8009cc4 <pbuf_copy_partial+0xdc>)
 8009c16:	f00e f9bd 	bl	8017f94 <iprintf>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	e04a      	b.n	8009cb4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d108      	bne.n	8009c36 <pbuf_copy_partial+0x4e>
 8009c24:	4b25      	ldr	r3, [pc, #148]	; (8009cbc <pbuf_copy_partial+0xd4>)
 8009c26:	f240 420b 	movw	r2, #1035	; 0x40b
 8009c2a:	4927      	ldr	r1, [pc, #156]	; (8009cc8 <pbuf_copy_partial+0xe0>)
 8009c2c:	4825      	ldr	r0, [pc, #148]	; (8009cc4 <pbuf_copy_partial+0xdc>)
 8009c2e:	f00e f9b1 	bl	8017f94 <iprintf>
 8009c32:	2300      	movs	r3, #0
 8009c34:	e03e      	b.n	8009cb4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	61fb      	str	r3, [r7, #28]
 8009c3a:	e034      	b.n	8009ca6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8009c3c:	88bb      	ldrh	r3, [r7, #4]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d00a      	beq.n	8009c58 <pbuf_copy_partial+0x70>
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	895b      	ldrh	r3, [r3, #10]
 8009c46:	88ba      	ldrh	r2, [r7, #4]
 8009c48:	429a      	cmp	r2, r3
 8009c4a:	d305      	bcc.n	8009c58 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8009c4c:	69fb      	ldr	r3, [r7, #28]
 8009c4e:	895b      	ldrh	r3, [r3, #10]
 8009c50:	88ba      	ldrh	r2, [r7, #4]
 8009c52:	1ad3      	subs	r3, r2, r3
 8009c54:	80bb      	strh	r3, [r7, #4]
 8009c56:	e023      	b.n	8009ca0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	895a      	ldrh	r2, [r3, #10]
 8009c5c:	88bb      	ldrh	r3, [r7, #4]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8009c62:	8b3a      	ldrh	r2, [r7, #24]
 8009c64:	88fb      	ldrh	r3, [r7, #6]
 8009c66:	429a      	cmp	r2, r3
 8009c68:	d901      	bls.n	8009c6e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8009c6a:	88fb      	ldrh	r3, [r7, #6]
 8009c6c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8009c6e:	8b7b      	ldrh	r3, [r7, #26]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	18d0      	adds	r0, r2, r3
 8009c74:	69fb      	ldr	r3, [r7, #28]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	88bb      	ldrh	r3, [r7, #4]
 8009c7a:	4413      	add	r3, r2
 8009c7c:	8b3a      	ldrh	r2, [r7, #24]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	f00e f975 	bl	8017f6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8009c84:	8afa      	ldrh	r2, [r7, #22]
 8009c86:	8b3b      	ldrh	r3, [r7, #24]
 8009c88:	4413      	add	r3, r2
 8009c8a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8009c8c:	8b7a      	ldrh	r2, [r7, #26]
 8009c8e:	8b3b      	ldrh	r3, [r7, #24]
 8009c90:	4413      	add	r3, r2
 8009c92:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8009c94:	88fa      	ldrh	r2, [r7, #6]
 8009c96:	8b3b      	ldrh	r3, [r7, #24]
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	61fb      	str	r3, [r7, #28]
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d002      	beq.n	8009cb2 <pbuf_copy_partial+0xca>
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1c4      	bne.n	8009c3c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8009cb2:	8afb      	ldrh	r3, [r7, #22]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3720      	adds	r7, #32
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}
 8009cbc:	08019fb8 	.word	0x08019fb8
 8009cc0:	0801a300 	.word	0x0801a300
 8009cc4:	0801a018 	.word	0x0801a018
 8009cc8:	0801a320 	.word	0x0801a320

08009ccc <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	603a      	str	r2, [r7, #0]
 8009cd6:	71fb      	strb	r3, [r7, #7]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	8919      	ldrh	r1, [r3, #8]
 8009ce0:	88ba      	ldrh	r2, [r7, #4]
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	4618      	mov	r0, r3
 8009ce6:	f7ff fa99 	bl	800921c <pbuf_alloc>
 8009cea:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d101      	bne.n	8009cf6 <pbuf_clone+0x2a>
    return NULL;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	e011      	b.n	8009d1a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8009cf6:	6839      	ldr	r1, [r7, #0]
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fea3 	bl	8009a44 <pbuf_copy>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8009d02:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d006      	beq.n	8009d18 <pbuf_clone+0x4c>
 8009d0a:	4b06      	ldr	r3, [pc, #24]	; (8009d24 <pbuf_clone+0x58>)
 8009d0c:	f240 5224 	movw	r2, #1316	; 0x524
 8009d10:	4905      	ldr	r1, [pc, #20]	; (8009d28 <pbuf_clone+0x5c>)
 8009d12:	4806      	ldr	r0, [pc, #24]	; (8009d2c <pbuf_clone+0x60>)
 8009d14:	f00e f93e 	bl	8017f94 <iprintf>
  return q;
 8009d18:	68fb      	ldr	r3, [r7, #12]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3710      	adds	r7, #16
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	08019fb8 	.word	0x08019fb8
 8009d28:	0801a42c 	.word	0x0801a42c
 8009d2c:	0801a018 	.word	0x0801a018

08009d30 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8009d34:	f00e f9aa 	bl	801808c <rand>
 8009d38:	4603      	mov	r3, r0
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009d40:	b29b      	uxth	r3, r3
 8009d42:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8009d46:	b29a      	uxth	r2, r3
 8009d48:	4b01      	ldr	r3, [pc, #4]	; (8009d50 <tcp_init+0x20>)
 8009d4a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8009d4c:	bf00      	nop
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	2000000c 	.word	0x2000000c

08009d54 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b082      	sub	sp, #8
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	7d1b      	ldrb	r3, [r3, #20]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d105      	bne.n	8009d70 <tcp_free+0x1c>
 8009d64:	4b06      	ldr	r3, [pc, #24]	; (8009d80 <tcp_free+0x2c>)
 8009d66:	22d4      	movs	r2, #212	; 0xd4
 8009d68:	4906      	ldr	r1, [pc, #24]	; (8009d84 <tcp_free+0x30>)
 8009d6a:	4807      	ldr	r0, [pc, #28]	; (8009d88 <tcp_free+0x34>)
 8009d6c:	f00e f912 	bl	8017f94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8009d70:	6879      	ldr	r1, [r7, #4]
 8009d72:	2001      	movs	r0, #1
 8009d74:	f7fe fe86 	bl	8008a84 <memp_free>
}
 8009d78:	bf00      	nop
 8009d7a:	3708      	adds	r7, #8
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bd80      	pop	{r7, pc}
 8009d80:	0801a4b8 	.word	0x0801a4b8
 8009d84:	0801a4e8 	.word	0x0801a4e8
 8009d88:	0801a4fc 	.word	0x0801a4fc

08009d8c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	7d1b      	ldrb	r3, [r3, #20]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d105      	bne.n	8009da8 <tcp_free_listen+0x1c>
 8009d9c:	4b06      	ldr	r3, [pc, #24]	; (8009db8 <tcp_free_listen+0x2c>)
 8009d9e:	22df      	movs	r2, #223	; 0xdf
 8009da0:	4906      	ldr	r1, [pc, #24]	; (8009dbc <tcp_free_listen+0x30>)
 8009da2:	4807      	ldr	r0, [pc, #28]	; (8009dc0 <tcp_free_listen+0x34>)
 8009da4:	f00e f8f6 	bl	8017f94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	2002      	movs	r0, #2
 8009dac:	f7fe fe6a 	bl	8008a84 <memp_free>
}
 8009db0:	bf00      	nop
 8009db2:	3708      	adds	r7, #8
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	0801a4b8 	.word	0x0801a4b8
 8009dbc:	0801a524 	.word	0x0801a524
 8009dc0:	0801a4fc 	.word	0x0801a4fc

08009dc4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8009dc8:	f001 f850 	bl	800ae6c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8009dcc:	4b07      	ldr	r3, [pc, #28]	; (8009dec <tcp_tmr+0x28>)
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	b2da      	uxtb	r2, r3
 8009dd4:	4b05      	ldr	r3, [pc, #20]	; (8009dec <tcp_tmr+0x28>)
 8009dd6:	701a      	strb	r2, [r3, #0]
 8009dd8:	4b04      	ldr	r3, [pc, #16]	; (8009dec <tcp_tmr+0x28>)
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	f003 0301 	and.w	r3, r3, #1
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d001      	beq.n	8009de8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8009de4:	f000 fd04 	bl	800a7f0 <tcp_slowtmr>
  }
}
 8009de8:	bf00      	nop
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	200083a9 	.word	0x200083a9

08009df0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b084      	sub	sp, #16
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
 8009df8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d105      	bne.n	8009e0c <tcp_remove_listener+0x1c>
 8009e00:	4b0d      	ldr	r3, [pc, #52]	; (8009e38 <tcp_remove_listener+0x48>)
 8009e02:	22ff      	movs	r2, #255	; 0xff
 8009e04:	490d      	ldr	r1, [pc, #52]	; (8009e3c <tcp_remove_listener+0x4c>)
 8009e06:	480e      	ldr	r0, [pc, #56]	; (8009e40 <tcp_remove_listener+0x50>)
 8009e08:	f00e f8c4 	bl	8017f94 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	60fb      	str	r3, [r7, #12]
 8009e10:	e00a      	b.n	8009e28 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e16:	683a      	ldr	r2, [r7, #0]
 8009e18:	429a      	cmp	r2, r3
 8009e1a:	d102      	bne.n	8009e22 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d1f1      	bne.n	8009e12 <tcp_remove_listener+0x22>
    }
  }
}
 8009e2e:	bf00      	nop
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	0801a4b8 	.word	0x0801a4b8
 8009e3c:	0801a540 	.word	0x0801a540
 8009e40:	0801a4fc 	.word	0x0801a4fc

08009e44 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d106      	bne.n	8009e60 <tcp_listen_closed+0x1c>
 8009e52:	4b14      	ldr	r3, [pc, #80]	; (8009ea4 <tcp_listen_closed+0x60>)
 8009e54:	f240 1211 	movw	r2, #273	; 0x111
 8009e58:	4913      	ldr	r1, [pc, #76]	; (8009ea8 <tcp_listen_closed+0x64>)
 8009e5a:	4814      	ldr	r0, [pc, #80]	; (8009eac <tcp_listen_closed+0x68>)
 8009e5c:	f00e f89a 	bl	8017f94 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	7d1b      	ldrb	r3, [r3, #20]
 8009e64:	2b01      	cmp	r3, #1
 8009e66:	d006      	beq.n	8009e76 <tcp_listen_closed+0x32>
 8009e68:	4b0e      	ldr	r3, [pc, #56]	; (8009ea4 <tcp_listen_closed+0x60>)
 8009e6a:	f44f 7289 	mov.w	r2, #274	; 0x112
 8009e6e:	4910      	ldr	r1, [pc, #64]	; (8009eb0 <tcp_listen_closed+0x6c>)
 8009e70:	480e      	ldr	r0, [pc, #56]	; (8009eac <tcp_listen_closed+0x68>)
 8009e72:	f00e f88f 	bl	8017f94 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009e76:	2301      	movs	r3, #1
 8009e78:	60fb      	str	r3, [r7, #12]
 8009e7a:	e00b      	b.n	8009e94 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8009e7c:	4a0d      	ldr	r2, [pc, #52]	; (8009eb4 <tcp_listen_closed+0x70>)
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff ffb1 	bl	8009df0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	3301      	adds	r3, #1
 8009e92:	60fb      	str	r3, [r7, #12]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	2b03      	cmp	r3, #3
 8009e98:	d9f0      	bls.n	8009e7c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8009e9a:	bf00      	nop
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}
 8009ea2:	bf00      	nop
 8009ea4:	0801a4b8 	.word	0x0801a4b8
 8009ea8:	0801a568 	.word	0x0801a568
 8009eac:	0801a4fc 	.word	0x0801a4fc
 8009eb0:	0801a574 	.word	0x0801a574
 8009eb4:	0801cad0 	.word	0x0801cad0

08009eb8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8009eb8:	b5b0      	push	{r4, r5, r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af04      	add	r7, sp, #16
 8009ebe:	6078      	str	r0, [r7, #4]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d106      	bne.n	8009ed8 <tcp_close_shutdown+0x20>
 8009eca:	4b61      	ldr	r3, [pc, #388]	; (800a050 <tcp_close_shutdown+0x198>)
 8009ecc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8009ed0:	4960      	ldr	r1, [pc, #384]	; (800a054 <tcp_close_shutdown+0x19c>)
 8009ed2:	4861      	ldr	r0, [pc, #388]	; (800a058 <tcp_close_shutdown+0x1a0>)
 8009ed4:	f00e f85e 	bl	8017f94 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d066      	beq.n	8009fac <tcp_close_shutdown+0xf4>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	7d1b      	ldrb	r3, [r3, #20]
 8009ee2:	2b04      	cmp	r3, #4
 8009ee4:	d003      	beq.n	8009eee <tcp_close_shutdown+0x36>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	7d1b      	ldrb	r3, [r3, #20]
 8009eea:	2b07      	cmp	r3, #7
 8009eec:	d15e      	bne.n	8009fac <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d104      	bne.n	8009f00 <tcp_close_shutdown+0x48>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009efa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8009efe:	d055      	beq.n	8009fac <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	8b5b      	ldrh	r3, [r3, #26]
 8009f04:	f003 0310 	and.w	r3, r3, #16
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d106      	bne.n	8009f1a <tcp_close_shutdown+0x62>
 8009f0c:	4b50      	ldr	r3, [pc, #320]	; (800a050 <tcp_close_shutdown+0x198>)
 8009f0e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8009f12:	4952      	ldr	r1, [pc, #328]	; (800a05c <tcp_close_shutdown+0x1a4>)
 8009f14:	4850      	ldr	r0, [pc, #320]	; (800a058 <tcp_close_shutdown+0x1a0>)
 8009f16:	f00e f83d 	bl	8017f94 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8009f22:	687d      	ldr	r5, [r7, #4]
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	3304      	adds	r3, #4
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	8ad2      	ldrh	r2, [r2, #22]
 8009f2c:	6879      	ldr	r1, [r7, #4]
 8009f2e:	8b09      	ldrh	r1, [r1, #24]
 8009f30:	9102      	str	r1, [sp, #8]
 8009f32:	9201      	str	r2, [sp, #4]
 8009f34:	9300      	str	r3, [sp, #0]
 8009f36:	462b      	mov	r3, r5
 8009f38:	4622      	mov	r2, r4
 8009f3a:	4601      	mov	r1, r0
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f005 fd6f 	bl	800fa20 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f001 fb40 	bl	800b5c8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8009f48:	4b45      	ldr	r3, [pc, #276]	; (800a060 <tcp_close_shutdown+0x1a8>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	687a      	ldr	r2, [r7, #4]
 8009f4e:	429a      	cmp	r2, r3
 8009f50:	d105      	bne.n	8009f5e <tcp_close_shutdown+0xa6>
 8009f52:	4b43      	ldr	r3, [pc, #268]	; (800a060 <tcp_close_shutdown+0x1a8>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	4a41      	ldr	r2, [pc, #260]	; (800a060 <tcp_close_shutdown+0x1a8>)
 8009f5a:	6013      	str	r3, [r2, #0]
 8009f5c:	e013      	b.n	8009f86 <tcp_close_shutdown+0xce>
 8009f5e:	4b40      	ldr	r3, [pc, #256]	; (800a060 <tcp_close_shutdown+0x1a8>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
 8009f64:	e00c      	b.n	8009f80 <tcp_close_shutdown+0xc8>
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68db      	ldr	r3, [r3, #12]
 8009f6a:	687a      	ldr	r2, [r7, #4]
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d104      	bne.n	8009f7a <tcp_close_shutdown+0xc2>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	60da      	str	r2, [r3, #12]
 8009f78:	e005      	b.n	8009f86 <tcp_close_shutdown+0xce>
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d1ef      	bne.n	8009f66 <tcp_close_shutdown+0xae>
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	60da      	str	r2, [r3, #12]
 8009f8c:	4b35      	ldr	r3, [pc, #212]	; (800a064 <tcp_close_shutdown+0x1ac>)
 8009f8e:	2201      	movs	r2, #1
 8009f90:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8009f92:	4b35      	ldr	r3, [pc, #212]	; (800a068 <tcp_close_shutdown+0x1b0>)
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d102      	bne.n	8009fa2 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8009f9c:	f003 ffd2 	bl	800df44 <tcp_trigger_input_pcb_close>
 8009fa0:	e002      	b.n	8009fa8 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f7ff fed6 	bl	8009d54 <tcp_free>
      }
      return ERR_OK;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	e04d      	b.n	800a048 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	7d1b      	ldrb	r3, [r3, #20]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d02d      	beq.n	800a010 <tcp_close_shutdown+0x158>
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d036      	beq.n	800a026 <tcp_close_shutdown+0x16e>
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d13f      	bne.n	800a03c <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	8adb      	ldrh	r3, [r3, #22]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d021      	beq.n	800a008 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8009fc4:	4b29      	ldr	r3, [pc, #164]	; (800a06c <tcp_close_shutdown+0x1b4>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	687a      	ldr	r2, [r7, #4]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d105      	bne.n	8009fda <tcp_close_shutdown+0x122>
 8009fce:	4b27      	ldr	r3, [pc, #156]	; (800a06c <tcp_close_shutdown+0x1b4>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	4a25      	ldr	r2, [pc, #148]	; (800a06c <tcp_close_shutdown+0x1b4>)
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	e013      	b.n	800a002 <tcp_close_shutdown+0x14a>
 8009fda:	4b24      	ldr	r3, [pc, #144]	; (800a06c <tcp_close_shutdown+0x1b4>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60bb      	str	r3, [r7, #8]
 8009fe0:	e00c      	b.n	8009ffc <tcp_close_shutdown+0x144>
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d104      	bne.n	8009ff6 <tcp_close_shutdown+0x13e>
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	68da      	ldr	r2, [r3, #12]
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	60da      	str	r2, [r3, #12]
 8009ff4:	e005      	b.n	800a002 <tcp_close_shutdown+0x14a>
 8009ff6:	68bb      	ldr	r3, [r7, #8]
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	60bb      	str	r3, [r7, #8]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d1ef      	bne.n	8009fe2 <tcp_close_shutdown+0x12a>
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f7ff fea3 	bl	8009d54 <tcp_free>
      break;
 800a00e:	e01a      	b.n	800a046 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f7ff ff17 	bl	8009e44 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4815      	ldr	r0, [pc, #84]	; (800a070 <tcp_close_shutdown+0x1b8>)
 800a01a:	f001 fb25 	bl	800b668 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff feb4 	bl	8009d8c <tcp_free_listen>
      break;
 800a024:	e00f      	b.n	800a046 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a026:	6879      	ldr	r1, [r7, #4]
 800a028:	480d      	ldr	r0, [pc, #52]	; (800a060 <tcp_close_shutdown+0x1a8>)
 800a02a:	f001 fb1d 	bl	800b668 <tcp_pcb_remove>
 800a02e:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <tcp_close_shutdown+0x1ac>)
 800a030:	2201      	movs	r2, #1
 800a032:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f7ff fe8d 	bl	8009d54 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800a03a:	e004      	b.n	800a046 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 f819 	bl	800a074 <tcp_close_shutdown_fin>
 800a042:	4603      	mov	r3, r0
 800a044:	e000      	b.n	800a048 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 800a046:	2300      	movs	r3, #0
}
 800a048:	4618      	mov	r0, r3
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bdb0      	pop	{r4, r5, r7, pc}
 800a050:	0801a4b8 	.word	0x0801a4b8
 800a054:	0801a58c 	.word	0x0801a58c
 800a058:	0801a4fc 	.word	0x0801a4fc
 800a05c:	0801a5ac 	.word	0x0801a5ac
 800a060:	2000c4dc 	.word	0x2000c4dc
 800a064:	2000c4d8 	.word	0x2000c4d8
 800a068:	2000c4f0 	.word	0x2000c4f0
 800a06c:	2000c4e8 	.word	0x2000c4e8
 800a070:	2000c4e4 	.word	0x2000c4e4

0800a074 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
 800a07a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d106      	bne.n	800a090 <tcp_close_shutdown_fin+0x1c>
 800a082:	4b2c      	ldr	r3, [pc, #176]	; (800a134 <tcp_close_shutdown_fin+0xc0>)
 800a084:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800a088:	492b      	ldr	r1, [pc, #172]	; (800a138 <tcp_close_shutdown_fin+0xc4>)
 800a08a:	482c      	ldr	r0, [pc, #176]	; (800a13c <tcp_close_shutdown_fin+0xc8>)
 800a08c:	f00d ff82 	bl	8017f94 <iprintf>

  switch (pcb->state) {
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	7d1b      	ldrb	r3, [r3, #20]
 800a094:	2b04      	cmp	r3, #4
 800a096:	d010      	beq.n	800a0ba <tcp_close_shutdown_fin+0x46>
 800a098:	2b07      	cmp	r3, #7
 800a09a:	d01b      	beq.n	800a0d4 <tcp_close_shutdown_fin+0x60>
 800a09c:	2b03      	cmp	r3, #3
 800a09e:	d126      	bne.n	800a0ee <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f004 fdbb 	bl	800ec1c <tcp_send_fin>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a0aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d11f      	bne.n	800a0f2 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2205      	movs	r2, #5
 800a0b6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a0b8:	e01b      	b.n	800a0f2 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f004 fdae 	bl	800ec1c <tcp_send_fin>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a0c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d114      	bne.n	800a0f6 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2205      	movs	r2, #5
 800a0d0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a0d2:	e010      	b.n	800a0f6 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800a0d4:	6878      	ldr	r0, [r7, #4]
 800a0d6:	f004 fda1 	bl	800ec1c <tcp_send_fin>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800a0de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d109      	bne.n	800a0fa <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	2209      	movs	r2, #9
 800a0ea:	751a      	strb	r2, [r3, #20]
      }
      break;
 800a0ec:	e005      	b.n	800a0fa <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	e01c      	b.n	800a12c <tcp_close_shutdown_fin+0xb8>
      break;
 800a0f2:	bf00      	nop
 800a0f4:	e002      	b.n	800a0fc <tcp_close_shutdown_fin+0x88>
      break;
 800a0f6:	bf00      	nop
 800a0f8:	e000      	b.n	800a0fc <tcp_close_shutdown_fin+0x88>
      break;
 800a0fa:	bf00      	nop
  }

  if (err == ERR_OK) {
 800a0fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d103      	bne.n	800a10c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f004 fec7 	bl	800ee98 <tcp_output>
 800a10a:	e00d      	b.n	800a128 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800a10c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a114:	d108      	bne.n	800a128 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	8b5b      	ldrh	r3, [r3, #26]
 800a11a:	f043 0308 	orr.w	r3, r3, #8
 800a11e:	b29a      	uxth	r2, r3
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e001      	b.n	800a12c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800a128:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	0801a4b8 	.word	0x0801a4b8
 800a138:	0801a568 	.word	0x0801a568
 800a13c:	0801a4fc 	.word	0x0801a4fc

0800a140 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d109      	bne.n	800a162 <tcp_close+0x22>
 800a14e:	4b0f      	ldr	r3, [pc, #60]	; (800a18c <tcp_close+0x4c>)
 800a150:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800a154:	490e      	ldr	r1, [pc, #56]	; (800a190 <tcp_close+0x50>)
 800a156:	480f      	ldr	r0, [pc, #60]	; (800a194 <tcp_close+0x54>)
 800a158:	f00d ff1c 	bl	8017f94 <iprintf>
 800a15c:	f06f 030f 	mvn.w	r3, #15
 800a160:	e00f      	b.n	800a182 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	7d1b      	ldrb	r3, [r3, #20]
 800a166:	2b01      	cmp	r3, #1
 800a168:	d006      	beq.n	800a178 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	8b5b      	ldrh	r3, [r3, #26]
 800a16e:	f043 0310 	orr.w	r3, r3, #16
 800a172:	b29a      	uxth	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800a178:	2101      	movs	r1, #1
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f7ff fe9c 	bl	8009eb8 <tcp_close_shutdown>
 800a180:	4603      	mov	r3, r0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3708      	adds	r7, #8
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}
 800a18a:	bf00      	nop
 800a18c:	0801a4b8 	.word	0x0801a4b8
 800a190:	0801a5c8 	.word	0x0801a5c8
 800a194:	0801a4fc 	.word	0x0801a4fc

0800a198 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800a198:	b580      	push	{r7, lr}
 800a19a:	b084      	sub	sp, #16
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	60f8      	str	r0, [r7, #12]
 800a1a0:	60b9      	str	r1, [r7, #8]
 800a1a2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d109      	bne.n	800a1be <tcp_shutdown+0x26>
 800a1aa:	4b25      	ldr	r3, [pc, #148]	; (800a240 <tcp_shutdown+0xa8>)
 800a1ac:	f240 2207 	movw	r2, #519	; 0x207
 800a1b0:	4924      	ldr	r1, [pc, #144]	; (800a244 <tcp_shutdown+0xac>)
 800a1b2:	4825      	ldr	r0, [pc, #148]	; (800a248 <tcp_shutdown+0xb0>)
 800a1b4:	f00d feee 	bl	8017f94 <iprintf>
 800a1b8:	f06f 030f 	mvn.w	r3, #15
 800a1bc:	e03c      	b.n	800a238 <tcp_shutdown+0xa0>

  if (pcb->state == LISTEN) {
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	7d1b      	ldrb	r3, [r3, #20]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d102      	bne.n	800a1cc <tcp_shutdown+0x34>
    return ERR_CONN;
 800a1c6:	f06f 030a 	mvn.w	r3, #10
 800a1ca:	e035      	b.n	800a238 <tcp_shutdown+0xa0>
  }
  if (shut_rx) {
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d01b      	beq.n	800a20a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	8b5b      	ldrh	r3, [r3, #26]
 800a1d6:	f043 0310 	orr.w	r3, r3, #16
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	d005      	beq.n	800a1f2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800a1e6:	2101      	movs	r1, #1
 800a1e8:	68f8      	ldr	r0, [r7, #12]
 800a1ea:	f7ff fe65 	bl	8009eb8 <tcp_close_shutdown>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	e022      	b.n	800a238 <tcp_shutdown+0xa0>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d007      	beq.n	800a20a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a1fe:	4618      	mov	r0, r3
 800a200:	f7ff faec 	bl	80097dc <pbuf_free>
      pcb->refused_data = NULL;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2200      	movs	r2, #0
 800a208:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d012      	beq.n	800a236 <tcp_shutdown+0x9e>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	7d1b      	ldrb	r3, [r3, #20]
 800a214:	2b03      	cmp	r3, #3
 800a216:	db0b      	blt.n	800a230 <tcp_shutdown+0x98>
 800a218:	2b04      	cmp	r3, #4
 800a21a:	dd01      	ble.n	800a220 <tcp_shutdown+0x88>
 800a21c:	2b07      	cmp	r3, #7
 800a21e:	d107      	bne.n	800a230 <tcp_shutdown+0x98>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	b2db      	uxtb	r3, r3
 800a224:	4619      	mov	r1, r3
 800a226:	68f8      	ldr	r0, [r7, #12]
 800a228:	f7ff fe46 	bl	8009eb8 <tcp_close_shutdown>
 800a22c:	4603      	mov	r3, r0
 800a22e:	e003      	b.n	800a238 <tcp_shutdown+0xa0>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800a230:	f06f 030a 	mvn.w	r3, #10
 800a234:	e000      	b.n	800a238 <tcp_shutdown+0xa0>
    }
  }
  return ERR_OK;
 800a236:	2300      	movs	r3, #0
}
 800a238:	4618      	mov	r0, r3
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	0801a4b8 	.word	0x0801a4b8
 800a244:	0801a5e0 	.word	0x0801a5e0
 800a248:	0801a4fc 	.word	0x0801a4fc

0800a24c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	b08e      	sub	sp, #56	; 0x38
 800a250:	af04      	add	r7, sp, #16
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d107      	bne.n	800a26c <tcp_abandon+0x20>
 800a25c:	4b52      	ldr	r3, [pc, #328]	; (800a3a8 <tcp_abandon+0x15c>)
 800a25e:	f240 223d 	movw	r2, #573	; 0x23d
 800a262:	4952      	ldr	r1, [pc, #328]	; (800a3ac <tcp_abandon+0x160>)
 800a264:	4852      	ldr	r0, [pc, #328]	; (800a3b0 <tcp_abandon+0x164>)
 800a266:	f00d fe95 	bl	8017f94 <iprintf>
 800a26a:	e099      	b.n	800a3a0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	7d1b      	ldrb	r3, [r3, #20]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d106      	bne.n	800a282 <tcp_abandon+0x36>
 800a274:	4b4c      	ldr	r3, [pc, #304]	; (800a3a8 <tcp_abandon+0x15c>)
 800a276:	f240 2241 	movw	r2, #577	; 0x241
 800a27a:	494e      	ldr	r1, [pc, #312]	; (800a3b4 <tcp_abandon+0x168>)
 800a27c:	484c      	ldr	r0, [pc, #304]	; (800a3b0 <tcp_abandon+0x164>)
 800a27e:	f00d fe89 	bl	8017f94 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	7d1b      	ldrb	r3, [r3, #20]
 800a286:	2b0a      	cmp	r3, #10
 800a288:	d107      	bne.n	800a29a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800a28a:	6879      	ldr	r1, [r7, #4]
 800a28c:	484a      	ldr	r0, [pc, #296]	; (800a3b8 <tcp_abandon+0x16c>)
 800a28e:	f001 f9eb 	bl	800b668 <tcp_pcb_remove>
    tcp_free(pcb);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7ff fd5e 	bl	8009d54 <tcp_free>
 800a298:	e082      	b.n	800a3a0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800a29a:	2300      	movs	r3, #0
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a2a6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ac:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2b4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7d1b      	ldrb	r3, [r3, #20]
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d126      	bne.n	800a312 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	8adb      	ldrh	r3, [r3, #22]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d02e      	beq.n	800a32a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800a2cc:	4b3b      	ldr	r3, [pc, #236]	; (800a3bc <tcp_abandon+0x170>)
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	687a      	ldr	r2, [r7, #4]
 800a2d2:	429a      	cmp	r2, r3
 800a2d4:	d105      	bne.n	800a2e2 <tcp_abandon+0x96>
 800a2d6:	4b39      	ldr	r3, [pc, #228]	; (800a3bc <tcp_abandon+0x170>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	4a37      	ldr	r2, [pc, #220]	; (800a3bc <tcp_abandon+0x170>)
 800a2de:	6013      	str	r3, [r2, #0]
 800a2e0:	e013      	b.n	800a30a <tcp_abandon+0xbe>
 800a2e2:	4b36      	ldr	r3, [pc, #216]	; (800a3bc <tcp_abandon+0x170>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	61fb      	str	r3, [r7, #28]
 800a2e8:	e00c      	b.n	800a304 <tcp_abandon+0xb8>
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	68db      	ldr	r3, [r3, #12]
 800a2ee:	687a      	ldr	r2, [r7, #4]
 800a2f0:	429a      	cmp	r2, r3
 800a2f2:	d104      	bne.n	800a2fe <tcp_abandon+0xb2>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68da      	ldr	r2, [r3, #12]
 800a2f8:	69fb      	ldr	r3, [r7, #28]
 800a2fa:	60da      	str	r2, [r3, #12]
 800a2fc:	e005      	b.n	800a30a <tcp_abandon+0xbe>
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	68db      	ldr	r3, [r3, #12]
 800a302:	61fb      	str	r3, [r7, #28]
 800a304:	69fb      	ldr	r3, [r7, #28]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d1ef      	bne.n	800a2ea <tcp_abandon+0x9e>
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	60da      	str	r2, [r3, #12]
 800a310:	e00b      	b.n	800a32a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	8adb      	ldrh	r3, [r3, #22]
 800a31a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800a31c:	6879      	ldr	r1, [r7, #4]
 800a31e:	4828      	ldr	r0, [pc, #160]	; (800a3c0 <tcp_abandon+0x174>)
 800a320:	f001 f9a2 	bl	800b668 <tcp_pcb_remove>
 800a324:	4b27      	ldr	r3, [pc, #156]	; (800a3c4 <tcp_abandon+0x178>)
 800a326:	2201      	movs	r2, #1
 800a328:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d004      	beq.n	800a33c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a336:	4618      	mov	r0, r3
 800a338:	f000 fe78 	bl	800b02c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a340:	2b00      	cmp	r3, #0
 800a342:	d004      	beq.n	800a34e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a348:	4618      	mov	r0, r3
 800a34a:	f000 fe6f 	bl	800b02c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a352:	2b00      	cmp	r3, #0
 800a354:	d004      	beq.n	800a360 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a35a:	4618      	mov	r0, r3
 800a35c:	f000 fe66 	bl	800b02c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800a360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00e      	beq.n	800a384 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800a366:	6879      	ldr	r1, [r7, #4]
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3304      	adds	r3, #4
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	8b12      	ldrh	r2, [r2, #24]
 800a370:	9202      	str	r2, [sp, #8]
 800a372:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800a374:	9201      	str	r2, [sp, #4]
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	460b      	mov	r3, r1
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	69b9      	ldr	r1, [r7, #24]
 800a37e:	6878      	ldr	r0, [r7, #4]
 800a380:	f005 fb4e 	bl	800fa20 <tcp_rst>
    }
    last_state = pcb->state;
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7d1b      	ldrb	r3, [r3, #20]
 800a388:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f7ff fce2 	bl	8009d54 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d004      	beq.n	800a3a0 <tcp_abandon+0x154>
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	f06f 010c 	mvn.w	r1, #12
 800a39c:	68f8      	ldr	r0, [r7, #12]
 800a39e:	4798      	blx	r3
  }
}
 800a3a0:	3728      	adds	r7, #40	; 0x28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	bd80      	pop	{r7, pc}
 800a3a6:	bf00      	nop
 800a3a8:	0801a4b8 	.word	0x0801a4b8
 800a3ac:	0801a5fc 	.word	0x0801a5fc
 800a3b0:	0801a4fc 	.word	0x0801a4fc
 800a3b4:	0801a618 	.word	0x0801a618
 800a3b8:	2000c4ec 	.word	0x2000c4ec
 800a3bc:	2000c4e8 	.word	0x2000c4e8
 800a3c0:	2000c4dc 	.word	0x2000c4dc
 800a3c4:	2000c4d8 	.word	0x2000c4d8

0800a3c8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f7ff ff3a 	bl	800a24c <tcp_abandon>
}
 800a3d8:	bf00      	nop
 800a3da:	3708      	adds	r7, #8
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	bd80      	pop	{r7, pc}

0800a3e0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b084      	sub	sp, #16
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d106      	bne.n	800a3fc <tcp_update_rcv_ann_wnd+0x1c>
 800a3ee:	4b25      	ldr	r3, [pc, #148]	; (800a484 <tcp_update_rcv_ann_wnd+0xa4>)
 800a3f0:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a3f4:	4924      	ldr	r1, [pc, #144]	; (800a488 <tcp_update_rcv_ann_wnd+0xa8>)
 800a3f6:	4825      	ldr	r0, [pc, #148]	; (800a48c <tcp_update_rcv_ann_wnd+0xac>)
 800a3f8:	f00d fdcc 	bl	8017f94 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800a404:	4413      	add	r3, r2
 800a406:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800a410:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800a414:	bf28      	it	cs
 800a416:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800a41a:	b292      	uxth	r2, r2
 800a41c:	4413      	add	r3, r2
 800a41e:	68fa      	ldr	r2, [r7, #12]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	2b00      	cmp	r3, #0
 800a424:	db08      	blt.n	800a438 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	1ad3      	subs	r3, r2, r3
 800a436:	e020      	b.n	800a47a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a440:	1ad3      	subs	r3, r2, r3
 800a442:	2b00      	cmp	r3, #0
 800a444:	dd03      	ble.n	800a44e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2200      	movs	r2, #0
 800a44a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a44c:	e014      	b.n	800a478 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a460:	d306      	bcc.n	800a470 <tcp_update_rcv_ann_wnd+0x90>
 800a462:	4b08      	ldr	r3, [pc, #32]	; (800a484 <tcp_update_rcv_ann_wnd+0xa4>)
 800a464:	f240 32b6 	movw	r2, #950	; 0x3b6
 800a468:	4909      	ldr	r1, [pc, #36]	; (800a490 <tcp_update_rcv_ann_wnd+0xb0>)
 800a46a:	4808      	ldr	r0, [pc, #32]	; (800a48c <tcp_update_rcv_ann_wnd+0xac>)
 800a46c:	f00d fd92 	bl	8017f94 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800a470:	68bb      	ldr	r3, [r7, #8]
 800a472:	b29a      	uxth	r2, r3
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800a478:	2300      	movs	r3, #0
  }
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}
 800a482:	bf00      	nop
 800a484:	0801a4b8 	.word	0x0801a4b8
 800a488:	0801a714 	.word	0x0801a714
 800a48c:	0801a4fc 	.word	0x0801a4fc
 800a490:	0801a738 	.word	0x0801a738

0800a494 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b084      	sub	sp, #16
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
 800a49c:	460b      	mov	r3, r1
 800a49e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d107      	bne.n	800a4b6 <tcp_recved+0x22>
 800a4a6:	4b1f      	ldr	r3, [pc, #124]	; (800a524 <tcp_recved+0x90>)
 800a4a8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800a4ac:	491e      	ldr	r1, [pc, #120]	; (800a528 <tcp_recved+0x94>)
 800a4ae:	481f      	ldr	r0, [pc, #124]	; (800a52c <tcp_recved+0x98>)
 800a4b0:	f00d fd70 	bl	8017f94 <iprintf>
 800a4b4:	e032      	b.n	800a51c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	7d1b      	ldrb	r3, [r3, #20]
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d106      	bne.n	800a4cc <tcp_recved+0x38>
 800a4be:	4b19      	ldr	r3, [pc, #100]	; (800a524 <tcp_recved+0x90>)
 800a4c0:	f240 32d3 	movw	r2, #979	; 0x3d3
 800a4c4:	491a      	ldr	r1, [pc, #104]	; (800a530 <tcp_recved+0x9c>)
 800a4c6:	4819      	ldr	r0, [pc, #100]	; (800a52c <tcp_recved+0x98>)
 800a4c8:	f00d fd64 	bl	8017f94 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800a4d0:	887b      	ldrh	r3, [r7, #2]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800a4d6:	89fb      	ldrh	r3, [r7, #14]
 800a4d8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800a4dc:	d804      	bhi.n	800a4e8 <tcp_recved+0x54>
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e2:	89fa      	ldrh	r2, [r7, #14]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d204      	bcs.n	800a4f2 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a4ee:	851a      	strh	r2, [r3, #40]	; 0x28
 800a4f0:	e002      	b.n	800a4f8 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	89fa      	ldrh	r2, [r7, #14]
 800a4f6:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800a4f8:	6878      	ldr	r0, [r7, #4]
 800a4fa:	f7ff ff71 	bl	800a3e0 <tcp_update_rcv_ann_wnd>
 800a4fe:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800a506:	d309      	bcc.n	800a51c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	8b5b      	ldrh	r3, [r3, #26]
 800a50c:	f043 0302 	orr.w	r3, r3, #2
 800a510:	b29a      	uxth	r2, r3
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800a516:	6878      	ldr	r0, [r7, #4]
 800a518:	f004 fcbe 	bl	800ee98 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800a51c:	3710      	adds	r7, #16
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}
 800a522:	bf00      	nop
 800a524:	0801a4b8 	.word	0x0801a4b8
 800a528:	0801a754 	.word	0x0801a754
 800a52c:	0801a4fc 	.word	0x0801a4fc
 800a530:	0801a76c 	.word	0x0801a76c

0800a534 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800a534:	b480      	push	{r7}
 800a536:	b083      	sub	sp, #12
 800a538:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800a53e:	4b1e      	ldr	r3, [pc, #120]	; (800a5b8 <tcp_new_port+0x84>)
 800a540:	881b      	ldrh	r3, [r3, #0]
 800a542:	3301      	adds	r3, #1
 800a544:	b29a      	uxth	r2, r3
 800a546:	4b1c      	ldr	r3, [pc, #112]	; (800a5b8 <tcp_new_port+0x84>)
 800a548:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800a54a:	4b1b      	ldr	r3, [pc, #108]	; (800a5b8 <tcp_new_port+0x84>)
 800a54c:	881b      	ldrh	r3, [r3, #0]
 800a54e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a552:	4293      	cmp	r3, r2
 800a554:	d103      	bne.n	800a55e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800a556:	4b18      	ldr	r3, [pc, #96]	; (800a5b8 <tcp_new_port+0x84>)
 800a558:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800a55c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a55e:	2300      	movs	r3, #0
 800a560:	71fb      	strb	r3, [r7, #7]
 800a562:	e01e      	b.n	800a5a2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a564:	79fb      	ldrb	r3, [r7, #7]
 800a566:	4a15      	ldr	r2, [pc, #84]	; (800a5bc <tcp_new_port+0x88>)
 800a568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	603b      	str	r3, [r7, #0]
 800a570:	e011      	b.n	800a596 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	8ada      	ldrh	r2, [r3, #22]
 800a576:	4b10      	ldr	r3, [pc, #64]	; (800a5b8 <tcp_new_port+0x84>)
 800a578:	881b      	ldrh	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d108      	bne.n	800a590 <tcp_new_port+0x5c>
        n++;
 800a57e:	88bb      	ldrh	r3, [r7, #4]
 800a580:	3301      	adds	r3, #1
 800a582:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800a584:	88bb      	ldrh	r3, [r7, #4]
 800a586:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a58a:	d3d8      	bcc.n	800a53e <tcp_new_port+0xa>
          return 0;
 800a58c:	2300      	movs	r3, #0
 800a58e:	e00d      	b.n	800a5ac <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d1ea      	bne.n	800a572 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800a59c:	79fb      	ldrb	r3, [r7, #7]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	71fb      	strb	r3, [r7, #7]
 800a5a2:	79fb      	ldrb	r3, [r7, #7]
 800a5a4:	2b03      	cmp	r3, #3
 800a5a6:	d9dd      	bls.n	800a564 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800a5a8:	4b03      	ldr	r3, [pc, #12]	; (800a5b8 <tcp_new_port+0x84>)
 800a5aa:	881b      	ldrh	r3, [r3, #0]
}
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	370c      	adds	r7, #12
 800a5b0:	46bd      	mov	sp, r7
 800a5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b6:	4770      	bx	lr
 800a5b8:	2000000c 	.word	0x2000000c
 800a5bc:	0801cad0 	.word	0x0801cad0

0800a5c0 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b08a      	sub	sp, #40	; 0x28
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	60f8      	str	r0, [r7, #12]
 800a5c8:	60b9      	str	r1, [r7, #8]
 800a5ca:	603b      	str	r3, [r7, #0]
 800a5cc:	4613      	mov	r3, r2
 800a5ce:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d109      	bne.n	800a5ee <tcp_connect+0x2e>
 800a5da:	4b7d      	ldr	r3, [pc, #500]	; (800a7d0 <tcp_connect+0x210>)
 800a5dc:	f240 4235 	movw	r2, #1077	; 0x435
 800a5e0:	497c      	ldr	r1, [pc, #496]	; (800a7d4 <tcp_connect+0x214>)
 800a5e2:	487d      	ldr	r0, [pc, #500]	; (800a7d8 <tcp_connect+0x218>)
 800a5e4:	f00d fcd6 	bl	8017f94 <iprintf>
 800a5e8:	f06f 030f 	mvn.w	r3, #15
 800a5ec:	e0ec      	b.n	800a7c8 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d109      	bne.n	800a608 <tcp_connect+0x48>
 800a5f4:	4b76      	ldr	r3, [pc, #472]	; (800a7d0 <tcp_connect+0x210>)
 800a5f6:	f240 4236 	movw	r2, #1078	; 0x436
 800a5fa:	4978      	ldr	r1, [pc, #480]	; (800a7dc <tcp_connect+0x21c>)
 800a5fc:	4876      	ldr	r0, [pc, #472]	; (800a7d8 <tcp_connect+0x218>)
 800a5fe:	f00d fcc9 	bl	8017f94 <iprintf>
 800a602:	f06f 030f 	mvn.w	r3, #15
 800a606:	e0df      	b.n	800a7c8 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	7d1b      	ldrb	r3, [r3, #20]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d009      	beq.n	800a624 <tcp_connect+0x64>
 800a610:	4b6f      	ldr	r3, [pc, #444]	; (800a7d0 <tcp_connect+0x210>)
 800a612:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800a616:	4972      	ldr	r1, [pc, #456]	; (800a7e0 <tcp_connect+0x220>)
 800a618:	486f      	ldr	r0, [pc, #444]	; (800a7d8 <tcp_connect+0x218>)
 800a61a:	f00d fcbb 	bl	8017f94 <iprintf>
 800a61e:	f06f 0309 	mvn.w	r3, #9
 800a622:	e0d1      	b.n	800a7c8 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d002      	beq.n	800a630 <tcp_connect+0x70>
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	e000      	b.n	800a632 <tcp_connect+0x72>
 800a630:	2300      	movs	r3, #0
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	88fa      	ldrh	r2, [r7, #6]
 800a63a:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	7a1b      	ldrb	r3, [r3, #8]
 800a640:	2b00      	cmp	r3, #0
 800a642:	d006      	beq.n	800a652 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	7a1b      	ldrb	r3, [r3, #8]
 800a648:	4618      	mov	r0, r3
 800a64a:	f7fe fd3d 	bl	80090c8 <netif_get_by_index>
 800a64e:	6278      	str	r0, [r7, #36]	; 0x24
 800a650:	e005      	b.n	800a65e <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	3304      	adds	r3, #4
 800a656:	4618      	mov	r0, r3
 800a658:	f009 f964 	bl	8013924 <ip4_route>
 800a65c:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800a65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a660:	2b00      	cmp	r3, #0
 800a662:	d102      	bne.n	800a66a <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800a664:	f06f 0303 	mvn.w	r3, #3
 800a668:	e0ae      	b.n	800a7c8 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <tcp_connect+0xb8>
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d111      	bne.n	800a69c <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d002      	beq.n	800a684 <tcp_connect+0xc4>
 800a67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a680:	3304      	adds	r3, #4
 800a682:	e000      	b.n	800a686 <tcp_connect+0xc6>
 800a684:	2300      	movs	r3, #0
 800a686:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800a688:	69fb      	ldr	r3, [r7, #28]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <tcp_connect+0xd4>
      return ERR_RTE;
 800a68e:	f06f 0303 	mvn.w	r3, #3
 800a692:	e099      	b.n	800a7c8 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	681a      	ldr	r2, [r3, #0]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	8adb      	ldrh	r3, [r3, #22]
 800a6a0:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	8adb      	ldrh	r3, [r3, #22]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d10c      	bne.n	800a6c4 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800a6aa:	f7ff ff43 	bl	800a534 <tcp_new_port>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	8adb      	ldrh	r3, [r3, #22]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d102      	bne.n	800a6c4 <tcp_connect+0x104>
      return ERR_BUF;
 800a6be:	f06f 0301 	mvn.w	r3, #1
 800a6c2:	e081      	b.n	800a7c8 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800a6c4:	68f8      	ldr	r0, [r7, #12]
 800a6c6:	f001 f863 	bl	800b790 <tcp_next_iss>
 800a6ca:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	697a      	ldr	r2, [r7, #20]
 800a6d6:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	1e5a      	subs	r2, r3, #1
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	1e5a      	subs	r2, r3, #1
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800a6e8:	697b      	ldr	r3, [r7, #20]
 800a6ea:	1e5a      	subs	r2, r3, #1
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a6f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800a70e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	f44f 7206 	mov.w	r2, #536	; 0x218
 800a718:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	3304      	adds	r3, #4
 800a722:	461a      	mov	r2, r3
 800a724:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a726:	f001 f859 	bl	800b7dc <tcp_eff_send_mss_netif>
 800a72a:	4603      	mov	r3, r0
 800a72c:	461a      	mov	r2, r3
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2201      	movs	r2, #1
 800a736:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	683a      	ldr	r2, [r7, #0]
 800a73e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800a742:	2102      	movs	r1, #2
 800a744:	68f8      	ldr	r0, [r7, #12]
 800a746:	f004 fab9 	bl	800ecbc <tcp_enqueue_flags>
 800a74a:	4603      	mov	r3, r0
 800a74c:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800a74e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800a752:	2b00      	cmp	r3, #0
 800a754:	d136      	bne.n	800a7c4 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2202      	movs	r2, #2
 800a75a:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800a75c:	8b7b      	ldrh	r3, [r7, #26]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d021      	beq.n	800a7a6 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800a762:	4b20      	ldr	r3, [pc, #128]	; (800a7e4 <tcp_connect+0x224>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	68fa      	ldr	r2, [r7, #12]
 800a768:	429a      	cmp	r2, r3
 800a76a:	d105      	bne.n	800a778 <tcp_connect+0x1b8>
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <tcp_connect+0x224>)
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <tcp_connect+0x224>)
 800a774:	6013      	str	r3, [r2, #0]
 800a776:	e013      	b.n	800a7a0 <tcp_connect+0x1e0>
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <tcp_connect+0x224>)
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	623b      	str	r3, [r7, #32]
 800a77e:	e00c      	b.n	800a79a <tcp_connect+0x1da>
 800a780:	6a3b      	ldr	r3, [r7, #32]
 800a782:	68db      	ldr	r3, [r3, #12]
 800a784:	68fa      	ldr	r2, [r7, #12]
 800a786:	429a      	cmp	r2, r3
 800a788:	d104      	bne.n	800a794 <tcp_connect+0x1d4>
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	68da      	ldr	r2, [r3, #12]
 800a78e:	6a3b      	ldr	r3, [r7, #32]
 800a790:	60da      	str	r2, [r3, #12]
 800a792:	e005      	b.n	800a7a0 <tcp_connect+0x1e0>
 800a794:	6a3b      	ldr	r3, [r7, #32]
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	623b      	str	r3, [r7, #32]
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d1ef      	bne.n	800a780 <tcp_connect+0x1c0>
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <tcp_connect+0x228>)
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	60da      	str	r2, [r3, #12]
 800a7ae:	4a0e      	ldr	r2, [pc, #56]	; (800a7e8 <tcp_connect+0x228>)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	f005 faf6 	bl	800fda4 <tcp_timer_needed>
 800a7b8:	4b0c      	ldr	r3, [pc, #48]	; (800a7ec <tcp_connect+0x22c>)
 800a7ba:	2201      	movs	r2, #1
 800a7bc:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f004 fb6a 	bl	800ee98 <tcp_output>
  }
  return ret;
 800a7c4:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3728      	adds	r7, #40	; 0x28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}
 800a7d0:	0801a4b8 	.word	0x0801a4b8
 800a7d4:	0801a794 	.word	0x0801a794
 800a7d8:	0801a4fc 	.word	0x0801a4fc
 800a7dc:	0801a7b0 	.word	0x0801a7b0
 800a7e0:	0801a7cc 	.word	0x0801a7cc
 800a7e4:	2000c4e8 	.word	0x2000c4e8
 800a7e8:	2000c4dc 	.word	0x2000c4dc
 800a7ec:	2000c4d8 	.word	0x2000c4d8

0800a7f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800a7f0:	b5b0      	push	{r4, r5, r7, lr}
 800a7f2:	b090      	sub	sp, #64	; 0x40
 800a7f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800a7fc:	4b94      	ldr	r3, [pc, #592]	; (800aa50 <tcp_slowtmr+0x260>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	3301      	adds	r3, #1
 800a802:	4a93      	ldr	r2, [pc, #588]	; (800aa50 <tcp_slowtmr+0x260>)
 800a804:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800a806:	4b93      	ldr	r3, [pc, #588]	; (800aa54 <tcp_slowtmr+0x264>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	3301      	adds	r3, #1
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	4b91      	ldr	r3, [pc, #580]	; (800aa54 <tcp_slowtmr+0x264>)
 800a810:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800a812:	2300      	movs	r3, #0
 800a814:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800a816:	4b90      	ldr	r3, [pc, #576]	; (800aa58 <tcp_slowtmr+0x268>)
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800a81c:	e29f      	b.n	800ad5e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800a81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a820:	7d1b      	ldrb	r3, [r3, #20]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d106      	bne.n	800a834 <tcp_slowtmr+0x44>
 800a826:	4b8d      	ldr	r3, [pc, #564]	; (800aa5c <tcp_slowtmr+0x26c>)
 800a828:	f240 42be 	movw	r2, #1214	; 0x4be
 800a82c:	498c      	ldr	r1, [pc, #560]	; (800aa60 <tcp_slowtmr+0x270>)
 800a82e:	488d      	ldr	r0, [pc, #564]	; (800aa64 <tcp_slowtmr+0x274>)
 800a830:	f00d fbb0 	bl	8017f94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800a834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a836:	7d1b      	ldrb	r3, [r3, #20]
 800a838:	2b01      	cmp	r3, #1
 800a83a:	d106      	bne.n	800a84a <tcp_slowtmr+0x5a>
 800a83c:	4b87      	ldr	r3, [pc, #540]	; (800aa5c <tcp_slowtmr+0x26c>)
 800a83e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800a842:	4989      	ldr	r1, [pc, #548]	; (800aa68 <tcp_slowtmr+0x278>)
 800a844:	4887      	ldr	r0, [pc, #540]	; (800aa64 <tcp_slowtmr+0x274>)
 800a846:	f00d fba5 	bl	8017f94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800a84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a84c:	7d1b      	ldrb	r3, [r3, #20]
 800a84e:	2b0a      	cmp	r3, #10
 800a850:	d106      	bne.n	800a860 <tcp_slowtmr+0x70>
 800a852:	4b82      	ldr	r3, [pc, #520]	; (800aa5c <tcp_slowtmr+0x26c>)
 800a854:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800a858:	4984      	ldr	r1, [pc, #528]	; (800aa6c <tcp_slowtmr+0x27c>)
 800a85a:	4882      	ldr	r0, [pc, #520]	; (800aa64 <tcp_slowtmr+0x274>)
 800a85c:	f00d fb9a 	bl	8017f94 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800a860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a862:	7f9a      	ldrb	r2, [r3, #30]
 800a864:	4b7b      	ldr	r3, [pc, #492]	; (800aa54 <tcp_slowtmr+0x264>)
 800a866:	781b      	ldrb	r3, [r3, #0]
 800a868:	429a      	cmp	r2, r3
 800a86a:	d105      	bne.n	800a878 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800a86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a86e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800a870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a872:	68db      	ldr	r3, [r3, #12]
 800a874:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800a876:	e272      	b.n	800ad5e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800a878:	4b76      	ldr	r3, [pc, #472]	; (800aa54 <tcp_slowtmr+0x264>)
 800a87a:	781a      	ldrb	r2, [r3, #0]
 800a87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a87e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800a880:	2300      	movs	r3, #0
 800a882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800a886:	2300      	movs	r3, #0
 800a888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800a88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88e:	7d1b      	ldrb	r3, [r3, #20]
 800a890:	2b02      	cmp	r3, #2
 800a892:	d10a      	bne.n	800a8aa <tcp_slowtmr+0xba>
 800a894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a89a:	2b05      	cmp	r3, #5
 800a89c:	d905      	bls.n	800a8aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800a89e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8a2:	3301      	adds	r3, #1
 800a8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8a8:	e11e      	b.n	800aae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800a8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a8b0:	2b0b      	cmp	r3, #11
 800a8b2:	d905      	bls.n	800a8c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800a8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8b8:	3301      	adds	r3, #1
 800a8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a8be:	e113      	b.n	800aae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d075      	beq.n	800a9b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800a8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d006      	beq.n	800a8e0 <tcp_slowtmr+0xf0>
 800a8d2:	4b62      	ldr	r3, [pc, #392]	; (800aa5c <tcp_slowtmr+0x26c>)
 800a8d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800a8d8:	4965      	ldr	r1, [pc, #404]	; (800aa70 <tcp_slowtmr+0x280>)
 800a8da:	4862      	ldr	r0, [pc, #392]	; (800aa64 <tcp_slowtmr+0x274>)
 800a8dc:	f00d fb5a 	bl	8017f94 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800a8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d106      	bne.n	800a8f6 <tcp_slowtmr+0x106>
 800a8e8:	4b5c      	ldr	r3, [pc, #368]	; (800aa5c <tcp_slowtmr+0x26c>)
 800a8ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800a8ee:	4961      	ldr	r1, [pc, #388]	; (800aa74 <tcp_slowtmr+0x284>)
 800a8f0:	485c      	ldr	r0, [pc, #368]	; (800aa64 <tcp_slowtmr+0x274>)
 800a8f2:	f00d fb4f 	bl	8017f94 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800a8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a8fc:	2b0b      	cmp	r3, #11
 800a8fe:	d905      	bls.n	800a90c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800a900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a904:	3301      	adds	r3, #1
 800a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a90a:	e0ed      	b.n	800aae8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800a90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a90e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a912:	3b01      	subs	r3, #1
 800a914:	4a58      	ldr	r2, [pc, #352]	; (800aa78 <tcp_slowtmr+0x288>)
 800a916:	5cd3      	ldrb	r3, [r2, r3]
 800a918:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800a91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a920:	7c7a      	ldrb	r2, [r7, #17]
 800a922:	429a      	cmp	r2, r3
 800a924:	d907      	bls.n	800a936 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800a926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a92c:	3301      	adds	r3, #1
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a932:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800a936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a938:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800a93c:	7c7a      	ldrb	r2, [r7, #17]
 800a93e:	429a      	cmp	r2, r3
 800a940:	f200 80d2 	bhi.w	800aae8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800a944:	2301      	movs	r3, #1
 800a946:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800a948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a94a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d108      	bne.n	800a964 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800a952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a954:	f005 f958 	bl	800fc08 <tcp_zero_window_probe>
 800a958:	4603      	mov	r3, r0
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d014      	beq.n	800a988 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800a95e:	2300      	movs	r3, #0
 800a960:	623b      	str	r3, [r7, #32]
 800a962:	e011      	b.n	800a988 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800a964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a96a:	4619      	mov	r1, r3
 800a96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a96e:	f004 f80d 	bl	800e98c <tcp_split_unsent_seg>
 800a972:	4603      	mov	r3, r0
 800a974:	2b00      	cmp	r3, #0
 800a976:	d107      	bne.n	800a988 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800a978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a97a:	f004 fa8d 	bl	800ee98 <tcp_output>
 800a97e:	4603      	mov	r3, r0
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800a988:	6a3b      	ldr	r3, [r7, #32]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f000 80ac 	beq.w	800aae8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800a990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a992:	2200      	movs	r2, #0
 800a994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800a998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a99a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a99e:	2b06      	cmp	r3, #6
 800a9a0:	f200 80a2 	bhi.w	800aae8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800a9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800a9aa:	3301      	adds	r3, #1
 800a9ac:	b2da      	uxtb	r2, r3
 800a9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800a9b4:	e098      	b.n	800aae8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800a9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	db0f      	blt.n	800a9e0 <tcp_slowtmr+0x1f0>
 800a9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d008      	beq.n	800a9e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800a9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a9d4:	b29b      	uxth	r3, r3
 800a9d6:	3301      	adds	r3, #1
 800a9d8:	b29b      	uxth	r3, r3
 800a9da:	b21a      	sxth	r2, r3
 800a9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800a9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800a9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800a9ec:	429a      	cmp	r2, r3
 800a9ee:	db7b      	blt.n	800aae8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800a9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a9f2:	f004 fd49 	bl	800f488 <tcp_rexmit_rto_prepare>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d007      	beq.n	800aa0c <tcp_slowtmr+0x21c>
 800a9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d171      	bne.n	800aae8 <tcp_slowtmr+0x2f8>
 800aa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d06d      	beq.n	800aae8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800aa0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0e:	7d1b      	ldrb	r3, [r3, #20]
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d03a      	beq.n	800aa8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800aa14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800aa1a:	2b0c      	cmp	r3, #12
 800aa1c:	bf28      	it	cs
 800aa1e:	230c      	movcs	r3, #12
 800aa20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800aa22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800aa28:	10db      	asrs	r3, r3, #3
 800aa2a:	b21b      	sxth	r3, r3
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800aa34:	4413      	add	r3, r2
 800aa36:	7efa      	ldrb	r2, [r7, #27]
 800aa38:	4910      	ldr	r1, [pc, #64]	; (800aa7c <tcp_slowtmr+0x28c>)
 800aa3a:	5c8a      	ldrb	r2, [r1, r2]
 800aa3c:	4093      	lsls	r3, r2
 800aa3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800aa40:	697b      	ldr	r3, [r7, #20]
 800aa42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800aa46:	4293      	cmp	r3, r2
 800aa48:	dc1a      	bgt.n	800aa80 <tcp_slowtmr+0x290>
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	b21a      	sxth	r2, r3
 800aa4e:	e019      	b.n	800aa84 <tcp_slowtmr+0x294>
 800aa50:	2000c4e0 	.word	0x2000c4e0
 800aa54:	200083aa 	.word	0x200083aa
 800aa58:	2000c4dc 	.word	0x2000c4dc
 800aa5c:	0801a4b8 	.word	0x0801a4b8
 800aa60:	0801a7fc 	.word	0x0801a7fc
 800aa64:	0801a4fc 	.word	0x0801a4fc
 800aa68:	0801a828 	.word	0x0801a828
 800aa6c:	0801a854 	.word	0x0801a854
 800aa70:	0801a884 	.word	0x0801a884
 800aa74:	0801a8b8 	.word	0x0801a8b8
 800aa78:	0801cac8 	.word	0x0801cac8
 800aa7c:	0801cab8 	.word	0x0801cab8
 800aa80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800aa84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800aa8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800aa90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800aa96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	bf28      	it	cs
 800aaa0:	4613      	movcs	r3, r2
 800aaa2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800aaa4:	8a7b      	ldrh	r3, [r7, #18]
 800aaa6:	085b      	lsrs	r3, r3, #1
 800aaa8:	b29a      	uxth	r2, r3
 800aaaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800aab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800aab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	b29b      	uxth	r3, r3
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d206      	bcs.n	800aad0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800aac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800aac6:	005b      	lsls	r3, r3, #1
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aacc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800aad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800aada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aadc:	2200      	movs	r2, #0
 800aade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800aae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aae4:	f004 fd40 	bl	800f568 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800aae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaea:	7d1b      	ldrb	r3, [r3, #20]
 800aaec:	2b06      	cmp	r3, #6
 800aaee:	d111      	bne.n	800ab14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800aaf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf2:	8b5b      	ldrh	r3, [r3, #26]
 800aaf4:	f003 0310 	and.w	r3, r3, #16
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00b      	beq.n	800ab14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800aafc:	4b9d      	ldr	r3, [pc, #628]	; (800ad74 <tcp_slowtmr+0x584>)
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	6a1b      	ldr	r3, [r3, #32]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	2b28      	cmp	r3, #40	; 0x28
 800ab08:	d904      	bls.n	800ab14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ab0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab0e:	3301      	adds	r3, #1
 800ab10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab16:	7a5b      	ldrb	r3, [r3, #9]
 800ab18:	f003 0308 	and.w	r3, r3, #8
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d04c      	beq.n	800abba <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ab24:	2b04      	cmp	r3, #4
 800ab26:	d003      	beq.n	800ab30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ab2c:	2b07      	cmp	r3, #7
 800ab2e:	d144      	bne.n	800abba <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab30:	4b90      	ldr	r3, [pc, #576]	; (800ad74 <tcp_slowtmr+0x584>)
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab36:	6a1b      	ldr	r3, [r3, #32]
 800ab38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800ab3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ab40:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800ab44:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800ab48:	498b      	ldr	r1, [pc, #556]	; (800ad78 <tcp_slowtmr+0x588>)
 800ab4a:	fba1 1303 	umull	r1, r3, r1, r3
 800ab4e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab50:	429a      	cmp	r2, r3
 800ab52:	d90a      	bls.n	800ab6a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ab54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ab58:	3301      	adds	r3, #1
 800ab5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800ab5e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ab62:	3301      	adds	r3, #1
 800ab64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ab68:	e027      	b.n	800abba <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab6a:	4b82      	ldr	r3, [pc, #520]	; (800ad74 <tcp_slowtmr+0x584>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab70:	6a1b      	ldr	r3, [r3, #32]
 800ab72:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800ab74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab76:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800ab80:	4618      	mov	r0, r3
 800ab82:	4b7e      	ldr	r3, [pc, #504]	; (800ad7c <tcp_slowtmr+0x58c>)
 800ab84:	fb03 f300 	mul.w	r3, r3, r0
 800ab88:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800ab8a:	497b      	ldr	r1, [pc, #492]	; (800ad78 <tcp_slowtmr+0x588>)
 800ab8c:	fba1 1303 	umull	r1, r3, r1, r3
 800ab90:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d911      	bls.n	800abba <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800ab96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ab98:	f004 fff6 	bl	800fb88 <tcp_keepalive>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800aba2:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d107      	bne.n	800abba <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800abaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abac:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800abb0:	3301      	adds	r3, #1
 800abb2:	b2da      	uxtb	r2, r3
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abb6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800abba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d011      	beq.n	800abe6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800abc2:	4b6c      	ldr	r3, [pc, #432]	; (800ad74 <tcp_slowtmr+0x584>)
 800abc4:	681a      	ldr	r2, [r3, #0]
 800abc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abc8:	6a1b      	ldr	r3, [r3, #32]
 800abca:	1ad2      	subs	r2, r2, r3
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800abd2:	4619      	mov	r1, r3
 800abd4:	460b      	mov	r3, r1
 800abd6:	005b      	lsls	r3, r3, #1
 800abd8:	440b      	add	r3, r1
 800abda:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800abdc:	429a      	cmp	r2, r3
 800abde:	d302      	bcc.n	800abe6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800abe0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800abe2:	f000 fea5 	bl	800b930 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800abe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe8:	7d1b      	ldrb	r3, [r3, #20]
 800abea:	2b03      	cmp	r3, #3
 800abec:	d10b      	bne.n	800ac06 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800abee:	4b61      	ldr	r3, [pc, #388]	; (800ad74 <tcp_slowtmr+0x584>)
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf4:	6a1b      	ldr	r3, [r3, #32]
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	2b28      	cmp	r3, #40	; 0x28
 800abfa:	d904      	bls.n	800ac06 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800abfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac00:	3301      	adds	r3, #1
 800ac02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800ac06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac08:	7d1b      	ldrb	r3, [r3, #20]
 800ac0a:	2b09      	cmp	r3, #9
 800ac0c:	d10b      	bne.n	800ac26 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800ac0e:	4b59      	ldr	r3, [pc, #356]	; (800ad74 <tcp_slowtmr+0x584>)
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	1ad3      	subs	r3, r2, r3
 800ac18:	2bf0      	cmp	r3, #240	; 0xf0
 800ac1a:	d904      	bls.n	800ac26 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800ac1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac20:	3301      	adds	r3, #1
 800ac22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800ac26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d060      	beq.n	800acf0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800ac2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac34:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800ac36:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ac38:	f000 fcc6 	bl	800b5c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800ac3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d010      	beq.n	800ac64 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800ac42:	4b4f      	ldr	r3, [pc, #316]	; (800ad80 <tcp_slowtmr+0x590>)
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac48:	429a      	cmp	r2, r3
 800ac4a:	d106      	bne.n	800ac5a <tcp_slowtmr+0x46a>
 800ac4c:	4b4d      	ldr	r3, [pc, #308]	; (800ad84 <tcp_slowtmr+0x594>)
 800ac4e:	f240 526d 	movw	r2, #1389	; 0x56d
 800ac52:	494d      	ldr	r1, [pc, #308]	; (800ad88 <tcp_slowtmr+0x598>)
 800ac54:	484d      	ldr	r0, [pc, #308]	; (800ad8c <tcp_slowtmr+0x59c>)
 800ac56:	f00d f99d 	bl	8017f94 <iprintf>
        prev->next = pcb->next;
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	68da      	ldr	r2, [r3, #12]
 800ac5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac60:	60da      	str	r2, [r3, #12]
 800ac62:	e00f      	b.n	800ac84 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ac64:	4b46      	ldr	r3, [pc, #280]	; (800ad80 <tcp_slowtmr+0x590>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d006      	beq.n	800ac7c <tcp_slowtmr+0x48c>
 800ac6e:	4b45      	ldr	r3, [pc, #276]	; (800ad84 <tcp_slowtmr+0x594>)
 800ac70:	f240 5271 	movw	r2, #1393	; 0x571
 800ac74:	4946      	ldr	r1, [pc, #280]	; (800ad90 <tcp_slowtmr+0x5a0>)
 800ac76:	4845      	ldr	r0, [pc, #276]	; (800ad8c <tcp_slowtmr+0x59c>)
 800ac78:	f00d f98c 	bl	8017f94 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	4a3f      	ldr	r2, [pc, #252]	; (800ad80 <tcp_slowtmr+0x590>)
 800ac82:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ac84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	d013      	beq.n	800acb4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ac8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ac90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac92:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ac94:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ac96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac98:	3304      	adds	r3, #4
 800ac9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac9c:	8ad2      	ldrh	r2, [r2, #22]
 800ac9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800aca0:	8b09      	ldrh	r1, [r1, #24]
 800aca2:	9102      	str	r1, [sp, #8]
 800aca4:	9201      	str	r2, [sp, #4]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	462b      	mov	r3, r5
 800acaa:	4622      	mov	r2, r4
 800acac:	4601      	mov	r1, r0
 800acae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800acb0:	f004 feb6 	bl	800fa20 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	691b      	ldr	r3, [r3, #16]
 800acb8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800acba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acbc:	7d1b      	ldrb	r3, [r3, #20]
 800acbe:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800acc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800acc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800acca:	6838      	ldr	r0, [r7, #0]
 800accc:	f7ff f842 	bl	8009d54 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800acd0:	4b30      	ldr	r3, [pc, #192]	; (800ad94 <tcp_slowtmr+0x5a4>)
 800acd2:	2200      	movs	r2, #0
 800acd4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d004      	beq.n	800ace6 <tcp_slowtmr+0x4f6>
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f06f 010c 	mvn.w	r1, #12
 800ace2:	68b8      	ldr	r0, [r7, #8]
 800ace4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ace6:	4b2b      	ldr	r3, [pc, #172]	; (800ad94 <tcp_slowtmr+0x5a4>)
 800ace8:	781b      	ldrb	r3, [r3, #0]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d037      	beq.n	800ad5e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800acee:	e590      	b.n	800a812 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800acf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf6:	68db      	ldr	r3, [r3, #12]
 800acf8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acfc:	7f1b      	ldrb	r3, [r3, #28]
 800acfe:	3301      	adds	r3, #1
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad04:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ad06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad08:	7f1a      	ldrb	r2, [r3, #28]
 800ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad0c:	7f5b      	ldrb	r3, [r3, #29]
 800ad0e:	429a      	cmp	r2, r3
 800ad10:	d325      	bcc.n	800ad5e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ad12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad14:	2200      	movs	r2, #0
 800ad16:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ad18:	4b1e      	ldr	r3, [pc, #120]	; (800ad94 <tcp_slowtmr+0x5a4>)
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ad1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00b      	beq.n	800ad40 <tcp_slowtmr+0x550>
 800ad28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad30:	6912      	ldr	r2, [r2, #16]
 800ad32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	4603      	mov	r3, r0
 800ad3a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ad3e:	e002      	b.n	800ad46 <tcp_slowtmr+0x556>
 800ad40:	2300      	movs	r3, #0
 800ad42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ad46:	4b13      	ldr	r3, [pc, #76]	; (800ad94 <tcp_slowtmr+0x5a4>)
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d000      	beq.n	800ad50 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ad4e:	e560      	b.n	800a812 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ad50:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d102      	bne.n	800ad5e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ad58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad5a:	f004 f89d 	bl	800ee98 <tcp_output>
  while (pcb != NULL) {
 800ad5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f47f ad5c 	bne.w	800a81e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ad66:	2300      	movs	r3, #0
 800ad68:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	; (800ad98 <tcp_slowtmr+0x5a8>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ad70:	e067      	b.n	800ae42 <tcp_slowtmr+0x652>
 800ad72:	bf00      	nop
 800ad74:	2000c4e0 	.word	0x2000c4e0
 800ad78:	10624dd3 	.word	0x10624dd3
 800ad7c:	000124f8 	.word	0x000124f8
 800ad80:	2000c4dc 	.word	0x2000c4dc
 800ad84:	0801a4b8 	.word	0x0801a4b8
 800ad88:	0801a8f0 	.word	0x0801a8f0
 800ad8c:	0801a4fc 	.word	0x0801a4fc
 800ad90:	0801a91c 	.word	0x0801a91c
 800ad94:	2000c4d8 	.word	0x2000c4d8
 800ad98:	2000c4ec 	.word	0x2000c4ec
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ad9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad9e:	7d1b      	ldrb	r3, [r3, #20]
 800ada0:	2b0a      	cmp	r3, #10
 800ada2:	d006      	beq.n	800adb2 <tcp_slowtmr+0x5c2>
 800ada4:	4b2a      	ldr	r3, [pc, #168]	; (800ae50 <tcp_slowtmr+0x660>)
 800ada6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800adaa:	492a      	ldr	r1, [pc, #168]	; (800ae54 <tcp_slowtmr+0x664>)
 800adac:	482a      	ldr	r0, [pc, #168]	; (800ae58 <tcp_slowtmr+0x668>)
 800adae:	f00d f8f1 	bl	8017f94 <iprintf>
    pcb_remove = 0;
 800adb2:	2300      	movs	r3, #0
 800adb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800adb8:	4b28      	ldr	r3, [pc, #160]	; (800ae5c <tcp_slowtmr+0x66c>)
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adbe:	6a1b      	ldr	r3, [r3, #32]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	2bf0      	cmp	r3, #240	; 0xf0
 800adc4:	d904      	bls.n	800add0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800adc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800adca:	3301      	adds	r3, #1
 800adcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800add0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800add4:	2b00      	cmp	r3, #0
 800add6:	d02f      	beq.n	800ae38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800add8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adda:	f000 fbf5 	bl	800b5c8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800adde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d010      	beq.n	800ae06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800ade4:	4b1e      	ldr	r3, [pc, #120]	; (800ae60 <tcp_slowtmr+0x670>)
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adea:	429a      	cmp	r2, r3
 800adec:	d106      	bne.n	800adfc <tcp_slowtmr+0x60c>
 800adee:	4b18      	ldr	r3, [pc, #96]	; (800ae50 <tcp_slowtmr+0x660>)
 800adf0:	f240 52af 	movw	r2, #1455	; 0x5af
 800adf4:	491b      	ldr	r1, [pc, #108]	; (800ae64 <tcp_slowtmr+0x674>)
 800adf6:	4818      	ldr	r0, [pc, #96]	; (800ae58 <tcp_slowtmr+0x668>)
 800adf8:	f00d f8cc 	bl	8017f94 <iprintf>
        prev->next = pcb->next;
 800adfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfe:	68da      	ldr	r2, [r3, #12]
 800ae00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae02:	60da      	str	r2, [r3, #12]
 800ae04:	e00f      	b.n	800ae26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ae06:	4b16      	ldr	r3, [pc, #88]	; (800ae60 <tcp_slowtmr+0x670>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d006      	beq.n	800ae1e <tcp_slowtmr+0x62e>
 800ae10:	4b0f      	ldr	r3, [pc, #60]	; (800ae50 <tcp_slowtmr+0x660>)
 800ae12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ae16:	4914      	ldr	r1, [pc, #80]	; (800ae68 <tcp_slowtmr+0x678>)
 800ae18:	480f      	ldr	r0, [pc, #60]	; (800ae58 <tcp_slowtmr+0x668>)
 800ae1a:	f00d f8bb 	bl	8017f94 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ae1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae20:	68db      	ldr	r3, [r3, #12]
 800ae22:	4a0f      	ldr	r2, [pc, #60]	; (800ae60 <tcp_slowtmr+0x670>)
 800ae24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ae26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ae2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ae30:	69f8      	ldr	r0, [r7, #28]
 800ae32:	f7fe ff8f 	bl	8009d54 <tcp_free>
 800ae36:	e004      	b.n	800ae42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ae38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ae3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ae42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d1a9      	bne.n	800ad9c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ae48:	bf00      	nop
 800ae4a:	3730      	adds	r7, #48	; 0x30
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bdb0      	pop	{r4, r5, r7, pc}
 800ae50:	0801a4b8 	.word	0x0801a4b8
 800ae54:	0801a948 	.word	0x0801a948
 800ae58:	0801a4fc 	.word	0x0801a4fc
 800ae5c:	2000c4e0 	.word	0x2000c4e0
 800ae60:	2000c4ec 	.word	0x2000c4ec
 800ae64:	0801a978 	.word	0x0801a978
 800ae68:	0801a9a0 	.word	0x0801a9a0

0800ae6c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ae72:	4b2d      	ldr	r3, [pc, #180]	; (800af28 <tcp_fasttmr+0xbc>)
 800ae74:	781b      	ldrb	r3, [r3, #0]
 800ae76:	3301      	adds	r3, #1
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b2b      	ldr	r3, [pc, #172]	; (800af28 <tcp_fasttmr+0xbc>)
 800ae7c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ae7e:	4b2b      	ldr	r3, [pc, #172]	; (800af2c <tcp_fasttmr+0xc0>)
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ae84:	e048      	b.n	800af18 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	7f9a      	ldrb	r2, [r3, #30]
 800ae8a:	4b27      	ldr	r3, [pc, #156]	; (800af28 <tcp_fasttmr+0xbc>)
 800ae8c:	781b      	ldrb	r3, [r3, #0]
 800ae8e:	429a      	cmp	r2, r3
 800ae90:	d03f      	beq.n	800af12 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ae92:	4b25      	ldr	r3, [pc, #148]	; (800af28 <tcp_fasttmr+0xbc>)
 800ae94:	781a      	ldrb	r2, [r3, #0]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	8b5b      	ldrh	r3, [r3, #26]
 800ae9e:	f003 0301 	and.w	r3, r3, #1
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d010      	beq.n	800aec8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	8b5b      	ldrh	r3, [r3, #26]
 800aeaa:	f043 0302 	orr.w	r3, r3, #2
 800aeae:	b29a      	uxth	r2, r3
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f003 ffef 	bl	800ee98 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	8b5b      	ldrh	r3, [r3, #26]
 800aebe:	f023 0303 	bic.w	r3, r3, #3
 800aec2:	b29a      	uxth	r2, r3
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	8b5b      	ldrh	r3, [r3, #26]
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d009      	beq.n	800aee8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	8b5b      	ldrh	r3, [r3, #26]
 800aed8:	f023 0308 	bic.w	r3, r3, #8
 800aedc:	b29a      	uxth	r2, r3
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7ff f8c6 	bl	800a074 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800aef6:	4b0e      	ldr	r3, [pc, #56]	; (800af30 <tcp_fasttmr+0xc4>)
 800aef8:	2200      	movs	r2, #0
 800aefa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f819 	bl	800af34 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800af02:	4b0b      	ldr	r3, [pc, #44]	; (800af30 <tcp_fasttmr+0xc4>)
 800af04:	781b      	ldrb	r3, [r3, #0]
 800af06:	2b00      	cmp	r3, #0
 800af08:	d000      	beq.n	800af0c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800af0a:	e7b8      	b.n	800ae7e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	607b      	str	r3, [r7, #4]
 800af10:	e002      	b.n	800af18 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	68db      	ldr	r3, [r3, #12]
 800af16:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d1b3      	bne.n	800ae86 <tcp_fasttmr+0x1a>
    }
  }
}
 800af1e:	bf00      	nop
 800af20:	3708      	adds	r7, #8
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	200083aa 	.word	0x200083aa
 800af2c:	2000c4dc 	.word	0x2000c4dc
 800af30:	2000c4d8 	.word	0x2000c4d8

0800af34 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800af34:	b590      	push	{r4, r7, lr}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d109      	bne.n	800af56 <tcp_process_refused_data+0x22>
 800af42:	4b37      	ldr	r3, [pc, #220]	; (800b020 <tcp_process_refused_data+0xec>)
 800af44:	f240 6209 	movw	r2, #1545	; 0x609
 800af48:	4936      	ldr	r1, [pc, #216]	; (800b024 <tcp_process_refused_data+0xf0>)
 800af4a:	4837      	ldr	r0, [pc, #220]	; (800b028 <tcp_process_refused_data+0xf4>)
 800af4c:	f00d f822 	bl	8017f94 <iprintf>
 800af50:	f06f 030f 	mvn.w	r3, #15
 800af54:	e060      	b.n	800b018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af5a:	7b5b      	ldrb	r3, [r3, #13]
 800af5c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af62:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2200      	movs	r2, #0
 800af68:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af70:	2b00      	cmp	r3, #0
 800af72:	d00b      	beq.n	800af8c <tcp_process_refused_data+0x58>
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	6918      	ldr	r0, [r3, #16]
 800af7e:	2300      	movs	r3, #0
 800af80:	68ba      	ldr	r2, [r7, #8]
 800af82:	6879      	ldr	r1, [r7, #4]
 800af84:	47a0      	blx	r4
 800af86:	4603      	mov	r3, r0
 800af88:	73fb      	strb	r3, [r7, #15]
 800af8a:	e007      	b.n	800af9c <tcp_process_refused_data+0x68>
 800af8c:	2300      	movs	r3, #0
 800af8e:	68ba      	ldr	r2, [r7, #8]
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	2000      	movs	r0, #0
 800af94:	f000 f8a2 	bl	800b0dc <tcp_recv_null>
 800af98:	4603      	mov	r3, r0
 800af9a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800af9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d12a      	bne.n	800affa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800afa4:	7bbb      	ldrb	r3, [r7, #14]
 800afa6:	f003 0320 	and.w	r3, r3, #32
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d033      	beq.n	800b016 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800afb6:	d005      	beq.n	800afc4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afbc:	3301      	adds	r3, #1
 800afbe:	b29a      	uxth	r2, r3
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d00b      	beq.n	800afe6 <tcp_process_refused_data+0xb2>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6918      	ldr	r0, [r3, #16]
 800afd8:	2300      	movs	r3, #0
 800afda:	2200      	movs	r2, #0
 800afdc:	6879      	ldr	r1, [r7, #4]
 800afde:	47a0      	blx	r4
 800afe0:	4603      	mov	r3, r0
 800afe2:	73fb      	strb	r3, [r7, #15]
 800afe4:	e001      	b.n	800afea <tcp_process_refused_data+0xb6>
 800afe6:	2300      	movs	r3, #0
 800afe8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800afea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800afee:	f113 0f0d 	cmn.w	r3, #13
 800aff2:	d110      	bne.n	800b016 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800aff4:	f06f 030c 	mvn.w	r3, #12
 800aff8:	e00e      	b.n	800b018 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800affa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800affe:	f113 0f0d 	cmn.w	r3, #13
 800b002:	d102      	bne.n	800b00a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800b004:	f06f 030c 	mvn.w	r3, #12
 800b008:	e006      	b.n	800b018 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	68ba      	ldr	r2, [r7, #8]
 800b00e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800b010:	f06f 0304 	mvn.w	r3, #4
 800b014:	e000      	b.n	800b018 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3714      	adds	r7, #20
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd90      	pop	{r4, r7, pc}
 800b020:	0801a4b8 	.word	0x0801a4b8
 800b024:	0801a9c8 	.word	0x0801a9c8
 800b028:	0801a4fc 	.word	0x0801a4fc

0800b02c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800b034:	e007      	b.n	800b046 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f000 f809 	bl	800b054 <tcp_seg_free>
    seg = next;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d1f4      	bne.n	800b036 <tcp_segs_free+0xa>
  }
}
 800b04c:	bf00      	nop
 800b04e:	3710      	adds	r7, #16
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b082      	sub	sp, #8
 800b058:	af00      	add	r7, sp, #0
 800b05a:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d00c      	beq.n	800b07c <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	685b      	ldr	r3, [r3, #4]
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fbb4 	bl	80097dc <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800b074:	6879      	ldr	r1, [r7, #4]
 800b076:	2003      	movs	r0, #3
 800b078:	f7fd fd04 	bl	8008a84 <memp_free>
  }
}
 800b07c:	bf00      	nop
 800b07e:	3708      	adds	r7, #8
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}

0800b084 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b084      	sub	sp, #16
 800b088:	af00      	add	r7, sp, #0
 800b08a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d106      	bne.n	800b0a0 <tcp_seg_copy+0x1c>
 800b092:	4b0f      	ldr	r3, [pc, #60]	; (800b0d0 <tcp_seg_copy+0x4c>)
 800b094:	f240 6282 	movw	r2, #1666	; 0x682
 800b098:	490e      	ldr	r1, [pc, #56]	; (800b0d4 <tcp_seg_copy+0x50>)
 800b09a:	480f      	ldr	r0, [pc, #60]	; (800b0d8 <tcp_seg_copy+0x54>)
 800b09c:	f00c ff7a 	bl	8017f94 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800b0a0:	2003      	movs	r0, #3
 800b0a2:	f7fd fc9d 	bl	80089e0 <memp_malloc>
 800b0a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d101      	bne.n	800b0b2 <tcp_seg_copy+0x2e>
    return NULL;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	e00a      	b.n	800b0c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800b0b2:	2210      	movs	r2, #16
 800b0b4:	6879      	ldr	r1, [r7, #4]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f00c ff59 	bl	8017f6e <memcpy>
  pbuf_ref(cseg->p);
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fc31 	bl	8009928 <pbuf_ref>
  return cseg;
 800b0c6:	68fb      	ldr	r3, [r7, #12]
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	0801a4b8 	.word	0x0801a4b8
 800b0d4:	0801aa0c 	.word	0x0801aa0c
 800b0d8:	0801a4fc 	.word	0x0801a4fc

0800b0dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	60f8      	str	r0, [r7, #12]
 800b0e4:	60b9      	str	r1, [r7, #8]
 800b0e6:	607a      	str	r2, [r7, #4]
 800b0e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d109      	bne.n	800b104 <tcp_recv_null+0x28>
 800b0f0:	4b12      	ldr	r3, [pc, #72]	; (800b13c <tcp_recv_null+0x60>)
 800b0f2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b0f6:	4912      	ldr	r1, [pc, #72]	; (800b140 <tcp_recv_null+0x64>)
 800b0f8:	4812      	ldr	r0, [pc, #72]	; (800b144 <tcp_recv_null+0x68>)
 800b0fa:	f00c ff4b 	bl	8017f94 <iprintf>
 800b0fe:	f06f 030f 	mvn.w	r3, #15
 800b102:	e016      	b.n	800b132 <tcp_recv_null+0x56>

  if (p != NULL) {
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d009      	beq.n	800b11e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	891b      	ldrh	r3, [r3, #8]
 800b10e:	4619      	mov	r1, r3
 800b110:	68b8      	ldr	r0, [r7, #8]
 800b112:	f7ff f9bf 	bl	800a494 <tcp_recved>
    pbuf_free(p);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f7fe fb60 	bl	80097dc <pbuf_free>
 800b11c:	e008      	b.n	800b130 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800b11e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b122:	2b00      	cmp	r3, #0
 800b124:	d104      	bne.n	800b130 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800b126:	68b8      	ldr	r0, [r7, #8]
 800b128:	f7ff f80a 	bl	800a140 <tcp_close>
 800b12c:	4603      	mov	r3, r0
 800b12e:	e000      	b.n	800b132 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	3710      	adds	r7, #16
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	0801a4b8 	.word	0x0801a4b8
 800b140:	0801aa28 	.word	0x0801aa28
 800b144:	0801a4fc 	.word	0x0801a4fc

0800b148 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b086      	sub	sp, #24
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	4603      	mov	r3, r0
 800b150:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800b152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b156:	2b00      	cmp	r3, #0
 800b158:	db01      	blt.n	800b15e <tcp_kill_prio+0x16>
 800b15a:	79fb      	ldrb	r3, [r7, #7]
 800b15c:	e000      	b.n	800b160 <tcp_kill_prio+0x18>
 800b15e:	237f      	movs	r3, #127	; 0x7f
 800b160:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800b162:	7afb      	ldrb	r3, [r7, #11]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d034      	beq.n	800b1d2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800b168:	7afb      	ldrb	r3, [r7, #11]
 800b16a:	3b01      	subs	r3, #1
 800b16c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800b16e:	2300      	movs	r3, #0
 800b170:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b172:	2300      	movs	r3, #0
 800b174:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b176:	4b19      	ldr	r3, [pc, #100]	; (800b1dc <tcp_kill_prio+0x94>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	617b      	str	r3, [r7, #20]
 800b17c:	e01f      	b.n	800b1be <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	7d5b      	ldrb	r3, [r3, #21]
 800b182:	7afa      	ldrb	r2, [r7, #11]
 800b184:	429a      	cmp	r2, r3
 800b186:	d80c      	bhi.n	800b1a2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b188:	697b      	ldr	r3, [r7, #20]
 800b18a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800b18c:	7afa      	ldrb	r2, [r7, #11]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d112      	bne.n	800b1b8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800b192:	4b13      	ldr	r3, [pc, #76]	; (800b1e0 <tcp_kill_prio+0x98>)
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	6a1b      	ldr	r3, [r3, #32]
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	68fa      	ldr	r2, [r7, #12]
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d80a      	bhi.n	800b1b8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800b1a2:	4b0f      	ldr	r3, [pc, #60]	; (800b1e0 <tcp_kill_prio+0x98>)
 800b1a4:	681a      	ldr	r2, [r3, #0]
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	6a1b      	ldr	r3, [r3, #32]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800b1b2:	697b      	ldr	r3, [r7, #20]
 800b1b4:	7d5b      	ldrb	r3, [r3, #21]
 800b1b6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	68db      	ldr	r3, [r3, #12]
 800b1bc:	617b      	str	r3, [r7, #20]
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d1dc      	bne.n	800b17e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800b1c4:	693b      	ldr	r3, [r7, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d004      	beq.n	800b1d4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b1ca:	6938      	ldr	r0, [r7, #16]
 800b1cc:	f7ff f8fc 	bl	800a3c8 <tcp_abort>
 800b1d0:	e000      	b.n	800b1d4 <tcp_kill_prio+0x8c>
    return;
 800b1d2:	bf00      	nop
  }
}
 800b1d4:	3718      	adds	r7, #24
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	2000c4dc 	.word	0x2000c4dc
 800b1e0:	2000c4e0 	.word	0x2000c4e0

0800b1e4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800b1ee:	79fb      	ldrb	r3, [r7, #7]
 800b1f0:	2b08      	cmp	r3, #8
 800b1f2:	d009      	beq.n	800b208 <tcp_kill_state+0x24>
 800b1f4:	79fb      	ldrb	r3, [r7, #7]
 800b1f6:	2b09      	cmp	r3, #9
 800b1f8:	d006      	beq.n	800b208 <tcp_kill_state+0x24>
 800b1fa:	4b1a      	ldr	r3, [pc, #104]	; (800b264 <tcp_kill_state+0x80>)
 800b1fc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800b200:	4919      	ldr	r1, [pc, #100]	; (800b268 <tcp_kill_state+0x84>)
 800b202:	481a      	ldr	r0, [pc, #104]	; (800b26c <tcp_kill_state+0x88>)
 800b204:	f00c fec6 	bl	8017f94 <iprintf>

  inactivity = 0;
 800b208:	2300      	movs	r3, #0
 800b20a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800b20c:	2300      	movs	r3, #0
 800b20e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b210:	4b17      	ldr	r3, [pc, #92]	; (800b270 <tcp_kill_state+0x8c>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	617b      	str	r3, [r7, #20]
 800b216:	e017      	b.n	800b248 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800b218:	697b      	ldr	r3, [r7, #20]
 800b21a:	7d1b      	ldrb	r3, [r3, #20]
 800b21c:	79fa      	ldrb	r2, [r7, #7]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d10f      	bne.n	800b242 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b222:	4b14      	ldr	r3, [pc, #80]	; (800b274 <tcp_kill_state+0x90>)
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	6a1b      	ldr	r3, [r3, #32]
 800b22a:	1ad3      	subs	r3, r2, r3
 800b22c:	68fa      	ldr	r2, [r7, #12]
 800b22e:	429a      	cmp	r2, r3
 800b230:	d807      	bhi.n	800b242 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800b232:	4b10      	ldr	r3, [pc, #64]	; (800b274 <tcp_kill_state+0x90>)
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	68db      	ldr	r3, [r3, #12]
 800b246:	617b      	str	r3, [r7, #20]
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d1e4      	bne.n	800b218 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d003      	beq.n	800b25c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800b254:	2100      	movs	r1, #0
 800b256:	6938      	ldr	r0, [r7, #16]
 800b258:	f7fe fff8 	bl	800a24c <tcp_abandon>
  }
}
 800b25c:	bf00      	nop
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}
 800b264:	0801a4b8 	.word	0x0801a4b8
 800b268:	0801aa44 	.word	0x0801aa44
 800b26c:	0801a4fc 	.word	0x0801a4fc
 800b270:	2000c4dc 	.word	0x2000c4dc
 800b274:	2000c4e0 	.word	0x2000c4e0

0800b278 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800b27e:	2300      	movs	r3, #0
 800b280:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800b282:	2300      	movs	r3, #0
 800b284:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b286:	4b12      	ldr	r3, [pc, #72]	; (800b2d0 <tcp_kill_timewait+0x58>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]
 800b28c:	e012      	b.n	800b2b4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800b28e:	4b11      	ldr	r3, [pc, #68]	; (800b2d4 <tcp_kill_timewait+0x5c>)
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	1ad3      	subs	r3, r2, r3
 800b298:	687a      	ldr	r2, [r7, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d807      	bhi.n	800b2ae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800b29e:	4b0d      	ldr	r3, [pc, #52]	; (800b2d4 <tcp_kill_timewait+0x5c>)
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6a1b      	ldr	r3, [r3, #32]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	68db      	ldr	r3, [r3, #12]
 800b2b2:	60fb      	str	r3, [r7, #12]
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d1e9      	bne.n	800b28e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d002      	beq.n	800b2c6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800b2c0:	68b8      	ldr	r0, [r7, #8]
 800b2c2:	f7ff f881 	bl	800a3c8 <tcp_abort>
  }
}
 800b2c6:	bf00      	nop
 800b2c8:	3710      	adds	r7, #16
 800b2ca:	46bd      	mov	sp, r7
 800b2cc:	bd80      	pop	{r7, pc}
 800b2ce:	bf00      	nop
 800b2d0:	2000c4ec 	.word	0x2000c4ec
 800b2d4:	2000c4e0 	.word	0x2000c4e0

0800b2d8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800b2de:	4b10      	ldr	r3, [pc, #64]	; (800b320 <tcp_handle_closepend+0x48>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800b2e4:	e014      	b.n	800b310 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	8b5b      	ldrh	r3, [r3, #26]
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d009      	beq.n	800b30c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	8b5b      	ldrh	r3, [r3, #26]
 800b2fc:	f023 0308 	bic.w	r3, r3, #8
 800b300:	b29a      	uxth	r2, r3
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7fe feb4 	bl	800a074 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d1e7      	bne.n	800b2e6 <tcp_handle_closepend+0xe>
  }
}
 800b316:	bf00      	nop
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000c4dc 	.word	0x2000c4dc

0800b324 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b084      	sub	sp, #16
 800b328:	af00      	add	r7, sp, #0
 800b32a:	4603      	mov	r3, r0
 800b32c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b32e:	2001      	movs	r0, #1
 800b330:	f7fd fb56 	bl	80089e0 <memp_malloc>
 800b334:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d126      	bne.n	800b38a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800b33c:	f7ff ffcc 	bl	800b2d8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800b340:	f7ff ff9a 	bl	800b278 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b344:	2001      	movs	r0, #1
 800b346:	f7fd fb4b 	bl	80089e0 <memp_malloc>
 800b34a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d11b      	bne.n	800b38a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800b352:	2009      	movs	r0, #9
 800b354:	f7ff ff46 	bl	800b1e4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b358:	2001      	movs	r0, #1
 800b35a:	f7fd fb41 	bl	80089e0 <memp_malloc>
 800b35e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d111      	bne.n	800b38a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800b366:	2008      	movs	r0, #8
 800b368:	f7ff ff3c 	bl	800b1e4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b36c:	2001      	movs	r0, #1
 800b36e:	f7fd fb37 	bl	80089e0 <memp_malloc>
 800b372:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d107      	bne.n	800b38a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800b37a:	79fb      	ldrb	r3, [r7, #7]
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7ff fee3 	bl	800b148 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800b382:	2001      	movs	r0, #1
 800b384:	f7fd fb2c 	bl	80089e0 <memp_malloc>
 800b388:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d03f      	beq.n	800b410 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800b390:	229c      	movs	r2, #156	; 0x9c
 800b392:	2100      	movs	r1, #0
 800b394:	68f8      	ldr	r0, [r7, #12]
 800b396:	f00c fdf5 	bl	8017f84 <memset>
    pcb->prio = prio;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	79fa      	ldrb	r2, [r7, #7]
 800b39e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b3a6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800b3b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	22ff      	movs	r2, #255	; 0xff
 800b3be:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b3c6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	2206      	movs	r2, #6
 800b3cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2206      	movs	r2, #6
 800b3d4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b3dc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800b3e6:	4b0d      	ldr	r3, [pc, #52]	; (800b41c <tcp_alloc+0xf8>)
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800b3ee:	4b0c      	ldr	r3, [pc, #48]	; (800b420 <tcp_alloc+0xfc>)
 800b3f0:	781a      	ldrb	r2, [r3, #0]
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800b3fc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	4a08      	ldr	r2, [pc, #32]	; (800b424 <tcp_alloc+0x100>)
 800b404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4a07      	ldr	r2, [pc, #28]	; (800b428 <tcp_alloc+0x104>)
 800b40c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800b410:	68fb      	ldr	r3, [r7, #12]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3710      	adds	r7, #16
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	2000c4e0 	.word	0x2000c4e0
 800b420:	200083aa 	.word	0x200083aa
 800b424:	0800b0dd 	.word	0x0800b0dd
 800b428:	006ddd00 	.word	0x006ddd00

0800b42c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b084      	sub	sp, #16
 800b430:	af00      	add	r7, sp, #0
 800b432:	4603      	mov	r3, r0
 800b434:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800b436:	2040      	movs	r0, #64	; 0x40
 800b438:	f7ff ff74 	bl	800b324 <tcp_alloc>
 800b43c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800b43e:	68fb      	ldr	r3, [r7, #12]
}
 800b440:	4618      	mov	r0, r3
 800b442:	3710      	adds	r7, #16
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}

0800b448 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
 800b450:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d002      	beq.n	800b45e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	683a      	ldr	r2, [r7, #0]
 800b45c:	611a      	str	r2, [r3, #16]
  }
}
 800b45e:	bf00      	nop
 800b460:	370c      	adds	r7, #12
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
	...

0800b46c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00e      	beq.n	800b49a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	7d1b      	ldrb	r3, [r3, #20]
 800b480:	2b01      	cmp	r3, #1
 800b482:	d106      	bne.n	800b492 <tcp_recv+0x26>
 800b484:	4b07      	ldr	r3, [pc, #28]	; (800b4a4 <tcp_recv+0x38>)
 800b486:	f240 72df 	movw	r2, #2015	; 0x7df
 800b48a:	4907      	ldr	r1, [pc, #28]	; (800b4a8 <tcp_recv+0x3c>)
 800b48c:	4807      	ldr	r0, [pc, #28]	; (800b4ac <tcp_recv+0x40>)
 800b48e:	f00c fd81 	bl	8017f94 <iprintf>
    pcb->recv = recv;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	683a      	ldr	r2, [r7, #0]
 800b496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800b49a:	bf00      	nop
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
 800b4a2:	bf00      	nop
 800b4a4:	0801a4b8 	.word	0x0801a4b8
 800b4a8:	0801aa54 	.word	0x0801aa54
 800b4ac:	0801a4fc 	.word	0x0801a4fc

0800b4b0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d00e      	beq.n	800b4de <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	7d1b      	ldrb	r3, [r3, #20]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d106      	bne.n	800b4d6 <tcp_sent+0x26>
 800b4c8:	4b07      	ldr	r3, [pc, #28]	; (800b4e8 <tcp_sent+0x38>)
 800b4ca:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800b4ce:	4907      	ldr	r1, [pc, #28]	; (800b4ec <tcp_sent+0x3c>)
 800b4d0:	4807      	ldr	r0, [pc, #28]	; (800b4f0 <tcp_sent+0x40>)
 800b4d2:	f00c fd5f 	bl	8017f94 <iprintf>
    pcb->sent = sent;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	683a      	ldr	r2, [r7, #0]
 800b4da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800b4de:	bf00      	nop
 800b4e0:	3708      	adds	r7, #8
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
 800b4e6:	bf00      	nop
 800b4e8:	0801a4b8 	.word	0x0801a4b8
 800b4ec:	0801aa7c 	.word	0x0801aa7c
 800b4f0:	0801a4fc 	.word	0x0801a4fc

0800b4f4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d00e      	beq.n	800b522 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	7d1b      	ldrb	r3, [r3, #20]
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d106      	bne.n	800b51a <tcp_err+0x26>
 800b50c:	4b07      	ldr	r3, [pc, #28]	; (800b52c <tcp_err+0x38>)
 800b50e:	f640 020d 	movw	r2, #2061	; 0x80d
 800b512:	4907      	ldr	r1, [pc, #28]	; (800b530 <tcp_err+0x3c>)
 800b514:	4807      	ldr	r0, [pc, #28]	; (800b534 <tcp_err+0x40>)
 800b516:	f00c fd3d 	bl	8017f94 <iprintf>
    pcb->errf = err;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	683a      	ldr	r2, [r7, #0]
 800b51e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800b522:	bf00      	nop
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0801a4b8 	.word	0x0801a4b8
 800b530:	0801aaa4 	.word	0x0801aaa4
 800b534:	0801a4fc 	.word	0x0801a4fc

0800b538 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800b538:	b480      	push	{r7}
 800b53a:	b085      	sub	sp, #20
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
 800b540:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d008      	beq.n	800b55a <tcp_accept+0x22>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	7d1b      	ldrb	r3, [r3, #20]
 800b54c:	2b01      	cmp	r3, #1
 800b54e:	d104      	bne.n	800b55a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	683a      	ldr	r2, [r7, #0]
 800b558:	619a      	str	r2, [r3, #24]
  }
}
 800b55a:	bf00      	nop
 800b55c:	3714      	adds	r7, #20
 800b55e:	46bd      	mov	sp, r7
 800b560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b564:	4770      	bx	lr
	...

0800b568 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800b568:	b580      	push	{r7, lr}
 800b56a:	b084      	sub	sp, #16
 800b56c:	af00      	add	r7, sp, #0
 800b56e:	60f8      	str	r0, [r7, #12]
 800b570:	60b9      	str	r1, [r7, #8]
 800b572:	4613      	mov	r3, r2
 800b574:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d107      	bne.n	800b58c <tcp_poll+0x24>
 800b57c:	4b0e      	ldr	r3, [pc, #56]	; (800b5b8 <tcp_poll+0x50>)
 800b57e:	f640 023d 	movw	r2, #2109	; 0x83d
 800b582:	490e      	ldr	r1, [pc, #56]	; (800b5bc <tcp_poll+0x54>)
 800b584:	480e      	ldr	r0, [pc, #56]	; (800b5c0 <tcp_poll+0x58>)
 800b586:	f00c fd05 	bl	8017f94 <iprintf>
 800b58a:	e011      	b.n	800b5b0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	7d1b      	ldrb	r3, [r3, #20]
 800b590:	2b01      	cmp	r3, #1
 800b592:	d106      	bne.n	800b5a2 <tcp_poll+0x3a>
 800b594:	4b08      	ldr	r3, [pc, #32]	; (800b5b8 <tcp_poll+0x50>)
 800b596:	f640 023e 	movw	r2, #2110	; 0x83e
 800b59a:	490a      	ldr	r1, [pc, #40]	; (800b5c4 <tcp_poll+0x5c>)
 800b59c:	4808      	ldr	r0, [pc, #32]	; (800b5c0 <tcp_poll+0x58>)
 800b59e:	f00c fcf9 	bl	8017f94 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	79fa      	ldrb	r2, [r7, #7]
 800b5ae:	775a      	strb	r2, [r3, #29]
}
 800b5b0:	3710      	adds	r7, #16
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	0801a4b8 	.word	0x0801a4b8
 800b5bc:	0801aacc 	.word	0x0801aacc
 800b5c0:	0801a4fc 	.word	0x0801a4fc
 800b5c4:	0801aae4 	.word	0x0801aae4

0800b5c8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b082      	sub	sp, #8
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d107      	bne.n	800b5e6 <tcp_pcb_purge+0x1e>
 800b5d6:	4b21      	ldr	r3, [pc, #132]	; (800b65c <tcp_pcb_purge+0x94>)
 800b5d8:	f640 0251 	movw	r2, #2129	; 0x851
 800b5dc:	4920      	ldr	r1, [pc, #128]	; (800b660 <tcp_pcb_purge+0x98>)
 800b5de:	4821      	ldr	r0, [pc, #132]	; (800b664 <tcp_pcb_purge+0x9c>)
 800b5e0:	f00c fcd8 	bl	8017f94 <iprintf>
 800b5e4:	e037      	b.n	800b656 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	7d1b      	ldrb	r3, [r3, #20]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d033      	beq.n	800b656 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800b5f2:	2b0a      	cmp	r3, #10
 800b5f4:	d02f      	beq.n	800b656 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800b5fa:	2b01      	cmp	r3, #1
 800b5fc:	d02b      	beq.n	800b656 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b602:	2b00      	cmp	r3, #0
 800b604:	d007      	beq.n	800b616 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7fe f8e6 	bl	80097dc <pbuf_free>
      pcb->refused_data = NULL;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d002      	beq.n	800b624 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f000 f986 	bl	800b930 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b62a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b630:	4618      	mov	r0, r3
 800b632:	f7ff fcfb 	bl	800b02c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	4618      	mov	r0, r3
 800b63c:	f7ff fcf6 	bl	800b02c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2200      	movs	r2, #0
 800b644:	66da      	str	r2, [r3, #108]	; 0x6c
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800b656:	3708      	adds	r7, #8
 800b658:	46bd      	mov	sp, r7
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	0801a4b8 	.word	0x0801a4b8
 800b660:	0801ab04 	.word	0x0801ab04
 800b664:	0801a4fc 	.word	0x0801a4fc

0800b668 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b084      	sub	sp, #16
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d106      	bne.n	800b686 <tcp_pcb_remove+0x1e>
 800b678:	4b3e      	ldr	r3, [pc, #248]	; (800b774 <tcp_pcb_remove+0x10c>)
 800b67a:	f640 0283 	movw	r2, #2179	; 0x883
 800b67e:	493e      	ldr	r1, [pc, #248]	; (800b778 <tcp_pcb_remove+0x110>)
 800b680:	483e      	ldr	r0, [pc, #248]	; (800b77c <tcp_pcb_remove+0x114>)
 800b682:	f00c fc87 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d106      	bne.n	800b69a <tcp_pcb_remove+0x32>
 800b68c:	4b39      	ldr	r3, [pc, #228]	; (800b774 <tcp_pcb_remove+0x10c>)
 800b68e:	f640 0284 	movw	r2, #2180	; 0x884
 800b692:	493b      	ldr	r1, [pc, #236]	; (800b780 <tcp_pcb_remove+0x118>)
 800b694:	4839      	ldr	r0, [pc, #228]	; (800b77c <tcp_pcb_remove+0x114>)
 800b696:	f00c fc7d 	bl	8017f94 <iprintf>

  TCP_RMV(pcblist, pcb);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	683a      	ldr	r2, [r7, #0]
 800b6a0:	429a      	cmp	r2, r3
 800b6a2:	d105      	bne.n	800b6b0 <tcp_pcb_remove+0x48>
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	68da      	ldr	r2, [r3, #12]
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	601a      	str	r2, [r3, #0]
 800b6ae:	e013      	b.n	800b6d8 <tcp_pcb_remove+0x70>
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	e00c      	b.n	800b6d2 <tcp_pcb_remove+0x6a>
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	68db      	ldr	r3, [r3, #12]
 800b6bc:	683a      	ldr	r2, [r7, #0]
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d104      	bne.n	800b6cc <tcp_pcb_remove+0x64>
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	68da      	ldr	r2, [r3, #12]
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	60da      	str	r2, [r3, #12]
 800b6ca:	e005      	b.n	800b6d8 <tcp_pcb_remove+0x70>
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	68db      	ldr	r3, [r3, #12]
 800b6d0:	60fb      	str	r3, [r7, #12]
 800b6d2:	68fb      	ldr	r3, [r7, #12]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d1ef      	bne.n	800b6b8 <tcp_pcb_remove+0x50>
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800b6de:	6838      	ldr	r0, [r7, #0]
 800b6e0:	f7ff ff72 	bl	800b5c8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	7d1b      	ldrb	r3, [r3, #20]
 800b6e8:	2b0a      	cmp	r3, #10
 800b6ea:	d013      	beq.n	800b714 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800b6ec:	683b      	ldr	r3, [r7, #0]
 800b6ee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800b6f0:	2b01      	cmp	r3, #1
 800b6f2:	d00f      	beq.n	800b714 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800b6f4:	683b      	ldr	r3, [r7, #0]
 800b6f6:	8b5b      	ldrh	r3, [r3, #26]
 800b6f8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d009      	beq.n	800b714 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	8b5b      	ldrh	r3, [r3, #26]
 800b704:	f043 0302 	orr.w	r3, r3, #2
 800b708:	b29a      	uxth	r2, r3
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800b70e:	6838      	ldr	r0, [r7, #0]
 800b710:	f003 fbc2 	bl	800ee98 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	7d1b      	ldrb	r3, [r3, #20]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d020      	beq.n	800b75e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800b71c:	683b      	ldr	r3, [r7, #0]
 800b71e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <tcp_pcb_remove+0xca>
 800b724:	4b13      	ldr	r3, [pc, #76]	; (800b774 <tcp_pcb_remove+0x10c>)
 800b726:	f640 0293 	movw	r2, #2195	; 0x893
 800b72a:	4916      	ldr	r1, [pc, #88]	; (800b784 <tcp_pcb_remove+0x11c>)
 800b72c:	4813      	ldr	r0, [pc, #76]	; (800b77c <tcp_pcb_remove+0x114>)
 800b72e:	f00c fc31 	bl	8017f94 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b736:	2b00      	cmp	r3, #0
 800b738:	d006      	beq.n	800b748 <tcp_pcb_remove+0xe0>
 800b73a:	4b0e      	ldr	r3, [pc, #56]	; (800b774 <tcp_pcb_remove+0x10c>)
 800b73c:	f640 0294 	movw	r2, #2196	; 0x894
 800b740:	4911      	ldr	r1, [pc, #68]	; (800b788 <tcp_pcb_remove+0x120>)
 800b742:	480e      	ldr	r0, [pc, #56]	; (800b77c <tcp_pcb_remove+0x114>)
 800b744:	f00c fc26 	bl	8017f94 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d006      	beq.n	800b75e <tcp_pcb_remove+0xf6>
 800b750:	4b08      	ldr	r3, [pc, #32]	; (800b774 <tcp_pcb_remove+0x10c>)
 800b752:	f640 0296 	movw	r2, #2198	; 0x896
 800b756:	490d      	ldr	r1, [pc, #52]	; (800b78c <tcp_pcb_remove+0x124>)
 800b758:	4808      	ldr	r0, [pc, #32]	; (800b77c <tcp_pcb_remove+0x114>)
 800b75a:	f00c fc1b 	bl	8017f94 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	2200      	movs	r2, #0
 800b762:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800b764:	683b      	ldr	r3, [r7, #0]
 800b766:	2200      	movs	r2, #0
 800b768:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800b76a:	bf00      	nop
 800b76c:	3710      	adds	r7, #16
 800b76e:	46bd      	mov	sp, r7
 800b770:	bd80      	pop	{r7, pc}
 800b772:	bf00      	nop
 800b774:	0801a4b8 	.word	0x0801a4b8
 800b778:	0801ab20 	.word	0x0801ab20
 800b77c:	0801a4fc 	.word	0x0801a4fc
 800b780:	0801ab3c 	.word	0x0801ab3c
 800b784:	0801ab5c 	.word	0x0801ab5c
 800b788:	0801ab74 	.word	0x0801ab74
 800b78c:	0801ab90 	.word	0x0801ab90

0800b790 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d106      	bne.n	800b7ac <tcp_next_iss+0x1c>
 800b79e:	4b0a      	ldr	r3, [pc, #40]	; (800b7c8 <tcp_next_iss+0x38>)
 800b7a0:	f640 02af 	movw	r2, #2223	; 0x8af
 800b7a4:	4909      	ldr	r1, [pc, #36]	; (800b7cc <tcp_next_iss+0x3c>)
 800b7a6:	480a      	ldr	r0, [pc, #40]	; (800b7d0 <tcp_next_iss+0x40>)
 800b7a8:	f00c fbf4 	bl	8017f94 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800b7ac:	4b09      	ldr	r3, [pc, #36]	; (800b7d4 <tcp_next_iss+0x44>)
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	4b09      	ldr	r3, [pc, #36]	; (800b7d8 <tcp_next_iss+0x48>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	4a07      	ldr	r2, [pc, #28]	; (800b7d4 <tcp_next_iss+0x44>)
 800b7b8:	6013      	str	r3, [r2, #0]
  return iss;
 800b7ba:	4b06      	ldr	r3, [pc, #24]	; (800b7d4 <tcp_next_iss+0x44>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	0801a4b8 	.word	0x0801a4b8
 800b7cc:	0801aba8 	.word	0x0801aba8
 800b7d0:	0801a4fc 	.word	0x0801a4fc
 800b7d4:	20000010 	.word	0x20000010
 800b7d8:	2000c4e0 	.word	0x2000c4e0

0800b7dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b086      	sub	sp, #24
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	60b9      	str	r1, [r7, #8]
 800b7e6:	607a      	str	r2, [r7, #4]
 800b7e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d106      	bne.n	800b7fe <tcp_eff_send_mss_netif+0x22>
 800b7f0:	4b14      	ldr	r3, [pc, #80]	; (800b844 <tcp_eff_send_mss_netif+0x68>)
 800b7f2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800b7f6:	4914      	ldr	r1, [pc, #80]	; (800b848 <tcp_eff_send_mss_netif+0x6c>)
 800b7f8:	4814      	ldr	r0, [pc, #80]	; (800b84c <tcp_eff_send_mss_netif+0x70>)
 800b7fa:	f00c fbcb 	bl	8017f94 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	2b00      	cmp	r3, #0
 800b802:	d101      	bne.n	800b808 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800b804:	89fb      	ldrh	r3, [r7, #14]
 800b806:	e019      	b.n	800b83c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b80c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800b80e:	8afb      	ldrh	r3, [r7, #22]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d012      	beq.n	800b83a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800b814:	2328      	movs	r3, #40	; 0x28
 800b816:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800b818:	8afa      	ldrh	r2, [r7, #22]
 800b81a:	8abb      	ldrh	r3, [r7, #20]
 800b81c:	429a      	cmp	r2, r3
 800b81e:	d904      	bls.n	800b82a <tcp_eff_send_mss_netif+0x4e>
 800b820:	8afa      	ldrh	r2, [r7, #22]
 800b822:	8abb      	ldrh	r3, [r7, #20]
 800b824:	1ad3      	subs	r3, r2, r3
 800b826:	b29b      	uxth	r3, r3
 800b828:	e000      	b.n	800b82c <tcp_eff_send_mss_netif+0x50>
 800b82a:	2300      	movs	r3, #0
 800b82c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800b82e:	8a7a      	ldrh	r2, [r7, #18]
 800b830:	89fb      	ldrh	r3, [r7, #14]
 800b832:	4293      	cmp	r3, r2
 800b834:	bf28      	it	cs
 800b836:	4613      	movcs	r3, r2
 800b838:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800b83a:	89fb      	ldrh	r3, [r7, #14]
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3718      	adds	r7, #24
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}
 800b844:	0801a4b8 	.word	0x0801a4b8
 800b848:	0801abc4 	.word	0x0801abc4
 800b84c:	0801a4fc 	.word	0x0801a4fc

0800b850 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800b850:	b580      	push	{r7, lr}
 800b852:	b084      	sub	sp, #16
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
 800b858:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d119      	bne.n	800b898 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800b864:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800b866:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800b86a:	4910      	ldr	r1, [pc, #64]	; (800b8ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800b86c:	4810      	ldr	r0, [pc, #64]	; (800b8b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800b86e:	f00c fb91 	bl	8017f94 <iprintf>

  while (pcb != NULL) {
 800b872:	e011      	b.n	800b898 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681a      	ldr	r2, [r3, #0]
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d108      	bne.n	800b892 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	f7fe fd9e 	bl	800a3c8 <tcp_abort>
      pcb = next;
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	60fb      	str	r3, [r7, #12]
 800b890:	e002      	b.n	800b898 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d1ea      	bne.n	800b874 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800b89e:	bf00      	nop
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	0801a4b8 	.word	0x0801a4b8
 800b8ac:	0801abec 	.word	0x0801abec
 800b8b0:	0801a4fc 	.word	0x0801a4fc

0800b8b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b8b4:	b580      	push	{r7, lr}
 800b8b6:	b084      	sub	sp, #16
 800b8b8:	af00      	add	r7, sp, #0
 800b8ba:	6078      	str	r0, [r7, #4]
 800b8bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d02a      	beq.n	800b91a <tcp_netif_ip_addr_changed+0x66>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d026      	beq.n	800b91a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800b8cc:	4b15      	ldr	r3, [pc, #84]	; (800b924 <tcp_netif_ip_addr_changed+0x70>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7ff ffbc 	bl	800b850 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800b8d8:	4b13      	ldr	r3, [pc, #76]	; (800b928 <tcp_netif_ip_addr_changed+0x74>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4619      	mov	r1, r3
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f7ff ffb6 	bl	800b850 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d017      	beq.n	800b91a <tcp_netif_ip_addr_changed+0x66>
 800b8ea:	683b      	ldr	r3, [r7, #0]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d013      	beq.n	800b91a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b8f2:	4b0e      	ldr	r3, [pc, #56]	; (800b92c <tcp_netif_ip_addr_changed+0x78>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	e00c      	b.n	800b914 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681a      	ldr	r2, [r3, #0]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d103      	bne.n	800b90e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	60fb      	str	r3, [r7, #12]
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1ef      	bne.n	800b8fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800b91a:	bf00      	nop
 800b91c:	3710      	adds	r7, #16
 800b91e:	46bd      	mov	sp, r7
 800b920:	bd80      	pop	{r7, pc}
 800b922:	bf00      	nop
 800b924:	2000c4dc 	.word	0x2000c4dc
 800b928:	2000c4e8 	.word	0x2000c4e8
 800b92c:	2000c4e4 	.word	0x2000c4e4

0800b930 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800b930:	b580      	push	{r7, lr}
 800b932:	b082      	sub	sp, #8
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d007      	beq.n	800b950 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b944:	4618      	mov	r0, r3
 800b946:	f7ff fb71 	bl	800b02c <tcp_segs_free>
    pcb->ooseq = NULL;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800b958:	b590      	push	{r4, r7, lr}
 800b95a:	b08d      	sub	sp, #52	; 0x34
 800b95c:	af04      	add	r7, sp, #16
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d105      	bne.n	800b974 <tcp_input+0x1c>
 800b968:	4b9b      	ldr	r3, [pc, #620]	; (800bbd8 <tcp_input+0x280>)
 800b96a:	2283      	movs	r2, #131	; 0x83
 800b96c:	499b      	ldr	r1, [pc, #620]	; (800bbdc <tcp_input+0x284>)
 800b96e:	489c      	ldr	r0, [pc, #624]	; (800bbe0 <tcp_input+0x288>)
 800b970:	f00c fb10 	bl	8017f94 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	4a9a      	ldr	r2, [pc, #616]	; (800bbe4 <tcp_input+0x28c>)
 800b97a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	895b      	ldrh	r3, [r3, #10]
 800b980:	2b13      	cmp	r3, #19
 800b982:	f240 83c4 	bls.w	800c10e <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b986:	4b98      	ldr	r3, [pc, #608]	; (800bbe8 <tcp_input+0x290>)
 800b988:	695a      	ldr	r2, [r3, #20]
 800b98a:	4b97      	ldr	r3, [pc, #604]	; (800bbe8 <tcp_input+0x290>)
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	4619      	mov	r1, r3
 800b990:	4610      	mov	r0, r2
 800b992:	f008 fa79 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 800b996:	4603      	mov	r3, r0
 800b998:	2b00      	cmp	r3, #0
 800b99a:	f040 83ba 	bne.w	800c112 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800b99e:	4b92      	ldr	r3, [pc, #584]	; (800bbe8 <tcp_input+0x290>)
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800b9a6:	2be0      	cmp	r3, #224	; 0xe0
 800b9a8:	f000 83b3 	beq.w	800c112 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800b9ac:	4b8d      	ldr	r3, [pc, #564]	; (800bbe4 <tcp_input+0x28c>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	899b      	ldrh	r3, [r3, #12]
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	f7fc fb5d 	bl	8008074 <lwip_htons>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	0b1b      	lsrs	r3, r3, #12
 800b9be:	b29b      	uxth	r3, r3
 800b9c0:	b2db      	uxtb	r3, r3
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800b9c6:	7cbb      	ldrb	r3, [r7, #18]
 800b9c8:	2b13      	cmp	r3, #19
 800b9ca:	f240 83a2 	bls.w	800c112 <tcp_input+0x7ba>
 800b9ce:	7cbb      	ldrb	r3, [r7, #18]
 800b9d0:	b29a      	uxth	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	891b      	ldrh	r3, [r3, #8]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	f200 839b 	bhi.w	800c112 <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800b9dc:	7cbb      	ldrb	r3, [r7, #18]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	3b14      	subs	r3, #20
 800b9e2:	b29a      	uxth	r2, r3
 800b9e4:	4b81      	ldr	r3, [pc, #516]	; (800bbec <tcp_input+0x294>)
 800b9e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800b9e8:	4b81      	ldr	r3, [pc, #516]	; (800bbf0 <tcp_input+0x298>)
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	895a      	ldrh	r2, [r3, #10]
 800b9f2:	7cbb      	ldrb	r3, [r7, #18]
 800b9f4:	b29b      	uxth	r3, r3
 800b9f6:	429a      	cmp	r2, r3
 800b9f8:	d309      	bcc.n	800ba0e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800b9fa:	4b7c      	ldr	r3, [pc, #496]	; (800bbec <tcp_input+0x294>)
 800b9fc:	881a      	ldrh	r2, [r3, #0]
 800b9fe:	4b7d      	ldr	r3, [pc, #500]	; (800bbf4 <tcp_input+0x29c>)
 800ba00:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800ba02:	7cbb      	ldrb	r3, [r7, #18]
 800ba04:	4619      	mov	r1, r3
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f7fd fe62 	bl	80096d0 <pbuf_remove_header>
 800ba0c:	e04e      	b.n	800baac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d105      	bne.n	800ba22 <tcp_input+0xca>
 800ba16:	4b70      	ldr	r3, [pc, #448]	; (800bbd8 <tcp_input+0x280>)
 800ba18:	22c2      	movs	r2, #194	; 0xc2
 800ba1a:	4977      	ldr	r1, [pc, #476]	; (800bbf8 <tcp_input+0x2a0>)
 800ba1c:	4870      	ldr	r0, [pc, #448]	; (800bbe0 <tcp_input+0x288>)
 800ba1e:	f00c fab9 	bl	8017f94 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800ba22:	2114      	movs	r1, #20
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f7fd fe53 	bl	80096d0 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	895a      	ldrh	r2, [r3, #10]
 800ba2e:	4b71      	ldr	r3, [pc, #452]	; (800bbf4 <tcp_input+0x29c>)
 800ba30:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800ba32:	4b6e      	ldr	r3, [pc, #440]	; (800bbec <tcp_input+0x294>)
 800ba34:	881a      	ldrh	r2, [r3, #0]
 800ba36:	4b6f      	ldr	r3, [pc, #444]	; (800bbf4 <tcp_input+0x29c>)
 800ba38:	881b      	ldrh	r3, [r3, #0]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800ba3e:	4b6d      	ldr	r3, [pc, #436]	; (800bbf4 <tcp_input+0x29c>)
 800ba40:	881b      	ldrh	r3, [r3, #0]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7fd fe43 	bl	80096d0 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	895b      	ldrh	r3, [r3, #10]
 800ba50:	8a3a      	ldrh	r2, [r7, #16]
 800ba52:	429a      	cmp	r2, r3
 800ba54:	f200 835f 	bhi.w	800c116 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	685b      	ldr	r3, [r3, #4]
 800ba5e:	4a64      	ldr	r2, [pc, #400]	; (800bbf0 <tcp_input+0x298>)
 800ba60:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	8a3a      	ldrh	r2, [r7, #16]
 800ba68:	4611      	mov	r1, r2
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7fd fe30 	bl	80096d0 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	891a      	ldrh	r2, [r3, #8]
 800ba74:	8a3b      	ldrh	r3, [r7, #16]
 800ba76:	1ad3      	subs	r3, r2, r3
 800ba78:	b29a      	uxth	r2, r3
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	895b      	ldrh	r3, [r3, #10]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d005      	beq.n	800ba92 <tcp_input+0x13a>
 800ba86:	4b54      	ldr	r3, [pc, #336]	; (800bbd8 <tcp_input+0x280>)
 800ba88:	22df      	movs	r2, #223	; 0xdf
 800ba8a:	495c      	ldr	r1, [pc, #368]	; (800bbfc <tcp_input+0x2a4>)
 800ba8c:	4854      	ldr	r0, [pc, #336]	; (800bbe0 <tcp_input+0x288>)
 800ba8e:	f00c fa81 	bl	8017f94 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	891a      	ldrh	r2, [r3, #8]
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	891b      	ldrh	r3, [r3, #8]
 800ba9c:	429a      	cmp	r2, r3
 800ba9e:	d005      	beq.n	800baac <tcp_input+0x154>
 800baa0:	4b4d      	ldr	r3, [pc, #308]	; (800bbd8 <tcp_input+0x280>)
 800baa2:	22e0      	movs	r2, #224	; 0xe0
 800baa4:	4956      	ldr	r1, [pc, #344]	; (800bc00 <tcp_input+0x2a8>)
 800baa6:	484e      	ldr	r0, [pc, #312]	; (800bbe0 <tcp_input+0x288>)
 800baa8:	f00c fa74 	bl	8017f94 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800baac:	4b4d      	ldr	r3, [pc, #308]	; (800bbe4 <tcp_input+0x28c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	881b      	ldrh	r3, [r3, #0]
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	4b4b      	ldr	r3, [pc, #300]	; (800bbe4 <tcp_input+0x28c>)
 800bab6:	681c      	ldr	r4, [r3, #0]
 800bab8:	4610      	mov	r0, r2
 800baba:	f7fc fadb 	bl	8008074 <lwip_htons>
 800babe:	4603      	mov	r3, r0
 800bac0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800bac2:	4b48      	ldr	r3, [pc, #288]	; (800bbe4 <tcp_input+0x28c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	885b      	ldrh	r3, [r3, #2]
 800bac8:	b29a      	uxth	r2, r3
 800baca:	4b46      	ldr	r3, [pc, #280]	; (800bbe4 <tcp_input+0x28c>)
 800bacc:	681c      	ldr	r4, [r3, #0]
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fc fad0 	bl	8008074 <lwip_htons>
 800bad4:	4603      	mov	r3, r0
 800bad6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800bad8:	4b42      	ldr	r3, [pc, #264]	; (800bbe4 <tcp_input+0x28c>)
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	685a      	ldr	r2, [r3, #4]
 800bade:	4b41      	ldr	r3, [pc, #260]	; (800bbe4 <tcp_input+0x28c>)
 800bae0:	681c      	ldr	r4, [r3, #0]
 800bae2:	4610      	mov	r0, r2
 800bae4:	f7fc fadb 	bl	800809e <lwip_htonl>
 800bae8:	4603      	mov	r3, r0
 800baea:	6063      	str	r3, [r4, #4]
 800baec:	6863      	ldr	r3, [r4, #4]
 800baee:	4a45      	ldr	r2, [pc, #276]	; (800bc04 <tcp_input+0x2ac>)
 800baf0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800baf2:	4b3c      	ldr	r3, [pc, #240]	; (800bbe4 <tcp_input+0x28c>)
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689a      	ldr	r2, [r3, #8]
 800baf8:	4b3a      	ldr	r3, [pc, #232]	; (800bbe4 <tcp_input+0x28c>)
 800bafa:	681c      	ldr	r4, [r3, #0]
 800bafc:	4610      	mov	r0, r2
 800bafe:	f7fc face 	bl	800809e <lwip_htonl>
 800bb02:	4603      	mov	r3, r0
 800bb04:	60a3      	str	r3, [r4, #8]
 800bb06:	68a3      	ldr	r3, [r4, #8]
 800bb08:	4a3f      	ldr	r2, [pc, #252]	; (800bc08 <tcp_input+0x2b0>)
 800bb0a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800bb0c:	4b35      	ldr	r3, [pc, #212]	; (800bbe4 <tcp_input+0x28c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	89db      	ldrh	r3, [r3, #14]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	4b33      	ldr	r3, [pc, #204]	; (800bbe4 <tcp_input+0x28c>)
 800bb16:	681c      	ldr	r4, [r3, #0]
 800bb18:	4610      	mov	r0, r2
 800bb1a:	f7fc faab 	bl	8008074 <lwip_htons>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800bb22:	4b30      	ldr	r3, [pc, #192]	; (800bbe4 <tcp_input+0x28c>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	899b      	ldrh	r3, [r3, #12]
 800bb28:	b29b      	uxth	r3, r3
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7fc faa2 	bl	8008074 <lwip_htons>
 800bb30:	4603      	mov	r3, r0
 800bb32:	b2db      	uxtb	r3, r3
 800bb34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb38:	b2da      	uxtb	r2, r3
 800bb3a:	4b34      	ldr	r3, [pc, #208]	; (800bc0c <tcp_input+0x2b4>)
 800bb3c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	891a      	ldrh	r2, [r3, #8]
 800bb42:	4b33      	ldr	r3, [pc, #204]	; (800bc10 <tcp_input+0x2b8>)
 800bb44:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800bb46:	4b31      	ldr	r3, [pc, #196]	; (800bc0c <tcp_input+0x2b4>)
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	f003 0303 	and.w	r3, r3, #3
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d00c      	beq.n	800bb6c <tcp_input+0x214>
    tcplen++;
 800bb52:	4b2f      	ldr	r3, [pc, #188]	; (800bc10 <tcp_input+0x2b8>)
 800bb54:	881b      	ldrh	r3, [r3, #0]
 800bb56:	3301      	adds	r3, #1
 800bb58:	b29a      	uxth	r2, r3
 800bb5a:	4b2d      	ldr	r3, [pc, #180]	; (800bc10 <tcp_input+0x2b8>)
 800bb5c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	891a      	ldrh	r2, [r3, #8]
 800bb62:	4b2b      	ldr	r3, [pc, #172]	; (800bc10 <tcp_input+0x2b8>)
 800bb64:	881b      	ldrh	r3, [r3, #0]
 800bb66:	429a      	cmp	r2, r3
 800bb68:	f200 82d7 	bhi.w	800c11a <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bb70:	4b28      	ldr	r3, [pc, #160]	; (800bc14 <tcp_input+0x2bc>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	61fb      	str	r3, [r7, #28]
 800bb76:	e09d      	b.n	800bcb4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	7d1b      	ldrb	r3, [r3, #20]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d105      	bne.n	800bb8c <tcp_input+0x234>
 800bb80:	4b15      	ldr	r3, [pc, #84]	; (800bbd8 <tcp_input+0x280>)
 800bb82:	22fb      	movs	r2, #251	; 0xfb
 800bb84:	4924      	ldr	r1, [pc, #144]	; (800bc18 <tcp_input+0x2c0>)
 800bb86:	4816      	ldr	r0, [pc, #88]	; (800bbe0 <tcp_input+0x288>)
 800bb88:	f00c fa04 	bl	8017f94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800bb8c:	69fb      	ldr	r3, [r7, #28]
 800bb8e:	7d1b      	ldrb	r3, [r3, #20]
 800bb90:	2b0a      	cmp	r3, #10
 800bb92:	d105      	bne.n	800bba0 <tcp_input+0x248>
 800bb94:	4b10      	ldr	r3, [pc, #64]	; (800bbd8 <tcp_input+0x280>)
 800bb96:	22fc      	movs	r2, #252	; 0xfc
 800bb98:	4920      	ldr	r1, [pc, #128]	; (800bc1c <tcp_input+0x2c4>)
 800bb9a:	4811      	ldr	r0, [pc, #68]	; (800bbe0 <tcp_input+0x288>)
 800bb9c:	f00c f9fa 	bl	8017f94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800bba0:	69fb      	ldr	r3, [r7, #28]
 800bba2:	7d1b      	ldrb	r3, [r3, #20]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d105      	bne.n	800bbb4 <tcp_input+0x25c>
 800bba8:	4b0b      	ldr	r3, [pc, #44]	; (800bbd8 <tcp_input+0x280>)
 800bbaa:	22fd      	movs	r2, #253	; 0xfd
 800bbac:	491c      	ldr	r1, [pc, #112]	; (800bc20 <tcp_input+0x2c8>)
 800bbae:	480c      	ldr	r0, [pc, #48]	; (800bbe0 <tcp_input+0x288>)
 800bbb0:	f00c f9f0 	bl	8017f94 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbb4:	69fb      	ldr	r3, [r7, #28]
 800bbb6:	7a1b      	ldrb	r3, [r3, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d033      	beq.n	800bc24 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bbbc:	69fb      	ldr	r3, [r7, #28]
 800bbbe:	7a1a      	ldrb	r2, [r3, #8]
 800bbc0:	4b09      	ldr	r3, [pc, #36]	; (800bbe8 <tcp_input+0x290>)
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bbc8:	3301      	adds	r3, #1
 800bbca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bbcc:	429a      	cmp	r2, r3
 800bbce:	d029      	beq.n	800bc24 <tcp_input+0x2cc>
      prev = pcb;
 800bbd0:	69fb      	ldr	r3, [r7, #28]
 800bbd2:	61bb      	str	r3, [r7, #24]
      continue;
 800bbd4:	e06b      	b.n	800bcae <tcp_input+0x356>
 800bbd6:	bf00      	nop
 800bbd8:	0801ac20 	.word	0x0801ac20
 800bbdc:	0801ac54 	.word	0x0801ac54
 800bbe0:	0801ac6c 	.word	0x0801ac6c
 800bbe4:	200083bc 	.word	0x200083bc
 800bbe8:	20008da8 	.word	0x20008da8
 800bbec:	200083c0 	.word	0x200083c0
 800bbf0:	200083c4 	.word	0x200083c4
 800bbf4:	200083c2 	.word	0x200083c2
 800bbf8:	0801ac94 	.word	0x0801ac94
 800bbfc:	0801aca4 	.word	0x0801aca4
 800bc00:	0801acb0 	.word	0x0801acb0
 800bc04:	200083cc 	.word	0x200083cc
 800bc08:	200083d0 	.word	0x200083d0
 800bc0c:	200083d8 	.word	0x200083d8
 800bc10:	200083d6 	.word	0x200083d6
 800bc14:	2000c4dc 	.word	0x2000c4dc
 800bc18:	0801acd0 	.word	0x0801acd0
 800bc1c:	0801acf8 	.word	0x0801acf8
 800bc20:	0801ad24 	.word	0x0801ad24
    }

    if (pcb->remote_port == tcphdr->src &&
 800bc24:	69fb      	ldr	r3, [r7, #28]
 800bc26:	8b1a      	ldrh	r2, [r3, #24]
 800bc28:	4b94      	ldr	r3, [pc, #592]	; (800be7c <tcp_input+0x524>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	881b      	ldrh	r3, [r3, #0]
 800bc2e:	b29b      	uxth	r3, r3
 800bc30:	429a      	cmp	r2, r3
 800bc32:	d13a      	bne.n	800bcaa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800bc34:	69fb      	ldr	r3, [r7, #28]
 800bc36:	8ada      	ldrh	r2, [r3, #22]
 800bc38:	4b90      	ldr	r3, [pc, #576]	; (800be7c <tcp_input+0x524>)
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	885b      	ldrh	r3, [r3, #2]
 800bc3e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800bc40:	429a      	cmp	r2, r3
 800bc42:	d132      	bne.n	800bcaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	685a      	ldr	r2, [r3, #4]
 800bc48:	4b8d      	ldr	r3, [pc, #564]	; (800be80 <tcp_input+0x528>)
 800bc4a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d12c      	bne.n	800bcaa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	4b8a      	ldr	r3, [pc, #552]	; (800be80 <tcp_input+0x528>)
 800bc56:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bc58:	429a      	cmp	r2, r3
 800bc5a:	d126      	bne.n	800bcaa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	68db      	ldr	r3, [r3, #12]
 800bc60:	69fa      	ldr	r2, [r7, #28]
 800bc62:	429a      	cmp	r2, r3
 800bc64:	d106      	bne.n	800bc74 <tcp_input+0x31c>
 800bc66:	4b87      	ldr	r3, [pc, #540]	; (800be84 <tcp_input+0x52c>)
 800bc68:	f240 120d 	movw	r2, #269	; 0x10d
 800bc6c:	4986      	ldr	r1, [pc, #536]	; (800be88 <tcp_input+0x530>)
 800bc6e:	4887      	ldr	r0, [pc, #540]	; (800be8c <tcp_input+0x534>)
 800bc70:	f00c f990 	bl	8017f94 <iprintf>
      if (prev != NULL) {
 800bc74:	69bb      	ldr	r3, [r7, #24]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d00a      	beq.n	800bc90 <tcp_input+0x338>
        prev->next = pcb->next;
 800bc7a:	69fb      	ldr	r3, [r7, #28]
 800bc7c:	68da      	ldr	r2, [r3, #12]
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800bc82:	4b83      	ldr	r3, [pc, #524]	; (800be90 <tcp_input+0x538>)
 800bc84:	681a      	ldr	r2, [r3, #0]
 800bc86:	69fb      	ldr	r3, [r7, #28]
 800bc88:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800bc8a:	4a81      	ldr	r2, [pc, #516]	; (800be90 <tcp_input+0x538>)
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800bc90:	69fb      	ldr	r3, [r7, #28]
 800bc92:	68db      	ldr	r3, [r3, #12]
 800bc94:	69fa      	ldr	r2, [r7, #28]
 800bc96:	429a      	cmp	r2, r3
 800bc98:	d111      	bne.n	800bcbe <tcp_input+0x366>
 800bc9a:	4b7a      	ldr	r3, [pc, #488]	; (800be84 <tcp_input+0x52c>)
 800bc9c:	f240 1215 	movw	r2, #277	; 0x115
 800bca0:	497c      	ldr	r1, [pc, #496]	; (800be94 <tcp_input+0x53c>)
 800bca2:	487a      	ldr	r0, [pc, #488]	; (800be8c <tcp_input+0x534>)
 800bca4:	f00c f976 	bl	8017f94 <iprintf>
      break;
 800bca8:	e009      	b.n	800bcbe <tcp_input+0x366>
    }
    prev = pcb;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcae:	69fb      	ldr	r3, [r7, #28]
 800bcb0:	68db      	ldr	r3, [r3, #12]
 800bcb2:	61fb      	str	r3, [r7, #28]
 800bcb4:	69fb      	ldr	r3, [r7, #28]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	f47f af5e 	bne.w	800bb78 <tcp_input+0x220>
 800bcbc:	e000      	b.n	800bcc0 <tcp_input+0x368>
      break;
 800bcbe:	bf00      	nop
  }

  if (pcb == NULL) {
 800bcc0:	69fb      	ldr	r3, [r7, #28]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	f040 8095 	bne.w	800bdf2 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bcc8:	4b73      	ldr	r3, [pc, #460]	; (800be98 <tcp_input+0x540>)
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	61fb      	str	r3, [r7, #28]
 800bcce:	e03f      	b.n	800bd50 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	7d1b      	ldrb	r3, [r3, #20]
 800bcd4:	2b0a      	cmp	r3, #10
 800bcd6:	d006      	beq.n	800bce6 <tcp_input+0x38e>
 800bcd8:	4b6a      	ldr	r3, [pc, #424]	; (800be84 <tcp_input+0x52c>)
 800bcda:	f240 121f 	movw	r2, #287	; 0x11f
 800bcde:	496f      	ldr	r1, [pc, #444]	; (800be9c <tcp_input+0x544>)
 800bce0:	486a      	ldr	r0, [pc, #424]	; (800be8c <tcp_input+0x534>)
 800bce2:	f00c f957 	bl	8017f94 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bce6:	69fb      	ldr	r3, [r7, #28]
 800bce8:	7a1b      	ldrb	r3, [r3, #8]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d009      	beq.n	800bd02 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bcee:	69fb      	ldr	r3, [r7, #28]
 800bcf0:	7a1a      	ldrb	r2, [r3, #8]
 800bcf2:	4b63      	ldr	r3, [pc, #396]	; (800be80 <tcp_input+0x528>)
 800bcf4:	685b      	ldr	r3, [r3, #4]
 800bcf6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bcfe:	429a      	cmp	r2, r3
 800bd00:	d122      	bne.n	800bd48 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	8b1a      	ldrh	r2, [r3, #24]
 800bd06:	4b5d      	ldr	r3, [pc, #372]	; (800be7c <tcp_input+0x524>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	881b      	ldrh	r3, [r3, #0]
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	429a      	cmp	r2, r3
 800bd10:	d11b      	bne.n	800bd4a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800bd12:	69fb      	ldr	r3, [r7, #28]
 800bd14:	8ada      	ldrh	r2, [r3, #22]
 800bd16:	4b59      	ldr	r3, [pc, #356]	; (800be7c <tcp_input+0x524>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	885b      	ldrh	r3, [r3, #2]
 800bd1c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800bd1e:	429a      	cmp	r2, r3
 800bd20:	d113      	bne.n	800bd4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	685a      	ldr	r2, [r3, #4]
 800bd26:	4b56      	ldr	r3, [pc, #344]	; (800be80 <tcp_input+0x528>)
 800bd28:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d10d      	bne.n	800bd4a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bd2e:	69fb      	ldr	r3, [r7, #28]
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	4b53      	ldr	r3, [pc, #332]	; (800be80 <tcp_input+0x528>)
 800bd34:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800bd36:	429a      	cmp	r2, r3
 800bd38:	d107      	bne.n	800bd4a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800bd3a:	69f8      	ldr	r0, [r7, #28]
 800bd3c:	f000 fb52 	bl	800c3e4 <tcp_timewait_input>
        }
        pbuf_free(p);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f7fd fd4b 	bl	80097dc <pbuf_free>
        return;
 800bd46:	e1ee      	b.n	800c126 <tcp_input+0x7ce>
        continue;
 800bd48:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	61fb      	str	r3, [r7, #28]
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1bc      	bne.n	800bcd0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800bd56:	2300      	movs	r3, #0
 800bd58:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bd5a:	4b51      	ldr	r3, [pc, #324]	; (800bea0 <tcp_input+0x548>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	617b      	str	r3, [r7, #20]
 800bd60:	e02a      	b.n	800bdb8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	7a1b      	ldrb	r3, [r3, #8]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d00c      	beq.n	800bd84 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bd6a:	697b      	ldr	r3, [r7, #20]
 800bd6c:	7a1a      	ldrb	r2, [r3, #8]
 800bd6e:	4b44      	ldr	r3, [pc, #272]	; (800be80 <tcp_input+0x528>)
 800bd70:	685b      	ldr	r3, [r3, #4]
 800bd72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800bd76:	3301      	adds	r3, #1
 800bd78:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800bd7a:	429a      	cmp	r2, r3
 800bd7c:	d002      	beq.n	800bd84 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800bd7e:	697b      	ldr	r3, [r7, #20]
 800bd80:	61bb      	str	r3, [r7, #24]
        continue;
 800bd82:	e016      	b.n	800bdb2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800bd84:	697b      	ldr	r3, [r7, #20]
 800bd86:	8ada      	ldrh	r2, [r3, #22]
 800bd88:	4b3c      	ldr	r3, [pc, #240]	; (800be7c <tcp_input+0x524>)
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	885b      	ldrh	r3, [r3, #2]
 800bd8e:	b29b      	uxth	r3, r3
 800bd90:	429a      	cmp	r2, r3
 800bd92:	d10c      	bne.n	800bdae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	4b39      	ldr	r3, [pc, #228]	; (800be80 <tcp_input+0x528>)
 800bd9a:	695b      	ldr	r3, [r3, #20]
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d00f      	beq.n	800bdc0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d00d      	beq.n	800bdc2 <tcp_input+0x46a>
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d009      	beq.n	800bdc2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	68db      	ldr	r3, [r3, #12]
 800bdb6:	617b      	str	r3, [r7, #20]
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d1d1      	bne.n	800bd62 <tcp_input+0x40a>
 800bdbe:	e000      	b.n	800bdc2 <tcp_input+0x46a>
            break;
 800bdc0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d014      	beq.n	800bdf2 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800bdc8:	69bb      	ldr	r3, [r7, #24]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d00a      	beq.n	800bde4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	68da      	ldr	r2, [r3, #12]
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800bdd6:	4b32      	ldr	r3, [pc, #200]	; (800bea0 <tcp_input+0x548>)
 800bdd8:	681a      	ldr	r2, [r3, #0]
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800bdde:	4a30      	ldr	r2, [pc, #192]	; (800bea0 <tcp_input+0x548>)
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800bde4:	6978      	ldr	r0, [r7, #20]
 800bde6:	f000 f9ff 	bl	800c1e8 <tcp_listen_input>
      }
      pbuf_free(p);
 800bdea:	6878      	ldr	r0, [r7, #4]
 800bdec:	f7fd fcf6 	bl	80097dc <pbuf_free>
      return;
 800bdf0:	e199      	b.n	800c126 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	f000 8160 	beq.w	800c0ba <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800bdfa:	4b2a      	ldr	r3, [pc, #168]	; (800bea4 <tcp_input+0x54c>)
 800bdfc:	2200      	movs	r2, #0
 800bdfe:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	891a      	ldrh	r2, [r3, #8]
 800be04:	4b27      	ldr	r3, [pc, #156]	; (800bea4 <tcp_input+0x54c>)
 800be06:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800be08:	4a26      	ldr	r2, [pc, #152]	; (800bea4 <tcp_input+0x54c>)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800be0e:	4b1b      	ldr	r3, [pc, #108]	; (800be7c <tcp_input+0x524>)
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	4a24      	ldr	r2, [pc, #144]	; (800bea4 <tcp_input+0x54c>)
 800be14:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800be16:	4b24      	ldr	r3, [pc, #144]	; (800bea8 <tcp_input+0x550>)
 800be18:	2200      	movs	r2, #0
 800be1a:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800be1c:	4b23      	ldr	r3, [pc, #140]	; (800beac <tcp_input+0x554>)
 800be1e:	2200      	movs	r2, #0
 800be20:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800be22:	4b23      	ldr	r3, [pc, #140]	; (800beb0 <tcp_input+0x558>)
 800be24:	2200      	movs	r2, #0
 800be26:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800be28:	4b22      	ldr	r3, [pc, #136]	; (800beb4 <tcp_input+0x55c>)
 800be2a:	781b      	ldrb	r3, [r3, #0]
 800be2c:	f003 0308 	and.w	r3, r3, #8
 800be30:	2b00      	cmp	r3, #0
 800be32:	d006      	beq.n	800be42 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	7b5b      	ldrb	r3, [r3, #13]
 800be38:	f043 0301 	orr.w	r3, r3, #1
 800be3c:	b2da      	uxtb	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be46:	2b00      	cmp	r3, #0
 800be48:	d038      	beq.n	800bebc <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be4a:	69f8      	ldr	r0, [r7, #28]
 800be4c:	f7ff f872 	bl	800af34 <tcp_process_refused_data>
 800be50:	4603      	mov	r3, r0
 800be52:	f113 0f0d 	cmn.w	r3, #13
 800be56:	d007      	beq.n	800be68 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d02d      	beq.n	800bebc <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800be60:	4b15      	ldr	r3, [pc, #84]	; (800beb8 <tcp_input+0x560>)
 800be62:	881b      	ldrh	r3, [r3, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d029      	beq.n	800bebc <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f040 8104 	bne.w	800c07a <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800be72:	69f8      	ldr	r0, [r7, #28]
 800be74:	f003 fe26 	bl	800fac4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800be78:	e0ff      	b.n	800c07a <tcp_input+0x722>
 800be7a:	bf00      	nop
 800be7c:	200083bc 	.word	0x200083bc
 800be80:	20008da8 	.word	0x20008da8
 800be84:	0801ac20 	.word	0x0801ac20
 800be88:	0801ad4c 	.word	0x0801ad4c
 800be8c:	0801ac6c 	.word	0x0801ac6c
 800be90:	2000c4dc 	.word	0x2000c4dc
 800be94:	0801ad78 	.word	0x0801ad78
 800be98:	2000c4ec 	.word	0x2000c4ec
 800be9c:	0801ada4 	.word	0x0801ada4
 800bea0:	2000c4e4 	.word	0x2000c4e4
 800bea4:	200083ac 	.word	0x200083ac
 800bea8:	200083dc 	.word	0x200083dc
 800beac:	200083d9 	.word	0x200083d9
 800beb0:	200083d4 	.word	0x200083d4
 800beb4:	200083d8 	.word	0x200083d8
 800beb8:	200083d6 	.word	0x200083d6
      }
    }
    tcp_input_pcb = pcb;
 800bebc:	4a9b      	ldr	r2, [pc, #620]	; (800c12c <tcp_input+0x7d4>)
 800bebe:	69fb      	ldr	r3, [r7, #28]
 800bec0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800bec2:	69f8      	ldr	r0, [r7, #28]
 800bec4:	f000 fb0a 	bl	800c4dc <tcp_process>
 800bec8:	4603      	mov	r3, r0
 800beca:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800becc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bed0:	f113 0f0d 	cmn.w	r3, #13
 800bed4:	f000 80d3 	beq.w	800c07e <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800bed8:	4b95      	ldr	r3, [pc, #596]	; (800c130 <tcp_input+0x7d8>)
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	f003 0308 	and.w	r3, r3, #8
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d015      	beq.n	800bf10 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beea:	2b00      	cmp	r3, #0
 800beec:	d008      	beq.n	800bf00 <tcp_input+0x5a8>
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bef4:	69fa      	ldr	r2, [r7, #28]
 800bef6:	6912      	ldr	r2, [r2, #16]
 800bef8:	f06f 010d 	mvn.w	r1, #13
 800befc:	4610      	mov	r0, r2
 800befe:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800bf00:	69f9      	ldr	r1, [r7, #28]
 800bf02:	488c      	ldr	r0, [pc, #560]	; (800c134 <tcp_input+0x7dc>)
 800bf04:	f7ff fbb0 	bl	800b668 <tcp_pcb_remove>
        tcp_free(pcb);
 800bf08:	69f8      	ldr	r0, [r7, #28]
 800bf0a:	f7fd ff23 	bl	8009d54 <tcp_free>
 800bf0e:	e0c1      	b.n	800c094 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800bf10:	2300      	movs	r3, #0
 800bf12:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800bf14:	4b88      	ldr	r3, [pc, #544]	; (800c138 <tcp_input+0x7e0>)
 800bf16:	881b      	ldrh	r3, [r3, #0]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01d      	beq.n	800bf58 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800bf1c:	4b86      	ldr	r3, [pc, #536]	; (800c138 <tcp_input+0x7e0>)
 800bf1e:	881b      	ldrh	r3, [r3, #0]
 800bf20:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d00a      	beq.n	800bf42 <tcp_input+0x5ea>
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf32:	69fa      	ldr	r2, [r7, #28]
 800bf34:	6910      	ldr	r0, [r2, #16]
 800bf36:	89fa      	ldrh	r2, [r7, #14]
 800bf38:	69f9      	ldr	r1, [r7, #28]
 800bf3a:	4798      	blx	r3
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	74fb      	strb	r3, [r7, #19]
 800bf40:	e001      	b.n	800bf46 <tcp_input+0x5ee>
 800bf42:	2300      	movs	r3, #0
 800bf44:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800bf46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bf4a:	f113 0f0d 	cmn.w	r3, #13
 800bf4e:	f000 8098 	beq.w	800c082 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800bf52:	4b79      	ldr	r3, [pc, #484]	; (800c138 <tcp_input+0x7e0>)
 800bf54:	2200      	movs	r2, #0
 800bf56:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800bf58:	69f8      	ldr	r0, [r7, #28]
 800bf5a:	f000 f905 	bl	800c168 <tcp_input_delayed_close>
 800bf5e:	4603      	mov	r3, r0
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	f040 8090 	bne.w	800c086 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800bf66:	4b75      	ldr	r3, [pc, #468]	; (800c13c <tcp_input+0x7e4>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d041      	beq.n	800bff2 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800bf6e:	69fb      	ldr	r3, [r7, #28]
 800bf70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d006      	beq.n	800bf84 <tcp_input+0x62c>
 800bf76:	4b72      	ldr	r3, [pc, #456]	; (800c140 <tcp_input+0x7e8>)
 800bf78:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800bf7c:	4971      	ldr	r1, [pc, #452]	; (800c144 <tcp_input+0x7ec>)
 800bf7e:	4872      	ldr	r0, [pc, #456]	; (800c148 <tcp_input+0x7f0>)
 800bf80:	f00c f808 	bl	8017f94 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	8b5b      	ldrh	r3, [r3, #26]
 800bf88:	f003 0310 	and.w	r3, r3, #16
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d008      	beq.n	800bfa2 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800bf90:	4b6a      	ldr	r3, [pc, #424]	; (800c13c <tcp_input+0x7e4>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f7fd fc21 	bl	80097dc <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800bf9a:	69f8      	ldr	r0, [r7, #28]
 800bf9c:	f7fe fa14 	bl	800a3c8 <tcp_abort>
            goto aborted;
 800bfa0:	e078      	b.n	800c094 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d00c      	beq.n	800bfc6 <tcp_input+0x66e>
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800bfb2:	69fb      	ldr	r3, [r7, #28]
 800bfb4:	6918      	ldr	r0, [r3, #16]
 800bfb6:	4b61      	ldr	r3, [pc, #388]	; (800c13c <tcp_input+0x7e4>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	2300      	movs	r3, #0
 800bfbc:	69f9      	ldr	r1, [r7, #28]
 800bfbe:	47a0      	blx	r4
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	74fb      	strb	r3, [r7, #19]
 800bfc4:	e008      	b.n	800bfd8 <tcp_input+0x680>
 800bfc6:	4b5d      	ldr	r3, [pc, #372]	; (800c13c <tcp_input+0x7e4>)
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	2300      	movs	r3, #0
 800bfcc:	69f9      	ldr	r1, [r7, #28]
 800bfce:	2000      	movs	r0, #0
 800bfd0:	f7ff f884 	bl	800b0dc <tcp_recv_null>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800bfd8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfdc:	f113 0f0d 	cmn.w	r3, #13
 800bfe0:	d053      	beq.n	800c08a <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800bfe2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d003      	beq.n	800bff2 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800bfea:	4b54      	ldr	r3, [pc, #336]	; (800c13c <tcp_input+0x7e4>)
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	69fb      	ldr	r3, [r7, #28]
 800bff0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800bff2:	4b4f      	ldr	r3, [pc, #316]	; (800c130 <tcp_input+0x7d8>)
 800bff4:	781b      	ldrb	r3, [r3, #0]
 800bff6:	f003 0320 	and.w	r3, r3, #32
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d030      	beq.n	800c060 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c002:	2b00      	cmp	r3, #0
 800c004:	d009      	beq.n	800c01a <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800c006:	69fb      	ldr	r3, [r7, #28]
 800c008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c00a:	7b5a      	ldrb	r2, [r3, #13]
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c010:	f042 0220 	orr.w	r2, r2, #32
 800c014:	b2d2      	uxtb	r2, r2
 800c016:	735a      	strb	r2, [r3, #13]
 800c018:	e022      	b.n	800c060 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c01a:	69fb      	ldr	r3, [r7, #28]
 800c01c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c01e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c022:	d005      	beq.n	800c030 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c028:	3301      	adds	r3, #1
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	69fb      	ldr	r3, [r7, #28]
 800c02e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800c030:	69fb      	ldr	r3, [r7, #28]
 800c032:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00b      	beq.n	800c052 <tcp_input+0x6fa>
 800c03a:	69fb      	ldr	r3, [r7, #28]
 800c03c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	6918      	ldr	r0, [r3, #16]
 800c044:	2300      	movs	r3, #0
 800c046:	2200      	movs	r2, #0
 800c048:	69f9      	ldr	r1, [r7, #28]
 800c04a:	47a0      	blx	r4
 800c04c:	4603      	mov	r3, r0
 800c04e:	74fb      	strb	r3, [r7, #19]
 800c050:	e001      	b.n	800c056 <tcp_input+0x6fe>
 800c052:	2300      	movs	r3, #0
 800c054:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800c056:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c05a:	f113 0f0d 	cmn.w	r3, #13
 800c05e:	d016      	beq.n	800c08e <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800c060:	4b32      	ldr	r3, [pc, #200]	; (800c12c <tcp_input+0x7d4>)
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800c066:	69f8      	ldr	r0, [r7, #28]
 800c068:	f000 f87e 	bl	800c168 <tcp_input_delayed_close>
 800c06c:	4603      	mov	r3, r0
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d10f      	bne.n	800c092 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800c072:	69f8      	ldr	r0, [r7, #28]
 800c074:	f002 ff10 	bl	800ee98 <tcp_output>
 800c078:	e00c      	b.n	800c094 <tcp_input+0x73c>
        goto aborted;
 800c07a:	bf00      	nop
 800c07c:	e00a      	b.n	800c094 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800c07e:	bf00      	nop
 800c080:	e008      	b.n	800c094 <tcp_input+0x73c>
              goto aborted;
 800c082:	bf00      	nop
 800c084:	e006      	b.n	800c094 <tcp_input+0x73c>
          goto aborted;
 800c086:	bf00      	nop
 800c088:	e004      	b.n	800c094 <tcp_input+0x73c>
            goto aborted;
 800c08a:	bf00      	nop
 800c08c:	e002      	b.n	800c094 <tcp_input+0x73c>
              goto aborted;
 800c08e:	bf00      	nop
 800c090:	e000      	b.n	800c094 <tcp_input+0x73c>
          goto aborted;
 800c092:	bf00      	nop
    tcp_input_pcb = NULL;
 800c094:	4b25      	ldr	r3, [pc, #148]	; (800c12c <tcp_input+0x7d4>)
 800c096:	2200      	movs	r2, #0
 800c098:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800c09a:	4b28      	ldr	r3, [pc, #160]	; (800c13c <tcp_input+0x7e4>)
 800c09c:	2200      	movs	r2, #0
 800c09e:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800c0a0:	4b2a      	ldr	r3, [pc, #168]	; (800c14c <tcp_input+0x7f4>)
 800c0a2:	685b      	ldr	r3, [r3, #4]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d03d      	beq.n	800c124 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 800c0a8:	4b28      	ldr	r3, [pc, #160]	; (800c14c <tcp_input+0x7f4>)
 800c0aa:	685b      	ldr	r3, [r3, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f7fd fb95 	bl	80097dc <pbuf_free>
      inseg.p = NULL;
 800c0b2:	4b26      	ldr	r3, [pc, #152]	; (800c14c <tcp_input+0x7f4>)
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800c0b8:	e034      	b.n	800c124 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800c0ba:	4b25      	ldr	r3, [pc, #148]	; (800c150 <tcp_input+0x7f8>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	899b      	ldrh	r3, [r3, #12]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7fb ffd6 	bl	8008074 <lwip_htons>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	b2db      	uxtb	r3, r3
 800c0cc:	f003 0304 	and.w	r3, r3, #4
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d118      	bne.n	800c106 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0d4:	4b1f      	ldr	r3, [pc, #124]	; (800c154 <tcp_input+0x7fc>)
 800c0d6:	6819      	ldr	r1, [r3, #0]
 800c0d8:	4b1f      	ldr	r3, [pc, #124]	; (800c158 <tcp_input+0x800>)
 800c0da:	881b      	ldrh	r3, [r3, #0]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4b1f      	ldr	r3, [pc, #124]	; (800c15c <tcp_input+0x804>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0e4:	4b1a      	ldr	r3, [pc, #104]	; (800c150 <tcp_input+0x7f8>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0e8:	885b      	ldrh	r3, [r3, #2]
 800c0ea:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c0ec:	4a18      	ldr	r2, [pc, #96]	; (800c150 <tcp_input+0x7f8>)
 800c0ee:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c0f0:	8812      	ldrh	r2, [r2, #0]
 800c0f2:	b292      	uxth	r2, r2
 800c0f4:	9202      	str	r2, [sp, #8]
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	4b19      	ldr	r3, [pc, #100]	; (800c160 <tcp_input+0x808>)
 800c0fa:	9300      	str	r3, [sp, #0]
 800c0fc:	4b19      	ldr	r3, [pc, #100]	; (800c164 <tcp_input+0x80c>)
 800c0fe:	4602      	mov	r2, r0
 800c100:	2000      	movs	r0, #0
 800c102:	f003 fc8d 	bl	800fa20 <tcp_rst>
    pbuf_free(p);
 800c106:	6878      	ldr	r0, [r7, #4]
 800c108:	f7fd fb68 	bl	80097dc <pbuf_free>
  return;
 800c10c:	e00a      	b.n	800c124 <tcp_input+0x7cc>
    goto dropped;
 800c10e:	bf00      	nop
 800c110:	e004      	b.n	800c11c <tcp_input+0x7c4>
dropped:
 800c112:	bf00      	nop
 800c114:	e002      	b.n	800c11c <tcp_input+0x7c4>
      goto dropped;
 800c116:	bf00      	nop
 800c118:	e000      	b.n	800c11c <tcp_input+0x7c4>
      goto dropped;
 800c11a:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800c11c:	6878      	ldr	r0, [r7, #4]
 800c11e:	f7fd fb5d 	bl	80097dc <pbuf_free>
 800c122:	e000      	b.n	800c126 <tcp_input+0x7ce>
  return;
 800c124:	bf00      	nop
}
 800c126:	3724      	adds	r7, #36	; 0x24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd90      	pop	{r4, r7, pc}
 800c12c:	2000c4f0 	.word	0x2000c4f0
 800c130:	200083d9 	.word	0x200083d9
 800c134:	2000c4dc 	.word	0x2000c4dc
 800c138:	200083d4 	.word	0x200083d4
 800c13c:	200083dc 	.word	0x200083dc
 800c140:	0801ac20 	.word	0x0801ac20
 800c144:	0801add4 	.word	0x0801add4
 800c148:	0801ac6c 	.word	0x0801ac6c
 800c14c:	200083ac 	.word	0x200083ac
 800c150:	200083bc 	.word	0x200083bc
 800c154:	200083d0 	.word	0x200083d0
 800c158:	200083d6 	.word	0x200083d6
 800c15c:	200083cc 	.word	0x200083cc
 800c160:	20008db8 	.word	0x20008db8
 800c164:	20008dbc 	.word	0x20008dbc

0800c168 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b082      	sub	sp, #8
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d106      	bne.n	800c184 <tcp_input_delayed_close+0x1c>
 800c176:	4b17      	ldr	r3, [pc, #92]	; (800c1d4 <tcp_input_delayed_close+0x6c>)
 800c178:	f240 225a 	movw	r2, #602	; 0x25a
 800c17c:	4916      	ldr	r1, [pc, #88]	; (800c1d8 <tcp_input_delayed_close+0x70>)
 800c17e:	4817      	ldr	r0, [pc, #92]	; (800c1dc <tcp_input_delayed_close+0x74>)
 800c180:	f00b ff08 	bl	8017f94 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800c184:	4b16      	ldr	r3, [pc, #88]	; (800c1e0 <tcp_input_delayed_close+0x78>)
 800c186:	781b      	ldrb	r3, [r3, #0]
 800c188:	f003 0310 	and.w	r3, r3, #16
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d01c      	beq.n	800c1ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	8b5b      	ldrh	r3, [r3, #26]
 800c194:	f003 0310 	and.w	r3, r3, #16
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10d      	bne.n	800c1b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d008      	beq.n	800c1b8 <tcp_input_delayed_close+0x50>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1ac:	687a      	ldr	r2, [r7, #4]
 800c1ae:	6912      	ldr	r2, [r2, #16]
 800c1b0:	f06f 010e 	mvn.w	r1, #14
 800c1b4:	4610      	mov	r0, r2
 800c1b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800c1b8:	6879      	ldr	r1, [r7, #4]
 800c1ba:	480a      	ldr	r0, [pc, #40]	; (800c1e4 <tcp_input_delayed_close+0x7c>)
 800c1bc:	f7ff fa54 	bl	800b668 <tcp_pcb_remove>
    tcp_free(pcb);
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f7fd fdc7 	bl	8009d54 <tcp_free>
    return 1;
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e000      	b.n	800c1cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3708      	adds	r7, #8
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}
 800c1d4:	0801ac20 	.word	0x0801ac20
 800c1d8:	0801adf0 	.word	0x0801adf0
 800c1dc:	0801ac6c 	.word	0x0801ac6c
 800c1e0:	200083d9 	.word	0x200083d9
 800c1e4:	2000c4dc 	.word	0x2000c4dc

0800c1e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800c1e8:	b590      	push	{r4, r7, lr}
 800c1ea:	b08b      	sub	sp, #44	; 0x2c
 800c1ec:	af04      	add	r7, sp, #16
 800c1ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800c1f0:	4b6f      	ldr	r3, [pc, #444]	; (800c3b0 <tcp_listen_input+0x1c8>)
 800c1f2:	781b      	ldrb	r3, [r3, #0]
 800c1f4:	f003 0304 	and.w	r3, r3, #4
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	f040 80d3 	bne.w	800c3a4 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d106      	bne.n	800c212 <tcp_listen_input+0x2a>
 800c204:	4b6b      	ldr	r3, [pc, #428]	; (800c3b4 <tcp_listen_input+0x1cc>)
 800c206:	f240 2281 	movw	r2, #641	; 0x281
 800c20a:	496b      	ldr	r1, [pc, #428]	; (800c3b8 <tcp_listen_input+0x1d0>)
 800c20c:	486b      	ldr	r0, [pc, #428]	; (800c3bc <tcp_listen_input+0x1d4>)
 800c20e:	f00b fec1 	bl	8017f94 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800c212:	4b67      	ldr	r3, [pc, #412]	; (800c3b0 <tcp_listen_input+0x1c8>)
 800c214:	781b      	ldrb	r3, [r3, #0]
 800c216:	f003 0310 	and.w	r3, r3, #16
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d019      	beq.n	800c252 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c21e:	4b68      	ldr	r3, [pc, #416]	; (800c3c0 <tcp_listen_input+0x1d8>)
 800c220:	6819      	ldr	r1, [r3, #0]
 800c222:	4b68      	ldr	r3, [pc, #416]	; (800c3c4 <tcp_listen_input+0x1dc>)
 800c224:	881b      	ldrh	r3, [r3, #0]
 800c226:	461a      	mov	r2, r3
 800c228:	4b67      	ldr	r3, [pc, #412]	; (800c3c8 <tcp_listen_input+0x1e0>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c22e:	4b67      	ldr	r3, [pc, #412]	; (800c3cc <tcp_listen_input+0x1e4>)
 800c230:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c232:	885b      	ldrh	r3, [r3, #2]
 800c234:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c236:	4a65      	ldr	r2, [pc, #404]	; (800c3cc <tcp_listen_input+0x1e4>)
 800c238:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c23a:	8812      	ldrh	r2, [r2, #0]
 800c23c:	b292      	uxth	r2, r2
 800c23e:	9202      	str	r2, [sp, #8]
 800c240:	9301      	str	r3, [sp, #4]
 800c242:	4b63      	ldr	r3, [pc, #396]	; (800c3d0 <tcp_listen_input+0x1e8>)
 800c244:	9300      	str	r3, [sp, #0]
 800c246:	4b63      	ldr	r3, [pc, #396]	; (800c3d4 <tcp_listen_input+0x1ec>)
 800c248:	4602      	mov	r2, r0
 800c24a:	6878      	ldr	r0, [r7, #4]
 800c24c:	f003 fbe8 	bl	800fa20 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800c250:	e0aa      	b.n	800c3a8 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800c252:	4b57      	ldr	r3, [pc, #348]	; (800c3b0 <tcp_listen_input+0x1c8>)
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	f000 80a4 	beq.w	800c3a8 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7d5b      	ldrb	r3, [r3, #21]
 800c264:	4618      	mov	r0, r3
 800c266:	f7ff f85d 	bl	800b324 <tcp_alloc>
 800c26a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d111      	bne.n	800c296 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d00a      	beq.n	800c290 <tcp_listen_input+0xa8>
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	699b      	ldr	r3, [r3, #24]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	6910      	ldr	r0, [r2, #16]
 800c282:	f04f 32ff 	mov.w	r2, #4294967295
 800c286:	2100      	movs	r1, #0
 800c288:	4798      	blx	r3
 800c28a:	4603      	mov	r3, r0
 800c28c:	73bb      	strb	r3, [r7, #14]
      return;
 800c28e:	e08c      	b.n	800c3aa <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800c290:	23f0      	movs	r3, #240	; 0xf0
 800c292:	73bb      	strb	r3, [r7, #14]
      return;
 800c294:	e089      	b.n	800c3aa <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800c296:	4b50      	ldr	r3, [pc, #320]	; (800c3d8 <tcp_listen_input+0x1f0>)
 800c298:	695a      	ldr	r2, [r3, #20]
 800c29a:	697b      	ldr	r3, [r7, #20]
 800c29c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800c29e:	4b4e      	ldr	r3, [pc, #312]	; (800c3d8 <tcp_listen_input+0x1f0>)
 800c2a0:	691a      	ldr	r2, [r3, #16]
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	8ada      	ldrh	r2, [r3, #22]
 800c2aa:	697b      	ldr	r3, [r7, #20]
 800c2ac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800c2ae:	4b47      	ldr	r3, [pc, #284]	; (800c3cc <tcp_listen_input+0x1e4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	881b      	ldrh	r3, [r3, #0]
 800c2b4:	b29a      	uxth	r2, r3
 800c2b6:	697b      	ldr	r3, [r7, #20]
 800c2b8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800c2ba:	697b      	ldr	r3, [r7, #20]
 800c2bc:	2203      	movs	r2, #3
 800c2be:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800c2c0:	4b41      	ldr	r3, [pc, #260]	; (800c3c8 <tcp_listen_input+0x1e0>)
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	1c5a      	adds	r2, r3, #1
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800c2ca:	697b      	ldr	r3, [r7, #20]
 800c2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ce:	697b      	ldr	r3, [r7, #20]
 800c2d0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800c2d2:	6978      	ldr	r0, [r7, #20]
 800c2d4:	f7ff fa5c 	bl	800b790 <tcp_next_iss>
 800c2d8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800c2da:	697b      	ldr	r3, [r7, #20]
 800c2dc:	693a      	ldr	r2, [r7, #16]
 800c2de:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800c2e0:	697b      	ldr	r3, [r7, #20]
 800c2e2:	693a      	ldr	r2, [r7, #16]
 800c2e4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800c2e6:	697b      	ldr	r3, [r7, #20]
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	693a      	ldr	r2, [r7, #16]
 800c2f0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800c2f2:	4b35      	ldr	r3, [pc, #212]	; (800c3c8 <tcp_listen_input+0x1e0>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	1e5a      	subs	r2, r3, #1
 800c2f8:	697b      	ldr	r3, [r7, #20]
 800c2fa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	691a      	ldr	r2, [r3, #16]
 800c300:	697b      	ldr	r3, [r7, #20]
 800c302:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800c304:	697b      	ldr	r3, [r7, #20]
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	7a5b      	ldrb	r3, [r3, #9]
 800c30e:	f003 030c 	and.w	r3, r3, #12
 800c312:	b2da      	uxtb	r2, r3
 800c314:	697b      	ldr	r3, [r7, #20]
 800c316:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	7a1a      	ldrb	r2, [r3, #8]
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800c320:	4b2e      	ldr	r3, [pc, #184]	; (800c3dc <tcp_listen_input+0x1f4>)
 800c322:	681a      	ldr	r2, [r3, #0]
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	60da      	str	r2, [r3, #12]
 800c328:	4a2c      	ldr	r2, [pc, #176]	; (800c3dc <tcp_listen_input+0x1f4>)
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	6013      	str	r3, [r2, #0]
 800c32e:	f003 fd39 	bl	800fda4 <tcp_timer_needed>
 800c332:	4b2b      	ldr	r3, [pc, #172]	; (800c3e0 <tcp_listen_input+0x1f8>)
 800c334:	2201      	movs	r2, #1
 800c336:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800c338:	6978      	ldr	r0, [r7, #20]
 800c33a:	f001 fd8f 	bl	800de5c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800c33e:	4b23      	ldr	r3, [pc, #140]	; (800c3cc <tcp_listen_input+0x1e4>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	89db      	ldrh	r3, [r3, #14]
 800c344:	b29a      	uxth	r2, r3
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	3304      	adds	r3, #4
 800c360:	4618      	mov	r0, r3
 800c362:	f007 fadf 	bl	8013924 <ip4_route>
 800c366:	4601      	mov	r1, r0
 800c368:	697b      	ldr	r3, [r7, #20]
 800c36a:	3304      	adds	r3, #4
 800c36c:	461a      	mov	r2, r3
 800c36e:	4620      	mov	r0, r4
 800c370:	f7ff fa34 	bl	800b7dc <tcp_eff_send_mss_netif>
 800c374:	4603      	mov	r3, r0
 800c376:	461a      	mov	r2, r3
 800c378:	697b      	ldr	r3, [r7, #20]
 800c37a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800c37c:	2112      	movs	r1, #18
 800c37e:	6978      	ldr	r0, [r7, #20]
 800c380:	f002 fc9c 	bl	800ecbc <tcp_enqueue_flags>
 800c384:	4603      	mov	r3, r0
 800c386:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800c388:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d004      	beq.n	800c39a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800c390:	2100      	movs	r1, #0
 800c392:	6978      	ldr	r0, [r7, #20]
 800c394:	f7fd ff5a 	bl	800a24c <tcp_abandon>
      return;
 800c398:	e007      	b.n	800c3aa <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 800c39a:	6978      	ldr	r0, [r7, #20]
 800c39c:	f002 fd7c 	bl	800ee98 <tcp_output>
  return;
 800c3a0:	bf00      	nop
 800c3a2:	e001      	b.n	800c3a8 <tcp_listen_input+0x1c0>
    return;
 800c3a4:	bf00      	nop
 800c3a6:	e000      	b.n	800c3aa <tcp_listen_input+0x1c2>
  return;
 800c3a8:	bf00      	nop
}
 800c3aa:	371c      	adds	r7, #28
 800c3ac:	46bd      	mov	sp, r7
 800c3ae:	bd90      	pop	{r4, r7, pc}
 800c3b0:	200083d8 	.word	0x200083d8
 800c3b4:	0801ac20 	.word	0x0801ac20
 800c3b8:	0801ae18 	.word	0x0801ae18
 800c3bc:	0801ac6c 	.word	0x0801ac6c
 800c3c0:	200083d0 	.word	0x200083d0
 800c3c4:	200083d6 	.word	0x200083d6
 800c3c8:	200083cc 	.word	0x200083cc
 800c3cc:	200083bc 	.word	0x200083bc
 800c3d0:	20008db8 	.word	0x20008db8
 800c3d4:	20008dbc 	.word	0x20008dbc
 800c3d8:	20008da8 	.word	0x20008da8
 800c3dc:	2000c4dc 	.word	0x2000c4dc
 800c3e0:	2000c4d8 	.word	0x2000c4d8

0800c3e4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af04      	add	r7, sp, #16
 800c3ea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800c3ec:	4b30      	ldr	r3, [pc, #192]	; (800c4b0 <tcp_timewait_input+0xcc>)
 800c3ee:	781b      	ldrb	r3, [r3, #0]
 800c3f0:	f003 0304 	and.w	r3, r3, #4
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d154      	bne.n	800c4a2 <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d106      	bne.n	800c40c <tcp_timewait_input+0x28>
 800c3fe:	4b2d      	ldr	r3, [pc, #180]	; (800c4b4 <tcp_timewait_input+0xd0>)
 800c400:	f240 22ee 	movw	r2, #750	; 0x2ee
 800c404:	492c      	ldr	r1, [pc, #176]	; (800c4b8 <tcp_timewait_input+0xd4>)
 800c406:	482d      	ldr	r0, [pc, #180]	; (800c4bc <tcp_timewait_input+0xd8>)
 800c408:	f00b fdc4 	bl	8017f94 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800c40c:	4b28      	ldr	r3, [pc, #160]	; (800c4b0 <tcp_timewait_input+0xcc>)
 800c40e:	781b      	ldrb	r3, [r3, #0]
 800c410:	f003 0302 	and.w	r3, r3, #2
 800c414:	2b00      	cmp	r3, #0
 800c416:	d02a      	beq.n	800c46e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800c418:	4b29      	ldr	r3, [pc, #164]	; (800c4c0 <tcp_timewait_input+0xdc>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	2b00      	cmp	r3, #0
 800c424:	db2d      	blt.n	800c482 <tcp_timewait_input+0x9e>
 800c426:	4b26      	ldr	r3, [pc, #152]	; (800c4c0 <tcp_timewait_input+0xdc>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c42e:	6879      	ldr	r1, [r7, #4]
 800c430:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c432:	440b      	add	r3, r1
 800c434:	1ad3      	subs	r3, r2, r3
 800c436:	2b00      	cmp	r3, #0
 800c438:	dc23      	bgt.n	800c482 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c43a:	4b22      	ldr	r3, [pc, #136]	; (800c4c4 <tcp_timewait_input+0xe0>)
 800c43c:	6819      	ldr	r1, [r3, #0]
 800c43e:	4b22      	ldr	r3, [pc, #136]	; (800c4c8 <tcp_timewait_input+0xe4>)
 800c440:	881b      	ldrh	r3, [r3, #0]
 800c442:	461a      	mov	r2, r3
 800c444:	4b1e      	ldr	r3, [pc, #120]	; (800c4c0 <tcp_timewait_input+0xdc>)
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c44a:	4b20      	ldr	r3, [pc, #128]	; (800c4cc <tcp_timewait_input+0xe8>)
 800c44c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c44e:	885b      	ldrh	r3, [r3, #2]
 800c450:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c452:	4a1e      	ldr	r2, [pc, #120]	; (800c4cc <tcp_timewait_input+0xe8>)
 800c454:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c456:	8812      	ldrh	r2, [r2, #0]
 800c458:	b292      	uxth	r2, r2
 800c45a:	9202      	str	r2, [sp, #8]
 800c45c:	9301      	str	r3, [sp, #4]
 800c45e:	4b1c      	ldr	r3, [pc, #112]	; (800c4d0 <tcp_timewait_input+0xec>)
 800c460:	9300      	str	r3, [sp, #0]
 800c462:	4b1c      	ldr	r3, [pc, #112]	; (800c4d4 <tcp_timewait_input+0xf0>)
 800c464:	4602      	mov	r2, r0
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f003 fada 	bl	800fa20 <tcp_rst>
      return;
 800c46c:	e01c      	b.n	800c4a8 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800c46e:	4b10      	ldr	r3, [pc, #64]	; (800c4b0 <tcp_timewait_input+0xcc>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	f003 0301 	and.w	r3, r3, #1
 800c476:	2b00      	cmp	r3, #0
 800c478:	d003      	beq.n	800c482 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800c47a:	4b17      	ldr	r3, [pc, #92]	; (800c4d8 <tcp_timewait_input+0xf4>)
 800c47c:	681a      	ldr	r2, [r3, #0]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800c482:	4b11      	ldr	r3, [pc, #68]	; (800c4c8 <tcp_timewait_input+0xe4>)
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d00d      	beq.n	800c4a6 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	8b5b      	ldrh	r3, [r3, #26]
 800c48e:	f043 0302 	orr.w	r3, r3, #2
 800c492:	b29a      	uxth	r2, r3
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f002 fcfd 	bl	800ee98 <tcp_output>
  }
  return;
 800c49e:	bf00      	nop
 800c4a0:	e001      	b.n	800c4a6 <tcp_timewait_input+0xc2>
    return;
 800c4a2:	bf00      	nop
 800c4a4:	e000      	b.n	800c4a8 <tcp_timewait_input+0xc4>
  return;
 800c4a6:	bf00      	nop
}
 800c4a8:	3708      	adds	r7, #8
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}
 800c4ae:	bf00      	nop
 800c4b0:	200083d8 	.word	0x200083d8
 800c4b4:	0801ac20 	.word	0x0801ac20
 800c4b8:	0801ae38 	.word	0x0801ae38
 800c4bc:	0801ac6c 	.word	0x0801ac6c
 800c4c0:	200083cc 	.word	0x200083cc
 800c4c4:	200083d0 	.word	0x200083d0
 800c4c8:	200083d6 	.word	0x200083d6
 800c4cc:	200083bc 	.word	0x200083bc
 800c4d0:	20008db8 	.word	0x20008db8
 800c4d4:	20008dbc 	.word	0x20008dbc
 800c4d8:	2000c4e0 	.word	0x2000c4e0

0800c4dc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800c4dc:	b590      	push	{r4, r7, lr}
 800c4de:	b08d      	sub	sp, #52	; 0x34
 800c4e0:	af04      	add	r7, sp, #16
 800c4e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d106      	bne.n	800c500 <tcp_process+0x24>
 800c4f2:	4ba5      	ldr	r3, [pc, #660]	; (800c788 <tcp_process+0x2ac>)
 800c4f4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800c4f8:	49a4      	ldr	r1, [pc, #656]	; (800c78c <tcp_process+0x2b0>)
 800c4fa:	48a5      	ldr	r0, [pc, #660]	; (800c790 <tcp_process+0x2b4>)
 800c4fc:	f00b fd4a 	bl	8017f94 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800c500:	4ba4      	ldr	r3, [pc, #656]	; (800c794 <tcp_process+0x2b8>)
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	f003 0304 	and.w	r3, r3, #4
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d04e      	beq.n	800c5aa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	7d1b      	ldrb	r3, [r3, #20]
 800c510:	2b02      	cmp	r3, #2
 800c512:	d108      	bne.n	800c526 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c518:	4b9f      	ldr	r3, [pc, #636]	; (800c798 <tcp_process+0x2bc>)
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	429a      	cmp	r2, r3
 800c51e:	d123      	bne.n	800c568 <tcp_process+0x8c>
        acceptable = 1;
 800c520:	2301      	movs	r3, #1
 800c522:	76fb      	strb	r3, [r7, #27]
 800c524:	e020      	b.n	800c568 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c52a:	4b9c      	ldr	r3, [pc, #624]	; (800c79c <tcp_process+0x2c0>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	429a      	cmp	r2, r3
 800c530:	d102      	bne.n	800c538 <tcp_process+0x5c>
        acceptable = 1;
 800c532:	2301      	movs	r3, #1
 800c534:	76fb      	strb	r3, [r7, #27]
 800c536:	e017      	b.n	800c568 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800c538:	4b98      	ldr	r3, [pc, #608]	; (800c79c <tcp_process+0x2c0>)
 800c53a:	681a      	ldr	r2, [r3, #0]
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c540:	1ad3      	subs	r3, r2, r3
 800c542:	2b00      	cmp	r3, #0
 800c544:	db10      	blt.n	800c568 <tcp_process+0x8c>
 800c546:	4b95      	ldr	r3, [pc, #596]	; (800c79c <tcp_process+0x2c0>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c54e:	6879      	ldr	r1, [r7, #4]
 800c550:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800c552:	440b      	add	r3, r1
 800c554:	1ad3      	subs	r3, r2, r3
 800c556:	2b00      	cmp	r3, #0
 800c558:	dc06      	bgt.n	800c568 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8b5b      	ldrh	r3, [r3, #26]
 800c55e:	f043 0302 	orr.w	r3, r3, #2
 800c562:	b29a      	uxth	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800c568:	7efb      	ldrb	r3, [r7, #27]
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d01b      	beq.n	800c5a6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	7d1b      	ldrb	r3, [r3, #20]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d106      	bne.n	800c584 <tcp_process+0xa8>
 800c576:	4b84      	ldr	r3, [pc, #528]	; (800c788 <tcp_process+0x2ac>)
 800c578:	f44f 724e 	mov.w	r2, #824	; 0x338
 800c57c:	4988      	ldr	r1, [pc, #544]	; (800c7a0 <tcp_process+0x2c4>)
 800c57e:	4884      	ldr	r0, [pc, #528]	; (800c790 <tcp_process+0x2b4>)
 800c580:	f00b fd08 	bl	8017f94 <iprintf>
      recv_flags |= TF_RESET;
 800c584:	4b87      	ldr	r3, [pc, #540]	; (800c7a4 <tcp_process+0x2c8>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	f043 0308 	orr.w	r3, r3, #8
 800c58c:	b2da      	uxtb	r2, r3
 800c58e:	4b85      	ldr	r3, [pc, #532]	; (800c7a4 <tcp_process+0x2c8>)
 800c590:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	8b5b      	ldrh	r3, [r3, #26]
 800c596:	f023 0301 	bic.w	r3, r3, #1
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800c5a0:	f06f 030d 	mvn.w	r3, #13
 800c5a4:	e37a      	b.n	800cc9c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	e378      	b.n	800cc9c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800c5aa:	4b7a      	ldr	r3, [pc, #488]	; (800c794 <tcp_process+0x2b8>)
 800c5ac:	781b      	ldrb	r3, [r3, #0]
 800c5ae:	f003 0302 	and.w	r3, r3, #2
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d010      	beq.n	800c5d8 <tcp_process+0xfc>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7d1b      	ldrb	r3, [r3, #20]
 800c5ba:	2b02      	cmp	r3, #2
 800c5bc:	d00c      	beq.n	800c5d8 <tcp_process+0xfc>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	7d1b      	ldrb	r3, [r3, #20]
 800c5c2:	2b03      	cmp	r3, #3
 800c5c4:	d008      	beq.n	800c5d8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	8b5b      	ldrh	r3, [r3, #26]
 800c5ca:	f043 0302 	orr.w	r3, r3, #2
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	e361      	b.n	800cc9c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	8b5b      	ldrh	r3, [r3, #26]
 800c5dc:	f003 0310 	and.w	r3, r3, #16
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d103      	bne.n	800c5ec <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800c5e4:	4b70      	ldr	r3, [pc, #448]	; (800c7a8 <tcp_process+0x2cc>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 fc2d 	bl	800de5c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	7d1b      	ldrb	r3, [r3, #20]
 800c606:	3b02      	subs	r3, #2
 800c608:	2b07      	cmp	r3, #7
 800c60a:	f200 8337 	bhi.w	800cc7c <tcp_process+0x7a0>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <tcp_process+0x138>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c635 	.word	0x0800c635
 800c618:	0800c865 	.word	0x0800c865
 800c61c:	0800c9dd 	.word	0x0800c9dd
 800c620:	0800ca07 	.word	0x0800ca07
 800c624:	0800cb2b 	.word	0x0800cb2b
 800c628:	0800c9dd 	.word	0x0800c9dd
 800c62c:	0800cbb7 	.word	0x0800cbb7
 800c630:	0800cc47 	.word	0x0800cc47
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800c634:	4b57      	ldr	r3, [pc, #348]	; (800c794 <tcp_process+0x2b8>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f003 0310 	and.w	r3, r3, #16
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	f000 80e4 	beq.w	800c80a <tcp_process+0x32e>
 800c642:	4b54      	ldr	r3, [pc, #336]	; (800c794 <tcp_process+0x2b8>)
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f003 0302 	and.w	r3, r3, #2
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 80dd 	beq.w	800c80a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	4b50      	ldr	r3, [pc, #320]	; (800c798 <tcp_process+0x2bc>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	429a      	cmp	r2, r3
 800c65c:	f040 80d5 	bne.w	800c80a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800c660:	4b4e      	ldr	r3, [pc, #312]	; (800c79c <tcp_process+0x2c0>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	1c5a      	adds	r2, r3, #1
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800c672:	4b49      	ldr	r3, [pc, #292]	; (800c798 <tcp_process+0x2bc>)
 800c674:	681a      	ldr	r2, [r3, #0]
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800c67a:	4b4c      	ldr	r3, [pc, #304]	; (800c7ac <tcp_process+0x2d0>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	89db      	ldrh	r3, [r3, #14]
 800c680:	b29a      	uxth	r2, r3
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800c694:	4b41      	ldr	r3, [pc, #260]	; (800c79c <tcp_process+0x2c0>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	1e5a      	subs	r2, r3, #1
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2204      	movs	r2, #4
 800c6a2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f007 f939 	bl	8013924 <ip4_route>
 800c6b2:	4601      	mov	r1, r0
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	3304      	adds	r3, #4
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	4620      	mov	r0, r4
 800c6bc:	f7ff f88e 	bl	800b7dc <tcp_eff_send_mss_netif>
 800c6c0:	4603      	mov	r3, r0
 800c6c2:	461a      	mov	r2, r3
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6cc:	009a      	lsls	r2, r3, #2
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6d2:	005b      	lsls	r3, r3, #1
 800c6d4:	f241 111c 	movw	r1, #4380	; 0x111c
 800c6d8:	428b      	cmp	r3, r1
 800c6da:	bf38      	it	cc
 800c6dc:	460b      	movcc	r3, r1
 800c6de:	429a      	cmp	r2, r3
 800c6e0:	d204      	bcs.n	800c6ec <tcp_process+0x210>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6e6:	009b      	lsls	r3, r3, #2
 800c6e8:	b29b      	uxth	r3, r3
 800c6ea:	e00d      	b.n	800c708 <tcp_process+0x22c>
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6f0:	005b      	lsls	r3, r3, #1
 800c6f2:	f241 121c 	movw	r2, #4380	; 0x111c
 800c6f6:	4293      	cmp	r3, r2
 800c6f8:	d904      	bls.n	800c704 <tcp_process+0x228>
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c6fe:	005b      	lsls	r3, r3, #1
 800c700:	b29b      	uxth	r3, r3
 800c702:	e001      	b.n	800c708 <tcp_process+0x22c>
 800c704:	f241 131c 	movw	r3, #4380	; 0x111c
 800c708:	687a      	ldr	r2, [r7, #4]
 800c70a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c714:	2b00      	cmp	r3, #0
 800c716:	d106      	bne.n	800c726 <tcp_process+0x24a>
 800c718:	4b1b      	ldr	r3, [pc, #108]	; (800c788 <tcp_process+0x2ac>)
 800c71a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800c71e:	4924      	ldr	r1, [pc, #144]	; (800c7b0 <tcp_process+0x2d4>)
 800c720:	481b      	ldr	r0, [pc, #108]	; (800c790 <tcp_process+0x2b4>)
 800c722:	f00b fc37 	bl	8017f94 <iprintf>
        --pcb->snd_queuelen;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800c72c:	3b01      	subs	r3, #1
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c73a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d111      	bne.n	800c766 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c746:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800c748:	69fb      	ldr	r3, [r7, #28]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d106      	bne.n	800c75c <tcp_process+0x280>
 800c74e:	4b0e      	ldr	r3, [pc, #56]	; (800c788 <tcp_process+0x2ac>)
 800c750:	f44f 725d 	mov.w	r2, #884	; 0x374
 800c754:	4917      	ldr	r1, [pc, #92]	; (800c7b4 <tcp_process+0x2d8>)
 800c756:	480e      	ldr	r0, [pc, #56]	; (800c790 <tcp_process+0x2b4>)
 800c758:	f00b fc1c 	bl	8017f94 <iprintf>
          pcb->unsent = rseg->next;
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	681a      	ldr	r2, [r3, #0]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	66da      	str	r2, [r3, #108]	; 0x6c
 800c764:	e003      	b.n	800c76e <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800c766:	69fb      	ldr	r3, [r7, #28]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800c76e:	69f8      	ldr	r0, [r7, #28]
 800c770:	f7fe fc70 	bl	800b054 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d11d      	bne.n	800c7b8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c782:	861a      	strh	r2, [r3, #48]	; 0x30
 800c784:	e01f      	b.n	800c7c6 <tcp_process+0x2ea>
 800c786:	bf00      	nop
 800c788:	0801ac20 	.word	0x0801ac20
 800c78c:	0801ae58 	.word	0x0801ae58
 800c790:	0801ac6c 	.word	0x0801ac6c
 800c794:	200083d8 	.word	0x200083d8
 800c798:	200083d0 	.word	0x200083d0
 800c79c:	200083cc 	.word	0x200083cc
 800c7a0:	0801ae74 	.word	0x0801ae74
 800c7a4:	200083d9 	.word	0x200083d9
 800c7a8:	2000c4e0 	.word	0x2000c4e0
 800c7ac:	200083bc 	.word	0x200083bc
 800c7b0:	0801ae94 	.word	0x0801ae94
 800c7b4:	0801aeac 	.word	0x0801aeac
        } else {
          pcb->rtime = 0;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d00a      	beq.n	800c7e6 <tcp_process+0x30a>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	6910      	ldr	r0, [r2, #16]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	6879      	ldr	r1, [r7, #4]
 800c7de:	4798      	blx	r3
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	76bb      	strb	r3, [r7, #26]
 800c7e4:	e001      	b.n	800c7ea <tcp_process+0x30e>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800c7ea:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c7ee:	f113 0f0d 	cmn.w	r3, #13
 800c7f2:	d102      	bne.n	800c7fa <tcp_process+0x31e>
          return ERR_ABRT;
 800c7f4:	f06f 030c 	mvn.w	r3, #12
 800c7f8:	e250      	b.n	800cc9c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	8b5b      	ldrh	r3, [r3, #26]
 800c7fe:	f043 0302 	orr.w	r3, r3, #2
 800c802:	b29a      	uxth	r2, r3
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800c808:	e23a      	b.n	800cc80 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800c80a:	4b9d      	ldr	r3, [pc, #628]	; (800ca80 <tcp_process+0x5a4>)
 800c80c:	781b      	ldrb	r3, [r3, #0]
 800c80e:	f003 0310 	and.w	r3, r3, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	f000 8234 	beq.w	800cc80 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c818:	4b9a      	ldr	r3, [pc, #616]	; (800ca84 <tcp_process+0x5a8>)
 800c81a:	6819      	ldr	r1, [r3, #0]
 800c81c:	4b9a      	ldr	r3, [pc, #616]	; (800ca88 <tcp_process+0x5ac>)
 800c81e:	881b      	ldrh	r3, [r3, #0]
 800c820:	461a      	mov	r2, r3
 800c822:	4b9a      	ldr	r3, [pc, #616]	; (800ca8c <tcp_process+0x5b0>)
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c828:	4b99      	ldr	r3, [pc, #612]	; (800ca90 <tcp_process+0x5b4>)
 800c82a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c82c:	885b      	ldrh	r3, [r3, #2]
 800c82e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c830:	4a97      	ldr	r2, [pc, #604]	; (800ca90 <tcp_process+0x5b4>)
 800c832:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c834:	8812      	ldrh	r2, [r2, #0]
 800c836:	b292      	uxth	r2, r2
 800c838:	9202      	str	r2, [sp, #8]
 800c83a:	9301      	str	r3, [sp, #4]
 800c83c:	4b95      	ldr	r3, [pc, #596]	; (800ca94 <tcp_process+0x5b8>)
 800c83e:	9300      	str	r3, [sp, #0]
 800c840:	4b95      	ldr	r3, [pc, #596]	; (800ca98 <tcp_process+0x5bc>)
 800c842:	4602      	mov	r2, r0
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f003 f8eb 	bl	800fa20 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c850:	2b05      	cmp	r3, #5
 800c852:	f200 8215 	bhi.w	800cc80 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2200      	movs	r2, #0
 800c85a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800c85c:	6878      	ldr	r0, [r7, #4]
 800c85e:	f002 feab 	bl	800f5b8 <tcp_rexmit_rto>
      break;
 800c862:	e20d      	b.n	800cc80 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800c864:	4b86      	ldr	r3, [pc, #536]	; (800ca80 <tcp_process+0x5a4>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	f003 0310 	and.w	r3, r3, #16
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	f000 80a1 	beq.w	800c9b4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800c872:	4b84      	ldr	r3, [pc, #528]	; (800ca84 <tcp_process+0x5a8>)
 800c874:	681a      	ldr	r2, [r3, #0]
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c87a:	1ad3      	subs	r3, r2, r3
 800c87c:	3b01      	subs	r3, #1
 800c87e:	2b00      	cmp	r3, #0
 800c880:	db7e      	blt.n	800c980 <tcp_process+0x4a4>
 800c882:	4b80      	ldr	r3, [pc, #512]	; (800ca84 <tcp_process+0x5a8>)
 800c884:	681a      	ldr	r2, [r3, #0]
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c88a:	1ad3      	subs	r3, r2, r3
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	dc77      	bgt.n	800c980 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2204      	movs	r2, #4
 800c894:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d102      	bne.n	800c8a4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800c89e:	23fa      	movs	r3, #250	; 0xfa
 800c8a0:	76bb      	strb	r3, [r7, #26]
 800c8a2:	e01d      	b.n	800c8e0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d106      	bne.n	800c8bc <tcp_process+0x3e0>
 800c8ae:	4b7b      	ldr	r3, [pc, #492]	; (800ca9c <tcp_process+0x5c0>)
 800c8b0:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800c8b4:	497a      	ldr	r1, [pc, #488]	; (800caa0 <tcp_process+0x5c4>)
 800c8b6:	487b      	ldr	r0, [pc, #492]	; (800caa4 <tcp_process+0x5c8>)
 800c8b8:	f00b fb6c 	bl	8017f94 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8c0:	699b      	ldr	r3, [r3, #24]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d00a      	beq.n	800c8dc <tcp_process+0x400>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c8ca:	699b      	ldr	r3, [r3, #24]
 800c8cc:	687a      	ldr	r2, [r7, #4]
 800c8ce:	6910      	ldr	r0, [r2, #16]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	6879      	ldr	r1, [r7, #4]
 800c8d4:	4798      	blx	r3
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	76bb      	strb	r3, [r7, #26]
 800c8da:	e001      	b.n	800c8e0 <tcp_process+0x404>
 800c8dc:	23f0      	movs	r3, #240	; 0xf0
 800c8de:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800c8e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d00a      	beq.n	800c8fe <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800c8e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800c8ec:	f113 0f0d 	cmn.w	r3, #13
 800c8f0:	d002      	beq.n	800c8f8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800c8f2:	6878      	ldr	r0, [r7, #4]
 800c8f4:	f7fd fd68 	bl	800a3c8 <tcp_abort>
            }
            return ERR_ABRT;
 800c8f8:	f06f 030c 	mvn.w	r3, #12
 800c8fc:	e1ce      	b.n	800cc9c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fae0 	bl	800cec4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800c904:	4b68      	ldr	r3, [pc, #416]	; (800caa8 <tcp_process+0x5cc>)
 800c906:	881b      	ldrh	r3, [r3, #0]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d005      	beq.n	800c918 <tcp_process+0x43c>
            recv_acked--;
 800c90c:	4b66      	ldr	r3, [pc, #408]	; (800caa8 <tcp_process+0x5cc>)
 800c90e:	881b      	ldrh	r3, [r3, #0]
 800c910:	3b01      	subs	r3, #1
 800c912:	b29a      	uxth	r2, r3
 800c914:	4b64      	ldr	r3, [pc, #400]	; (800caa8 <tcp_process+0x5cc>)
 800c916:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c91c:	009a      	lsls	r2, r3, #2
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c922:	005b      	lsls	r3, r3, #1
 800c924:	f241 111c 	movw	r1, #4380	; 0x111c
 800c928:	428b      	cmp	r3, r1
 800c92a:	bf38      	it	cc
 800c92c:	460b      	movcc	r3, r1
 800c92e:	429a      	cmp	r2, r3
 800c930:	d204      	bcs.n	800c93c <tcp_process+0x460>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c936:	009b      	lsls	r3, r3, #2
 800c938:	b29b      	uxth	r3, r3
 800c93a:	e00d      	b.n	800c958 <tcp_process+0x47c>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c940:	005b      	lsls	r3, r3, #1
 800c942:	f241 121c 	movw	r2, #4380	; 0x111c
 800c946:	4293      	cmp	r3, r2
 800c948:	d904      	bls.n	800c954 <tcp_process+0x478>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c94e:	005b      	lsls	r3, r3, #1
 800c950:	b29b      	uxth	r3, r3
 800c952:	e001      	b.n	800c958 <tcp_process+0x47c>
 800c954:	f241 131c 	movw	r3, #4380	; 0x111c
 800c958:	687a      	ldr	r2, [r7, #4]
 800c95a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800c95e:	4b53      	ldr	r3, [pc, #332]	; (800caac <tcp_process+0x5d0>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	f003 0320 	and.w	r3, r3, #32
 800c966:	2b00      	cmp	r3, #0
 800c968:	d037      	beq.n	800c9da <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	8b5b      	ldrh	r3, [r3, #26]
 800c96e:	f043 0302 	orr.w	r3, r3, #2
 800c972:	b29a      	uxth	r2, r3
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2207      	movs	r2, #7
 800c97c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800c97e:	e02c      	b.n	800c9da <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c980:	4b40      	ldr	r3, [pc, #256]	; (800ca84 <tcp_process+0x5a8>)
 800c982:	6819      	ldr	r1, [r3, #0]
 800c984:	4b40      	ldr	r3, [pc, #256]	; (800ca88 <tcp_process+0x5ac>)
 800c986:	881b      	ldrh	r3, [r3, #0]
 800c988:	461a      	mov	r2, r3
 800c98a:	4b40      	ldr	r3, [pc, #256]	; (800ca8c <tcp_process+0x5b0>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c990:	4b3f      	ldr	r3, [pc, #252]	; (800ca90 <tcp_process+0x5b4>)
 800c992:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c994:	885b      	ldrh	r3, [r3, #2]
 800c996:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800c998:	4a3d      	ldr	r2, [pc, #244]	; (800ca90 <tcp_process+0x5b4>)
 800c99a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800c99c:	8812      	ldrh	r2, [r2, #0]
 800c99e:	b292      	uxth	r2, r2
 800c9a0:	9202      	str	r2, [sp, #8]
 800c9a2:	9301      	str	r3, [sp, #4]
 800c9a4:	4b3b      	ldr	r3, [pc, #236]	; (800ca94 <tcp_process+0x5b8>)
 800c9a6:	9300      	str	r3, [sp, #0]
 800c9a8:	4b3b      	ldr	r3, [pc, #236]	; (800ca98 <tcp_process+0x5bc>)
 800c9aa:	4602      	mov	r2, r0
 800c9ac:	6878      	ldr	r0, [r7, #4]
 800c9ae:	f003 f837 	bl	800fa20 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800c9b2:	e167      	b.n	800cc84 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800c9b4:	4b32      	ldr	r3, [pc, #200]	; (800ca80 <tcp_process+0x5a4>)
 800c9b6:	781b      	ldrb	r3, [r3, #0]
 800c9b8:	f003 0302 	and.w	r3, r3, #2
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	f000 8161 	beq.w	800cc84 <tcp_process+0x7a8>
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c6:	1e5a      	subs	r2, r3, #1
 800c9c8:	4b30      	ldr	r3, [pc, #192]	; (800ca8c <tcp_process+0x5b0>)
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	f040 8159 	bne.w	800cc84 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f002 fe12 	bl	800f5fc <tcp_rexmit>
      break;
 800c9d8:	e154      	b.n	800cc84 <tcp_process+0x7a8>
 800c9da:	e153      	b.n	800cc84 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fa71 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800c9e2:	4b32      	ldr	r3, [pc, #200]	; (800caac <tcp_process+0x5d0>)
 800c9e4:	781b      	ldrb	r3, [r3, #0]
 800c9e6:	f003 0320 	and.w	r3, r3, #32
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	f000 814c 	beq.w	800cc88 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	8b5b      	ldrh	r3, [r3, #26]
 800c9f4:	f043 0302 	orr.w	r3, r3, #2
 800c9f8:	b29a      	uxth	r2, r3
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2207      	movs	r2, #7
 800ca02:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ca04:	e140      	b.n	800cc88 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f000 fa5c 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ca0c:	4b27      	ldr	r3, [pc, #156]	; (800caac <tcp_process+0x5d0>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	f003 0320 	and.w	r3, r3, #32
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d071      	beq.n	800cafc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca18:	4b19      	ldr	r3, [pc, #100]	; (800ca80 <tcp_process+0x5a4>)
 800ca1a:	781b      	ldrb	r3, [r3, #0]
 800ca1c:	f003 0310 	and.w	r3, r3, #16
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d060      	beq.n	800cae6 <tcp_process+0x60a>
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca28:	4b16      	ldr	r3, [pc, #88]	; (800ca84 <tcp_process+0x5a8>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d15a      	bne.n	800cae6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d156      	bne.n	800cae6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	8b5b      	ldrh	r3, [r3, #26]
 800ca3c:	f043 0302 	orr.w	r3, r3, #2
 800ca40:	b29a      	uxth	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f7fe fdbe 	bl	800b5c8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ca4c:	4b18      	ldr	r3, [pc, #96]	; (800cab0 <tcp_process+0x5d4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	429a      	cmp	r2, r3
 800ca54:	d105      	bne.n	800ca62 <tcp_process+0x586>
 800ca56:	4b16      	ldr	r3, [pc, #88]	; (800cab0 <tcp_process+0x5d4>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	68db      	ldr	r3, [r3, #12]
 800ca5c:	4a14      	ldr	r2, [pc, #80]	; (800cab0 <tcp_process+0x5d4>)
 800ca5e:	6013      	str	r3, [r2, #0]
 800ca60:	e02e      	b.n	800cac0 <tcp_process+0x5e4>
 800ca62:	4b13      	ldr	r3, [pc, #76]	; (800cab0 <tcp_process+0x5d4>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	617b      	str	r3, [r7, #20]
 800ca68:	e027      	b.n	800caba <tcp_process+0x5de>
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d11f      	bne.n	800cab4 <tcp_process+0x5d8>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	68da      	ldr	r2, [r3, #12]
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	60da      	str	r2, [r3, #12]
 800ca7c:	e020      	b.n	800cac0 <tcp_process+0x5e4>
 800ca7e:	bf00      	nop
 800ca80:	200083d8 	.word	0x200083d8
 800ca84:	200083d0 	.word	0x200083d0
 800ca88:	200083d6 	.word	0x200083d6
 800ca8c:	200083cc 	.word	0x200083cc
 800ca90:	200083bc 	.word	0x200083bc
 800ca94:	20008db8 	.word	0x20008db8
 800ca98:	20008dbc 	.word	0x20008dbc
 800ca9c:	0801ac20 	.word	0x0801ac20
 800caa0:	0801aec0 	.word	0x0801aec0
 800caa4:	0801ac6c 	.word	0x0801ac6c
 800caa8:	200083d4 	.word	0x200083d4
 800caac:	200083d9 	.word	0x200083d9
 800cab0:	2000c4dc 	.word	0x2000c4dc
 800cab4:	697b      	ldr	r3, [r7, #20]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	617b      	str	r3, [r7, #20]
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d1d4      	bne.n	800ca6a <tcp_process+0x58e>
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	2200      	movs	r2, #0
 800cac4:	60da      	str	r2, [r3, #12]
 800cac6:	4b77      	ldr	r3, [pc, #476]	; (800cca4 <tcp_process+0x7c8>)
 800cac8:	2201      	movs	r2, #1
 800caca:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	220a      	movs	r2, #10
 800cad0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800cad2:	4b75      	ldr	r3, [pc, #468]	; (800cca8 <tcp_process+0x7cc>)
 800cad4:	681a      	ldr	r2, [r3, #0]
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	60da      	str	r2, [r3, #12]
 800cada:	4a73      	ldr	r2, [pc, #460]	; (800cca8 <tcp_process+0x7cc>)
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6013      	str	r3, [r2, #0]
 800cae0:	f003 f960 	bl	800fda4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800cae4:	e0d2      	b.n	800cc8c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	8b5b      	ldrh	r3, [r3, #26]
 800caea:	f043 0302 	orr.w	r3, r3, #2
 800caee:	b29a      	uxth	r2, r3
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2208      	movs	r2, #8
 800caf8:	751a      	strb	r2, [r3, #20]
      break;
 800cafa:	e0c7      	b.n	800cc8c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cafc:	4b6b      	ldr	r3, [pc, #428]	; (800ccac <tcp_process+0x7d0>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 0310 	and.w	r3, r3, #16
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	f000 80c1 	beq.w	800cc8c <tcp_process+0x7b0>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cb0e:	4b68      	ldr	r3, [pc, #416]	; (800ccb0 <tcp_process+0x7d4>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	f040 80ba 	bne.w	800cc8c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f040 80b5 	bne.w	800cc8c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2206      	movs	r2, #6
 800cb26:	751a      	strb	r2, [r3, #20]
      break;
 800cb28:	e0b0      	b.n	800cc8c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800cb2a:	6878      	ldr	r0, [r7, #4]
 800cb2c:	f000 f9ca 	bl	800cec4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800cb30:	4b60      	ldr	r3, [pc, #384]	; (800ccb4 <tcp_process+0x7d8>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0320 	and.w	r3, r3, #32
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 80a9 	beq.w	800cc90 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	8b5b      	ldrh	r3, [r3, #26]
 800cb42:	f043 0302 	orr.w	r3, r3, #2
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800cb4c:	6878      	ldr	r0, [r7, #4]
 800cb4e:	f7fe fd3b 	bl	800b5c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cb52:	4b59      	ldr	r3, [pc, #356]	; (800ccb8 <tcp_process+0x7dc>)
 800cb54:	681b      	ldr	r3, [r3, #0]
 800cb56:	687a      	ldr	r2, [r7, #4]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d105      	bne.n	800cb68 <tcp_process+0x68c>
 800cb5c:	4b56      	ldr	r3, [pc, #344]	; (800ccb8 <tcp_process+0x7dc>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	4a55      	ldr	r2, [pc, #340]	; (800ccb8 <tcp_process+0x7dc>)
 800cb64:	6013      	str	r3, [r2, #0]
 800cb66:	e013      	b.n	800cb90 <tcp_process+0x6b4>
 800cb68:	4b53      	ldr	r3, [pc, #332]	; (800ccb8 <tcp_process+0x7dc>)
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	613b      	str	r3, [r7, #16]
 800cb6e:	e00c      	b.n	800cb8a <tcp_process+0x6ae>
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	687a      	ldr	r2, [r7, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d104      	bne.n	800cb84 <tcp_process+0x6a8>
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	68da      	ldr	r2, [r3, #12]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	60da      	str	r2, [r3, #12]
 800cb82:	e005      	b.n	800cb90 <tcp_process+0x6b4>
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	68db      	ldr	r3, [r3, #12]
 800cb88:	613b      	str	r3, [r7, #16]
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1ef      	bne.n	800cb70 <tcp_process+0x694>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	60da      	str	r2, [r3, #12]
 800cb96:	4b43      	ldr	r3, [pc, #268]	; (800cca4 <tcp_process+0x7c8>)
 800cb98:	2201      	movs	r2, #1
 800cb9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	220a      	movs	r2, #10
 800cba0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cba2:	4b41      	ldr	r3, [pc, #260]	; (800cca8 <tcp_process+0x7cc>)
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60da      	str	r2, [r3, #12]
 800cbaa:	4a3f      	ldr	r2, [pc, #252]	; (800cca8 <tcp_process+0x7cc>)
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6013      	str	r3, [r2, #0]
 800cbb0:	f003 f8f8 	bl	800fda4 <tcp_timer_needed>
      }
      break;
 800cbb4:	e06c      	b.n	800cc90 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800cbb6:	6878      	ldr	r0, [r7, #4]
 800cbb8:	f000 f984 	bl	800cec4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cbbc:	4b3b      	ldr	r3, [pc, #236]	; (800ccac <tcp_process+0x7d0>)
 800cbbe:	781b      	ldrb	r3, [r3, #0]
 800cbc0:	f003 0310 	and.w	r3, r3, #16
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d065      	beq.n	800cc94 <tcp_process+0x7b8>
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cbcc:	4b38      	ldr	r3, [pc, #224]	; (800ccb0 <tcp_process+0x7d4>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	429a      	cmp	r2, r3
 800cbd2:	d15f      	bne.n	800cc94 <tcp_process+0x7b8>
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d15b      	bne.n	800cc94 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	f7fe fcf3 	bl	800b5c8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800cbe2:	4b35      	ldr	r3, [pc, #212]	; (800ccb8 <tcp_process+0x7dc>)
 800cbe4:	681b      	ldr	r3, [r3, #0]
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	429a      	cmp	r2, r3
 800cbea:	d105      	bne.n	800cbf8 <tcp_process+0x71c>
 800cbec:	4b32      	ldr	r3, [pc, #200]	; (800ccb8 <tcp_process+0x7dc>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	68db      	ldr	r3, [r3, #12]
 800cbf2:	4a31      	ldr	r2, [pc, #196]	; (800ccb8 <tcp_process+0x7dc>)
 800cbf4:	6013      	str	r3, [r2, #0]
 800cbf6:	e013      	b.n	800cc20 <tcp_process+0x744>
 800cbf8:	4b2f      	ldr	r3, [pc, #188]	; (800ccb8 <tcp_process+0x7dc>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	60fb      	str	r3, [r7, #12]
 800cbfe:	e00c      	b.n	800cc1a <tcp_process+0x73e>
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68db      	ldr	r3, [r3, #12]
 800cc04:	687a      	ldr	r2, [r7, #4]
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d104      	bne.n	800cc14 <tcp_process+0x738>
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	68da      	ldr	r2, [r3, #12]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	60da      	str	r2, [r3, #12]
 800cc12:	e005      	b.n	800cc20 <tcp_process+0x744>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	68db      	ldr	r3, [r3, #12]
 800cc18:	60fb      	str	r3, [r7, #12]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d1ef      	bne.n	800cc00 <tcp_process+0x724>
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	60da      	str	r2, [r3, #12]
 800cc26:	4b1f      	ldr	r3, [pc, #124]	; (800cca4 <tcp_process+0x7c8>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	220a      	movs	r2, #10
 800cc30:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cc32:	4b1d      	ldr	r3, [pc, #116]	; (800cca8 <tcp_process+0x7cc>)
 800cc34:	681a      	ldr	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	60da      	str	r2, [r3, #12]
 800cc3a:	4a1b      	ldr	r2, [pc, #108]	; (800cca8 <tcp_process+0x7cc>)
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	6013      	str	r3, [r2, #0]
 800cc40:	f003 f8b0 	bl	800fda4 <tcp_timer_needed>
      }
      break;
 800cc44:	e026      	b.n	800cc94 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f93c 	bl	800cec4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800cc4c:	4b17      	ldr	r3, [pc, #92]	; (800ccac <tcp_process+0x7d0>)
 800cc4e:	781b      	ldrb	r3, [r3, #0]
 800cc50:	f003 0310 	and.w	r3, r3, #16
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d01f      	beq.n	800cc98 <tcp_process+0x7bc>
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800cc5c:	4b14      	ldr	r3, [pc, #80]	; (800ccb0 <tcp_process+0x7d4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	429a      	cmp	r2, r3
 800cc62:	d119      	bne.n	800cc98 <tcp_process+0x7bc>
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d115      	bne.n	800cc98 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800cc6c:	4b11      	ldr	r3, [pc, #68]	; (800ccb4 <tcp_process+0x7d8>)
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	f043 0310 	orr.w	r3, r3, #16
 800cc74:	b2da      	uxtb	r2, r3
 800cc76:	4b0f      	ldr	r3, [pc, #60]	; (800ccb4 <tcp_process+0x7d8>)
 800cc78:	701a      	strb	r2, [r3, #0]
      }
      break;
 800cc7a:	e00d      	b.n	800cc98 <tcp_process+0x7bc>
    default:
      break;
 800cc7c:	bf00      	nop
 800cc7e:	e00c      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc80:	bf00      	nop
 800cc82:	e00a      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc84:	bf00      	nop
 800cc86:	e008      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc88:	bf00      	nop
 800cc8a:	e006      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc8c:	bf00      	nop
 800cc8e:	e004      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc90:	bf00      	nop
 800cc92:	e002      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc94:	bf00      	nop
 800cc96:	e000      	b.n	800cc9a <tcp_process+0x7be>
      break;
 800cc98:	bf00      	nop
  }
  return ERR_OK;
 800cc9a:	2300      	movs	r3, #0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3724      	adds	r7, #36	; 0x24
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd90      	pop	{r4, r7, pc}
 800cca4:	2000c4d8 	.word	0x2000c4d8
 800cca8:	2000c4ec 	.word	0x2000c4ec
 800ccac:	200083d8 	.word	0x200083d8
 800ccb0:	200083d0 	.word	0x200083d0
 800ccb4:	200083d9 	.word	0x200083d9
 800ccb8:	2000c4dc 	.word	0x2000c4dc

0800ccbc <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ccbc:	b590      	push	{r4, r7, lr}
 800ccbe:	b085      	sub	sp, #20
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d106      	bne.n	800ccda <tcp_oos_insert_segment+0x1e>
 800cccc:	4b3b      	ldr	r3, [pc, #236]	; (800cdbc <tcp_oos_insert_segment+0x100>)
 800ccce:	f240 421f 	movw	r2, #1055	; 0x41f
 800ccd2:	493b      	ldr	r1, [pc, #236]	; (800cdc0 <tcp_oos_insert_segment+0x104>)
 800ccd4:	483b      	ldr	r0, [pc, #236]	; (800cdc4 <tcp_oos_insert_segment+0x108>)
 800ccd6:	f00b f95d 	bl	8017f94 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	899b      	ldrh	r3, [r3, #12]
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4618      	mov	r0, r3
 800cce4:	f7fb f9c6 	bl	8008074 <lwip_htons>
 800cce8:	4603      	mov	r3, r0
 800ccea:	b2db      	uxtb	r3, r3
 800ccec:	f003 0301 	and.w	r3, r3, #1
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d028      	beq.n	800cd46 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ccf4:	6838      	ldr	r0, [r7, #0]
 800ccf6:	f7fe f999 	bl	800b02c <tcp_segs_free>
    next = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	603b      	str	r3, [r7, #0]
 800ccfe:	e056      	b.n	800cdae <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	68db      	ldr	r3, [r3, #12]
 800cd04:	899b      	ldrh	r3, [r3, #12]
 800cd06:	b29b      	uxth	r3, r3
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fb f9b3 	bl	8008074 <lwip_htons>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	f003 0301 	and.w	r3, r3, #1
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d00d      	beq.n	800cd36 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	68db      	ldr	r3, [r3, #12]
 800cd1e:	899b      	ldrh	r3, [r3, #12]
 800cd20:	b29c      	uxth	r4, r3
 800cd22:	2001      	movs	r0, #1
 800cd24:	f7fb f9a6 	bl	8008074 <lwip_htons>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	461a      	mov	r2, r3
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	68db      	ldr	r3, [r3, #12]
 800cd30:	4322      	orrs	r2, r4
 800cd32:	b292      	uxth	r2, r2
 800cd34:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800cd36:	683b      	ldr	r3, [r7, #0]
 800cd38:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	f7fe f987 	bl	800b054 <tcp_seg_free>
    while (next &&
 800cd46:	683b      	ldr	r3, [r7, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00e      	beq.n	800cd6a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	891b      	ldrh	r3, [r3, #8]
 800cd50:	461a      	mov	r2, r3
 800cd52:	4b1d      	ldr	r3, [pc, #116]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	441a      	add	r2, r3
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	68db      	ldr	r3, [r3, #12]
 800cd5c:	685b      	ldr	r3, [r3, #4]
 800cd5e:	6839      	ldr	r1, [r7, #0]
 800cd60:	8909      	ldrh	r1, [r1, #8]
 800cd62:	440b      	add	r3, r1
 800cd64:	1ad3      	subs	r3, r2, r3
    while (next &&
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	daca      	bge.n	800cd00 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d01e      	beq.n	800cdae <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	891b      	ldrh	r3, [r3, #8]
 800cd74:	461a      	mov	r2, r3
 800cd76:	4b14      	ldr	r3, [pc, #80]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	68db      	ldr	r3, [r3, #12]
 800cd80:	685b      	ldr	r3, [r3, #4]
 800cd82:	1ad3      	subs	r3, r2, r3
    if (next &&
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	dd12      	ble.n	800cdae <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800cd88:	683b      	ldr	r3, [r7, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	685b      	ldr	r3, [r3, #4]
 800cd8e:	b29a      	uxth	r2, r3
 800cd90:	4b0d      	ldr	r3, [pc, #52]	; (800cdc8 <tcp_oos_insert_segment+0x10c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	1ad3      	subs	r3, r2, r3
 800cd98:	b29a      	uxth	r2, r3
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	685a      	ldr	r2, [r3, #4]
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	891b      	ldrh	r3, [r3, #8]
 800cda6:	4619      	mov	r1, r3
 800cda8:	4610      	mov	r0, r2
 800cdaa:	f7fc fb91 	bl	80094d0 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	683a      	ldr	r2, [r7, #0]
 800cdb2:	601a      	str	r2, [r3, #0]
}
 800cdb4:	bf00      	nop
 800cdb6:	3714      	adds	r7, #20
 800cdb8:	46bd      	mov	sp, r7
 800cdba:	bd90      	pop	{r4, r7, pc}
 800cdbc:	0801ac20 	.word	0x0801ac20
 800cdc0:	0801aee0 	.word	0x0801aee0
 800cdc4:	0801ac6c 	.word	0x0801ac6c
 800cdc8:	200083cc 	.word	0x200083cc

0800cdcc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800cdcc:	b5b0      	push	{r4, r5, r7, lr}
 800cdce:	b086      	sub	sp, #24
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	60f8      	str	r0, [r7, #12]
 800cdd4:	60b9      	str	r1, [r7, #8]
 800cdd6:	607a      	str	r2, [r7, #4]
 800cdd8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800cdda:	e03e      	b.n	800ce5a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800cde0:	68bb      	ldr	r3, [r7, #8]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fc fd84 	bl	80098f8 <pbuf_clen>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800cdfa:	8a7a      	ldrh	r2, [r7, #18]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d906      	bls.n	800ce0e <tcp_free_acked_segments+0x42>
 800ce00:	4b2a      	ldr	r3, [pc, #168]	; (800ceac <tcp_free_acked_segments+0xe0>)
 800ce02:	f240 4257 	movw	r2, #1111	; 0x457
 800ce06:	492a      	ldr	r1, [pc, #168]	; (800ceb0 <tcp_free_acked_segments+0xe4>)
 800ce08:	482a      	ldr	r0, [pc, #168]	; (800ceb4 <tcp_free_acked_segments+0xe8>)
 800ce0a:	f00b f8c3 	bl	8017f94 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ce14:	8a7b      	ldrh	r3, [r7, #18]
 800ce16:	1ad3      	subs	r3, r2, r3
 800ce18:	b29a      	uxth	r2, r3
 800ce1a:	68fb      	ldr	r3, [r7, #12]
 800ce1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	891a      	ldrh	r2, [r3, #8]
 800ce24:	4b24      	ldr	r3, [pc, #144]	; (800ceb8 <tcp_free_acked_segments+0xec>)
 800ce26:	881b      	ldrh	r3, [r3, #0]
 800ce28:	4413      	add	r3, r2
 800ce2a:	b29a      	uxth	r2, r3
 800ce2c:	4b22      	ldr	r3, [pc, #136]	; (800ceb8 <tcp_free_acked_segments+0xec>)
 800ce2e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ce30:	6978      	ldr	r0, [r7, #20]
 800ce32:	f7fe f90f 	bl	800b054 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d00c      	beq.n	800ce5a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d109      	bne.n	800ce5a <tcp_free_acked_segments+0x8e>
 800ce46:	683b      	ldr	r3, [r7, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d106      	bne.n	800ce5a <tcp_free_acked_segments+0x8e>
 800ce4c:	4b17      	ldr	r3, [pc, #92]	; (800ceac <tcp_free_acked_segments+0xe0>)
 800ce4e:	f240 4262 	movw	r2, #1122	; 0x462
 800ce52:	491a      	ldr	r1, [pc, #104]	; (800cebc <tcp_free_acked_segments+0xf0>)
 800ce54:	4817      	ldr	r0, [pc, #92]	; (800ceb4 <tcp_free_acked_segments+0xe8>)
 800ce56:	f00b f89d 	bl	8017f94 <iprintf>
  while (seg_list != NULL &&
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d020      	beq.n	800cea2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ce60:	68bb      	ldr	r3, [r7, #8]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fb f919 	bl	800809e <lwip_htonl>
 800ce6c:	4604      	mov	r4, r0
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	891b      	ldrh	r3, [r3, #8]
 800ce72:	461d      	mov	r5, r3
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	68db      	ldr	r3, [r3, #12]
 800ce78:	899b      	ldrh	r3, [r3, #12]
 800ce7a:	b29b      	uxth	r3, r3
 800ce7c:	4618      	mov	r0, r3
 800ce7e:	f7fb f8f9 	bl	8008074 <lwip_htons>
 800ce82:	4603      	mov	r3, r0
 800ce84:	b2db      	uxtb	r3, r3
 800ce86:	f003 0303 	and.w	r3, r3, #3
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d001      	beq.n	800ce92 <tcp_free_acked_segments+0xc6>
 800ce8e:	2301      	movs	r3, #1
 800ce90:	e000      	b.n	800ce94 <tcp_free_acked_segments+0xc8>
 800ce92:	2300      	movs	r3, #0
 800ce94:	442b      	add	r3, r5
 800ce96:	18e2      	adds	r2, r4, r3
 800ce98:	4b09      	ldr	r3, [pc, #36]	; (800cec0 <tcp_free_acked_segments+0xf4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	dd9c      	ble.n	800cddc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800cea2:	68bb      	ldr	r3, [r7, #8]
}
 800cea4:	4618      	mov	r0, r3
 800cea6:	3718      	adds	r7, #24
 800cea8:	46bd      	mov	sp, r7
 800ceaa:	bdb0      	pop	{r4, r5, r7, pc}
 800ceac:	0801ac20 	.word	0x0801ac20
 800ceb0:	0801af08 	.word	0x0801af08
 800ceb4:	0801ac6c 	.word	0x0801ac6c
 800ceb8:	200083d4 	.word	0x200083d4
 800cebc:	0801af30 	.word	0x0801af30
 800cec0:	200083d0 	.word	0x200083d0

0800cec4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800cec4:	b5b0      	push	{r4, r5, r7, lr}
 800cec6:	b094      	sub	sp, #80	; 0x50
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800cecc:	2300      	movs	r3, #0
 800cece:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d106      	bne.n	800cee4 <tcp_receive+0x20>
 800ced6:	4ba6      	ldr	r3, [pc, #664]	; (800d170 <tcp_receive+0x2ac>)
 800ced8:	f240 427b 	movw	r2, #1147	; 0x47b
 800cedc:	49a5      	ldr	r1, [pc, #660]	; (800d174 <tcp_receive+0x2b0>)
 800cede:	48a6      	ldr	r0, [pc, #664]	; (800d178 <tcp_receive+0x2b4>)
 800cee0:	f00b f858 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	7d1b      	ldrb	r3, [r3, #20]
 800cee8:	2b03      	cmp	r3, #3
 800ceea:	d806      	bhi.n	800cefa <tcp_receive+0x36>
 800ceec:	4ba0      	ldr	r3, [pc, #640]	; (800d170 <tcp_receive+0x2ac>)
 800ceee:	f240 427c 	movw	r2, #1148	; 0x47c
 800cef2:	49a2      	ldr	r1, [pc, #648]	; (800d17c <tcp_receive+0x2b8>)
 800cef4:	48a0      	ldr	r0, [pc, #640]	; (800d178 <tcp_receive+0x2b4>)
 800cef6:	f00b f84d 	bl	8017f94 <iprintf>

  if (flags & TCP_ACK) {
 800cefa:	4ba1      	ldr	r3, [pc, #644]	; (800d180 <tcp_receive+0x2bc>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	f003 0310 	and.w	r3, r3, #16
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	f000 8263 	beq.w	800d3ce <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf0e:	461a      	mov	r2, r3
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf14:	4413      	add	r3, r2
 800cf16:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf1c:	4b99      	ldr	r3, [pc, #612]	; (800d184 <tcp_receive+0x2c0>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	1ad3      	subs	r3, r2, r3
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	db1b      	blt.n	800cf5e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800cf2a:	4b96      	ldr	r3, [pc, #600]	; (800d184 <tcp_receive+0x2c0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d106      	bne.n	800cf40 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf36:	4b94      	ldr	r3, [pc, #592]	; (800d188 <tcp_receive+0x2c4>)
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	1ad3      	subs	r3, r2, r3
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	db0e      	blt.n	800cf5e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800cf44:	4b90      	ldr	r3, [pc, #576]	; (800d188 <tcp_receive+0x2c4>)
 800cf46:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d125      	bne.n	800cf98 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800cf4c:	4b8f      	ldr	r3, [pc, #572]	; (800d18c <tcp_receive+0x2c8>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	89db      	ldrh	r3, [r3, #14]
 800cf52:	b29a      	uxth	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d91c      	bls.n	800cf98 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800cf5e:	4b8b      	ldr	r3, [pc, #556]	; (800d18c <tcp_receive+0x2c8>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	89db      	ldrh	r3, [r3, #14]
 800cf64:	b29a      	uxth	r2, r3
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cf78:	429a      	cmp	r2, r3
 800cf7a:	d205      	bcs.n	800cf88 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800cf88:	4b7e      	ldr	r3, [pc, #504]	; (800d184 <tcp_receive+0x2c0>)
 800cf8a:	681a      	ldr	r2, [r3, #0]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800cf90:	4b7d      	ldr	r3, [pc, #500]	; (800d188 <tcp_receive+0x2c4>)
 800cf92:	681a      	ldr	r2, [r3, #0]
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800cf98:	4b7b      	ldr	r3, [pc, #492]	; (800d188 <tcp_receive+0x2c4>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cfa0:	1ad3      	subs	r3, r2, r3
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	dc58      	bgt.n	800d058 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800cfa6:	4b7a      	ldr	r3, [pc, #488]	; (800d190 <tcp_receive+0x2cc>)
 800cfa8:	881b      	ldrh	r3, [r3, #0]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d14b      	bne.n	800d046 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cfb2:	687a      	ldr	r2, [r7, #4]
 800cfb4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800cfb8:	4413      	add	r3, r2
 800cfba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfbc:	429a      	cmp	r2, r3
 800cfbe:	d142      	bne.n	800d046 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	db3d      	blt.n	800d046 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cfce:	4b6e      	ldr	r3, [pc, #440]	; (800d188 <tcp_receive+0x2c4>)
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d137      	bne.n	800d046 <tcp_receive+0x182>
              found_dupack = 1;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfe0:	2bff      	cmp	r3, #255	; 0xff
 800cfe2:	d007      	beq.n	800cff4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cfea:	3301      	adds	r3, #1
 800cfec:	b2da      	uxtb	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800cffa:	2b03      	cmp	r3, #3
 800cffc:	d91b      	bls.n	800d036 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d008:	4413      	add	r3, r2
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d012:	429a      	cmp	r2, r3
 800d014:	d30a      	bcc.n	800d02c <tcp_receive+0x168>
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d020:	4413      	add	r3, r2
 800d022:	b29a      	uxth	r2, r3
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d02a:	e004      	b.n	800d036 <tcp_receive+0x172>
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d03c:	2b02      	cmp	r3, #2
 800d03e:	d902      	bls.n	800d046 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f002 fb47 	bl	800f6d4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800d046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 8160 	bne.w	800d30e <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2200      	movs	r2, #0
 800d052:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d056:	e15a      	b.n	800d30e <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d058:	4b4b      	ldr	r3, [pc, #300]	; (800d188 <tcp_receive+0x2c4>)
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d060:	1ad3      	subs	r3, r2, r3
 800d062:	3b01      	subs	r3, #1
 800d064:	2b00      	cmp	r3, #0
 800d066:	f2c0 814d 	blt.w	800d304 <tcp_receive+0x440>
 800d06a:	4b47      	ldr	r3, [pc, #284]	; (800d188 <tcp_receive+0x2c4>)
 800d06c:	681a      	ldr	r2, [r3, #0]
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d072:	1ad3      	subs	r3, r2, r3
 800d074:	2b00      	cmp	r3, #0
 800d076:	f300 8145 	bgt.w	800d304 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	8b5b      	ldrh	r3, [r3, #26]
 800d07e:	f003 0304 	and.w	r3, r3, #4
 800d082:	2b00      	cmp	r3, #0
 800d084:	d010      	beq.n	800d0a8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	8b5b      	ldrh	r3, [r3, #26]
 800d08a:	f023 0304 	bic.w	r3, r3, #4
 800d08e:	b29a      	uxth	r2, r3
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d0b6:	10db      	asrs	r3, r3, #3
 800d0b8:	b21b      	sxth	r3, r3
 800d0ba:	b29a      	uxth	r2, r3
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d0c2:	b29b      	uxth	r3, r3
 800d0c4:	4413      	add	r3, r2
 800d0c6:	b29b      	uxth	r3, r3
 800d0c8:	b21a      	sxth	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800d0d0:	4b2d      	ldr	r3, [pc, #180]	; (800d188 <tcp_receive+0x2c4>)
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	b29a      	uxth	r2, r3
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	1ad3      	subs	r3, r2, r3
 800d0de:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800d0e8:	4b27      	ldr	r3, [pc, #156]	; (800d188 <tcp_receive+0x2c4>)
 800d0ea:	681a      	ldr	r2, [r3, #0]
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	7d1b      	ldrb	r3, [r3, #20]
 800d0f4:	2b03      	cmp	r3, #3
 800d0f6:	f240 8096 	bls.w	800d226 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800d106:	429a      	cmp	r2, r3
 800d108:	d244      	bcs.n	800d194 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	8b5b      	ldrh	r3, [r3, #26]
 800d10e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d112:	2b00      	cmp	r3, #0
 800d114:	d001      	beq.n	800d11a <tcp_receive+0x256>
 800d116:	2301      	movs	r3, #1
 800d118:	e000      	b.n	800d11c <tcp_receive+0x258>
 800d11a:	2302      	movs	r3, #2
 800d11c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800d120:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800d124:	b29a      	uxth	r2, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d12a:	fb12 f303 	smulbb	r3, r2, r3
 800d12e:	b29b      	uxth	r3, r3
 800d130:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d132:	4293      	cmp	r3, r2
 800d134:	bf28      	it	cs
 800d136:	4613      	movcs	r3, r2
 800d138:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d140:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d142:	4413      	add	r3, r2
 800d144:	b29a      	uxth	r2, r3
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d309      	bcc.n	800d164 <tcp_receive+0x2a0>
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d156:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800d158:	4413      	add	r3, r2
 800d15a:	b29a      	uxth	r2, r3
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d162:	e060      	b.n	800d226 <tcp_receive+0x362>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d16a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d16e:	e05a      	b.n	800d226 <tcp_receive+0x362>
 800d170:	0801ac20 	.word	0x0801ac20
 800d174:	0801af50 	.word	0x0801af50
 800d178:	0801ac6c 	.word	0x0801ac6c
 800d17c:	0801af6c 	.word	0x0801af6c
 800d180:	200083d8 	.word	0x200083d8
 800d184:	200083cc 	.word	0x200083cc
 800d188:	200083d0 	.word	0x200083d0
 800d18c:	200083bc 	.word	0x200083bc
 800d190:	200083d6 	.word	0x200083d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d19a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d19c:	4413      	add	r3, r2
 800d19e:	b29a      	uxth	r2, r3
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d309      	bcc.n	800d1be <tcp_receive+0x2fa>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1b0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d1b2:	4413      	add	r3, r2
 800d1b4:	b29a      	uxth	r2, r3
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800d1bc:	e004      	b.n	800d1c8 <tcp_receive+0x304>
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d1c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d326      	bcc.n	800d226 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d1f8:	4413      	add	r3, r2
 800d1fa:	b29a      	uxth	r2, r3
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d202:	429a      	cmp	r2, r3
 800d204:	d30a      	bcc.n	800d21c <tcp_receive+0x358>
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d210:	4413      	add	r3, r2
 800d212:	b29a      	uxth	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800d21a:	e004      	b.n	800d226 <tcp_receive+0x362>
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d222:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d22e:	4a98      	ldr	r2, [pc, #608]	; (800d490 <tcp_receive+0x5cc>)
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7ff fdcb 	bl	800cdcc <tcp_free_acked_segments>
 800d236:	4602      	mov	r2, r0
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d244:	4a93      	ldr	r2, [pc, #588]	; (800d494 <tcp_receive+0x5d0>)
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f7ff fdc0 	bl	800cdcc <tcp_free_acked_segments>
 800d24c:	4602      	mov	r2, r0
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d256:	2b00      	cmp	r3, #0
 800d258:	d104      	bne.n	800d264 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d260:	861a      	strh	r2, [r3, #48]	; 0x30
 800d262:	e002      	b.n	800d26a <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2200      	movs	r2, #0
 800d268:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2200      	movs	r2, #0
 800d26e:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d274:	2b00      	cmp	r3, #0
 800d276:	d103      	bne.n	800d280 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2200      	movs	r2, #0
 800d27c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800d286:	4b84      	ldr	r3, [pc, #528]	; (800d498 <tcp_receive+0x5d4>)
 800d288:	881b      	ldrh	r3, [r3, #0]
 800d28a:	4413      	add	r3, r2
 800d28c:	b29a      	uxth	r2, r3
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	8b5b      	ldrh	r3, [r3, #26]
 800d298:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d035      	beq.n	800d30c <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d118      	bne.n	800d2da <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00c      	beq.n	800d2ca <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	4618      	mov	r0, r3
 800d2be:	f7fa feee 	bl	800809e <lwip_htonl>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	dc20      	bgt.n	800d30c <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	8b5b      	ldrh	r3, [r3, #26]
 800d2ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2d2:	b29a      	uxth	r2, r3
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d2d8:	e018      	b.n	800d30c <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d2e2:	68db      	ldr	r3, [r3, #12]
 800d2e4:	685b      	ldr	r3, [r3, #4]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7fa fed9 	bl	800809e <lwip_htonl>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	1ae3      	subs	r3, r4, r3
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	dc0b      	bgt.n	800d30c <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	8b5b      	ldrh	r3, [r3, #26]
 800d2f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d2fc:	b29a      	uxth	r2, r3
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d302:	e003      	b.n	800d30c <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f002 fbdd 	bl	800fac4 <tcp_send_empty_ack>
 800d30a:	e000      	b.n	800d30e <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800d30c:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d312:	2b00      	cmp	r3, #0
 800d314:	d05b      	beq.n	800d3ce <tcp_receive+0x50a>
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d31a:	4b60      	ldr	r3, [pc, #384]	; (800d49c <tcp_receive+0x5d8>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	1ad3      	subs	r3, r2, r3
 800d320:	2b00      	cmp	r3, #0
 800d322:	da54      	bge.n	800d3ce <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800d324:	4b5e      	ldr	r3, [pc, #376]	; (800d4a0 <tcp_receive+0x5dc>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	b29a      	uxth	r2, r3
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32e:	b29b      	uxth	r3, r3
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	b29b      	uxth	r3, r3
 800d334:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800d338:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d342:	10db      	asrs	r3, r3, #3
 800d344:	b21b      	sxth	r3, r3
 800d346:	b29b      	uxth	r3, r3
 800d348:	1ad3      	subs	r3, r2, r3
 800d34a:	b29b      	uxth	r3, r3
 800d34c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d356:	b29a      	uxth	r2, r3
 800d358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d35c:	4413      	add	r3, r2
 800d35e:	b29b      	uxth	r3, r3
 800d360:	b21a      	sxth	r2, r3
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800d366:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	da05      	bge.n	800d37a <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800d36e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d372:	425b      	negs	r3, r3
 800d374:	b29b      	uxth	r3, r3
 800d376:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800d37a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d384:	109b      	asrs	r3, r3, #2
 800d386:	b21b      	sxth	r3, r3
 800d388:	b29b      	uxth	r3, r3
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	b29b      	uxth	r3, r3
 800d38e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d398:	b29a      	uxth	r2, r3
 800d39a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800d39e:	4413      	add	r3, r2
 800d3a0:	b29b      	uxth	r3, r3
 800d3a2:	b21a      	sxth	r2, r3
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d3ae:	10db      	asrs	r3, r3, #3
 800d3b0:	b21b      	sxth	r3, r3
 800d3b2:	b29a      	uxth	r2, r3
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d3ba:	b29b      	uxth	r3, r3
 800d3bc:	4413      	add	r3, r2
 800d3be:	b29b      	uxth	r3, r3
 800d3c0:	b21a      	sxth	r2, r3
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2200      	movs	r2, #0
 800d3cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800d3ce:	4b35      	ldr	r3, [pc, #212]	; (800d4a4 <tcp_receive+0x5e0>)
 800d3d0:	881b      	ldrh	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 84e1 	beq.w	800dd9a <tcp_receive+0xed6>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	7d1b      	ldrb	r3, [r3, #20]
 800d3dc:	2b06      	cmp	r3, #6
 800d3de:	f200 84dc 	bhi.w	800dd9a <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3e6:	4b30      	ldr	r3, [pc, #192]	; (800d4a8 <tcp_receive+0x5e4>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	3b01      	subs	r3, #1
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f2c0 808e 	blt.w	800d510 <tcp_receive+0x64c>
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3f8:	4b2a      	ldr	r3, [pc, #168]	; (800d4a4 <tcp_receive+0x5e0>)
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	4619      	mov	r1, r3
 800d3fe:	4b2a      	ldr	r3, [pc, #168]	; (800d4a8 <tcp_receive+0x5e4>)
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	440b      	add	r3, r1
 800d404:	1ad3      	subs	r3, r2, r3
 800d406:	3301      	adds	r3, #1
 800d408:	2b00      	cmp	r3, #0
 800d40a:	f300 8081 	bgt.w	800d510 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800d40e:	4b27      	ldr	r3, [pc, #156]	; (800d4ac <tcp_receive+0x5e8>)
 800d410:	685b      	ldr	r3, [r3, #4]
 800d412:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d418:	4b23      	ldr	r3, [pc, #140]	; (800d4a8 <tcp_receive+0x5e4>)
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	1ad3      	subs	r3, r2, r3
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800d420:	4b22      	ldr	r3, [pc, #136]	; (800d4ac <tcp_receive+0x5e8>)
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d106      	bne.n	800d436 <tcp_receive+0x572>
 800d428:	4b21      	ldr	r3, [pc, #132]	; (800d4b0 <tcp_receive+0x5ec>)
 800d42a:	f240 5294 	movw	r2, #1428	; 0x594
 800d42e:	4921      	ldr	r1, [pc, #132]	; (800d4b4 <tcp_receive+0x5f0>)
 800d430:	4821      	ldr	r0, [pc, #132]	; (800d4b8 <tcp_receive+0x5f4>)
 800d432:	f00a fdaf 	bl	8017f94 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800d436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d438:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d43c:	4293      	cmp	r3, r2
 800d43e:	d906      	bls.n	800d44e <tcp_receive+0x58a>
 800d440:	4b1b      	ldr	r3, [pc, #108]	; (800d4b0 <tcp_receive+0x5ec>)
 800d442:	f240 5295 	movw	r2, #1429	; 0x595
 800d446:	491d      	ldr	r1, [pc, #116]	; (800d4bc <tcp_receive+0x5f8>)
 800d448:	481b      	ldr	r0, [pc, #108]	; (800d4b8 <tcp_receive+0x5f4>)
 800d44a:	f00a fda3 	bl	8017f94 <iprintf>
      off = (u16_t)off32;
 800d44e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d450:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800d454:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <tcp_receive+0x5e8>)
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	891b      	ldrh	r3, [r3, #8]
 800d45a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d45e:	429a      	cmp	r2, r3
 800d460:	d906      	bls.n	800d470 <tcp_receive+0x5ac>
 800d462:	4b13      	ldr	r3, [pc, #76]	; (800d4b0 <tcp_receive+0x5ec>)
 800d464:	f240 5297 	movw	r2, #1431	; 0x597
 800d468:	4915      	ldr	r1, [pc, #84]	; (800d4c0 <tcp_receive+0x5fc>)
 800d46a:	4813      	ldr	r0, [pc, #76]	; (800d4b8 <tcp_receive+0x5f4>)
 800d46c:	f00a fd92 	bl	8017f94 <iprintf>
      inseg.len -= off;
 800d470:	4b0e      	ldr	r3, [pc, #56]	; (800d4ac <tcp_receive+0x5e8>)
 800d472:	891a      	ldrh	r2, [r3, #8]
 800d474:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d478:	1ad3      	subs	r3, r2, r3
 800d47a:	b29a      	uxth	r2, r3
 800d47c:	4b0b      	ldr	r3, [pc, #44]	; (800d4ac <tcp_receive+0x5e8>)
 800d47e:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800d480:	4b0a      	ldr	r3, [pc, #40]	; (800d4ac <tcp_receive+0x5e8>)
 800d482:	685b      	ldr	r3, [r3, #4]
 800d484:	891a      	ldrh	r2, [r3, #8]
 800d486:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d48a:	1ad3      	subs	r3, r2, r3
 800d48c:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800d48e:	e029      	b.n	800d4e4 <tcp_receive+0x620>
 800d490:	0801af88 	.word	0x0801af88
 800d494:	0801af90 	.word	0x0801af90
 800d498:	200083d4 	.word	0x200083d4
 800d49c:	200083d0 	.word	0x200083d0
 800d4a0:	2000c4e0 	.word	0x2000c4e0
 800d4a4:	200083d6 	.word	0x200083d6
 800d4a8:	200083cc 	.word	0x200083cc
 800d4ac:	200083ac 	.word	0x200083ac
 800d4b0:	0801ac20 	.word	0x0801ac20
 800d4b4:	0801af98 	.word	0x0801af98
 800d4b8:	0801ac6c 	.word	0x0801ac6c
 800d4bc:	0801afa8 	.word	0x0801afa8
 800d4c0:	0801afb8 	.word	0x0801afb8
        off -= p->len;
 800d4c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4c6:	895b      	ldrh	r3, [r3, #10]
 800d4c8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4cc:	1ad3      	subs	r3, r2, r3
 800d4ce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800d4d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4d4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d4d6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800d4d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4da:	2200      	movs	r2, #0
 800d4dc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800d4de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800d4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d4e6:	895b      	ldrh	r3, [r3, #10]
 800d4e8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d8e9      	bhi.n	800d4c4 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800d4f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800d4f8:	f7fc f8ea 	bl	80096d0 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	4a91      	ldr	r2, [pc, #580]	; (800d748 <tcp_receive+0x884>)
 800d502:	6013      	str	r3, [r2, #0]
 800d504:	4b91      	ldr	r3, [pc, #580]	; (800d74c <tcp_receive+0x888>)
 800d506:	68db      	ldr	r3, [r3, #12]
 800d508:	4a8f      	ldr	r2, [pc, #572]	; (800d748 <tcp_receive+0x884>)
 800d50a:	6812      	ldr	r2, [r2, #0]
 800d50c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800d50e:	e00d      	b.n	800d52c <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800d510:	4b8d      	ldr	r3, [pc, #564]	; (800d748 <tcp_receive+0x884>)
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	1ad3      	subs	r3, r2, r3
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	da06      	bge.n	800d52c <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	8b5b      	ldrh	r3, [r3, #26]
 800d522:	f043 0302 	orr.w	r3, r3, #2
 800d526:	b29a      	uxth	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800d52c:	4b86      	ldr	r3, [pc, #536]	; (800d748 <tcp_receive+0x884>)
 800d52e:	681a      	ldr	r2, [r3, #0]
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	1ad3      	subs	r3, r2, r3
 800d536:	2b00      	cmp	r3, #0
 800d538:	f2c0 842a 	blt.w	800dd90 <tcp_receive+0xecc>
 800d53c:	4b82      	ldr	r3, [pc, #520]	; (800d748 <tcp_receive+0x884>)
 800d53e:	681a      	ldr	r2, [r3, #0]
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d544:	6879      	ldr	r1, [r7, #4]
 800d546:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d548:	440b      	add	r3, r1
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	3301      	adds	r3, #1
 800d54e:	2b00      	cmp	r3, #0
 800d550:	f300 841e 	bgt.w	800dd90 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d558:	4b7b      	ldr	r3, [pc, #492]	; (800d748 <tcp_receive+0x884>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	429a      	cmp	r2, r3
 800d55e:	f040 829a 	bne.w	800da96 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800d562:	4b7a      	ldr	r3, [pc, #488]	; (800d74c <tcp_receive+0x888>)
 800d564:	891c      	ldrh	r4, [r3, #8]
 800d566:	4b79      	ldr	r3, [pc, #484]	; (800d74c <tcp_receive+0x888>)
 800d568:	68db      	ldr	r3, [r3, #12]
 800d56a:	899b      	ldrh	r3, [r3, #12]
 800d56c:	b29b      	uxth	r3, r3
 800d56e:	4618      	mov	r0, r3
 800d570:	f7fa fd80 	bl	8008074 <lwip_htons>
 800d574:	4603      	mov	r3, r0
 800d576:	b2db      	uxtb	r3, r3
 800d578:	f003 0303 	and.w	r3, r3, #3
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d001      	beq.n	800d584 <tcp_receive+0x6c0>
 800d580:	2301      	movs	r3, #1
 800d582:	e000      	b.n	800d586 <tcp_receive+0x6c2>
 800d584:	2300      	movs	r3, #0
 800d586:	4423      	add	r3, r4
 800d588:	b29a      	uxth	r2, r3
 800d58a:	4b71      	ldr	r3, [pc, #452]	; (800d750 <tcp_receive+0x88c>)
 800d58c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d592:	4b6f      	ldr	r3, [pc, #444]	; (800d750 <tcp_receive+0x88c>)
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	429a      	cmp	r2, r3
 800d598:	d275      	bcs.n	800d686 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d59a:	4b6c      	ldr	r3, [pc, #432]	; (800d74c <tcp_receive+0x888>)
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	899b      	ldrh	r3, [r3, #12]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	4618      	mov	r0, r3
 800d5a4:	f7fa fd66 	bl	8008074 <lwip_htons>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	f003 0301 	and.w	r3, r3, #1
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d01f      	beq.n	800d5f4 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800d5b4:	4b65      	ldr	r3, [pc, #404]	; (800d74c <tcp_receive+0x888>)
 800d5b6:	68db      	ldr	r3, [r3, #12]
 800d5b8:	899b      	ldrh	r3, [r3, #12]
 800d5ba:	b29b      	uxth	r3, r3
 800d5bc:	b21b      	sxth	r3, r3
 800d5be:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d5c2:	b21c      	sxth	r4, r3
 800d5c4:	4b61      	ldr	r3, [pc, #388]	; (800d74c <tcp_receive+0x888>)
 800d5c6:	68db      	ldr	r3, [r3, #12]
 800d5c8:	899b      	ldrh	r3, [r3, #12]
 800d5ca:	b29b      	uxth	r3, r3
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7fa fd51 	bl	8008074 <lwip_htons>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	b29b      	uxth	r3, r3
 800d5d8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800d5dc:	b29b      	uxth	r3, r3
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fa fd48 	bl	8008074 <lwip_htons>
 800d5e4:	4603      	mov	r3, r0
 800d5e6:	b21b      	sxth	r3, r3
 800d5e8:	4323      	orrs	r3, r4
 800d5ea:	b21a      	sxth	r2, r3
 800d5ec:	4b57      	ldr	r3, [pc, #348]	; (800d74c <tcp_receive+0x888>)
 800d5ee:	68db      	ldr	r3, [r3, #12]
 800d5f0:	b292      	uxth	r2, r2
 800d5f2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d5f8:	4b54      	ldr	r3, [pc, #336]	; (800d74c <tcp_receive+0x888>)
 800d5fa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d5fc:	4b53      	ldr	r3, [pc, #332]	; (800d74c <tcp_receive+0x888>)
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	899b      	ldrh	r3, [r3, #12]
 800d602:	b29b      	uxth	r3, r3
 800d604:	4618      	mov	r0, r3
 800d606:	f7fa fd35 	bl	8008074 <lwip_htons>
 800d60a:	4603      	mov	r3, r0
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	f003 0302 	and.w	r3, r3, #2
 800d612:	2b00      	cmp	r3, #0
 800d614:	d005      	beq.n	800d622 <tcp_receive+0x75e>
            inseg.len -= 1;
 800d616:	4b4d      	ldr	r3, [pc, #308]	; (800d74c <tcp_receive+0x888>)
 800d618:	891b      	ldrh	r3, [r3, #8]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	b29a      	uxth	r2, r3
 800d61e:	4b4b      	ldr	r3, [pc, #300]	; (800d74c <tcp_receive+0x888>)
 800d620:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800d622:	4b4a      	ldr	r3, [pc, #296]	; (800d74c <tcp_receive+0x888>)
 800d624:	685a      	ldr	r2, [r3, #4]
 800d626:	4b49      	ldr	r3, [pc, #292]	; (800d74c <tcp_receive+0x888>)
 800d628:	891b      	ldrh	r3, [r3, #8]
 800d62a:	4619      	mov	r1, r3
 800d62c:	4610      	mov	r0, r2
 800d62e:	f7fb ff4f 	bl	80094d0 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800d632:	4b46      	ldr	r3, [pc, #280]	; (800d74c <tcp_receive+0x888>)
 800d634:	891c      	ldrh	r4, [r3, #8]
 800d636:	4b45      	ldr	r3, [pc, #276]	; (800d74c <tcp_receive+0x888>)
 800d638:	68db      	ldr	r3, [r3, #12]
 800d63a:	899b      	ldrh	r3, [r3, #12]
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	4618      	mov	r0, r3
 800d640:	f7fa fd18 	bl	8008074 <lwip_htons>
 800d644:	4603      	mov	r3, r0
 800d646:	b2db      	uxtb	r3, r3
 800d648:	f003 0303 	and.w	r3, r3, #3
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d001      	beq.n	800d654 <tcp_receive+0x790>
 800d650:	2301      	movs	r3, #1
 800d652:	e000      	b.n	800d656 <tcp_receive+0x792>
 800d654:	2300      	movs	r3, #0
 800d656:	4423      	add	r3, r4
 800d658:	b29a      	uxth	r2, r3
 800d65a:	4b3d      	ldr	r3, [pc, #244]	; (800d750 <tcp_receive+0x88c>)
 800d65c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800d65e:	4b3c      	ldr	r3, [pc, #240]	; (800d750 <tcp_receive+0x88c>)
 800d660:	881b      	ldrh	r3, [r3, #0]
 800d662:	461a      	mov	r2, r3
 800d664:	4b38      	ldr	r3, [pc, #224]	; (800d748 <tcp_receive+0x884>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	441a      	add	r2, r3
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d66e:	6879      	ldr	r1, [r7, #4]
 800d670:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800d672:	440b      	add	r3, r1
 800d674:	429a      	cmp	r2, r3
 800d676:	d006      	beq.n	800d686 <tcp_receive+0x7c2>
 800d678:	4b36      	ldr	r3, [pc, #216]	; (800d754 <tcp_receive+0x890>)
 800d67a:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800d67e:	4936      	ldr	r1, [pc, #216]	; (800d758 <tcp_receive+0x894>)
 800d680:	4836      	ldr	r0, [pc, #216]	; (800d75c <tcp_receive+0x898>)
 800d682:	f00a fc87 	bl	8017f94 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	f000 80e7 	beq.w	800d85e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d690:	4b2e      	ldr	r3, [pc, #184]	; (800d74c <tcp_receive+0x888>)
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	899b      	ldrh	r3, [r3, #12]
 800d696:	b29b      	uxth	r3, r3
 800d698:	4618      	mov	r0, r3
 800d69a:	f7fa fceb 	bl	8008074 <lwip_htons>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	f003 0301 	and.w	r3, r3, #1
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d010      	beq.n	800d6cc <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800d6aa:	e00a      	b.n	800d6c2 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800d6bc:	68f8      	ldr	r0, [r7, #12]
 800d6be:	f7fd fcc9 	bl	800b054 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d1f0      	bne.n	800d6ac <tcp_receive+0x7e8>
 800d6ca:	e0c8      	b.n	800d85e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800d6d2:	e052      	b.n	800d77a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d6d6:	68db      	ldr	r3, [r3, #12]
 800d6d8:	899b      	ldrh	r3, [r3, #12]
 800d6da:	b29b      	uxth	r3, r3
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7fa fcc9 	bl	8008074 <lwip_htons>
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	b2db      	uxtb	r3, r3
 800d6e6:	f003 0301 	and.w	r3, r3, #1
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d03d      	beq.n	800d76a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800d6ee:	4b17      	ldr	r3, [pc, #92]	; (800d74c <tcp_receive+0x888>)
 800d6f0:	68db      	ldr	r3, [r3, #12]
 800d6f2:	899b      	ldrh	r3, [r3, #12]
 800d6f4:	b29b      	uxth	r3, r3
 800d6f6:	4618      	mov	r0, r3
 800d6f8:	f7fa fcbc 	bl	8008074 <lwip_htons>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	b2db      	uxtb	r3, r3
 800d700:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800d704:	2b00      	cmp	r3, #0
 800d706:	d130      	bne.n	800d76a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800d708:	4b10      	ldr	r3, [pc, #64]	; (800d74c <tcp_receive+0x888>)
 800d70a:	68db      	ldr	r3, [r3, #12]
 800d70c:	899b      	ldrh	r3, [r3, #12]
 800d70e:	b29c      	uxth	r4, r3
 800d710:	2001      	movs	r0, #1
 800d712:	f7fa fcaf 	bl	8008074 <lwip_htons>
 800d716:	4603      	mov	r3, r0
 800d718:	461a      	mov	r2, r3
 800d71a:	4b0c      	ldr	r3, [pc, #48]	; (800d74c <tcp_receive+0x888>)
 800d71c:	68db      	ldr	r3, [r3, #12]
 800d71e:	4322      	orrs	r2, r4
 800d720:	b292      	uxth	r2, r2
 800d722:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800d724:	4b09      	ldr	r3, [pc, #36]	; (800d74c <tcp_receive+0x888>)
 800d726:	891c      	ldrh	r4, [r3, #8]
 800d728:	4b08      	ldr	r3, [pc, #32]	; (800d74c <tcp_receive+0x888>)
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	899b      	ldrh	r3, [r3, #12]
 800d72e:	b29b      	uxth	r3, r3
 800d730:	4618      	mov	r0, r3
 800d732:	f7fa fc9f 	bl	8008074 <lwip_htons>
 800d736:	4603      	mov	r3, r0
 800d738:	b2db      	uxtb	r3, r3
 800d73a:	f003 0303 	and.w	r3, r3, #3
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d00e      	beq.n	800d760 <tcp_receive+0x89c>
 800d742:	2301      	movs	r3, #1
 800d744:	e00d      	b.n	800d762 <tcp_receive+0x89e>
 800d746:	bf00      	nop
 800d748:	200083cc 	.word	0x200083cc
 800d74c:	200083ac 	.word	0x200083ac
 800d750:	200083d6 	.word	0x200083d6
 800d754:	0801ac20 	.word	0x0801ac20
 800d758:	0801afc8 	.word	0x0801afc8
 800d75c:	0801ac6c 	.word	0x0801ac6c
 800d760:	2300      	movs	r3, #0
 800d762:	4423      	add	r3, r4
 800d764:	b29a      	uxth	r2, r3
 800d766:	4b98      	ldr	r3, [pc, #608]	; (800d9c8 <tcp_receive+0xb04>)
 800d768:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800d76a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d76c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800d76e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800d774:	6938      	ldr	r0, [r7, #16]
 800d776:	f7fd fc6d 	bl	800b054 <tcp_seg_free>
            while (next &&
 800d77a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00e      	beq.n	800d79e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800d780:	4b91      	ldr	r3, [pc, #580]	; (800d9c8 <tcp_receive+0xb04>)
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	4b91      	ldr	r3, [pc, #580]	; (800d9cc <tcp_receive+0xb08>)
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	441a      	add	r2, r3
 800d78c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d78e:	68db      	ldr	r3, [r3, #12]
 800d790:	685b      	ldr	r3, [r3, #4]
 800d792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d794:	8909      	ldrh	r1, [r1, #8]
 800d796:	440b      	add	r3, r1
 800d798:	1ad3      	subs	r3, r2, r3
            while (next &&
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	da9a      	bge.n	800d6d4 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800d79e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d059      	beq.n	800d858 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800d7a4:	4b88      	ldr	r3, [pc, #544]	; (800d9c8 <tcp_receive+0xb04>)
 800d7a6:	881b      	ldrh	r3, [r3, #0]
 800d7a8:	461a      	mov	r2, r3
 800d7aa:	4b88      	ldr	r3, [pc, #544]	; (800d9cc <tcp_receive+0xb08>)
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	441a      	add	r2, r3
 800d7b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7b2:	68db      	ldr	r3, [r3, #12]
 800d7b4:	685b      	ldr	r3, [r3, #4]
 800d7b6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	dd4d      	ble.n	800d858 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d7be:	68db      	ldr	r3, [r3, #12]
 800d7c0:	685b      	ldr	r3, [r3, #4]
 800d7c2:	b29a      	uxth	r2, r3
 800d7c4:	4b81      	ldr	r3, [pc, #516]	; (800d9cc <tcp_receive+0xb08>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	b29b      	uxth	r3, r3
 800d7ca:	1ad3      	subs	r3, r2, r3
 800d7cc:	b29a      	uxth	r2, r3
 800d7ce:	4b80      	ldr	r3, [pc, #512]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7d0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800d7d2:	4b7f      	ldr	r3, [pc, #508]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7d4:	68db      	ldr	r3, [r3, #12]
 800d7d6:	899b      	ldrh	r3, [r3, #12]
 800d7d8:	b29b      	uxth	r3, r3
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fa fc4a 	bl	8008074 <lwip_htons>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	f003 0302 	and.w	r3, r3, #2
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d005      	beq.n	800d7f8 <tcp_receive+0x934>
                inseg.len -= 1;
 800d7ec:	4b78      	ldr	r3, [pc, #480]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7ee:	891b      	ldrh	r3, [r3, #8]
 800d7f0:	3b01      	subs	r3, #1
 800d7f2:	b29a      	uxth	r2, r3
 800d7f4:	4b76      	ldr	r3, [pc, #472]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7f6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800d7f8:	4b75      	ldr	r3, [pc, #468]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	4b74      	ldr	r3, [pc, #464]	; (800d9d0 <tcp_receive+0xb0c>)
 800d7fe:	891b      	ldrh	r3, [r3, #8]
 800d800:	4619      	mov	r1, r3
 800d802:	4610      	mov	r0, r2
 800d804:	f7fb fe64 	bl	80094d0 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800d808:	4b71      	ldr	r3, [pc, #452]	; (800d9d0 <tcp_receive+0xb0c>)
 800d80a:	891c      	ldrh	r4, [r3, #8]
 800d80c:	4b70      	ldr	r3, [pc, #448]	; (800d9d0 <tcp_receive+0xb0c>)
 800d80e:	68db      	ldr	r3, [r3, #12]
 800d810:	899b      	ldrh	r3, [r3, #12]
 800d812:	b29b      	uxth	r3, r3
 800d814:	4618      	mov	r0, r3
 800d816:	f7fa fc2d 	bl	8008074 <lwip_htons>
 800d81a:	4603      	mov	r3, r0
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	f003 0303 	and.w	r3, r3, #3
 800d822:	2b00      	cmp	r3, #0
 800d824:	d001      	beq.n	800d82a <tcp_receive+0x966>
 800d826:	2301      	movs	r3, #1
 800d828:	e000      	b.n	800d82c <tcp_receive+0x968>
 800d82a:	2300      	movs	r3, #0
 800d82c:	4423      	add	r3, r4
 800d82e:	b29a      	uxth	r2, r3
 800d830:	4b65      	ldr	r3, [pc, #404]	; (800d9c8 <tcp_receive+0xb04>)
 800d832:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800d834:	4b64      	ldr	r3, [pc, #400]	; (800d9c8 <tcp_receive+0xb04>)
 800d836:	881b      	ldrh	r3, [r3, #0]
 800d838:	461a      	mov	r2, r3
 800d83a:	4b64      	ldr	r3, [pc, #400]	; (800d9cc <tcp_receive+0xb08>)
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	441a      	add	r2, r3
 800d840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d842:	68db      	ldr	r3, [r3, #12]
 800d844:	685b      	ldr	r3, [r3, #4]
 800d846:	429a      	cmp	r2, r3
 800d848:	d006      	beq.n	800d858 <tcp_receive+0x994>
 800d84a:	4b62      	ldr	r3, [pc, #392]	; (800d9d4 <tcp_receive+0xb10>)
 800d84c:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800d850:	4961      	ldr	r1, [pc, #388]	; (800d9d8 <tcp_receive+0xb14>)
 800d852:	4862      	ldr	r0, [pc, #392]	; (800d9dc <tcp_receive+0xb18>)
 800d854:	f00a fb9e 	bl	8017f94 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d85c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800d85e:	4b5a      	ldr	r3, [pc, #360]	; (800d9c8 <tcp_receive+0xb04>)
 800d860:	881b      	ldrh	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	4b59      	ldr	r3, [pc, #356]	; (800d9cc <tcp_receive+0xb08>)
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	441a      	add	r2, r3
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d872:	4b55      	ldr	r3, [pc, #340]	; (800d9c8 <tcp_receive+0xb04>)
 800d874:	881b      	ldrh	r3, [r3, #0]
 800d876:	429a      	cmp	r2, r3
 800d878:	d206      	bcs.n	800d888 <tcp_receive+0x9c4>
 800d87a:	4b56      	ldr	r3, [pc, #344]	; (800d9d4 <tcp_receive+0xb10>)
 800d87c:	f240 6207 	movw	r2, #1543	; 0x607
 800d880:	4957      	ldr	r1, [pc, #348]	; (800d9e0 <tcp_receive+0xb1c>)
 800d882:	4856      	ldr	r0, [pc, #344]	; (800d9dc <tcp_receive+0xb18>)
 800d884:	f00a fb86 	bl	8017f94 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d88c:	4b4e      	ldr	r3, [pc, #312]	; (800d9c8 <tcp_receive+0xb04>)
 800d88e:	881b      	ldrh	r3, [r3, #0]
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	b29a      	uxth	r2, r3
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f7fc fda1 	bl	800a3e0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800d89e:	4b4c      	ldr	r3, [pc, #304]	; (800d9d0 <tcp_receive+0xb0c>)
 800d8a0:	685b      	ldr	r3, [r3, #4]
 800d8a2:	891b      	ldrh	r3, [r3, #8]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d006      	beq.n	800d8b6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800d8a8:	4b49      	ldr	r3, [pc, #292]	; (800d9d0 <tcp_receive+0xb0c>)
 800d8aa:	685b      	ldr	r3, [r3, #4]
 800d8ac:	4a4d      	ldr	r2, [pc, #308]	; (800d9e4 <tcp_receive+0xb20>)
 800d8ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800d8b0:	4b47      	ldr	r3, [pc, #284]	; (800d9d0 <tcp_receive+0xb0c>)
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800d8b6:	4b46      	ldr	r3, [pc, #280]	; (800d9d0 <tcp_receive+0xb0c>)
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	899b      	ldrh	r3, [r3, #12]
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	4618      	mov	r0, r3
 800d8c0:	f7fa fbd8 	bl	8008074 <lwip_htons>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	b2db      	uxtb	r3, r3
 800d8c8:	f003 0301 	and.w	r3, r3, #1
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	f000 80b8 	beq.w	800da42 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800d8d2:	4b45      	ldr	r3, [pc, #276]	; (800d9e8 <tcp_receive+0xb24>)
 800d8d4:	781b      	ldrb	r3, [r3, #0]
 800d8d6:	f043 0320 	orr.w	r3, r3, #32
 800d8da:	b2da      	uxtb	r2, r3
 800d8dc:	4b42      	ldr	r3, [pc, #264]	; (800d9e8 <tcp_receive+0xb24>)
 800d8de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800d8e0:	e0af      	b.n	800da42 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8ec:	68db      	ldr	r3, [r3, #12]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	4a36      	ldr	r2, [pc, #216]	; (800d9cc <tcp_receive+0xb08>)
 800d8f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	891b      	ldrh	r3, [r3, #8]
 800d8f8:	461c      	mov	r4, r3
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	68db      	ldr	r3, [r3, #12]
 800d8fe:	899b      	ldrh	r3, [r3, #12]
 800d900:	b29b      	uxth	r3, r3
 800d902:	4618      	mov	r0, r3
 800d904:	f7fa fbb6 	bl	8008074 <lwip_htons>
 800d908:	4603      	mov	r3, r0
 800d90a:	b2db      	uxtb	r3, r3
 800d90c:	f003 0303 	and.w	r3, r3, #3
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <tcp_receive+0xa54>
 800d914:	2301      	movs	r3, #1
 800d916:	e000      	b.n	800d91a <tcp_receive+0xa56>
 800d918:	2300      	movs	r3, #0
 800d91a:	191a      	adds	r2, r3, r4
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d920:	441a      	add	r2, r3
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d92a:	461c      	mov	r4, r3
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	891b      	ldrh	r3, [r3, #8]
 800d930:	461d      	mov	r5, r3
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	68db      	ldr	r3, [r3, #12]
 800d936:	899b      	ldrh	r3, [r3, #12]
 800d938:	b29b      	uxth	r3, r3
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fa fb9a 	bl	8008074 <lwip_htons>
 800d940:	4603      	mov	r3, r0
 800d942:	b2db      	uxtb	r3, r3
 800d944:	f003 0303 	and.w	r3, r3, #3
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d001      	beq.n	800d950 <tcp_receive+0xa8c>
 800d94c:	2301      	movs	r3, #1
 800d94e:	e000      	b.n	800d952 <tcp_receive+0xa8e>
 800d950:	2300      	movs	r3, #0
 800d952:	442b      	add	r3, r5
 800d954:	429c      	cmp	r4, r3
 800d956:	d206      	bcs.n	800d966 <tcp_receive+0xaa2>
 800d958:	4b1e      	ldr	r3, [pc, #120]	; (800d9d4 <tcp_receive+0xb10>)
 800d95a:	f240 622c 	movw	r2, #1580	; 0x62c
 800d95e:	4923      	ldr	r1, [pc, #140]	; (800d9ec <tcp_receive+0xb28>)
 800d960:	481e      	ldr	r0, [pc, #120]	; (800d9dc <tcp_receive+0xb18>)
 800d962:	f00a fb17 	bl	8017f94 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	891b      	ldrh	r3, [r3, #8]
 800d96a:	461c      	mov	r4, r3
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	899b      	ldrh	r3, [r3, #12]
 800d972:	b29b      	uxth	r3, r3
 800d974:	4618      	mov	r0, r3
 800d976:	f7fa fb7d 	bl	8008074 <lwip_htons>
 800d97a:	4603      	mov	r3, r0
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0303 	and.w	r3, r3, #3
 800d982:	2b00      	cmp	r3, #0
 800d984:	d001      	beq.n	800d98a <tcp_receive+0xac6>
 800d986:	2301      	movs	r3, #1
 800d988:	e000      	b.n	800d98c <tcp_receive+0xac8>
 800d98a:	2300      	movs	r3, #0
 800d98c:	1919      	adds	r1, r3, r4
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d992:	b28b      	uxth	r3, r1
 800d994:	1ad3      	subs	r3, r2, r3
 800d996:	b29a      	uxth	r2, r3
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800d99c:	6878      	ldr	r0, [r7, #4]
 800d99e:	f7fc fd1f 	bl	800a3e0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	685b      	ldr	r3, [r3, #4]
 800d9a6:	891b      	ldrh	r3, [r3, #8]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d028      	beq.n	800d9fe <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800d9ac:	4b0d      	ldr	r3, [pc, #52]	; (800d9e4 <tcp_receive+0xb20>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d01d      	beq.n	800d9f0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800d9b4:	4b0b      	ldr	r3, [pc, #44]	; (800d9e4 <tcp_receive+0xb20>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	685b      	ldr	r3, [r3, #4]
 800d9bc:	4619      	mov	r1, r3
 800d9be:	4610      	mov	r0, r2
 800d9c0:	f7fb ffda 	bl	8009978 <pbuf_cat>
 800d9c4:	e018      	b.n	800d9f8 <tcp_receive+0xb34>
 800d9c6:	bf00      	nop
 800d9c8:	200083d6 	.word	0x200083d6
 800d9cc:	200083cc 	.word	0x200083cc
 800d9d0:	200083ac 	.word	0x200083ac
 800d9d4:	0801ac20 	.word	0x0801ac20
 800d9d8:	0801b000 	.word	0x0801b000
 800d9dc:	0801ac6c 	.word	0x0801ac6c
 800d9e0:	0801b03c 	.word	0x0801b03c
 800d9e4:	200083dc 	.word	0x200083dc
 800d9e8:	200083d9 	.word	0x200083d9
 800d9ec:	0801b05c 	.word	0x0801b05c
            } else {
              recv_data = cseg->p;
 800d9f0:	68bb      	ldr	r3, [r7, #8]
 800d9f2:	685b      	ldr	r3, [r3, #4]
 800d9f4:	4a70      	ldr	r2, [pc, #448]	; (800dbb8 <tcp_receive+0xcf4>)
 800d9f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	2200      	movs	r2, #0
 800d9fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	68db      	ldr	r3, [r3, #12]
 800da02:	899b      	ldrh	r3, [r3, #12]
 800da04:	b29b      	uxth	r3, r3
 800da06:	4618      	mov	r0, r3
 800da08:	f7fa fb34 	bl	8008074 <lwip_htons>
 800da0c:	4603      	mov	r3, r0
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0301 	and.w	r3, r3, #1
 800da14:	2b00      	cmp	r3, #0
 800da16:	d00d      	beq.n	800da34 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800da18:	4b68      	ldr	r3, [pc, #416]	; (800dbbc <tcp_receive+0xcf8>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	f043 0320 	orr.w	r3, r3, #32
 800da20:	b2da      	uxtb	r2, r3
 800da22:	4b66      	ldr	r3, [pc, #408]	; (800dbbc <tcp_receive+0xcf8>)
 800da24:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	7d1b      	ldrb	r3, [r3, #20]
 800da2a:	2b04      	cmp	r3, #4
 800da2c:	d102      	bne.n	800da34 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	2207      	movs	r2, #7
 800da32:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	681a      	ldr	r2, [r3, #0]
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800da3c:	68b8      	ldr	r0, [r7, #8]
 800da3e:	f7fd fb09 	bl	800b054 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da46:	2b00      	cmp	r3, #0
 800da48:	d008      	beq.n	800da5c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da4e:	68db      	ldr	r3, [r3, #12]
 800da50:	685a      	ldr	r2, [r3, #4]
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800da56:	429a      	cmp	r2, r3
 800da58:	f43f af43 	beq.w	800d8e2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	8b5b      	ldrh	r3, [r3, #26]
 800da60:	f003 0301 	and.w	r3, r3, #1
 800da64:	2b00      	cmp	r3, #0
 800da66:	d00e      	beq.n	800da86 <tcp_receive+0xbc2>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	8b5b      	ldrh	r3, [r3, #26]
 800da6c:	f023 0301 	bic.w	r3, r3, #1
 800da70:	b29a      	uxth	r2, r3
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	835a      	strh	r2, [r3, #26]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	8b5b      	ldrh	r3, [r3, #26]
 800da7a:	f043 0302 	orr.w	r3, r3, #2
 800da7e:	b29a      	uxth	r2, r3
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da84:	e188      	b.n	800dd98 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	8b5b      	ldrh	r3, [r3, #26]
 800da8a:	f043 0301 	orr.w	r3, r3, #1
 800da8e:	b29a      	uxth	r2, r3
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800da94:	e180      	b.n	800dd98 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d106      	bne.n	800daac <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800da9e:	4848      	ldr	r0, [pc, #288]	; (800dbc0 <tcp_receive+0xcfc>)
 800daa0:	f7fd faf0 	bl	800b084 <tcp_seg_copy>
 800daa4:	4602      	mov	r2, r0
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	675a      	str	r2, [r3, #116]	; 0x74
 800daaa:	e16d      	b.n	800dd88 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800daac:	2300      	movs	r3, #0
 800daae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dab4:	63bb      	str	r3, [r7, #56]	; 0x38
 800dab6:	e157      	b.n	800dd68 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	68db      	ldr	r3, [r3, #12]
 800dabc:	685a      	ldr	r2, [r3, #4]
 800dabe:	4b41      	ldr	r3, [pc, #260]	; (800dbc4 <tcp_receive+0xd00>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	d11d      	bne.n	800db02 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800dac6:	4b3e      	ldr	r3, [pc, #248]	; (800dbc0 <tcp_receive+0xcfc>)
 800dac8:	891a      	ldrh	r2, [r3, #8]
 800daca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dacc:	891b      	ldrh	r3, [r3, #8]
 800dace:	429a      	cmp	r2, r3
 800dad0:	f240 814f 	bls.w	800dd72 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800dad4:	483a      	ldr	r0, [pc, #232]	; (800dbc0 <tcp_receive+0xcfc>)
 800dad6:	f7fd fad5 	bl	800b084 <tcp_seg_copy>
 800dada:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800dadc:	697b      	ldr	r3, [r7, #20]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	f000 8149 	beq.w	800dd76 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800dae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d003      	beq.n	800daf2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800daea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daec:	697a      	ldr	r2, [r7, #20]
 800daee:	601a      	str	r2, [r3, #0]
 800daf0:	e002      	b.n	800daf8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	697a      	ldr	r2, [r7, #20]
 800daf6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800daf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dafa:	6978      	ldr	r0, [r7, #20]
 800dafc:	f7ff f8de 	bl	800ccbc <tcp_oos_insert_segment>
                }
                break;
 800db00:	e139      	b.n	800dd76 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800db02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db04:	2b00      	cmp	r3, #0
 800db06:	d117      	bne.n	800db38 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800db08:	4b2e      	ldr	r3, [pc, #184]	; (800dbc4 <tcp_receive+0xd00>)
 800db0a:	681a      	ldr	r2, [r3, #0]
 800db0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0e:	68db      	ldr	r3, [r3, #12]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	2b00      	cmp	r3, #0
 800db16:	da57      	bge.n	800dbc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db18:	4829      	ldr	r0, [pc, #164]	; (800dbc0 <tcp_receive+0xcfc>)
 800db1a:	f7fd fab3 	bl	800b084 <tcp_seg_copy>
 800db1e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800db20:	69bb      	ldr	r3, [r7, #24]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f000 8129 	beq.w	800dd7a <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	69ba      	ldr	r2, [r7, #24]
 800db2c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800db2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800db30:	69b8      	ldr	r0, [r7, #24]
 800db32:	f7ff f8c3 	bl	800ccbc <tcp_oos_insert_segment>
                  }
                  break;
 800db36:	e120      	b.n	800dd7a <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800db38:	4b22      	ldr	r3, [pc, #136]	; (800dbc4 <tcp_receive+0xd00>)
 800db3a:	681a      	ldr	r2, [r3, #0]
 800db3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	1ad3      	subs	r3, r2, r3
 800db44:	3b01      	subs	r3, #1
 800db46:	2b00      	cmp	r3, #0
 800db48:	db3e      	blt.n	800dbc8 <tcp_receive+0xd04>
 800db4a:	4b1e      	ldr	r3, [pc, #120]	; (800dbc4 <tcp_receive+0xd00>)
 800db4c:	681a      	ldr	r2, [r3, #0]
 800db4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db50:	68db      	ldr	r3, [r3, #12]
 800db52:	685b      	ldr	r3, [r3, #4]
 800db54:	1ad3      	subs	r3, r2, r3
 800db56:	3301      	adds	r3, #1
 800db58:	2b00      	cmp	r3, #0
 800db5a:	dc35      	bgt.n	800dbc8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800db5c:	4818      	ldr	r0, [pc, #96]	; (800dbc0 <tcp_receive+0xcfc>)
 800db5e:	f7fd fa91 	bl	800b084 <tcp_seg_copy>
 800db62:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800db64:	69fb      	ldr	r3, [r7, #28]
 800db66:	2b00      	cmp	r3, #0
 800db68:	f000 8109 	beq.w	800dd7e <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800db6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	685b      	ldr	r3, [r3, #4]
 800db72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db74:	8912      	ldrh	r2, [r2, #8]
 800db76:	441a      	add	r2, r3
 800db78:	4b12      	ldr	r3, [pc, #72]	; (800dbc4 <tcp_receive+0xd00>)
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	dd12      	ble.n	800dba8 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800db82:	4b10      	ldr	r3, [pc, #64]	; (800dbc4 <tcp_receive+0xd00>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	b29a      	uxth	r2, r3
 800db88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db8a:	68db      	ldr	r3, [r3, #12]
 800db8c:	685b      	ldr	r3, [r3, #4]
 800db8e:	b29b      	uxth	r3, r3
 800db90:	1ad3      	subs	r3, r2, r3
 800db92:	b29a      	uxth	r2, r3
 800db94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db96:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800db98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9a:	685a      	ldr	r2, [r3, #4]
 800db9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db9e:	891b      	ldrh	r3, [r3, #8]
 800dba0:	4619      	mov	r1, r3
 800dba2:	4610      	mov	r0, r2
 800dba4:	f7fb fc94 	bl	80094d0 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800dba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbaa:	69fa      	ldr	r2, [r7, #28]
 800dbac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800dbae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dbb0:	69f8      	ldr	r0, [r7, #28]
 800dbb2:	f7ff f883 	bl	800ccbc <tcp_oos_insert_segment>
                  }
                  break;
 800dbb6:	e0e2      	b.n	800dd7e <tcp_receive+0xeba>
 800dbb8:	200083dc 	.word	0x200083dc
 800dbbc:	200083d9 	.word	0x200083d9
 800dbc0:	200083ac 	.word	0x200083ac
 800dbc4:	200083cc 	.word	0x200083cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800dbc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800dbcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f040 80c6 	bne.w	800dd62 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800dbd6:	4b80      	ldr	r3, [pc, #512]	; (800ddd8 <tcp_receive+0xf14>)
 800dbd8:	681a      	ldr	r2, [r3, #0]
 800dbda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbdc:	68db      	ldr	r3, [r3, #12]
 800dbde:	685b      	ldr	r3, [r3, #4]
 800dbe0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	f340 80bd 	ble.w	800dd62 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800dbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbea:	68db      	ldr	r3, [r3, #12]
 800dbec:	899b      	ldrh	r3, [r3, #12]
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	4618      	mov	r0, r3
 800dbf2:	f7fa fa3f 	bl	8008074 <lwip_htons>
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 0301 	and.w	r3, r3, #1
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	f040 80bf 	bne.w	800dd82 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800dc04:	4875      	ldr	r0, [pc, #468]	; (800dddc <tcp_receive+0xf18>)
 800dc06:	f7fd fa3d 	bl	800b084 <tcp_seg_copy>
 800dc0a:	4602      	mov	r2, r0
 800dc0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800dc10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	f000 80b6 	beq.w	800dd86 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800dc1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc1c:	68db      	ldr	r3, [r3, #12]
 800dc1e:	685b      	ldr	r3, [r3, #4]
 800dc20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc22:	8912      	ldrh	r2, [r2, #8]
 800dc24:	441a      	add	r2, r3
 800dc26:	4b6c      	ldr	r3, [pc, #432]	; (800ddd8 <tcp_receive+0xf14>)
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	1ad3      	subs	r3, r2, r3
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	dd12      	ble.n	800dc56 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800dc30:	4b69      	ldr	r3, [pc, #420]	; (800ddd8 <tcp_receive+0xf14>)
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	b29a      	uxth	r2, r3
 800dc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc38:	68db      	ldr	r3, [r3, #12]
 800dc3a:	685b      	ldr	r3, [r3, #4]
 800dc3c:	b29b      	uxth	r3, r3
 800dc3e:	1ad3      	subs	r3, r2, r3
 800dc40:	b29a      	uxth	r2, r3
 800dc42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc44:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800dc46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc48:	685a      	ldr	r2, [r3, #4]
 800dc4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc4c:	891b      	ldrh	r3, [r3, #8]
 800dc4e:	4619      	mov	r1, r3
 800dc50:	4610      	mov	r0, r2
 800dc52:	f7fb fc3d 	bl	80094d0 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800dc56:	4b62      	ldr	r3, [pc, #392]	; (800dde0 <tcp_receive+0xf1c>)
 800dc58:	881b      	ldrh	r3, [r3, #0]
 800dc5a:	461a      	mov	r2, r3
 800dc5c:	4b5e      	ldr	r3, [pc, #376]	; (800ddd8 <tcp_receive+0xf14>)
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	441a      	add	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc66:	6879      	ldr	r1, [r7, #4]
 800dc68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc6a:	440b      	add	r3, r1
 800dc6c:	1ad3      	subs	r3, r2, r3
 800dc6e:	2b00      	cmp	r3, #0
 800dc70:	f340 8089 	ble.w	800dd86 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	68db      	ldr	r3, [r3, #12]
 800dc7a:	899b      	ldrh	r3, [r3, #12]
 800dc7c:	b29b      	uxth	r3, r3
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fa f9f8 	bl	8008074 <lwip_htons>
 800dc84:	4603      	mov	r3, r0
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d022      	beq.n	800dcd6 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800dc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	899b      	ldrh	r3, [r3, #12]
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	b21b      	sxth	r3, r3
 800dc9c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800dca0:	b21c      	sxth	r4, r3
 800dca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	899b      	ldrh	r3, [r3, #12]
 800dcaa:	b29b      	uxth	r3, r3
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fa f9e1 	bl	8008074 <lwip_htons>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	b2db      	uxtb	r3, r3
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800dcbc:	b29b      	uxth	r3, r3
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7fa f9d8 	bl	8008074 <lwip_htons>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	b21b      	sxth	r3, r3
 800dcc8:	4323      	orrs	r3, r4
 800dcca:	b21a      	sxth	r2, r3
 800dccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	b292      	uxth	r2, r2
 800dcd4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcda:	b29a      	uxth	r2, r3
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dce0:	4413      	add	r3, r2
 800dce2:	b299      	uxth	r1, r3
 800dce4:	4b3c      	ldr	r3, [pc, #240]	; (800ddd8 <tcp_receive+0xf14>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	b29a      	uxth	r2, r3
 800dcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	1a8a      	subs	r2, r1, r2
 800dcf0:	b292      	uxth	r2, r2
 800dcf2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	891b      	ldrh	r3, [r3, #8]
 800dd00:	4619      	mov	r1, r3
 800dd02:	4610      	mov	r0, r2
 800dd04:	f7fb fbe4 	bl	80094d0 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800dd08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	891c      	ldrh	r4, [r3, #8]
 800dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	68db      	ldr	r3, [r3, #12]
 800dd14:	899b      	ldrh	r3, [r3, #12]
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	4618      	mov	r0, r3
 800dd1a:	f7fa f9ab 	bl	8008074 <lwip_htons>
 800dd1e:	4603      	mov	r3, r0
 800dd20:	b2db      	uxtb	r3, r3
 800dd22:	f003 0303 	and.w	r3, r3, #3
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d001      	beq.n	800dd2e <tcp_receive+0xe6a>
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	e000      	b.n	800dd30 <tcp_receive+0xe6c>
 800dd2e:	2300      	movs	r3, #0
 800dd30:	4423      	add	r3, r4
 800dd32:	b29a      	uxth	r2, r3
 800dd34:	4b2a      	ldr	r3, [pc, #168]	; (800dde0 <tcp_receive+0xf1c>)
 800dd36:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800dd38:	4b29      	ldr	r3, [pc, #164]	; (800dde0 <tcp_receive+0xf1c>)
 800dd3a:	881b      	ldrh	r3, [r3, #0]
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	4b26      	ldr	r3, [pc, #152]	; (800ddd8 <tcp_receive+0xf14>)
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	441a      	add	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd48:	6879      	ldr	r1, [r7, #4]
 800dd4a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dd4c:	440b      	add	r3, r1
 800dd4e:	429a      	cmp	r2, r3
 800dd50:	d019      	beq.n	800dd86 <tcp_receive+0xec2>
 800dd52:	4b24      	ldr	r3, [pc, #144]	; (800dde4 <tcp_receive+0xf20>)
 800dd54:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800dd58:	4923      	ldr	r1, [pc, #140]	; (800dde8 <tcp_receive+0xf24>)
 800dd5a:	4824      	ldr	r0, [pc, #144]	; (800ddec <tcp_receive+0xf28>)
 800dd5c:	f00a f91a 	bl	8017f94 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800dd60:	e011      	b.n	800dd86 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	63bb      	str	r3, [r7, #56]	; 0x38
 800dd68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	f47f aea4 	bne.w	800dab8 <tcp_receive+0xbf4>
 800dd70:	e00a      	b.n	800dd88 <tcp_receive+0xec4>
                break;
 800dd72:	bf00      	nop
 800dd74:	e008      	b.n	800dd88 <tcp_receive+0xec4>
                break;
 800dd76:	bf00      	nop
 800dd78:	e006      	b.n	800dd88 <tcp_receive+0xec4>
                  break;
 800dd7a:	bf00      	nop
 800dd7c:	e004      	b.n	800dd88 <tcp_receive+0xec4>
                  break;
 800dd7e:	bf00      	nop
 800dd80:	e002      	b.n	800dd88 <tcp_receive+0xec4>
                  break;
 800dd82:	bf00      	nop
 800dd84:	e000      	b.n	800dd88 <tcp_receive+0xec4>
                break;
 800dd86:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f001 fe9b 	bl	800fac4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800dd8e:	e003      	b.n	800dd98 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f001 fe97 	bl	800fac4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd96:	e01a      	b.n	800ddce <tcp_receive+0xf0a>
 800dd98:	e019      	b.n	800ddce <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800dd9a:	4b0f      	ldr	r3, [pc, #60]	; (800ddd8 <tcp_receive+0xf14>)
 800dd9c:	681a      	ldr	r2, [r3, #0]
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda2:	1ad3      	subs	r3, r2, r3
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	db0a      	blt.n	800ddbe <tcp_receive+0xefa>
 800dda8:	4b0b      	ldr	r3, [pc, #44]	; (800ddd8 <tcp_receive+0xf14>)
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb0:	6879      	ldr	r1, [r7, #4]
 800ddb2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddb4:	440b      	add	r3, r1
 800ddb6:	1ad3      	subs	r3, r2, r3
 800ddb8:	3301      	adds	r3, #1
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	dd07      	ble.n	800ddce <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	8b5b      	ldrh	r3, [r3, #26]
 800ddc2:	f043 0302 	orr.w	r3, r3, #2
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800ddcc:	e7ff      	b.n	800ddce <tcp_receive+0xf0a>
 800ddce:	bf00      	nop
 800ddd0:	3750      	adds	r7, #80	; 0x50
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ddd6:	bf00      	nop
 800ddd8:	200083cc 	.word	0x200083cc
 800dddc:	200083ac 	.word	0x200083ac
 800dde0:	200083d6 	.word	0x200083d6
 800dde4:	0801ac20 	.word	0x0801ac20
 800dde8:	0801afc8 	.word	0x0801afc8
 800ddec:	0801ac6c 	.word	0x0801ac6c

0800ddf0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800ddf6:	4b15      	ldr	r3, [pc, #84]	; (800de4c <tcp_get_next_optbyte+0x5c>)
 800ddf8:	881b      	ldrh	r3, [r3, #0]
 800ddfa:	1c5a      	adds	r2, r3, #1
 800ddfc:	b291      	uxth	r1, r2
 800ddfe:	4a13      	ldr	r2, [pc, #76]	; (800de4c <tcp_get_next_optbyte+0x5c>)
 800de00:	8011      	strh	r1, [r2, #0]
 800de02:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800de04:	4b12      	ldr	r3, [pc, #72]	; (800de50 <tcp_get_next_optbyte+0x60>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d004      	beq.n	800de16 <tcp_get_next_optbyte+0x26>
 800de0c:	4b11      	ldr	r3, [pc, #68]	; (800de54 <tcp_get_next_optbyte+0x64>)
 800de0e:	881b      	ldrh	r3, [r3, #0]
 800de10:	88fa      	ldrh	r2, [r7, #6]
 800de12:	429a      	cmp	r2, r3
 800de14:	d208      	bcs.n	800de28 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800de16:	4b10      	ldr	r3, [pc, #64]	; (800de58 <tcp_get_next_optbyte+0x68>)
 800de18:	681b      	ldr	r3, [r3, #0]
 800de1a:	3314      	adds	r3, #20
 800de1c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800de1e:	88fb      	ldrh	r3, [r7, #6]
 800de20:	683a      	ldr	r2, [r7, #0]
 800de22:	4413      	add	r3, r2
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	e00b      	b.n	800de40 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800de28:	88fb      	ldrh	r3, [r7, #6]
 800de2a:	b2da      	uxtb	r2, r3
 800de2c:	4b09      	ldr	r3, [pc, #36]	; (800de54 <tcp_get_next_optbyte+0x64>)
 800de2e:	881b      	ldrh	r3, [r3, #0]
 800de30:	b2db      	uxtb	r3, r3
 800de32:	1ad3      	subs	r3, r2, r3
 800de34:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800de36:	4b06      	ldr	r3, [pc, #24]	; (800de50 <tcp_get_next_optbyte+0x60>)
 800de38:	681a      	ldr	r2, [r3, #0]
 800de3a:	797b      	ldrb	r3, [r7, #5]
 800de3c:	4413      	add	r3, r2
 800de3e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800de40:	4618      	mov	r0, r3
 800de42:	370c      	adds	r7, #12
 800de44:	46bd      	mov	sp, r7
 800de46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4a:	4770      	bx	lr
 800de4c:	200083c8 	.word	0x200083c8
 800de50:	200083c4 	.word	0x200083c4
 800de54:	200083c2 	.word	0x200083c2
 800de58:	200083bc 	.word	0x200083bc

0800de5c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b084      	sub	sp, #16
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d106      	bne.n	800de78 <tcp_parseopt+0x1c>
 800de6a:	4b31      	ldr	r3, [pc, #196]	; (800df30 <tcp_parseopt+0xd4>)
 800de6c:	f240 727d 	movw	r2, #1917	; 0x77d
 800de70:	4930      	ldr	r1, [pc, #192]	; (800df34 <tcp_parseopt+0xd8>)
 800de72:	4831      	ldr	r0, [pc, #196]	; (800df38 <tcp_parseopt+0xdc>)
 800de74:	f00a f88e 	bl	8017f94 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800de78:	4b30      	ldr	r3, [pc, #192]	; (800df3c <tcp_parseopt+0xe0>)
 800de7a:	881b      	ldrh	r3, [r3, #0]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d053      	beq.n	800df28 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800de80:	4b2f      	ldr	r3, [pc, #188]	; (800df40 <tcp_parseopt+0xe4>)
 800de82:	2200      	movs	r2, #0
 800de84:	801a      	strh	r2, [r3, #0]
 800de86:	e043      	b.n	800df10 <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 800de88:	f7ff ffb2 	bl	800ddf0 <tcp_get_next_optbyte>
 800de8c:	4603      	mov	r3, r0
 800de8e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800de90:	7bfb      	ldrb	r3, [r7, #15]
 800de92:	2b01      	cmp	r3, #1
 800de94:	d03c      	beq.n	800df10 <tcp_parseopt+0xb4>
 800de96:	2b02      	cmp	r3, #2
 800de98:	d002      	beq.n	800dea0 <tcp_parseopt+0x44>
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d03f      	beq.n	800df1e <tcp_parseopt+0xc2>
 800de9e:	e026      	b.n	800deee <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800dea0:	f7ff ffa6 	bl	800ddf0 <tcp_get_next_optbyte>
 800dea4:	4603      	mov	r3, r0
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d13b      	bne.n	800df22 <tcp_parseopt+0xc6>
 800deaa:	4b25      	ldr	r3, [pc, #148]	; (800df40 <tcp_parseopt+0xe4>)
 800deac:	881b      	ldrh	r3, [r3, #0]
 800deae:	3302      	adds	r3, #2
 800deb0:	4a22      	ldr	r2, [pc, #136]	; (800df3c <tcp_parseopt+0xe0>)
 800deb2:	8812      	ldrh	r2, [r2, #0]
 800deb4:	4293      	cmp	r3, r2
 800deb6:	dc34      	bgt.n	800df22 <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800deb8:	f7ff ff9a 	bl	800ddf0 <tcp_get_next_optbyte>
 800debc:	4603      	mov	r3, r0
 800debe:	b29b      	uxth	r3, r3
 800dec0:	021b      	lsls	r3, r3, #8
 800dec2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800dec4:	f7ff ff94 	bl	800ddf0 <tcp_get_next_optbyte>
 800dec8:	4603      	mov	r3, r0
 800deca:	b29a      	uxth	r2, r3
 800decc:	89bb      	ldrh	r3, [r7, #12]
 800dece:	4313      	orrs	r3, r2
 800ded0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800ded2:	89bb      	ldrh	r3, [r7, #12]
 800ded4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800ded8:	d804      	bhi.n	800dee4 <tcp_parseopt+0x88>
 800deda:	89bb      	ldrh	r3, [r7, #12]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d001      	beq.n	800dee4 <tcp_parseopt+0x88>
 800dee0:	89ba      	ldrh	r2, [r7, #12]
 800dee2:	e001      	b.n	800dee8 <tcp_parseopt+0x8c>
 800dee4:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800deec:	e010      	b.n	800df10 <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800deee:	f7ff ff7f 	bl	800ddf0 <tcp_get_next_optbyte>
 800def2:	4603      	mov	r3, r0
 800def4:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800def6:	7afb      	ldrb	r3, [r7, #11]
 800def8:	2b01      	cmp	r3, #1
 800defa:	d914      	bls.n	800df26 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800defc:	7afb      	ldrb	r3, [r7, #11]
 800defe:	b29a      	uxth	r2, r3
 800df00:	4b0f      	ldr	r3, [pc, #60]	; (800df40 <tcp_parseopt+0xe4>)
 800df02:	881b      	ldrh	r3, [r3, #0]
 800df04:	4413      	add	r3, r2
 800df06:	b29b      	uxth	r3, r3
 800df08:	3b02      	subs	r3, #2
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	4b0c      	ldr	r3, [pc, #48]	; (800df40 <tcp_parseopt+0xe4>)
 800df0e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800df10:	4b0b      	ldr	r3, [pc, #44]	; (800df40 <tcp_parseopt+0xe4>)
 800df12:	881a      	ldrh	r2, [r3, #0]
 800df14:	4b09      	ldr	r3, [pc, #36]	; (800df3c <tcp_parseopt+0xe0>)
 800df16:	881b      	ldrh	r3, [r3, #0]
 800df18:	429a      	cmp	r2, r3
 800df1a:	d3b5      	bcc.n	800de88 <tcp_parseopt+0x2c>
 800df1c:	e004      	b.n	800df28 <tcp_parseopt+0xcc>
          return;
 800df1e:	bf00      	nop
 800df20:	e002      	b.n	800df28 <tcp_parseopt+0xcc>
            return;
 800df22:	bf00      	nop
 800df24:	e000      	b.n	800df28 <tcp_parseopt+0xcc>
            return;
 800df26:	bf00      	nop
      }
    }
  }
}
 800df28:	3710      	adds	r7, #16
 800df2a:	46bd      	mov	sp, r7
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	bf00      	nop
 800df30:	0801ac20 	.word	0x0801ac20
 800df34:	0801b084 	.word	0x0801b084
 800df38:	0801ac6c 	.word	0x0801ac6c
 800df3c:	200083c0 	.word	0x200083c0
 800df40:	200083c8 	.word	0x200083c8

0800df44 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800df44:	b480      	push	{r7}
 800df46:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800df48:	4b05      	ldr	r3, [pc, #20]	; (800df60 <tcp_trigger_input_pcb_close+0x1c>)
 800df4a:	781b      	ldrb	r3, [r3, #0]
 800df4c:	f043 0310 	orr.w	r3, r3, #16
 800df50:	b2da      	uxtb	r2, r3
 800df52:	4b03      	ldr	r3, [pc, #12]	; (800df60 <tcp_trigger_input_pcb_close+0x1c>)
 800df54:	701a      	strb	r2, [r3, #0]
}
 800df56:	bf00      	nop
 800df58:	46bd      	mov	sp, r7
 800df5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df5e:	4770      	bx	lr
 800df60:	200083d9 	.word	0x200083d9

0800df64 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	60f8      	str	r0, [r7, #12]
 800df6c:	60b9      	str	r1, [r7, #8]
 800df6e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00a      	beq.n	800df8c <tcp_route+0x28>
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	7a1b      	ldrb	r3, [r3, #8]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d006      	beq.n	800df8c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	7a1b      	ldrb	r3, [r3, #8]
 800df82:	4618      	mov	r0, r3
 800df84:	f7fb f8a0 	bl	80090c8 <netif_get_by_index>
 800df88:	4603      	mov	r3, r0
 800df8a:	e003      	b.n	800df94 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f005 fcc9 	bl	8013924 <ip4_route>
 800df92:	4603      	mov	r3, r0
  }
}
 800df94:	4618      	mov	r0, r3
 800df96:	3710      	adds	r7, #16
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800df9c:	b590      	push	{r4, r7, lr}
 800df9e:	b087      	sub	sp, #28
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d105      	bne.n	800dfbe <tcp_create_segment+0x22>
 800dfb2:	4b44      	ldr	r3, [pc, #272]	; (800e0c4 <tcp_create_segment+0x128>)
 800dfb4:	22a3      	movs	r2, #163	; 0xa3
 800dfb6:	4944      	ldr	r1, [pc, #272]	; (800e0c8 <tcp_create_segment+0x12c>)
 800dfb8:	4844      	ldr	r0, [pc, #272]	; (800e0cc <tcp_create_segment+0x130>)
 800dfba:	f009 ffeb 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800dfbe:	68bb      	ldr	r3, [r7, #8]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d105      	bne.n	800dfd0 <tcp_create_segment+0x34>
 800dfc4:	4b3f      	ldr	r3, [pc, #252]	; (800e0c4 <tcp_create_segment+0x128>)
 800dfc6:	22a4      	movs	r2, #164	; 0xa4
 800dfc8:	4941      	ldr	r1, [pc, #260]	; (800e0d0 <tcp_create_segment+0x134>)
 800dfca:	4840      	ldr	r0, [pc, #256]	; (800e0cc <tcp_create_segment+0x130>)
 800dfcc:	f009 ffe2 	bl	8017f94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800dfd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	b2db      	uxtb	r3, r3
 800dfd8:	f003 0304 	and.w	r3, r3, #4
 800dfdc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800dfde:	2003      	movs	r0, #3
 800dfe0:	f7fa fcfe 	bl	80089e0 <memp_malloc>
 800dfe4:	6138      	str	r0, [r7, #16]
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	d104      	bne.n	800dff6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800dfec:	68b8      	ldr	r0, [r7, #8]
 800dfee:	f7fb fbf5 	bl	80097dc <pbuf_free>
    return NULL;
 800dff2:	2300      	movs	r3, #0
 800dff4:	e061      	b.n	800e0ba <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800dff6:	693b      	ldr	r3, [r7, #16]
 800dff8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800dffc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	2200      	movs	r2, #0
 800e002:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	68ba      	ldr	r2, [r7, #8]
 800e008:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800e00a:	68bb      	ldr	r3, [r7, #8]
 800e00c:	891a      	ldrh	r2, [r3, #8]
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	b29b      	uxth	r3, r3
 800e012:	429a      	cmp	r2, r3
 800e014:	d205      	bcs.n	800e022 <tcp_create_segment+0x86>
 800e016:	4b2b      	ldr	r3, [pc, #172]	; (800e0c4 <tcp_create_segment+0x128>)
 800e018:	22b0      	movs	r2, #176	; 0xb0
 800e01a:	492e      	ldr	r1, [pc, #184]	; (800e0d4 <tcp_create_segment+0x138>)
 800e01c:	482b      	ldr	r0, [pc, #172]	; (800e0cc <tcp_create_segment+0x130>)
 800e01e:	f009 ffb9 	bl	8017f94 <iprintf>
  seg->len = p->tot_len - optlen;
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	891a      	ldrh	r2, [r3, #8]
 800e026:	7dfb      	ldrb	r3, [r7, #23]
 800e028:	b29b      	uxth	r3, r3
 800e02a:	1ad3      	subs	r3, r2, r3
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	693b      	ldr	r3, [r7, #16]
 800e030:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800e032:	2114      	movs	r1, #20
 800e034:	68b8      	ldr	r0, [r7, #8]
 800e036:	f7fb fb3b 	bl	80096b0 <pbuf_add_header>
 800e03a:	4603      	mov	r3, r0
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d004      	beq.n	800e04a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800e040:	6938      	ldr	r0, [r7, #16]
 800e042:	f7fd f807 	bl	800b054 <tcp_seg_free>
    return NULL;
 800e046:	2300      	movs	r3, #0
 800e048:	e037      	b.n	800e0ba <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800e04a:	693b      	ldr	r3, [r7, #16]
 800e04c:	685b      	ldr	r3, [r3, #4]
 800e04e:	685a      	ldr	r2, [r3, #4]
 800e050:	693b      	ldr	r3, [r7, #16]
 800e052:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	8ada      	ldrh	r2, [r3, #22]
 800e058:	693b      	ldr	r3, [r7, #16]
 800e05a:	68dc      	ldr	r4, [r3, #12]
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7fa f809 	bl	8008074 <lwip_htons>
 800e062:	4603      	mov	r3, r0
 800e064:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	8b1a      	ldrh	r2, [r3, #24]
 800e06a:	693b      	ldr	r3, [r7, #16]
 800e06c:	68dc      	ldr	r4, [r3, #12]
 800e06e:	4610      	mov	r0, r2
 800e070:	f7fa f800 	bl	8008074 <lwip_htons>
 800e074:	4603      	mov	r3, r0
 800e076:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	68dc      	ldr	r4, [r3, #12]
 800e07c:	6838      	ldr	r0, [r7, #0]
 800e07e:	f7fa f80e 	bl	800809e <lwip_htonl>
 800e082:	4603      	mov	r3, r0
 800e084:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800e086:	7dfb      	ldrb	r3, [r7, #23]
 800e088:	089b      	lsrs	r3, r3, #2
 800e08a:	b2db      	uxtb	r3, r3
 800e08c:	b29b      	uxth	r3, r3
 800e08e:	3305      	adds	r3, #5
 800e090:	b29b      	uxth	r3, r3
 800e092:	031b      	lsls	r3, r3, #12
 800e094:	b29a      	uxth	r2, r3
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	b29b      	uxth	r3, r3
 800e09a:	4313      	orrs	r3, r2
 800e09c:	b29a      	uxth	r2, r3
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	68dc      	ldr	r4, [r3, #12]
 800e0a2:	4610      	mov	r0, r2
 800e0a4:	f7f9 ffe6 	bl	8008074 <lwip_htons>
 800e0a8:	4603      	mov	r3, r0
 800e0aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800e0ac:	693b      	ldr	r3, [r7, #16]
 800e0ae:	68db      	ldr	r3, [r3, #12]
 800e0b0:	2200      	movs	r2, #0
 800e0b2:	749a      	strb	r2, [r3, #18]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	74da      	strb	r2, [r3, #19]
  return seg;
 800e0b8:	693b      	ldr	r3, [r7, #16]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	371c      	adds	r7, #28
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd90      	pop	{r4, r7, pc}
 800e0c2:	bf00      	nop
 800e0c4:	0801b0a0 	.word	0x0801b0a0
 800e0c8:	0801b0d4 	.word	0x0801b0d4
 800e0cc:	0801b0f4 	.word	0x0801b0f4
 800e0d0:	0801b11c 	.word	0x0801b11c
 800e0d4:	0801b140 	.word	0x0801b140

0800e0d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	607b      	str	r3, [r7, #4]
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	73fb      	strb	r3, [r7, #15]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	81bb      	strh	r3, [r7, #12]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800e0ec:	89bb      	ldrh	r3, [r7, #12]
 800e0ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d105      	bne.n	800e102 <tcp_pbuf_prealloc+0x2a>
 800e0f6:	4b30      	ldr	r3, [pc, #192]	; (800e1b8 <tcp_pbuf_prealloc+0xe0>)
 800e0f8:	22e8      	movs	r2, #232	; 0xe8
 800e0fa:	4930      	ldr	r1, [pc, #192]	; (800e1bc <tcp_pbuf_prealloc+0xe4>)
 800e0fc:	4830      	ldr	r0, [pc, #192]	; (800e1c0 <tcp_pbuf_prealloc+0xe8>)
 800e0fe:	f009 ff49 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800e102:	6a3b      	ldr	r3, [r7, #32]
 800e104:	2b00      	cmp	r3, #0
 800e106:	d105      	bne.n	800e114 <tcp_pbuf_prealloc+0x3c>
 800e108:	4b2b      	ldr	r3, [pc, #172]	; (800e1b8 <tcp_pbuf_prealloc+0xe0>)
 800e10a:	22e9      	movs	r2, #233	; 0xe9
 800e10c:	492d      	ldr	r1, [pc, #180]	; (800e1c4 <tcp_pbuf_prealloc+0xec>)
 800e10e:	482c      	ldr	r0, [pc, #176]	; (800e1c0 <tcp_pbuf_prealloc+0xe8>)
 800e110:	f009 ff40 	bl	8017f94 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800e114:	89ba      	ldrh	r2, [r7, #12]
 800e116:	897b      	ldrh	r3, [r7, #10]
 800e118:	429a      	cmp	r2, r3
 800e11a:	d221      	bcs.n	800e160 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e11c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e120:	f003 0302 	and.w	r3, r3, #2
 800e124:	2b00      	cmp	r3, #0
 800e126:	d111      	bne.n	800e14c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800e128:	6a3b      	ldr	r3, [r7, #32]
 800e12a:	8b5b      	ldrh	r3, [r3, #26]
 800e12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800e130:	2b00      	cmp	r3, #0
 800e132:	d115      	bne.n	800e160 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800e134:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d007      	beq.n	800e14c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800e13c:	6a3b      	ldr	r3, [r7, #32]
 800e13e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800e140:	2b00      	cmp	r3, #0
 800e142:	d103      	bne.n	800e14c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d009      	beq.n	800e160 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800e14c:	89bb      	ldrh	r3, [r7, #12]
 800e14e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800e152:	f023 0203 	bic.w	r2, r3, #3
 800e156:	897b      	ldrh	r3, [r7, #10]
 800e158:	4293      	cmp	r3, r2
 800e15a:	bf28      	it	cs
 800e15c:	4613      	movcs	r3, r2
 800e15e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800e160:	8af9      	ldrh	r1, [r7, #22]
 800e162:	7bfb      	ldrb	r3, [r7, #15]
 800e164:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fb f857 	bl	800921c <pbuf_alloc>
 800e16e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d101      	bne.n	800e17a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800e176:	2300      	movs	r3, #0
 800e178:	e019      	b.n	800e1ae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800e17a:	693b      	ldr	r3, [r7, #16]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d006      	beq.n	800e190 <tcp_pbuf_prealloc+0xb8>
 800e182:	4b0d      	ldr	r3, [pc, #52]	; (800e1b8 <tcp_pbuf_prealloc+0xe0>)
 800e184:	f240 120b 	movw	r2, #267	; 0x10b
 800e188:	490f      	ldr	r1, [pc, #60]	; (800e1c8 <tcp_pbuf_prealloc+0xf0>)
 800e18a:	480d      	ldr	r0, [pc, #52]	; (800e1c0 <tcp_pbuf_prealloc+0xe8>)
 800e18c:	f009 ff02 	bl	8017f94 <iprintf>
  *oversize = p->len - length;
 800e190:	693b      	ldr	r3, [r7, #16]
 800e192:	895a      	ldrh	r2, [r3, #10]
 800e194:	89bb      	ldrh	r3, [r7, #12]
 800e196:	1ad3      	subs	r3, r2, r3
 800e198:	b29a      	uxth	r2, r3
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800e19e:	693b      	ldr	r3, [r7, #16]
 800e1a0:	89ba      	ldrh	r2, [r7, #12]
 800e1a2:	811a      	strh	r2, [r3, #8]
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	891a      	ldrh	r2, [r3, #8]
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	815a      	strh	r2, [r3, #10]
  return p;
 800e1ac:	693b      	ldr	r3, [r7, #16]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3718      	adds	r7, #24
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	0801b0a0 	.word	0x0801b0a0
 800e1bc:	0801b158 	.word	0x0801b158
 800e1c0:	0801b0f4 	.word	0x0801b0f4
 800e1c4:	0801b17c 	.word	0x0801b17c
 800e1c8:	0801b19c 	.word	0x0801b19c

0800e1cc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800e1cc:	b580      	push	{r7, lr}
 800e1ce:	b082      	sub	sp, #8
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	6078      	str	r0, [r7, #4]
 800e1d4:	460b      	mov	r3, r1
 800e1d6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d106      	bne.n	800e1ec <tcp_write_checks+0x20>
 800e1de:	4b33      	ldr	r3, [pc, #204]	; (800e2ac <tcp_write_checks+0xe0>)
 800e1e0:	f240 1233 	movw	r2, #307	; 0x133
 800e1e4:	4932      	ldr	r1, [pc, #200]	; (800e2b0 <tcp_write_checks+0xe4>)
 800e1e6:	4833      	ldr	r0, [pc, #204]	; (800e2b4 <tcp_write_checks+0xe8>)
 800e1e8:	f009 fed4 	bl	8017f94 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	7d1b      	ldrb	r3, [r3, #20]
 800e1f0:	2b04      	cmp	r3, #4
 800e1f2:	d00e      	beq.n	800e212 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800e1f8:	2b07      	cmp	r3, #7
 800e1fa:	d00a      	beq.n	800e212 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800e200:	2b02      	cmp	r3, #2
 800e202:	d006      	beq.n	800e212 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800e208:	2b03      	cmp	r3, #3
 800e20a:	d002      	beq.n	800e212 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800e20c:	f06f 030a 	mvn.w	r3, #10
 800e210:	e048      	b.n	800e2a4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800e212:	887b      	ldrh	r3, [r7, #2]
 800e214:	2b00      	cmp	r3, #0
 800e216:	d101      	bne.n	800e21c <tcp_write_checks+0x50>
    return ERR_OK;
 800e218:	2300      	movs	r3, #0
 800e21a:	e043      	b.n	800e2a4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e222:	887a      	ldrh	r2, [r7, #2]
 800e224:	429a      	cmp	r2, r3
 800e226:	d909      	bls.n	800e23c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	8b5b      	ldrh	r3, [r3, #26]
 800e22c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e230:	b29a      	uxth	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e236:	f04f 33ff 	mov.w	r3, #4294967295
 800e23a:	e033      	b.n	800e2a4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e242:	2b08      	cmp	r3, #8
 800e244:	d909      	bls.n	800e25a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	8b5b      	ldrh	r3, [r3, #26]
 800e24a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e24e:	b29a      	uxth	r2, r3
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800e254:	f04f 33ff 	mov.w	r3, #4294967295
 800e258:	e024      	b.n	800e2a4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e260:	2b00      	cmp	r3, #0
 800e262:	d00f      	beq.n	800e284 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d11a      	bne.n	800e2a2 <tcp_write_checks+0xd6>
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e270:	2b00      	cmp	r3, #0
 800e272:	d116      	bne.n	800e2a2 <tcp_write_checks+0xd6>
 800e274:	4b0d      	ldr	r3, [pc, #52]	; (800e2ac <tcp_write_checks+0xe0>)
 800e276:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800e27a:	490f      	ldr	r1, [pc, #60]	; (800e2b8 <tcp_write_checks+0xec>)
 800e27c:	480d      	ldr	r0, [pc, #52]	; (800e2b4 <tcp_write_checks+0xe8>)
 800e27e:	f009 fe89 	bl	8017f94 <iprintf>
 800e282:	e00e      	b.n	800e2a2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d103      	bne.n	800e294 <tcp_write_checks+0xc8>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d006      	beq.n	800e2a2 <tcp_write_checks+0xd6>
 800e294:	4b05      	ldr	r3, [pc, #20]	; (800e2ac <tcp_write_checks+0xe0>)
 800e296:	f240 1259 	movw	r2, #345	; 0x159
 800e29a:	4908      	ldr	r1, [pc, #32]	; (800e2bc <tcp_write_checks+0xf0>)
 800e29c:	4805      	ldr	r0, [pc, #20]	; (800e2b4 <tcp_write_checks+0xe8>)
 800e29e:	f009 fe79 	bl	8017f94 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800e2a2:	2300      	movs	r3, #0
}
 800e2a4:	4618      	mov	r0, r3
 800e2a6:	3708      	adds	r7, #8
 800e2a8:	46bd      	mov	sp, r7
 800e2aa:	bd80      	pop	{r7, pc}
 800e2ac:	0801b0a0 	.word	0x0801b0a0
 800e2b0:	0801b1b0 	.word	0x0801b1b0
 800e2b4:	0801b0f4 	.word	0x0801b0f4
 800e2b8:	0801b1d0 	.word	0x0801b1d0
 800e2bc:	0801b20c 	.word	0x0801b20c

0800e2c0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800e2c0:	b590      	push	{r4, r7, lr}
 800e2c2:	b09b      	sub	sp, #108	; 0x6c
 800e2c4:	af04      	add	r7, sp, #16
 800e2c6:	60f8      	str	r0, [r7, #12]
 800e2c8:	60b9      	str	r1, [r7, #8]
 800e2ca:	4611      	mov	r1, r2
 800e2cc:	461a      	mov	r2, r3
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	80fb      	strh	r3, [r7, #6]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800e2d6:	2300      	movs	r3, #0
 800e2d8:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800e2da:	2300      	movs	r3, #0
 800e2dc:	653b      	str	r3, [r7, #80]	; 0x50
 800e2de:	2300      	movs	r3, #0
 800e2e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	64bb      	str	r3, [r7, #72]	; 0x48
 800e2e6:	2300      	movs	r3, #0
 800e2e8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800e2fe:	2300      	movs	r3, #0
 800e300:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d109      	bne.n	800e31c <tcp_write+0x5c>
 800e308:	4ba5      	ldr	r3, [pc, #660]	; (800e5a0 <tcp_write+0x2e0>)
 800e30a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800e30e:	49a5      	ldr	r1, [pc, #660]	; (800e5a4 <tcp_write+0x2e4>)
 800e310:	48a5      	ldr	r0, [pc, #660]	; (800e5a8 <tcp_write+0x2e8>)
 800e312:	f009 fe3f 	bl	8017f94 <iprintf>
 800e316:	f06f 030f 	mvn.w	r3, #15
 800e31a:	e32c      	b.n	800e976 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800e322:	085b      	lsrs	r3, r3, #1
 800e324:	b29a      	uxth	r2, r3
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e32a:	4293      	cmp	r3, r2
 800e32c:	bf28      	it	cs
 800e32e:	4613      	movcs	r3, r2
 800e330:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800e332:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e334:	2b00      	cmp	r3, #0
 800e336:	d102      	bne.n	800e33e <tcp_write+0x7e>
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e33c:	e000      	b.n	800e340 <tcp_write+0x80>
 800e33e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e340:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800e342:	68bb      	ldr	r3, [r7, #8]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d109      	bne.n	800e35c <tcp_write+0x9c>
 800e348:	4b95      	ldr	r3, [pc, #596]	; (800e5a0 <tcp_write+0x2e0>)
 800e34a:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800e34e:	4997      	ldr	r1, [pc, #604]	; (800e5ac <tcp_write+0x2ec>)
 800e350:	4895      	ldr	r0, [pc, #596]	; (800e5a8 <tcp_write+0x2e8>)
 800e352:	f009 fe1f 	bl	8017f94 <iprintf>
 800e356:	f06f 030f 	mvn.w	r3, #15
 800e35a:	e30c      	b.n	800e976 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800e35c:	88fb      	ldrh	r3, [r7, #6]
 800e35e:	4619      	mov	r1, r3
 800e360:	68f8      	ldr	r0, [r7, #12]
 800e362:	f7ff ff33 	bl	800e1cc <tcp_write_checks>
 800e366:	4603      	mov	r3, r0
 800e368:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800e36c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e370:	2b00      	cmp	r3, #0
 800e372:	d002      	beq.n	800e37a <tcp_write+0xba>
    return err;
 800e374:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e378:	e2fd      	b.n	800e976 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e380:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800e384:	2300      	movs	r3, #0
 800e386:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e38e:	2b00      	cmp	r3, #0
 800e390:	f000 80f7 	beq.w	800e582 <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e398:	653b      	str	r3, [r7, #80]	; 0x50
 800e39a:	e002      	b.n	800e3a2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800e39c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800e3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d1f8      	bne.n	800e39c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800e3aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3ac:	7a9b      	ldrb	r3, [r3, #10]
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	b29b      	uxth	r3, r3
 800e3b2:	f003 0304 	and.w	r3, r3, #4
 800e3b6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800e3b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3bc:	891b      	ldrh	r3, [r3, #8]
 800e3be:	4619      	mov	r1, r3
 800e3c0:	8c3b      	ldrh	r3, [r7, #32]
 800e3c2:	440b      	add	r3, r1
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	da06      	bge.n	800e3d6 <tcp_write+0x116>
 800e3c8:	4b75      	ldr	r3, [pc, #468]	; (800e5a0 <tcp_write+0x2e0>)
 800e3ca:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e3ce:	4978      	ldr	r1, [pc, #480]	; (800e5b0 <tcp_write+0x2f0>)
 800e3d0:	4875      	ldr	r0, [pc, #468]	; (800e5a8 <tcp_write+0x2e8>)
 800e3d2:	f009 fddf 	bl	8017f94 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800e3d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e3d8:	891a      	ldrh	r2, [r3, #8]
 800e3da:	8c3b      	ldrh	r3, [r7, #32]
 800e3dc:	4413      	add	r3, r2
 800e3de:	b29b      	uxth	r3, r3
 800e3e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e3e2:	1ad3      	subs	r3, r2, r3
 800e3e4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e3ec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800e3ee:	8a7b      	ldrh	r3, [r7, #18]
 800e3f0:	2b00      	cmp	r3, #0
 800e3f2:	d027      	beq.n	800e444 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800e3f4:	8a7b      	ldrh	r3, [r7, #18]
 800e3f6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e3f8:	429a      	cmp	r2, r3
 800e3fa:	d206      	bcs.n	800e40a <tcp_write+0x14a>
 800e3fc:	4b68      	ldr	r3, [pc, #416]	; (800e5a0 <tcp_write+0x2e0>)
 800e3fe:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800e402:	496c      	ldr	r1, [pc, #432]	; (800e5b4 <tcp_write+0x2f4>)
 800e404:	4868      	ldr	r0, [pc, #416]	; (800e5a8 <tcp_write+0x2e8>)
 800e406:	f009 fdc5 	bl	8017f94 <iprintf>
      seg = last_unsent;
 800e40a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e40c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800e40e:	8a7b      	ldrh	r3, [r7, #18]
 800e410:	88fa      	ldrh	r2, [r7, #6]
 800e412:	429a      	cmp	r2, r3
 800e414:	d901      	bls.n	800e41a <tcp_write+0x15a>
 800e416:	8a7b      	ldrh	r3, [r7, #18]
 800e418:	e000      	b.n	800e41c <tcp_write+0x15c>
 800e41a:	88fb      	ldrh	r3, [r7, #6]
 800e41c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e41e:	4293      	cmp	r3, r2
 800e420:	bfa8      	it	ge
 800e422:	4613      	movge	r3, r2
 800e424:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800e426:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e42a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e42c:	4413      	add	r3, r2
 800e42e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800e432:	8a7a      	ldrh	r2, [r7, #18]
 800e434:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e436:	1ad3      	subs	r3, r2, r3
 800e438:	b29b      	uxth	r3, r3
 800e43a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800e43c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e43e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e440:	1ad3      	subs	r3, r2, r3
 800e442:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800e444:	8a7b      	ldrh	r3, [r7, #18]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d00b      	beq.n	800e462 <tcp_write+0x1a2>
 800e44a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e44e:	88fb      	ldrh	r3, [r7, #6]
 800e450:	429a      	cmp	r2, r3
 800e452:	d006      	beq.n	800e462 <tcp_write+0x1a2>
 800e454:	4b52      	ldr	r3, [pc, #328]	; (800e5a0 <tcp_write+0x2e0>)
 800e456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e45a:	4957      	ldr	r1, [pc, #348]	; (800e5b8 <tcp_write+0x2f8>)
 800e45c:	4852      	ldr	r0, [pc, #328]	; (800e5a8 <tcp_write+0x2e8>)
 800e45e:	f009 fd99 	bl	8017f94 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800e462:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e466:	88fb      	ldrh	r3, [r7, #6]
 800e468:	429a      	cmp	r2, r3
 800e46a:	f080 8168 	bcs.w	800e73e <tcp_write+0x47e>
 800e46e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e470:	2b00      	cmp	r3, #0
 800e472:	f000 8164 	beq.w	800e73e <tcp_write+0x47e>
 800e476:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e478:	891b      	ldrh	r3, [r3, #8]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	f000 815f 	beq.w	800e73e <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800e480:	88fa      	ldrh	r2, [r7, #6]
 800e482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e486:	1ad2      	subs	r2, r2, r3
 800e488:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e48a:	4293      	cmp	r3, r2
 800e48c:	bfa8      	it	ge
 800e48e:	4613      	movge	r3, r2
 800e490:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800e492:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e494:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e496:	797b      	ldrb	r3, [r7, #5]
 800e498:	f003 0301 	and.w	r3, r3, #1
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d027      	beq.n	800e4f0 <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800e4a0:	f107 0012 	add.w	r0, r7, #18
 800e4a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e4a6:	8bf9      	ldrh	r1, [r7, #30]
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	9302      	str	r3, [sp, #8]
 800e4ac:	797b      	ldrb	r3, [r7, #5]
 800e4ae:	9301      	str	r3, [sp, #4]
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	9300      	str	r3, [sp, #0]
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	2000      	movs	r0, #0
 800e4b8:	f7ff fe0e 	bl	800e0d8 <tcp_pbuf_prealloc>
 800e4bc:	6578      	str	r0, [r7, #84]	; 0x54
 800e4be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 8226 	beq.w	800e912 <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800e4c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e4c8:	6858      	ldr	r0, [r3, #4]
 800e4ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e4ce:	68ba      	ldr	r2, [r7, #8]
 800e4d0:	4413      	add	r3, r2
 800e4d2:	8bfa      	ldrh	r2, [r7, #30]
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	f009 fd4a 	bl	8017f6e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800e4da:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e4dc:	f7fb fa0c 	bl	80098f8 <pbuf_clen>
 800e4e0:	4603      	mov	r3, r0
 800e4e2:	461a      	mov	r2, r3
 800e4e4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e4e8:	4413      	add	r3, r2
 800e4ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800e4ee:	e041      	b.n	800e574 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800e4f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e4f2:	685b      	ldr	r3, [r3, #4]
 800e4f4:	637b      	str	r3, [r7, #52]	; 0x34
 800e4f6:	e002      	b.n	800e4fe <tcp_write+0x23e>
 800e4f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	637b      	str	r3, [r7, #52]	; 0x34
 800e4fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d1f8      	bne.n	800e4f8 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e506:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e508:	7b1b      	ldrb	r3, [r3, #12]
 800e50a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d115      	bne.n	800e53e <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800e512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e514:	685b      	ldr	r3, [r3, #4]
 800e516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e518:	8952      	ldrh	r2, [r2, #10]
 800e51a:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	429a      	cmp	r2, r3
 800e520:	d10d      	bne.n	800e53e <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800e522:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e526:	2b00      	cmp	r3, #0
 800e528:	d006      	beq.n	800e538 <tcp_write+0x278>
 800e52a:	4b1d      	ldr	r3, [pc, #116]	; (800e5a0 <tcp_write+0x2e0>)
 800e52c:	f240 2231 	movw	r2, #561	; 0x231
 800e530:	4922      	ldr	r1, [pc, #136]	; (800e5bc <tcp_write+0x2fc>)
 800e532:	481d      	ldr	r0, [pc, #116]	; (800e5a8 <tcp_write+0x2e8>)
 800e534:	f009 fd2e 	bl	8017f94 <iprintf>
          extendlen = seglen;
 800e538:	8bfb      	ldrh	r3, [r7, #30]
 800e53a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800e53c:	e01a      	b.n	800e574 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800e53e:	8bfb      	ldrh	r3, [r7, #30]
 800e540:	2201      	movs	r2, #1
 800e542:	4619      	mov	r1, r3
 800e544:	2000      	movs	r0, #0
 800e546:	f7fa fe69 	bl	800921c <pbuf_alloc>
 800e54a:	6578      	str	r0, [r7, #84]	; 0x54
 800e54c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e54e:	2b00      	cmp	r3, #0
 800e550:	f000 81e1 	beq.w	800e916 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800e554:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	441a      	add	r2, r3
 800e55c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e55e:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800e560:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e562:	f7fb f9c9 	bl	80098f8 <pbuf_clen>
 800e566:	4603      	mov	r3, r0
 800e568:	461a      	mov	r2, r3
 800e56a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e56e:	4413      	add	r3, r2
 800e570:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800e574:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e578:	8bfb      	ldrh	r3, [r7, #30]
 800e57a:	4413      	add	r3, r2
 800e57c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800e580:	e0dd      	b.n	800e73e <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e588:	2b00      	cmp	r3, #0
 800e58a:	f000 80d8 	beq.w	800e73e <tcp_write+0x47e>
 800e58e:	4b04      	ldr	r3, [pc, #16]	; (800e5a0 <tcp_write+0x2e0>)
 800e590:	f240 224b 	movw	r2, #587	; 0x24b
 800e594:	490a      	ldr	r1, [pc, #40]	; (800e5c0 <tcp_write+0x300>)
 800e596:	4804      	ldr	r0, [pc, #16]	; (800e5a8 <tcp_write+0x2e8>)
 800e598:	f009 fcfc 	bl	8017f94 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800e59c:	e0cf      	b.n	800e73e <tcp_write+0x47e>
 800e59e:	bf00      	nop
 800e5a0:	0801b0a0 	.word	0x0801b0a0
 800e5a4:	0801b240 	.word	0x0801b240
 800e5a8:	0801b0f4 	.word	0x0801b0f4
 800e5ac:	0801b258 	.word	0x0801b258
 800e5b0:	0801b28c 	.word	0x0801b28c
 800e5b4:	0801b2a4 	.word	0x0801b2a4
 800e5b8:	0801b2c4 	.word	0x0801b2c4
 800e5bc:	0801b2e4 	.word	0x0801b2e4
 800e5c0:	0801b310 	.word	0x0801b310
    struct pbuf *p;
    u16_t left = len - pos;
 800e5c4:	88fa      	ldrh	r2, [r7, #6]
 800e5c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e5ca:	1ad3      	subs	r3, r2, r3
 800e5cc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800e5ce:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e5d6:	1ad3      	subs	r3, r2, r3
 800e5d8:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800e5da:	8b7a      	ldrh	r2, [r7, #26]
 800e5dc:	8bbb      	ldrh	r3, [r7, #28]
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	bf28      	it	cs
 800e5e2:	4613      	movcs	r3, r2
 800e5e4:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800e5e6:	797b      	ldrb	r3, [r7, #5]
 800e5e8:	f003 0301 	and.w	r3, r3, #1
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d036      	beq.n	800e65e <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800e5f0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e5f4:	b29a      	uxth	r2, r3
 800e5f6:	8b3b      	ldrh	r3, [r7, #24]
 800e5f8:	4413      	add	r3, r2
 800e5fa:	b299      	uxth	r1, r3
 800e5fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	bf0c      	ite	eq
 800e602:	2301      	moveq	r3, #1
 800e604:	2300      	movne	r3, #0
 800e606:	b2db      	uxtb	r3, r3
 800e608:	f107 0012 	add.w	r0, r7, #18
 800e60c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e60e:	9302      	str	r3, [sp, #8]
 800e610:	797b      	ldrb	r3, [r7, #5]
 800e612:	9301      	str	r3, [sp, #4]
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	9300      	str	r3, [sp, #0]
 800e618:	4603      	mov	r3, r0
 800e61a:	2036      	movs	r0, #54	; 0x36
 800e61c:	f7ff fd5c 	bl	800e0d8 <tcp_pbuf_prealloc>
 800e620:	6338      	str	r0, [r7, #48]	; 0x30
 800e622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e624:	2b00      	cmp	r3, #0
 800e626:	f000 8178 	beq.w	800e91a <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800e62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e62c:	895b      	ldrh	r3, [r3, #10]
 800e62e:	8b3a      	ldrh	r2, [r7, #24]
 800e630:	429a      	cmp	r2, r3
 800e632:	d906      	bls.n	800e642 <tcp_write+0x382>
 800e634:	4b8c      	ldr	r3, [pc, #560]	; (800e868 <tcp_write+0x5a8>)
 800e636:	f240 2267 	movw	r2, #615	; 0x267
 800e63a:	498c      	ldr	r1, [pc, #560]	; (800e86c <tcp_write+0x5ac>)
 800e63c:	488c      	ldr	r0, [pc, #560]	; (800e870 <tcp_write+0x5b0>)
 800e63e:	f009 fca9 	bl	8017f94 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800e642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e644:	685a      	ldr	r2, [r3, #4]
 800e646:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e64a:	18d0      	adds	r0, r2, r3
 800e64c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	4413      	add	r3, r2
 800e654:	8b3a      	ldrh	r2, [r7, #24]
 800e656:	4619      	mov	r1, r3
 800e658:	f009 fc89 	bl	8017f6e <memcpy>
 800e65c:	e02f      	b.n	800e6be <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800e65e:	8a7b      	ldrh	r3, [r7, #18]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d006      	beq.n	800e672 <tcp_write+0x3b2>
 800e664:	4b80      	ldr	r3, [pc, #512]	; (800e868 <tcp_write+0x5a8>)
 800e666:	f240 2271 	movw	r2, #625	; 0x271
 800e66a:	4982      	ldr	r1, [pc, #520]	; (800e874 <tcp_write+0x5b4>)
 800e66c:	4880      	ldr	r0, [pc, #512]	; (800e870 <tcp_write+0x5b0>)
 800e66e:	f009 fc91 	bl	8017f94 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800e672:	8b3b      	ldrh	r3, [r7, #24]
 800e674:	2201      	movs	r2, #1
 800e676:	4619      	mov	r1, r3
 800e678:	2036      	movs	r0, #54	; 0x36
 800e67a:	f7fa fdcf 	bl	800921c <pbuf_alloc>
 800e67e:	6178      	str	r0, [r7, #20]
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 814b 	beq.w	800e91e <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800e688:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e68c:	68ba      	ldr	r2, [r7, #8]
 800e68e:	441a      	add	r2, r3
 800e690:	697b      	ldr	r3, [r7, #20]
 800e692:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800e694:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800e698:	b29b      	uxth	r3, r3
 800e69a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e69e:	4619      	mov	r1, r3
 800e6a0:	2036      	movs	r0, #54	; 0x36
 800e6a2:	f7fa fdbb 	bl	800921c <pbuf_alloc>
 800e6a6:	6338      	str	r0, [r7, #48]	; 0x30
 800e6a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d103      	bne.n	800e6b6 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800e6ae:	6978      	ldr	r0, [r7, #20]
 800e6b0:	f7fb f894 	bl	80097dc <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800e6b4:	e136      	b.n	800e924 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800e6b6:	6979      	ldr	r1, [r7, #20]
 800e6b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6ba:	f7fb f95d 	bl	8009978 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800e6be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6c0:	f7fb f91a 	bl	80098f8 <pbuf_clen>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6cc:	4413      	add	r3, r2
 800e6ce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800e6d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800e6d6:	2b09      	cmp	r3, #9
 800e6d8:	d903      	bls.n	800e6e2 <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800e6da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e6dc:	f7fb f87e 	bl	80097dc <pbuf_free>
      goto memerr;
 800e6e0:	e120      	b.n	800e924 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e6e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800e6ea:	441a      	add	r2, r3
 800e6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6f0:	9300      	str	r3, [sp, #0]
 800e6f2:	4613      	mov	r3, r2
 800e6f4:	2200      	movs	r2, #0
 800e6f6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	f7ff fc4f 	bl	800df9c <tcp_create_segment>
 800e6fe:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e700:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e702:	2b00      	cmp	r3, #0
 800e704:	f000 810d 	beq.w	800e922 <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800e708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d102      	bne.n	800e714 <tcp_write+0x454>
      queue = seg;
 800e70e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e710:	647b      	str	r3, [r7, #68]	; 0x44
 800e712:	e00c      	b.n	800e72e <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800e714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e716:	2b00      	cmp	r3, #0
 800e718:	d106      	bne.n	800e728 <tcp_write+0x468>
 800e71a:	4b53      	ldr	r3, [pc, #332]	; (800e868 <tcp_write+0x5a8>)
 800e71c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800e720:	4955      	ldr	r1, [pc, #340]	; (800e878 <tcp_write+0x5b8>)
 800e722:	4853      	ldr	r0, [pc, #332]	; (800e870 <tcp_write+0x5b0>)
 800e724:	f009 fc36 	bl	8017f94 <iprintf>
      prev_seg->next = seg;
 800e728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e72a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800e72c:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800e72e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e730:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800e732:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e736:	8b3b      	ldrh	r3, [r7, #24]
 800e738:	4413      	add	r3, r2
 800e73a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800e73e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800e742:	88fb      	ldrh	r3, [r7, #6]
 800e744:	429a      	cmp	r2, r3
 800e746:	f4ff af3d 	bcc.w	800e5c4 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800e74a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e74c:	2b00      	cmp	r3, #0
 800e74e:	d02c      	beq.n	800e7aa <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800e750:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e756:	e01e      	b.n	800e796 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800e758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e75a:	891a      	ldrh	r2, [r3, #8]
 800e75c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e75e:	4413      	add	r3, r2
 800e760:	b29a      	uxth	r2, r3
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800e766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e768:	681b      	ldr	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d110      	bne.n	800e790 <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	685b      	ldr	r3, [r3, #4]
 800e772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e774:	8952      	ldrh	r2, [r2, #10]
 800e776:	4413      	add	r3, r2
 800e778:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800e77a:	68b9      	ldr	r1, [r7, #8]
 800e77c:	4618      	mov	r0, r3
 800e77e:	f009 fbf6 	bl	8017f6e <memcpy>
        p->len += oversize_used;
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	895a      	ldrh	r2, [r3, #10]
 800e786:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e788:	4413      	add	r3, r2
 800e78a:	b29a      	uxth	r2, r3
 800e78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78e:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800e790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1dd      	bne.n	800e758 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800e79c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e79e:	891a      	ldrh	r2, [r3, #8]
 800e7a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800e7a2:	4413      	add	r3, r2
 800e7a4:	b29a      	uxth	r2, r3
 800e7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7a8:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800e7aa:	8a7a      	ldrh	r2, [r7, #18]
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800e7b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d018      	beq.n	800e7ea <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800e7b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d106      	bne.n	800e7cc <tcp_write+0x50c>
 800e7be:	4b2a      	ldr	r3, [pc, #168]	; (800e868 <tcp_write+0x5a8>)
 800e7c0:	f240 22e1 	movw	r2, #737	; 0x2e1
 800e7c4:	492d      	ldr	r1, [pc, #180]	; (800e87c <tcp_write+0x5bc>)
 800e7c6:	482a      	ldr	r0, [pc, #168]	; (800e870 <tcp_write+0x5b0>)
 800e7c8:	f009 fbe4 	bl	8017f94 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800e7cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	f7fb f8d0 	bl	8009978 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800e7d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7da:	891a      	ldrh	r2, [r3, #8]
 800e7dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e7de:	891b      	ldrh	r3, [r3, #8]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7e6:	811a      	strh	r2, [r3, #8]
 800e7e8:	e037      	b.n	800e85a <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800e7ea:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d034      	beq.n	800e85a <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800e7f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d003      	beq.n	800e7fe <tcp_write+0x53e>
 800e7f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e7f8:	685b      	ldr	r3, [r3, #4]
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d106      	bne.n	800e80c <tcp_write+0x54c>
 800e7fe:	4b1a      	ldr	r3, [pc, #104]	; (800e868 <tcp_write+0x5a8>)
 800e800:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e804:	491e      	ldr	r1, [pc, #120]	; (800e880 <tcp_write+0x5c0>)
 800e806:	481a      	ldr	r0, [pc, #104]	; (800e870 <tcp_write+0x5b0>)
 800e808:	f009 fbc4 	bl	8017f94 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e80c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e80e:	685b      	ldr	r3, [r3, #4]
 800e810:	62bb      	str	r3, [r7, #40]	; 0x28
 800e812:	e009      	b.n	800e828 <tcp_write+0x568>
      p->tot_len += extendlen;
 800e814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e816:	891a      	ldrh	r2, [r3, #8]
 800e818:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e81a:	4413      	add	r3, r2
 800e81c:	b29a      	uxth	r2, r3
 800e81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e820:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800e822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	62bb      	str	r3, [r7, #40]	; 0x28
 800e828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d1f1      	bne.n	800e814 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800e830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e832:	891a      	ldrh	r2, [r3, #8]
 800e834:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e836:	4413      	add	r3, r2
 800e838:	b29a      	uxth	r2, r3
 800e83a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e83c:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800e83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e840:	895a      	ldrh	r2, [r3, #10]
 800e842:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e844:	4413      	add	r3, r2
 800e846:	b29a      	uxth	r2, r3
 800e848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e84a:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800e84c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e84e:	891a      	ldrh	r2, [r3, #8]
 800e850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800e852:	4413      	add	r3, r2
 800e854:	b29a      	uxth	r2, r3
 800e856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e858:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800e85a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d111      	bne.n	800e884 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e864:	66da      	str	r2, [r3, #108]	; 0x6c
 800e866:	e010      	b.n	800e88a <tcp_write+0x5ca>
 800e868:	0801b0a0 	.word	0x0801b0a0
 800e86c:	0801b340 	.word	0x0801b340
 800e870:	0801b0f4 	.word	0x0801b0f4
 800e874:	0801b380 	.word	0x0801b380
 800e878:	0801b390 	.word	0x0801b390
 800e87c:	0801b3a4 	.word	0x0801b3a4
 800e880:	0801b3dc 	.word	0x0801b3dc
  } else {
    last_unsent->next = queue;
 800e884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e886:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e888:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e88e:	88fb      	ldrh	r3, [r7, #6]
 800e890:	441a      	add	r2, r3
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e89c:	88fb      	ldrh	r3, [r7, #6]
 800e89e:	1ad3      	subs	r3, r2, r3
 800e8a0:	b29a      	uxth	r2, r3
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800e8ae:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00e      	beq.n	800e8da <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d10a      	bne.n	800e8da <tcp_write+0x61a>
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d106      	bne.n	800e8da <tcp_write+0x61a>
 800e8cc:	4b2c      	ldr	r3, [pc, #176]	; (800e980 <tcp_write+0x6c0>)
 800e8ce:	f240 3213 	movw	r2, #787	; 0x313
 800e8d2:	492c      	ldr	r1, [pc, #176]	; (800e984 <tcp_write+0x6c4>)
 800e8d4:	482c      	ldr	r0, [pc, #176]	; (800e988 <tcp_write+0x6c8>)
 800e8d6:	f009 fb5d 	bl	8017f94 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800e8da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d016      	beq.n	800e90e <tcp_write+0x64e>
 800e8e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8e2:	68db      	ldr	r3, [r3, #12]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d012      	beq.n	800e90e <tcp_write+0x64e>
 800e8e8:	797b      	ldrb	r3, [r7, #5]
 800e8ea:	f003 0302 	and.w	r3, r3, #2
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d10d      	bne.n	800e90e <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800e8f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e8f4:	68db      	ldr	r3, [r3, #12]
 800e8f6:	899b      	ldrh	r3, [r3, #12]
 800e8f8:	b29c      	uxth	r4, r3
 800e8fa:	2008      	movs	r0, #8
 800e8fc:	f7f9 fbba 	bl	8008074 <lwip_htons>
 800e900:	4603      	mov	r3, r0
 800e902:	461a      	mov	r2, r3
 800e904:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e906:	68db      	ldr	r3, [r3, #12]
 800e908:	4322      	orrs	r2, r4
 800e90a:	b292      	uxth	r2, r2
 800e90c:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800e90e:	2300      	movs	r3, #0
 800e910:	e031      	b.n	800e976 <tcp_write+0x6b6>
          goto memerr;
 800e912:	bf00      	nop
 800e914:	e006      	b.n	800e924 <tcp_write+0x664>
            goto memerr;
 800e916:	bf00      	nop
 800e918:	e004      	b.n	800e924 <tcp_write+0x664>
        goto memerr;
 800e91a:	bf00      	nop
 800e91c:	e002      	b.n	800e924 <tcp_write+0x664>
        goto memerr;
 800e91e:	bf00      	nop
 800e920:	e000      	b.n	800e924 <tcp_write+0x664>
      goto memerr;
 800e922:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	8b5b      	ldrh	r3, [r3, #26]
 800e928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e92c:	b29a      	uxth	r2, r3
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800e932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e934:	2b00      	cmp	r3, #0
 800e936:	d002      	beq.n	800e93e <tcp_write+0x67e>
    pbuf_free(concat_p);
 800e938:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800e93a:	f7fa ff4f 	bl	80097dc <pbuf_free>
  }
  if (queue != NULL) {
 800e93e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e940:	2b00      	cmp	r3, #0
 800e942:	d002      	beq.n	800e94a <tcp_write+0x68a>
    tcp_segs_free(queue);
 800e944:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800e946:	f7fc fb71 	bl	800b02c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e950:	2b00      	cmp	r3, #0
 800e952:	d00e      	beq.n	800e972 <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d10a      	bne.n	800e972 <tcp_write+0x6b2>
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d106      	bne.n	800e972 <tcp_write+0x6b2>
 800e964:	4b06      	ldr	r3, [pc, #24]	; (800e980 <tcp_write+0x6c0>)
 800e966:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e96a:	4906      	ldr	r1, [pc, #24]	; (800e984 <tcp_write+0x6c4>)
 800e96c:	4806      	ldr	r0, [pc, #24]	; (800e988 <tcp_write+0x6c8>)
 800e96e:	f009 fb11 	bl	8017f94 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800e972:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e976:	4618      	mov	r0, r3
 800e978:	375c      	adds	r7, #92	; 0x5c
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd90      	pop	{r4, r7, pc}
 800e97e:	bf00      	nop
 800e980:	0801b0a0 	.word	0x0801b0a0
 800e984:	0801b414 	.word	0x0801b414
 800e988:	0801b0f4 	.word	0x0801b0f4

0800e98c <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800e98c:	b590      	push	{r4, r7, lr}
 800e98e:	b08b      	sub	sp, #44	; 0x2c
 800e990:	af02      	add	r7, sp, #8
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	460b      	mov	r3, r1
 800e996:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800e998:	2300      	movs	r3, #0
 800e99a:	61fb      	str	r3, [r7, #28]
 800e99c:	2300      	movs	r3, #0
 800e99e:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d106      	bne.n	800e9b8 <tcp_split_unsent_seg+0x2c>
 800e9aa:	4b95      	ldr	r3, [pc, #596]	; (800ec00 <tcp_split_unsent_seg+0x274>)
 800e9ac:	f240 324b 	movw	r2, #843	; 0x34b
 800e9b0:	4994      	ldr	r1, [pc, #592]	; (800ec04 <tcp_split_unsent_seg+0x278>)
 800e9b2:	4895      	ldr	r0, [pc, #596]	; (800ec08 <tcp_split_unsent_seg+0x27c>)
 800e9b4:	f009 faee 	bl	8017f94 <iprintf>

  useg = pcb->unsent;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e9bc:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d102      	bne.n	800e9ca <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800e9c4:	f04f 33ff 	mov.w	r3, #4294967295
 800e9c8:	e116      	b.n	800ebf8 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800e9ca:	887b      	ldrh	r3, [r7, #2]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d109      	bne.n	800e9e4 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800e9d0:	4b8b      	ldr	r3, [pc, #556]	; (800ec00 <tcp_split_unsent_seg+0x274>)
 800e9d2:	f240 3253 	movw	r2, #851	; 0x353
 800e9d6:	498d      	ldr	r1, [pc, #564]	; (800ec0c <tcp_split_unsent_seg+0x280>)
 800e9d8:	488b      	ldr	r0, [pc, #556]	; (800ec08 <tcp_split_unsent_seg+0x27c>)
 800e9da:	f009 fadb 	bl	8017f94 <iprintf>
    return ERR_VAL;
 800e9de:	f06f 0305 	mvn.w	r3, #5
 800e9e2:	e109      	b.n	800ebf8 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	891b      	ldrh	r3, [r3, #8]
 800e9e8:	887a      	ldrh	r2, [r7, #2]
 800e9ea:	429a      	cmp	r2, r3
 800e9ec:	d301      	bcc.n	800e9f2 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	e102      	b.n	800ebf8 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e9f6:	887a      	ldrh	r2, [r7, #2]
 800e9f8:	429a      	cmp	r2, r3
 800e9fa:	d906      	bls.n	800ea0a <tcp_split_unsent_seg+0x7e>
 800e9fc:	4b80      	ldr	r3, [pc, #512]	; (800ec00 <tcp_split_unsent_seg+0x274>)
 800e9fe:	f240 325b 	movw	r2, #859	; 0x35b
 800ea02:	4983      	ldr	r1, [pc, #524]	; (800ec10 <tcp_split_unsent_seg+0x284>)
 800ea04:	4880      	ldr	r0, [pc, #512]	; (800ec08 <tcp_split_unsent_seg+0x27c>)
 800ea06:	f009 fac5 	bl	8017f94 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ea0a:	697b      	ldr	r3, [r7, #20]
 800ea0c:	891b      	ldrh	r3, [r3, #8]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d106      	bne.n	800ea20 <tcp_split_unsent_seg+0x94>
 800ea12:	4b7b      	ldr	r3, [pc, #492]	; (800ec00 <tcp_split_unsent_seg+0x274>)
 800ea14:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ea18:	497e      	ldr	r1, [pc, #504]	; (800ec14 <tcp_split_unsent_seg+0x288>)
 800ea1a:	487b      	ldr	r0, [pc, #492]	; (800ec08 <tcp_split_unsent_seg+0x27c>)
 800ea1c:	f009 faba 	bl	8017f94 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ea20:	697b      	ldr	r3, [r7, #20]
 800ea22:	7a9b      	ldrb	r3, [r3, #10]
 800ea24:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ea26:	7bfb      	ldrb	r3, [r7, #15]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	b2db      	uxtb	r3, r3
 800ea2c:	f003 0304 	and.w	r3, r3, #4
 800ea30:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	891a      	ldrh	r2, [r3, #8]
 800ea36:	887b      	ldrh	r3, [r7, #2]
 800ea38:	1ad3      	subs	r3, r2, r3
 800ea3a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800ea3c:	7bbb      	ldrb	r3, [r7, #14]
 800ea3e:	b29a      	uxth	r2, r3
 800ea40:	89bb      	ldrh	r3, [r7, #12]
 800ea42:	4413      	add	r3, r2
 800ea44:	b29b      	uxth	r3, r3
 800ea46:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ea4a:	4619      	mov	r1, r3
 800ea4c:	2036      	movs	r0, #54	; 0x36
 800ea4e:	f7fa fbe5 	bl	800921c <pbuf_alloc>
 800ea52:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800ea54:	693b      	ldr	r3, [r7, #16]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	f000 80b7 	beq.w	800ebca <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800ea5c:	697b      	ldr	r3, [r7, #20]
 800ea5e:	685b      	ldr	r3, [r3, #4]
 800ea60:	891a      	ldrh	r2, [r3, #8]
 800ea62:	697b      	ldr	r3, [r7, #20]
 800ea64:	891b      	ldrh	r3, [r3, #8]
 800ea66:	1ad3      	subs	r3, r2, r3
 800ea68:	b29a      	uxth	r2, r3
 800ea6a:	887b      	ldrh	r3, [r7, #2]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	6858      	ldr	r0, [r3, #4]
 800ea74:	693b      	ldr	r3, [r7, #16]
 800ea76:	685a      	ldr	r2, [r3, #4]
 800ea78:	7bbb      	ldrb	r3, [r7, #14]
 800ea7a:	18d1      	adds	r1, r2, r3
 800ea7c:	897b      	ldrh	r3, [r7, #10]
 800ea7e:	89ba      	ldrh	r2, [r7, #12]
 800ea80:	f7fb f8b2 	bl	8009be8 <pbuf_copy_partial>
 800ea84:	4603      	mov	r3, r0
 800ea86:	461a      	mov	r2, r3
 800ea88:	89bb      	ldrh	r3, [r7, #12]
 800ea8a:	4293      	cmp	r3, r2
 800ea8c:	f040 809f 	bne.w	800ebce <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800ea90:	697b      	ldr	r3, [r7, #20]
 800ea92:	68db      	ldr	r3, [r3, #12]
 800ea94:	899b      	ldrh	r3, [r3, #12]
 800ea96:	b29b      	uxth	r3, r3
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7f9 faeb 	bl	8008074 <lwip_htons>
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	b2db      	uxtb	r3, r3
 800eaa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaa6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800eaac:	7efb      	ldrb	r3, [r7, #27]
 800eaae:	f003 0308 	and.w	r3, r3, #8
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d007      	beq.n	800eac6 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800eab6:	7efb      	ldrb	r3, [r7, #27]
 800eab8:	f023 0308 	bic.w	r3, r3, #8
 800eabc:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800eabe:	7ebb      	ldrb	r3, [r7, #26]
 800eac0:	f043 0308 	orr.w	r3, r3, #8
 800eac4:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800eac6:	7efb      	ldrb	r3, [r7, #27]
 800eac8:	f003 0301 	and.w	r3, r3, #1
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d007      	beq.n	800eae0 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800ead0:	7efb      	ldrb	r3, [r7, #27]
 800ead2:	f023 0301 	bic.w	r3, r3, #1
 800ead6:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800ead8:	7ebb      	ldrb	r3, [r7, #26]
 800eada:	f043 0301 	orr.w	r3, r3, #1
 800eade:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	68db      	ldr	r3, [r3, #12]
 800eae4:	685b      	ldr	r3, [r3, #4]
 800eae6:	4618      	mov	r0, r3
 800eae8:	f7f9 fad9 	bl	800809e <lwip_htonl>
 800eaec:	4602      	mov	r2, r0
 800eaee:	887b      	ldrh	r3, [r7, #2]
 800eaf0:	18d1      	adds	r1, r2, r3
 800eaf2:	7eba      	ldrb	r2, [r7, #26]
 800eaf4:	7bfb      	ldrb	r3, [r7, #15]
 800eaf6:	9300      	str	r3, [sp, #0]
 800eaf8:	460b      	mov	r3, r1
 800eafa:	6939      	ldr	r1, [r7, #16]
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7ff fa4d 	bl	800df9c <tcp_create_segment>
 800eb02:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800eb04:	69fb      	ldr	r3, [r7, #28]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d063      	beq.n	800ebd2 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	685b      	ldr	r3, [r3, #4]
 800eb0e:	4618      	mov	r0, r3
 800eb10:	f7fa fef2 	bl	80098f8 <pbuf_clen>
 800eb14:	4603      	mov	r3, r0
 800eb16:	461a      	mov	r2, r3
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb1e:	1a9b      	subs	r3, r3, r2
 800eb20:	b29a      	uxth	r2, r3
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800eb28:	697b      	ldr	r3, [r7, #20]
 800eb2a:	6858      	ldr	r0, [r3, #4]
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	685b      	ldr	r3, [r3, #4]
 800eb30:	891a      	ldrh	r2, [r3, #8]
 800eb32:	89bb      	ldrh	r3, [r7, #12]
 800eb34:	1ad3      	subs	r3, r2, r3
 800eb36:	b29b      	uxth	r3, r3
 800eb38:	4619      	mov	r1, r3
 800eb3a:	f7fa fcc9 	bl	80094d0 <pbuf_realloc>
  useg->len -= remainder;
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	891a      	ldrh	r2, [r3, #8]
 800eb42:	89bb      	ldrh	r3, [r7, #12]
 800eb44:	1ad3      	subs	r3, r2, r3
 800eb46:	b29a      	uxth	r2, r3
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	68db      	ldr	r3, [r3, #12]
 800eb50:	899b      	ldrh	r3, [r3, #12]
 800eb52:	b29c      	uxth	r4, r3
 800eb54:	7efb      	ldrb	r3, [r7, #27]
 800eb56:	b29b      	uxth	r3, r3
 800eb58:	4618      	mov	r0, r3
 800eb5a:	f7f9 fa8b 	bl	8008074 <lwip_htons>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	461a      	mov	r2, r3
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	68db      	ldr	r3, [r3, #12]
 800eb66:	4322      	orrs	r2, r4
 800eb68:	b292      	uxth	r2, r2
 800eb6a:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	685b      	ldr	r3, [r3, #4]
 800eb70:	4618      	mov	r0, r3
 800eb72:	f7fa fec1 	bl	80098f8 <pbuf_clen>
 800eb76:	4603      	mov	r3, r0
 800eb78:	461a      	mov	r2, r3
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb80:	4413      	add	r3, r2
 800eb82:	b29a      	uxth	r2, r3
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	685b      	ldr	r3, [r3, #4]
 800eb8e:	4618      	mov	r0, r3
 800eb90:	f7fa feb2 	bl	80098f8 <pbuf_clen>
 800eb94:	4603      	mov	r3, r0
 800eb96:	461a      	mov	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb9e:	4413      	add	r3, r2
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800eba8:	697b      	ldr	r3, [r7, #20]
 800ebaa:	681a      	ldr	r2, [r3, #0]
 800ebac:	69fb      	ldr	r3, [r7, #28]
 800ebae:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800ebb0:	697b      	ldr	r3, [r7, #20]
 800ebb2:	69fa      	ldr	r2, [r7, #28]
 800ebb4:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d103      	bne.n	800ebc6 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800ebc6:	2300      	movs	r3, #0
 800ebc8:	e016      	b.n	800ebf8 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800ebca:	bf00      	nop
 800ebcc:	e002      	b.n	800ebd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ebce:	bf00      	nop
 800ebd0:	e000      	b.n	800ebd4 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800ebd2:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800ebd4:	69fb      	ldr	r3, [r7, #28]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d006      	beq.n	800ebe8 <tcp_split_unsent_seg+0x25c>
 800ebda:	4b09      	ldr	r3, [pc, #36]	; (800ec00 <tcp_split_unsent_seg+0x274>)
 800ebdc:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800ebe0:	490d      	ldr	r1, [pc, #52]	; (800ec18 <tcp_split_unsent_seg+0x28c>)
 800ebe2:	4809      	ldr	r0, [pc, #36]	; (800ec08 <tcp_split_unsent_seg+0x27c>)
 800ebe4:	f009 f9d6 	bl	8017f94 <iprintf>
  if (p != NULL) {
 800ebe8:	693b      	ldr	r3, [r7, #16]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d002      	beq.n	800ebf4 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800ebee:	6938      	ldr	r0, [r7, #16]
 800ebf0:	f7fa fdf4 	bl	80097dc <pbuf_free>
  }

  return ERR_MEM;
 800ebf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	3724      	adds	r7, #36	; 0x24
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	bd90      	pop	{r4, r7, pc}
 800ec00:	0801b0a0 	.word	0x0801b0a0
 800ec04:	0801b434 	.word	0x0801b434
 800ec08:	0801b0f4 	.word	0x0801b0f4
 800ec0c:	0801b458 	.word	0x0801b458
 800ec10:	0801b47c 	.word	0x0801b47c
 800ec14:	0801b48c 	.word	0x0801b48c
 800ec18:	0801b49c 	.word	0x0801b49c

0800ec1c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800ec1c:	b590      	push	{r4, r7, lr}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d106      	bne.n	800ec38 <tcp_send_fin+0x1c>
 800ec2a:	4b21      	ldr	r3, [pc, #132]	; (800ecb0 <tcp_send_fin+0x94>)
 800ec2c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800ec30:	4920      	ldr	r1, [pc, #128]	; (800ecb4 <tcp_send_fin+0x98>)
 800ec32:	4821      	ldr	r0, [pc, #132]	; (800ecb8 <tcp_send_fin+0x9c>)
 800ec34:	f009 f9ae 	bl	8017f94 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d02e      	beq.n	800ec9e <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec44:	60fb      	str	r3, [r7, #12]
 800ec46:	e002      	b.n	800ec4e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d1f8      	bne.n	800ec48 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	68db      	ldr	r3, [r3, #12]
 800ec5a:	899b      	ldrh	r3, [r3, #12]
 800ec5c:	b29b      	uxth	r3, r3
 800ec5e:	4618      	mov	r0, r3
 800ec60:	f7f9 fa08 	bl	8008074 <lwip_htons>
 800ec64:	4603      	mov	r3, r0
 800ec66:	b2db      	uxtb	r3, r3
 800ec68:	f003 0307 	and.w	r3, r3, #7
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d116      	bne.n	800ec9e <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	68db      	ldr	r3, [r3, #12]
 800ec74:	899b      	ldrh	r3, [r3, #12]
 800ec76:	b29c      	uxth	r4, r3
 800ec78:	2001      	movs	r0, #1
 800ec7a:	f7f9 f9fb 	bl	8008074 <lwip_htons>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	461a      	mov	r2, r3
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	68db      	ldr	r3, [r3, #12]
 800ec86:	4322      	orrs	r2, r4
 800ec88:	b292      	uxth	r2, r2
 800ec8a:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	8b5b      	ldrh	r3, [r3, #26]
 800ec90:	f043 0320 	orr.w	r3, r3, #32
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e004      	b.n	800eca8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800ec9e:	2101      	movs	r1, #1
 800eca0:	6878      	ldr	r0, [r7, #4]
 800eca2:	f000 f80b 	bl	800ecbc <tcp_enqueue_flags>
 800eca6:	4603      	mov	r3, r0
}
 800eca8:	4618      	mov	r0, r3
 800ecaa:	3714      	adds	r7, #20
 800ecac:	46bd      	mov	sp, r7
 800ecae:	bd90      	pop	{r4, r7, pc}
 800ecb0:	0801b0a0 	.word	0x0801b0a0
 800ecb4:	0801b4a8 	.word	0x0801b4a8
 800ecb8:	0801b0f4 	.word	0x0801b0f4

0800ecbc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	; 0x28
 800ecc0:	af02      	add	r7, sp, #8
 800ecc2:	6078      	str	r0, [r7, #4]
 800ecc4:	460b      	mov	r3, r1
 800ecc6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800eccc:	2300      	movs	r3, #0
 800ecce:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800ecd0:	78fb      	ldrb	r3, [r7, #3]
 800ecd2:	f003 0303 	and.w	r3, r3, #3
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d106      	bne.n	800ece8 <tcp_enqueue_flags+0x2c>
 800ecda:	4b67      	ldr	r3, [pc, #412]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800ecdc:	f240 4212 	movw	r2, #1042	; 0x412
 800ece0:	4966      	ldr	r1, [pc, #408]	; (800ee7c <tcp_enqueue_flags+0x1c0>)
 800ece2:	4867      	ldr	r0, [pc, #412]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800ece4:	f009 f956 	bl	8017f94 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d106      	bne.n	800ecfc <tcp_enqueue_flags+0x40>
 800ecee:	4b62      	ldr	r3, [pc, #392]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800ecf0:	f240 4213 	movw	r2, #1043	; 0x413
 800ecf4:	4963      	ldr	r1, [pc, #396]	; (800ee84 <tcp_enqueue_flags+0x1c8>)
 800ecf6:	4862      	ldr	r0, [pc, #392]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800ecf8:	f009 f94c 	bl	8017f94 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800ecfc:	78fb      	ldrb	r3, [r7, #3]
 800ecfe:	f003 0302 	and.w	r3, r3, #2
 800ed02:	2b00      	cmp	r3, #0
 800ed04:	d001      	beq.n	800ed0a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800ed06:	2301      	movs	r3, #1
 800ed08:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800ed0a:	7ffb      	ldrb	r3, [r7, #31]
 800ed0c:	009b      	lsls	r3, r3, #2
 800ed0e:	b2db      	uxtb	r3, r3
 800ed10:	f003 0304 	and.w	r3, r3, #4
 800ed14:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800ed16:	7dfb      	ldrb	r3, [r7, #23]
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ed1e:	4619      	mov	r1, r3
 800ed20:	2036      	movs	r0, #54	; 0x36
 800ed22:	f7fa fa7b 	bl	800921c <pbuf_alloc>
 800ed26:	6138      	str	r0, [r7, #16]
 800ed28:	693b      	ldr	r3, [r7, #16]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d109      	bne.n	800ed42 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	8b5b      	ldrh	r3, [r3, #26]
 800ed32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed36:	b29a      	uxth	r2, r3
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed3c:	f04f 33ff 	mov.w	r3, #4294967295
 800ed40:	e095      	b.n	800ee6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ed42:	693b      	ldr	r3, [r7, #16]
 800ed44:	895a      	ldrh	r2, [r3, #10]
 800ed46:	7dfb      	ldrb	r3, [r7, #23]
 800ed48:	b29b      	uxth	r3, r3
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d206      	bcs.n	800ed5c <tcp_enqueue_flags+0xa0>
 800ed4e:	4b4a      	ldr	r3, [pc, #296]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800ed50:	f240 423a 	movw	r2, #1082	; 0x43a
 800ed54:	494c      	ldr	r1, [pc, #304]	; (800ee88 <tcp_enqueue_flags+0x1cc>)
 800ed56:	484a      	ldr	r0, [pc, #296]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800ed58:	f009 f91c 	bl	8017f94 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ed60:	78fa      	ldrb	r2, [r7, #3]
 800ed62:	7ffb      	ldrb	r3, [r7, #31]
 800ed64:	9300      	str	r3, [sp, #0]
 800ed66:	460b      	mov	r3, r1
 800ed68:	6939      	ldr	r1, [r7, #16]
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f7ff f916 	bl	800df9c <tcp_create_segment>
 800ed70:	60f8      	str	r0, [r7, #12]
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d109      	bne.n	800ed8c <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	8b5b      	ldrh	r3, [r3, #26]
 800ed7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed80:	b29a      	uxth	r2, r3
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ed86:	f04f 33ff 	mov.w	r3, #4294967295
 800ed8a:	e070      	b.n	800ee6e <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	68db      	ldr	r3, [r3, #12]
 800ed90:	f003 0303 	and.w	r3, r3, #3
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d006      	beq.n	800eda6 <tcp_enqueue_flags+0xea>
 800ed98:	4b37      	ldr	r3, [pc, #220]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800ed9a:	f240 4242 	movw	r2, #1090	; 0x442
 800ed9e:	493b      	ldr	r1, [pc, #236]	; (800ee8c <tcp_enqueue_flags+0x1d0>)
 800eda0:	4837      	ldr	r0, [pc, #220]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800eda2:	f009 f8f7 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	891b      	ldrh	r3, [r3, #8]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d006      	beq.n	800edbc <tcp_enqueue_flags+0x100>
 800edae:	4b32      	ldr	r3, [pc, #200]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800edb0:	f240 4243 	movw	r2, #1091	; 0x443
 800edb4:	4936      	ldr	r1, [pc, #216]	; (800ee90 <tcp_enqueue_flags+0x1d4>)
 800edb6:	4832      	ldr	r0, [pc, #200]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800edb8:	f009 f8ec 	bl	8017f94 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d103      	bne.n	800edcc <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	68fa      	ldr	r2, [r7, #12]
 800edc8:	66da      	str	r2, [r3, #108]	; 0x6c
 800edca:	e00d      	b.n	800ede8 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edd0:	61bb      	str	r3, [r7, #24]
 800edd2:	e002      	b.n	800edda <tcp_enqueue_flags+0x11e>
 800edd4:	69bb      	ldr	r3, [r7, #24]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	61bb      	str	r3, [r7, #24]
 800edda:	69bb      	ldr	r3, [r7, #24]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	2b00      	cmp	r3, #0
 800ede0:	d1f8      	bne.n	800edd4 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800ede2:	69bb      	ldr	r3, [r7, #24]
 800ede4:	68fa      	ldr	r2, [r7, #12]
 800ede6:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2200      	movs	r2, #0
 800edec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800edf0:	78fb      	ldrb	r3, [r7, #3]
 800edf2:	f003 0302 	and.w	r3, r3, #2
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d104      	bne.n	800ee04 <tcp_enqueue_flags+0x148>
 800edfa:	78fb      	ldrb	r3, [r7, #3]
 800edfc:	f003 0301 	and.w	r3, r3, #1
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d004      	beq.n	800ee0e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee08:	1c5a      	adds	r2, r3, #1
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800ee0e:	78fb      	ldrb	r3, [r7, #3]
 800ee10:	f003 0301 	and.w	r3, r3, #1
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d006      	beq.n	800ee26 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	8b5b      	ldrh	r3, [r3, #26]
 800ee1c:	f043 0320 	orr.w	r3, r3, #32
 800ee20:	b29a      	uxth	r2, r3
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	685b      	ldr	r3, [r3, #4]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fa fd64 	bl	80098f8 <pbuf_clen>
 800ee30:	4603      	mov	r3, r0
 800ee32:	461a      	mov	r2, r3
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee3a:	4413      	add	r3, r2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00e      	beq.n	800ee6c <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d10a      	bne.n	800ee6c <tcp_enqueue_flags+0x1b0>
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d106      	bne.n	800ee6c <tcp_enqueue_flags+0x1b0>
 800ee5e:	4b06      	ldr	r3, [pc, #24]	; (800ee78 <tcp_enqueue_flags+0x1bc>)
 800ee60:	f240 4266 	movw	r2, #1126	; 0x466
 800ee64:	490b      	ldr	r1, [pc, #44]	; (800ee94 <tcp_enqueue_flags+0x1d8>)
 800ee66:	4806      	ldr	r0, [pc, #24]	; (800ee80 <tcp_enqueue_flags+0x1c4>)
 800ee68:	f009 f894 	bl	8017f94 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ee6c:	2300      	movs	r3, #0
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3720      	adds	r7, #32
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	0801b0a0 	.word	0x0801b0a0
 800ee7c:	0801b4c4 	.word	0x0801b4c4
 800ee80:	0801b0f4 	.word	0x0801b0f4
 800ee84:	0801b51c 	.word	0x0801b51c
 800ee88:	0801b53c 	.word	0x0801b53c
 800ee8c:	0801b578 	.word	0x0801b578
 800ee90:	0801b590 	.word	0x0801b590
 800ee94:	0801b5bc 	.word	0x0801b5bc

0800ee98 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ee98:	b5b0      	push	{r4, r5, r7, lr}
 800ee9a:	b08a      	sub	sp, #40	; 0x28
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <tcp_output+0x1c>
 800eea6:	4ba0      	ldr	r3, [pc, #640]	; (800f128 <tcp_output+0x290>)
 800eea8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800eeac:	499f      	ldr	r1, [pc, #636]	; (800f12c <tcp_output+0x294>)
 800eeae:	48a0      	ldr	r0, [pc, #640]	; (800f130 <tcp_output+0x298>)
 800eeb0:	f009 f870 	bl	8017f94 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	7d1b      	ldrb	r3, [r3, #20]
 800eeb8:	2b01      	cmp	r3, #1
 800eeba:	d106      	bne.n	800eeca <tcp_output+0x32>
 800eebc:	4b9a      	ldr	r3, [pc, #616]	; (800f128 <tcp_output+0x290>)
 800eebe:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800eec2:	499c      	ldr	r1, [pc, #624]	; (800f134 <tcp_output+0x29c>)
 800eec4:	489a      	ldr	r0, [pc, #616]	; (800f130 <tcp_output+0x298>)
 800eec6:	f009 f865 	bl	8017f94 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800eeca:	4b9b      	ldr	r3, [pc, #620]	; (800f138 <tcp_output+0x2a0>)
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	687a      	ldr	r2, [r7, #4]
 800eed0:	429a      	cmp	r2, r3
 800eed2:	d101      	bne.n	800eed8 <tcp_output+0x40>
    return ERR_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	e1d2      	b.n	800f27e <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eee4:	429a      	cmp	r2, r3
 800eee6:	d203      	bcs.n	800eef0 <tcp_output+0x58>
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800eeee:	e002      	b.n	800eef6 <tcp_output+0x5e>
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eef6:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eefc:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800eefe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d10b      	bne.n	800ef1c <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8b5b      	ldrh	r3, [r3, #26]
 800ef08:	f003 0302 	and.w	r3, r3, #2
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	f000 81a9 	beq.w	800f264 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800ef12:	6878      	ldr	r0, [r7, #4]
 800ef14:	f000 fdd6 	bl	800fac4 <tcp_send_empty_ack>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	e1b0      	b.n	800f27e <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800ef1c:	6879      	ldr	r1, [r7, #4]
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	3304      	adds	r3, #4
 800ef22:	461a      	mov	r2, r3
 800ef24:	6878      	ldr	r0, [r7, #4]
 800ef26:	f7ff f81d 	bl	800df64 <tcp_route>
 800ef2a:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d102      	bne.n	800ef38 <tcp_output+0xa0>
    return ERR_RTE;
 800ef32:	f06f 0303 	mvn.w	r3, #3
 800ef36:	e1a2      	b.n	800f27e <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d003      	beq.n	800ef46 <tcp_output+0xae>
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d111      	bne.n	800ef6a <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ef46:	697b      	ldr	r3, [r7, #20]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d002      	beq.n	800ef52 <tcp_output+0xba>
 800ef4c:	697b      	ldr	r3, [r7, #20]
 800ef4e:	3304      	adds	r3, #4
 800ef50:	e000      	b.n	800ef54 <tcp_output+0xbc>
 800ef52:	2300      	movs	r3, #0
 800ef54:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d102      	bne.n	800ef62 <tcp_output+0xca>
      return ERR_RTE;
 800ef5c:	f06f 0303 	mvn.w	r3, #3
 800ef60:	e18d      	b.n	800f27e <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ef62:	693b      	ldr	r3, [r7, #16]
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ef6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef6c:	68db      	ldr	r3, [r3, #12]
 800ef6e:	685b      	ldr	r3, [r3, #4]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f7f9 f894 	bl	800809e <lwip_htonl>
 800ef76:	4602      	mov	r2, r0
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef7c:	1ad3      	subs	r3, r2, r3
 800ef7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ef80:	8912      	ldrh	r2, [r2, #8]
 800ef82:	4413      	add	r3, r2
 800ef84:	69ba      	ldr	r2, [r7, #24]
 800ef86:	429a      	cmp	r2, r3
 800ef88:	d227      	bcs.n	800efda <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef90:	461a      	mov	r2, r3
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	4293      	cmp	r3, r2
 800ef96:	d114      	bne.n	800efc2 <tcp_output+0x12a>
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d110      	bne.n	800efc2 <tcp_output+0x12a>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d10b      	bne.n	800efc2 <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2200      	movs	r2, #0
 800efae:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	2201      	movs	r2, #1
 800efb6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2200      	movs	r2, #0
 800efbe:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	8b5b      	ldrh	r3, [r3, #26]
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	f000 814c 	beq.w	800f268 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800efd0:	6878      	ldr	r0, [r7, #4]
 800efd2:	f000 fd77 	bl	800fac4 <tcp_send_empty_ack>
 800efd6:	4603      	mov	r3, r0
 800efd8:	e151      	b.n	800f27e <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2200      	movs	r2, #0
 800efde:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efe6:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800efe8:	6a3b      	ldr	r3, [r7, #32]
 800efea:	2b00      	cmp	r3, #0
 800efec:	f000 811b 	beq.w	800f226 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800eff0:	e002      	b.n	800eff8 <tcp_output+0x160>
 800eff2:	6a3b      	ldr	r3, [r7, #32]
 800eff4:	681b      	ldr	r3, [r3, #0]
 800eff6:	623b      	str	r3, [r7, #32]
 800eff8:	6a3b      	ldr	r3, [r7, #32]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d1f8      	bne.n	800eff2 <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800f000:	e111      	b.n	800f226 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800f002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f004:	68db      	ldr	r3, [r3, #12]
 800f006:	899b      	ldrh	r3, [r3, #12]
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f9 f832 	bl	8008074 <lwip_htons>
 800f010:	4603      	mov	r3, r0
 800f012:	b2db      	uxtb	r3, r3
 800f014:	f003 0304 	and.w	r3, r3, #4
 800f018:	2b00      	cmp	r3, #0
 800f01a:	d006      	beq.n	800f02a <tcp_output+0x192>
 800f01c:	4b42      	ldr	r3, [pc, #264]	; (800f128 <tcp_output+0x290>)
 800f01e:	f240 5237 	movw	r2, #1335	; 0x537
 800f022:	4946      	ldr	r1, [pc, #280]	; (800f13c <tcp_output+0x2a4>)
 800f024:	4842      	ldr	r0, [pc, #264]	; (800f130 <tcp_output+0x298>)
 800f026:	f008 ffb5 	bl	8017f94 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d01f      	beq.n	800f072 <tcp_output+0x1da>
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	8b5b      	ldrh	r3, [r3, #26]
 800f036:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d119      	bne.n	800f072 <tcp_output+0x1da>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00b      	beq.n	800f05e <tcp_output+0x1c6>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f04a:	681b      	ldr	r3, [r3, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d110      	bne.n	800f072 <tcp_output+0x1da>
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f054:	891a      	ldrh	r2, [r3, #8]
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d209      	bcs.n	800f072 <tcp_output+0x1da>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800f064:	2b00      	cmp	r3, #0
 800f066:	d004      	beq.n	800f072 <tcp_output+0x1da>
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f06e:	2b08      	cmp	r3, #8
 800f070:	d901      	bls.n	800f076 <tcp_output+0x1de>
 800f072:	2301      	movs	r3, #1
 800f074:	e000      	b.n	800f078 <tcp_output+0x1e0>
 800f076:	2300      	movs	r3, #0
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d106      	bne.n	800f08a <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800f07c:	687b      	ldr	r3, [r7, #4]
 800f07e:	8b5b      	ldrh	r3, [r3, #26]
 800f080:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800f084:	2b00      	cmp	r3, #0
 800f086:	f000 80e3 	beq.w	800f250 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	7d1b      	ldrb	r3, [r3, #20]
 800f08e:	2b02      	cmp	r3, #2
 800f090:	d00d      	beq.n	800f0ae <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800f092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f094:	68db      	ldr	r3, [r3, #12]
 800f096:	899b      	ldrh	r3, [r3, #12]
 800f098:	b29c      	uxth	r4, r3
 800f09a:	2010      	movs	r0, #16
 800f09c:	f7f8 ffea 	bl	8008074 <lwip_htons>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	461a      	mov	r2, r3
 800f0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	4322      	orrs	r2, r4
 800f0aa:	b292      	uxth	r2, r2
 800f0ac:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800f0ae:	697a      	ldr	r2, [r7, #20]
 800f0b0:	6879      	ldr	r1, [r7, #4]
 800f0b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f0b4:	f000 f908 	bl	800f2c8 <tcp_output_segment>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800f0bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d009      	beq.n	800f0d8 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	8b5b      	ldrh	r3, [r3, #26]
 800f0c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f0cc:	b29a      	uxth	r2, r3
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	835a      	strh	r2, [r3, #26]
      return err;
 800f0d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f0d6:	e0d2      	b.n	800f27e <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800f0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	7d1b      	ldrb	r3, [r3, #20]
 800f0e4:	2b02      	cmp	r3, #2
 800f0e6:	d006      	beq.n	800f0f6 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	8b5b      	ldrh	r3, [r3, #26]
 800f0ec:	f023 0303 	bic.w	r3, r3, #3
 800f0f0:	b29a      	uxth	r2, r3
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0f8:	68db      	ldr	r3, [r3, #12]
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f7f8 ffce 	bl	800809e <lwip_htonl>
 800f102:	4604      	mov	r4, r0
 800f104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f106:	891b      	ldrh	r3, [r3, #8]
 800f108:	461d      	mov	r5, r3
 800f10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	899b      	ldrh	r3, [r3, #12]
 800f110:	b29b      	uxth	r3, r3
 800f112:	4618      	mov	r0, r3
 800f114:	f7f8 ffae 	bl	8008074 <lwip_htons>
 800f118:	4603      	mov	r3, r0
 800f11a:	b2db      	uxtb	r3, r3
 800f11c:	f003 0303 	and.w	r3, r3, #3
 800f120:	2b00      	cmp	r3, #0
 800f122:	d00d      	beq.n	800f140 <tcp_output+0x2a8>
 800f124:	2301      	movs	r3, #1
 800f126:	e00c      	b.n	800f142 <tcp_output+0x2aa>
 800f128:	0801b0a0 	.word	0x0801b0a0
 800f12c:	0801b5e4 	.word	0x0801b5e4
 800f130:	0801b0f4 	.word	0x0801b0f4
 800f134:	0801b5fc 	.word	0x0801b5fc
 800f138:	2000c4f0 	.word	0x2000c4f0
 800f13c:	0801b624 	.word	0x0801b624
 800f140:	2300      	movs	r3, #0
 800f142:	442b      	add	r3, r5
 800f144:	4423      	add	r3, r4
 800f146:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f14c:	68bb      	ldr	r3, [r7, #8]
 800f14e:	1ad3      	subs	r3, r2, r3
 800f150:	2b00      	cmp	r3, #0
 800f152:	da02      	bge.n	800f15a <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800f15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f15c:	891b      	ldrh	r3, [r3, #8]
 800f15e:	461c      	mov	r4, r3
 800f160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f162:	68db      	ldr	r3, [r3, #12]
 800f164:	899b      	ldrh	r3, [r3, #12]
 800f166:	b29b      	uxth	r3, r3
 800f168:	4618      	mov	r0, r3
 800f16a:	f7f8 ff83 	bl	8008074 <lwip_htons>
 800f16e:	4603      	mov	r3, r0
 800f170:	b2db      	uxtb	r3, r3
 800f172:	f003 0303 	and.w	r3, r3, #3
 800f176:	2b00      	cmp	r3, #0
 800f178:	d001      	beq.n	800f17e <tcp_output+0x2e6>
 800f17a:	2301      	movs	r3, #1
 800f17c:	e000      	b.n	800f180 <tcp_output+0x2e8>
 800f17e:	2300      	movs	r3, #0
 800f180:	4423      	add	r3, r4
 800f182:	2b00      	cmp	r3, #0
 800f184:	d049      	beq.n	800f21a <tcp_output+0x382>
      seg->next = NULL;
 800f186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f188:	2200      	movs	r2, #0
 800f18a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f190:	2b00      	cmp	r3, #0
 800f192:	d105      	bne.n	800f1a0 <tcp_output+0x308>
        pcb->unacked = seg;
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f198:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800f19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f19c:	623b      	str	r3, [r7, #32]
 800f19e:	e03f      	b.n	800f220 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1a2:	68db      	ldr	r3, [r3, #12]
 800f1a4:	685b      	ldr	r3, [r3, #4]
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f8 ff79 	bl	800809e <lwip_htonl>
 800f1ac:	4604      	mov	r4, r0
 800f1ae:	6a3b      	ldr	r3, [r7, #32]
 800f1b0:	68db      	ldr	r3, [r3, #12]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7f8 ff72 	bl	800809e <lwip_htonl>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	1ae3      	subs	r3, r4, r3
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	da24      	bge.n	800f20c <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	3370      	adds	r3, #112	; 0x70
 800f1c6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1c8:	e002      	b.n	800f1d0 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800f1ca:	69fb      	ldr	r3, [r7, #28]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800f1d0:	69fb      	ldr	r3, [r7, #28]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d011      	beq.n	800f1fc <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f1d8:	69fb      	ldr	r3, [r7, #28]
 800f1da:	681b      	ldr	r3, [r3, #0]
 800f1dc:	68db      	ldr	r3, [r3, #12]
 800f1de:	685b      	ldr	r3, [r3, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	f7f8 ff5c 	bl	800809e <lwip_htonl>
 800f1e6:	4604      	mov	r4, r0
 800f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1ea:	68db      	ldr	r3, [r3, #12]
 800f1ec:	685b      	ldr	r3, [r3, #4]
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7f8 ff55 	bl	800809e <lwip_htonl>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	dbe6      	blt.n	800f1ca <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800f1fc:	69fb      	ldr	r3, [r7, #28]
 800f1fe:	681a      	ldr	r2, [r3, #0]
 800f200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f202:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800f204:	69fb      	ldr	r3, [r7, #28]
 800f206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f208:	601a      	str	r2, [r3, #0]
 800f20a:	e009      	b.n	800f220 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800f20c:	6a3b      	ldr	r3, [r7, #32]
 800f20e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f210:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800f212:	6a3b      	ldr	r3, [r7, #32]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	623b      	str	r3, [r7, #32]
 800f218:	e002      	b.n	800f220 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800f21a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f21c:	f7fb ff1a 	bl	800b054 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f224:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800f226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d012      	beq.n	800f252 <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800f22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f22e:	68db      	ldr	r3, [r3, #12]
 800f230:	685b      	ldr	r3, [r3, #4]
 800f232:	4618      	mov	r0, r3
 800f234:	f7f8 ff33 	bl	800809e <lwip_htonl>
 800f238:	4602      	mov	r2, r0
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f23e:	1ad3      	subs	r3, r2, r3
 800f240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f242:	8912      	ldrh	r2, [r2, #8]
 800f244:	4413      	add	r3, r2
  while (seg != NULL &&
 800f246:	69ba      	ldr	r2, [r7, #24]
 800f248:	429a      	cmp	r2, r3
 800f24a:	f4bf aeda 	bcs.w	800f002 <tcp_output+0x16a>
 800f24e:	e000      	b.n	800f252 <tcp_output+0x3ba>
      break;
 800f250:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f256:	2b00      	cmp	r3, #0
 800f258:	d108      	bne.n	800f26c <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	2200      	movs	r2, #0
 800f25e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800f262:	e004      	b.n	800f26e <tcp_output+0x3d6>
    goto output_done;
 800f264:	bf00      	nop
 800f266:	e002      	b.n	800f26e <tcp_output+0x3d6>
    goto output_done;
 800f268:	bf00      	nop
 800f26a:	e000      	b.n	800f26e <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800f26c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	8b5b      	ldrh	r3, [r3, #26]
 800f272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f276:	b29a      	uxth	r2, r3
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800f27c:	2300      	movs	r3, #0
}
 800f27e:	4618      	mov	r0, r3
 800f280:	3728      	adds	r7, #40	; 0x28
 800f282:	46bd      	mov	sp, r7
 800f284:	bdb0      	pop	{r4, r5, r7, pc}
 800f286:	bf00      	nop

0800f288 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d106      	bne.n	800f2a4 <tcp_output_segment_busy+0x1c>
 800f296:	4b09      	ldr	r3, [pc, #36]	; (800f2bc <tcp_output_segment_busy+0x34>)
 800f298:	f240 529a 	movw	r2, #1434	; 0x59a
 800f29c:	4908      	ldr	r1, [pc, #32]	; (800f2c0 <tcp_output_segment_busy+0x38>)
 800f29e:	4809      	ldr	r0, [pc, #36]	; (800f2c4 <tcp_output_segment_busy+0x3c>)
 800f2a0:	f008 fe78 	bl	8017f94 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	7b9b      	ldrb	r3, [r3, #14]
 800f2aa:	2b01      	cmp	r3, #1
 800f2ac:	d001      	beq.n	800f2b2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e000      	b.n	800f2b4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800f2b2:	2300      	movs	r3, #0
}
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	3708      	adds	r7, #8
 800f2b8:	46bd      	mov	sp, r7
 800f2ba:	bd80      	pop	{r7, pc}
 800f2bc:	0801b0a0 	.word	0x0801b0a0
 800f2c0:	0801b63c 	.word	0x0801b63c
 800f2c4:	0801b0f4 	.word	0x0801b0f4

0800f2c8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800f2c8:	b5b0      	push	{r4, r5, r7, lr}
 800f2ca:	b08c      	sub	sp, #48	; 0x30
 800f2cc:	af04      	add	r7, sp, #16
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800f2d4:	68fb      	ldr	r3, [r7, #12]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d106      	bne.n	800f2e8 <tcp_output_segment+0x20>
 800f2da:	4b64      	ldr	r3, [pc, #400]	; (800f46c <tcp_output_segment+0x1a4>)
 800f2dc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800f2e0:	4963      	ldr	r1, [pc, #396]	; (800f470 <tcp_output_segment+0x1a8>)
 800f2e2:	4864      	ldr	r0, [pc, #400]	; (800f474 <tcp_output_segment+0x1ac>)
 800f2e4:	f008 fe56 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800f2e8:	68bb      	ldr	r3, [r7, #8]
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d106      	bne.n	800f2fc <tcp_output_segment+0x34>
 800f2ee:	4b5f      	ldr	r3, [pc, #380]	; (800f46c <tcp_output_segment+0x1a4>)
 800f2f0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800f2f4:	4960      	ldr	r1, [pc, #384]	; (800f478 <tcp_output_segment+0x1b0>)
 800f2f6:	485f      	ldr	r0, [pc, #380]	; (800f474 <tcp_output_segment+0x1ac>)
 800f2f8:	f008 fe4c 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d106      	bne.n	800f310 <tcp_output_segment+0x48>
 800f302:	4b5a      	ldr	r3, [pc, #360]	; (800f46c <tcp_output_segment+0x1a4>)
 800f304:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800f308:	495c      	ldr	r1, [pc, #368]	; (800f47c <tcp_output_segment+0x1b4>)
 800f30a:	485a      	ldr	r0, [pc, #360]	; (800f474 <tcp_output_segment+0x1ac>)
 800f30c:	f008 fe42 	bl	8017f94 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800f310:	68f8      	ldr	r0, [r7, #12]
 800f312:	f7ff ffb9 	bl	800f288 <tcp_output_segment_busy>
 800f316:	4603      	mov	r3, r0
 800f318:	2b00      	cmp	r3, #0
 800f31a:	d001      	beq.n	800f320 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800f31c:	2300      	movs	r3, #0
 800f31e:	e0a0      	b.n	800f462 <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f324:	68fb      	ldr	r3, [r7, #12]
 800f326:	68dc      	ldr	r4, [r3, #12]
 800f328:	4610      	mov	r0, r2
 800f32a:	f7f8 feb8 	bl	800809e <lwip_htonl>
 800f32e:	4603      	mov	r3, r0
 800f330:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	68dc      	ldr	r4, [r3, #12]
 800f33a:	4610      	mov	r0, r2
 800f33c:	f7f8 fe9a 	bl	8008074 <lwip_htons>
 800f340:	4603      	mov	r3, r0
 800f342:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f344:	68bb      	ldr	r3, [r7, #8]
 800f346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f348:	68ba      	ldr	r2, [r7, #8]
 800f34a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f34c:	441a      	add	r2, r3
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	68db      	ldr	r3, [r3, #12]
 800f356:	3314      	adds	r3, #20
 800f358:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	7a9b      	ldrb	r3, [r3, #10]
 800f35e:	f003 0301 	and.w	r3, r3, #1
 800f362:	2b00      	cmp	r3, #0
 800f364:	d015      	beq.n	800f392 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	3304      	adds	r3, #4
 800f36a:	461a      	mov	r2, r3
 800f36c:	6879      	ldr	r1, [r7, #4]
 800f36e:	f44f 7006 	mov.w	r0, #536	; 0x218
 800f372:	f7fc fa33 	bl	800b7dc <tcp_eff_send_mss_netif>
 800f376:	4603      	mov	r3, r0
 800f378:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800f37a:	8b7b      	ldrh	r3, [r7, #26]
 800f37c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800f380:	4618      	mov	r0, r3
 800f382:	f7f8 fe8c 	bl	800809e <lwip_htonl>
 800f386:	4602      	mov	r2, r0
 800f388:	69fb      	ldr	r3, [r7, #28]
 800f38a:	601a      	str	r2, [r3, #0]
    opts += 1;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	3304      	adds	r3, #4
 800f390:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f398:	2b00      	cmp	r3, #0
 800f39a:	da02      	bge.n	800f3a2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800f39c:	68bb      	ldr	r3, [r7, #8]
 800f39e:	2200      	movs	r2, #0
 800f3a0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800f3a2:	68bb      	ldr	r3, [r7, #8]
 800f3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d10c      	bne.n	800f3c4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800f3aa:	4b35      	ldr	r3, [pc, #212]	; (800f480 <tcp_output_segment+0x1b8>)
 800f3ac:	681a      	ldr	r2, [r3, #0]
 800f3ae:	68bb      	ldr	r3, [r7, #8]
 800f3b0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	68db      	ldr	r3, [r3, #12]
 800f3b6:	685b      	ldr	r3, [r3, #4]
 800f3b8:	4618      	mov	r0, r3
 800f3ba:	f7f8 fe70 	bl	800809e <lwip_htonl>
 800f3be:	4602      	mov	r2, r0
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	68db      	ldr	r3, [r3, #12]
 800f3c8:	461a      	mov	r2, r3
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	685b      	ldr	r3, [r3, #4]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	1ad3      	subs	r3, r2, r3
 800f3d2:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	685b      	ldr	r3, [r3, #4]
 800f3d8:	8959      	ldrh	r1, [r3, #10]
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	685b      	ldr	r3, [r3, #4]
 800f3de:	8b3a      	ldrh	r2, [r7, #24]
 800f3e0:	1a8a      	subs	r2, r1, r2
 800f3e2:	b292      	uxth	r2, r2
 800f3e4:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800f3e6:	68fb      	ldr	r3, [r7, #12]
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	8919      	ldrh	r1, [r3, #8]
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	685b      	ldr	r3, [r3, #4]
 800f3f0:	8b3a      	ldrh	r2, [r7, #24]
 800f3f2:	1a8a      	subs	r2, r1, r2
 800f3f4:	b292      	uxth	r2, r2
 800f3f6:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	685b      	ldr	r3, [r3, #4]
 800f3fc:	68fa      	ldr	r2, [r7, #12]
 800f3fe:	68d2      	ldr	r2, [r2, #12]
 800f400:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	68db      	ldr	r3, [r3, #12]
 800f406:	2200      	movs	r2, #0
 800f408:	741a      	strb	r2, [r3, #16]
 800f40a:	2200      	movs	r2, #0
 800f40c:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	f103 0214 	add.w	r2, r3, #20
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	7a9b      	ldrb	r3, [r3, #10]
 800f41a:	009b      	lsls	r3, r3, #2
 800f41c:	f003 0304 	and.w	r3, r3, #4
 800f420:	4413      	add	r3, r2
 800f422:	69fa      	ldr	r2, [r7, #28]
 800f424:	429a      	cmp	r2, r3
 800f426:	d006      	beq.n	800f436 <tcp_output_segment+0x16e>
 800f428:	4b10      	ldr	r3, [pc, #64]	; (800f46c <tcp_output_segment+0x1a4>)
 800f42a:	f240 621c 	movw	r2, #1564	; 0x61c
 800f42e:	4915      	ldr	r1, [pc, #84]	; (800f484 <tcp_output_segment+0x1bc>)
 800f430:	4810      	ldr	r0, [pc, #64]	; (800f474 <tcp_output_segment+0x1ac>)
 800f432:	f008 fdaf 	bl	8017f94 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	6858      	ldr	r0, [r3, #4]
 800f43a:	68b9      	ldr	r1, [r7, #8]
 800f43c:	68bb      	ldr	r3, [r7, #8]
 800f43e:	1d1c      	adds	r4, r3, #4
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	7add      	ldrb	r5, [r3, #11]
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	7a9b      	ldrb	r3, [r3, #10]
 800f448:	687a      	ldr	r2, [r7, #4]
 800f44a:	9202      	str	r2, [sp, #8]
 800f44c:	2206      	movs	r2, #6
 800f44e:	9201      	str	r2, [sp, #4]
 800f450:	9300      	str	r3, [sp, #0]
 800f452:	462b      	mov	r3, r5
 800f454:	4622      	mov	r2, r4
 800f456:	f004 fc3f 	bl	8013cd8 <ip4_output_if>
 800f45a:	4603      	mov	r3, r0
 800f45c:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800f45e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f462:	4618      	mov	r0, r3
 800f464:	3720      	adds	r7, #32
 800f466:	46bd      	mov	sp, r7
 800f468:	bdb0      	pop	{r4, r5, r7, pc}
 800f46a:	bf00      	nop
 800f46c:	0801b0a0 	.word	0x0801b0a0
 800f470:	0801b664 	.word	0x0801b664
 800f474:	0801b0f4 	.word	0x0801b0f4
 800f478:	0801b684 	.word	0x0801b684
 800f47c:	0801b6a4 	.word	0x0801b6a4
 800f480:	2000c4e0 	.word	0x2000c4e0
 800f484:	0801b6c8 	.word	0x0801b6c8

0800f488 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800f488:	b5b0      	push	{r4, r5, r7, lr}
 800f48a:	b084      	sub	sp, #16
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d106      	bne.n	800f4a4 <tcp_rexmit_rto_prepare+0x1c>
 800f496:	4b31      	ldr	r3, [pc, #196]	; (800f55c <tcp_rexmit_rto_prepare+0xd4>)
 800f498:	f240 6263 	movw	r2, #1635	; 0x663
 800f49c:	4930      	ldr	r1, [pc, #192]	; (800f560 <tcp_rexmit_rto_prepare+0xd8>)
 800f49e:	4831      	ldr	r0, [pc, #196]	; (800f564 <tcp_rexmit_rto_prepare+0xdc>)
 800f4a0:	f008 fd78 	bl	8017f94 <iprintf>

  if (pcb->unacked == NULL) {
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d102      	bne.n	800f4b2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800f4ac:	f06f 0305 	mvn.w	r3, #5
 800f4b0:	e050      	b.n	800f554 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	e00b      	b.n	800f4d2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800f4ba:	68f8      	ldr	r0, [r7, #12]
 800f4bc:	f7ff fee4 	bl	800f288 <tcp_output_segment_busy>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d002      	beq.n	800f4cc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800f4c6:	f06f 0305 	mvn.w	r3, #5
 800f4ca:	e043      	b.n	800f554 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	60fb      	str	r3, [r7, #12]
 800f4d2:	68fb      	ldr	r3, [r7, #12]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1ef      	bne.n	800f4ba <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800f4da:	68f8      	ldr	r0, [r7, #12]
 800f4dc:	f7ff fed4 	bl	800f288 <tcp_output_segment_busy>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d002      	beq.n	800f4ec <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800f4e6:	f06f 0305 	mvn.w	r3, #5
 800f4ea:	e033      	b.n	800f554 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2200      	movs	r2, #0
 800f500:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	8b5b      	ldrh	r3, [r3, #26]
 800f506:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f50a:	b29a      	uxth	r2, r3
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	685b      	ldr	r3, [r3, #4]
 800f516:	4618      	mov	r0, r3
 800f518:	f7f8 fdc1 	bl	800809e <lwip_htonl>
 800f51c:	4604      	mov	r4, r0
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	891b      	ldrh	r3, [r3, #8]
 800f522:	461d      	mov	r5, r3
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	68db      	ldr	r3, [r3, #12]
 800f528:	899b      	ldrh	r3, [r3, #12]
 800f52a:	b29b      	uxth	r3, r3
 800f52c:	4618      	mov	r0, r3
 800f52e:	f7f8 fda1 	bl	8008074 <lwip_htons>
 800f532:	4603      	mov	r3, r0
 800f534:	b2db      	uxtb	r3, r3
 800f536:	f003 0303 	and.w	r3, r3, #3
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d001      	beq.n	800f542 <tcp_rexmit_rto_prepare+0xba>
 800f53e:	2301      	movs	r3, #1
 800f540:	e000      	b.n	800f544 <tcp_rexmit_rto_prepare+0xbc>
 800f542:	2300      	movs	r3, #0
 800f544:	442b      	add	r3, r5
 800f546:	18e2      	adds	r2, r4, r3
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800f552:	2300      	movs	r3, #0
}
 800f554:	4618      	mov	r0, r3
 800f556:	3710      	adds	r7, #16
 800f558:	46bd      	mov	sp, r7
 800f55a:	bdb0      	pop	{r4, r5, r7, pc}
 800f55c:	0801b0a0 	.word	0x0801b0a0
 800f560:	0801b6dc 	.word	0x0801b6dc
 800f564:	0801b0f4 	.word	0x0801b0f4

0800f568 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800f568:	b580      	push	{r7, lr}
 800f56a:	b082      	sub	sp, #8
 800f56c:	af00      	add	r7, sp, #0
 800f56e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	2b00      	cmp	r3, #0
 800f574:	d106      	bne.n	800f584 <tcp_rexmit_rto_commit+0x1c>
 800f576:	4b0d      	ldr	r3, [pc, #52]	; (800f5ac <tcp_rexmit_rto_commit+0x44>)
 800f578:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800f57c:	490c      	ldr	r1, [pc, #48]	; (800f5b0 <tcp_rexmit_rto_commit+0x48>)
 800f57e:	480d      	ldr	r0, [pc, #52]	; (800f5b4 <tcp_rexmit_rto_commit+0x4c>)
 800f580:	f008 fd08 	bl	8017f94 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f58a:	2bff      	cmp	r3, #255	; 0xff
 800f58c:	d007      	beq.n	800f59e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f594:	3301      	adds	r3, #1
 800f596:	b2da      	uxtb	r2, r3
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800f59e:	6878      	ldr	r0, [r7, #4]
 800f5a0:	f7ff fc7a 	bl	800ee98 <tcp_output>
}
 800f5a4:	bf00      	nop
 800f5a6:	3708      	adds	r7, #8
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	bd80      	pop	{r7, pc}
 800f5ac:	0801b0a0 	.word	0x0801b0a0
 800f5b0:	0801b700 	.word	0x0801b700
 800f5b4:	0801b0f4 	.word	0x0801b0f4

0800f5b8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b082      	sub	sp, #8
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d106      	bne.n	800f5d4 <tcp_rexmit_rto+0x1c>
 800f5c6:	4b0a      	ldr	r3, [pc, #40]	; (800f5f0 <tcp_rexmit_rto+0x38>)
 800f5c8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800f5cc:	4909      	ldr	r1, [pc, #36]	; (800f5f4 <tcp_rexmit_rto+0x3c>)
 800f5ce:	480a      	ldr	r0, [pc, #40]	; (800f5f8 <tcp_rexmit_rto+0x40>)
 800f5d0:	f008 fce0 	bl	8017f94 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800f5d4:	6878      	ldr	r0, [r7, #4]
 800f5d6:	f7ff ff57 	bl	800f488 <tcp_rexmit_rto_prepare>
 800f5da:	4603      	mov	r3, r0
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800f5e0:	6878      	ldr	r0, [r7, #4]
 800f5e2:	f7ff ffc1 	bl	800f568 <tcp_rexmit_rto_commit>
  }
}
 800f5e6:	bf00      	nop
 800f5e8:	3708      	adds	r7, #8
 800f5ea:	46bd      	mov	sp, r7
 800f5ec:	bd80      	pop	{r7, pc}
 800f5ee:	bf00      	nop
 800f5f0:	0801b0a0 	.word	0x0801b0a0
 800f5f4:	0801b724 	.word	0x0801b724
 800f5f8:	0801b0f4 	.word	0x0801b0f4

0800f5fc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800f5fc:	b590      	push	{r4, r7, lr}
 800f5fe:	b085      	sub	sp, #20
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	2b00      	cmp	r3, #0
 800f608:	d106      	bne.n	800f618 <tcp_rexmit+0x1c>
 800f60a:	4b2f      	ldr	r3, [pc, #188]	; (800f6c8 <tcp_rexmit+0xcc>)
 800f60c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800f610:	492e      	ldr	r1, [pc, #184]	; (800f6cc <tcp_rexmit+0xd0>)
 800f612:	482f      	ldr	r0, [pc, #188]	; (800f6d0 <tcp_rexmit+0xd4>)
 800f614:	f008 fcbe 	bl	8017f94 <iprintf>

  if (pcb->unacked == NULL) {
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d102      	bne.n	800f626 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800f620:	f06f 0305 	mvn.w	r3, #5
 800f624:	e04c      	b.n	800f6c0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f62a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800f62c:	68b8      	ldr	r0, [r7, #8]
 800f62e:	f7ff fe2b 	bl	800f288 <tcp_output_segment_busy>
 800f632:	4603      	mov	r3, r0
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800f638:	f06f 0305 	mvn.w	r3, #5
 800f63c:	e040      	b.n	800f6c0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800f63e:	68bb      	ldr	r3, [r7, #8]
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	336c      	adds	r3, #108	; 0x6c
 800f64a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f64c:	e002      	b.n	800f654 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	681b      	ldr	r3, [r3, #0]
 800f652:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d011      	beq.n	800f680 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	681b      	ldr	r3, [r3, #0]
 800f660:	68db      	ldr	r3, [r3, #12]
 800f662:	685b      	ldr	r3, [r3, #4]
 800f664:	4618      	mov	r0, r3
 800f666:	f7f8 fd1a 	bl	800809e <lwip_htonl>
 800f66a:	4604      	mov	r4, r0
 800f66c:	68bb      	ldr	r3, [r7, #8]
 800f66e:	68db      	ldr	r3, [r3, #12]
 800f670:	685b      	ldr	r3, [r3, #4]
 800f672:	4618      	mov	r0, r3
 800f674:	f7f8 fd13 	bl	800809e <lwip_htonl>
 800f678:	4603      	mov	r3, r0
 800f67a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	dbe6      	blt.n	800f64e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	681a      	ldr	r2, [r3, #0]
 800f684:	68bb      	ldr	r3, [r7, #8]
 800f686:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	68ba      	ldr	r2, [r7, #8]
 800f68c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	681b      	ldr	r3, [r3, #0]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d103      	bne.n	800f69e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	2200      	movs	r2, #0
 800f69a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6a4:	2bff      	cmp	r3, #255	; 0xff
 800f6a6:	d007      	beq.n	800f6b8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f6ae:	3301      	adds	r3, #1
 800f6b0:	b2da      	uxtb	r2, r3
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	2200      	movs	r2, #0
 800f6bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800f6be:	2300      	movs	r3, #0
}
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	3714      	adds	r7, #20
 800f6c4:	46bd      	mov	sp, r7
 800f6c6:	bd90      	pop	{r4, r7, pc}
 800f6c8:	0801b0a0 	.word	0x0801b0a0
 800f6cc:	0801b740 	.word	0x0801b740
 800f6d0:	0801b0f4 	.word	0x0801b0f4

0800f6d4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d106      	bne.n	800f6f0 <tcp_rexmit_fast+0x1c>
 800f6e2:	4b2e      	ldr	r3, [pc, #184]	; (800f79c <tcp_rexmit_fast+0xc8>)
 800f6e4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800f6e8:	492d      	ldr	r1, [pc, #180]	; (800f7a0 <tcp_rexmit_fast+0xcc>)
 800f6ea:	482e      	ldr	r0, [pc, #184]	; (800f7a4 <tcp_rexmit_fast+0xd0>)
 800f6ec:	f008 fc52 	bl	8017f94 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d04d      	beq.n	800f794 <tcp_rexmit_fast+0xc0>
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	8b5b      	ldrh	r3, [r3, #26]
 800f6fc:	f003 0304 	and.w	r3, r3, #4
 800f700:	2b00      	cmp	r3, #0
 800f702:	d147      	bne.n	800f794 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f7ff ff79 	bl	800f5fc <tcp_rexmit>
 800f70a:	4603      	mov	r3, r0
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d141      	bne.n	800f794 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f71c:	429a      	cmp	r2, r3
 800f71e:	d207      	bcs.n	800f730 <tcp_rexmit_fast+0x5c>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f726:	0fda      	lsrs	r2, r3, #31
 800f728:	4413      	add	r3, r2
 800f72a:	105b      	asrs	r3, r3, #1
 800f72c:	b29b      	uxth	r3, r3
 800f72e:	e006      	b.n	800f73e <tcp_rexmit_fast+0x6a>
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f736:	0fda      	lsrs	r2, r3, #31
 800f738:	4413      	add	r3, r2
 800f73a:	105b      	asrs	r3, r3, #1
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	687a      	ldr	r2, [r7, #4]
 800f740:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f74a:	461a      	mov	r2, r3
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f750:	005b      	lsls	r3, r3, #1
 800f752:	429a      	cmp	r2, r3
 800f754:	d206      	bcs.n	800f764 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	b29a      	uxth	r2, r3
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f76e:	4619      	mov	r1, r3
 800f770:	0049      	lsls	r1, r1, #1
 800f772:	440b      	add	r3, r1
 800f774:	b29b      	uxth	r3, r3
 800f776:	4413      	add	r3, r2
 800f778:	b29a      	uxth	r2, r3
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	8b5b      	ldrh	r3, [r3, #26]
 800f784:	f043 0304 	orr.w	r3, r3, #4
 800f788:	b29a      	uxth	r2, r3
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	2200      	movs	r2, #0
 800f792:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800f794:	bf00      	nop
 800f796:	3708      	adds	r7, #8
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd80      	pop	{r7, pc}
 800f79c:	0801b0a0 	.word	0x0801b0a0
 800f7a0:	0801b758 	.word	0x0801b758
 800f7a4:	0801b0f4 	.word	0x0801b0f4

0800f7a8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b086      	sub	sp, #24
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	607b      	str	r3, [r7, #4]
 800f7b2:	460b      	mov	r3, r1
 800f7b4:	817b      	strh	r3, [r7, #10]
 800f7b6:	4613      	mov	r3, r2
 800f7b8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800f7ba:	897a      	ldrh	r2, [r7, #10]
 800f7bc:	893b      	ldrh	r3, [r7, #8]
 800f7be:	4413      	add	r3, r2
 800f7c0:	b29b      	uxth	r3, r3
 800f7c2:	3314      	adds	r3, #20
 800f7c4:	b29b      	uxth	r3, r3
 800f7c6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7ca:	4619      	mov	r1, r3
 800f7cc:	2022      	movs	r0, #34	; 0x22
 800f7ce:	f7f9 fd25 	bl	800921c <pbuf_alloc>
 800f7d2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d04e      	beq.n	800f878 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	895b      	ldrh	r3, [r3, #10]
 800f7de:	461a      	mov	r2, r3
 800f7e0:	897b      	ldrh	r3, [r7, #10]
 800f7e2:	3314      	adds	r3, #20
 800f7e4:	429a      	cmp	r2, r3
 800f7e6:	da06      	bge.n	800f7f6 <tcp_output_alloc_header_common+0x4e>
 800f7e8:	4b26      	ldr	r3, [pc, #152]	; (800f884 <tcp_output_alloc_header_common+0xdc>)
 800f7ea:	f240 7224 	movw	r2, #1828	; 0x724
 800f7ee:	4926      	ldr	r1, [pc, #152]	; (800f888 <tcp_output_alloc_header_common+0xe0>)
 800f7f0:	4826      	ldr	r0, [pc, #152]	; (800f88c <tcp_output_alloc_header_common+0xe4>)
 800f7f2:	f008 fbcf 	bl	8017f94 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800f7f6:	697b      	ldr	r3, [r7, #20]
 800f7f8:	685b      	ldr	r3, [r3, #4]
 800f7fa:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800f7fc:	8c3b      	ldrh	r3, [r7, #32]
 800f7fe:	4618      	mov	r0, r3
 800f800:	f7f8 fc38 	bl	8008074 <lwip_htons>
 800f804:	4603      	mov	r3, r0
 800f806:	461a      	mov	r2, r3
 800f808:	693b      	ldr	r3, [r7, #16]
 800f80a:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800f80c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f80e:	4618      	mov	r0, r3
 800f810:	f7f8 fc30 	bl	8008074 <lwip_htons>
 800f814:	4603      	mov	r3, r0
 800f816:	461a      	mov	r2, r3
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800f81c:	693b      	ldr	r3, [r7, #16]
 800f81e:	687a      	ldr	r2, [r7, #4]
 800f820:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f7f8 fc3b 	bl	800809e <lwip_htonl>
 800f828:	4602      	mov	r2, r0
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800f82e:	897b      	ldrh	r3, [r7, #10]
 800f830:	089b      	lsrs	r3, r3, #2
 800f832:	b29b      	uxth	r3, r3
 800f834:	3305      	adds	r3, #5
 800f836:	b29b      	uxth	r3, r3
 800f838:	031b      	lsls	r3, r3, #12
 800f83a:	b29a      	uxth	r2, r3
 800f83c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f840:	b29b      	uxth	r3, r3
 800f842:	4313      	orrs	r3, r2
 800f844:	b29b      	uxth	r3, r3
 800f846:	4618      	mov	r0, r3
 800f848:	f7f8 fc14 	bl	8008074 <lwip_htons>
 800f84c:	4603      	mov	r3, r0
 800f84e:	461a      	mov	r2, r3
 800f850:	693b      	ldr	r3, [r7, #16]
 800f852:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800f854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f856:	4618      	mov	r0, r3
 800f858:	f7f8 fc0c 	bl	8008074 <lwip_htons>
 800f85c:	4603      	mov	r3, r0
 800f85e:	461a      	mov	r2, r3
 800f860:	693b      	ldr	r3, [r7, #16]
 800f862:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800f864:	693b      	ldr	r3, [r7, #16]
 800f866:	2200      	movs	r2, #0
 800f868:	741a      	strb	r2, [r3, #16]
 800f86a:	2200      	movs	r2, #0
 800f86c:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2200      	movs	r2, #0
 800f872:	749a      	strb	r2, [r3, #18]
 800f874:	2200      	movs	r2, #0
 800f876:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800f878:	697b      	ldr	r3, [r7, #20]
}
 800f87a:	4618      	mov	r0, r3
 800f87c:	3718      	adds	r7, #24
 800f87e:	46bd      	mov	sp, r7
 800f880:	bd80      	pop	{r7, pc}
 800f882:	bf00      	nop
 800f884:	0801b0a0 	.word	0x0801b0a0
 800f888:	0801b778 	.word	0x0801b778
 800f88c:	0801b0f4 	.word	0x0801b0f4

0800f890 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800f890:	b5b0      	push	{r4, r5, r7, lr}
 800f892:	b08a      	sub	sp, #40	; 0x28
 800f894:	af04      	add	r7, sp, #16
 800f896:	60f8      	str	r0, [r7, #12]
 800f898:	607b      	str	r3, [r7, #4]
 800f89a:	460b      	mov	r3, r1
 800f89c:	817b      	strh	r3, [r7, #10]
 800f89e:	4613      	mov	r3, r2
 800f8a0:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d106      	bne.n	800f8b6 <tcp_output_alloc_header+0x26>
 800f8a8:	4b15      	ldr	r3, [pc, #84]	; (800f900 <tcp_output_alloc_header+0x70>)
 800f8aa:	f240 7242 	movw	r2, #1858	; 0x742
 800f8ae:	4915      	ldr	r1, [pc, #84]	; (800f904 <tcp_output_alloc_header+0x74>)
 800f8b0:	4815      	ldr	r0, [pc, #84]	; (800f908 <tcp_output_alloc_header+0x78>)
 800f8b2:	f008 fb6f 	bl	8017f94 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	8adb      	ldrh	r3, [r3, #22]
 800f8be:	68fa      	ldr	r2, [r7, #12]
 800f8c0:	8b12      	ldrh	r2, [r2, #24]
 800f8c2:	68f9      	ldr	r1, [r7, #12]
 800f8c4:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800f8c6:	893d      	ldrh	r5, [r7, #8]
 800f8c8:	897c      	ldrh	r4, [r7, #10]
 800f8ca:	9103      	str	r1, [sp, #12]
 800f8cc:	2110      	movs	r1, #16
 800f8ce:	9102      	str	r1, [sp, #8]
 800f8d0:	9201      	str	r2, [sp, #4]
 800f8d2:	9300      	str	r3, [sp, #0]
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	462a      	mov	r2, r5
 800f8d8:	4621      	mov	r1, r4
 800f8da:	f7ff ff65 	bl	800f7a8 <tcp_output_alloc_header_common>
 800f8de:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800f8e0:	697b      	ldr	r3, [r7, #20]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d006      	beq.n	800f8f4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800f8e6:	68fb      	ldr	r3, [r7, #12]
 800f8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8ea:	68fa      	ldr	r2, [r7, #12]
 800f8ec:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800f8ee:	441a      	add	r2, r3
 800f8f0:	68fb      	ldr	r3, [r7, #12]
 800f8f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800f8f4:	697b      	ldr	r3, [r7, #20]
}
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	3718      	adds	r7, #24
 800f8fa:	46bd      	mov	sp, r7
 800f8fc:	bdb0      	pop	{r4, r5, r7, pc}
 800f8fe:	bf00      	nop
 800f900:	0801b0a0 	.word	0x0801b0a0
 800f904:	0801b7a8 	.word	0x0801b7a8
 800f908:	0801b0f4 	.word	0x0801b0f4

0800f90c <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800f90c:	b580      	push	{r7, lr}
 800f90e:	b088      	sub	sp, #32
 800f910:	af00      	add	r7, sp, #0
 800f912:	60f8      	str	r0, [r7, #12]
 800f914:	60b9      	str	r1, [r7, #8]
 800f916:	4611      	mov	r1, r2
 800f918:	461a      	mov	r2, r3
 800f91a:	460b      	mov	r3, r1
 800f91c:	71fb      	strb	r3, [r7, #7]
 800f91e:	4613      	mov	r3, r2
 800f920:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800f922:	2300      	movs	r3, #0
 800f924:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800f926:	68bb      	ldr	r3, [r7, #8]
 800f928:	2b00      	cmp	r3, #0
 800f92a:	d106      	bne.n	800f93a <tcp_output_fill_options+0x2e>
 800f92c:	4b13      	ldr	r3, [pc, #76]	; (800f97c <tcp_output_fill_options+0x70>)
 800f92e:	f240 7256 	movw	r2, #1878	; 0x756
 800f932:	4913      	ldr	r1, [pc, #76]	; (800f980 <tcp_output_fill_options+0x74>)
 800f934:	4813      	ldr	r0, [pc, #76]	; (800f984 <tcp_output_fill_options+0x78>)
 800f936:	f008 fb2d 	bl	8017f94 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800f93a:	68bb      	ldr	r3, [r7, #8]
 800f93c:	685b      	ldr	r3, [r3, #4]
 800f93e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800f940:	69bb      	ldr	r3, [r7, #24]
 800f942:	3314      	adds	r3, #20
 800f944:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800f946:	69bb      	ldr	r3, [r7, #24]
 800f948:	f103 0214 	add.w	r2, r3, #20
 800f94c:	8bfb      	ldrh	r3, [r7, #30]
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	4619      	mov	r1, r3
 800f952:	79fb      	ldrb	r3, [r7, #7]
 800f954:	009b      	lsls	r3, r3, #2
 800f956:	f003 0304 	and.w	r3, r3, #4
 800f95a:	440b      	add	r3, r1
 800f95c:	4413      	add	r3, r2
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	429a      	cmp	r2, r3
 800f962:	d006      	beq.n	800f972 <tcp_output_fill_options+0x66>
 800f964:	4b05      	ldr	r3, [pc, #20]	; (800f97c <tcp_output_fill_options+0x70>)
 800f966:	f240 7275 	movw	r2, #1909	; 0x775
 800f96a:	4907      	ldr	r1, [pc, #28]	; (800f988 <tcp_output_fill_options+0x7c>)
 800f96c:	4805      	ldr	r0, [pc, #20]	; (800f984 <tcp_output_fill_options+0x78>)
 800f96e:	f008 fb11 	bl	8017f94 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800f972:	bf00      	nop
 800f974:	3720      	adds	r7, #32
 800f976:	46bd      	mov	sp, r7
 800f978:	bd80      	pop	{r7, pc}
 800f97a:	bf00      	nop
 800f97c:	0801b0a0 	.word	0x0801b0a0
 800f980:	0801b7d0 	.word	0x0801b7d0
 800f984:	0801b0f4 	.word	0x0801b0f4
 800f988:	0801b6c8 	.word	0x0801b6c8

0800f98c <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b08a      	sub	sp, #40	; 0x28
 800f990:	af04      	add	r7, sp, #16
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
 800f998:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800f99a:	68bb      	ldr	r3, [r7, #8]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d106      	bne.n	800f9ae <tcp_output_control_segment+0x22>
 800f9a0:	4b1c      	ldr	r3, [pc, #112]	; (800fa14 <tcp_output_control_segment+0x88>)
 800f9a2:	f240 7287 	movw	r2, #1927	; 0x787
 800f9a6:	491c      	ldr	r1, [pc, #112]	; (800fa18 <tcp_output_control_segment+0x8c>)
 800f9a8:	481c      	ldr	r0, [pc, #112]	; (800fa1c <tcp_output_control_segment+0x90>)
 800f9aa:	f008 faf3 	bl	8017f94 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800f9ae:	683a      	ldr	r2, [r7, #0]
 800f9b0:	6879      	ldr	r1, [r7, #4]
 800f9b2:	68f8      	ldr	r0, [r7, #12]
 800f9b4:	f7fe fad6 	bl	800df64 <tcp_route>
 800f9b8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800f9ba:	693b      	ldr	r3, [r7, #16]
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d102      	bne.n	800f9c6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800f9c0:	23fc      	movs	r3, #252	; 0xfc
 800f9c2:	75fb      	strb	r3, [r7, #23]
 800f9c4:	e01c      	b.n	800fa00 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d006      	beq.n	800f9da <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	7adb      	ldrb	r3, [r3, #11]
 800f9d0:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	7a9b      	ldrb	r3, [r3, #10]
 800f9d6:	757b      	strb	r3, [r7, #21]
 800f9d8:	e003      	b.n	800f9e2 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800f9da:	23ff      	movs	r3, #255	; 0xff
 800f9dc:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800f9e2:	7dba      	ldrb	r2, [r7, #22]
 800f9e4:	693b      	ldr	r3, [r7, #16]
 800f9e6:	9302      	str	r3, [sp, #8]
 800f9e8:	2306      	movs	r3, #6
 800f9ea:	9301      	str	r3, [sp, #4]
 800f9ec:	7d7b      	ldrb	r3, [r7, #21]
 800f9ee:	9300      	str	r3, [sp, #0]
 800f9f0:	4613      	mov	r3, r2
 800f9f2:	683a      	ldr	r2, [r7, #0]
 800f9f4:	6879      	ldr	r1, [r7, #4]
 800f9f6:	68b8      	ldr	r0, [r7, #8]
 800f9f8:	f004 f96e 	bl	8013cd8 <ip4_output_if>
 800f9fc:	4603      	mov	r3, r0
 800f9fe:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800fa00:	68b8      	ldr	r0, [r7, #8]
 800fa02:	f7f9 feeb 	bl	80097dc <pbuf_free>
  return err;
 800fa06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3718      	adds	r7, #24
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	0801b0a0 	.word	0x0801b0a0
 800fa18:	0801b7f8 	.word	0x0801b7f8
 800fa1c:	0801b0f4 	.word	0x0801b0f4

0800fa20 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800fa20:	b590      	push	{r4, r7, lr}
 800fa22:	b08b      	sub	sp, #44	; 0x2c
 800fa24:	af04      	add	r7, sp, #16
 800fa26:	60f8      	str	r0, [r7, #12]
 800fa28:	60b9      	str	r1, [r7, #8]
 800fa2a:	607a      	str	r2, [r7, #4]
 800fa2c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800fa2e:	683b      	ldr	r3, [r7, #0]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d106      	bne.n	800fa42 <tcp_rst+0x22>
 800fa34:	4b1f      	ldr	r3, [pc, #124]	; (800fab4 <tcp_rst+0x94>)
 800fa36:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800fa3a:	491f      	ldr	r1, [pc, #124]	; (800fab8 <tcp_rst+0x98>)
 800fa3c:	481f      	ldr	r0, [pc, #124]	; (800fabc <tcp_rst+0x9c>)
 800fa3e:	f008 faa9 	bl	8017f94 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800fa42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d106      	bne.n	800fa56 <tcp_rst+0x36>
 800fa48:	4b1a      	ldr	r3, [pc, #104]	; (800fab4 <tcp_rst+0x94>)
 800fa4a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800fa4e:	491c      	ldr	r1, [pc, #112]	; (800fac0 <tcp_rst+0xa0>)
 800fa50:	481a      	ldr	r0, [pc, #104]	; (800fabc <tcp_rst+0x9c>)
 800fa52:	f008 fa9f 	bl	8017f94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fa56:	2300      	movs	r3, #0
 800fa58:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800fa5a:	f246 0308 	movw	r3, #24584	; 0x6008
 800fa5e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800fa60:	7dfb      	ldrb	r3, [r7, #23]
 800fa62:	b29c      	uxth	r4, r3
 800fa64:	68b8      	ldr	r0, [r7, #8]
 800fa66:	f7f8 fb1a 	bl	800809e <lwip_htonl>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	8abb      	ldrh	r3, [r7, #20]
 800fa6e:	9303      	str	r3, [sp, #12]
 800fa70:	2314      	movs	r3, #20
 800fa72:	9302      	str	r3, [sp, #8]
 800fa74:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800fa76:	9301      	str	r3, [sp, #4]
 800fa78:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fa7a:	9300      	str	r3, [sp, #0]
 800fa7c:	4613      	mov	r3, r2
 800fa7e:	2200      	movs	r2, #0
 800fa80:	4621      	mov	r1, r4
 800fa82:	6878      	ldr	r0, [r7, #4]
 800fa84:	f7ff fe90 	bl	800f7a8 <tcp_output_alloc_header_common>
 800fa88:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800fa8a:	693b      	ldr	r3, [r7, #16]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d00c      	beq.n	800faaa <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fa90:	7dfb      	ldrb	r3, [r7, #23]
 800fa92:	2200      	movs	r2, #0
 800fa94:	6939      	ldr	r1, [r7, #16]
 800fa96:	68f8      	ldr	r0, [r7, #12]
 800fa98:	f7ff ff38 	bl	800f90c <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800fa9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa9e:	683a      	ldr	r2, [r7, #0]
 800faa0:	6939      	ldr	r1, [r7, #16]
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff ff72 	bl	800f98c <tcp_output_control_segment>
 800faa8:	e000      	b.n	800faac <tcp_rst+0x8c>
    return;
 800faaa:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800faac:	371c      	adds	r7, #28
 800faae:	46bd      	mov	sp, r7
 800fab0:	bd90      	pop	{r4, r7, pc}
 800fab2:	bf00      	nop
 800fab4:	0801b0a0 	.word	0x0801b0a0
 800fab8:	0801b824 	.word	0x0801b824
 800fabc:	0801b0f4 	.word	0x0801b0f4
 800fac0:	0801b840 	.word	0x0801b840

0800fac4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b087      	sub	sp, #28
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800facc:	2300      	movs	r3, #0
 800face:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800fad0:	2300      	movs	r3, #0
 800fad2:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d106      	bne.n	800fae8 <tcp_send_empty_ack+0x24>
 800fada:	4b28      	ldr	r3, [pc, #160]	; (800fb7c <tcp_send_empty_ack+0xb8>)
 800fadc:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800fae0:	4927      	ldr	r1, [pc, #156]	; (800fb80 <tcp_send_empty_ack+0xbc>)
 800fae2:	4828      	ldr	r0, [pc, #160]	; (800fb84 <tcp_send_empty_ack+0xc0>)
 800fae4:	f008 fa56 	bl	8017f94 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fae8:	7dfb      	ldrb	r3, [r7, #23]
 800faea:	009b      	lsls	r3, r3, #2
 800faec:	b2db      	uxtb	r3, r3
 800faee:	f003 0304 	and.w	r3, r3, #4
 800faf2:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800faf4:	7d7b      	ldrb	r3, [r7, #21]
 800faf6:	b29c      	uxth	r4, r3
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fafc:	4618      	mov	r0, r3
 800fafe:	f7f8 face 	bl	800809e <lwip_htonl>
 800fb02:	4603      	mov	r3, r0
 800fb04:	2200      	movs	r2, #0
 800fb06:	4621      	mov	r1, r4
 800fb08:	6878      	ldr	r0, [r7, #4]
 800fb0a:	f7ff fec1 	bl	800f890 <tcp_output_alloc_header>
 800fb0e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fb10:	693b      	ldr	r3, [r7, #16]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d109      	bne.n	800fb2a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	8b5b      	ldrh	r3, [r3, #26]
 800fb1a:	f043 0303 	orr.w	r3, r3, #3
 800fb1e:	b29a      	uxth	r2, r3
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800fb24:	f06f 0301 	mvn.w	r3, #1
 800fb28:	e023      	b.n	800fb72 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800fb2a:	7dbb      	ldrb	r3, [r7, #22]
 800fb2c:	7dfa      	ldrb	r2, [r7, #23]
 800fb2e:	6939      	ldr	r1, [r7, #16]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f7ff feeb 	bl	800f90c <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fb36:	687a      	ldr	r2, [r7, #4]
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	3304      	adds	r3, #4
 800fb3c:	6939      	ldr	r1, [r7, #16]
 800fb3e:	6878      	ldr	r0, [r7, #4]
 800fb40:	f7ff ff24 	bl	800f98c <tcp_output_control_segment>
 800fb44:	4603      	mov	r3, r0
 800fb46:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800fb48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d007      	beq.n	800fb60 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	8b5b      	ldrh	r3, [r3, #26]
 800fb54:	f043 0303 	orr.w	r3, r3, #3
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	835a      	strh	r2, [r3, #26]
 800fb5e:	e006      	b.n	800fb6e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	8b5b      	ldrh	r3, [r3, #26]
 800fb64:	f023 0303 	bic.w	r3, r3, #3
 800fb68:	b29a      	uxth	r2, r3
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800fb6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb72:	4618      	mov	r0, r3
 800fb74:	371c      	adds	r7, #28
 800fb76:	46bd      	mov	sp, r7
 800fb78:	bd90      	pop	{r4, r7, pc}
 800fb7a:	bf00      	nop
 800fb7c:	0801b0a0 	.word	0x0801b0a0
 800fb80:	0801b85c 	.word	0x0801b85c
 800fb84:	0801b0f4 	.word	0x0801b0f4

0800fb88 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800fb88:	b590      	push	{r4, r7, lr}
 800fb8a:	b087      	sub	sp, #28
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fb90:	2300      	movs	r3, #0
 800fb92:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d106      	bne.n	800fba8 <tcp_keepalive+0x20>
 800fb9a:	4b18      	ldr	r3, [pc, #96]	; (800fbfc <tcp_keepalive+0x74>)
 800fb9c:	f640 0224 	movw	r2, #2084	; 0x824
 800fba0:	4917      	ldr	r1, [pc, #92]	; (800fc00 <tcp_keepalive+0x78>)
 800fba2:	4818      	ldr	r0, [pc, #96]	; (800fc04 <tcp_keepalive+0x7c>)
 800fba4:	f008 f9f6 	bl	8017f94 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800fba8:	7dfb      	ldrb	r3, [r7, #23]
 800fbaa:	b29c      	uxth	r4, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbb0:	3b01      	subs	r3, #1
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	f7f8 fa73 	bl	800809e <lwip_htonl>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	2200      	movs	r2, #0
 800fbbc:	4621      	mov	r1, r4
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f7ff fe66 	bl	800f890 <tcp_output_alloc_header>
 800fbc4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fbc6:	693b      	ldr	r3, [r7, #16]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d102      	bne.n	800fbd2 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800fbcc:	f04f 33ff 	mov.w	r3, #4294967295
 800fbd0:	e010      	b.n	800fbf4 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fbd2:	7dfb      	ldrb	r3, [r7, #23]
 800fbd4:	2200      	movs	r2, #0
 800fbd6:	6939      	ldr	r1, [r7, #16]
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff fe97 	bl	800f90c <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	3304      	adds	r3, #4
 800fbe4:	6939      	ldr	r1, [r7, #16]
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f7ff fed0 	bl	800f98c <tcp_output_control_segment>
 800fbec:	4603      	mov	r3, r0
 800fbee:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fbf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	371c      	adds	r7, #28
 800fbf8:	46bd      	mov	sp, r7
 800fbfa:	bd90      	pop	{r4, r7, pc}
 800fbfc:	0801b0a0 	.word	0x0801b0a0
 800fc00:	0801b87c 	.word	0x0801b87c
 800fc04:	0801b0f4 	.word	0x0801b0f4

0800fc08 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800fc08:	b590      	push	{r4, r7, lr}
 800fc0a:	b08b      	sub	sp, #44	; 0x2c
 800fc0c:	af00      	add	r7, sp, #0
 800fc0e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800fc10:	2300      	movs	r3, #0
 800fc12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d106      	bne.n	800fc2a <tcp_zero_window_probe+0x22>
 800fc1c:	4b4c      	ldr	r3, [pc, #304]	; (800fd50 <tcp_zero_window_probe+0x148>)
 800fc1e:	f640 024f 	movw	r2, #2127	; 0x84f
 800fc22:	494c      	ldr	r1, [pc, #304]	; (800fd54 <tcp_zero_window_probe+0x14c>)
 800fc24:	484c      	ldr	r0, [pc, #304]	; (800fd58 <tcp_zero_window_probe+0x150>)
 800fc26:	f008 f9b5 	bl	8017f94 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc2e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800fc30:	6a3b      	ldr	r3, [r7, #32]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d101      	bne.n	800fc3a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	e086      	b.n	800fd48 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc40:	2bff      	cmp	r3, #255	; 0xff
 800fc42:	d007      	beq.n	800fc54 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800fc4a:	3301      	adds	r3, #1
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800fc54:	6a3b      	ldr	r3, [r7, #32]
 800fc56:	68db      	ldr	r3, [r3, #12]
 800fc58:	899b      	ldrh	r3, [r3, #12]
 800fc5a:	b29b      	uxth	r3, r3
 800fc5c:	4618      	mov	r0, r3
 800fc5e:	f7f8 fa09 	bl	8008074 <lwip_htons>
 800fc62:	4603      	mov	r3, r0
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d005      	beq.n	800fc7a <tcp_zero_window_probe+0x72>
 800fc6e:	6a3b      	ldr	r3, [r7, #32]
 800fc70:	891b      	ldrh	r3, [r3, #8]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d101      	bne.n	800fc7a <tcp_zero_window_probe+0x72>
 800fc76:	2301      	movs	r3, #1
 800fc78:	e000      	b.n	800fc7c <tcp_zero_window_probe+0x74>
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800fc7e:	7ffb      	ldrb	r3, [r7, #31]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	bf0c      	ite	eq
 800fc84:	2301      	moveq	r3, #1
 800fc86:	2300      	movne	r3, #0
 800fc88:	b2db      	uxtb	r3, r3
 800fc8a:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800fc8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc90:	b299      	uxth	r1, r3
 800fc92:	6a3b      	ldr	r3, [r7, #32]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	8bba      	ldrh	r2, [r7, #28]
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f7ff fdf8 	bl	800f890 <tcp_output_alloc_header>
 800fca0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	2b00      	cmp	r3, #0
 800fca6:	d102      	bne.n	800fcae <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800fca8:	f04f 33ff 	mov.w	r3, #4294967295
 800fcac:	e04c      	b.n	800fd48 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800fcae:	69bb      	ldr	r3, [r7, #24]
 800fcb0:	685b      	ldr	r3, [r3, #4]
 800fcb2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800fcb4:	7ffb      	ldrb	r3, [r7, #31]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d011      	beq.n	800fcde <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	899b      	ldrh	r3, [r3, #12]
 800fcbe:	b29b      	uxth	r3, r3
 800fcc0:	b21b      	sxth	r3, r3
 800fcc2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcc6:	b21c      	sxth	r4, r3
 800fcc8:	2011      	movs	r0, #17
 800fcca:	f7f8 f9d3 	bl	8008074 <lwip_htons>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b21b      	sxth	r3, r3
 800fcd2:	4323      	orrs	r3, r4
 800fcd4:	b21b      	sxth	r3, r3
 800fcd6:	b29a      	uxth	r2, r3
 800fcd8:	697b      	ldr	r3, [r7, #20]
 800fcda:	819a      	strh	r2, [r3, #12]
 800fcdc:	e010      	b.n	800fd00 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	3314      	adds	r3, #20
 800fce4:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	6858      	ldr	r0, [r3, #4]
 800fcea:	6a3b      	ldr	r3, [r7, #32]
 800fcec:	685b      	ldr	r3, [r3, #4]
 800fcee:	891a      	ldrh	r2, [r3, #8]
 800fcf0:	6a3b      	ldr	r3, [r7, #32]
 800fcf2:	891b      	ldrh	r3, [r3, #8]
 800fcf4:	1ad3      	subs	r3, r2, r3
 800fcf6:	b29b      	uxth	r3, r3
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	6939      	ldr	r1, [r7, #16]
 800fcfc:	f7f9 ff74 	bl	8009be8 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800fd00:	6a3b      	ldr	r3, [r7, #32]
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	685b      	ldr	r3, [r3, #4]
 800fd06:	4618      	mov	r0, r3
 800fd08:	f7f8 f9c9 	bl	800809e <lwip_htonl>
 800fd0c:	4603      	mov	r3, r0
 800fd0e:	3301      	adds	r3, #1
 800fd10:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	1ad3      	subs	r3, r2, r3
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	da02      	bge.n	800fd24 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	68fa      	ldr	r2, [r7, #12]
 800fd22:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800fd24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd28:	2200      	movs	r2, #0
 800fd2a:	69b9      	ldr	r1, [r7, #24]
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	f7ff fded 	bl	800f90c <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800fd32:	687a      	ldr	r2, [r7, #4]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	3304      	adds	r3, #4
 800fd38:	69b9      	ldr	r1, [r7, #24]
 800fd3a:	6878      	ldr	r0, [r7, #4]
 800fd3c:	f7ff fe26 	bl	800f98c <tcp_output_control_segment>
 800fd40:	4603      	mov	r3, r0
 800fd42:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800fd44:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	372c      	adds	r7, #44	; 0x2c
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd90      	pop	{r4, r7, pc}
 800fd50:	0801b0a0 	.word	0x0801b0a0
 800fd54:	0801b898 	.word	0x0801b898
 800fd58:	0801b0f4 	.word	0x0801b0f4

0800fd5c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800fd5c:	b580      	push	{r7, lr}
 800fd5e:	b082      	sub	sp, #8
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800fd64:	f7fa f82e 	bl	8009dc4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800fd68:	4b0a      	ldr	r3, [pc, #40]	; (800fd94 <tcpip_tcp_timer+0x38>)
 800fd6a:	681b      	ldr	r3, [r3, #0]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d103      	bne.n	800fd78 <tcpip_tcp_timer+0x1c>
 800fd70:	4b09      	ldr	r3, [pc, #36]	; (800fd98 <tcpip_tcp_timer+0x3c>)
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d005      	beq.n	800fd84 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fd78:	2200      	movs	r2, #0
 800fd7a:	4908      	ldr	r1, [pc, #32]	; (800fd9c <tcpip_tcp_timer+0x40>)
 800fd7c:	20fa      	movs	r0, #250	; 0xfa
 800fd7e:	f000 f8f1 	bl	800ff64 <sys_timeout>
 800fd82:	e002      	b.n	800fd8a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800fd84:	4b06      	ldr	r3, [pc, #24]	; (800fda0 <tcpip_tcp_timer+0x44>)
 800fd86:	2200      	movs	r2, #0
 800fd88:	601a      	str	r2, [r3, #0]
  }
}
 800fd8a:	bf00      	nop
 800fd8c:	3708      	adds	r7, #8
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	bd80      	pop	{r7, pc}
 800fd92:	bf00      	nop
 800fd94:	2000c4dc 	.word	0x2000c4dc
 800fd98:	2000c4ec 	.word	0x2000c4ec
 800fd9c:	0800fd5d 	.word	0x0800fd5d
 800fda0:	200083e8 	.word	0x200083e8

0800fda4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800fda8:	4b0a      	ldr	r3, [pc, #40]	; (800fdd4 <tcp_timer_needed+0x30>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10f      	bne.n	800fdd0 <tcp_timer_needed+0x2c>
 800fdb0:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <tcp_timer_needed+0x34>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d103      	bne.n	800fdc0 <tcp_timer_needed+0x1c>
 800fdb8:	4b08      	ldr	r3, [pc, #32]	; (800fddc <tcp_timer_needed+0x38>)
 800fdba:	681b      	ldr	r3, [r3, #0]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d007      	beq.n	800fdd0 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800fdc0:	4b04      	ldr	r3, [pc, #16]	; (800fdd4 <tcp_timer_needed+0x30>)
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800fdc6:	2200      	movs	r2, #0
 800fdc8:	4905      	ldr	r1, [pc, #20]	; (800fde0 <tcp_timer_needed+0x3c>)
 800fdca:	20fa      	movs	r0, #250	; 0xfa
 800fdcc:	f000 f8ca 	bl	800ff64 <sys_timeout>
  }
}
 800fdd0:	bf00      	nop
 800fdd2:	bd80      	pop	{r7, pc}
 800fdd4:	200083e8 	.word	0x200083e8
 800fdd8:	2000c4dc 	.word	0x2000c4dc
 800fddc:	2000c4ec 	.word	0x2000c4ec
 800fde0:	0800fd5d 	.word	0x0800fd5d

0800fde4 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b086      	sub	sp, #24
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	60f8      	str	r0, [r7, #12]
 800fdec:	60b9      	str	r1, [r7, #8]
 800fdee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800fdf0:	200a      	movs	r0, #10
 800fdf2:	f7f8 fdf5 	bl	80089e0 <memp_malloc>
 800fdf6:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800fdf8:	693b      	ldr	r3, [r7, #16]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d109      	bne.n	800fe12 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800fdfe:	693b      	ldr	r3, [r7, #16]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d151      	bne.n	800fea8 <sys_timeout_abs+0xc4>
 800fe04:	4b2a      	ldr	r3, [pc, #168]	; (800feb0 <sys_timeout_abs+0xcc>)
 800fe06:	22be      	movs	r2, #190	; 0xbe
 800fe08:	492a      	ldr	r1, [pc, #168]	; (800feb4 <sys_timeout_abs+0xd0>)
 800fe0a:	482b      	ldr	r0, [pc, #172]	; (800feb8 <sys_timeout_abs+0xd4>)
 800fe0c:	f008 f8c2 	bl	8017f94 <iprintf>
    return;
 800fe10:	e04a      	b.n	800fea8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	2200      	movs	r2, #0
 800fe16:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800fe18:	693b      	ldr	r3, [r7, #16]
 800fe1a:	68ba      	ldr	r2, [r7, #8]
 800fe1c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800fe24:	693b      	ldr	r3, [r7, #16]
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800fe2a:	4b24      	ldr	r3, [pc, #144]	; (800febc <sys_timeout_abs+0xd8>)
 800fe2c:	681b      	ldr	r3, [r3, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d103      	bne.n	800fe3a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800fe32:	4a22      	ldr	r2, [pc, #136]	; (800febc <sys_timeout_abs+0xd8>)
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	6013      	str	r3, [r2, #0]
    return;
 800fe38:	e037      	b.n	800feaa <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800fe3a:	693b      	ldr	r3, [r7, #16]
 800fe3c:	685a      	ldr	r2, [r3, #4]
 800fe3e:	4b1f      	ldr	r3, [pc, #124]	; (800febc <sys_timeout_abs+0xd8>)
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	685b      	ldr	r3, [r3, #4]
 800fe44:	1ad3      	subs	r3, r2, r3
 800fe46:	0fdb      	lsrs	r3, r3, #31
 800fe48:	f003 0301 	and.w	r3, r3, #1
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d007      	beq.n	800fe62 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800fe52:	4b1a      	ldr	r3, [pc, #104]	; (800febc <sys_timeout_abs+0xd8>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	693b      	ldr	r3, [r7, #16]
 800fe58:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800fe5a:	4a18      	ldr	r2, [pc, #96]	; (800febc <sys_timeout_abs+0xd8>)
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	6013      	str	r3, [r2, #0]
 800fe60:	e023      	b.n	800feaa <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe62:	4b16      	ldr	r3, [pc, #88]	; (800febc <sys_timeout_abs+0xd8>)
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	617b      	str	r3, [r7, #20]
 800fe68:	e01a      	b.n	800fea0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d00b      	beq.n	800fe8a <sys_timeout_abs+0xa6>
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	685a      	ldr	r2, [r3, #4]
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	1ad3      	subs	r3, r2, r3
 800fe7e:	0fdb      	lsrs	r3, r3, #31
 800fe80:	f003 0301 	and.w	r3, r3, #1
 800fe84:	b2db      	uxtb	r3, r3
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d007      	beq.n	800fe9a <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800fe8a:	697b      	ldr	r3, [r7, #20]
 800fe8c:	681a      	ldr	r2, [r3, #0]
 800fe8e:	693b      	ldr	r3, [r7, #16]
 800fe90:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	693a      	ldr	r2, [r7, #16]
 800fe96:	601a      	str	r2, [r3, #0]
        break;
 800fe98:	e007      	b.n	800feaa <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800fe9a:	697b      	ldr	r3, [r7, #20]
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	617b      	str	r3, [r7, #20]
 800fea0:	697b      	ldr	r3, [r7, #20]
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d1e1      	bne.n	800fe6a <sys_timeout_abs+0x86>
 800fea6:	e000      	b.n	800feaa <sys_timeout_abs+0xc6>
    return;
 800fea8:	bf00      	nop
      }
    }
  }
}
 800feaa:	3718      	adds	r7, #24
 800feac:	46bd      	mov	sp, r7
 800feae:	bd80      	pop	{r7, pc}
 800feb0:	0801b8bc 	.word	0x0801b8bc
 800feb4:	0801b8f0 	.word	0x0801b8f0
 800feb8:	0801b930 	.word	0x0801b930
 800febc:	200083e0 	.word	0x200083e0

0800fec0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b086      	sub	sp, #24
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	685b      	ldr	r3, [r3, #4]
 800fed0:	4798      	blx	r3

  now = sys_now();
 800fed2:	f007 faad 	bl	8017430 <sys_now>
 800fed6:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	681a      	ldr	r2, [r3, #0]
 800fedc:	4b0f      	ldr	r3, [pc, #60]	; (800ff1c <lwip_cyclic_timer+0x5c>)
 800fede:	681b      	ldr	r3, [r3, #0]
 800fee0:	4413      	add	r3, r2
 800fee2:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800fee4:	68fa      	ldr	r2, [r7, #12]
 800fee6:	693b      	ldr	r3, [r7, #16]
 800fee8:	1ad3      	subs	r3, r2, r3
 800feea:	0fdb      	lsrs	r3, r3, #31
 800feec:	f003 0301 	and.w	r3, r3, #1
 800fef0:	b2db      	uxtb	r3, r3
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d009      	beq.n	800ff0a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	681a      	ldr	r2, [r3, #0]
 800fefa:	693b      	ldr	r3, [r7, #16]
 800fefc:	4413      	add	r3, r2
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	4907      	ldr	r1, [pc, #28]	; (800ff20 <lwip_cyclic_timer+0x60>)
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff ff6e 	bl	800fde4 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ff08:	e004      	b.n	800ff14 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	4904      	ldr	r1, [pc, #16]	; (800ff20 <lwip_cyclic_timer+0x60>)
 800ff0e:	68f8      	ldr	r0, [r7, #12]
 800ff10:	f7ff ff68 	bl	800fde4 <sys_timeout_abs>
}
 800ff14:	bf00      	nop
 800ff16:	3718      	adds	r7, #24
 800ff18:	46bd      	mov	sp, r7
 800ff1a:	bd80      	pop	{r7, pc}
 800ff1c:	200083e4 	.word	0x200083e4
 800ff20:	0800fec1 	.word	0x0800fec1

0800ff24 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ff24:	b580      	push	{r7, lr}
 800ff26:	b082      	sub	sp, #8
 800ff28:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff2a:	2301      	movs	r3, #1
 800ff2c:	607b      	str	r3, [r7, #4]
 800ff2e:	e00e      	b.n	800ff4e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ff30:	4a0a      	ldr	r2, [pc, #40]	; (800ff5c <sys_timeouts_init+0x38>)
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	00db      	lsls	r3, r3, #3
 800ff3c:	4a07      	ldr	r2, [pc, #28]	; (800ff5c <sys_timeouts_init+0x38>)
 800ff3e:	4413      	add	r3, r2
 800ff40:	461a      	mov	r2, r3
 800ff42:	4907      	ldr	r1, [pc, #28]	; (800ff60 <sys_timeouts_init+0x3c>)
 800ff44:	f000 f80e 	bl	800ff64 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	607b      	str	r3, [r7, #4]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	2b04      	cmp	r3, #4
 800ff52:	d9ed      	bls.n	800ff30 <sys_timeouts_init+0xc>
  }
}
 800ff54:	bf00      	nop
 800ff56:	3708      	adds	r7, #8
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	bd80      	pop	{r7, pc}
 800ff5c:	0801cae0 	.word	0x0801cae0
 800ff60:	0800fec1 	.word	0x0800fec1

0800ff64 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ff64:	b580      	push	{r7, lr}
 800ff66:	b086      	sub	sp, #24
 800ff68:	af00      	add	r7, sp, #0
 800ff6a:	60f8      	str	r0, [r7, #12]
 800ff6c:	60b9      	str	r1, [r7, #8]
 800ff6e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ff76:	d306      	bcc.n	800ff86 <sys_timeout+0x22>
 800ff78:	4b0a      	ldr	r3, [pc, #40]	; (800ffa4 <sys_timeout+0x40>)
 800ff7a:	f240 1229 	movw	r2, #297	; 0x129
 800ff7e:	490a      	ldr	r1, [pc, #40]	; (800ffa8 <sys_timeout+0x44>)
 800ff80:	480a      	ldr	r0, [pc, #40]	; (800ffac <sys_timeout+0x48>)
 800ff82:	f008 f807 	bl	8017f94 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ff86:	f007 fa53 	bl	8017430 <sys_now>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	4413      	add	r3, r2
 800ff90:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ff92:	687a      	ldr	r2, [r7, #4]
 800ff94:	68b9      	ldr	r1, [r7, #8]
 800ff96:	6978      	ldr	r0, [r7, #20]
 800ff98:	f7ff ff24 	bl	800fde4 <sys_timeout_abs>
#endif
}
 800ff9c:	bf00      	nop
 800ff9e:	3718      	adds	r7, #24
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	0801b8bc 	.word	0x0801b8bc
 800ffa8:	0801b958 	.word	0x0801b958
 800ffac:	0801b930 	.word	0x0801b930

0800ffb0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b084      	sub	sp, #16
 800ffb4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800ffb6:	f007 fa3b 	bl	8017430 <sys_now>
 800ffba:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 800ffbc:	4b17      	ldr	r3, [pc, #92]	; (801001c <sys_check_timeouts+0x6c>)
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800ffc2:	68bb      	ldr	r3, [r7, #8]
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d022      	beq.n	801000e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	68fa      	ldr	r2, [r7, #12]
 800ffce:	1ad3      	subs	r3, r2, r3
 800ffd0:	0fdb      	lsrs	r3, r3, #31
 800ffd2:	f003 0301 	and.w	r3, r3, #1
 800ffd6:	b2db      	uxtb	r3, r3
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	d11a      	bne.n	8010012 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	681b      	ldr	r3, [r3, #0]
 800ffe0:	4a0e      	ldr	r2, [pc, #56]	; (801001c <sys_check_timeouts+0x6c>)
 800ffe2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800ffe4:	68bb      	ldr	r3, [r7, #8]
 800ffe6:	689b      	ldr	r3, [r3, #8]
 800ffe8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ffea:	68bb      	ldr	r3, [r7, #8]
 800ffec:	68db      	ldr	r3, [r3, #12]
 800ffee:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800fff0:	68bb      	ldr	r3, [r7, #8]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	4a0a      	ldr	r2, [pc, #40]	; (8010020 <sys_check_timeouts+0x70>)
 800fff6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800fff8:	68b9      	ldr	r1, [r7, #8]
 800fffa:	200a      	movs	r0, #10
 800fffc:	f7f8 fd42 	bl	8008a84 <memp_free>
    if (handler != NULL) {
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d0da      	beq.n	800ffbc <sys_check_timeouts+0xc>
      handler(arg);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6838      	ldr	r0, [r7, #0]
 801000a:	4798      	blx	r3
  do {
 801000c:	e7d6      	b.n	800ffbc <sys_check_timeouts+0xc>
      return;
 801000e:	bf00      	nop
 8010010:	e000      	b.n	8010014 <sys_check_timeouts+0x64>
      return;
 8010012:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010014:	3710      	adds	r7, #16
 8010016:	46bd      	mov	sp, r7
 8010018:	bd80      	pop	{r7, pc}
 801001a:	bf00      	nop
 801001c:	200083e0 	.word	0x200083e0
 8010020:	200083e4 	.word	0x200083e4

08010024 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801002a:	4b16      	ldr	r3, [pc, #88]	; (8010084 <sys_timeouts_sleeptime+0x60>)
 801002c:	681b      	ldr	r3, [r3, #0]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d102      	bne.n	8010038 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8010032:	f04f 33ff 	mov.w	r3, #4294967295
 8010036:	e020      	b.n	801007a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8010038:	f007 f9fa 	bl	8017430 <sys_now>
 801003c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801003e:	4b11      	ldr	r3, [pc, #68]	; (8010084 <sys_timeouts_sleeptime+0x60>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	685a      	ldr	r2, [r3, #4]
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	1ad3      	subs	r3, r2, r3
 8010048:	0fdb      	lsrs	r3, r3, #31
 801004a:	f003 0301 	and.w	r3, r3, #1
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d001      	beq.n	8010058 <sys_timeouts_sleeptime+0x34>
    return 0;
 8010054:	2300      	movs	r3, #0
 8010056:	e010      	b.n	801007a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8010058:	4b0a      	ldr	r3, [pc, #40]	; (8010084 <sys_timeouts_sleeptime+0x60>)
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	685a      	ldr	r2, [r3, #4]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8010064:	683b      	ldr	r3, [r7, #0]
 8010066:	2b00      	cmp	r3, #0
 8010068:	da06      	bge.n	8010078 <sys_timeouts_sleeptime+0x54>
 801006a:	4b07      	ldr	r3, [pc, #28]	; (8010088 <sys_timeouts_sleeptime+0x64>)
 801006c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8010070:	4906      	ldr	r1, [pc, #24]	; (801008c <sys_timeouts_sleeptime+0x68>)
 8010072:	4807      	ldr	r0, [pc, #28]	; (8010090 <sys_timeouts_sleeptime+0x6c>)
 8010074:	f007 ff8e 	bl	8017f94 <iprintf>
    return ret;
 8010078:	683b      	ldr	r3, [r7, #0]
  }
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}
 8010082:	bf00      	nop
 8010084:	200083e0 	.word	0x200083e0
 8010088:	0801b8bc 	.word	0x0801b8bc
 801008c:	0801b990 	.word	0x0801b990
 8010090:	0801b930 	.word	0x0801b930

08010094 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010098:	f007 fff8 	bl	801808c <rand>
 801009c:	4603      	mov	r3, r0
 801009e:	b29b      	uxth	r3, r3
 80100a0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80100a4:	b29b      	uxth	r3, r3
 80100a6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	4b01      	ldr	r3, [pc, #4]	; (80100b4 <udp_init+0x20>)
 80100ae:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80100b0:	bf00      	nop
 80100b2:	bd80      	pop	{r7, pc}
 80100b4:	20000014 	.word	0x20000014

080100b8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80100b8:	b480      	push	{r7}
 80100ba:	b083      	sub	sp, #12
 80100bc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 80100be:	2300      	movs	r3, #0
 80100c0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80100c2:	4b17      	ldr	r3, [pc, #92]	; (8010120 <udp_new_port+0x68>)
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	1c5a      	adds	r2, r3, #1
 80100c8:	b291      	uxth	r1, r2
 80100ca:	4a15      	ldr	r2, [pc, #84]	; (8010120 <udp_new_port+0x68>)
 80100cc:	8011      	strh	r1, [r2, #0]
 80100ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80100d2:	4293      	cmp	r3, r2
 80100d4:	d103      	bne.n	80100de <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80100d6:	4b12      	ldr	r3, [pc, #72]	; (8010120 <udp_new_port+0x68>)
 80100d8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80100dc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80100de:	4b11      	ldr	r3, [pc, #68]	; (8010124 <udp_new_port+0x6c>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	603b      	str	r3, [r7, #0]
 80100e4:	e011      	b.n	801010a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	8a5a      	ldrh	r2, [r3, #18]
 80100ea:	4b0d      	ldr	r3, [pc, #52]	; (8010120 <udp_new_port+0x68>)
 80100ec:	881b      	ldrh	r3, [r3, #0]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d108      	bne.n	8010104 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80100f2:	88fb      	ldrh	r3, [r7, #6]
 80100f4:	3301      	adds	r3, #1
 80100f6:	80fb      	strh	r3, [r7, #6]
 80100f8:	88fb      	ldrh	r3, [r7, #6]
 80100fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80100fe:	d3e0      	bcc.n	80100c2 <udp_new_port+0xa>
        return 0;
 8010100:	2300      	movs	r3, #0
 8010102:	e007      	b.n	8010114 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	68db      	ldr	r3, [r3, #12]
 8010108:	603b      	str	r3, [r7, #0]
 801010a:	683b      	ldr	r3, [r7, #0]
 801010c:	2b00      	cmp	r3, #0
 801010e:	d1ea      	bne.n	80100e6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010110:	4b03      	ldr	r3, [pc, #12]	; (8010120 <udp_new_port+0x68>)
 8010112:	881b      	ldrh	r3, [r3, #0]
}
 8010114:	4618      	mov	r0, r3
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	20000014 	.word	0x20000014
 8010124:	2000c4f4 	.word	0x2000c4f4

08010128 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	b084      	sub	sp, #16
 801012c:	af00      	add	r7, sp, #0
 801012e:	60f8      	str	r0, [r7, #12]
 8010130:	60b9      	str	r1, [r7, #8]
 8010132:	4613      	mov	r3, r2
 8010134:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d105      	bne.n	8010148 <udp_input_local_match+0x20>
 801013c:	4b27      	ldr	r3, [pc, #156]	; (80101dc <udp_input_local_match+0xb4>)
 801013e:	2287      	movs	r2, #135	; 0x87
 8010140:	4927      	ldr	r1, [pc, #156]	; (80101e0 <udp_input_local_match+0xb8>)
 8010142:	4828      	ldr	r0, [pc, #160]	; (80101e4 <udp_input_local_match+0xbc>)
 8010144:	f007 ff26 	bl	8017f94 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d105      	bne.n	801015a <udp_input_local_match+0x32>
 801014e:	4b23      	ldr	r3, [pc, #140]	; (80101dc <udp_input_local_match+0xb4>)
 8010150:	2288      	movs	r2, #136	; 0x88
 8010152:	4925      	ldr	r1, [pc, #148]	; (80101e8 <udp_input_local_match+0xc0>)
 8010154:	4823      	ldr	r0, [pc, #140]	; (80101e4 <udp_input_local_match+0xbc>)
 8010156:	f007 ff1d 	bl	8017f94 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	7a1b      	ldrb	r3, [r3, #8]
 801015e:	2b00      	cmp	r3, #0
 8010160:	d00b      	beq.n	801017a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	7a1a      	ldrb	r2, [r3, #8]
 8010166:	4b21      	ldr	r3, [pc, #132]	; (80101ec <udp_input_local_match+0xc4>)
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801016e:	3301      	adds	r3, #1
 8010170:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010172:	429a      	cmp	r2, r3
 8010174:	d001      	beq.n	801017a <udp_input_local_match+0x52>
    return 0;
 8010176:	2300      	movs	r3, #0
 8010178:	e02b      	b.n	80101d2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801017a:	79fb      	ldrb	r3, [r7, #7]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d018      	beq.n	80101b2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d013      	beq.n	80101ae <udp_input_local_match+0x86>
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d00f      	beq.n	80101ae <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801018e:	4b17      	ldr	r3, [pc, #92]	; (80101ec <udp_input_local_match+0xc4>)
 8010190:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010196:	d00a      	beq.n	80101ae <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	4b13      	ldr	r3, [pc, #76]	; (80101ec <udp_input_local_match+0xc4>)
 801019e:	695b      	ldr	r3, [r3, #20]
 80101a0:	405a      	eors	r2, r3
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	3308      	adds	r3, #8
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d110      	bne.n	80101d0 <udp_input_local_match+0xa8>
          return 1;
 80101ae:	2301      	movs	r3, #1
 80101b0:	e00f      	b.n	80101d2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80101b2:	68fb      	ldr	r3, [r7, #12]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d009      	beq.n	80101cc <udp_input_local_match+0xa4>
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d005      	beq.n	80101cc <udp_input_local_match+0xa4>
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	681a      	ldr	r2, [r3, #0]
 80101c4:	4b09      	ldr	r3, [pc, #36]	; (80101ec <udp_input_local_match+0xc4>)
 80101c6:	695b      	ldr	r3, [r3, #20]
 80101c8:	429a      	cmp	r2, r3
 80101ca:	d101      	bne.n	80101d0 <udp_input_local_match+0xa8>
        return 1;
 80101cc:	2301      	movs	r3, #1
 80101ce:	e000      	b.n	80101d2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80101d0:	2300      	movs	r3, #0
}
 80101d2:	4618      	mov	r0, r3
 80101d4:	3710      	adds	r7, #16
 80101d6:	46bd      	mov	sp, r7
 80101d8:	bd80      	pop	{r7, pc}
 80101da:	bf00      	nop
 80101dc:	0801b9a4 	.word	0x0801b9a4
 80101e0:	0801b9d4 	.word	0x0801b9d4
 80101e4:	0801b9f8 	.word	0x0801b9f8
 80101e8:	0801ba20 	.word	0x0801ba20
 80101ec:	20008da8 	.word	0x20008da8

080101f0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80101f0:	b590      	push	{r4, r7, lr}
 80101f2:	b08d      	sub	sp, #52	; 0x34
 80101f4:	af02      	add	r7, sp, #8
 80101f6:	6078      	str	r0, [r7, #4]
 80101f8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80101fa:	2300      	movs	r3, #0
 80101fc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d105      	bne.n	8010210 <udp_input+0x20>
 8010204:	4b7c      	ldr	r3, [pc, #496]	; (80103f8 <udp_input+0x208>)
 8010206:	22cf      	movs	r2, #207	; 0xcf
 8010208:	497c      	ldr	r1, [pc, #496]	; (80103fc <udp_input+0x20c>)
 801020a:	487d      	ldr	r0, [pc, #500]	; (8010400 <udp_input+0x210>)
 801020c:	f007 fec2 	bl	8017f94 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d105      	bne.n	8010222 <udp_input+0x32>
 8010216:	4b78      	ldr	r3, [pc, #480]	; (80103f8 <udp_input+0x208>)
 8010218:	22d0      	movs	r2, #208	; 0xd0
 801021a:	497a      	ldr	r1, [pc, #488]	; (8010404 <udp_input+0x214>)
 801021c:	4878      	ldr	r0, [pc, #480]	; (8010400 <udp_input+0x210>)
 801021e:	f007 feb9 	bl	8017f94 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	895b      	ldrh	r3, [r3, #10]
 8010226:	2b07      	cmp	r3, #7
 8010228:	d803      	bhi.n	8010232 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f7f9 fad6 	bl	80097dc <pbuf_free>
    goto end;
 8010230:	e0de      	b.n	80103f0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	685b      	ldr	r3, [r3, #4]
 8010236:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010238:	4b73      	ldr	r3, [pc, #460]	; (8010408 <udp_input+0x218>)
 801023a:	695a      	ldr	r2, [r3, #20]
 801023c:	4b72      	ldr	r3, [pc, #456]	; (8010408 <udp_input+0x218>)
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	4619      	mov	r1, r3
 8010242:	4610      	mov	r0, r2
 8010244:	f003 fe20 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8010248:	4603      	mov	r3, r0
 801024a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	881b      	ldrh	r3, [r3, #0]
 8010250:	b29b      	uxth	r3, r3
 8010252:	4618      	mov	r0, r3
 8010254:	f7f7 ff0e 	bl	8008074 <lwip_htons>
 8010258:	4603      	mov	r3, r0
 801025a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801025c:	697b      	ldr	r3, [r7, #20]
 801025e:	885b      	ldrh	r3, [r3, #2]
 8010260:	b29b      	uxth	r3, r3
 8010262:	4618      	mov	r0, r3
 8010264:	f7f7 ff06 	bl	8008074 <lwip_htons>
 8010268:	4603      	mov	r3, r0
 801026a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801026c:	2300      	movs	r3, #0
 801026e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010270:	2300      	movs	r3, #0
 8010272:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010274:	2300      	movs	r3, #0
 8010276:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010278:	4b64      	ldr	r3, [pc, #400]	; (801040c <udp_input+0x21c>)
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	627b      	str	r3, [r7, #36]	; 0x24
 801027e:	e054      	b.n	801032a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010282:	8a5b      	ldrh	r3, [r3, #18]
 8010284:	89fa      	ldrh	r2, [r7, #14]
 8010286:	429a      	cmp	r2, r3
 8010288:	d14a      	bne.n	8010320 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801028a:	7cfb      	ldrb	r3, [r7, #19]
 801028c:	461a      	mov	r2, r3
 801028e:	6839      	ldr	r1, [r7, #0]
 8010290:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010292:	f7ff ff49 	bl	8010128 <udp_input_local_match>
 8010296:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010298:	2b00      	cmp	r3, #0
 801029a:	d041      	beq.n	8010320 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029e:	7c1b      	ldrb	r3, [r3, #16]
 80102a0:	f003 0304 	and.w	r3, r3, #4
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d11d      	bne.n	80102e4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80102a8:	69fb      	ldr	r3, [r7, #28]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d102      	bne.n	80102b4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80102ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102b0:	61fb      	str	r3, [r7, #28]
 80102b2:	e017      	b.n	80102e4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80102b4:	7cfb      	ldrb	r3, [r7, #19]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d014      	beq.n	80102e4 <udp_input+0xf4>
 80102ba:	4b53      	ldr	r3, [pc, #332]	; (8010408 <udp_input+0x218>)
 80102bc:	695b      	ldr	r3, [r3, #20]
 80102be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102c2:	d10f      	bne.n	80102e4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80102c4:	69fb      	ldr	r3, [r7, #28]
 80102c6:	681a      	ldr	r2, [r3, #0]
 80102c8:	683b      	ldr	r3, [r7, #0]
 80102ca:	3304      	adds	r3, #4
 80102cc:	681b      	ldr	r3, [r3, #0]
 80102ce:	429a      	cmp	r2, r3
 80102d0:	d008      	beq.n	80102e4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80102d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	683b      	ldr	r3, [r7, #0]
 80102d8:	3304      	adds	r3, #4
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	429a      	cmp	r2, r3
 80102de:	d101      	bne.n	80102e4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80102e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80102e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102e6:	8a9b      	ldrh	r3, [r3, #20]
 80102e8:	8a3a      	ldrh	r2, [r7, #16]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d118      	bne.n	8010320 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80102ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d005      	beq.n	8010302 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	685a      	ldr	r2, [r3, #4]
 80102fa:	4b43      	ldr	r3, [pc, #268]	; (8010408 <udp_input+0x218>)
 80102fc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80102fe:	429a      	cmp	r2, r3
 8010300:	d10e      	bne.n	8010320 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010302:	6a3b      	ldr	r3, [r7, #32]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d014      	beq.n	8010332 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	68da      	ldr	r2, [r3, #12]
 801030c:	6a3b      	ldr	r3, [r7, #32]
 801030e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8010310:	4b3e      	ldr	r3, [pc, #248]	; (801040c <udp_input+0x21c>)
 8010312:	681a      	ldr	r2, [r3, #0]
 8010314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010316:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8010318:	4a3c      	ldr	r2, [pc, #240]	; (801040c <udp_input+0x21c>)
 801031a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801031c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801031e:	e008      	b.n	8010332 <udp_input+0x142>
      }
    }

    prev = pcb;
 8010320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010322:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010326:	68db      	ldr	r3, [r3, #12]
 8010328:	627b      	str	r3, [r7, #36]	; 0x24
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	2b00      	cmp	r3, #0
 801032e:	d1a7      	bne.n	8010280 <udp_input+0x90>
 8010330:	e000      	b.n	8010334 <udp_input+0x144>
        break;
 8010332:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8010334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010336:	2b00      	cmp	r3, #0
 8010338:	d101      	bne.n	801033e <udp_input+0x14e>
    pcb = uncon_pcb;
 801033a:	69fb      	ldr	r3, [r7, #28]
 801033c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801033e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010340:	2b00      	cmp	r3, #0
 8010342:	d002      	beq.n	801034a <udp_input+0x15a>
    for_us = 1;
 8010344:	2301      	movs	r3, #1
 8010346:	76fb      	strb	r3, [r7, #27]
 8010348:	e00a      	b.n	8010360 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801034a:	683b      	ldr	r3, [r7, #0]
 801034c:	3304      	adds	r3, #4
 801034e:	681a      	ldr	r2, [r3, #0]
 8010350:	4b2d      	ldr	r3, [pc, #180]	; (8010408 <udp_input+0x218>)
 8010352:	695b      	ldr	r3, [r3, #20]
 8010354:	429a      	cmp	r2, r3
 8010356:	bf0c      	ite	eq
 8010358:	2301      	moveq	r3, #1
 801035a:	2300      	movne	r3, #0
 801035c:	b2db      	uxtb	r3, r3
 801035e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8010360:	7efb      	ldrb	r3, [r7, #27]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d041      	beq.n	80103ea <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8010366:	2108      	movs	r1, #8
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f7f9 f9b1 	bl	80096d0 <pbuf_remove_header>
 801036e:	4603      	mov	r3, r0
 8010370:	2b00      	cmp	r3, #0
 8010372:	d00a      	beq.n	801038a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8010374:	4b20      	ldr	r3, [pc, #128]	; (80103f8 <udp_input+0x208>)
 8010376:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801037a:	4925      	ldr	r1, [pc, #148]	; (8010410 <udp_input+0x220>)
 801037c:	4820      	ldr	r0, [pc, #128]	; (8010400 <udp_input+0x210>)
 801037e:	f007 fe09 	bl	8017f94 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8010382:	6878      	ldr	r0, [r7, #4]
 8010384:	f7f9 fa2a 	bl	80097dc <pbuf_free>
      goto end;
 8010388:	e032      	b.n	80103f0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801038a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801038c:	2b00      	cmp	r3, #0
 801038e:	d012      	beq.n	80103b6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8010390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010392:	699b      	ldr	r3, [r3, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	d00a      	beq.n	80103ae <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	699c      	ldr	r4, [r3, #24]
 801039c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039e:	69d8      	ldr	r0, [r3, #28]
 80103a0:	8a3b      	ldrh	r3, [r7, #16]
 80103a2:	9300      	str	r3, [sp, #0]
 80103a4:	4b1b      	ldr	r3, [pc, #108]	; (8010414 <udp_input+0x224>)
 80103a6:	687a      	ldr	r2, [r7, #4]
 80103a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103aa:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80103ac:	e021      	b.n	80103f2 <udp_input+0x202>
        pbuf_free(p);
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7f9 fa14 	bl	80097dc <pbuf_free>
        goto end;
 80103b4:	e01c      	b.n	80103f0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80103b6:	7cfb      	ldrb	r3, [r7, #19]
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	d112      	bne.n	80103e2 <udp_input+0x1f2>
 80103bc:	4b12      	ldr	r3, [pc, #72]	; (8010408 <udp_input+0x218>)
 80103be:	695b      	ldr	r3, [r3, #20]
 80103c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80103c4:	2be0      	cmp	r3, #224	; 0xe0
 80103c6:	d00c      	beq.n	80103e2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80103c8:	4b0f      	ldr	r3, [pc, #60]	; (8010408 <udp_input+0x218>)
 80103ca:	899b      	ldrh	r3, [r3, #12]
 80103cc:	3308      	adds	r3, #8
 80103ce:	b29b      	uxth	r3, r3
 80103d0:	b21b      	sxth	r3, r3
 80103d2:	4619      	mov	r1, r3
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7f9 f9ee 	bl	80097b6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80103da:	2103      	movs	r1, #3
 80103dc:	6878      	ldr	r0, [r7, #4]
 80103de:	f003 fa17 	bl	8013810 <icmp_dest_unreach>
      pbuf_free(p);
 80103e2:	6878      	ldr	r0, [r7, #4]
 80103e4:	f7f9 f9fa 	bl	80097dc <pbuf_free>
  return;
 80103e8:	e003      	b.n	80103f2 <udp_input+0x202>
    pbuf_free(p);
 80103ea:	6878      	ldr	r0, [r7, #4]
 80103ec:	f7f9 f9f6 	bl	80097dc <pbuf_free>
  return;
 80103f0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80103f2:	372c      	adds	r7, #44	; 0x2c
 80103f4:	46bd      	mov	sp, r7
 80103f6:	bd90      	pop	{r4, r7, pc}
 80103f8:	0801b9a4 	.word	0x0801b9a4
 80103fc:	0801ba48 	.word	0x0801ba48
 8010400:	0801b9f8 	.word	0x0801b9f8
 8010404:	0801ba60 	.word	0x0801ba60
 8010408:	20008da8 	.word	0x20008da8
 801040c:	2000c4f4 	.word	0x2000c4f4
 8010410:	0801ba7c 	.word	0x0801ba7c
 8010414:	20008db8 	.word	0x20008db8

08010418 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8010418:	b580      	push	{r7, lr}
 801041a:	b088      	sub	sp, #32
 801041c:	af02      	add	r7, sp, #8
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
 8010424:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	2b00      	cmp	r3, #0
 801042a:	d109      	bne.n	8010440 <udp_sendto_if+0x28>
 801042c:	4b2e      	ldr	r3, [pc, #184]	; (80104e8 <udp_sendto_if+0xd0>)
 801042e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010432:	492e      	ldr	r1, [pc, #184]	; (80104ec <udp_sendto_if+0xd4>)
 8010434:	482e      	ldr	r0, [pc, #184]	; (80104f0 <udp_sendto_if+0xd8>)
 8010436:	f007 fdad 	bl	8017f94 <iprintf>
 801043a:	f06f 030f 	mvn.w	r3, #15
 801043e:	e04f      	b.n	80104e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8010440:	68bb      	ldr	r3, [r7, #8]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d109      	bne.n	801045a <udp_sendto_if+0x42>
 8010446:	4b28      	ldr	r3, [pc, #160]	; (80104e8 <udp_sendto_if+0xd0>)
 8010448:	f240 2281 	movw	r2, #641	; 0x281
 801044c:	4929      	ldr	r1, [pc, #164]	; (80104f4 <udp_sendto_if+0xdc>)
 801044e:	4828      	ldr	r0, [pc, #160]	; (80104f0 <udp_sendto_if+0xd8>)
 8010450:	f007 fda0 	bl	8017f94 <iprintf>
 8010454:	f06f 030f 	mvn.w	r3, #15
 8010458:	e042      	b.n	80104e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	2b00      	cmp	r3, #0
 801045e:	d109      	bne.n	8010474 <udp_sendto_if+0x5c>
 8010460:	4b21      	ldr	r3, [pc, #132]	; (80104e8 <udp_sendto_if+0xd0>)
 8010462:	f240 2282 	movw	r2, #642	; 0x282
 8010466:	4924      	ldr	r1, [pc, #144]	; (80104f8 <udp_sendto_if+0xe0>)
 8010468:	4821      	ldr	r0, [pc, #132]	; (80104f0 <udp_sendto_if+0xd8>)
 801046a:	f007 fd93 	bl	8017f94 <iprintf>
 801046e:	f06f 030f 	mvn.w	r3, #15
 8010472:	e035      	b.n	80104e0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8010474:	6a3b      	ldr	r3, [r7, #32]
 8010476:	2b00      	cmp	r3, #0
 8010478:	d109      	bne.n	801048e <udp_sendto_if+0x76>
 801047a:	4b1b      	ldr	r3, [pc, #108]	; (80104e8 <udp_sendto_if+0xd0>)
 801047c:	f240 2283 	movw	r2, #643	; 0x283
 8010480:	491e      	ldr	r1, [pc, #120]	; (80104fc <udp_sendto_if+0xe4>)
 8010482:	481b      	ldr	r0, [pc, #108]	; (80104f0 <udp_sendto_if+0xd8>)
 8010484:	f007 fd86 	bl	8017f94 <iprintf>
 8010488:	f06f 030f 	mvn.w	r3, #15
 801048c:	e028      	b.n	80104e0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d009      	beq.n	80104a8 <udp_sendto_if+0x90>
 8010494:	68fb      	ldr	r3, [r7, #12]
 8010496:	681b      	ldr	r3, [r3, #0]
 8010498:	2b00      	cmp	r3, #0
 801049a:	d005      	beq.n	80104a8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80104a4:	2be0      	cmp	r3, #224	; 0xe0
 80104a6:	d103      	bne.n	80104b0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80104a8:	6a3b      	ldr	r3, [r7, #32]
 80104aa:	3304      	adds	r3, #4
 80104ac:	617b      	str	r3, [r7, #20]
 80104ae:	e00b      	b.n	80104c8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	681a      	ldr	r2, [r3, #0]
 80104b4:	6a3b      	ldr	r3, [r7, #32]
 80104b6:	3304      	adds	r3, #4
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d002      	beq.n	80104c4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80104be:	f06f 0303 	mvn.w	r3, #3
 80104c2:	e00d      	b.n	80104e0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80104c8:	887a      	ldrh	r2, [r7, #2]
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	9301      	str	r3, [sp, #4]
 80104ce:	6a3b      	ldr	r3, [r7, #32]
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	4613      	mov	r3, r2
 80104d4:	687a      	ldr	r2, [r7, #4]
 80104d6:	68b9      	ldr	r1, [r7, #8]
 80104d8:	68f8      	ldr	r0, [r7, #12]
 80104da:	f000 f811 	bl	8010500 <udp_sendto_if_src>
 80104de:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80104e0:	4618      	mov	r0, r3
 80104e2:	3718      	adds	r7, #24
 80104e4:	46bd      	mov	sp, r7
 80104e6:	bd80      	pop	{r7, pc}
 80104e8:	0801b9a4 	.word	0x0801b9a4
 80104ec:	0801bb18 	.word	0x0801bb18
 80104f0:	0801b9f8 	.word	0x0801b9f8
 80104f4:	0801bb34 	.word	0x0801bb34
 80104f8:	0801bb50 	.word	0x0801bb50
 80104fc:	0801bb70 	.word	0x0801bb70

08010500 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8010500:	b580      	push	{r7, lr}
 8010502:	b08c      	sub	sp, #48	; 0x30
 8010504:	af04      	add	r7, sp, #16
 8010506:	60f8      	str	r0, [r7, #12]
 8010508:	60b9      	str	r1, [r7, #8]
 801050a:	607a      	str	r2, [r7, #4]
 801050c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d109      	bne.n	8010528 <udp_sendto_if_src+0x28>
 8010514:	4b65      	ldr	r3, [pc, #404]	; (80106ac <udp_sendto_if_src+0x1ac>)
 8010516:	f240 22d1 	movw	r2, #721	; 0x2d1
 801051a:	4965      	ldr	r1, [pc, #404]	; (80106b0 <udp_sendto_if_src+0x1b0>)
 801051c:	4865      	ldr	r0, [pc, #404]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 801051e:	f007 fd39 	bl	8017f94 <iprintf>
 8010522:	f06f 030f 	mvn.w	r3, #15
 8010526:	e0bc      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	2b00      	cmp	r3, #0
 801052c:	d109      	bne.n	8010542 <udp_sendto_if_src+0x42>
 801052e:	4b5f      	ldr	r3, [pc, #380]	; (80106ac <udp_sendto_if_src+0x1ac>)
 8010530:	f240 22d2 	movw	r2, #722	; 0x2d2
 8010534:	4960      	ldr	r1, [pc, #384]	; (80106b8 <udp_sendto_if_src+0x1b8>)
 8010536:	485f      	ldr	r0, [pc, #380]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 8010538:	f007 fd2c 	bl	8017f94 <iprintf>
 801053c:	f06f 030f 	mvn.w	r3, #15
 8010540:	e0af      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d109      	bne.n	801055c <udp_sendto_if_src+0x5c>
 8010548:	4b58      	ldr	r3, [pc, #352]	; (80106ac <udp_sendto_if_src+0x1ac>)
 801054a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801054e:	495b      	ldr	r1, [pc, #364]	; (80106bc <udp_sendto_if_src+0x1bc>)
 8010550:	4858      	ldr	r0, [pc, #352]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 8010552:	f007 fd1f 	bl	8017f94 <iprintf>
 8010556:	f06f 030f 	mvn.w	r3, #15
 801055a:	e0a2      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801055c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801055e:	2b00      	cmp	r3, #0
 8010560:	d109      	bne.n	8010576 <udp_sendto_if_src+0x76>
 8010562:	4b52      	ldr	r3, [pc, #328]	; (80106ac <udp_sendto_if_src+0x1ac>)
 8010564:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010568:	4955      	ldr	r1, [pc, #340]	; (80106c0 <udp_sendto_if_src+0x1c0>)
 801056a:	4852      	ldr	r0, [pc, #328]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 801056c:	f007 fd12 	bl	8017f94 <iprintf>
 8010570:	f06f 030f 	mvn.w	r3, #15
 8010574:	e095      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8010576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010578:	2b00      	cmp	r3, #0
 801057a:	d109      	bne.n	8010590 <udp_sendto_if_src+0x90>
 801057c:	4b4b      	ldr	r3, [pc, #300]	; (80106ac <udp_sendto_if_src+0x1ac>)
 801057e:	f240 22d5 	movw	r2, #725	; 0x2d5
 8010582:	4950      	ldr	r1, [pc, #320]	; (80106c4 <udp_sendto_if_src+0x1c4>)
 8010584:	484b      	ldr	r0, [pc, #300]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 8010586:	f007 fd05 	bl	8017f94 <iprintf>
 801058a:	f06f 030f 	mvn.w	r3, #15
 801058e:	e088      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	8a5b      	ldrh	r3, [r3, #18]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d10f      	bne.n	80105b8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010598:	68f9      	ldr	r1, [r7, #12]
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	8a5b      	ldrh	r3, [r3, #18]
 801059e:	461a      	mov	r2, r3
 80105a0:	68f8      	ldr	r0, [r7, #12]
 80105a2:	f000 f893 	bl	80106cc <udp_bind>
 80105a6:	4603      	mov	r3, r0
 80105a8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80105aa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d002      	beq.n	80105b8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80105b2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80105b6:	e074      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	891b      	ldrh	r3, [r3, #8]
 80105bc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80105c0:	4293      	cmp	r3, r2
 80105c2:	d902      	bls.n	80105ca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80105c4:	f04f 33ff 	mov.w	r3, #4294967295
 80105c8:	e06b      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80105ca:	2108      	movs	r1, #8
 80105cc:	68b8      	ldr	r0, [r7, #8]
 80105ce:	f7f9 f86f 	bl	80096b0 <pbuf_add_header>
 80105d2:	4603      	mov	r3, r0
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d015      	beq.n	8010604 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80105d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80105dc:	2108      	movs	r1, #8
 80105de:	2022      	movs	r0, #34	; 0x22
 80105e0:	f7f8 fe1c 	bl	800921c <pbuf_alloc>
 80105e4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d102      	bne.n	80105f2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80105ec:	f04f 33ff 	mov.w	r3, #4294967295
 80105f0:	e057      	b.n	80106a2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80105f2:	68bb      	ldr	r3, [r7, #8]
 80105f4:	891b      	ldrh	r3, [r3, #8]
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d006      	beq.n	8010608 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80105fa:	68b9      	ldr	r1, [r7, #8]
 80105fc:	69f8      	ldr	r0, [r7, #28]
 80105fe:	f7f9 fa11 	bl	8009a24 <pbuf_chain>
 8010602:	e001      	b.n	8010608 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8010608:	69fb      	ldr	r3, [r7, #28]
 801060a:	895b      	ldrh	r3, [r3, #10]
 801060c:	2b07      	cmp	r3, #7
 801060e:	d806      	bhi.n	801061e <udp_sendto_if_src+0x11e>
 8010610:	4b26      	ldr	r3, [pc, #152]	; (80106ac <udp_sendto_if_src+0x1ac>)
 8010612:	f240 320e 	movw	r2, #782	; 0x30e
 8010616:	492c      	ldr	r1, [pc, #176]	; (80106c8 <udp_sendto_if_src+0x1c8>)
 8010618:	4826      	ldr	r0, [pc, #152]	; (80106b4 <udp_sendto_if_src+0x1b4>)
 801061a:	f007 fcbb 	bl	8017f94 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801061e:	69fb      	ldr	r3, [r7, #28]
 8010620:	685b      	ldr	r3, [r3, #4]
 8010622:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	8a5b      	ldrh	r3, [r3, #18]
 8010628:	4618      	mov	r0, r3
 801062a:	f7f7 fd23 	bl	8008074 <lwip_htons>
 801062e:	4603      	mov	r3, r0
 8010630:	461a      	mov	r2, r3
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8010636:	887b      	ldrh	r3, [r7, #2]
 8010638:	4618      	mov	r0, r3
 801063a:	f7f7 fd1b 	bl	8008074 <lwip_htons>
 801063e:	4603      	mov	r3, r0
 8010640:	461a      	mov	r2, r3
 8010642:	697b      	ldr	r3, [r7, #20]
 8010644:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8010646:	697b      	ldr	r3, [r7, #20]
 8010648:	2200      	movs	r2, #0
 801064a:	719a      	strb	r2, [r3, #6]
 801064c:	2200      	movs	r2, #0
 801064e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8010650:	69fb      	ldr	r3, [r7, #28]
 8010652:	891b      	ldrh	r3, [r3, #8]
 8010654:	4618      	mov	r0, r3
 8010656:	f7f7 fd0d 	bl	8008074 <lwip_htons>
 801065a:	4603      	mov	r3, r0
 801065c:	461a      	mov	r2, r3
 801065e:	697b      	ldr	r3, [r7, #20]
 8010660:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8010662:	2311      	movs	r3, #17
 8010664:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	7adb      	ldrb	r3, [r3, #11]
 801066a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	7a9b      	ldrb	r3, [r3, #10]
 8010670:	7cb9      	ldrb	r1, [r7, #18]
 8010672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010674:	9202      	str	r2, [sp, #8]
 8010676:	7cfa      	ldrb	r2, [r7, #19]
 8010678:	9201      	str	r2, [sp, #4]
 801067a:	9300      	str	r3, [sp, #0]
 801067c:	460b      	mov	r3, r1
 801067e:	687a      	ldr	r2, [r7, #4]
 8010680:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010682:	69f8      	ldr	r0, [r7, #28]
 8010684:	f003 fb52 	bl	8013d2c <ip4_output_if_src>
 8010688:	4603      	mov	r3, r0
 801068a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801068c:	69fa      	ldr	r2, [r7, #28]
 801068e:	68bb      	ldr	r3, [r7, #8]
 8010690:	429a      	cmp	r2, r3
 8010692:	d004      	beq.n	801069e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8010694:	69f8      	ldr	r0, [r7, #28]
 8010696:	f7f9 f8a1 	bl	80097dc <pbuf_free>
    q = NULL;
 801069a:	2300      	movs	r3, #0
 801069c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801069e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80106a2:	4618      	mov	r0, r3
 80106a4:	3720      	adds	r7, #32
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
 80106aa:	bf00      	nop
 80106ac:	0801b9a4 	.word	0x0801b9a4
 80106b0:	0801bb90 	.word	0x0801bb90
 80106b4:	0801b9f8 	.word	0x0801b9f8
 80106b8:	0801bbb0 	.word	0x0801bbb0
 80106bc:	0801bbd0 	.word	0x0801bbd0
 80106c0:	0801bbf4 	.word	0x0801bbf4
 80106c4:	0801bc18 	.word	0x0801bc18
 80106c8:	0801bc3c 	.word	0x0801bc3c

080106cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b086      	sub	sp, #24
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	60f8      	str	r0, [r7, #12]
 80106d4:	60b9      	str	r1, [r7, #8]
 80106d6:	4613      	mov	r3, r2
 80106d8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80106da:	68bb      	ldr	r3, [r7, #8]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d101      	bne.n	80106e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80106e0:	4b39      	ldr	r3, [pc, #228]	; (80107c8 <udp_bind+0xfc>)
 80106e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d109      	bne.n	80106fe <udp_bind+0x32>
 80106ea:	4b38      	ldr	r3, [pc, #224]	; (80107cc <udp_bind+0x100>)
 80106ec:	f240 32b7 	movw	r2, #951	; 0x3b7
 80106f0:	4937      	ldr	r1, [pc, #220]	; (80107d0 <udp_bind+0x104>)
 80106f2:	4838      	ldr	r0, [pc, #224]	; (80107d4 <udp_bind+0x108>)
 80106f4:	f007 fc4e 	bl	8017f94 <iprintf>
 80106f8:	f06f 030f 	mvn.w	r3, #15
 80106fc:	e060      	b.n	80107c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80106fe:	2300      	movs	r3, #0
 8010700:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010702:	4b35      	ldr	r3, [pc, #212]	; (80107d8 <udp_bind+0x10c>)
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	617b      	str	r3, [r7, #20]
 8010708:	e009      	b.n	801071e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801070a:	68fa      	ldr	r2, [r7, #12]
 801070c:	697b      	ldr	r3, [r7, #20]
 801070e:	429a      	cmp	r2, r3
 8010710:	d102      	bne.n	8010718 <udp_bind+0x4c>
      rebind = 1;
 8010712:	2301      	movs	r3, #1
 8010714:	74fb      	strb	r3, [r7, #19]
      break;
 8010716:	e005      	b.n	8010724 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	68db      	ldr	r3, [r3, #12]
 801071c:	617b      	str	r3, [r7, #20]
 801071e:	697b      	ldr	r3, [r7, #20]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d1f2      	bne.n	801070a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8010724:	88fb      	ldrh	r3, [r7, #6]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d109      	bne.n	801073e <udp_bind+0x72>
    port = udp_new_port();
 801072a:	f7ff fcc5 	bl	80100b8 <udp_new_port>
 801072e:	4603      	mov	r3, r0
 8010730:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8010732:	88fb      	ldrh	r3, [r7, #6]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d12c      	bne.n	8010792 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8010738:	f06f 0307 	mvn.w	r3, #7
 801073c:	e040      	b.n	80107c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801073e:	4b26      	ldr	r3, [pc, #152]	; (80107d8 <udp_bind+0x10c>)
 8010740:	681b      	ldr	r3, [r3, #0]
 8010742:	617b      	str	r3, [r7, #20]
 8010744:	e022      	b.n	801078c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8010746:	68fa      	ldr	r2, [r7, #12]
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	429a      	cmp	r2, r3
 801074c:	d01b      	beq.n	8010786 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801074e:	697b      	ldr	r3, [r7, #20]
 8010750:	8a5b      	ldrh	r3, [r3, #18]
 8010752:	88fa      	ldrh	r2, [r7, #6]
 8010754:	429a      	cmp	r2, r3
 8010756:	d116      	bne.n	8010786 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	681a      	ldr	r2, [r3, #0]
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8010760:	429a      	cmp	r2, r3
 8010762:	d00d      	beq.n	8010780 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d00a      	beq.n	8010780 <udp_bind+0xb4>
 801076a:	68bb      	ldr	r3, [r7, #8]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d006      	beq.n	8010780 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010772:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8010774:	2b00      	cmp	r3, #0
 8010776:	d003      	beq.n	8010780 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	2b00      	cmp	r3, #0
 801077e:	d102      	bne.n	8010786 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8010780:	f06f 0307 	mvn.w	r3, #7
 8010784:	e01c      	b.n	80107c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010786:	697b      	ldr	r3, [r7, #20]
 8010788:	68db      	ldr	r3, [r3, #12]
 801078a:	617b      	str	r3, [r7, #20]
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d1d9      	bne.n	8010746 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	2b00      	cmp	r3, #0
 8010796:	d002      	beq.n	801079e <udp_bind+0xd2>
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	e000      	b.n	80107a0 <udp_bind+0xd4>
 801079e:	2300      	movs	r3, #0
 80107a0:	68fa      	ldr	r2, [r7, #12]
 80107a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	88fa      	ldrh	r2, [r7, #6]
 80107a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80107aa:	7cfb      	ldrb	r3, [r7, #19]
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d106      	bne.n	80107be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80107b0:	4b09      	ldr	r3, [pc, #36]	; (80107d8 <udp_bind+0x10c>)
 80107b2:	681a      	ldr	r2, [r3, #0]
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80107b8:	4a07      	ldr	r2, [pc, #28]	; (80107d8 <udp_bind+0x10c>)
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80107be:	2300      	movs	r3, #0
}
 80107c0:	4618      	mov	r0, r3
 80107c2:	3718      	adds	r7, #24
 80107c4:	46bd      	mov	sp, r7
 80107c6:	bd80      	pop	{r7, pc}
 80107c8:	0801cb08 	.word	0x0801cb08
 80107cc:	0801b9a4 	.word	0x0801b9a4
 80107d0:	0801bc6c 	.word	0x0801bc6c
 80107d4:	0801b9f8 	.word	0x0801b9f8
 80107d8:	2000c4f4 	.word	0x2000c4f4

080107dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	60b9      	str	r1, [r7, #8]
 80107e6:	4613      	mov	r3, r2
 80107e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d109      	bne.n	8010804 <udp_connect+0x28>
 80107f0:	4b2c      	ldr	r3, [pc, #176]	; (80108a4 <udp_connect+0xc8>)
 80107f2:	f240 4235 	movw	r2, #1077	; 0x435
 80107f6:	492c      	ldr	r1, [pc, #176]	; (80108a8 <udp_connect+0xcc>)
 80107f8:	482c      	ldr	r0, [pc, #176]	; (80108ac <udp_connect+0xd0>)
 80107fa:	f007 fbcb 	bl	8017f94 <iprintf>
 80107fe:	f06f 030f 	mvn.w	r3, #15
 8010802:	e04b      	b.n	801089c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d109      	bne.n	801081e <udp_connect+0x42>
 801080a:	4b26      	ldr	r3, [pc, #152]	; (80108a4 <udp_connect+0xc8>)
 801080c:	f240 4236 	movw	r2, #1078	; 0x436
 8010810:	4927      	ldr	r1, [pc, #156]	; (80108b0 <udp_connect+0xd4>)
 8010812:	4826      	ldr	r0, [pc, #152]	; (80108ac <udp_connect+0xd0>)
 8010814:	f007 fbbe 	bl	8017f94 <iprintf>
 8010818:	f06f 030f 	mvn.w	r3, #15
 801081c:	e03e      	b.n	801089c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	8a5b      	ldrh	r3, [r3, #18]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10f      	bne.n	8010846 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8010826:	68f9      	ldr	r1, [r7, #12]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	8a5b      	ldrh	r3, [r3, #18]
 801082c:	461a      	mov	r2, r3
 801082e:	68f8      	ldr	r0, [r7, #12]
 8010830:	f7ff ff4c 	bl	80106cc <udp_bind>
 8010834:	4603      	mov	r3, r0
 8010836:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8010838:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d002      	beq.n	8010846 <udp_connect+0x6a>
      return err;
 8010840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8010844:	e02a      	b.n	801089c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d002      	beq.n	8010852 <udp_connect+0x76>
 801084c:	68bb      	ldr	r3, [r7, #8]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	e000      	b.n	8010854 <udp_connect+0x78>
 8010852:	2300      	movs	r3, #0
 8010854:	68fa      	ldr	r2, [r7, #12]
 8010856:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	88fa      	ldrh	r2, [r7, #6]
 801085c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	7c1b      	ldrb	r3, [r3, #16]
 8010862:	f043 0304 	orr.w	r3, r3, #4
 8010866:	b2da      	uxtb	r2, r3
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801086c:	4b11      	ldr	r3, [pc, #68]	; (80108b4 <udp_connect+0xd8>)
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	617b      	str	r3, [r7, #20]
 8010872:	e008      	b.n	8010886 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8010874:	68fa      	ldr	r2, [r7, #12]
 8010876:	697b      	ldr	r3, [r7, #20]
 8010878:	429a      	cmp	r2, r3
 801087a:	d101      	bne.n	8010880 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801087c:	2300      	movs	r3, #0
 801087e:	e00d      	b.n	801089c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	68db      	ldr	r3, [r3, #12]
 8010884:	617b      	str	r3, [r7, #20]
 8010886:	697b      	ldr	r3, [r7, #20]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d1f3      	bne.n	8010874 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801088c:	4b09      	ldr	r3, [pc, #36]	; (80108b4 <udp_connect+0xd8>)
 801088e:	681a      	ldr	r2, [r3, #0]
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8010894:	4a07      	ldr	r2, [pc, #28]	; (80108b4 <udp_connect+0xd8>)
 8010896:	68fb      	ldr	r3, [r7, #12]
 8010898:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801089a:	2300      	movs	r3, #0
}
 801089c:	4618      	mov	r0, r3
 801089e:	3718      	adds	r7, #24
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}
 80108a4:	0801b9a4 	.word	0x0801b9a4
 80108a8:	0801bc84 	.word	0x0801bc84
 80108ac:	0801b9f8 	.word	0x0801b9f8
 80108b0:	0801bca0 	.word	0x0801bca0
 80108b4:	2000c4f4 	.word	0x2000c4f4

080108b8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80108b8:	b580      	push	{r7, lr}
 80108ba:	b084      	sub	sp, #16
 80108bc:	af00      	add	r7, sp, #0
 80108be:	60f8      	str	r0, [r7, #12]
 80108c0:	60b9      	str	r1, [r7, #8]
 80108c2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80108c4:	68fb      	ldr	r3, [r7, #12]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d107      	bne.n	80108da <udp_recv+0x22>
 80108ca:	4b08      	ldr	r3, [pc, #32]	; (80108ec <udp_recv+0x34>)
 80108cc:	f240 428a 	movw	r2, #1162	; 0x48a
 80108d0:	4907      	ldr	r1, [pc, #28]	; (80108f0 <udp_recv+0x38>)
 80108d2:	4808      	ldr	r0, [pc, #32]	; (80108f4 <udp_recv+0x3c>)
 80108d4:	f007 fb5e 	bl	8017f94 <iprintf>
 80108d8:	e005      	b.n	80108e6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80108da:	68fb      	ldr	r3, [r7, #12]
 80108dc:	68ba      	ldr	r2, [r7, #8]
 80108de:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	687a      	ldr	r2, [r7, #4]
 80108e4:	61da      	str	r2, [r3, #28]
}
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	0801b9a4 	.word	0x0801b9a4
 80108f0:	0801bcd8 	.word	0x0801bcd8
 80108f4:	0801b9f8 	.word	0x0801b9f8

080108f8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80108f8:	b580      	push	{r7, lr}
 80108fa:	b084      	sub	sp, #16
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	2b00      	cmp	r3, #0
 8010904:	d107      	bne.n	8010916 <udp_remove+0x1e>
 8010906:	4b19      	ldr	r3, [pc, #100]	; (801096c <udp_remove+0x74>)
 8010908:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801090c:	4918      	ldr	r1, [pc, #96]	; (8010970 <udp_remove+0x78>)
 801090e:	4819      	ldr	r0, [pc, #100]	; (8010974 <udp_remove+0x7c>)
 8010910:	f007 fb40 	bl	8017f94 <iprintf>
 8010914:	e026      	b.n	8010964 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8010916:	4b18      	ldr	r3, [pc, #96]	; (8010978 <udp_remove+0x80>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	687a      	ldr	r2, [r7, #4]
 801091c:	429a      	cmp	r2, r3
 801091e:	d105      	bne.n	801092c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8010920:	4b15      	ldr	r3, [pc, #84]	; (8010978 <udp_remove+0x80>)
 8010922:	681b      	ldr	r3, [r3, #0]
 8010924:	68db      	ldr	r3, [r3, #12]
 8010926:	4a14      	ldr	r2, [pc, #80]	; (8010978 <udp_remove+0x80>)
 8010928:	6013      	str	r3, [r2, #0]
 801092a:	e017      	b.n	801095c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801092c:	4b12      	ldr	r3, [pc, #72]	; (8010978 <udp_remove+0x80>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	60fb      	str	r3, [r7, #12]
 8010932:	e010      	b.n	8010956 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8010934:	68fb      	ldr	r3, [r7, #12]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d009      	beq.n	8010950 <udp_remove+0x58>
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	68db      	ldr	r3, [r3, #12]
 8010940:	687a      	ldr	r2, [r7, #4]
 8010942:	429a      	cmp	r2, r3
 8010944:	d104      	bne.n	8010950 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	68da      	ldr	r2, [r3, #12]
 801094a:	68fb      	ldr	r3, [r7, #12]
 801094c:	60da      	str	r2, [r3, #12]
        break;
 801094e:	e005      	b.n	801095c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	68db      	ldr	r3, [r3, #12]
 8010954:	60fb      	str	r3, [r7, #12]
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	2b00      	cmp	r3, #0
 801095a:	d1eb      	bne.n	8010934 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801095c:	6879      	ldr	r1, [r7, #4]
 801095e:	2000      	movs	r0, #0
 8010960:	f7f8 f890 	bl	8008a84 <memp_free>
}
 8010964:	3710      	adds	r7, #16
 8010966:	46bd      	mov	sp, r7
 8010968:	bd80      	pop	{r7, pc}
 801096a:	bf00      	nop
 801096c:	0801b9a4 	.word	0x0801b9a4
 8010970:	0801bcf0 	.word	0x0801bcf0
 8010974:	0801b9f8 	.word	0x0801b9f8
 8010978:	2000c4f4 	.word	0x2000c4f4

0801097c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801097c:	b580      	push	{r7, lr}
 801097e:	b082      	sub	sp, #8
 8010980:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8010982:	2000      	movs	r0, #0
 8010984:	f7f8 f82c 	bl	80089e0 <memp_malloc>
 8010988:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d007      	beq.n	80109a0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8010990:	2220      	movs	r2, #32
 8010992:	2100      	movs	r1, #0
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f007 faf5 	bl	8017f84 <memset>
    pcb->ttl = UDP_TTL;
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	22ff      	movs	r2, #255	; 0xff
 801099e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80109a0:	687b      	ldr	r3, [r7, #4]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3708      	adds	r7, #8
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}

080109aa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80109aa:	b580      	push	{r7, lr}
 80109ac:	b084      	sub	sp, #16
 80109ae:	af00      	add	r7, sp, #0
 80109b0:	4603      	mov	r3, r0
 80109b2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80109b4:	f7ff ffe2 	bl	801097c <udp_new>
 80109b8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80109ba:	68fb      	ldr	r3, [r7, #12]
}
 80109bc:	4618      	mov	r0, r3
 80109be:	3710      	adds	r7, #16
 80109c0:	46bd      	mov	sp, r7
 80109c2:	bd80      	pop	{r7, pc}

080109c4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80109c4:	b480      	push	{r7}
 80109c6:	b085      	sub	sp, #20
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d01e      	beq.n	8010a12 <udp_netif_ip_addr_changed+0x4e>
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	d01a      	beq.n	8010a12 <udp_netif_ip_addr_changed+0x4e>
 80109dc:	683b      	ldr	r3, [r7, #0]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d017      	beq.n	8010a12 <udp_netif_ip_addr_changed+0x4e>
 80109e2:	683b      	ldr	r3, [r7, #0]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	2b00      	cmp	r3, #0
 80109e8:	d013      	beq.n	8010a12 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80109ea:	4b0d      	ldr	r3, [pc, #52]	; (8010a20 <udp_netif_ip_addr_changed+0x5c>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	60fb      	str	r3, [r7, #12]
 80109f0:	e00c      	b.n	8010a0c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	681a      	ldr	r2, [r3, #0]
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	429a      	cmp	r2, r3
 80109fc:	d103      	bne.n	8010a06 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	681a      	ldr	r2, [r3, #0]
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	68db      	ldr	r3, [r3, #12]
 8010a0a:	60fb      	str	r3, [r7, #12]
 8010a0c:	68fb      	ldr	r3, [r7, #12]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d1ef      	bne.n	80109f2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8010a12:	bf00      	nop
 8010a14:	3714      	adds	r7, #20
 8010a16:	46bd      	mov	sp, r7
 8010a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1c:	4770      	bx	lr
 8010a1e:	bf00      	nop
 8010a20:	2000c4f4 	.word	0x2000c4f4

08010a24 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8010a24:	b580      	push	{r7, lr}
 8010a26:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8010a28:	4b20      	ldr	r3, [pc, #128]	; (8010aac <dhcp_inc_pcb_refcount+0x88>)
 8010a2a:	781b      	ldrb	r3, [r3, #0]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d133      	bne.n	8010a98 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8010a30:	4b1f      	ldr	r3, [pc, #124]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d005      	beq.n	8010a44 <dhcp_inc_pcb_refcount+0x20>
 8010a38:	4b1e      	ldr	r3, [pc, #120]	; (8010ab4 <dhcp_inc_pcb_refcount+0x90>)
 8010a3a:	22e5      	movs	r2, #229	; 0xe5
 8010a3c:	491e      	ldr	r1, [pc, #120]	; (8010ab8 <dhcp_inc_pcb_refcount+0x94>)
 8010a3e:	481f      	ldr	r0, [pc, #124]	; (8010abc <dhcp_inc_pcb_refcount+0x98>)
 8010a40:	f007 faa8 	bl	8017f94 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8010a44:	f7ff ff9a 	bl	801097c <udp_new>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	4b19      	ldr	r3, [pc, #100]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a4c:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8010a4e:	4b18      	ldr	r3, [pc, #96]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a50:	681b      	ldr	r3, [r3, #0]
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d102      	bne.n	8010a5c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8010a56:	f04f 33ff 	mov.w	r3, #4294967295
 8010a5a:	e024      	b.n	8010aa6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8010a5c:	4b14      	ldr	r3, [pc, #80]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	7a5a      	ldrb	r2, [r3, #9]
 8010a62:	4b13      	ldr	r3, [pc, #76]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f042 0220 	orr.w	r2, r2, #32
 8010a6a:	b2d2      	uxtb	r2, r2
 8010a6c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8010a6e:	4b10      	ldr	r3, [pc, #64]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2244      	movs	r2, #68	; 0x44
 8010a74:	4912      	ldr	r1, [pc, #72]	; (8010ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8010a76:	4618      	mov	r0, r3
 8010a78:	f7ff fe28 	bl	80106cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8010a7c:	4b0c      	ldr	r3, [pc, #48]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a7e:	681b      	ldr	r3, [r3, #0]
 8010a80:	2243      	movs	r2, #67	; 0x43
 8010a82:	490f      	ldr	r1, [pc, #60]	; (8010ac0 <dhcp_inc_pcb_refcount+0x9c>)
 8010a84:	4618      	mov	r0, r3
 8010a86:	f7ff fea9 	bl	80107dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8010a8a:	4b09      	ldr	r3, [pc, #36]	; (8010ab0 <dhcp_inc_pcb_refcount+0x8c>)
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2200      	movs	r2, #0
 8010a90:	490c      	ldr	r1, [pc, #48]	; (8010ac4 <dhcp_inc_pcb_refcount+0xa0>)
 8010a92:	4618      	mov	r0, r3
 8010a94:	f7ff ff10 	bl	80108b8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8010a98:	4b04      	ldr	r3, [pc, #16]	; (8010aac <dhcp_inc_pcb_refcount+0x88>)
 8010a9a:	781b      	ldrb	r3, [r3, #0]
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	b2da      	uxtb	r2, r3
 8010aa0:	4b02      	ldr	r3, [pc, #8]	; (8010aac <dhcp_inc_pcb_refcount+0x88>)
 8010aa2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8010aa4:	2300      	movs	r3, #0
}
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	bd80      	pop	{r7, pc}
 8010aaa:	bf00      	nop
 8010aac:	200083f0 	.word	0x200083f0
 8010ab0:	200083ec 	.word	0x200083ec
 8010ab4:	0801bd08 	.word	0x0801bd08
 8010ab8:	0801bd40 	.word	0x0801bd40
 8010abc:	0801bd68 	.word	0x0801bd68
 8010ac0:	0801cb08 	.word	0x0801cb08
 8010ac4:	0801237d 	.word	0x0801237d

08010ac8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8010ac8:	b580      	push	{r7, lr}
 8010aca:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8010acc:	4b0e      	ldr	r3, [pc, #56]	; (8010b08 <dhcp_dec_pcb_refcount+0x40>)
 8010ace:	781b      	ldrb	r3, [r3, #0]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d105      	bne.n	8010ae0 <dhcp_dec_pcb_refcount+0x18>
 8010ad4:	4b0d      	ldr	r3, [pc, #52]	; (8010b0c <dhcp_dec_pcb_refcount+0x44>)
 8010ad6:	22ff      	movs	r2, #255	; 0xff
 8010ad8:	490d      	ldr	r1, [pc, #52]	; (8010b10 <dhcp_dec_pcb_refcount+0x48>)
 8010ada:	480e      	ldr	r0, [pc, #56]	; (8010b14 <dhcp_dec_pcb_refcount+0x4c>)
 8010adc:	f007 fa5a 	bl	8017f94 <iprintf>
  dhcp_pcb_refcount--;
 8010ae0:	4b09      	ldr	r3, [pc, #36]	; (8010b08 <dhcp_dec_pcb_refcount+0x40>)
 8010ae2:	781b      	ldrb	r3, [r3, #0]
 8010ae4:	3b01      	subs	r3, #1
 8010ae6:	b2da      	uxtb	r2, r3
 8010ae8:	4b07      	ldr	r3, [pc, #28]	; (8010b08 <dhcp_dec_pcb_refcount+0x40>)
 8010aea:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8010aec:	4b06      	ldr	r3, [pc, #24]	; (8010b08 <dhcp_dec_pcb_refcount+0x40>)
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d107      	bne.n	8010b04 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8010af4:	4b08      	ldr	r3, [pc, #32]	; (8010b18 <dhcp_dec_pcb_refcount+0x50>)
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7ff fefd 	bl	80108f8 <udp_remove>
    dhcp_pcb = NULL;
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <dhcp_dec_pcb_refcount+0x50>)
 8010b00:	2200      	movs	r2, #0
 8010b02:	601a      	str	r2, [r3, #0]
  }
}
 8010b04:	bf00      	nop
 8010b06:	bd80      	pop	{r7, pc}
 8010b08:	200083f0 	.word	0x200083f0
 8010b0c:	0801bd08 	.word	0x0801bd08
 8010b10:	0801bd90 	.word	0x0801bd90
 8010b14:	0801bd68 	.word	0x0801bd68
 8010b18:	200083ec 	.word	0x200083ec

08010b1c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8010b1c:	b580      	push	{r7, lr}
 8010b1e:	b084      	sub	sp, #16
 8010b20:	af00      	add	r7, sp, #0
 8010b22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8010b2a:	210c      	movs	r1, #12
 8010b2c:	68f8      	ldr	r0, [r7, #12]
 8010b2e:	f001 f867 	bl	8011c00 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8010b32:	4b06      	ldr	r3, [pc, #24]	; (8010b4c <dhcp_handle_nak+0x30>)
 8010b34:	4a05      	ldr	r2, [pc, #20]	; (8010b4c <dhcp_handle_nak+0x30>)
 8010b36:	4905      	ldr	r1, [pc, #20]	; (8010b4c <dhcp_handle_nak+0x30>)
 8010b38:	6878      	ldr	r0, [r7, #4]
 8010b3a:	f7f8 f945 	bl	8008dc8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8010b3e:	6878      	ldr	r0, [r7, #4]
 8010b40:	f000 fc5a 	bl	80113f8 <dhcp_discover>
}
 8010b44:	bf00      	nop
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}
 8010b4c:	0801cb08 	.word	0x0801cb08

08010b50 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8010b50:	b580      	push	{r7, lr}
 8010b52:	b084      	sub	sp, #16
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b5c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8010b5e:	2108      	movs	r1, #8
 8010b60:	68f8      	ldr	r0, [r7, #12]
 8010b62:	f001 f84d 	bl	8011c00 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	331c      	adds	r3, #28
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	4619      	mov	r1, r3
 8010b6e:	6878      	ldr	r0, [r7, #4]
 8010b70:	f002 fb4c 	bl	801320c <etharp_query>
 8010b74:	4603      	mov	r3, r0
 8010b76:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	799b      	ldrb	r3, [r3, #6]
 8010b7c:	2bff      	cmp	r3, #255	; 0xff
 8010b7e:	d005      	beq.n	8010b8c <dhcp_check+0x3c>
    dhcp->tries++;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	799b      	ldrb	r3, [r3, #6]
 8010b84:	3301      	adds	r3, #1
 8010b86:	b2da      	uxtb	r2, r3
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8010b8c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8010b90:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010b92:	893b      	ldrh	r3, [r7, #8]
 8010b94:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010b98:	4a06      	ldr	r2, [pc, #24]	; (8010bb4 <dhcp_check+0x64>)
 8010b9a:	fb82 1203 	smull	r1, r2, r2, r3
 8010b9e:	1152      	asrs	r2, r2, #5
 8010ba0:	17db      	asrs	r3, r3, #31
 8010ba2:	1ad3      	subs	r3, r2, r3
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	68fb      	ldr	r3, [r7, #12]
 8010ba8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8010baa:	bf00      	nop
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	10624dd3 	.word	0x10624dd3

08010bb8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8010bb8:	b580      	push	{r7, lr}
 8010bba:	b084      	sub	sp, #16
 8010bbc:	af00      	add	r7, sp, #0
 8010bbe:	6078      	str	r0, [r7, #4]
 8010bc0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010bc6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8010bc8:	4b0c      	ldr	r3, [pc, #48]	; (8010bfc <dhcp_handle_offer+0x44>)
 8010bca:	789b      	ldrb	r3, [r3, #2]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d011      	beq.n	8010bf4 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8010bd0:	68fb      	ldr	r3, [r7, #12]
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8010bd6:	4b0a      	ldr	r3, [pc, #40]	; (8010c00 <dhcp_handle_offer+0x48>)
 8010bd8:	689b      	ldr	r3, [r3, #8]
 8010bda:	4618      	mov	r0, r3
 8010bdc:	f7f7 fa5f 	bl	800809e <lwip_htonl>
 8010be0:	4602      	mov	r2, r0
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	691a      	ldr	r2, [r3, #16]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 f808 	bl	8010c04 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8010bf4:	bf00      	nop
 8010bf6:	3710      	adds	r7, #16
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bd80      	pop	{r7, pc}
 8010bfc:	2000c4f8 	.word	0x2000c4f8
 8010c00:	2000c500 	.word	0x2000c500

08010c04 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8010c04:	b5b0      	push	{r4, r5, r7, lr}
 8010c06:	b08a      	sub	sp, #40	; 0x28
 8010c08:	af02      	add	r7, sp, #8
 8010c0a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d109      	bne.n	8010c26 <dhcp_select+0x22>
 8010c12:	4b71      	ldr	r3, [pc, #452]	; (8010dd8 <dhcp_select+0x1d4>)
 8010c14:	f240 1277 	movw	r2, #375	; 0x177
 8010c18:	4970      	ldr	r1, [pc, #448]	; (8010ddc <dhcp_select+0x1d8>)
 8010c1a:	4871      	ldr	r0, [pc, #452]	; (8010de0 <dhcp_select+0x1dc>)
 8010c1c:	f007 f9ba 	bl	8017f94 <iprintf>
 8010c20:	f06f 030f 	mvn.w	r3, #15
 8010c24:	e0d3      	b.n	8010dce <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c2a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8010c2c:	69bb      	ldr	r3, [r7, #24]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d109      	bne.n	8010c46 <dhcp_select+0x42>
 8010c32:	4b69      	ldr	r3, [pc, #420]	; (8010dd8 <dhcp_select+0x1d4>)
 8010c34:	f240 1279 	movw	r2, #377	; 0x179
 8010c38:	496a      	ldr	r1, [pc, #424]	; (8010de4 <dhcp_select+0x1e0>)
 8010c3a:	4869      	ldr	r0, [pc, #420]	; (8010de0 <dhcp_select+0x1dc>)
 8010c3c:	f007 f9aa 	bl	8017f94 <iprintf>
 8010c40:	f06f 0305 	mvn.w	r3, #5
 8010c44:	e0c3      	b.n	8010dce <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8010c46:	2101      	movs	r1, #1
 8010c48:	69b8      	ldr	r0, [r7, #24]
 8010c4a:	f000 ffd9 	bl	8011c00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8010c4e:	f107 030c 	add.w	r3, r7, #12
 8010c52:	2203      	movs	r2, #3
 8010c54:	69b9      	ldr	r1, [r7, #24]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f001 fc5c 	bl	8012514 <dhcp_create_msg>
 8010c5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8010c5e:	697b      	ldr	r3, [r7, #20]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	f000 8085 	beq.w	8010d70 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8010c66:	697b      	ldr	r3, [r7, #20]
 8010c68:	685b      	ldr	r3, [r3, #4]
 8010c6a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8010c6c:	89b8      	ldrh	r0, [r7, #12]
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c74:	2302      	movs	r3, #2
 8010c76:	2239      	movs	r2, #57	; 0x39
 8010c78:	f000 ffdc 	bl	8011c34 <dhcp_option>
 8010c7c:	4603      	mov	r3, r0
 8010c7e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8010c80:	89b8      	ldrh	r0, [r7, #12]
 8010c82:	693b      	ldr	r3, [r7, #16]
 8010c84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	f001 f82b 	bl	8011ce8 <dhcp_option_short>
 8010c92:	4603      	mov	r3, r0
 8010c94:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8010c96:	89b8      	ldrh	r0, [r7, #12]
 8010c98:	693b      	ldr	r3, [r7, #16]
 8010c9a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010c9e:	2304      	movs	r3, #4
 8010ca0:	2232      	movs	r2, #50	; 0x32
 8010ca2:	f000 ffc7 	bl	8011c34 <dhcp_option>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8010caa:	89bc      	ldrh	r4, [r7, #12]
 8010cac:	693b      	ldr	r3, [r7, #16]
 8010cae:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010cb2:	69bb      	ldr	r3, [r7, #24]
 8010cb4:	69db      	ldr	r3, [r3, #28]
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	f7f7 f9f1 	bl	800809e <lwip_htonl>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4629      	mov	r1, r5
 8010cc2:	4620      	mov	r0, r4
 8010cc4:	f001 f842 	bl	8011d4c <dhcp_option_long>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8010ccc:	89b8      	ldrh	r0, [r7, #12]
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010cd4:	2304      	movs	r3, #4
 8010cd6:	2236      	movs	r2, #54	; 0x36
 8010cd8:	f000 ffac 	bl	8011c34 <dhcp_option>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8010ce0:	89bc      	ldrh	r4, [r7, #12]
 8010ce2:	693b      	ldr	r3, [r7, #16]
 8010ce4:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8010ce8:	69bb      	ldr	r3, [r7, #24]
 8010cea:	699b      	ldr	r3, [r3, #24]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7f7 f9d6 	bl	800809e <lwip_htonl>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4629      	mov	r1, r5
 8010cf8:	4620      	mov	r0, r4
 8010cfa:	f001 f827 	bl	8011d4c <dhcp_option_long>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8010d02:	89b8      	ldrh	r0, [r7, #12]
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d0a:	2303      	movs	r3, #3
 8010d0c:	2237      	movs	r2, #55	; 0x37
 8010d0e:	f000 ff91 	bl	8011c34 <dhcp_option>
 8010d12:	4603      	mov	r3, r0
 8010d14:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d16:	2300      	movs	r3, #0
 8010d18:	77bb      	strb	r3, [r7, #30]
 8010d1a:	e00e      	b.n	8010d3a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8010d1c:	89b8      	ldrh	r0, [r7, #12]
 8010d1e:	693b      	ldr	r3, [r7, #16]
 8010d20:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8010d24:	7fbb      	ldrb	r3, [r7, #30]
 8010d26:	4a30      	ldr	r2, [pc, #192]	; (8010de8 <dhcp_select+0x1e4>)
 8010d28:	5cd3      	ldrb	r3, [r2, r3]
 8010d2a:	461a      	mov	r2, r3
 8010d2c:	f000 ffb6 	bl	8011c9c <dhcp_option_byte>
 8010d30:	4603      	mov	r3, r0
 8010d32:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8010d34:	7fbb      	ldrb	r3, [r7, #30]
 8010d36:	3301      	adds	r3, #1
 8010d38:	77bb      	strb	r3, [r7, #30]
 8010d3a:	7fbb      	ldrb	r3, [r7, #30]
 8010d3c:	2b02      	cmp	r3, #2
 8010d3e:	d9ed      	bls.n	8010d1c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8010d40:	89b8      	ldrh	r0, [r7, #12]
 8010d42:	693b      	ldr	r3, [r7, #16]
 8010d44:	33f0      	adds	r3, #240	; 0xf0
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	4619      	mov	r1, r3
 8010d4a:	f001 fcb9 	bl	80126c0 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8010d4e:	4b27      	ldr	r3, [pc, #156]	; (8010dec <dhcp_select+0x1e8>)
 8010d50:	6818      	ldr	r0, [r3, #0]
 8010d52:	4b27      	ldr	r3, [pc, #156]	; (8010df0 <dhcp_select+0x1ec>)
 8010d54:	9301      	str	r3, [sp, #4]
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	9300      	str	r3, [sp, #0]
 8010d5a:	2343      	movs	r3, #67	; 0x43
 8010d5c:	4a25      	ldr	r2, [pc, #148]	; (8010df4 <dhcp_select+0x1f0>)
 8010d5e:	6979      	ldr	r1, [r7, #20]
 8010d60:	f7ff fbce 	bl	8010500 <udp_sendto_if_src>
 8010d64:	4603      	mov	r3, r0
 8010d66:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8010d68:	6978      	ldr	r0, [r7, #20]
 8010d6a:	f7f8 fd37 	bl	80097dc <pbuf_free>
 8010d6e:	e001      	b.n	8010d74 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8010d70:	23ff      	movs	r3, #255	; 0xff
 8010d72:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8010d74:	69bb      	ldr	r3, [r7, #24]
 8010d76:	799b      	ldrb	r3, [r3, #6]
 8010d78:	2bff      	cmp	r3, #255	; 0xff
 8010d7a:	d005      	beq.n	8010d88 <dhcp_select+0x184>
    dhcp->tries++;
 8010d7c:	69bb      	ldr	r3, [r7, #24]
 8010d7e:	799b      	ldrb	r3, [r3, #6]
 8010d80:	3301      	adds	r3, #1
 8010d82:	b2da      	uxtb	r2, r3
 8010d84:	69bb      	ldr	r3, [r7, #24]
 8010d86:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8010d88:	69bb      	ldr	r3, [r7, #24]
 8010d8a:	799b      	ldrb	r3, [r3, #6]
 8010d8c:	2b05      	cmp	r3, #5
 8010d8e:	d80d      	bhi.n	8010dac <dhcp_select+0x1a8>
 8010d90:	69bb      	ldr	r3, [r7, #24]
 8010d92:	799b      	ldrb	r3, [r3, #6]
 8010d94:	461a      	mov	r2, r3
 8010d96:	2301      	movs	r3, #1
 8010d98:	4093      	lsls	r3, r2
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	461a      	mov	r2, r3
 8010d9e:	0152      	lsls	r2, r2, #5
 8010da0:	1ad2      	subs	r2, r2, r3
 8010da2:	0092      	lsls	r2, r2, #2
 8010da4:	4413      	add	r3, r2
 8010da6:	00db      	lsls	r3, r3, #3
 8010da8:	b29b      	uxth	r3, r3
 8010daa:	e001      	b.n	8010db0 <dhcp_select+0x1ac>
 8010dac:	f64e 2360 	movw	r3, #60000	; 0xea60
 8010db0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8010db2:	89fb      	ldrh	r3, [r7, #14]
 8010db4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8010db8:	4a0f      	ldr	r2, [pc, #60]	; (8010df8 <dhcp_select+0x1f4>)
 8010dba:	fb82 1203 	smull	r1, r2, r2, r3
 8010dbe:	1152      	asrs	r2, r2, #5
 8010dc0:	17db      	asrs	r3, r3, #31
 8010dc2:	1ad3      	subs	r3, r2, r3
 8010dc4:	b29a      	uxth	r2, r3
 8010dc6:	69bb      	ldr	r3, [r7, #24]
 8010dc8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8010dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8010dce:	4618      	mov	r0, r3
 8010dd0:	3720      	adds	r7, #32
 8010dd2:	46bd      	mov	sp, r7
 8010dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8010dd6:	bf00      	nop
 8010dd8:	0801bd08 	.word	0x0801bd08
 8010ddc:	0801bdb4 	.word	0x0801bdb4
 8010de0:	0801bd68 	.word	0x0801bd68
 8010de4:	0801bdd0 	.word	0x0801bdd0
 8010de8:	20000018 	.word	0x20000018
 8010dec:	200083ec 	.word	0x200083ec
 8010df0:	0801cb08 	.word	0x0801cb08
 8010df4:	0801cb0c 	.word	0x0801cb0c
 8010df8:	10624dd3 	.word	0x10624dd3

08010dfc <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8010e02:	4b27      	ldr	r3, [pc, #156]	; (8010ea0 <dhcp_coarse_tmr+0xa4>)
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	607b      	str	r3, [r7, #4]
 8010e08:	e042      	b.n	8010e90 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e0e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8010e10:	683b      	ldr	r3, [r7, #0]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d039      	beq.n	8010e8a <dhcp_coarse_tmr+0x8e>
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	795b      	ldrb	r3, [r3, #5]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d035      	beq.n	8010e8a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8010e1e:	683b      	ldr	r3, [r7, #0]
 8010e20:	8a9b      	ldrh	r3, [r3, #20]
 8010e22:	2b00      	cmp	r3, #0
 8010e24:	d012      	beq.n	8010e4c <dhcp_coarse_tmr+0x50>
 8010e26:	683b      	ldr	r3, [r7, #0]
 8010e28:	8a5b      	ldrh	r3, [r3, #18]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	b29a      	uxth	r2, r3
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	825a      	strh	r2, [r3, #18]
 8010e32:	683b      	ldr	r3, [r7, #0]
 8010e34:	8a5a      	ldrh	r2, [r3, #18]
 8010e36:	683b      	ldr	r3, [r7, #0]
 8010e38:	8a9b      	ldrh	r3, [r3, #20]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d106      	bne.n	8010e4c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8010e3e:	6878      	ldr	r0, [r7, #4]
 8010e40:	f000 fe44 	bl	8011acc <dhcp_release_and_stop>
        dhcp_start(netif);
 8010e44:	6878      	ldr	r0, [r7, #4]
 8010e46:	f000 f969 	bl	801111c <dhcp_start>
 8010e4a:	e01e      	b.n	8010e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8010e4c:	683b      	ldr	r3, [r7, #0]
 8010e4e:	8a1b      	ldrh	r3, [r3, #16]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00b      	beq.n	8010e6c <dhcp_coarse_tmr+0x70>
 8010e54:	683b      	ldr	r3, [r7, #0]
 8010e56:	8a1b      	ldrh	r3, [r3, #16]
 8010e58:	1e5a      	subs	r2, r3, #1
 8010e5a:	b291      	uxth	r1, r2
 8010e5c:	683a      	ldr	r2, [r7, #0]
 8010e5e:	8211      	strh	r1, [r2, #16]
 8010e60:	2b01      	cmp	r3, #1
 8010e62:	d103      	bne.n	8010e6c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f000 f8c6 	bl	8010ff6 <dhcp_t2_timeout>
 8010e6a:	e00e      	b.n	8010e8a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8010e6c:	683b      	ldr	r3, [r7, #0]
 8010e6e:	89db      	ldrh	r3, [r3, #14]
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d00a      	beq.n	8010e8a <dhcp_coarse_tmr+0x8e>
 8010e74:	683b      	ldr	r3, [r7, #0]
 8010e76:	89db      	ldrh	r3, [r3, #14]
 8010e78:	1e5a      	subs	r2, r3, #1
 8010e7a:	b291      	uxth	r1, r2
 8010e7c:	683a      	ldr	r2, [r7, #0]
 8010e7e:	81d1      	strh	r1, [r2, #14]
 8010e80:	2b01      	cmp	r3, #1
 8010e82:	d102      	bne.n	8010e8a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8010e84:	6878      	ldr	r0, [r7, #4]
 8010e86:	f000 f888 	bl	8010f9a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	607b      	str	r3, [r7, #4]
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d1b9      	bne.n	8010e0a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8010e96:	bf00      	nop
 8010e98:	3708      	adds	r7, #8
 8010e9a:	46bd      	mov	sp, r7
 8010e9c:	bd80      	pop	{r7, pc}
 8010e9e:	bf00      	nop
 8010ea0:	2000c4cc 	.word	0x2000c4cc

08010ea4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8010eaa:	4b16      	ldr	r3, [pc, #88]	; (8010f04 <dhcp_fine_tmr+0x60>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	607b      	str	r3, [r7, #4]
 8010eb0:	e020      	b.n	8010ef4 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010eb6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8010eb8:	683b      	ldr	r3, [r7, #0]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d017      	beq.n	8010eee <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8010ebe:	683b      	ldr	r3, [r7, #0]
 8010ec0:	891b      	ldrh	r3, [r3, #8]
 8010ec2:	2b01      	cmp	r3, #1
 8010ec4:	d906      	bls.n	8010ed4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	891b      	ldrh	r3, [r3, #8]
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	b29a      	uxth	r2, r3
 8010ece:	683b      	ldr	r3, [r7, #0]
 8010ed0:	811a      	strh	r2, [r3, #8]
 8010ed2:	e00c      	b.n	8010eee <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8010ed4:	683b      	ldr	r3, [r7, #0]
 8010ed6:	891b      	ldrh	r3, [r3, #8]
 8010ed8:	2b01      	cmp	r3, #1
 8010eda:	d108      	bne.n	8010eee <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8010edc:	683b      	ldr	r3, [r7, #0]
 8010ede:	891b      	ldrh	r3, [r3, #8]
 8010ee0:	3b01      	subs	r3, #1
 8010ee2:	b29a      	uxth	r2, r3
 8010ee4:	683b      	ldr	r3, [r7, #0]
 8010ee6:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f80d 	bl	8010f08 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	681b      	ldr	r3, [r3, #0]
 8010ef2:	607b      	str	r3, [r7, #4]
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d1db      	bne.n	8010eb2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8010efa:	bf00      	nop
 8010efc:	3708      	adds	r7, #8
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	2000c4cc 	.word	0x2000c4cc

08010f08 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	b084      	sub	sp, #16
 8010f0c:	af00      	add	r7, sp, #0
 8010f0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f14:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8010f16:	68fb      	ldr	r3, [r7, #12]
 8010f18:	795b      	ldrb	r3, [r3, #5]
 8010f1a:	2b0c      	cmp	r3, #12
 8010f1c:	d003      	beq.n	8010f26 <dhcp_timeout+0x1e>
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	795b      	ldrb	r3, [r3, #5]
 8010f22:	2b06      	cmp	r3, #6
 8010f24:	d103      	bne.n	8010f2e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f000 fa66 	bl	80113f8 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8010f2c:	e031      	b.n	8010f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8010f2e:	68fb      	ldr	r3, [r7, #12]
 8010f30:	795b      	ldrb	r3, [r3, #5]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d10e      	bne.n	8010f54 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	799b      	ldrb	r3, [r3, #6]
 8010f3a:	2b05      	cmp	r3, #5
 8010f3c:	d803      	bhi.n	8010f46 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8010f3e:	6878      	ldr	r0, [r7, #4]
 8010f40:	f7ff fe60 	bl	8010c04 <dhcp_select>
}
 8010f44:	e025      	b.n	8010f92 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8010f46:	6878      	ldr	r0, [r7, #4]
 8010f48:	f000 fdc0 	bl	8011acc <dhcp_release_and_stop>
      dhcp_start(netif);
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 f8e5 	bl	801111c <dhcp_start>
}
 8010f52:	e01e      	b.n	8010f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8010f54:	68fb      	ldr	r3, [r7, #12]
 8010f56:	795b      	ldrb	r3, [r3, #5]
 8010f58:	2b08      	cmp	r3, #8
 8010f5a:	d10b      	bne.n	8010f74 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	799b      	ldrb	r3, [r3, #6]
 8010f60:	2b01      	cmp	r3, #1
 8010f62:	d803      	bhi.n	8010f6c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8010f64:	6878      	ldr	r0, [r7, #4]
 8010f66:	f7ff fdf3 	bl	8010b50 <dhcp_check>
}
 8010f6a:	e012      	b.n	8010f92 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8010f6c:	6878      	ldr	r0, [r7, #4]
 8010f6e:	f000 fae5 	bl	801153c <dhcp_bind>
}
 8010f72:	e00e      	b.n	8010f92 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	795b      	ldrb	r3, [r3, #5]
 8010f78:	2b03      	cmp	r3, #3
 8010f7a:	d10a      	bne.n	8010f92 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	799b      	ldrb	r3, [r3, #6]
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d803      	bhi.n	8010f8c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 fceb 	bl	8011960 <dhcp_reboot>
}
 8010f8a:	e002      	b.n	8010f92 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8010f8c:	6878      	ldr	r0, [r7, #4]
 8010f8e:	f000 fa33 	bl	80113f8 <dhcp_discover>
}
 8010f92:	bf00      	nop
 8010f94:	3710      	adds	r7, #16
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}

08010f9a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8010f9a:	b580      	push	{r7, lr}
 8010f9c:	b084      	sub	sp, #16
 8010f9e:	af00      	add	r7, sp, #0
 8010fa0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fa6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010fa8:	68fb      	ldr	r3, [r7, #12]
 8010faa:	795b      	ldrb	r3, [r3, #5]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d007      	beq.n	8010fc0 <dhcp_t1_timeout+0x26>
 8010fb0:	68fb      	ldr	r3, [r7, #12]
 8010fb2:	795b      	ldrb	r3, [r3, #5]
 8010fb4:	2b0a      	cmp	r3, #10
 8010fb6:	d003      	beq.n	8010fc0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8010fbc:	2b05      	cmp	r3, #5
 8010fbe:	d116      	bne.n	8010fee <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 fb95 	bl	80116f0 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	899b      	ldrh	r3, [r3, #12]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	8a5b      	ldrh	r3, [r3, #18]
 8010fd0:	1ad3      	subs	r3, r2, r3
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	dd0b      	ble.n	8010fee <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	899b      	ldrh	r3, [r3, #12]
 8010fda:	461a      	mov	r2, r3
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	8a5b      	ldrh	r3, [r3, #18]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	0fda      	lsrs	r2, r3, #31
 8010fe4:	4413      	add	r3, r2
 8010fe6:	105b      	asrs	r3, r3, #1
 8010fe8:	b29a      	uxth	r2, r3
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8010fee:	bf00      	nop
 8010ff0:	3710      	adds	r7, #16
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b084      	sub	sp, #16
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011002:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011004:	68fb      	ldr	r3, [r7, #12]
 8011006:	795b      	ldrb	r3, [r3, #5]
 8011008:	2b01      	cmp	r3, #1
 801100a:	d00b      	beq.n	8011024 <dhcp_t2_timeout+0x2e>
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	795b      	ldrb	r3, [r3, #5]
 8011010:	2b0a      	cmp	r3, #10
 8011012:	d007      	beq.n	8011024 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8011018:	2b05      	cmp	r3, #5
 801101a:	d003      	beq.n	8011024 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	795b      	ldrb	r3, [r3, #5]
 8011020:	2b04      	cmp	r3, #4
 8011022:	d116      	bne.n	8011052 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8011024:	6878      	ldr	r0, [r7, #4]
 8011026:	f000 fbff 	bl	8011828 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	8a9b      	ldrh	r3, [r3, #20]
 801102e:	461a      	mov	r2, r3
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	8a5b      	ldrh	r3, [r3, #18]
 8011034:	1ad3      	subs	r3, r2, r3
 8011036:	2b01      	cmp	r3, #1
 8011038:	dd0b      	ble.n	8011052 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 801103a:	68fb      	ldr	r3, [r7, #12]
 801103c:	8a9b      	ldrh	r3, [r3, #20]
 801103e:	461a      	mov	r2, r3
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	8a5b      	ldrh	r3, [r3, #18]
 8011044:	1ad3      	subs	r3, r2, r3
 8011046:	0fda      	lsrs	r2, r3, #31
 8011048:	4413      	add	r3, r2
 801104a:	105b      	asrs	r3, r3, #1
 801104c:	b29a      	uxth	r2, r3
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8011052:	bf00      	nop
 8011054:	3710      	adds	r7, #16
 8011056:	46bd      	mov	sp, r7
 8011058:	bd80      	pop	{r7, pc}
	...

0801105c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b084      	sub	sp, #16
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106a:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801106c:	68fb      	ldr	r3, [r7, #12]
 801106e:	2200      	movs	r2, #0
 8011070:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2200      	movs	r2, #0
 8011076:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8011078:	4b26      	ldr	r3, [pc, #152]	; (8011114 <dhcp_handle_ack+0xb8>)
 801107a:	78db      	ldrb	r3, [r3, #3]
 801107c:	2b00      	cmp	r3, #0
 801107e:	d003      	beq.n	8011088 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8011080:	4b25      	ldr	r3, [pc, #148]	; (8011118 <dhcp_handle_ack+0xbc>)
 8011082:	68da      	ldr	r2, [r3, #12]
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8011088:	4b22      	ldr	r3, [pc, #136]	; (8011114 <dhcp_handle_ack+0xb8>)
 801108a:	791b      	ldrb	r3, [r3, #4]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d004      	beq.n	801109a <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8011090:	4b21      	ldr	r3, [pc, #132]	; (8011118 <dhcp_handle_ack+0xbc>)
 8011092:	691a      	ldr	r2, [r3, #16]
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	62da      	str	r2, [r3, #44]	; 0x2c
 8011098:	e004      	b.n	80110a4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801109e:	085a      	lsrs	r2, r3, #1
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80110a4:	4b1b      	ldr	r3, [pc, #108]	; (8011114 <dhcp_handle_ack+0xb8>)
 80110a6:	795b      	ldrb	r3, [r3, #5]
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d004      	beq.n	80110b6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80110ac:	4b1a      	ldr	r3, [pc, #104]	; (8011118 <dhcp_handle_ack+0xbc>)
 80110ae:	695a      	ldr	r2, [r3, #20]
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	631a      	str	r2, [r3, #48]	; 0x30
 80110b4:	e007      	b.n	80110c6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80110b6:	68fb      	ldr	r3, [r7, #12]
 80110b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80110ba:	4613      	mov	r3, r2
 80110bc:	00db      	lsls	r3, r3, #3
 80110be:	1a9b      	subs	r3, r3, r2
 80110c0:	08da      	lsrs	r2, r3, #3
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	691a      	ldr	r2, [r3, #16]
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80110ce:	4b11      	ldr	r3, [pc, #68]	; (8011114 <dhcp_handle_ack+0xb8>)
 80110d0:	799b      	ldrb	r3, [r3, #6]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d00b      	beq.n	80110ee <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 80110d6:	4b10      	ldr	r3, [pc, #64]	; (8011118 <dhcp_handle_ack+0xbc>)
 80110d8:	699b      	ldr	r3, [r3, #24]
 80110da:	4618      	mov	r0, r3
 80110dc:	f7f6 ffdf 	bl	800809e <lwip_htonl>
 80110e0:	4602      	mov	r2, r0
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	2201      	movs	r2, #1
 80110ea:	71da      	strb	r2, [r3, #7]
 80110ec:	e002      	b.n	80110f4 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2200      	movs	r2, #0
 80110f2:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80110f4:	4b07      	ldr	r3, [pc, #28]	; (8011114 <dhcp_handle_ack+0xb8>)
 80110f6:	79db      	ldrb	r3, [r3, #7]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d007      	beq.n	801110c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80110fc:	4b06      	ldr	r3, [pc, #24]	; (8011118 <dhcp_handle_ack+0xbc>)
 80110fe:	69db      	ldr	r3, [r3, #28]
 8011100:	4618      	mov	r0, r3
 8011102:	f7f6 ffcc 	bl	800809e <lwip_htonl>
 8011106:	4602      	mov	r2, r0
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 801110c:	bf00      	nop
 801110e:	3710      	adds	r7, #16
 8011110:	46bd      	mov	sp, r7
 8011112:	bd80      	pop	{r7, pc}
 8011114:	2000c4f8 	.word	0x2000c4f8
 8011118:	2000c500 	.word	0x2000c500

0801111c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 801111c:	b580      	push	{r7, lr}
 801111e:	b084      	sub	sp, #16
 8011120:	af00      	add	r7, sp, #0
 8011122:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	2b00      	cmp	r3, #0
 8011128:	d109      	bne.n	801113e <dhcp_start+0x22>
 801112a:	4b37      	ldr	r3, [pc, #220]	; (8011208 <dhcp_start+0xec>)
 801112c:	f240 22e7 	movw	r2, #743	; 0x2e7
 8011130:	4936      	ldr	r1, [pc, #216]	; (801120c <dhcp_start+0xf0>)
 8011132:	4837      	ldr	r0, [pc, #220]	; (8011210 <dhcp_start+0xf4>)
 8011134:	f006 ff2e 	bl	8017f94 <iprintf>
 8011138:	f06f 030f 	mvn.w	r3, #15
 801113c:	e060      	b.n	8011200 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011144:	f003 0301 	and.w	r3, r3, #1
 8011148:	2b00      	cmp	r3, #0
 801114a:	d109      	bne.n	8011160 <dhcp_start+0x44>
 801114c:	4b2e      	ldr	r3, [pc, #184]	; (8011208 <dhcp_start+0xec>)
 801114e:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8011152:	4930      	ldr	r1, [pc, #192]	; (8011214 <dhcp_start+0xf8>)
 8011154:	482e      	ldr	r0, [pc, #184]	; (8011210 <dhcp_start+0xf4>)
 8011156:	f006 ff1d 	bl	8017f94 <iprintf>
 801115a:	f06f 030f 	mvn.w	r3, #15
 801115e:	e04f      	b.n	8011200 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011164:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8011166:	687b      	ldr	r3, [r7, #4]
 8011168:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801116a:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 801116e:	d202      	bcs.n	8011176 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8011170:	f04f 33ff 	mov.w	r3, #4294967295
 8011174:	e044      	b.n	8011200 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	2b00      	cmp	r3, #0
 801117a:	d10d      	bne.n	8011198 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 801117c:	2034      	movs	r0, #52	; 0x34
 801117e:	f7f7 faad 	bl	80086dc <mem_malloc>
 8011182:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d102      	bne.n	8011190 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801118a:	f04f 33ff 	mov.w	r3, #4294967295
 801118e:	e037      	b.n	8011200 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	68fa      	ldr	r2, [r7, #12]
 8011194:	625a      	str	r2, [r3, #36]	; 0x24
 8011196:	e005      	b.n	80111a4 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8011198:	68fb      	ldr	r3, [r7, #12]
 801119a:	791b      	ldrb	r3, [r3, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d001      	beq.n	80111a4 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80111a0:	f7ff fc92 	bl	8010ac8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 80111a4:	2234      	movs	r2, #52	; 0x34
 80111a6:	2100      	movs	r1, #0
 80111a8:	68f8      	ldr	r0, [r7, #12]
 80111aa:	f006 feeb 	bl	8017f84 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 80111ae:	f7ff fc39 	bl	8010a24 <dhcp_inc_pcb_refcount>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d002      	beq.n	80111be <dhcp_start+0xa2>
    return ERR_MEM;
 80111b8:	f04f 33ff 	mov.w	r3, #4294967295
 80111bc:	e020      	b.n	8011200 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	2201      	movs	r2, #1
 80111c2:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80111ca:	f003 0304 	and.w	r3, r3, #4
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d105      	bne.n	80111de <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 80111d2:	2102      	movs	r1, #2
 80111d4:	68f8      	ldr	r0, [r7, #12]
 80111d6:	f000 fd13 	bl	8011c00 <dhcp_set_state>
    return ERR_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	e010      	b.n	8011200 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80111de:	6878      	ldr	r0, [r7, #4]
 80111e0:	f000 f90a 	bl	80113f8 <dhcp_discover>
 80111e4:	4603      	mov	r3, r0
 80111e6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80111e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d005      	beq.n	80111fc <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 80111f0:	6878      	ldr	r0, [r7, #4]
 80111f2:	f000 fc6b 	bl	8011acc <dhcp_release_and_stop>
    return ERR_MEM;
 80111f6:	f04f 33ff 	mov.w	r3, #4294967295
 80111fa:	e001      	b.n	8011200 <dhcp_start+0xe4>
  }
  return result;
 80111fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	0801bd08 	.word	0x0801bd08
 801120c:	0801bdec 	.word	0x0801bdec
 8011210:	0801bd68 	.word	0x0801bd68
 8011214:	0801be30 	.word	0x0801be30

08011218 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8011218:	b580      	push	{r7, lr}
 801121a:	b084      	sub	sp, #16
 801121c:	af00      	add	r7, sp, #0
 801121e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011224:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8011226:	68fb      	ldr	r3, [r7, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d037      	beq.n	801129c <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 801122c:	68fb      	ldr	r3, [r7, #12]
 801122e:	795b      	ldrb	r3, [r3, #5]
 8011230:	2b0a      	cmp	r3, #10
 8011232:	d820      	bhi.n	8011276 <dhcp_network_changed+0x5e>
 8011234:	a201      	add	r2, pc, #4	; (adr r2, 801123c <dhcp_network_changed+0x24>)
 8011236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801123a:	bf00      	nop
 801123c:	080112a1 	.word	0x080112a1
 8011240:	08011277 	.word	0x08011277
 8011244:	08011277 	.word	0x08011277
 8011248:	08011269 	.word	0x08011269
 801124c:	08011269 	.word	0x08011269
 8011250:	08011269 	.word	0x08011269
 8011254:	08011277 	.word	0x08011277
 8011258:	08011277 	.word	0x08011277
 801125c:	08011277 	.word	0x08011277
 8011260:	08011277 	.word	0x08011277
 8011264:	08011269 	.word	0x08011269
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8011268:	68fb      	ldr	r3, [r7, #12]
 801126a:	2200      	movs	r2, #0
 801126c:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 801126e:	6878      	ldr	r0, [r7, #4]
 8011270:	f000 fb76 	bl	8011960 <dhcp_reboot>
      break;
 8011274:	e015      	b.n	80112a2 <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	795b      	ldrb	r3, [r3, #5]
 801127a:	2b0c      	cmp	r3, #12
 801127c:	d906      	bls.n	801128c <dhcp_network_changed+0x74>
 801127e:	4b0a      	ldr	r3, [pc, #40]	; (80112a8 <dhcp_network_changed+0x90>)
 8011280:	f240 326d 	movw	r2, #877	; 0x36d
 8011284:	4909      	ldr	r1, [pc, #36]	; (80112ac <dhcp_network_changed+0x94>)
 8011286:	480a      	ldr	r0, [pc, #40]	; (80112b0 <dhcp_network_changed+0x98>)
 8011288:	f006 fe84 	bl	8017f94 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	2200      	movs	r2, #0
 8011290:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8011292:	6878      	ldr	r0, [r7, #4]
 8011294:	f000 f8b0 	bl	80113f8 <dhcp_discover>
      break;
 8011298:	bf00      	nop
 801129a:	e002      	b.n	80112a2 <dhcp_network_changed+0x8a>
    return;
 801129c:	bf00      	nop
 801129e:	e000      	b.n	80112a2 <dhcp_network_changed+0x8a>
      break;
 80112a0:	bf00      	nop
  }
}
 80112a2:	3710      	adds	r7, #16
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd80      	pop	{r7, pc}
 80112a8:	0801bd08 	.word	0x0801bd08
 80112ac:	0801be54 	.word	0x0801be54
 80112b0:	0801bd68 	.word	0x0801bd68

080112b4 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d107      	bne.n	80112d4 <dhcp_arp_reply+0x20>
 80112c4:	4b0e      	ldr	r3, [pc, #56]	; (8011300 <dhcp_arp_reply+0x4c>)
 80112c6:	f240 328b 	movw	r2, #907	; 0x38b
 80112ca:	490e      	ldr	r1, [pc, #56]	; (8011304 <dhcp_arp_reply+0x50>)
 80112cc:	480e      	ldr	r0, [pc, #56]	; (8011308 <dhcp_arp_reply+0x54>)
 80112ce:	f006 fe61 	bl	8017f94 <iprintf>
 80112d2:	e012      	b.n	80112fa <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d00c      	beq.n	80112fa <dhcp_arp_reply+0x46>
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	795b      	ldrb	r3, [r3, #5]
 80112e4:	2b08      	cmp	r3, #8
 80112e6:	d108      	bne.n	80112fa <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	681a      	ldr	r2, [r3, #0]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	69db      	ldr	r3, [r3, #28]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d102      	bne.n	80112fa <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80112f4:	6878      	ldr	r0, [r7, #4]
 80112f6:	f000 f809 	bl	801130c <dhcp_decline>
    }
  }
}
 80112fa:	3710      	adds	r7, #16
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	0801bd08 	.word	0x0801bd08
 8011304:	0801bdec 	.word	0x0801bdec
 8011308:	0801bd68 	.word	0x0801bd68

0801130c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801130c:	b5b0      	push	{r4, r5, r7, lr}
 801130e:	b08a      	sub	sp, #40	; 0x28
 8011310:	af02      	add	r7, sp, #8
 8011312:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011318:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801131a:	210c      	movs	r1, #12
 801131c:	69b8      	ldr	r0, [r7, #24]
 801131e:	f000 fc6f 	bl	8011c00 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8011322:	f107 030c 	add.w	r3, r7, #12
 8011326:	2204      	movs	r2, #4
 8011328:	69b9      	ldr	r1, [r7, #24]
 801132a:	6878      	ldr	r0, [r7, #4]
 801132c:	f001 f8f2 	bl	8012514 <dhcp_create_msg>
 8011330:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	2b00      	cmp	r3, #0
 8011336:	d035      	beq.n	80113a4 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011338:	697b      	ldr	r3, [r7, #20]
 801133a:	685b      	ldr	r3, [r3, #4]
 801133c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801133e:	89b8      	ldrh	r0, [r7, #12]
 8011340:	693b      	ldr	r3, [r7, #16]
 8011342:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011346:	2304      	movs	r3, #4
 8011348:	2232      	movs	r2, #50	; 0x32
 801134a:	f000 fc73 	bl	8011c34 <dhcp_option>
 801134e:	4603      	mov	r3, r0
 8011350:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8011352:	89bc      	ldrh	r4, [r7, #12]
 8011354:	693b      	ldr	r3, [r7, #16]
 8011356:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801135a:	69bb      	ldr	r3, [r7, #24]
 801135c:	69db      	ldr	r3, [r3, #28]
 801135e:	4618      	mov	r0, r3
 8011360:	f7f6 fe9d 	bl	800809e <lwip_htonl>
 8011364:	4603      	mov	r3, r0
 8011366:	461a      	mov	r2, r3
 8011368:	4629      	mov	r1, r5
 801136a:	4620      	mov	r0, r4
 801136c:	f000 fcee 	bl	8011d4c <dhcp_option_long>
 8011370:	4603      	mov	r3, r0
 8011372:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011374:	89b8      	ldrh	r0, [r7, #12]
 8011376:	693b      	ldr	r3, [r7, #16]
 8011378:	33f0      	adds	r3, #240	; 0xf0
 801137a:	697a      	ldr	r2, [r7, #20]
 801137c:	4619      	mov	r1, r3
 801137e:	f001 f99f 	bl	80126c0 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8011382:	4b19      	ldr	r3, [pc, #100]	; (80113e8 <dhcp_decline+0xdc>)
 8011384:	6818      	ldr	r0, [r3, #0]
 8011386:	4b19      	ldr	r3, [pc, #100]	; (80113ec <dhcp_decline+0xe0>)
 8011388:	9301      	str	r3, [sp, #4]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	9300      	str	r3, [sp, #0]
 801138e:	2343      	movs	r3, #67	; 0x43
 8011390:	4a17      	ldr	r2, [pc, #92]	; (80113f0 <dhcp_decline+0xe4>)
 8011392:	6979      	ldr	r1, [r7, #20]
 8011394:	f7ff f8b4 	bl	8010500 <udp_sendto_if_src>
 8011398:	4603      	mov	r3, r0
 801139a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801139c:	6978      	ldr	r0, [r7, #20]
 801139e:	f7f8 fa1d 	bl	80097dc <pbuf_free>
 80113a2:	e001      	b.n	80113a8 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80113a4:	23ff      	movs	r3, #255	; 0xff
 80113a6:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80113a8:	69bb      	ldr	r3, [r7, #24]
 80113aa:	799b      	ldrb	r3, [r3, #6]
 80113ac:	2bff      	cmp	r3, #255	; 0xff
 80113ae:	d005      	beq.n	80113bc <dhcp_decline+0xb0>
    dhcp->tries++;
 80113b0:	69bb      	ldr	r3, [r7, #24]
 80113b2:	799b      	ldrb	r3, [r3, #6]
 80113b4:	3301      	adds	r3, #1
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	69bb      	ldr	r3, [r7, #24]
 80113ba:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80113bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80113c0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80113c2:	89fb      	ldrh	r3, [r7, #14]
 80113c4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80113c8:	4a0a      	ldr	r2, [pc, #40]	; (80113f4 <dhcp_decline+0xe8>)
 80113ca:	fb82 1203 	smull	r1, r2, r2, r3
 80113ce:	1152      	asrs	r2, r2, #5
 80113d0:	17db      	asrs	r3, r3, #31
 80113d2:	1ad3      	subs	r3, r2, r3
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	69bb      	ldr	r3, [r7, #24]
 80113d8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80113da:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80113de:	4618      	mov	r0, r3
 80113e0:	3720      	adds	r7, #32
 80113e2:	46bd      	mov	sp, r7
 80113e4:	bdb0      	pop	{r4, r5, r7, pc}
 80113e6:	bf00      	nop
 80113e8:	200083ec 	.word	0x200083ec
 80113ec:	0801cb08 	.word	0x0801cb08
 80113f0:	0801cb0c 	.word	0x0801cb0c
 80113f4:	10624dd3 	.word	0x10624dd3

080113f8 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b08a      	sub	sp, #40	; 0x28
 80113fc:	af02      	add	r7, sp, #8
 80113fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011404:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8011406:	2300      	movs	r3, #0
 8011408:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	2200      	movs	r2, #0
 801140e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8011410:	2106      	movs	r1, #6
 8011412:	69b8      	ldr	r0, [r7, #24]
 8011414:	f000 fbf4 	bl	8011c00 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8011418:	f107 0308 	add.w	r3, r7, #8
 801141c:	2201      	movs	r2, #1
 801141e:	69b9      	ldr	r1, [r7, #24]
 8011420:	6878      	ldr	r0, [r7, #4]
 8011422:	f001 f877 	bl	8012514 <dhcp_create_msg>
 8011426:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8011428:	693b      	ldr	r3, [r7, #16]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d04b      	beq.n	80114c6 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801142e:	693b      	ldr	r3, [r7, #16]
 8011430:	685b      	ldr	r3, [r3, #4]
 8011432:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011434:	8938      	ldrh	r0, [r7, #8]
 8011436:	68fb      	ldr	r3, [r7, #12]
 8011438:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801143c:	2302      	movs	r3, #2
 801143e:	2239      	movs	r2, #57	; 0x39
 8011440:	f000 fbf8 	bl	8011c34 <dhcp_option>
 8011444:	4603      	mov	r3, r0
 8011446:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011448:	8938      	ldrh	r0, [r7, #8]
 801144a:	68fb      	ldr	r3, [r7, #12]
 801144c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011454:	461a      	mov	r2, r3
 8011456:	f000 fc47 	bl	8011ce8 <dhcp_option_short>
 801145a:	4603      	mov	r3, r0
 801145c:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801145e:	8938      	ldrh	r0, [r7, #8]
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011466:	2303      	movs	r3, #3
 8011468:	2237      	movs	r2, #55	; 0x37
 801146a:	f000 fbe3 	bl	8011c34 <dhcp_option>
 801146e:	4603      	mov	r3, r0
 8011470:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011472:	2300      	movs	r3, #0
 8011474:	77fb      	strb	r3, [r7, #31]
 8011476:	e00e      	b.n	8011496 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011478:	8938      	ldrh	r0, [r7, #8]
 801147a:	68fb      	ldr	r3, [r7, #12]
 801147c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011480:	7ffb      	ldrb	r3, [r7, #31]
 8011482:	4a29      	ldr	r2, [pc, #164]	; (8011528 <dhcp_discover+0x130>)
 8011484:	5cd3      	ldrb	r3, [r2, r3]
 8011486:	461a      	mov	r2, r3
 8011488:	f000 fc08 	bl	8011c9c <dhcp_option_byte>
 801148c:	4603      	mov	r3, r0
 801148e:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011490:	7ffb      	ldrb	r3, [r7, #31]
 8011492:	3301      	adds	r3, #1
 8011494:	77fb      	strb	r3, [r7, #31]
 8011496:	7ffb      	ldrb	r3, [r7, #31]
 8011498:	2b02      	cmp	r3, #2
 801149a:	d9ed      	bls.n	8011478 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801149c:	8938      	ldrh	r0, [r7, #8]
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	33f0      	adds	r3, #240	; 0xf0
 80114a2:	693a      	ldr	r2, [r7, #16]
 80114a4:	4619      	mov	r1, r3
 80114a6:	f001 f90b 	bl	80126c0 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80114aa:	4b20      	ldr	r3, [pc, #128]	; (801152c <dhcp_discover+0x134>)
 80114ac:	6818      	ldr	r0, [r3, #0]
 80114ae:	4b20      	ldr	r3, [pc, #128]	; (8011530 <dhcp_discover+0x138>)
 80114b0:	9301      	str	r3, [sp, #4]
 80114b2:	687b      	ldr	r3, [r7, #4]
 80114b4:	9300      	str	r3, [sp, #0]
 80114b6:	2343      	movs	r3, #67	; 0x43
 80114b8:	4a1e      	ldr	r2, [pc, #120]	; (8011534 <dhcp_discover+0x13c>)
 80114ba:	6939      	ldr	r1, [r7, #16]
 80114bc:	f7ff f820 	bl	8010500 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80114c0:	6938      	ldr	r0, [r7, #16]
 80114c2:	f7f8 f98b 	bl	80097dc <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80114c6:	69bb      	ldr	r3, [r7, #24]
 80114c8:	799b      	ldrb	r3, [r3, #6]
 80114ca:	2bff      	cmp	r3, #255	; 0xff
 80114cc:	d005      	beq.n	80114da <dhcp_discover+0xe2>
    dhcp->tries++;
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	799b      	ldrb	r3, [r3, #6]
 80114d2:	3301      	adds	r3, #1
 80114d4:	b2da      	uxtb	r2, r3
 80114d6:	69bb      	ldr	r3, [r7, #24]
 80114d8:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80114da:	69bb      	ldr	r3, [r7, #24]
 80114dc:	799b      	ldrb	r3, [r3, #6]
 80114de:	2b05      	cmp	r3, #5
 80114e0:	d80d      	bhi.n	80114fe <dhcp_discover+0x106>
 80114e2:	69bb      	ldr	r3, [r7, #24]
 80114e4:	799b      	ldrb	r3, [r3, #6]
 80114e6:	461a      	mov	r2, r3
 80114e8:	2301      	movs	r3, #1
 80114ea:	4093      	lsls	r3, r2
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	461a      	mov	r2, r3
 80114f0:	0152      	lsls	r2, r2, #5
 80114f2:	1ad2      	subs	r2, r2, r3
 80114f4:	0092      	lsls	r2, r2, #2
 80114f6:	4413      	add	r3, r2
 80114f8:	00db      	lsls	r3, r3, #3
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	e001      	b.n	8011502 <dhcp_discover+0x10a>
 80114fe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8011502:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011504:	897b      	ldrh	r3, [r7, #10]
 8011506:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801150a:	4a0b      	ldr	r2, [pc, #44]	; (8011538 <dhcp_discover+0x140>)
 801150c:	fb82 1203 	smull	r1, r2, r2, r3
 8011510:	1152      	asrs	r2, r2, #5
 8011512:	17db      	asrs	r3, r3, #31
 8011514:	1ad3      	subs	r3, r2, r3
 8011516:	b29a      	uxth	r2, r3
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801151c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011520:	4618      	mov	r0, r3
 8011522:	3720      	adds	r7, #32
 8011524:	46bd      	mov	sp, r7
 8011526:	bd80      	pop	{r7, pc}
 8011528:	20000018 	.word	0x20000018
 801152c:	200083ec 	.word	0x200083ec
 8011530:	0801cb08 	.word	0x0801cb08
 8011534:	0801cb0c 	.word	0x0801cb0c
 8011538:	10624dd3 	.word	0x10624dd3

0801153c <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 801153c:	b580      	push	{r7, lr}
 801153e:	b088      	sub	sp, #32
 8011540:	af00      	add	r7, sp, #0
 8011542:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d107      	bne.n	801155a <dhcp_bind+0x1e>
 801154a:	4b64      	ldr	r3, [pc, #400]	; (80116dc <dhcp_bind+0x1a0>)
 801154c:	f240 4215 	movw	r2, #1045	; 0x415
 8011550:	4963      	ldr	r1, [pc, #396]	; (80116e0 <dhcp_bind+0x1a4>)
 8011552:	4864      	ldr	r0, [pc, #400]	; (80116e4 <dhcp_bind+0x1a8>)
 8011554:	f006 fd1e 	bl	8017f94 <iprintf>
 8011558:	e0bc      	b.n	80116d4 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801155e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8011560:	69bb      	ldr	r3, [r7, #24]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d107      	bne.n	8011576 <dhcp_bind+0x3a>
 8011566:	4b5d      	ldr	r3, [pc, #372]	; (80116dc <dhcp_bind+0x1a0>)
 8011568:	f240 4217 	movw	r2, #1047	; 0x417
 801156c:	495e      	ldr	r1, [pc, #376]	; (80116e8 <dhcp_bind+0x1ac>)
 801156e:	485d      	ldr	r0, [pc, #372]	; (80116e4 <dhcp_bind+0x1a8>)
 8011570:	f006 fd10 	bl	8017f94 <iprintf>
 8011574:	e0ae      	b.n	80116d4 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8011576:	69bb      	ldr	r3, [r7, #24]
 8011578:	2200      	movs	r2, #0
 801157a:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 801157c:	69bb      	ldr	r3, [r7, #24]
 801157e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011584:	d019      	beq.n	80115ba <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8011586:	69bb      	ldr	r3, [r7, #24]
 8011588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801158a:	331e      	adds	r3, #30
 801158c:	4a57      	ldr	r2, [pc, #348]	; (80116ec <dhcp_bind+0x1b0>)
 801158e:	fba2 2303 	umull	r2, r3, r2, r3
 8011592:	095b      	lsrs	r3, r3, #5
 8011594:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8011596:	69fb      	ldr	r3, [r7, #28]
 8011598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801159c:	d302      	bcc.n	80115a4 <dhcp_bind+0x68>
      timeout = 0xffff;
 801159e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115a2:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80115a4:	69fb      	ldr	r3, [r7, #28]
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	69bb      	ldr	r3, [r7, #24]
 80115aa:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80115ac:	69bb      	ldr	r3, [r7, #24]
 80115ae:	8a9b      	ldrh	r3, [r3, #20]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d102      	bne.n	80115ba <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80115b4:	69bb      	ldr	r3, [r7, #24]
 80115b6:	2201      	movs	r2, #1
 80115b8:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80115ba:	69bb      	ldr	r3, [r7, #24]
 80115bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115c2:	d01d      	beq.n	8011600 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80115c4:	69bb      	ldr	r3, [r7, #24]
 80115c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115c8:	331e      	adds	r3, #30
 80115ca:	4a48      	ldr	r2, [pc, #288]	; (80116ec <dhcp_bind+0x1b0>)
 80115cc:	fba2 2303 	umull	r2, r3, r2, r3
 80115d0:	095b      	lsrs	r3, r3, #5
 80115d2:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80115d4:	69fb      	ldr	r3, [r7, #28]
 80115d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115da:	d302      	bcc.n	80115e2 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80115dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80115e0:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80115e2:	69fb      	ldr	r3, [r7, #28]
 80115e4:	b29a      	uxth	r2, r3
 80115e6:	69bb      	ldr	r3, [r7, #24]
 80115e8:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80115ea:	69bb      	ldr	r3, [r7, #24]
 80115ec:	895b      	ldrh	r3, [r3, #10]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d102      	bne.n	80115f8 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80115f2:	69bb      	ldr	r3, [r7, #24]
 80115f4:	2201      	movs	r2, #1
 80115f6:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80115f8:	69bb      	ldr	r3, [r7, #24]
 80115fa:	895a      	ldrh	r2, [r3, #10]
 80115fc:	69bb      	ldr	r3, [r7, #24]
 80115fe:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011608:	d01d      	beq.n	8011646 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801160a:	69bb      	ldr	r3, [r7, #24]
 801160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801160e:	331e      	adds	r3, #30
 8011610:	4a36      	ldr	r2, [pc, #216]	; (80116ec <dhcp_bind+0x1b0>)
 8011612:	fba2 2303 	umull	r2, r3, r2, r3
 8011616:	095b      	lsrs	r3, r3, #5
 8011618:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801161a:	69fb      	ldr	r3, [r7, #28]
 801161c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011620:	d302      	bcc.n	8011628 <dhcp_bind+0xec>
      timeout = 0xffff;
 8011622:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011626:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	b29a      	uxth	r2, r3
 801162c:	69bb      	ldr	r3, [r7, #24]
 801162e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8011630:	69bb      	ldr	r3, [r7, #24]
 8011632:	899b      	ldrh	r3, [r3, #12]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d102      	bne.n	801163e <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8011638:	69bb      	ldr	r3, [r7, #24]
 801163a:	2201      	movs	r2, #1
 801163c:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801163e:	69bb      	ldr	r3, [r7, #24]
 8011640:	899a      	ldrh	r2, [r3, #12]
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8011646:	69bb      	ldr	r3, [r7, #24]
 8011648:	895a      	ldrh	r2, [r3, #10]
 801164a:	69bb      	ldr	r3, [r7, #24]
 801164c:	899b      	ldrh	r3, [r3, #12]
 801164e:	429a      	cmp	r2, r3
 8011650:	d306      	bcc.n	8011660 <dhcp_bind+0x124>
 8011652:	69bb      	ldr	r3, [r7, #24]
 8011654:	899b      	ldrh	r3, [r3, #12]
 8011656:	2b00      	cmp	r3, #0
 8011658:	d002      	beq.n	8011660 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801165a:	69bb      	ldr	r3, [r7, #24]
 801165c:	2200      	movs	r2, #0
 801165e:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8011660:	69bb      	ldr	r3, [r7, #24]
 8011662:	79db      	ldrb	r3, [r3, #7]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d003      	beq.n	8011670 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8011668:	69bb      	ldr	r3, [r7, #24]
 801166a:	6a1b      	ldr	r3, [r3, #32]
 801166c:	613b      	str	r3, [r7, #16]
 801166e:	e014      	b.n	801169a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8011670:	69bb      	ldr	r3, [r7, #24]
 8011672:	331c      	adds	r3, #28
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8011678:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801167c:	2b00      	cmp	r3, #0
 801167e:	db02      	blt.n	8011686 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8011680:	23ff      	movs	r3, #255	; 0xff
 8011682:	613b      	str	r3, [r7, #16]
 8011684:	e009      	b.n	801169a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8011686:	7dfb      	ldrb	r3, [r7, #23]
 8011688:	2bbf      	cmp	r3, #191	; 0xbf
 801168a:	d903      	bls.n	8011694 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 801168c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8011690:	613b      	str	r3, [r7, #16]
 8011692:	e002      	b.n	801169a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8011694:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011698:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801169a:	69bb      	ldr	r3, [r7, #24]
 801169c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801169e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80116a0:	68fb      	ldr	r3, [r7, #12]
 80116a2:	2b00      	cmp	r3, #0
 80116a4:	d108      	bne.n	80116b8 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80116a6:	69bb      	ldr	r3, [r7, #24]
 80116a8:	69da      	ldr	r2, [r3, #28]
 80116aa:	693b      	ldr	r3, [r7, #16]
 80116ac:	4013      	ands	r3, r2
 80116ae:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80116b0:	68fb      	ldr	r3, [r7, #12]
 80116b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80116b6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80116b8:	210a      	movs	r1, #10
 80116ba:	69b8      	ldr	r0, [r7, #24]
 80116bc:	f000 faa0 	bl	8011c00 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80116c0:	69bb      	ldr	r3, [r7, #24]
 80116c2:	f103 011c 	add.w	r1, r3, #28
 80116c6:	f107 030c 	add.w	r3, r7, #12
 80116ca:	f107 0210 	add.w	r2, r7, #16
 80116ce:	6878      	ldr	r0, [r7, #4]
 80116d0:	f7f7 fb7a 	bl	8008dc8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80116d4:	3720      	adds	r7, #32
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}
 80116da:	bf00      	nop
 80116dc:	0801bd08 	.word	0x0801bd08
 80116e0:	0801be68 	.word	0x0801be68
 80116e4:	0801bd68 	.word	0x0801bd68
 80116e8:	0801be84 	.word	0x0801be84
 80116ec:	88888889 	.word	0x88888889

080116f0 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80116f0:	b580      	push	{r7, lr}
 80116f2:	b08a      	sub	sp, #40	; 0x28
 80116f4:	af02      	add	r7, sp, #8
 80116f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80116fc:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80116fe:	2105      	movs	r1, #5
 8011700:	69b8      	ldr	r0, [r7, #24]
 8011702:	f000 fa7d 	bl	8011c00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011706:	f107 030c 	add.w	r3, r7, #12
 801170a:	2203      	movs	r2, #3
 801170c:	69b9      	ldr	r1, [r7, #24]
 801170e:	6878      	ldr	r0, [r7, #4]
 8011710:	f000 ff00 	bl	8012514 <dhcp_create_msg>
 8011714:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	2b00      	cmp	r3, #0
 801171a:	d04e      	beq.n	80117ba <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801171c:	697b      	ldr	r3, [r7, #20]
 801171e:	685b      	ldr	r3, [r3, #4]
 8011720:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011722:	89b8      	ldrh	r0, [r7, #12]
 8011724:	693b      	ldr	r3, [r7, #16]
 8011726:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801172a:	2302      	movs	r3, #2
 801172c:	2239      	movs	r2, #57	; 0x39
 801172e:	f000 fa81 	bl	8011c34 <dhcp_option>
 8011732:	4603      	mov	r3, r0
 8011734:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8011736:	89b8      	ldrh	r0, [r7, #12]
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011742:	461a      	mov	r2, r3
 8011744:	f000 fad0 	bl	8011ce8 <dhcp_option_short>
 8011748:	4603      	mov	r3, r0
 801174a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801174c:	89b8      	ldrh	r0, [r7, #12]
 801174e:	693b      	ldr	r3, [r7, #16]
 8011750:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011754:	2303      	movs	r3, #3
 8011756:	2237      	movs	r2, #55	; 0x37
 8011758:	f000 fa6c 	bl	8011c34 <dhcp_option>
 801175c:	4603      	mov	r3, r0
 801175e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011760:	2300      	movs	r3, #0
 8011762:	77bb      	strb	r3, [r7, #30]
 8011764:	e00e      	b.n	8011784 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011766:	89b8      	ldrh	r0, [r7, #12]
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801176e:	7fbb      	ldrb	r3, [r7, #30]
 8011770:	4a2a      	ldr	r2, [pc, #168]	; (801181c <dhcp_renew+0x12c>)
 8011772:	5cd3      	ldrb	r3, [r2, r3]
 8011774:	461a      	mov	r2, r3
 8011776:	f000 fa91 	bl	8011c9c <dhcp_option_byte>
 801177a:	4603      	mov	r3, r0
 801177c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801177e:	7fbb      	ldrb	r3, [r7, #30]
 8011780:	3301      	adds	r3, #1
 8011782:	77bb      	strb	r3, [r7, #30]
 8011784:	7fbb      	ldrb	r3, [r7, #30]
 8011786:	2b02      	cmp	r3, #2
 8011788:	d9ed      	bls.n	8011766 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801178a:	89b8      	ldrh	r0, [r7, #12]
 801178c:	693b      	ldr	r3, [r7, #16]
 801178e:	33f0      	adds	r3, #240	; 0xf0
 8011790:	697a      	ldr	r2, [r7, #20]
 8011792:	4619      	mov	r1, r3
 8011794:	f000 ff94 	bl	80126c0 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011798:	4b21      	ldr	r3, [pc, #132]	; (8011820 <dhcp_renew+0x130>)
 801179a:	6818      	ldr	r0, [r3, #0]
 801179c:	69bb      	ldr	r3, [r7, #24]
 801179e:	f103 0218 	add.w	r2, r3, #24
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	9300      	str	r3, [sp, #0]
 80117a6:	2343      	movs	r3, #67	; 0x43
 80117a8:	6979      	ldr	r1, [r7, #20]
 80117aa:	f7fe fe35 	bl	8010418 <udp_sendto_if>
 80117ae:	4603      	mov	r3, r0
 80117b0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80117b2:	6978      	ldr	r0, [r7, #20]
 80117b4:	f7f8 f812 	bl	80097dc <pbuf_free>
 80117b8:	e001      	b.n	80117be <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80117ba:	23ff      	movs	r3, #255	; 0xff
 80117bc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	799b      	ldrb	r3, [r3, #6]
 80117c2:	2bff      	cmp	r3, #255	; 0xff
 80117c4:	d005      	beq.n	80117d2 <dhcp_renew+0xe2>
    dhcp->tries++;
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	799b      	ldrb	r3, [r3, #6]
 80117ca:	3301      	adds	r3, #1
 80117cc:	b2da      	uxtb	r2, r3
 80117ce:	69bb      	ldr	r3, [r7, #24]
 80117d0:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80117d2:	69bb      	ldr	r3, [r7, #24]
 80117d4:	799b      	ldrb	r3, [r3, #6]
 80117d6:	2b09      	cmp	r3, #9
 80117d8:	d80a      	bhi.n	80117f0 <dhcp_renew+0x100>
 80117da:	69bb      	ldr	r3, [r7, #24]
 80117dc:	799b      	ldrb	r3, [r3, #6]
 80117de:	b29b      	uxth	r3, r3
 80117e0:	461a      	mov	r2, r3
 80117e2:	0152      	lsls	r2, r2, #5
 80117e4:	1ad2      	subs	r2, r2, r3
 80117e6:	0092      	lsls	r2, r2, #2
 80117e8:	4413      	add	r3, r2
 80117ea:	011b      	lsls	r3, r3, #4
 80117ec:	b29b      	uxth	r3, r3
 80117ee:	e001      	b.n	80117f4 <dhcp_renew+0x104>
 80117f0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80117f4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80117f6:	89fb      	ldrh	r3, [r7, #14]
 80117f8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80117fc:	4a09      	ldr	r2, [pc, #36]	; (8011824 <dhcp_renew+0x134>)
 80117fe:	fb82 1203 	smull	r1, r2, r2, r3
 8011802:	1152      	asrs	r2, r2, #5
 8011804:	17db      	asrs	r3, r3, #31
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	b29a      	uxth	r2, r3
 801180a:	69bb      	ldr	r3, [r7, #24]
 801180c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801180e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011812:	4618      	mov	r0, r3
 8011814:	3720      	adds	r7, #32
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	20000018 	.word	0x20000018
 8011820:	200083ec 	.word	0x200083ec
 8011824:	10624dd3 	.word	0x10624dd3

08011828 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b08a      	sub	sp, #40	; 0x28
 801182c:	af02      	add	r7, sp, #8
 801182e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011834:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8011836:	2104      	movs	r1, #4
 8011838:	69b8      	ldr	r0, [r7, #24]
 801183a:	f000 f9e1 	bl	8011c00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801183e:	f107 030c 	add.w	r3, r7, #12
 8011842:	2203      	movs	r2, #3
 8011844:	69b9      	ldr	r1, [r7, #24]
 8011846:	6878      	ldr	r0, [r7, #4]
 8011848:	f000 fe64 	bl	8012514 <dhcp_create_msg>
 801184c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801184e:	697b      	ldr	r3, [r7, #20]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d04c      	beq.n	80118ee <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801185a:	89b8      	ldrh	r0, [r7, #12]
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011862:	2302      	movs	r3, #2
 8011864:	2239      	movs	r2, #57	; 0x39
 8011866:	f000 f9e5 	bl	8011c34 <dhcp_option>
 801186a:	4603      	mov	r3, r0
 801186c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801186e:	89b8      	ldrh	r0, [r7, #12]
 8011870:	693b      	ldr	r3, [r7, #16]
 8011872:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801187a:	461a      	mov	r2, r3
 801187c:	f000 fa34 	bl	8011ce8 <dhcp_option_short>
 8011880:	4603      	mov	r3, r0
 8011882:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8011884:	89b8      	ldrh	r0, [r7, #12]
 8011886:	693b      	ldr	r3, [r7, #16]
 8011888:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801188c:	2303      	movs	r3, #3
 801188e:	2237      	movs	r2, #55	; 0x37
 8011890:	f000 f9d0 	bl	8011c34 <dhcp_option>
 8011894:	4603      	mov	r3, r0
 8011896:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011898:	2300      	movs	r3, #0
 801189a:	77bb      	strb	r3, [r7, #30]
 801189c:	e00e      	b.n	80118bc <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801189e:	89b8      	ldrh	r0, [r7, #12]
 80118a0:	693b      	ldr	r3, [r7, #16]
 80118a2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80118a6:	7fbb      	ldrb	r3, [r7, #30]
 80118a8:	4a29      	ldr	r2, [pc, #164]	; (8011950 <dhcp_rebind+0x128>)
 80118aa:	5cd3      	ldrb	r3, [r2, r3]
 80118ac:	461a      	mov	r2, r3
 80118ae:	f000 f9f5 	bl	8011c9c <dhcp_option_byte>
 80118b2:	4603      	mov	r3, r0
 80118b4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80118b6:	7fbb      	ldrb	r3, [r7, #30]
 80118b8:	3301      	adds	r3, #1
 80118ba:	77bb      	strb	r3, [r7, #30]
 80118bc:	7fbb      	ldrb	r3, [r7, #30]
 80118be:	2b02      	cmp	r3, #2
 80118c0:	d9ed      	bls.n	801189e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80118c2:	89b8      	ldrh	r0, [r7, #12]
 80118c4:	693b      	ldr	r3, [r7, #16]
 80118c6:	33f0      	adds	r3, #240	; 0xf0
 80118c8:	697a      	ldr	r2, [r7, #20]
 80118ca:	4619      	mov	r1, r3
 80118cc:	f000 fef8 	bl	80126c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80118d0:	4b20      	ldr	r3, [pc, #128]	; (8011954 <dhcp_rebind+0x12c>)
 80118d2:	6818      	ldr	r0, [r3, #0]
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	9300      	str	r3, [sp, #0]
 80118d8:	2343      	movs	r3, #67	; 0x43
 80118da:	4a1f      	ldr	r2, [pc, #124]	; (8011958 <dhcp_rebind+0x130>)
 80118dc:	6979      	ldr	r1, [r7, #20]
 80118de:	f7fe fd9b 	bl	8010418 <udp_sendto_if>
 80118e2:	4603      	mov	r3, r0
 80118e4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80118e6:	6978      	ldr	r0, [r7, #20]
 80118e8:	f7f7 ff78 	bl	80097dc <pbuf_free>
 80118ec:	e001      	b.n	80118f2 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80118ee:	23ff      	movs	r3, #255	; 0xff
 80118f0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80118f2:	69bb      	ldr	r3, [r7, #24]
 80118f4:	799b      	ldrb	r3, [r3, #6]
 80118f6:	2bff      	cmp	r3, #255	; 0xff
 80118f8:	d005      	beq.n	8011906 <dhcp_rebind+0xde>
    dhcp->tries++;
 80118fa:	69bb      	ldr	r3, [r7, #24]
 80118fc:	799b      	ldrb	r3, [r3, #6]
 80118fe:	3301      	adds	r3, #1
 8011900:	b2da      	uxtb	r2, r3
 8011902:	69bb      	ldr	r3, [r7, #24]
 8011904:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011906:	69bb      	ldr	r3, [r7, #24]
 8011908:	799b      	ldrb	r3, [r3, #6]
 801190a:	2b09      	cmp	r3, #9
 801190c:	d80a      	bhi.n	8011924 <dhcp_rebind+0xfc>
 801190e:	69bb      	ldr	r3, [r7, #24]
 8011910:	799b      	ldrb	r3, [r3, #6]
 8011912:	b29b      	uxth	r3, r3
 8011914:	461a      	mov	r2, r3
 8011916:	0152      	lsls	r2, r2, #5
 8011918:	1ad2      	subs	r2, r2, r3
 801191a:	0092      	lsls	r2, r2, #2
 801191c:	4413      	add	r3, r2
 801191e:	00db      	lsls	r3, r3, #3
 8011920:	b29b      	uxth	r3, r3
 8011922:	e001      	b.n	8011928 <dhcp_rebind+0x100>
 8011924:	f242 7310 	movw	r3, #10000	; 0x2710
 8011928:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801192a:	89fb      	ldrh	r3, [r7, #14]
 801192c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011930:	4a0a      	ldr	r2, [pc, #40]	; (801195c <dhcp_rebind+0x134>)
 8011932:	fb82 1203 	smull	r1, r2, r2, r3
 8011936:	1152      	asrs	r2, r2, #5
 8011938:	17db      	asrs	r3, r3, #31
 801193a:	1ad3      	subs	r3, r2, r3
 801193c:	b29a      	uxth	r2, r3
 801193e:	69bb      	ldr	r3, [r7, #24]
 8011940:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011942:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011946:	4618      	mov	r0, r3
 8011948:	3720      	adds	r7, #32
 801194a:	46bd      	mov	sp, r7
 801194c:	bd80      	pop	{r7, pc}
 801194e:	bf00      	nop
 8011950:	20000018 	.word	0x20000018
 8011954:	200083ec 	.word	0x200083ec
 8011958:	0801cb0c 	.word	0x0801cb0c
 801195c:	10624dd3 	.word	0x10624dd3

08011960 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8011960:	b5b0      	push	{r4, r5, r7, lr}
 8011962:	b08a      	sub	sp, #40	; 0x28
 8011964:	af02      	add	r7, sp, #8
 8011966:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 801196e:	2103      	movs	r1, #3
 8011970:	69b8      	ldr	r0, [r7, #24]
 8011972:	f000 f945 	bl	8011c00 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8011976:	f107 030c 	add.w	r3, r7, #12
 801197a:	2203      	movs	r2, #3
 801197c:	69b9      	ldr	r1, [r7, #24]
 801197e:	6878      	ldr	r0, [r7, #4]
 8011980:	f000 fdc8 	bl	8012514 <dhcp_create_msg>
 8011984:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8011986:	697b      	ldr	r3, [r7, #20]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d066      	beq.n	8011a5a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	685b      	ldr	r3, [r3, #4]
 8011990:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8011992:	89b8      	ldrh	r0, [r7, #12]
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801199a:	2302      	movs	r3, #2
 801199c:	2239      	movs	r2, #57	; 0x39
 801199e:	f000 f949 	bl	8011c34 <dhcp_option>
 80119a2:	4603      	mov	r3, r0
 80119a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80119a6:	89b8      	ldrh	r0, [r7, #12]
 80119a8:	693b      	ldr	r3, [r7, #16]
 80119aa:	33f0      	adds	r3, #240	; 0xf0
 80119ac:	f44f 7210 	mov.w	r2, #576	; 0x240
 80119b0:	4619      	mov	r1, r3
 80119b2:	f000 f999 	bl	8011ce8 <dhcp_option_short>
 80119b6:	4603      	mov	r3, r0
 80119b8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80119ba:	89b8      	ldrh	r0, [r7, #12]
 80119bc:	693b      	ldr	r3, [r7, #16]
 80119be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119c2:	2304      	movs	r3, #4
 80119c4:	2232      	movs	r2, #50	; 0x32
 80119c6:	f000 f935 	bl	8011c34 <dhcp_option>
 80119ca:	4603      	mov	r3, r0
 80119cc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80119ce:	89bc      	ldrh	r4, [r7, #12]
 80119d0:	693b      	ldr	r3, [r7, #16]
 80119d2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80119d6:	69bb      	ldr	r3, [r7, #24]
 80119d8:	69db      	ldr	r3, [r3, #28]
 80119da:	4618      	mov	r0, r3
 80119dc:	f7f6 fb5f 	bl	800809e <lwip_htonl>
 80119e0:	4603      	mov	r3, r0
 80119e2:	461a      	mov	r2, r3
 80119e4:	4629      	mov	r1, r5
 80119e6:	4620      	mov	r0, r4
 80119e8:	f000 f9b0 	bl	8011d4c <dhcp_option_long>
 80119ec:	4603      	mov	r3, r0
 80119ee:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80119f0:	89b8      	ldrh	r0, [r7, #12]
 80119f2:	693b      	ldr	r3, [r7, #16]
 80119f4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80119f8:	2303      	movs	r3, #3
 80119fa:	2237      	movs	r2, #55	; 0x37
 80119fc:	f000 f91a 	bl	8011c34 <dhcp_option>
 8011a00:	4603      	mov	r3, r0
 8011a02:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a04:	2300      	movs	r3, #0
 8011a06:	77bb      	strb	r3, [r7, #30]
 8011a08:	e00e      	b.n	8011a28 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8011a0a:	89b8      	ldrh	r0, [r7, #12]
 8011a0c:	693b      	ldr	r3, [r7, #16]
 8011a0e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011a12:	7fbb      	ldrb	r3, [r7, #30]
 8011a14:	4a29      	ldr	r2, [pc, #164]	; (8011abc <dhcp_reboot+0x15c>)
 8011a16:	5cd3      	ldrb	r3, [r2, r3]
 8011a18:	461a      	mov	r2, r3
 8011a1a:	f000 f93f 	bl	8011c9c <dhcp_option_byte>
 8011a1e:	4603      	mov	r3, r0
 8011a20:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8011a22:	7fbb      	ldrb	r3, [r7, #30]
 8011a24:	3301      	adds	r3, #1
 8011a26:	77bb      	strb	r3, [r7, #30]
 8011a28:	7fbb      	ldrb	r3, [r7, #30]
 8011a2a:	2b02      	cmp	r3, #2
 8011a2c:	d9ed      	bls.n	8011a0a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011a2e:	89b8      	ldrh	r0, [r7, #12]
 8011a30:	693b      	ldr	r3, [r7, #16]
 8011a32:	33f0      	adds	r3, #240	; 0xf0
 8011a34:	697a      	ldr	r2, [r7, #20]
 8011a36:	4619      	mov	r1, r3
 8011a38:	f000 fe42 	bl	80126c0 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011a3c:	4b20      	ldr	r3, [pc, #128]	; (8011ac0 <dhcp_reboot+0x160>)
 8011a3e:	6818      	ldr	r0, [r3, #0]
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	9300      	str	r3, [sp, #0]
 8011a44:	2343      	movs	r3, #67	; 0x43
 8011a46:	4a1f      	ldr	r2, [pc, #124]	; (8011ac4 <dhcp_reboot+0x164>)
 8011a48:	6979      	ldr	r1, [r7, #20]
 8011a4a:	f7fe fce5 	bl	8010418 <udp_sendto_if>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8011a52:	6978      	ldr	r0, [r7, #20]
 8011a54:	f7f7 fec2 	bl	80097dc <pbuf_free>
 8011a58:	e001      	b.n	8011a5e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8011a5a:	23ff      	movs	r3, #255	; 0xff
 8011a5c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	799b      	ldrb	r3, [r3, #6]
 8011a62:	2bff      	cmp	r3, #255	; 0xff
 8011a64:	d005      	beq.n	8011a72 <dhcp_reboot+0x112>
    dhcp->tries++;
 8011a66:	69bb      	ldr	r3, [r7, #24]
 8011a68:	799b      	ldrb	r3, [r3, #6]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	b2da      	uxtb	r2, r3
 8011a6e:	69bb      	ldr	r3, [r7, #24]
 8011a70:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8011a72:	69bb      	ldr	r3, [r7, #24]
 8011a74:	799b      	ldrb	r3, [r3, #6]
 8011a76:	2b09      	cmp	r3, #9
 8011a78:	d80a      	bhi.n	8011a90 <dhcp_reboot+0x130>
 8011a7a:	69bb      	ldr	r3, [r7, #24]
 8011a7c:	799b      	ldrb	r3, [r3, #6]
 8011a7e:	b29b      	uxth	r3, r3
 8011a80:	461a      	mov	r2, r3
 8011a82:	0152      	lsls	r2, r2, #5
 8011a84:	1ad2      	subs	r2, r2, r3
 8011a86:	0092      	lsls	r2, r2, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	b29b      	uxth	r3, r3
 8011a8e:	e001      	b.n	8011a94 <dhcp_reboot+0x134>
 8011a90:	f242 7310 	movw	r3, #10000	; 0x2710
 8011a94:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8011a96:	89fb      	ldrh	r3, [r7, #14]
 8011a98:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8011a9c:	4a0a      	ldr	r2, [pc, #40]	; (8011ac8 <dhcp_reboot+0x168>)
 8011a9e:	fb82 1203 	smull	r1, r2, r2, r3
 8011aa2:	1152      	asrs	r2, r2, #5
 8011aa4:	17db      	asrs	r3, r3, #31
 8011aa6:	1ad3      	subs	r3, r2, r3
 8011aa8:	b29a      	uxth	r2, r3
 8011aaa:	69bb      	ldr	r3, [r7, #24]
 8011aac:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8011aae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3720      	adds	r7, #32
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bdb0      	pop	{r4, r5, r7, pc}
 8011aba:	bf00      	nop
 8011abc:	20000018 	.word	0x20000018
 8011ac0:	200083ec 	.word	0x200083ec
 8011ac4:	0801cb0c 	.word	0x0801cb0c
 8011ac8:	10624dd3 	.word	0x10624dd3

08011acc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8011acc:	b5b0      	push	{r4, r5, r7, lr}
 8011ace:	b08a      	sub	sp, #40	; 0x28
 8011ad0:	af02      	add	r7, sp, #8
 8011ad2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad8:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	2b00      	cmp	r3, #0
 8011ade:	f000 8084 	beq.w	8011bea <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	795b      	ldrb	r3, [r3, #5]
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	f000 8081 	beq.w	8011bee <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8011aec:	69fb      	ldr	r3, [r7, #28]
 8011aee:	699b      	ldr	r3, [r3, #24]
 8011af0:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8011af2:	69fb      	ldr	r3, [r7, #28]
 8011af4:	2200      	movs	r2, #0
 8011af6:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8011af8:	69fb      	ldr	r3, [r7, #28]
 8011afa:	2200      	movs	r2, #0
 8011afc:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8011afe:	69fb      	ldr	r3, [r7, #28]
 8011b00:	2200      	movs	r2, #0
 8011b02:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8011b04:	69fb      	ldr	r3, [r7, #28]
 8011b06:	2200      	movs	r2, #0
 8011b08:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8011b0a:	69fb      	ldr	r3, [r7, #28]
 8011b0c:	2200      	movs	r2, #0
 8011b0e:	631a      	str	r2, [r3, #48]	; 0x30
 8011b10:	69fb      	ldr	r3, [r7, #28]
 8011b12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	62da      	str	r2, [r3, #44]	; 0x2c
 8011b18:	69fb      	ldr	r3, [r7, #28]
 8011b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8011b20:	69fb      	ldr	r3, [r7, #28]
 8011b22:	2200      	movs	r2, #0
 8011b24:	829a      	strh	r2, [r3, #20]
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	8a9a      	ldrh	r2, [r3, #20]
 8011b2a:	69fb      	ldr	r3, [r7, #28]
 8011b2c:	825a      	strh	r2, [r3, #18]
 8011b2e:	69fb      	ldr	r3, [r7, #28]
 8011b30:	8a5a      	ldrh	r2, [r3, #18]
 8011b32:	69fb      	ldr	r3, [r7, #28]
 8011b34:	821a      	strh	r2, [r3, #16]
 8011b36:	69fb      	ldr	r3, [r7, #28]
 8011b38:	8a1a      	ldrh	r2, [r3, #16]
 8011b3a:	69fb      	ldr	r3, [r7, #28]
 8011b3c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8011b3e:	6878      	ldr	r0, [r7, #4]
 8011b40:	f000 fdec 	bl	801271c <dhcp_supplied_address>
 8011b44:	4603      	mov	r3, r0
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d03b      	beq.n	8011bc2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8011b4a:	f107 030e 	add.w	r3, r7, #14
 8011b4e:	2207      	movs	r2, #7
 8011b50:	69f9      	ldr	r1, [r7, #28]
 8011b52:	6878      	ldr	r0, [r7, #4]
 8011b54:	f000 fcde 	bl	8012514 <dhcp_create_msg>
 8011b58:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8011b5a:	69bb      	ldr	r3, [r7, #24]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d030      	beq.n	8011bc2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8011b60:	69bb      	ldr	r3, [r7, #24]
 8011b62:	685b      	ldr	r3, [r3, #4]
 8011b64:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8011b66:	89f8      	ldrh	r0, [r7, #14]
 8011b68:	697b      	ldr	r3, [r7, #20]
 8011b6a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8011b6e:	2304      	movs	r3, #4
 8011b70:	2236      	movs	r2, #54	; 0x36
 8011b72:	f000 f85f 	bl	8011c34 <dhcp_option>
 8011b76:	4603      	mov	r3, r0
 8011b78:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8011b7a:	89fc      	ldrh	r4, [r7, #14]
 8011b7c:	697b      	ldr	r3, [r7, #20]
 8011b7e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7f6 fa8a 	bl	800809e <lwip_htonl>
 8011b8a:	4603      	mov	r3, r0
 8011b8c:	461a      	mov	r2, r3
 8011b8e:	4629      	mov	r1, r5
 8011b90:	4620      	mov	r0, r4
 8011b92:	f000 f8db 	bl	8011d4c <dhcp_option_long>
 8011b96:	4603      	mov	r3, r0
 8011b98:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8011b9a:	89f8      	ldrh	r0, [r7, #14]
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	33f0      	adds	r3, #240	; 0xf0
 8011ba0:	69ba      	ldr	r2, [r7, #24]
 8011ba2:	4619      	mov	r1, r3
 8011ba4:	f000 fd8c 	bl	80126c0 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8011ba8:	4b13      	ldr	r3, [pc, #76]	; (8011bf8 <dhcp_release_and_stop+0x12c>)
 8011baa:	6818      	ldr	r0, [r3, #0]
 8011bac:	f107 0210 	add.w	r2, r7, #16
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	9300      	str	r3, [sp, #0]
 8011bb4:	2343      	movs	r3, #67	; 0x43
 8011bb6:	69b9      	ldr	r1, [r7, #24]
 8011bb8:	f7fe fc2e 	bl	8010418 <udp_sendto_if>
      pbuf_free(p_out);
 8011bbc:	69b8      	ldr	r0, [r7, #24]
 8011bbe:	f7f7 fe0d 	bl	80097dc <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8011bc2:	4b0e      	ldr	r3, [pc, #56]	; (8011bfc <dhcp_release_and_stop+0x130>)
 8011bc4:	4a0d      	ldr	r2, [pc, #52]	; (8011bfc <dhcp_release_and_stop+0x130>)
 8011bc6:	490d      	ldr	r1, [pc, #52]	; (8011bfc <dhcp_release_and_stop+0x130>)
 8011bc8:	6878      	ldr	r0, [r7, #4]
 8011bca:	f7f7 f8fd 	bl	8008dc8 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8011bce:	2100      	movs	r1, #0
 8011bd0:	69f8      	ldr	r0, [r7, #28]
 8011bd2:	f000 f815 	bl	8011c00 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8011bd6:	69fb      	ldr	r3, [r7, #28]
 8011bd8:	791b      	ldrb	r3, [r3, #4]
 8011bda:	2b00      	cmp	r3, #0
 8011bdc:	d008      	beq.n	8011bf0 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8011bde:	f7fe ff73 	bl	8010ac8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8011be2:	69fb      	ldr	r3, [r7, #28]
 8011be4:	2200      	movs	r2, #0
 8011be6:	711a      	strb	r2, [r3, #4]
 8011be8:	e002      	b.n	8011bf0 <dhcp_release_and_stop+0x124>
    return;
 8011bea:	bf00      	nop
 8011bec:	e000      	b.n	8011bf0 <dhcp_release_and_stop+0x124>
    return;
 8011bee:	bf00      	nop
  }
}
 8011bf0:	3720      	adds	r7, #32
 8011bf2:	46bd      	mov	sp, r7
 8011bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8011bf6:	bf00      	nop
 8011bf8:	200083ec 	.word	0x200083ec
 8011bfc:	0801cb08 	.word	0x0801cb08

08011c00 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8011c00:	b480      	push	{r7}
 8011c02:	b083      	sub	sp, #12
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	795b      	ldrb	r3, [r3, #5]
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d008      	beq.n	8011c28 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	78fa      	ldrb	r2, [r7, #3]
 8011c1a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	811a      	strh	r2, [r3, #8]
  }
}
 8011c28:	bf00      	nop
 8011c2a:	370c      	adds	r7, #12
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c32:	4770      	bx	lr

08011c34 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	b082      	sub	sp, #8
 8011c38:	af00      	add	r7, sp, #0
 8011c3a:	6039      	str	r1, [r7, #0]
 8011c3c:	4611      	mov	r1, r2
 8011c3e:	461a      	mov	r2, r3
 8011c40:	4603      	mov	r3, r0
 8011c42:	80fb      	strh	r3, [r7, #6]
 8011c44:	460b      	mov	r3, r1
 8011c46:	717b      	strb	r3, [r7, #5]
 8011c48:	4613      	mov	r3, r2
 8011c4a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8011c4c:	88fa      	ldrh	r2, [r7, #6]
 8011c4e:	793b      	ldrb	r3, [r7, #4]
 8011c50:	4413      	add	r3, r2
 8011c52:	3302      	adds	r3, #2
 8011c54:	2b44      	cmp	r3, #68	; 0x44
 8011c56:	d906      	bls.n	8011c66 <dhcp_option+0x32>
 8011c58:	4b0d      	ldr	r3, [pc, #52]	; (8011c90 <dhcp_option+0x5c>)
 8011c5a:	f240 529a 	movw	r2, #1434	; 0x59a
 8011c5e:	490d      	ldr	r1, [pc, #52]	; (8011c94 <dhcp_option+0x60>)
 8011c60:	480d      	ldr	r0, [pc, #52]	; (8011c98 <dhcp_option+0x64>)
 8011c62:	f006 f997 	bl	8017f94 <iprintf>
  options[options_out_len++] = option_type;
 8011c66:	88fb      	ldrh	r3, [r7, #6]
 8011c68:	1c5a      	adds	r2, r3, #1
 8011c6a:	80fa      	strh	r2, [r7, #6]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	4413      	add	r3, r2
 8011c72:	797a      	ldrb	r2, [r7, #5]
 8011c74:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8011c76:	88fb      	ldrh	r3, [r7, #6]
 8011c78:	1c5a      	adds	r2, r3, #1
 8011c7a:	80fa      	strh	r2, [r7, #6]
 8011c7c:	461a      	mov	r2, r3
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	4413      	add	r3, r2
 8011c82:	793a      	ldrb	r2, [r7, #4]
 8011c84:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011c86:	88fb      	ldrh	r3, [r7, #6]
}
 8011c88:	4618      	mov	r0, r3
 8011c8a:	3708      	adds	r7, #8
 8011c8c:	46bd      	mov	sp, r7
 8011c8e:	bd80      	pop	{r7, pc}
 8011c90:	0801bd08 	.word	0x0801bd08
 8011c94:	0801be9c 	.word	0x0801be9c
 8011c98:	0801bd68 	.word	0x0801bd68

08011c9c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8011c9c:	b580      	push	{r7, lr}
 8011c9e:	b082      	sub	sp, #8
 8011ca0:	af00      	add	r7, sp, #0
 8011ca2:	4603      	mov	r3, r0
 8011ca4:	6039      	str	r1, [r7, #0]
 8011ca6:	80fb      	strh	r3, [r7, #6]
 8011ca8:	4613      	mov	r3, r2
 8011caa:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8011cac:	88fb      	ldrh	r3, [r7, #6]
 8011cae:	2b43      	cmp	r3, #67	; 0x43
 8011cb0:	d906      	bls.n	8011cc0 <dhcp_option_byte+0x24>
 8011cb2:	4b0a      	ldr	r3, [pc, #40]	; (8011cdc <dhcp_option_byte+0x40>)
 8011cb4:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8011cb8:	4909      	ldr	r1, [pc, #36]	; (8011ce0 <dhcp_option_byte+0x44>)
 8011cba:	480a      	ldr	r0, [pc, #40]	; (8011ce4 <dhcp_option_byte+0x48>)
 8011cbc:	f006 f96a 	bl	8017f94 <iprintf>
  options[options_out_len++] = value;
 8011cc0:	88fb      	ldrh	r3, [r7, #6]
 8011cc2:	1c5a      	adds	r2, r3, #1
 8011cc4:	80fa      	strh	r2, [r7, #6]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	683b      	ldr	r3, [r7, #0]
 8011cca:	4413      	add	r3, r2
 8011ccc:	797a      	ldrb	r2, [r7, #5]
 8011cce:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011cd0:	88fb      	ldrh	r3, [r7, #6]
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}
 8011cda:	bf00      	nop
 8011cdc:	0801bd08 	.word	0x0801bd08
 8011ce0:	0801bee0 	.word	0x0801bee0
 8011ce4:	0801bd68 	.word	0x0801bd68

08011ce8 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b082      	sub	sp, #8
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	4603      	mov	r3, r0
 8011cf0:	6039      	str	r1, [r7, #0]
 8011cf2:	80fb      	strh	r3, [r7, #6]
 8011cf4:	4613      	mov	r3, r2
 8011cf6:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8011cf8:	88fb      	ldrh	r3, [r7, #6]
 8011cfa:	3302      	adds	r3, #2
 8011cfc:	2b44      	cmp	r3, #68	; 0x44
 8011cfe:	d906      	bls.n	8011d0e <dhcp_option_short+0x26>
 8011d00:	4b0f      	ldr	r3, [pc, #60]	; (8011d40 <dhcp_option_short+0x58>)
 8011d02:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8011d06:	490f      	ldr	r1, [pc, #60]	; (8011d44 <dhcp_option_short+0x5c>)
 8011d08:	480f      	ldr	r0, [pc, #60]	; (8011d48 <dhcp_option_short+0x60>)
 8011d0a:	f006 f943 	bl	8017f94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8011d0e:	88bb      	ldrh	r3, [r7, #4]
 8011d10:	0a1b      	lsrs	r3, r3, #8
 8011d12:	b29a      	uxth	r2, r3
 8011d14:	88fb      	ldrh	r3, [r7, #6]
 8011d16:	1c59      	adds	r1, r3, #1
 8011d18:	80f9      	strh	r1, [r7, #6]
 8011d1a:	4619      	mov	r1, r3
 8011d1c:	683b      	ldr	r3, [r7, #0]
 8011d1e:	440b      	add	r3, r1
 8011d20:	b2d2      	uxtb	r2, r2
 8011d22:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8011d24:	88fb      	ldrh	r3, [r7, #6]
 8011d26:	1c5a      	adds	r2, r3, #1
 8011d28:	80fa      	strh	r2, [r7, #6]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	4413      	add	r3, r2
 8011d30:	88ba      	ldrh	r2, [r7, #4]
 8011d32:	b2d2      	uxtb	r2, r2
 8011d34:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011d36:	88fb      	ldrh	r3, [r7, #6]
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}
 8011d40:	0801bd08 	.word	0x0801bd08
 8011d44:	0801bf18 	.word	0x0801bf18
 8011d48:	0801bd68 	.word	0x0801bd68

08011d4c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	60b9      	str	r1, [r7, #8]
 8011d56:	607a      	str	r2, [r7, #4]
 8011d58:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8011d5a:	89fb      	ldrh	r3, [r7, #14]
 8011d5c:	3304      	adds	r3, #4
 8011d5e:	2b44      	cmp	r3, #68	; 0x44
 8011d60:	d906      	bls.n	8011d70 <dhcp_option_long+0x24>
 8011d62:	4b19      	ldr	r3, [pc, #100]	; (8011dc8 <dhcp_option_long+0x7c>)
 8011d64:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8011d68:	4918      	ldr	r1, [pc, #96]	; (8011dcc <dhcp_option_long+0x80>)
 8011d6a:	4819      	ldr	r0, [pc, #100]	; (8011dd0 <dhcp_option_long+0x84>)
 8011d6c:	f006 f912 	bl	8017f94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	0e1a      	lsrs	r2, r3, #24
 8011d74:	89fb      	ldrh	r3, [r7, #14]
 8011d76:	1c59      	adds	r1, r3, #1
 8011d78:	81f9      	strh	r1, [r7, #14]
 8011d7a:	4619      	mov	r1, r3
 8011d7c:	68bb      	ldr	r3, [r7, #8]
 8011d7e:	440b      	add	r3, r1
 8011d80:	b2d2      	uxtb	r2, r2
 8011d82:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	0c1a      	lsrs	r2, r3, #16
 8011d88:	89fb      	ldrh	r3, [r7, #14]
 8011d8a:	1c59      	adds	r1, r3, #1
 8011d8c:	81f9      	strh	r1, [r7, #14]
 8011d8e:	4619      	mov	r1, r3
 8011d90:	68bb      	ldr	r3, [r7, #8]
 8011d92:	440b      	add	r3, r1
 8011d94:	b2d2      	uxtb	r2, r2
 8011d96:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	0a1a      	lsrs	r2, r3, #8
 8011d9c:	89fb      	ldrh	r3, [r7, #14]
 8011d9e:	1c59      	adds	r1, r3, #1
 8011da0:	81f9      	strh	r1, [r7, #14]
 8011da2:	4619      	mov	r1, r3
 8011da4:	68bb      	ldr	r3, [r7, #8]
 8011da6:	440b      	add	r3, r1
 8011da8:	b2d2      	uxtb	r2, r2
 8011daa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8011dac:	89fb      	ldrh	r3, [r7, #14]
 8011dae:	1c5a      	adds	r2, r3, #1
 8011db0:	81fa      	strh	r2, [r7, #14]
 8011db2:	461a      	mov	r2, r3
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	4413      	add	r3, r2
 8011db8:	687a      	ldr	r2, [r7, #4]
 8011dba:	b2d2      	uxtb	r2, r2
 8011dbc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8011dbe:	89fb      	ldrh	r3, [r7, #14]
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	3710      	adds	r7, #16
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	bd80      	pop	{r7, pc}
 8011dc8:	0801bd08 	.word	0x0801bd08
 8011dcc:	0801bf54 	.word	0x0801bf54
 8011dd0:	0801bd68 	.word	0x0801bd68

08011dd4 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8011dd4:	b580      	push	{r7, lr}
 8011dd6:	b090      	sub	sp, #64	; 0x40
 8011dd8:	af00      	add	r7, sp, #0
 8011dda:	6078      	str	r0, [r7, #4]
 8011ddc:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8011de2:	2300      	movs	r3, #0
 8011de4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8011de6:	2208      	movs	r2, #8
 8011de8:	2100      	movs	r1, #0
 8011dea:	48be      	ldr	r0, [pc, #760]	; (80120e4 <dhcp_parse_reply+0x310>)
 8011dec:	f006 f8ca 	bl	8017f84 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	895b      	ldrh	r3, [r3, #10]
 8011df4:	2b2b      	cmp	r3, #43	; 0x2b
 8011df6:	d802      	bhi.n	8011dfe <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8011df8:	f06f 0301 	mvn.w	r3, #1
 8011dfc:	e2a8      	b.n	8012350 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	685b      	ldr	r3, [r3, #4]
 8011e02:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8011e04:	23f0      	movs	r3, #240	; 0xf0
 8011e06:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	891b      	ldrh	r3, [r3, #8]
 8011e0c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011e12:	e00c      	b.n	8011e2e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8011e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e16:	895b      	ldrh	r3, [r3, #10]
 8011e18:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e1a:	1ad3      	subs	r3, r2, r3
 8011e1c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8011e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e20:	895b      	ldrh	r3, [r3, #10]
 8011e22:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8011e24:	1ad3      	subs	r3, r2, r3
 8011e26:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8011e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e2a:	681b      	ldr	r3, [r3, #0]
 8011e2c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8011e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d004      	beq.n	8011e3e <dhcp_parse_reply+0x6a>
 8011e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e36:	895b      	ldrh	r3, [r3, #10]
 8011e38:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011e3a:	429a      	cmp	r2, r3
 8011e3c:	d2ea      	bcs.n	8011e14 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8011e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d102      	bne.n	8011e4a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8011e44:	f06f 0301 	mvn.w	r3, #1
 8011e48:	e282      	b.n	8012350 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8011e4a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011e4c:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8011e4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8011e50:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8011e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e54:	685b      	ldr	r3, [r3, #4]
 8011e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8011e58:	e23a      	b.n	80122d0 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8011e5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e5e:	4413      	add	r3, r2
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8011e64:	2300      	movs	r3, #0
 8011e66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8011e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8011e6e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8011e70:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e72:	3302      	adds	r3, #2
 8011e74:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8011e76:	8bfa      	ldrh	r2, [r7, #30]
 8011e78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e7a:	429a      	cmp	r2, r3
 8011e7c:	d202      	bcs.n	8011e84 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8011e7e:	f06f 0301 	mvn.w	r3, #1
 8011e82:	e265      	b.n	8012350 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8011e84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e86:	3301      	adds	r3, #1
 8011e88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011e8a:	8952      	ldrh	r2, [r2, #10]
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	da07      	bge.n	8011ea0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8011e90:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011e92:	3301      	adds	r3, #1
 8011e94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011e96:	4413      	add	r3, r2
 8011e98:	781b      	ldrb	r3, [r3, #0]
 8011e9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e9e:	e00b      	b.n	8011eb8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8011ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	d004      	beq.n	8011eb2 <dhcp_parse_reply+0xde>
 8011ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	685b      	ldr	r3, [r3, #4]
 8011eae:	781b      	ldrb	r3, [r3, #0]
 8011eb0:	e000      	b.n	8011eb4 <dhcp_parse_reply+0xe0>
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8011eb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ebc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8011ec0:	7dfb      	ldrb	r3, [r7, #23]
 8011ec2:	2b3b      	cmp	r3, #59	; 0x3b
 8011ec4:	f200 812d 	bhi.w	8012122 <dhcp_parse_reply+0x34e>
 8011ec8:	a201      	add	r2, pc, #4	; (adr r2, 8011ed0 <dhcp_parse_reply+0xfc>)
 8011eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011ece:	bf00      	nop
 8011ed0:	08011fc1 	.word	0x08011fc1
 8011ed4:	08011fd1 	.word	0x08011fd1
 8011ed8:	08012123 	.word	0x08012123
 8011edc:	08011ff3 	.word	0x08011ff3
 8011ee0:	08012123 	.word	0x08012123
 8011ee4:	08012123 	.word	0x08012123
 8011ee8:	08012123 	.word	0x08012123
 8011eec:	08012123 	.word	0x08012123
 8011ef0:	08012123 	.word	0x08012123
 8011ef4:	08012123 	.word	0x08012123
 8011ef8:	08012123 	.word	0x08012123
 8011efc:	08012123 	.word	0x08012123
 8011f00:	08012123 	.word	0x08012123
 8011f04:	08012123 	.word	0x08012123
 8011f08:	08012123 	.word	0x08012123
 8011f0c:	08012123 	.word	0x08012123
 8011f10:	08012123 	.word	0x08012123
 8011f14:	08012123 	.word	0x08012123
 8011f18:	08012123 	.word	0x08012123
 8011f1c:	08012123 	.word	0x08012123
 8011f20:	08012123 	.word	0x08012123
 8011f24:	08012123 	.word	0x08012123
 8011f28:	08012123 	.word	0x08012123
 8011f2c:	08012123 	.word	0x08012123
 8011f30:	08012123 	.word	0x08012123
 8011f34:	08012123 	.word	0x08012123
 8011f38:	08012123 	.word	0x08012123
 8011f3c:	08012123 	.word	0x08012123
 8011f40:	08012123 	.word	0x08012123
 8011f44:	08012123 	.word	0x08012123
 8011f48:	08012123 	.word	0x08012123
 8011f4c:	08012123 	.word	0x08012123
 8011f50:	08012123 	.word	0x08012123
 8011f54:	08012123 	.word	0x08012123
 8011f58:	08012123 	.word	0x08012123
 8011f5c:	08012123 	.word	0x08012123
 8011f60:	08012123 	.word	0x08012123
 8011f64:	08012123 	.word	0x08012123
 8011f68:	08012123 	.word	0x08012123
 8011f6c:	08012123 	.word	0x08012123
 8011f70:	08012123 	.word	0x08012123
 8011f74:	08012123 	.word	0x08012123
 8011f78:	08012123 	.word	0x08012123
 8011f7c:	08012123 	.word	0x08012123
 8011f80:	08012123 	.word	0x08012123
 8011f84:	08012123 	.word	0x08012123
 8011f88:	08012123 	.word	0x08012123
 8011f8c:	08012123 	.word	0x08012123
 8011f90:	08012123 	.word	0x08012123
 8011f94:	08012123 	.word	0x08012123
 8011f98:	08012123 	.word	0x08012123
 8011f9c:	0801201f 	.word	0x0801201f
 8011fa0:	08012041 	.word	0x08012041
 8011fa4:	0801207d 	.word	0x0801207d
 8011fa8:	0801209f 	.word	0x0801209f
 8011fac:	08012123 	.word	0x08012123
 8011fb0:	08012123 	.word	0x08012123
 8011fb4:	08012123 	.word	0x08012123
 8011fb8:	080120c1 	.word	0x080120c1
 8011fbc:	08012101 	.word	0x08012101
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8011fce:	e0ac      	b.n	801212a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8011fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011fd4:	2b04      	cmp	r3, #4
 8011fd6:	d009      	beq.n	8011fec <dhcp_parse_reply+0x218>
 8011fd8:	4b43      	ldr	r3, [pc, #268]	; (80120e8 <dhcp_parse_reply+0x314>)
 8011fda:	f240 622e 	movw	r2, #1582	; 0x62e
 8011fde:	4943      	ldr	r1, [pc, #268]	; (80120ec <dhcp_parse_reply+0x318>)
 8011fe0:	4843      	ldr	r0, [pc, #268]	; (80120f0 <dhcp_parse_reply+0x31c>)
 8011fe2:	f005 ffd7 	bl	8017f94 <iprintf>
 8011fe6:	f06f 0305 	mvn.w	r3, #5
 8011fea:	e1b1      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8011fec:	2306      	movs	r3, #6
 8011fee:	623b      	str	r3, [r7, #32]
        break;
 8011ff0:	e09b      	b.n	801212a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8011ff2:	2304      	movs	r3, #4
 8011ff4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8011ff8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8011ffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012000:	429a      	cmp	r2, r3
 8012002:	d209      	bcs.n	8012018 <dhcp_parse_reply+0x244>
 8012004:	4b38      	ldr	r3, [pc, #224]	; (80120e8 <dhcp_parse_reply+0x314>)
 8012006:	f240 6233 	movw	r2, #1587	; 0x633
 801200a:	493a      	ldr	r1, [pc, #232]	; (80120f4 <dhcp_parse_reply+0x320>)
 801200c:	4838      	ldr	r0, [pc, #224]	; (80120f0 <dhcp_parse_reply+0x31c>)
 801200e:	f005 ffc1 	bl	8017f94 <iprintf>
 8012012:	f06f 0305 	mvn.w	r3, #5
 8012016:	e19b      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8012018:	2307      	movs	r3, #7
 801201a:	623b      	str	r3, [r7, #32]
        break;
 801201c:	e085      	b.n	801212a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801201e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012022:	2b04      	cmp	r3, #4
 8012024:	d009      	beq.n	801203a <dhcp_parse_reply+0x266>
 8012026:	4b30      	ldr	r3, [pc, #192]	; (80120e8 <dhcp_parse_reply+0x314>)
 8012028:	f240 6241 	movw	r2, #1601	; 0x641
 801202c:	492f      	ldr	r1, [pc, #188]	; (80120ec <dhcp_parse_reply+0x318>)
 801202e:	4830      	ldr	r0, [pc, #192]	; (80120f0 <dhcp_parse_reply+0x31c>)
 8012030:	f005 ffb0 	bl	8017f94 <iprintf>
 8012034:	f06f 0305 	mvn.w	r3, #5
 8012038:	e18a      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801203a:	2303      	movs	r3, #3
 801203c:	623b      	str	r3, [r7, #32]
        break;
 801203e:	e074      	b.n	801212a <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8012040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012044:	2b01      	cmp	r3, #1
 8012046:	d009      	beq.n	801205c <dhcp_parse_reply+0x288>
 8012048:	4b27      	ldr	r3, [pc, #156]	; (80120e8 <dhcp_parse_reply+0x314>)
 801204a:	f240 624f 	movw	r2, #1615	; 0x64f
 801204e:	492a      	ldr	r1, [pc, #168]	; (80120f8 <dhcp_parse_reply+0x324>)
 8012050:	4827      	ldr	r0, [pc, #156]	; (80120f0 <dhcp_parse_reply+0x31c>)
 8012052:	f005 ff9f 	bl	8017f94 <iprintf>
 8012056:	f06f 0305 	mvn.w	r3, #5
 801205a:	e179      	b.n	8012350 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801205c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801205e:	2bf0      	cmp	r3, #240	; 0xf0
 8012060:	d009      	beq.n	8012076 <dhcp_parse_reply+0x2a2>
 8012062:	4b21      	ldr	r3, [pc, #132]	; (80120e8 <dhcp_parse_reply+0x314>)
 8012064:	f240 6251 	movw	r2, #1617	; 0x651
 8012068:	4924      	ldr	r1, [pc, #144]	; (80120fc <dhcp_parse_reply+0x328>)
 801206a:	4821      	ldr	r0, [pc, #132]	; (80120f0 <dhcp_parse_reply+0x31c>)
 801206c:	f005 ff92 	bl	8017f94 <iprintf>
 8012070:	f06f 0305 	mvn.w	r3, #5
 8012074:	e16c      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8012076:	2300      	movs	r3, #0
 8012078:	623b      	str	r3, [r7, #32]
        break;
 801207a:	e056      	b.n	801212a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801207c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012080:	2b01      	cmp	r3, #1
 8012082:	d009      	beq.n	8012098 <dhcp_parse_reply+0x2c4>
 8012084:	4b18      	ldr	r3, [pc, #96]	; (80120e8 <dhcp_parse_reply+0x314>)
 8012086:	f240 6255 	movw	r2, #1621	; 0x655
 801208a:	491b      	ldr	r1, [pc, #108]	; (80120f8 <dhcp_parse_reply+0x324>)
 801208c:	4818      	ldr	r0, [pc, #96]	; (80120f0 <dhcp_parse_reply+0x31c>)
 801208e:	f005 ff81 	bl	8017f94 <iprintf>
 8012092:	f06f 0305 	mvn.w	r3, #5
 8012096:	e15b      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8012098:	2301      	movs	r3, #1
 801209a:	623b      	str	r3, [r7, #32]
        break;
 801209c:	e045      	b.n	801212a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801209e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120a2:	2b04      	cmp	r3, #4
 80120a4:	d009      	beq.n	80120ba <dhcp_parse_reply+0x2e6>
 80120a6:	4b10      	ldr	r3, [pc, #64]	; (80120e8 <dhcp_parse_reply+0x314>)
 80120a8:	f240 6259 	movw	r2, #1625	; 0x659
 80120ac:	490f      	ldr	r1, [pc, #60]	; (80120ec <dhcp_parse_reply+0x318>)
 80120ae:	4810      	ldr	r0, [pc, #64]	; (80120f0 <dhcp_parse_reply+0x31c>)
 80120b0:	f005 ff70 	bl	8017f94 <iprintf>
 80120b4:	f06f 0305 	mvn.w	r3, #5
 80120b8:	e14a      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 80120ba:	2302      	movs	r3, #2
 80120bc:	623b      	str	r3, [r7, #32]
        break;
 80120be:	e034      	b.n	801212a <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80120c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120c4:	2b04      	cmp	r3, #4
 80120c6:	d009      	beq.n	80120dc <dhcp_parse_reply+0x308>
 80120c8:	4b07      	ldr	r3, [pc, #28]	; (80120e8 <dhcp_parse_reply+0x314>)
 80120ca:	f240 625d 	movw	r2, #1629	; 0x65d
 80120ce:	4907      	ldr	r1, [pc, #28]	; (80120ec <dhcp_parse_reply+0x318>)
 80120d0:	4807      	ldr	r0, [pc, #28]	; (80120f0 <dhcp_parse_reply+0x31c>)
 80120d2:	f005 ff5f 	bl	8017f94 <iprintf>
 80120d6:	f06f 0305 	mvn.w	r3, #5
 80120da:	e139      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 80120dc:	2304      	movs	r3, #4
 80120de:	623b      	str	r3, [r7, #32]
        break;
 80120e0:	e023      	b.n	801212a <dhcp_parse_reply+0x356>
 80120e2:	bf00      	nop
 80120e4:	2000c4f8 	.word	0x2000c4f8
 80120e8:	0801bd08 	.word	0x0801bd08
 80120ec:	0801bf90 	.word	0x0801bf90
 80120f0:	0801bd68 	.word	0x0801bd68
 80120f4:	0801bf9c 	.word	0x0801bf9c
 80120f8:	0801bfb0 	.word	0x0801bfb0
 80120fc:	0801bfbc 	.word	0x0801bfbc
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8012100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012104:	2b04      	cmp	r3, #4
 8012106:	d009      	beq.n	801211c <dhcp_parse_reply+0x348>
 8012108:	4b93      	ldr	r3, [pc, #588]	; (8012358 <dhcp_parse_reply+0x584>)
 801210a:	f240 6261 	movw	r2, #1633	; 0x661
 801210e:	4993      	ldr	r1, [pc, #588]	; (801235c <dhcp_parse_reply+0x588>)
 8012110:	4893      	ldr	r0, [pc, #588]	; (8012360 <dhcp_parse_reply+0x58c>)
 8012112:	f005 ff3f 	bl	8017f94 <iprintf>
 8012116:	f06f 0305 	mvn.w	r3, #5
 801211a:	e119      	b.n	8012350 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 801211c:	2305      	movs	r3, #5
 801211e:	623b      	str	r3, [r7, #32]
        break;
 8012120:	e003      	b.n	801212a <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8012122:	2300      	movs	r3, #0
 8012124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8012128:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801212a:	7dfb      	ldrb	r3, [r7, #23]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d103      	bne.n	8012138 <dhcp_parse_reply+0x364>
      offset++;
 8012130:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012132:	3301      	adds	r3, #1
 8012134:	877b      	strh	r3, [r7, #58]	; 0x3a
 8012136:	e0a1      	b.n	801227c <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8012138:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801213a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801213e:	4413      	add	r3, r2
 8012140:	3302      	adds	r3, #2
 8012142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012146:	db02      	blt.n	801214e <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8012148:	f06f 0301 	mvn.w	r3, #1
 801214c:	e100      	b.n	8012350 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 801214e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012152:	b29a      	uxth	r2, r3
 8012154:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012156:	4413      	add	r3, r2
 8012158:	b29b      	uxth	r3, r3
 801215a:	3302      	adds	r3, #2
 801215c:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 801215e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012162:	2b00      	cmp	r3, #0
 8012164:	f000 808a 	beq.w	801227c <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8012168:	2300      	movs	r3, #0
 801216a:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801216c:	6a3b      	ldr	r3, [r7, #32]
 801216e:	2b00      	cmp	r3, #0
 8012170:	db02      	blt.n	8012178 <dhcp_parse_reply+0x3a4>
 8012172:	6a3b      	ldr	r3, [r7, #32]
 8012174:	2b07      	cmp	r3, #7
 8012176:	dd06      	ble.n	8012186 <dhcp_parse_reply+0x3b2>
 8012178:	4b77      	ldr	r3, [pc, #476]	; (8012358 <dhcp_parse_reply+0x584>)
 801217a:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 801217e:	4979      	ldr	r1, [pc, #484]	; (8012364 <dhcp_parse_reply+0x590>)
 8012180:	4877      	ldr	r0, [pc, #476]	; (8012360 <dhcp_parse_reply+0x58c>)
 8012182:	f005 ff07 	bl	8017f94 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8012186:	4a78      	ldr	r2, [pc, #480]	; (8012368 <dhcp_parse_reply+0x594>)
 8012188:	6a3b      	ldr	r3, [r7, #32]
 801218a:	4413      	add	r3, r2
 801218c:	781b      	ldrb	r3, [r3, #0]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d174      	bne.n	801227c <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8012192:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012196:	2b04      	cmp	r3, #4
 8012198:	bf28      	it	cs
 801219a:	2304      	movcs	r3, #4
 801219c:	b2db      	uxtb	r3, r3
 801219e:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 80121a0:	8bfb      	ldrh	r3, [r7, #30]
 80121a2:	8aba      	ldrh	r2, [r7, #20]
 80121a4:	f107 0108 	add.w	r1, r7, #8
 80121a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80121aa:	f7f7 fd1d 	bl	8009be8 <pbuf_copy_partial>
 80121ae:	4603      	mov	r3, r0
 80121b0:	461a      	mov	r2, r3
 80121b2:	8abb      	ldrh	r3, [r7, #20]
 80121b4:	4293      	cmp	r3, r2
 80121b6:	d002      	beq.n	80121be <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 80121b8:	f06f 0301 	mvn.w	r3, #1
 80121bc:	e0c8      	b.n	8012350 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 80121be:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121c2:	2b04      	cmp	r3, #4
 80121c4:	d933      	bls.n	801222e <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 80121c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80121ca:	f003 0303 	and.w	r3, r3, #3
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d009      	beq.n	80121e8 <dhcp_parse_reply+0x414>
 80121d4:	4b60      	ldr	r3, [pc, #384]	; (8012358 <dhcp_parse_reply+0x584>)
 80121d6:	f240 6281 	movw	r2, #1665	; 0x681
 80121da:	4964      	ldr	r1, [pc, #400]	; (801236c <dhcp_parse_reply+0x598>)
 80121dc:	4860      	ldr	r0, [pc, #384]	; (8012360 <dhcp_parse_reply+0x58c>)
 80121de:	f005 fed9 	bl	8017f94 <iprintf>
 80121e2:	f06f 0305 	mvn.w	r3, #5
 80121e6:	e0b3      	b.n	8012350 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 80121e8:	4a5f      	ldr	r2, [pc, #380]	; (8012368 <dhcp_parse_reply+0x594>)
 80121ea:	6a3b      	ldr	r3, [r7, #32]
 80121ec:	4413      	add	r3, r2
 80121ee:	2201      	movs	r2, #1
 80121f0:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 80121f2:	68bb      	ldr	r3, [r7, #8]
 80121f4:	4618      	mov	r0, r3
 80121f6:	f7f5 ff52 	bl	800809e <lwip_htonl>
 80121fa:	4601      	mov	r1, r0
 80121fc:	4a5c      	ldr	r2, [pc, #368]	; (8012370 <dhcp_parse_reply+0x59c>)
 80121fe:	6a3b      	ldr	r3, [r7, #32]
 8012200:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8012204:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012208:	3b04      	subs	r3, #4
 801220a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801220e:	8bfb      	ldrh	r3, [r7, #30]
 8012210:	3304      	adds	r3, #4
 8012212:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8012214:	8a7a      	ldrh	r2, [r7, #18]
 8012216:	8bfb      	ldrh	r3, [r7, #30]
 8012218:	429a      	cmp	r2, r3
 801221a:	d202      	bcs.n	8012222 <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 801221c:	f06f 0301 	mvn.w	r3, #1
 8012220:	e096      	b.n	8012350 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8012222:	8a7b      	ldrh	r3, [r7, #18]
 8012224:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8012226:	6a3b      	ldr	r3, [r7, #32]
 8012228:	3301      	adds	r3, #1
 801222a:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801222c:	e79e      	b.n	801216c <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 801222e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012232:	2b04      	cmp	r3, #4
 8012234:	d106      	bne.n	8012244 <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8012236:	68bb      	ldr	r3, [r7, #8]
 8012238:	4618      	mov	r0, r3
 801223a:	f7f5 ff30 	bl	800809e <lwip_htonl>
 801223e:	4603      	mov	r3, r0
 8012240:	60bb      	str	r3, [r7, #8]
 8012242:	e011      	b.n	8012268 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8012244:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012248:	2b01      	cmp	r3, #1
 801224a:	d009      	beq.n	8012260 <dhcp_parse_reply+0x48c>
 801224c:	4b42      	ldr	r3, [pc, #264]	; (8012358 <dhcp_parse_reply+0x584>)
 801224e:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8012252:	4948      	ldr	r1, [pc, #288]	; (8012374 <dhcp_parse_reply+0x5a0>)
 8012254:	4842      	ldr	r0, [pc, #264]	; (8012360 <dhcp_parse_reply+0x58c>)
 8012256:	f005 fe9d 	bl	8017f94 <iprintf>
 801225a:	f06f 0305 	mvn.w	r3, #5
 801225e:	e077      	b.n	8012350 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8012260:	f107 0308 	add.w	r3, r7, #8
 8012264:	781b      	ldrb	r3, [r3, #0]
 8012266:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8012268:	4a3f      	ldr	r2, [pc, #252]	; (8012368 <dhcp_parse_reply+0x594>)
 801226a:	6a3b      	ldr	r3, [r7, #32]
 801226c:	4413      	add	r3, r2
 801226e:	2201      	movs	r2, #1
 8012270:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8012272:	68ba      	ldr	r2, [r7, #8]
 8012274:	493e      	ldr	r1, [pc, #248]	; (8012370 <dhcp_parse_reply+0x59c>)
 8012276:	6a3b      	ldr	r3, [r7, #32]
 8012278:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801227e:	895b      	ldrh	r3, [r3, #10]
 8012280:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012282:	429a      	cmp	r2, r3
 8012284:	d324      	bcc.n	80122d0 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8012286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012288:	895b      	ldrh	r3, [r3, #10]
 801228a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801228c:	1ad3      	subs	r3, r2, r3
 801228e:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8012290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012292:	895b      	ldrh	r3, [r3, #10]
 8012294:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8012296:	1ad3      	subs	r3, r2, r3
 8012298:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801229a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801229c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801229e:	429a      	cmp	r2, r3
 80122a0:	d213      	bcs.n	80122ca <dhcp_parse_reply+0x4f6>
        q = q->next;
 80122a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 80122a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d109      	bne.n	80122c2 <dhcp_parse_reply+0x4ee>
 80122ae:	4b2a      	ldr	r3, [pc, #168]	; (8012358 <dhcp_parse_reply+0x584>)
 80122b0:	f240 629d 	movw	r2, #1693	; 0x69d
 80122b4:	4930      	ldr	r1, [pc, #192]	; (8012378 <dhcp_parse_reply+0x5a4>)
 80122b6:	482a      	ldr	r0, [pc, #168]	; (8012360 <dhcp_parse_reply+0x58c>)
 80122b8:	f005 fe6c 	bl	8017f94 <iprintf>
 80122bc:	f06f 0305 	mvn.w	r3, #5
 80122c0:	e046      	b.n	8012350 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 80122c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80122c8:	e002      	b.n	80122d0 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80122ca:	f06f 0301 	mvn.w	r3, #1
 80122ce:	e03f      	b.n	8012350 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80122d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00a      	beq.n	80122ec <dhcp_parse_reply+0x518>
 80122d6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80122d8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80122da:	429a      	cmp	r2, r3
 80122dc:	d206      	bcs.n	80122ec <dhcp_parse_reply+0x518>
 80122de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80122e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80122e2:	4413      	add	r3, r2
 80122e4:	781b      	ldrb	r3, [r3, #0]
 80122e6:	2bff      	cmp	r3, #255	; 0xff
 80122e8:	f47f adb7 	bne.w	8011e5a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80122ec:	4b1e      	ldr	r3, [pc, #120]	; (8012368 <dhcp_parse_reply+0x594>)
 80122ee:	781b      	ldrb	r3, [r3, #0]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d018      	beq.n	8012326 <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80122f4:	4b1e      	ldr	r3, [pc, #120]	; (8012370 <dhcp_parse_reply+0x59c>)
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80122fa:	4b1b      	ldr	r3, [pc, #108]	; (8012368 <dhcp_parse_reply+0x594>)
 80122fc:	2200      	movs	r2, #0
 80122fe:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	2b01      	cmp	r3, #1
 8012304:	d102      	bne.n	801230c <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8012306:	2301      	movs	r3, #1
 8012308:	62fb      	str	r3, [r7, #44]	; 0x2c
 801230a:	e00c      	b.n	8012326 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	2b02      	cmp	r3, #2
 8012310:	d102      	bne.n	8012318 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8012312:	2301      	movs	r3, #1
 8012314:	62bb      	str	r3, [r7, #40]	; 0x28
 8012316:	e006      	b.n	8012326 <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	2b03      	cmp	r3, #3
 801231c:	d103      	bne.n	8012326 <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 801231e:	2301      	movs	r3, #1
 8012320:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8012322:	2301      	movs	r3, #1
 8012324:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8012326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012328:	2b00      	cmp	r3, #0
 801232a:	d006      	beq.n	801233a <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801232c:	2300      	movs	r3, #0
 801232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8012330:	236c      	movs	r3, #108	; 0x6c
 8012332:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8012334:	23ec      	movs	r3, #236	; 0xec
 8012336:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8012338:	e569      	b.n	8011e0e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801233a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801233c:	2b00      	cmp	r3, #0
 801233e:	d006      	beq.n	801234e <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8012340:	2300      	movs	r3, #0
 8012342:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8012344:	232c      	movs	r3, #44	; 0x2c
 8012346:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8012348:	236c      	movs	r3, #108	; 0x6c
 801234a:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801234c:	e55f      	b.n	8011e0e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801234e:	2300      	movs	r3, #0
}
 8012350:	4618      	mov	r0, r3
 8012352:	3740      	adds	r7, #64	; 0x40
 8012354:	46bd      	mov	sp, r7
 8012356:	bd80      	pop	{r7, pc}
 8012358:	0801bd08 	.word	0x0801bd08
 801235c:	0801bf90 	.word	0x0801bf90
 8012360:	0801bd68 	.word	0x0801bd68
 8012364:	0801bfd4 	.word	0x0801bfd4
 8012368:	2000c4f8 	.word	0x2000c4f8
 801236c:	0801bfe8 	.word	0x0801bfe8
 8012370:	2000c500 	.word	0x2000c500
 8012374:	0801c000 	.word	0x0801c000
 8012378:	0801c014 	.word	0x0801c014

0801237c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b08a      	sub	sp, #40	; 0x28
 8012380:	af00      	add	r7, sp, #0
 8012382:	60f8      	str	r0, [r7, #12]
 8012384:	60b9      	str	r1, [r7, #8]
 8012386:	607a      	str	r2, [r7, #4]
 8012388:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801238a:	4b5f      	ldr	r3, [pc, #380]	; (8012508 <dhcp_recv+0x18c>)
 801238c:	685b      	ldr	r3, [r3, #4]
 801238e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012390:	6a3b      	ldr	r3, [r7, #32]
 8012392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012394:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	685b      	ldr	r3, [r3, #4]
 801239a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801239c:	69fb      	ldr	r3, [r7, #28]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	f000 809d 	beq.w	80124de <dhcp_recv+0x162>
 80123a4:	69fb      	ldr	r3, [r7, #28]
 80123a6:	791b      	ldrb	r3, [r3, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f000 8098 	beq.w	80124de <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	895b      	ldrh	r3, [r3, #10]
 80123b2:	2b2b      	cmp	r3, #43	; 0x2b
 80123b4:	f240 8095 	bls.w	80124e2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80123b8:	69bb      	ldr	r3, [r7, #24]
 80123ba:	781b      	ldrb	r3, [r3, #0]
 80123bc:	2b02      	cmp	r3, #2
 80123be:	f040 8092 	bne.w	80124e6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123c2:	2300      	movs	r3, #0
 80123c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123c8:	e012      	b.n	80123f0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80123ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123ce:	6a3a      	ldr	r2, [r7, #32]
 80123d0:	4413      	add	r3, r2
 80123d2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 80123d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123da:	69b9      	ldr	r1, [r7, #24]
 80123dc:	440b      	add	r3, r1
 80123de:	7f1b      	ldrb	r3, [r3, #28]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	f040 8082 	bne.w	80124ea <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80123e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123ea:	3301      	adds	r3, #1
 80123ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80123f0:	6a3b      	ldr	r3, [r7, #32]
 80123f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80123f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80123fa:	429a      	cmp	r2, r3
 80123fc:	d203      	bcs.n	8012406 <dhcp_recv+0x8a>
 80123fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012402:	2b05      	cmp	r3, #5
 8012404:	d9e1      	bls.n	80123ca <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8012406:	69bb      	ldr	r3, [r7, #24]
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	4618      	mov	r0, r3
 801240c:	f7f5 fe47 	bl	800809e <lwip_htonl>
 8012410:	4602      	mov	r2, r0
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	681b      	ldr	r3, [r3, #0]
 8012416:	429a      	cmp	r2, r3
 8012418:	d169      	bne.n	80124ee <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801241a:	69f9      	ldr	r1, [r7, #28]
 801241c:	6878      	ldr	r0, [r7, #4]
 801241e:	f7ff fcd9 	bl	8011dd4 <dhcp_parse_reply>
 8012422:	4603      	mov	r3, r0
 8012424:	2b00      	cmp	r3, #0
 8012426:	d164      	bne.n	80124f2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8012428:	4b38      	ldr	r3, [pc, #224]	; (801250c <dhcp_recv+0x190>)
 801242a:	785b      	ldrb	r3, [r3, #1]
 801242c:	2b00      	cmp	r3, #0
 801242e:	d062      	beq.n	80124f6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	685b      	ldr	r3, [r3, #4]
 8012434:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8012436:	4b36      	ldr	r3, [pc, #216]	; (8012510 <dhcp_recv+0x194>)
 8012438:	685b      	ldr	r3, [r3, #4]
 801243a:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801243c:	7cfb      	ldrb	r3, [r7, #19]
 801243e:	2b05      	cmp	r3, #5
 8012440:	d12a      	bne.n	8012498 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012442:	69fb      	ldr	r3, [r7, #28]
 8012444:	795b      	ldrb	r3, [r3, #5]
 8012446:	2b01      	cmp	r3, #1
 8012448:	d112      	bne.n	8012470 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801244a:	6979      	ldr	r1, [r7, #20]
 801244c:	6a38      	ldr	r0, [r7, #32]
 801244e:	f7fe fe05 	bl	801105c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8012452:	6a3b      	ldr	r3, [r7, #32]
 8012454:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012458:	f003 0308 	and.w	r3, r3, #8
 801245c:	2b00      	cmp	r3, #0
 801245e:	d003      	beq.n	8012468 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8012460:	6a38      	ldr	r0, [r7, #32]
 8012462:	f7fe fb75 	bl	8010b50 <dhcp_check>
 8012466:	e047      	b.n	80124f8 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8012468:	6a38      	ldr	r0, [r7, #32]
 801246a:	f7ff f867 	bl	801153c <dhcp_bind>
 801246e:	e043      	b.n	80124f8 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012470:	69fb      	ldr	r3, [r7, #28]
 8012472:	795b      	ldrb	r3, [r3, #5]
 8012474:	2b03      	cmp	r3, #3
 8012476:	d007      	beq.n	8012488 <dhcp_recv+0x10c>
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	795b      	ldrb	r3, [r3, #5]
 801247c:	2b04      	cmp	r3, #4
 801247e:	d003      	beq.n	8012488 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8012480:	69fb      	ldr	r3, [r7, #28]
 8012482:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8012484:	2b05      	cmp	r3, #5
 8012486:	d137      	bne.n	80124f8 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 8012488:	6979      	ldr	r1, [r7, #20]
 801248a:	6a38      	ldr	r0, [r7, #32]
 801248c:	f7fe fde6 	bl	801105c <dhcp_handle_ack>
      dhcp_bind(netif);
 8012490:	6a38      	ldr	r0, [r7, #32]
 8012492:	f7ff f853 	bl	801153c <dhcp_bind>
 8012496:	e02f      	b.n	80124f8 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8012498:	7cfb      	ldrb	r3, [r7, #19]
 801249a:	2b06      	cmp	r3, #6
 801249c:	d113      	bne.n	80124c6 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801249e:	69fb      	ldr	r3, [r7, #28]
 80124a0:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 80124a2:	2b03      	cmp	r3, #3
 80124a4:	d00b      	beq.n	80124be <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80124a6:	69fb      	ldr	r3, [r7, #28]
 80124a8:	795b      	ldrb	r3, [r3, #5]
 80124aa:	2b01      	cmp	r3, #1
 80124ac:	d007      	beq.n	80124be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80124ae:	69fb      	ldr	r3, [r7, #28]
 80124b0:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80124b2:	2b04      	cmp	r3, #4
 80124b4:	d003      	beq.n	80124be <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80124b6:	69fb      	ldr	r3, [r7, #28]
 80124b8:	795b      	ldrb	r3, [r3, #5]
 80124ba:	2b05      	cmp	r3, #5
 80124bc:	d103      	bne.n	80124c6 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80124be:	6a38      	ldr	r0, [r7, #32]
 80124c0:	f7fe fb2c 	bl	8010b1c <dhcp_handle_nak>
 80124c4:	e018      	b.n	80124f8 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80124c6:	7cfb      	ldrb	r3, [r7, #19]
 80124c8:	2b02      	cmp	r3, #2
 80124ca:	d108      	bne.n	80124de <dhcp_recv+0x162>
 80124cc:	69fb      	ldr	r3, [r7, #28]
 80124ce:	795b      	ldrb	r3, [r3, #5]
 80124d0:	2b06      	cmp	r3, #6
 80124d2:	d104      	bne.n	80124de <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80124d4:	6979      	ldr	r1, [r7, #20]
 80124d6:	6a38      	ldr	r0, [r7, #32]
 80124d8:	f7fe fb6e 	bl	8010bb8 <dhcp_handle_offer>
 80124dc:	e00c      	b.n	80124f8 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 80124de:	bf00      	nop
 80124e0:	e00a      	b.n	80124f8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80124e2:	bf00      	nop
 80124e4:	e008      	b.n	80124f8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80124e6:	bf00      	nop
 80124e8:	e006      	b.n	80124f8 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 80124ea:	bf00      	nop
 80124ec:	e004      	b.n	80124f8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80124ee:	bf00      	nop
 80124f0:	e002      	b.n	80124f8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80124f2:	bf00      	nop
 80124f4:	e000      	b.n	80124f8 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 80124f6:	bf00      	nop
  pbuf_free(p);
 80124f8:	6878      	ldr	r0, [r7, #4]
 80124fa:	f7f7 f96f 	bl	80097dc <pbuf_free>
}
 80124fe:	bf00      	nop
 8012500:	3728      	adds	r7, #40	; 0x28
 8012502:	46bd      	mov	sp, r7
 8012504:	bd80      	pop	{r7, pc}
 8012506:	bf00      	nop
 8012508:	20008da8 	.word	0x20008da8
 801250c:	2000c4f8 	.word	0x2000c4f8
 8012510:	2000c500 	.word	0x2000c500

08012514 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8012514:	b580      	push	{r7, lr}
 8012516:	b088      	sub	sp, #32
 8012518:	af00      	add	r7, sp, #0
 801251a:	60f8      	str	r0, [r7, #12]
 801251c:	60b9      	str	r1, [r7, #8]
 801251e:	603b      	str	r3, [r7, #0]
 8012520:	4613      	mov	r3, r2
 8012522:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d108      	bne.n	801253c <dhcp_create_msg+0x28>
 801252a:	4b5f      	ldr	r3, [pc, #380]	; (80126a8 <dhcp_create_msg+0x194>)
 801252c:	f240 7269 	movw	r2, #1897	; 0x769
 8012530:	495e      	ldr	r1, [pc, #376]	; (80126ac <dhcp_create_msg+0x198>)
 8012532:	485f      	ldr	r0, [pc, #380]	; (80126b0 <dhcp_create_msg+0x19c>)
 8012534:	f005 fd2e 	bl	8017f94 <iprintf>
 8012538:	2300      	movs	r3, #0
 801253a:	e0b1      	b.n	80126a0 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801253c:	68bb      	ldr	r3, [r7, #8]
 801253e:	2b00      	cmp	r3, #0
 8012540:	d108      	bne.n	8012554 <dhcp_create_msg+0x40>
 8012542:	4b59      	ldr	r3, [pc, #356]	; (80126a8 <dhcp_create_msg+0x194>)
 8012544:	f240 726a 	movw	r2, #1898	; 0x76a
 8012548:	495a      	ldr	r1, [pc, #360]	; (80126b4 <dhcp_create_msg+0x1a0>)
 801254a:	4859      	ldr	r0, [pc, #356]	; (80126b0 <dhcp_create_msg+0x19c>)
 801254c:	f005 fd22 	bl	8017f94 <iprintf>
 8012550:	2300      	movs	r3, #0
 8012552:	e0a5      	b.n	80126a0 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8012554:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012558:	f44f 719a 	mov.w	r1, #308	; 0x134
 801255c:	2036      	movs	r0, #54	; 0x36
 801255e:	f7f6 fe5d 	bl	800921c <pbuf_alloc>
 8012562:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	2b00      	cmp	r3, #0
 8012568:	d101      	bne.n	801256e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801256a:	2300      	movs	r3, #0
 801256c:	e098      	b.n	80126a0 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801256e:	69bb      	ldr	r3, [r7, #24]
 8012570:	895b      	ldrh	r3, [r3, #10]
 8012572:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8012576:	d206      	bcs.n	8012586 <dhcp_create_msg+0x72>
 8012578:	4b4b      	ldr	r3, [pc, #300]	; (80126a8 <dhcp_create_msg+0x194>)
 801257a:	f240 7272 	movw	r2, #1906	; 0x772
 801257e:	494e      	ldr	r1, [pc, #312]	; (80126b8 <dhcp_create_msg+0x1a4>)
 8012580:	484b      	ldr	r0, [pc, #300]	; (80126b0 <dhcp_create_msg+0x19c>)
 8012582:	f005 fd07 	bl	8017f94 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8012586:	79fb      	ldrb	r3, [r7, #7]
 8012588:	2b03      	cmp	r3, #3
 801258a:	d103      	bne.n	8012594 <dhcp_create_msg+0x80>
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	795b      	ldrb	r3, [r3, #5]
 8012590:	2b03      	cmp	r3, #3
 8012592:	d10d      	bne.n	80125b0 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	799b      	ldrb	r3, [r3, #6]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d105      	bne.n	80125a8 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801259c:	f005 fd76 	bl	801808c <rand>
 80125a0:	4603      	mov	r3, r0
 80125a2:	461a      	mov	r2, r3
 80125a4:	4b45      	ldr	r3, [pc, #276]	; (80126bc <dhcp_create_msg+0x1a8>)
 80125a6:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80125a8:	4b44      	ldr	r3, [pc, #272]	; (80126bc <dhcp_create_msg+0x1a8>)
 80125aa:	681a      	ldr	r2, [r3, #0]
 80125ac:	68bb      	ldr	r3, [r7, #8]
 80125ae:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80125b0:	69bb      	ldr	r3, [r7, #24]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80125b6:	f44f 729a 	mov.w	r2, #308	; 0x134
 80125ba:	2100      	movs	r1, #0
 80125bc:	6978      	ldr	r0, [r7, #20]
 80125be:	f005 fce1 	bl	8017f84 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80125c2:	697b      	ldr	r3, [r7, #20]
 80125c4:	2201      	movs	r2, #1
 80125c6:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80125c8:	697b      	ldr	r3, [r7, #20]
 80125ca:	2201      	movs	r2, #1
 80125cc:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80125d4:	697b      	ldr	r3, [r7, #20]
 80125d6:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80125d8:	68bb      	ldr	r3, [r7, #8]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	4618      	mov	r0, r3
 80125de:	f7f5 fd5e 	bl	800809e <lwip_htonl>
 80125e2:	4602      	mov	r2, r0
 80125e4:	697b      	ldr	r3, [r7, #20]
 80125e6:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80125e8:	79fb      	ldrb	r3, [r7, #7]
 80125ea:	2b08      	cmp	r3, #8
 80125ec:	d010      	beq.n	8012610 <dhcp_create_msg+0xfc>
 80125ee:	79fb      	ldrb	r3, [r7, #7]
 80125f0:	2b04      	cmp	r3, #4
 80125f2:	d00d      	beq.n	8012610 <dhcp_create_msg+0xfc>
 80125f4:	79fb      	ldrb	r3, [r7, #7]
 80125f6:	2b07      	cmp	r3, #7
 80125f8:	d00a      	beq.n	8012610 <dhcp_create_msg+0xfc>
 80125fa:	79fb      	ldrb	r3, [r7, #7]
 80125fc:	2b03      	cmp	r3, #3
 80125fe:	d10c      	bne.n	801261a <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8012604:	2b05      	cmp	r3, #5
 8012606:	d003      	beq.n	8012610 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8012608:	68bb      	ldr	r3, [r7, #8]
 801260a:	795b      	ldrb	r3, [r3, #5]
 801260c:	2b04      	cmp	r3, #4
 801260e:	d104      	bne.n	801261a <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	3304      	adds	r3, #4
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801261a:	2300      	movs	r3, #0
 801261c:	83fb      	strh	r3, [r7, #30]
 801261e:	e00c      	b.n	801263a <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8012620:	8bfa      	ldrh	r2, [r7, #30]
 8012622:	8bfb      	ldrh	r3, [r7, #30]
 8012624:	68f9      	ldr	r1, [r7, #12]
 8012626:	440a      	add	r2, r1
 8012628:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	4413      	add	r3, r2
 8012630:	460a      	mov	r2, r1
 8012632:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8012634:	8bfb      	ldrh	r3, [r7, #30]
 8012636:	3301      	adds	r3, #1
 8012638:	83fb      	strh	r3, [r7, #30]
 801263a:	8bfb      	ldrh	r3, [r7, #30]
 801263c:	2b05      	cmp	r3, #5
 801263e:	d9ef      	bls.n	8012620 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	2200      	movs	r2, #0
 8012644:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012648:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 801264c:	2200      	movs	r2, #0
 801264e:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8012652:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8012656:	2200      	movs	r2, #0
 8012658:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 801265c:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8012660:	2200      	movs	r2, #0
 8012662:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8012666:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012670:	2301      	movs	r3, #1
 8012672:	2235      	movs	r2, #53	; 0x35
 8012674:	2000      	movs	r0, #0
 8012676:	f7ff fadd 	bl	8011c34 <dhcp_option>
 801267a:	4603      	mov	r3, r0
 801267c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801267e:	697b      	ldr	r3, [r7, #20]
 8012680:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012684:	79fa      	ldrb	r2, [r7, #7]
 8012686:	8a7b      	ldrh	r3, [r7, #18]
 8012688:	4618      	mov	r0, r3
 801268a:	f7ff fb07 	bl	8011c9c <dhcp_option_byte>
 801268e:	4603      	mov	r3, r0
 8012690:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8012692:	683b      	ldr	r3, [r7, #0]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8012698:	683b      	ldr	r3, [r7, #0]
 801269a:	8a7a      	ldrh	r2, [r7, #18]
 801269c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801269e:	69bb      	ldr	r3, [r7, #24]
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	3720      	adds	r7, #32
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	0801bd08 	.word	0x0801bd08
 80126ac:	0801c028 	.word	0x0801c028
 80126b0:	0801bd68 	.word	0x0801bd68
 80126b4:	0801c048 	.word	0x0801c048
 80126b8:	0801c068 	.word	0x0801c068
 80126bc:	200083f4 	.word	0x200083f4

080126c0 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80126c0:	b580      	push	{r7, lr}
 80126c2:	b084      	sub	sp, #16
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	4603      	mov	r3, r0
 80126c8:	60b9      	str	r1, [r7, #8]
 80126ca:	607a      	str	r2, [r7, #4]
 80126cc:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80126ce:	89fb      	ldrh	r3, [r7, #14]
 80126d0:	1c5a      	adds	r2, r3, #1
 80126d2:	81fa      	strh	r2, [r7, #14]
 80126d4:	461a      	mov	r2, r3
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	4413      	add	r3, r2
 80126da:	22ff      	movs	r2, #255	; 0xff
 80126dc:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80126de:	e007      	b.n	80126f0 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80126e0:	89fb      	ldrh	r3, [r7, #14]
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	81fa      	strh	r2, [r7, #14]
 80126e6:	461a      	mov	r2, r3
 80126e8:	68bb      	ldr	r3, [r7, #8]
 80126ea:	4413      	add	r3, r2
 80126ec:	2200      	movs	r2, #0
 80126ee:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80126f0:	89fb      	ldrh	r3, [r7, #14]
 80126f2:	2b43      	cmp	r3, #67	; 0x43
 80126f4:	d904      	bls.n	8012700 <dhcp_option_trailer+0x40>
 80126f6:	89fb      	ldrh	r3, [r7, #14]
 80126f8:	f003 0303 	and.w	r3, r3, #3
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d002      	beq.n	8012706 <dhcp_option_trailer+0x46>
 8012700:	89fb      	ldrh	r3, [r7, #14]
 8012702:	2b43      	cmp	r3, #67	; 0x43
 8012704:	d9ec      	bls.n	80126e0 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8012706:	89fb      	ldrh	r3, [r7, #14]
 8012708:	33f0      	adds	r3, #240	; 0xf0
 801270a:	b29b      	uxth	r3, r3
 801270c:	4619      	mov	r1, r3
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f7f6 fede 	bl	80094d0 <pbuf_realloc>
}
 8012714:	bf00      	nop
 8012716:	3710      	adds	r7, #16
 8012718:	46bd      	mov	sp, r7
 801271a:	bd80      	pop	{r7, pc}

0801271c <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801271c:	b480      	push	{r7}
 801271e:	b085      	sub	sp, #20
 8012720:	af00      	add	r7, sp, #0
 8012722:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d017      	beq.n	801275a <dhcp_supplied_address+0x3e>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801272e:	2b00      	cmp	r3, #0
 8012730:	d013      	beq.n	801275a <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012736:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	795b      	ldrb	r3, [r3, #5]
 801273c:	2b0a      	cmp	r3, #10
 801273e:	d007      	beq.n	8012750 <dhcp_supplied_address+0x34>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	795b      	ldrb	r3, [r3, #5]
 8012744:	2b05      	cmp	r3, #5
 8012746:	d003      	beq.n	8012750 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801274c:	2b04      	cmp	r3, #4
 801274e:	d101      	bne.n	8012754 <dhcp_supplied_address+0x38>
 8012750:	2301      	movs	r3, #1
 8012752:	e000      	b.n	8012756 <dhcp_supplied_address+0x3a>
 8012754:	2300      	movs	r3, #0
 8012756:	b2db      	uxtb	r3, r3
 8012758:	e000      	b.n	801275c <dhcp_supplied_address+0x40>
  }
  return 0;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3714      	adds	r7, #20
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8012770:	4915      	ldr	r1, [pc, #84]	; (80127c8 <etharp_free_entry+0x60>)
 8012772:	687a      	ldr	r2, [r7, #4]
 8012774:	4613      	mov	r3, r2
 8012776:	005b      	lsls	r3, r3, #1
 8012778:	4413      	add	r3, r2
 801277a:	00db      	lsls	r3, r3, #3
 801277c:	440b      	add	r3, r1
 801277e:	681b      	ldr	r3, [r3, #0]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d013      	beq.n	80127ac <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8012784:	4910      	ldr	r1, [pc, #64]	; (80127c8 <etharp_free_entry+0x60>)
 8012786:	687a      	ldr	r2, [r7, #4]
 8012788:	4613      	mov	r3, r2
 801278a:	005b      	lsls	r3, r3, #1
 801278c:	4413      	add	r3, r2
 801278e:	00db      	lsls	r3, r3, #3
 8012790:	440b      	add	r3, r1
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	4618      	mov	r0, r3
 8012796:	f7f7 f821 	bl	80097dc <pbuf_free>
    arp_table[i].q = NULL;
 801279a:	490b      	ldr	r1, [pc, #44]	; (80127c8 <etharp_free_entry+0x60>)
 801279c:	687a      	ldr	r2, [r7, #4]
 801279e:	4613      	mov	r3, r2
 80127a0:	005b      	lsls	r3, r3, #1
 80127a2:	4413      	add	r3, r2
 80127a4:	00db      	lsls	r3, r3, #3
 80127a6:	440b      	add	r3, r1
 80127a8:	2200      	movs	r2, #0
 80127aa:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80127ac:	4906      	ldr	r1, [pc, #24]	; (80127c8 <etharp_free_entry+0x60>)
 80127ae:	687a      	ldr	r2, [r7, #4]
 80127b0:	4613      	mov	r3, r2
 80127b2:	005b      	lsls	r3, r3, #1
 80127b4:	4413      	add	r3, r2
 80127b6:	00db      	lsls	r3, r3, #3
 80127b8:	440b      	add	r3, r1
 80127ba:	3314      	adds	r3, #20
 80127bc:	2200      	movs	r2, #0
 80127be:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80127c0:	bf00      	nop
 80127c2:	3708      	adds	r7, #8
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd80      	pop	{r7, pc}
 80127c8:	200083f8 	.word	0x200083f8

080127cc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b082      	sub	sp, #8
 80127d0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80127d2:	2300      	movs	r3, #0
 80127d4:	607b      	str	r3, [r7, #4]
 80127d6:	e096      	b.n	8012906 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80127d8:	494f      	ldr	r1, [pc, #316]	; (8012918 <etharp_tmr+0x14c>)
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	4613      	mov	r3, r2
 80127de:	005b      	lsls	r3, r3, #1
 80127e0:	4413      	add	r3, r2
 80127e2:	00db      	lsls	r3, r3, #3
 80127e4:	440b      	add	r3, r1
 80127e6:	3314      	adds	r3, #20
 80127e8:	781b      	ldrb	r3, [r3, #0]
 80127ea:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80127ec:	78fb      	ldrb	r3, [r7, #3]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	f000 8086 	beq.w	8012900 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80127f4:	4948      	ldr	r1, [pc, #288]	; (8012918 <etharp_tmr+0x14c>)
 80127f6:	687a      	ldr	r2, [r7, #4]
 80127f8:	4613      	mov	r3, r2
 80127fa:	005b      	lsls	r3, r3, #1
 80127fc:	4413      	add	r3, r2
 80127fe:	00db      	lsls	r3, r3, #3
 8012800:	440b      	add	r3, r1
 8012802:	3312      	adds	r3, #18
 8012804:	881b      	ldrh	r3, [r3, #0]
 8012806:	3301      	adds	r3, #1
 8012808:	b298      	uxth	r0, r3
 801280a:	4943      	ldr	r1, [pc, #268]	; (8012918 <etharp_tmr+0x14c>)
 801280c:	687a      	ldr	r2, [r7, #4]
 801280e:	4613      	mov	r3, r2
 8012810:	005b      	lsls	r3, r3, #1
 8012812:	4413      	add	r3, r2
 8012814:	00db      	lsls	r3, r3, #3
 8012816:	440b      	add	r3, r1
 8012818:	3312      	adds	r3, #18
 801281a:	4602      	mov	r2, r0
 801281c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801281e:	493e      	ldr	r1, [pc, #248]	; (8012918 <etharp_tmr+0x14c>)
 8012820:	687a      	ldr	r2, [r7, #4]
 8012822:	4613      	mov	r3, r2
 8012824:	005b      	lsls	r3, r3, #1
 8012826:	4413      	add	r3, r2
 8012828:	00db      	lsls	r3, r3, #3
 801282a:	440b      	add	r3, r1
 801282c:	3312      	adds	r3, #18
 801282e:	881b      	ldrh	r3, [r3, #0]
 8012830:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8012834:	d215      	bcs.n	8012862 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8012836:	4938      	ldr	r1, [pc, #224]	; (8012918 <etharp_tmr+0x14c>)
 8012838:	687a      	ldr	r2, [r7, #4]
 801283a:	4613      	mov	r3, r2
 801283c:	005b      	lsls	r3, r3, #1
 801283e:	4413      	add	r3, r2
 8012840:	00db      	lsls	r3, r3, #3
 8012842:	440b      	add	r3, r1
 8012844:	3314      	adds	r3, #20
 8012846:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8012848:	2b01      	cmp	r3, #1
 801284a:	d10e      	bne.n	801286a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801284c:	4932      	ldr	r1, [pc, #200]	; (8012918 <etharp_tmr+0x14c>)
 801284e:	687a      	ldr	r2, [r7, #4]
 8012850:	4613      	mov	r3, r2
 8012852:	005b      	lsls	r3, r3, #1
 8012854:	4413      	add	r3, r2
 8012856:	00db      	lsls	r3, r3, #3
 8012858:	440b      	add	r3, r1
 801285a:	3312      	adds	r3, #18
 801285c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801285e:	2b04      	cmp	r3, #4
 8012860:	d903      	bls.n	801286a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8012862:	6878      	ldr	r0, [r7, #4]
 8012864:	f7ff ff80 	bl	8012768 <etharp_free_entry>
 8012868:	e04a      	b.n	8012900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801286a:	492b      	ldr	r1, [pc, #172]	; (8012918 <etharp_tmr+0x14c>)
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	4613      	mov	r3, r2
 8012870:	005b      	lsls	r3, r3, #1
 8012872:	4413      	add	r3, r2
 8012874:	00db      	lsls	r3, r3, #3
 8012876:	440b      	add	r3, r1
 8012878:	3314      	adds	r3, #20
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	2b03      	cmp	r3, #3
 801287e:	d10a      	bne.n	8012896 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8012880:	4925      	ldr	r1, [pc, #148]	; (8012918 <etharp_tmr+0x14c>)
 8012882:	687a      	ldr	r2, [r7, #4]
 8012884:	4613      	mov	r3, r2
 8012886:	005b      	lsls	r3, r3, #1
 8012888:	4413      	add	r3, r2
 801288a:	00db      	lsls	r3, r3, #3
 801288c:	440b      	add	r3, r1
 801288e:	3314      	adds	r3, #20
 8012890:	2204      	movs	r2, #4
 8012892:	701a      	strb	r2, [r3, #0]
 8012894:	e034      	b.n	8012900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8012896:	4920      	ldr	r1, [pc, #128]	; (8012918 <etharp_tmr+0x14c>)
 8012898:	687a      	ldr	r2, [r7, #4]
 801289a:	4613      	mov	r3, r2
 801289c:	005b      	lsls	r3, r3, #1
 801289e:	4413      	add	r3, r2
 80128a0:	00db      	lsls	r3, r3, #3
 80128a2:	440b      	add	r3, r1
 80128a4:	3314      	adds	r3, #20
 80128a6:	781b      	ldrb	r3, [r3, #0]
 80128a8:	2b04      	cmp	r3, #4
 80128aa:	d10a      	bne.n	80128c2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80128ac:	491a      	ldr	r1, [pc, #104]	; (8012918 <etharp_tmr+0x14c>)
 80128ae:	687a      	ldr	r2, [r7, #4]
 80128b0:	4613      	mov	r3, r2
 80128b2:	005b      	lsls	r3, r3, #1
 80128b4:	4413      	add	r3, r2
 80128b6:	00db      	lsls	r3, r3, #3
 80128b8:	440b      	add	r3, r1
 80128ba:	3314      	adds	r3, #20
 80128bc:	2202      	movs	r2, #2
 80128be:	701a      	strb	r2, [r3, #0]
 80128c0:	e01e      	b.n	8012900 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80128c2:	4915      	ldr	r1, [pc, #84]	; (8012918 <etharp_tmr+0x14c>)
 80128c4:	687a      	ldr	r2, [r7, #4]
 80128c6:	4613      	mov	r3, r2
 80128c8:	005b      	lsls	r3, r3, #1
 80128ca:	4413      	add	r3, r2
 80128cc:	00db      	lsls	r3, r3, #3
 80128ce:	440b      	add	r3, r1
 80128d0:	3314      	adds	r3, #20
 80128d2:	781b      	ldrb	r3, [r3, #0]
 80128d4:	2b01      	cmp	r3, #1
 80128d6:	d113      	bne.n	8012900 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80128d8:	490f      	ldr	r1, [pc, #60]	; (8012918 <etharp_tmr+0x14c>)
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	4613      	mov	r3, r2
 80128de:	005b      	lsls	r3, r3, #1
 80128e0:	4413      	add	r3, r2
 80128e2:	00db      	lsls	r3, r3, #3
 80128e4:	440b      	add	r3, r1
 80128e6:	3308      	adds	r3, #8
 80128e8:	6818      	ldr	r0, [r3, #0]
 80128ea:	687a      	ldr	r2, [r7, #4]
 80128ec:	4613      	mov	r3, r2
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	4413      	add	r3, r2
 80128f2:	00db      	lsls	r3, r3, #3
 80128f4:	4a08      	ldr	r2, [pc, #32]	; (8012918 <etharp_tmr+0x14c>)
 80128f6:	4413      	add	r3, r2
 80128f8:	3304      	adds	r3, #4
 80128fa:	4619      	mov	r1, r3
 80128fc:	f000 fe72 	bl	80135e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	3301      	adds	r3, #1
 8012904:	607b      	str	r3, [r7, #4]
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2b09      	cmp	r3, #9
 801290a:	f77f af65 	ble.w	80127d8 <etharp_tmr+0xc>
      }
    }
  }
}
 801290e:	bf00      	nop
 8012910:	3708      	adds	r7, #8
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}
 8012916:	bf00      	nop
 8012918:	200083f8 	.word	0x200083f8

0801291c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801291c:	b580      	push	{r7, lr}
 801291e:	b08a      	sub	sp, #40	; 0x28
 8012920:	af00      	add	r7, sp, #0
 8012922:	60f8      	str	r0, [r7, #12]
 8012924:	460b      	mov	r3, r1
 8012926:	607a      	str	r2, [r7, #4]
 8012928:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801292a:	230a      	movs	r3, #10
 801292c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801292e:	230a      	movs	r3, #10
 8012930:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8012932:	230a      	movs	r3, #10
 8012934:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8012936:	2300      	movs	r3, #0
 8012938:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801293a:	230a      	movs	r3, #10
 801293c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801293e:	2300      	movs	r3, #0
 8012940:	83bb      	strh	r3, [r7, #28]
 8012942:	2300      	movs	r3, #0
 8012944:	837b      	strh	r3, [r7, #26]
 8012946:	2300      	movs	r3, #0
 8012948:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801294a:	2300      	movs	r3, #0
 801294c:	843b      	strh	r3, [r7, #32]
 801294e:	e0ae      	b.n	8012aae <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8012950:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012954:	49a6      	ldr	r1, [pc, #664]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012956:	4613      	mov	r3, r2
 8012958:	005b      	lsls	r3, r3, #1
 801295a:	4413      	add	r3, r2
 801295c:	00db      	lsls	r3, r3, #3
 801295e:	440b      	add	r3, r1
 8012960:	3314      	adds	r3, #20
 8012962:	781b      	ldrb	r3, [r3, #0]
 8012964:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8012966:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801296a:	2b0a      	cmp	r3, #10
 801296c:	d105      	bne.n	801297a <etharp_find_entry+0x5e>
 801296e:	7dfb      	ldrb	r3, [r7, #23]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d102      	bne.n	801297a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8012974:	8c3b      	ldrh	r3, [r7, #32]
 8012976:	847b      	strh	r3, [r7, #34]	; 0x22
 8012978:	e095      	b.n	8012aa6 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801297a:	7dfb      	ldrb	r3, [r7, #23]
 801297c:	2b00      	cmp	r3, #0
 801297e:	f000 8092 	beq.w	8012aa6 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8012982:	7dfb      	ldrb	r3, [r7, #23]
 8012984:	2b01      	cmp	r3, #1
 8012986:	d009      	beq.n	801299c <etharp_find_entry+0x80>
 8012988:	7dfb      	ldrb	r3, [r7, #23]
 801298a:	2b01      	cmp	r3, #1
 801298c:	d806      	bhi.n	801299c <etharp_find_entry+0x80>
 801298e:	4b99      	ldr	r3, [pc, #612]	; (8012bf4 <etharp_find_entry+0x2d8>)
 8012990:	f44f 7292 	mov.w	r2, #292	; 0x124
 8012994:	4998      	ldr	r1, [pc, #608]	; (8012bf8 <etharp_find_entry+0x2dc>)
 8012996:	4899      	ldr	r0, [pc, #612]	; (8012bfc <etharp_find_entry+0x2e0>)
 8012998:	f005 fafc 	bl	8017f94 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d020      	beq.n	80129e4 <etharp_find_entry+0xc8>
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6819      	ldr	r1, [r3, #0]
 80129a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129aa:	4891      	ldr	r0, [pc, #580]	; (8012bf0 <etharp_find_entry+0x2d4>)
 80129ac:	4613      	mov	r3, r2
 80129ae:	005b      	lsls	r3, r3, #1
 80129b0:	4413      	add	r3, r2
 80129b2:	00db      	lsls	r3, r3, #3
 80129b4:	4403      	add	r3, r0
 80129b6:	3304      	adds	r3, #4
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	4299      	cmp	r1, r3
 80129bc:	d112      	bne.n	80129e4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d00c      	beq.n	80129de <etharp_find_entry+0xc2>
 80129c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129c8:	4989      	ldr	r1, [pc, #548]	; (8012bf0 <etharp_find_entry+0x2d4>)
 80129ca:	4613      	mov	r3, r2
 80129cc:	005b      	lsls	r3, r3, #1
 80129ce:	4413      	add	r3, r2
 80129d0:	00db      	lsls	r3, r3, #3
 80129d2:	440b      	add	r3, r1
 80129d4:	3308      	adds	r3, #8
 80129d6:	681b      	ldr	r3, [r3, #0]
 80129d8:	687a      	ldr	r2, [r7, #4]
 80129da:	429a      	cmp	r2, r3
 80129dc:	d102      	bne.n	80129e4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80129de:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80129e2:	e100      	b.n	8012be6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80129e4:	7dfb      	ldrb	r3, [r7, #23]
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	d140      	bne.n	8012a6c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80129ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80129ee:	4980      	ldr	r1, [pc, #512]	; (8012bf0 <etharp_find_entry+0x2d4>)
 80129f0:	4613      	mov	r3, r2
 80129f2:	005b      	lsls	r3, r3, #1
 80129f4:	4413      	add	r3, r2
 80129f6:	00db      	lsls	r3, r3, #3
 80129f8:	440b      	add	r3, r1
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d01a      	beq.n	8012a36 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8012a00:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a04:	497a      	ldr	r1, [pc, #488]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a06:	4613      	mov	r3, r2
 8012a08:	005b      	lsls	r3, r3, #1
 8012a0a:	4413      	add	r3, r2
 8012a0c:	00db      	lsls	r3, r3, #3
 8012a0e:	440b      	add	r3, r1
 8012a10:	3312      	adds	r3, #18
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	8bba      	ldrh	r2, [r7, #28]
 8012a16:	429a      	cmp	r2, r3
 8012a18:	d845      	bhi.n	8012aa6 <etharp_find_entry+0x18a>
            old_queue = i;
 8012a1a:	8c3b      	ldrh	r3, [r7, #32]
 8012a1c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8012a1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a22:	4973      	ldr	r1, [pc, #460]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a24:	4613      	mov	r3, r2
 8012a26:	005b      	lsls	r3, r3, #1
 8012a28:	4413      	add	r3, r2
 8012a2a:	00db      	lsls	r3, r3, #3
 8012a2c:	440b      	add	r3, r1
 8012a2e:	3312      	adds	r3, #18
 8012a30:	881b      	ldrh	r3, [r3, #0]
 8012a32:	83bb      	strh	r3, [r7, #28]
 8012a34:	e037      	b.n	8012aa6 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8012a36:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a3a:	496d      	ldr	r1, [pc, #436]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a3c:	4613      	mov	r3, r2
 8012a3e:	005b      	lsls	r3, r3, #1
 8012a40:	4413      	add	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	440b      	add	r3, r1
 8012a46:	3312      	adds	r3, #18
 8012a48:	881b      	ldrh	r3, [r3, #0]
 8012a4a:	8b7a      	ldrh	r2, [r7, #26]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d82a      	bhi.n	8012aa6 <etharp_find_entry+0x18a>
            old_pending = i;
 8012a50:	8c3b      	ldrh	r3, [r7, #32]
 8012a52:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8012a54:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a58:	4965      	ldr	r1, [pc, #404]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a5a:	4613      	mov	r3, r2
 8012a5c:	005b      	lsls	r3, r3, #1
 8012a5e:	4413      	add	r3, r2
 8012a60:	00db      	lsls	r3, r3, #3
 8012a62:	440b      	add	r3, r1
 8012a64:	3312      	adds	r3, #18
 8012a66:	881b      	ldrh	r3, [r3, #0]
 8012a68:	837b      	strh	r3, [r7, #26]
 8012a6a:	e01c      	b.n	8012aa6 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8012a6c:	7dfb      	ldrb	r3, [r7, #23]
 8012a6e:	2b01      	cmp	r3, #1
 8012a70:	d919      	bls.n	8012aa6 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8012a72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a76:	495e      	ldr	r1, [pc, #376]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a78:	4613      	mov	r3, r2
 8012a7a:	005b      	lsls	r3, r3, #1
 8012a7c:	4413      	add	r3, r2
 8012a7e:	00db      	lsls	r3, r3, #3
 8012a80:	440b      	add	r3, r1
 8012a82:	3312      	adds	r3, #18
 8012a84:	881b      	ldrh	r3, [r3, #0]
 8012a86:	8b3a      	ldrh	r2, [r7, #24]
 8012a88:	429a      	cmp	r2, r3
 8012a8a:	d80c      	bhi.n	8012aa6 <etharp_find_entry+0x18a>
            old_stable = i;
 8012a8c:	8c3b      	ldrh	r3, [r7, #32]
 8012a8e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8012a90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012a94:	4956      	ldr	r1, [pc, #344]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012a96:	4613      	mov	r3, r2
 8012a98:	005b      	lsls	r3, r3, #1
 8012a9a:	4413      	add	r3, r2
 8012a9c:	00db      	lsls	r3, r3, #3
 8012a9e:	440b      	add	r3, r1
 8012aa0:	3312      	adds	r3, #18
 8012aa2:	881b      	ldrh	r3, [r3, #0]
 8012aa4:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012aa6:	8c3b      	ldrh	r3, [r7, #32]
 8012aa8:	3301      	adds	r3, #1
 8012aaa:	b29b      	uxth	r3, r3
 8012aac:	843b      	strh	r3, [r7, #32]
 8012aae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012ab2:	2b09      	cmp	r3, #9
 8012ab4:	f77f af4c 	ble.w	8012950 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8012ab8:	7afb      	ldrb	r3, [r7, #11]
 8012aba:	f003 0302 	and.w	r3, r3, #2
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d108      	bne.n	8012ad4 <etharp_find_entry+0x1b8>
 8012ac2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012ac6:	2b0a      	cmp	r3, #10
 8012ac8:	d107      	bne.n	8012ada <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8012aca:	7afb      	ldrb	r3, [r7, #11]
 8012acc:	f003 0301 	and.w	r3, r3, #1
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d102      	bne.n	8012ada <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8012ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8012ad8:	e085      	b.n	8012be6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8012ada:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8012ade:	2b09      	cmp	r3, #9
 8012ae0:	dc02      	bgt.n	8012ae8 <etharp_find_entry+0x1cc>
    i = empty;
 8012ae2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ae4:	843b      	strh	r3, [r7, #32]
 8012ae6:	e039      	b.n	8012b5c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8012ae8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8012aec:	2b09      	cmp	r3, #9
 8012aee:	dc14      	bgt.n	8012b1a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8012af0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012af2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8012af4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012af8:	493d      	ldr	r1, [pc, #244]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012afa:	4613      	mov	r3, r2
 8012afc:	005b      	lsls	r3, r3, #1
 8012afe:	4413      	add	r3, r2
 8012b00:	00db      	lsls	r3, r3, #3
 8012b02:	440b      	add	r3, r1
 8012b04:	681b      	ldr	r3, [r3, #0]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d018      	beq.n	8012b3c <etharp_find_entry+0x220>
 8012b0a:	4b3a      	ldr	r3, [pc, #232]	; (8012bf4 <etharp_find_entry+0x2d8>)
 8012b0c:	f240 126d 	movw	r2, #365	; 0x16d
 8012b10:	493b      	ldr	r1, [pc, #236]	; (8012c00 <etharp_find_entry+0x2e4>)
 8012b12:	483a      	ldr	r0, [pc, #232]	; (8012bfc <etharp_find_entry+0x2e0>)
 8012b14:	f005 fa3e 	bl	8017f94 <iprintf>
 8012b18:	e010      	b.n	8012b3c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8012b1a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8012b1e:	2b09      	cmp	r3, #9
 8012b20:	dc02      	bgt.n	8012b28 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8012b22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8012b24:	843b      	strh	r3, [r7, #32]
 8012b26:	e009      	b.n	8012b3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8012b28:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8012b2c:	2b09      	cmp	r3, #9
 8012b2e:	dc02      	bgt.n	8012b36 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8012b30:	8bfb      	ldrh	r3, [r7, #30]
 8012b32:	843b      	strh	r3, [r7, #32]
 8012b34:	e002      	b.n	8012b3c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8012b36:	f04f 33ff 	mov.w	r3, #4294967295
 8012b3a:	e054      	b.n	8012be6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b3c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b40:	2b09      	cmp	r3, #9
 8012b42:	dd06      	ble.n	8012b52 <etharp_find_entry+0x236>
 8012b44:	4b2b      	ldr	r3, [pc, #172]	; (8012bf4 <etharp_find_entry+0x2d8>)
 8012b46:	f240 127f 	movw	r2, #383	; 0x17f
 8012b4a:	492e      	ldr	r1, [pc, #184]	; (8012c04 <etharp_find_entry+0x2e8>)
 8012b4c:	482b      	ldr	r0, [pc, #172]	; (8012bfc <etharp_find_entry+0x2e0>)
 8012b4e:	f005 fa21 	bl	8017f94 <iprintf>
    etharp_free_entry(i);
 8012b52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b56:	4618      	mov	r0, r3
 8012b58:	f7ff fe06 	bl	8012768 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8012b5c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012b60:	2b09      	cmp	r3, #9
 8012b62:	dd06      	ble.n	8012b72 <etharp_find_entry+0x256>
 8012b64:	4b23      	ldr	r3, [pc, #140]	; (8012bf4 <etharp_find_entry+0x2d8>)
 8012b66:	f240 1283 	movw	r2, #387	; 0x183
 8012b6a:	4926      	ldr	r1, [pc, #152]	; (8012c04 <etharp_find_entry+0x2e8>)
 8012b6c:	4823      	ldr	r0, [pc, #140]	; (8012bfc <etharp_find_entry+0x2e0>)
 8012b6e:	f005 fa11 	bl	8017f94 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8012b72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012b76:	491e      	ldr	r1, [pc, #120]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012b78:	4613      	mov	r3, r2
 8012b7a:	005b      	lsls	r3, r3, #1
 8012b7c:	4413      	add	r3, r2
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	440b      	add	r3, r1
 8012b82:	3314      	adds	r3, #20
 8012b84:	781b      	ldrb	r3, [r3, #0]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d006      	beq.n	8012b98 <etharp_find_entry+0x27c>
 8012b8a:	4b1a      	ldr	r3, [pc, #104]	; (8012bf4 <etharp_find_entry+0x2d8>)
 8012b8c:	f240 1285 	movw	r2, #389	; 0x185
 8012b90:	491d      	ldr	r1, [pc, #116]	; (8012c08 <etharp_find_entry+0x2ec>)
 8012b92:	481a      	ldr	r0, [pc, #104]	; (8012bfc <etharp_find_entry+0x2e0>)
 8012b94:	f005 f9fe 	bl	8017f94 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00b      	beq.n	8012bb6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8012b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6819      	ldr	r1, [r3, #0]
 8012ba6:	4812      	ldr	r0, [pc, #72]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012ba8:	4613      	mov	r3, r2
 8012baa:	005b      	lsls	r3, r3, #1
 8012bac:	4413      	add	r3, r2
 8012bae:	00db      	lsls	r3, r3, #3
 8012bb0:	4403      	add	r3, r0
 8012bb2:	3304      	adds	r3, #4
 8012bb4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8012bb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bba:	490d      	ldr	r1, [pc, #52]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012bbc:	4613      	mov	r3, r2
 8012bbe:	005b      	lsls	r3, r3, #1
 8012bc0:	4413      	add	r3, r2
 8012bc2:	00db      	lsls	r3, r3, #3
 8012bc4:	440b      	add	r3, r1
 8012bc6:	3312      	adds	r3, #18
 8012bc8:	2200      	movs	r2, #0
 8012bca:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8012bcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8012bd0:	4907      	ldr	r1, [pc, #28]	; (8012bf0 <etharp_find_entry+0x2d4>)
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	005b      	lsls	r3, r3, #1
 8012bd6:	4413      	add	r3, r2
 8012bd8:	00db      	lsls	r3, r3, #3
 8012bda:	440b      	add	r3, r1
 8012bdc:	3308      	adds	r3, #8
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8012be2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3728      	adds	r7, #40	; 0x28
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}
 8012bee:	bf00      	nop
 8012bf0:	200083f8 	.word	0x200083f8
 8012bf4:	0801c0a8 	.word	0x0801c0a8
 8012bf8:	0801c0e0 	.word	0x0801c0e0
 8012bfc:	0801c120 	.word	0x0801c120
 8012c00:	0801c148 	.word	0x0801c148
 8012c04:	0801c160 	.word	0x0801c160
 8012c08:	0801c174 	.word	0x0801c174

08012c0c <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b088      	sub	sp, #32
 8012c10:	af02      	add	r7, sp, #8
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	607a      	str	r2, [r7, #4]
 8012c18:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c20:	2b06      	cmp	r3, #6
 8012c22:	d006      	beq.n	8012c32 <etharp_update_arp_entry+0x26>
 8012c24:	4b48      	ldr	r3, [pc, #288]	; (8012d48 <etharp_update_arp_entry+0x13c>)
 8012c26:	f240 12a9 	movw	r2, #425	; 0x1a9
 8012c2a:	4948      	ldr	r1, [pc, #288]	; (8012d4c <etharp_update_arp_entry+0x140>)
 8012c2c:	4848      	ldr	r0, [pc, #288]	; (8012d50 <etharp_update_arp_entry+0x144>)
 8012c2e:	f005 f9b1 	bl	8017f94 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012c32:	68bb      	ldr	r3, [r7, #8]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d012      	beq.n	8012c5e <etharp_update_arp_entry+0x52>
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00e      	beq.n	8012c5e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	68f9      	ldr	r1, [r7, #12]
 8012c46:	4618      	mov	r0, r3
 8012c48:	f001 f91e 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8012c4c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d105      	bne.n	8012c5e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012c52:	68bb      	ldr	r3, [r7, #8]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012c5a:	2be0      	cmp	r3, #224	; 0xe0
 8012c5c:	d102      	bne.n	8012c64 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012c5e:	f06f 030f 	mvn.w	r3, #15
 8012c62:	e06c      	b.n	8012d3e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012c64:	78fb      	ldrb	r3, [r7, #3]
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	4619      	mov	r1, r3
 8012c6a:	68b8      	ldr	r0, [r7, #8]
 8012c6c:	f7ff fe56 	bl	801291c <etharp_find_entry>
 8012c70:	4603      	mov	r3, r0
 8012c72:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012c74:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	da02      	bge.n	8012c82 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8012c7c:	8afb      	ldrh	r3, [r7, #22]
 8012c7e:	b25b      	sxtb	r3, r3
 8012c80:	e05d      	b.n	8012d3e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012c82:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c86:	4933      	ldr	r1, [pc, #204]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012c88:	4613      	mov	r3, r2
 8012c8a:	005b      	lsls	r3, r3, #1
 8012c8c:	4413      	add	r3, r2
 8012c8e:	00db      	lsls	r3, r3, #3
 8012c90:	440b      	add	r3, r1
 8012c92:	3314      	adds	r3, #20
 8012c94:	2202      	movs	r2, #2
 8012c96:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012c98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012c9c:	492d      	ldr	r1, [pc, #180]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012c9e:	4613      	mov	r3, r2
 8012ca0:	005b      	lsls	r3, r3, #1
 8012ca2:	4413      	add	r3, r2
 8012ca4:	00db      	lsls	r3, r3, #3
 8012ca6:	440b      	add	r3, r1
 8012ca8:	3308      	adds	r3, #8
 8012caa:	68fa      	ldr	r2, [r7, #12]
 8012cac:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8012cae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cb2:	4613      	mov	r3, r2
 8012cb4:	005b      	lsls	r3, r3, #1
 8012cb6:	4413      	add	r3, r2
 8012cb8:	00db      	lsls	r3, r3, #3
 8012cba:	3308      	adds	r3, #8
 8012cbc:	4a25      	ldr	r2, [pc, #148]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012cbe:	4413      	add	r3, r2
 8012cc0:	3304      	adds	r3, #4
 8012cc2:	2206      	movs	r2, #6
 8012cc4:	6879      	ldr	r1, [r7, #4]
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	f005 f951 	bl	8017f6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8012ccc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cd0:	4920      	ldr	r1, [pc, #128]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012cd2:	4613      	mov	r3, r2
 8012cd4:	005b      	lsls	r3, r3, #1
 8012cd6:	4413      	add	r3, r2
 8012cd8:	00db      	lsls	r3, r3, #3
 8012cda:	440b      	add	r3, r1
 8012cdc:	3312      	adds	r3, #18
 8012cde:	2200      	movs	r2, #0
 8012ce0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8012ce2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012ce6:	491b      	ldr	r1, [pc, #108]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012ce8:	4613      	mov	r3, r2
 8012cea:	005b      	lsls	r3, r3, #1
 8012cec:	4413      	add	r3, r2
 8012cee:	00db      	lsls	r3, r3, #3
 8012cf0:	440b      	add	r3, r1
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	2b00      	cmp	r3, #0
 8012cf6:	d021      	beq.n	8012d3c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8012cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012cfc:	4915      	ldr	r1, [pc, #84]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012cfe:	4613      	mov	r3, r2
 8012d00:	005b      	lsls	r3, r3, #1
 8012d02:	4413      	add	r3, r2
 8012d04:	00db      	lsls	r3, r3, #3
 8012d06:	440b      	add	r3, r1
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8012d0c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012d10:	4910      	ldr	r1, [pc, #64]	; (8012d54 <etharp_update_arp_entry+0x148>)
 8012d12:	4613      	mov	r3, r2
 8012d14:	005b      	lsls	r3, r3, #1
 8012d16:	4413      	add	r3, r2
 8012d18:	00db      	lsls	r3, r3, #3
 8012d1a:	440b      	add	r3, r1
 8012d1c:	2200      	movs	r2, #0
 8012d1e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8012d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012d2a:	9300      	str	r3, [sp, #0]
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	6939      	ldr	r1, [r7, #16]
 8012d30:	68f8      	ldr	r0, [r7, #12]
 8012d32:	f002 f8df 	bl	8014ef4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012d36:	6938      	ldr	r0, [r7, #16]
 8012d38:	f7f6 fd50 	bl	80097dc <pbuf_free>
  }
  return ERR_OK;
 8012d3c:	2300      	movs	r3, #0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3718      	adds	r7, #24
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
 8012d46:	bf00      	nop
 8012d48:	0801c0a8 	.word	0x0801c0a8
 8012d4c:	0801c1a0 	.word	0x0801c1a0
 8012d50:	0801c120 	.word	0x0801c120
 8012d54:	200083f8 	.word	0x200083f8

08012d58 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d60:	2300      	movs	r3, #0
 8012d62:	60fb      	str	r3, [r7, #12]
 8012d64:	e01e      	b.n	8012da4 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012d66:	4913      	ldr	r1, [pc, #76]	; (8012db4 <etharp_cleanup_netif+0x5c>)
 8012d68:	68fa      	ldr	r2, [r7, #12]
 8012d6a:	4613      	mov	r3, r2
 8012d6c:	005b      	lsls	r3, r3, #1
 8012d6e:	4413      	add	r3, r2
 8012d70:	00db      	lsls	r3, r3, #3
 8012d72:	440b      	add	r3, r1
 8012d74:	3314      	adds	r3, #20
 8012d76:	781b      	ldrb	r3, [r3, #0]
 8012d78:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012d7a:	7afb      	ldrb	r3, [r7, #11]
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d00e      	beq.n	8012d9e <etharp_cleanup_netif+0x46>
 8012d80:	490c      	ldr	r1, [pc, #48]	; (8012db4 <etharp_cleanup_netif+0x5c>)
 8012d82:	68fa      	ldr	r2, [r7, #12]
 8012d84:	4613      	mov	r3, r2
 8012d86:	005b      	lsls	r3, r3, #1
 8012d88:	4413      	add	r3, r2
 8012d8a:	00db      	lsls	r3, r3, #3
 8012d8c:	440b      	add	r3, r1
 8012d8e:	3308      	adds	r3, #8
 8012d90:	681b      	ldr	r3, [r3, #0]
 8012d92:	687a      	ldr	r2, [r7, #4]
 8012d94:	429a      	cmp	r2, r3
 8012d96:	d102      	bne.n	8012d9e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012d98:	68f8      	ldr	r0, [r7, #12]
 8012d9a:	f7ff fce5 	bl	8012768 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	3301      	adds	r3, #1
 8012da2:	60fb      	str	r3, [r7, #12]
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	2b09      	cmp	r3, #9
 8012da8:	dddd      	ble.n	8012d66 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012daa:	bf00      	nop
 8012dac:	3710      	adds	r7, #16
 8012dae:	46bd      	mov	sp, r7
 8012db0:	bd80      	pop	{r7, pc}
 8012db2:	bf00      	nop
 8012db4:	200083f8 	.word	0x200083f8

08012db8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012db8:	b5b0      	push	{r4, r5, r7, lr}
 8012dba:	b08a      	sub	sp, #40	; 0x28
 8012dbc:	af04      	add	r7, sp, #16
 8012dbe:	6078      	str	r0, [r7, #4]
 8012dc0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012dc2:	683b      	ldr	r3, [r7, #0]
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d107      	bne.n	8012dd8 <etharp_input+0x20>
 8012dc8:	4b3f      	ldr	r3, [pc, #252]	; (8012ec8 <etharp_input+0x110>)
 8012dca:	f240 228a 	movw	r2, #650	; 0x28a
 8012dce:	493f      	ldr	r1, [pc, #252]	; (8012ecc <etharp_input+0x114>)
 8012dd0:	483f      	ldr	r0, [pc, #252]	; (8012ed0 <etharp_input+0x118>)
 8012dd2:	f005 f8df 	bl	8017f94 <iprintf>
 8012dd6:	e074      	b.n	8012ec2 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dde:	693b      	ldr	r3, [r7, #16]
 8012de0:	881b      	ldrh	r3, [r3, #0]
 8012de2:	b29b      	uxth	r3, r3
 8012de4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012de8:	d10c      	bne.n	8012e04 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012dea:	693b      	ldr	r3, [r7, #16]
 8012dec:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8012dee:	2b06      	cmp	r3, #6
 8012df0:	d108      	bne.n	8012e04 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012df2:	693b      	ldr	r3, [r7, #16]
 8012df4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8012df6:	2b04      	cmp	r3, #4
 8012df8:	d104      	bne.n	8012e04 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8012dfa:	693b      	ldr	r3, [r7, #16]
 8012dfc:	885b      	ldrh	r3, [r3, #2]
 8012dfe:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8012e00:	2b08      	cmp	r3, #8
 8012e02:	d003      	beq.n	8012e0c <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8012e04:	6878      	ldr	r0, [r7, #4]
 8012e06:	f7f6 fce9 	bl	80097dc <pbuf_free>
    return;
 8012e0a:	e05a      	b.n	8012ec2 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8012e0c:	693b      	ldr	r3, [r7, #16]
 8012e0e:	330e      	adds	r3, #14
 8012e10:	681b      	ldr	r3, [r3, #0]
 8012e12:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012e14:	693b      	ldr	r3, [r7, #16]
 8012e16:	3318      	adds	r3, #24
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	3304      	adds	r3, #4
 8012e20:	681b      	ldr	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d102      	bne.n	8012e2c <etharp_input+0x74>
    for_us = 0;
 8012e26:	2300      	movs	r3, #0
 8012e28:	75fb      	strb	r3, [r7, #23]
 8012e2a:	e009      	b.n	8012e40 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8012e2c:	68ba      	ldr	r2, [r7, #8]
 8012e2e:	683b      	ldr	r3, [r7, #0]
 8012e30:	3304      	adds	r3, #4
 8012e32:	681b      	ldr	r3, [r3, #0]
 8012e34:	429a      	cmp	r2, r3
 8012e36:	bf0c      	ite	eq
 8012e38:	2301      	moveq	r3, #1
 8012e3a:	2300      	movne	r3, #0
 8012e3c:	b2db      	uxtb	r3, r3
 8012e3e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012e40:	693b      	ldr	r3, [r7, #16]
 8012e42:	f103 0208 	add.w	r2, r3, #8
 8012e46:	7dfb      	ldrb	r3, [r7, #23]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d001      	beq.n	8012e50 <etharp_input+0x98>
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	e000      	b.n	8012e52 <etharp_input+0x9a>
 8012e50:	2302      	movs	r3, #2
 8012e52:	f107 010c 	add.w	r1, r7, #12
 8012e56:	6838      	ldr	r0, [r7, #0]
 8012e58:	f7ff fed8 	bl	8012c0c <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012e5c:	693b      	ldr	r3, [r7, #16]
 8012e5e:	88db      	ldrh	r3, [r3, #6]
 8012e60:	b29b      	uxth	r3, r3
 8012e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012e66:	d003      	beq.n	8012e70 <etharp_input+0xb8>
 8012e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012e6c:	d01e      	beq.n	8012eac <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8012e6e:	e025      	b.n	8012ebc <etharp_input+0x104>
      if (for_us) {
 8012e70:	7dfb      	ldrb	r3, [r7, #23]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d021      	beq.n	8012eba <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012e76:	683b      	ldr	r3, [r7, #0]
 8012e78:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8012e7c:	693b      	ldr	r3, [r7, #16]
 8012e7e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012e8c:	693a      	ldr	r2, [r7, #16]
 8012e8e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012e90:	2102      	movs	r1, #2
 8012e92:	9103      	str	r1, [sp, #12]
 8012e94:	f107 010c 	add.w	r1, r7, #12
 8012e98:	9102      	str	r1, [sp, #8]
 8012e9a:	9201      	str	r2, [sp, #4]
 8012e9c:	9300      	str	r3, [sp, #0]
 8012e9e:	462b      	mov	r3, r5
 8012ea0:	4622      	mov	r2, r4
 8012ea2:	4601      	mov	r1, r0
 8012ea4:	6838      	ldr	r0, [r7, #0]
 8012ea6:	f000 faef 	bl	8013488 <etharp_raw>
      break;
 8012eaa:	e006      	b.n	8012eba <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8012eac:	f107 030c 	add.w	r3, r7, #12
 8012eb0:	4619      	mov	r1, r3
 8012eb2:	6838      	ldr	r0, [r7, #0]
 8012eb4:	f7fe f9fe 	bl	80112b4 <dhcp_arp_reply>
      break;
 8012eb8:	e000      	b.n	8012ebc <etharp_input+0x104>
      break;
 8012eba:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7f6 fc8d 	bl	80097dc <pbuf_free>
}
 8012ec2:	3718      	adds	r7, #24
 8012ec4:	46bd      	mov	sp, r7
 8012ec6:	bdb0      	pop	{r4, r5, r7, pc}
 8012ec8:	0801c0a8 	.word	0x0801c0a8
 8012ecc:	0801c1f8 	.word	0x0801c1f8
 8012ed0:	0801c120 	.word	0x0801c120

08012ed4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012ed4:	b580      	push	{r7, lr}
 8012ed6:	b086      	sub	sp, #24
 8012ed8:	af02      	add	r7, sp, #8
 8012eda:	60f8      	str	r0, [r7, #12]
 8012edc:	60b9      	str	r1, [r7, #8]
 8012ede:	4613      	mov	r3, r2
 8012ee0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8012ee2:	79fa      	ldrb	r2, [r7, #7]
 8012ee4:	4944      	ldr	r1, [pc, #272]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	005b      	lsls	r3, r3, #1
 8012eea:	4413      	add	r3, r2
 8012eec:	00db      	lsls	r3, r3, #3
 8012eee:	440b      	add	r3, r1
 8012ef0:	3314      	adds	r3, #20
 8012ef2:	781b      	ldrb	r3, [r3, #0]
 8012ef4:	2b01      	cmp	r3, #1
 8012ef6:	d806      	bhi.n	8012f06 <etharp_output_to_arp_index+0x32>
 8012ef8:	4b40      	ldr	r3, [pc, #256]	; (8012ffc <etharp_output_to_arp_index+0x128>)
 8012efa:	f240 22ef 	movw	r2, #751	; 0x2ef
 8012efe:	4940      	ldr	r1, [pc, #256]	; (8013000 <etharp_output_to_arp_index+0x12c>)
 8012f00:	4840      	ldr	r0, [pc, #256]	; (8013004 <etharp_output_to_arp_index+0x130>)
 8012f02:	f005 f847 	bl	8017f94 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8012f06:	79fa      	ldrb	r2, [r7, #7]
 8012f08:	493b      	ldr	r1, [pc, #236]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f0a:	4613      	mov	r3, r2
 8012f0c:	005b      	lsls	r3, r3, #1
 8012f0e:	4413      	add	r3, r2
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	440b      	add	r3, r1
 8012f14:	3314      	adds	r3, #20
 8012f16:	781b      	ldrb	r3, [r3, #0]
 8012f18:	2b02      	cmp	r3, #2
 8012f1a:	d153      	bne.n	8012fc4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012f1c:	79fa      	ldrb	r2, [r7, #7]
 8012f1e:	4936      	ldr	r1, [pc, #216]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f20:	4613      	mov	r3, r2
 8012f22:	005b      	lsls	r3, r3, #1
 8012f24:	4413      	add	r3, r2
 8012f26:	00db      	lsls	r3, r3, #3
 8012f28:	440b      	add	r3, r1
 8012f2a:	3312      	adds	r3, #18
 8012f2c:	881b      	ldrh	r3, [r3, #0]
 8012f2e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8012f32:	d919      	bls.n	8012f68 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8012f34:	79fa      	ldrb	r2, [r7, #7]
 8012f36:	4613      	mov	r3, r2
 8012f38:	005b      	lsls	r3, r3, #1
 8012f3a:	4413      	add	r3, r2
 8012f3c:	00db      	lsls	r3, r3, #3
 8012f3e:	4a2e      	ldr	r2, [pc, #184]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f40:	4413      	add	r3, r2
 8012f42:	3304      	adds	r3, #4
 8012f44:	4619      	mov	r1, r3
 8012f46:	68f8      	ldr	r0, [r7, #12]
 8012f48:	f000 fb4c 	bl	80135e4 <etharp_request>
 8012f4c:	4603      	mov	r3, r0
 8012f4e:	2b00      	cmp	r3, #0
 8012f50:	d138      	bne.n	8012fc4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012f52:	79fa      	ldrb	r2, [r7, #7]
 8012f54:	4928      	ldr	r1, [pc, #160]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f56:	4613      	mov	r3, r2
 8012f58:	005b      	lsls	r3, r3, #1
 8012f5a:	4413      	add	r3, r2
 8012f5c:	00db      	lsls	r3, r3, #3
 8012f5e:	440b      	add	r3, r1
 8012f60:	3314      	adds	r3, #20
 8012f62:	2203      	movs	r2, #3
 8012f64:	701a      	strb	r2, [r3, #0]
 8012f66:	e02d      	b.n	8012fc4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012f68:	79fa      	ldrb	r2, [r7, #7]
 8012f6a:	4923      	ldr	r1, [pc, #140]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	005b      	lsls	r3, r3, #1
 8012f70:	4413      	add	r3, r2
 8012f72:	00db      	lsls	r3, r3, #3
 8012f74:	440b      	add	r3, r1
 8012f76:	3312      	adds	r3, #18
 8012f78:	881b      	ldrh	r3, [r3, #0]
 8012f7a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012f7e:	d321      	bcc.n	8012fc4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012f80:	79fa      	ldrb	r2, [r7, #7]
 8012f82:	4613      	mov	r3, r2
 8012f84:	005b      	lsls	r3, r3, #1
 8012f86:	4413      	add	r3, r2
 8012f88:	00db      	lsls	r3, r3, #3
 8012f8a:	4a1b      	ldr	r2, [pc, #108]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f8c:	4413      	add	r3, r2
 8012f8e:	1d19      	adds	r1, r3, #4
 8012f90:	79fa      	ldrb	r2, [r7, #7]
 8012f92:	4613      	mov	r3, r2
 8012f94:	005b      	lsls	r3, r3, #1
 8012f96:	4413      	add	r3, r2
 8012f98:	00db      	lsls	r3, r3, #3
 8012f9a:	3308      	adds	r3, #8
 8012f9c:	4a16      	ldr	r2, [pc, #88]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012f9e:	4413      	add	r3, r2
 8012fa0:	3304      	adds	r3, #4
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	68f8      	ldr	r0, [r7, #12]
 8012fa6:	f000 fafb 	bl	80135a0 <etharp_request_dst>
 8012faa:	4603      	mov	r3, r0
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d109      	bne.n	8012fc4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012fb0:	79fa      	ldrb	r2, [r7, #7]
 8012fb2:	4911      	ldr	r1, [pc, #68]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012fb4:	4613      	mov	r3, r2
 8012fb6:	005b      	lsls	r3, r3, #1
 8012fb8:	4413      	add	r3, r2
 8012fba:	00db      	lsls	r3, r3, #3
 8012fbc:	440b      	add	r3, r1
 8012fbe:	3314      	adds	r3, #20
 8012fc0:	2203      	movs	r2, #3
 8012fc2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8012fca:	79fa      	ldrb	r2, [r7, #7]
 8012fcc:	4613      	mov	r3, r2
 8012fce:	005b      	lsls	r3, r3, #1
 8012fd0:	4413      	add	r3, r2
 8012fd2:	00db      	lsls	r3, r3, #3
 8012fd4:	3308      	adds	r3, #8
 8012fd6:	4a08      	ldr	r2, [pc, #32]	; (8012ff8 <etharp_output_to_arp_index+0x124>)
 8012fd8:	4413      	add	r3, r2
 8012fda:	1d1a      	adds	r2, r3, #4
 8012fdc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012fe0:	9300      	str	r3, [sp, #0]
 8012fe2:	4613      	mov	r3, r2
 8012fe4:	460a      	mov	r2, r1
 8012fe6:	68b9      	ldr	r1, [r7, #8]
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f001 ff83 	bl	8014ef4 <ethernet_output>
 8012fee:	4603      	mov	r3, r0
}
 8012ff0:	4618      	mov	r0, r3
 8012ff2:	3710      	adds	r7, #16
 8012ff4:	46bd      	mov	sp, r7
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	200083f8 	.word	0x200083f8
 8012ffc:	0801c0a8 	.word	0x0801c0a8
 8013000:	0801c218 	.word	0x0801c218
 8013004:	0801c120 	.word	0x0801c120

08013008 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8013008:	b580      	push	{r7, lr}
 801300a:	b08a      	sub	sp, #40	; 0x28
 801300c:	af02      	add	r7, sp, #8
 801300e:	60f8      	str	r0, [r7, #12]
 8013010:	60b9      	str	r1, [r7, #8]
 8013012:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2b00      	cmp	r3, #0
 801301c:	d106      	bne.n	801302c <etharp_output+0x24>
 801301e:	4b73      	ldr	r3, [pc, #460]	; (80131ec <etharp_output+0x1e4>)
 8013020:	f240 321e 	movw	r2, #798	; 0x31e
 8013024:	4972      	ldr	r1, [pc, #456]	; (80131f0 <etharp_output+0x1e8>)
 8013026:	4873      	ldr	r0, [pc, #460]	; (80131f4 <etharp_output+0x1ec>)
 8013028:	f004 ffb4 	bl	8017f94 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d106      	bne.n	8013040 <etharp_output+0x38>
 8013032:	4b6e      	ldr	r3, [pc, #440]	; (80131ec <etharp_output+0x1e4>)
 8013034:	f240 321f 	movw	r2, #799	; 0x31f
 8013038:	496f      	ldr	r1, [pc, #444]	; (80131f8 <etharp_output+0x1f0>)
 801303a:	486e      	ldr	r0, [pc, #440]	; (80131f4 <etharp_output+0x1ec>)
 801303c:	f004 ffaa 	bl	8017f94 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d106      	bne.n	8013054 <etharp_output+0x4c>
 8013046:	4b69      	ldr	r3, [pc, #420]	; (80131ec <etharp_output+0x1e4>)
 8013048:	f44f 7248 	mov.w	r2, #800	; 0x320
 801304c:	496b      	ldr	r1, [pc, #428]	; (80131fc <etharp_output+0x1f4>)
 801304e:	4869      	ldr	r0, [pc, #420]	; (80131f4 <etharp_output+0x1ec>)
 8013050:	f004 ffa0 	bl	8017f94 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	68f9      	ldr	r1, [r7, #12]
 801305a:	4618      	mov	r0, r3
 801305c:	f000 ff14 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013060:	4603      	mov	r3, r0
 8013062:	2b00      	cmp	r3, #0
 8013064:	d002      	beq.n	801306c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8013066:	4b66      	ldr	r3, [pc, #408]	; (8013200 <etharp_output+0x1f8>)
 8013068:	61fb      	str	r3, [r7, #28]
 801306a:	e0af      	b.n	80131cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	681b      	ldr	r3, [r3, #0]
 8013070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013074:	2be0      	cmp	r3, #224	; 0xe0
 8013076:	d118      	bne.n	80130aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8013078:	2301      	movs	r3, #1
 801307a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801307c:	2300      	movs	r3, #0
 801307e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8013080:	235e      	movs	r3, #94	; 0x5e
 8013082:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	3301      	adds	r3, #1
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801308e:	b2db      	uxtb	r3, r3
 8013090:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	3302      	adds	r3, #2
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	3303      	adds	r3, #3
 801309e:	781b      	ldrb	r3, [r3, #0]
 80130a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80130a2:	f107 0310 	add.w	r3, r7, #16
 80130a6:	61fb      	str	r3, [r7, #28]
 80130a8:	e090      	b.n	80131cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	681a      	ldr	r2, [r3, #0]
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	3304      	adds	r3, #4
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	405a      	eors	r2, r3
 80130b6:	68fb      	ldr	r3, [r7, #12]
 80130b8:	3308      	adds	r3, #8
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	4013      	ands	r3, r2
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d012      	beq.n	80130e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80130c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80130cc:	4293      	cmp	r3, r2
 80130ce:	d00b      	beq.n	80130e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	330c      	adds	r3, #12
 80130d4:	681b      	ldr	r3, [r3, #0]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d003      	beq.n	80130e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80130da:	68fb      	ldr	r3, [r7, #12]
 80130dc:	330c      	adds	r3, #12
 80130de:	61bb      	str	r3, [r7, #24]
 80130e0:	e002      	b.n	80130e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80130e2:	f06f 0303 	mvn.w	r3, #3
 80130e6:	e07d      	b.n	80131e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80130e8:	4b46      	ldr	r3, [pc, #280]	; (8013204 <etharp_output+0x1fc>)
 80130ea:	781b      	ldrb	r3, [r3, #0]
 80130ec:	4619      	mov	r1, r3
 80130ee:	4a46      	ldr	r2, [pc, #280]	; (8013208 <etharp_output+0x200>)
 80130f0:	460b      	mov	r3, r1
 80130f2:	005b      	lsls	r3, r3, #1
 80130f4:	440b      	add	r3, r1
 80130f6:	00db      	lsls	r3, r3, #3
 80130f8:	4413      	add	r3, r2
 80130fa:	3314      	adds	r3, #20
 80130fc:	781b      	ldrb	r3, [r3, #0]
 80130fe:	2b01      	cmp	r3, #1
 8013100:	d925      	bls.n	801314e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013102:	4b40      	ldr	r3, [pc, #256]	; (8013204 <etharp_output+0x1fc>)
 8013104:	781b      	ldrb	r3, [r3, #0]
 8013106:	4619      	mov	r1, r3
 8013108:	4a3f      	ldr	r2, [pc, #252]	; (8013208 <etharp_output+0x200>)
 801310a:	460b      	mov	r3, r1
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	440b      	add	r3, r1
 8013110:	00db      	lsls	r3, r3, #3
 8013112:	4413      	add	r3, r2
 8013114:	3308      	adds	r3, #8
 8013116:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	429a      	cmp	r2, r3
 801311c:	d117      	bne.n	801314e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801311e:	69bb      	ldr	r3, [r7, #24]
 8013120:	681a      	ldr	r2, [r3, #0]
 8013122:	4b38      	ldr	r3, [pc, #224]	; (8013204 <etharp_output+0x1fc>)
 8013124:	781b      	ldrb	r3, [r3, #0]
 8013126:	4618      	mov	r0, r3
 8013128:	4937      	ldr	r1, [pc, #220]	; (8013208 <etharp_output+0x200>)
 801312a:	4603      	mov	r3, r0
 801312c:	005b      	lsls	r3, r3, #1
 801312e:	4403      	add	r3, r0
 8013130:	00db      	lsls	r3, r3, #3
 8013132:	440b      	add	r3, r1
 8013134:	3304      	adds	r3, #4
 8013136:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8013138:	429a      	cmp	r2, r3
 801313a:	d108      	bne.n	801314e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801313c:	4b31      	ldr	r3, [pc, #196]	; (8013204 <etharp_output+0x1fc>)
 801313e:	781b      	ldrb	r3, [r3, #0]
 8013140:	461a      	mov	r2, r3
 8013142:	68b9      	ldr	r1, [r7, #8]
 8013144:	68f8      	ldr	r0, [r7, #12]
 8013146:	f7ff fec5 	bl	8012ed4 <etharp_output_to_arp_index>
 801314a:	4603      	mov	r3, r0
 801314c:	e04a      	b.n	80131e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801314e:	2300      	movs	r3, #0
 8013150:	75fb      	strb	r3, [r7, #23]
 8013152:	e031      	b.n	80131b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8013154:	7dfa      	ldrb	r2, [r7, #23]
 8013156:	492c      	ldr	r1, [pc, #176]	; (8013208 <etharp_output+0x200>)
 8013158:	4613      	mov	r3, r2
 801315a:	005b      	lsls	r3, r3, #1
 801315c:	4413      	add	r3, r2
 801315e:	00db      	lsls	r3, r3, #3
 8013160:	440b      	add	r3, r1
 8013162:	3314      	adds	r3, #20
 8013164:	781b      	ldrb	r3, [r3, #0]
 8013166:	2b01      	cmp	r3, #1
 8013168:	d923      	bls.n	80131b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801316a:	7dfa      	ldrb	r2, [r7, #23]
 801316c:	4926      	ldr	r1, [pc, #152]	; (8013208 <etharp_output+0x200>)
 801316e:	4613      	mov	r3, r2
 8013170:	005b      	lsls	r3, r3, #1
 8013172:	4413      	add	r3, r2
 8013174:	00db      	lsls	r3, r3, #3
 8013176:	440b      	add	r3, r1
 8013178:	3308      	adds	r3, #8
 801317a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801317c:	68fa      	ldr	r2, [r7, #12]
 801317e:	429a      	cmp	r2, r3
 8013180:	d117      	bne.n	80131b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8013182:	69bb      	ldr	r3, [r7, #24]
 8013184:	6819      	ldr	r1, [r3, #0]
 8013186:	7dfa      	ldrb	r2, [r7, #23]
 8013188:	481f      	ldr	r0, [pc, #124]	; (8013208 <etharp_output+0x200>)
 801318a:	4613      	mov	r3, r2
 801318c:	005b      	lsls	r3, r3, #1
 801318e:	4413      	add	r3, r2
 8013190:	00db      	lsls	r3, r3, #3
 8013192:	4403      	add	r3, r0
 8013194:	3304      	adds	r3, #4
 8013196:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8013198:	4299      	cmp	r1, r3
 801319a:	d10a      	bne.n	80131b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801319c:	4a19      	ldr	r2, [pc, #100]	; (8013204 <etharp_output+0x1fc>)
 801319e:	7dfb      	ldrb	r3, [r7, #23]
 80131a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80131a2:	7dfb      	ldrb	r3, [r7, #23]
 80131a4:	461a      	mov	r2, r3
 80131a6:	68b9      	ldr	r1, [r7, #8]
 80131a8:	68f8      	ldr	r0, [r7, #12]
 80131aa:	f7ff fe93 	bl	8012ed4 <etharp_output_to_arp_index>
 80131ae:	4603      	mov	r3, r0
 80131b0:	e018      	b.n	80131e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80131b2:	7dfb      	ldrb	r3, [r7, #23]
 80131b4:	3301      	adds	r3, #1
 80131b6:	75fb      	strb	r3, [r7, #23]
 80131b8:	7dfb      	ldrb	r3, [r7, #23]
 80131ba:	2b09      	cmp	r3, #9
 80131bc:	d9ca      	bls.n	8013154 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80131be:	68ba      	ldr	r2, [r7, #8]
 80131c0:	69b9      	ldr	r1, [r7, #24]
 80131c2:	68f8      	ldr	r0, [r7, #12]
 80131c4:	f000 f822 	bl	801320c <etharp_query>
 80131c8:	4603      	mov	r3, r0
 80131ca:	e00b      	b.n	80131e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80131cc:	68fb      	ldr	r3, [r7, #12]
 80131ce:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80131d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80131d6:	9300      	str	r3, [sp, #0]
 80131d8:	69fb      	ldr	r3, [r7, #28]
 80131da:	68b9      	ldr	r1, [r7, #8]
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f001 fe89 	bl	8014ef4 <ethernet_output>
 80131e2:	4603      	mov	r3, r0
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3720      	adds	r7, #32
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	0801c0a8 	.word	0x0801c0a8
 80131f0:	0801c1f8 	.word	0x0801c1f8
 80131f4:	0801c120 	.word	0x0801c120
 80131f8:	0801c248 	.word	0x0801c248
 80131fc:	0801c1e8 	.word	0x0801c1e8
 8013200:	0801cb10 	.word	0x0801cb10
 8013204:	200084e8 	.word	0x200084e8
 8013208:	200083f8 	.word	0x200083f8

0801320c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b08c      	sub	sp, #48	; 0x30
 8013210:	af02      	add	r7, sp, #8
 8013212:	60f8      	str	r0, [r7, #12]
 8013214:	60b9      	str	r1, [r7, #8]
 8013216:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	332a      	adds	r3, #42	; 0x2a
 801321c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801321e:	23ff      	movs	r3, #255	; 0xff
 8013220:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8013224:	2300      	movs	r3, #0
 8013226:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013228:	68bb      	ldr	r3, [r7, #8]
 801322a:	681b      	ldr	r3, [r3, #0]
 801322c:	68f9      	ldr	r1, [r7, #12]
 801322e:	4618      	mov	r0, r3
 8013230:	f000 fe2a 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013234:	4603      	mov	r3, r0
 8013236:	2b00      	cmp	r3, #0
 8013238:	d10c      	bne.n	8013254 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801323a:	68bb      	ldr	r3, [r7, #8]
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8013242:	2be0      	cmp	r3, #224	; 0xe0
 8013244:	d006      	beq.n	8013254 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8013246:	68bb      	ldr	r3, [r7, #8]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d003      	beq.n	8013254 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801324c:	68bb      	ldr	r3, [r7, #8]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d102      	bne.n	801325a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013254:	f06f 030f 	mvn.w	r3, #15
 8013258:	e102      	b.n	8013460 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801325a:	68fa      	ldr	r2, [r7, #12]
 801325c:	2101      	movs	r1, #1
 801325e:	68b8      	ldr	r0, [r7, #8]
 8013260:	f7ff fb5c 	bl	801291c <etharp_find_entry>
 8013264:	4603      	mov	r3, r0
 8013266:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8013268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801326c:	2b00      	cmp	r3, #0
 801326e:	da02      	bge.n	8013276 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8013270:	8a7b      	ldrh	r3, [r7, #18]
 8013272:	b25b      	sxtb	r3, r3
 8013274:	e0f4      	b.n	8013460 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8013276:	8a7b      	ldrh	r3, [r7, #18]
 8013278:	2b7e      	cmp	r3, #126	; 0x7e
 801327a:	d906      	bls.n	801328a <etharp_query+0x7e>
 801327c:	4b7a      	ldr	r3, [pc, #488]	; (8013468 <etharp_query+0x25c>)
 801327e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8013282:	497a      	ldr	r1, [pc, #488]	; (801346c <etharp_query+0x260>)
 8013284:	487a      	ldr	r0, [pc, #488]	; (8013470 <etharp_query+0x264>)
 8013286:	f004 fe85 	bl	8017f94 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801328a:	8a7b      	ldrh	r3, [r7, #18]
 801328c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801328e:	7c7a      	ldrb	r2, [r7, #17]
 8013290:	4978      	ldr	r1, [pc, #480]	; (8013474 <etharp_query+0x268>)
 8013292:	4613      	mov	r3, r2
 8013294:	005b      	lsls	r3, r3, #1
 8013296:	4413      	add	r3, r2
 8013298:	00db      	lsls	r3, r3, #3
 801329a:	440b      	add	r3, r1
 801329c:	3314      	adds	r3, #20
 801329e:	781b      	ldrb	r3, [r3, #0]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d115      	bne.n	80132d0 <etharp_query+0xc4>
    is_new_entry = 1;
 80132a4:	2301      	movs	r3, #1
 80132a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80132a8:	7c7a      	ldrb	r2, [r7, #17]
 80132aa:	4972      	ldr	r1, [pc, #456]	; (8013474 <etharp_query+0x268>)
 80132ac:	4613      	mov	r3, r2
 80132ae:	005b      	lsls	r3, r3, #1
 80132b0:	4413      	add	r3, r2
 80132b2:	00db      	lsls	r3, r3, #3
 80132b4:	440b      	add	r3, r1
 80132b6:	3314      	adds	r3, #20
 80132b8:	2201      	movs	r2, #1
 80132ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80132bc:	7c7a      	ldrb	r2, [r7, #17]
 80132be:	496d      	ldr	r1, [pc, #436]	; (8013474 <etharp_query+0x268>)
 80132c0:	4613      	mov	r3, r2
 80132c2:	005b      	lsls	r3, r3, #1
 80132c4:	4413      	add	r3, r2
 80132c6:	00db      	lsls	r3, r3, #3
 80132c8:	440b      	add	r3, r1
 80132ca:	3308      	adds	r3, #8
 80132cc:	68fa      	ldr	r2, [r7, #12]
 80132ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80132d0:	7c7a      	ldrb	r2, [r7, #17]
 80132d2:	4968      	ldr	r1, [pc, #416]	; (8013474 <etharp_query+0x268>)
 80132d4:	4613      	mov	r3, r2
 80132d6:	005b      	lsls	r3, r3, #1
 80132d8:	4413      	add	r3, r2
 80132da:	00db      	lsls	r3, r3, #3
 80132dc:	440b      	add	r3, r1
 80132de:	3314      	adds	r3, #20
 80132e0:	781b      	ldrb	r3, [r3, #0]
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d011      	beq.n	801330a <etharp_query+0xfe>
 80132e6:	7c7a      	ldrb	r2, [r7, #17]
 80132e8:	4962      	ldr	r1, [pc, #392]	; (8013474 <etharp_query+0x268>)
 80132ea:	4613      	mov	r3, r2
 80132ec:	005b      	lsls	r3, r3, #1
 80132ee:	4413      	add	r3, r2
 80132f0:	00db      	lsls	r3, r3, #3
 80132f2:	440b      	add	r3, r1
 80132f4:	3314      	adds	r3, #20
 80132f6:	781b      	ldrb	r3, [r3, #0]
 80132f8:	2b01      	cmp	r3, #1
 80132fa:	d806      	bhi.n	801330a <etharp_query+0xfe>
 80132fc:	4b5a      	ldr	r3, [pc, #360]	; (8013468 <etharp_query+0x25c>)
 80132fe:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013302:	495d      	ldr	r1, [pc, #372]	; (8013478 <etharp_query+0x26c>)
 8013304:	485a      	ldr	r0, [pc, #360]	; (8013470 <etharp_query+0x264>)
 8013306:	f004 fe45 	bl	8017f94 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801330a:	6a3b      	ldr	r3, [r7, #32]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d102      	bne.n	8013316 <etharp_query+0x10a>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d10c      	bne.n	8013330 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8013316:	68b9      	ldr	r1, [r7, #8]
 8013318:	68f8      	ldr	r0, [r7, #12]
 801331a:	f000 f963 	bl	80135e4 <etharp_request>
 801331e:	4603      	mov	r3, r0
 8013320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	2b00      	cmp	r3, #0
 8013328:	d102      	bne.n	8013330 <etharp_query+0x124>
      return result;
 801332a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801332e:	e097      	b.n	8013460 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d106      	bne.n	8013344 <etharp_query+0x138>
 8013336:	4b4c      	ldr	r3, [pc, #304]	; (8013468 <etharp_query+0x25c>)
 8013338:	f240 32e1 	movw	r2, #993	; 0x3e1
 801333c:	494f      	ldr	r1, [pc, #316]	; (801347c <etharp_query+0x270>)
 801333e:	484c      	ldr	r0, [pc, #304]	; (8013470 <etharp_query+0x264>)
 8013340:	f004 fe28 	bl	8017f94 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8013344:	7c7a      	ldrb	r2, [r7, #17]
 8013346:	494b      	ldr	r1, [pc, #300]	; (8013474 <etharp_query+0x268>)
 8013348:	4613      	mov	r3, r2
 801334a:	005b      	lsls	r3, r3, #1
 801334c:	4413      	add	r3, r2
 801334e:	00db      	lsls	r3, r3, #3
 8013350:	440b      	add	r3, r1
 8013352:	3314      	adds	r3, #20
 8013354:	781b      	ldrb	r3, [r3, #0]
 8013356:	2b01      	cmp	r3, #1
 8013358:	d918      	bls.n	801338c <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801335a:	4a49      	ldr	r2, [pc, #292]	; (8013480 <etharp_query+0x274>)
 801335c:	7c7b      	ldrb	r3, [r7, #17]
 801335e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8013360:	7c7a      	ldrb	r2, [r7, #17]
 8013362:	4613      	mov	r3, r2
 8013364:	005b      	lsls	r3, r3, #1
 8013366:	4413      	add	r3, r2
 8013368:	00db      	lsls	r3, r3, #3
 801336a:	3308      	adds	r3, #8
 801336c:	4a41      	ldr	r2, [pc, #260]	; (8013474 <etharp_query+0x268>)
 801336e:	4413      	add	r3, r2
 8013370:	1d1a      	adds	r2, r3, #4
 8013372:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013376:	9300      	str	r3, [sp, #0]
 8013378:	4613      	mov	r3, r2
 801337a:	697a      	ldr	r2, [r7, #20]
 801337c:	6879      	ldr	r1, [r7, #4]
 801337e:	68f8      	ldr	r0, [r7, #12]
 8013380:	f001 fdb8 	bl	8014ef4 <ethernet_output>
 8013384:	4603      	mov	r3, r0
 8013386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801338a:	e067      	b.n	801345c <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801338c:	7c7a      	ldrb	r2, [r7, #17]
 801338e:	4939      	ldr	r1, [pc, #228]	; (8013474 <etharp_query+0x268>)
 8013390:	4613      	mov	r3, r2
 8013392:	005b      	lsls	r3, r3, #1
 8013394:	4413      	add	r3, r2
 8013396:	00db      	lsls	r3, r3, #3
 8013398:	440b      	add	r3, r1
 801339a:	3314      	adds	r3, #20
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d15c      	bne.n	801345c <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80133a2:	2300      	movs	r3, #0
 80133a4:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133aa:	e01c      	b.n	80133e6 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	895a      	ldrh	r2, [r3, #10]
 80133b0:	69fb      	ldr	r3, [r7, #28]
 80133b2:	891b      	ldrh	r3, [r3, #8]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d10a      	bne.n	80133ce <etharp_query+0x1c2>
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	681b      	ldr	r3, [r3, #0]
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d006      	beq.n	80133ce <etharp_query+0x1c2>
 80133c0:	4b29      	ldr	r3, [pc, #164]	; (8013468 <etharp_query+0x25c>)
 80133c2:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80133c6:	492f      	ldr	r1, [pc, #188]	; (8013484 <etharp_query+0x278>)
 80133c8:	4829      	ldr	r0, [pc, #164]	; (8013470 <etharp_query+0x264>)
 80133ca:	f004 fde3 	bl	8017f94 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80133ce:	69fb      	ldr	r3, [r7, #28]
 80133d0:	7b1b      	ldrb	r3, [r3, #12]
 80133d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d002      	beq.n	80133e0 <etharp_query+0x1d4>
        copy_needed = 1;
 80133da:	2301      	movs	r3, #1
 80133dc:	61bb      	str	r3, [r7, #24]
        break;
 80133de:	e005      	b.n	80133ec <etharp_query+0x1e0>
      }
      p = p->next;
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	681b      	ldr	r3, [r3, #0]
 80133e4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d1df      	bne.n	80133ac <etharp_query+0x1a0>
    }
    if (copy_needed) {
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d007      	beq.n	8013402 <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80133f2:	687a      	ldr	r2, [r7, #4]
 80133f4:	f44f 7120 	mov.w	r1, #640	; 0x280
 80133f8:	200e      	movs	r0, #14
 80133fa:	f7f6 fc67 	bl	8009ccc <pbuf_clone>
 80133fe:	61f8      	str	r0, [r7, #28]
 8013400:	e004      	b.n	801340c <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8013406:	69f8      	ldr	r0, [r7, #28]
 8013408:	f7f6 fa8e 	bl	8009928 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801340c:	69fb      	ldr	r3, [r7, #28]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d021      	beq.n	8013456 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8013412:	7c7a      	ldrb	r2, [r7, #17]
 8013414:	4917      	ldr	r1, [pc, #92]	; (8013474 <etharp_query+0x268>)
 8013416:	4613      	mov	r3, r2
 8013418:	005b      	lsls	r3, r3, #1
 801341a:	4413      	add	r3, r2
 801341c:	00db      	lsls	r3, r3, #3
 801341e:	440b      	add	r3, r1
 8013420:	681b      	ldr	r3, [r3, #0]
 8013422:	2b00      	cmp	r3, #0
 8013424:	d00a      	beq.n	801343c <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8013426:	7c7a      	ldrb	r2, [r7, #17]
 8013428:	4912      	ldr	r1, [pc, #72]	; (8013474 <etharp_query+0x268>)
 801342a:	4613      	mov	r3, r2
 801342c:	005b      	lsls	r3, r3, #1
 801342e:	4413      	add	r3, r2
 8013430:	00db      	lsls	r3, r3, #3
 8013432:	440b      	add	r3, r1
 8013434:	681b      	ldr	r3, [r3, #0]
 8013436:	4618      	mov	r0, r3
 8013438:	f7f6 f9d0 	bl	80097dc <pbuf_free>
      }
      arp_table[i].q = p;
 801343c:	7c7a      	ldrb	r2, [r7, #17]
 801343e:	490d      	ldr	r1, [pc, #52]	; (8013474 <etharp_query+0x268>)
 8013440:	4613      	mov	r3, r2
 8013442:	005b      	lsls	r3, r3, #1
 8013444:	4413      	add	r3, r2
 8013446:	00db      	lsls	r3, r3, #3
 8013448:	440b      	add	r3, r1
 801344a:	69fa      	ldr	r2, [r7, #28]
 801344c:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801344e:	2300      	movs	r3, #0
 8013450:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013454:	e002      	b.n	801345c <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8013456:	23ff      	movs	r3, #255	; 0xff
 8013458:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801345c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013460:	4618      	mov	r0, r3
 8013462:	3728      	adds	r7, #40	; 0x28
 8013464:	46bd      	mov	sp, r7
 8013466:	bd80      	pop	{r7, pc}
 8013468:	0801c0a8 	.word	0x0801c0a8
 801346c:	0801c254 	.word	0x0801c254
 8013470:	0801c120 	.word	0x0801c120
 8013474:	200083f8 	.word	0x200083f8
 8013478:	0801c264 	.word	0x0801c264
 801347c:	0801c248 	.word	0x0801c248
 8013480:	200084e8 	.word	0x200084e8
 8013484:	0801c28c 	.word	0x0801c28c

08013488 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b08a      	sub	sp, #40	; 0x28
 801348c:	af02      	add	r7, sp, #8
 801348e:	60f8      	str	r0, [r7, #12]
 8013490:	60b9      	str	r1, [r7, #8]
 8013492:	607a      	str	r2, [r7, #4]
 8013494:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8013496:	2300      	movs	r3, #0
 8013498:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2b00      	cmp	r3, #0
 801349e:	d106      	bne.n	80134ae <etharp_raw+0x26>
 80134a0:	4b3a      	ldr	r3, [pc, #232]	; (801358c <etharp_raw+0x104>)
 80134a2:	f240 4257 	movw	r2, #1111	; 0x457
 80134a6:	493a      	ldr	r1, [pc, #232]	; (8013590 <etharp_raw+0x108>)
 80134a8:	483a      	ldr	r0, [pc, #232]	; (8013594 <etharp_raw+0x10c>)
 80134aa:	f004 fd73 	bl	8017f94 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80134ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134b2:	211c      	movs	r1, #28
 80134b4:	200e      	movs	r0, #14
 80134b6:	f7f5 feb1 	bl	800921c <pbuf_alloc>
 80134ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80134bc:	69bb      	ldr	r3, [r7, #24]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d102      	bne.n	80134c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80134c2:	f04f 33ff 	mov.w	r3, #4294967295
 80134c6:	e05d      	b.n	8013584 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80134c8:	69bb      	ldr	r3, [r7, #24]
 80134ca:	895b      	ldrh	r3, [r3, #10]
 80134cc:	2b1b      	cmp	r3, #27
 80134ce:	d806      	bhi.n	80134de <etharp_raw+0x56>
 80134d0:	4b2e      	ldr	r3, [pc, #184]	; (801358c <etharp_raw+0x104>)
 80134d2:	f240 4263 	movw	r2, #1123	; 0x463
 80134d6:	4930      	ldr	r1, [pc, #192]	; (8013598 <etharp_raw+0x110>)
 80134d8:	482e      	ldr	r0, [pc, #184]	; (8013594 <etharp_raw+0x10c>)
 80134da:	f004 fd5b 	bl	8017f94 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80134de:	69bb      	ldr	r3, [r7, #24]
 80134e0:	685b      	ldr	r3, [r3, #4]
 80134e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80134e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80134e6:	4618      	mov	r0, r3
 80134e8:	f7f4 fdc4 	bl	8008074 <lwip_htons>
 80134ec:	4603      	mov	r3, r0
 80134ee:	461a      	mov	r2, r3
 80134f0:	697b      	ldr	r3, [r7, #20]
 80134f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80134fa:	2b06      	cmp	r3, #6
 80134fc:	d006      	beq.n	801350c <etharp_raw+0x84>
 80134fe:	4b23      	ldr	r3, [pc, #140]	; (801358c <etharp_raw+0x104>)
 8013500:	f240 426a 	movw	r2, #1130	; 0x46a
 8013504:	4925      	ldr	r1, [pc, #148]	; (801359c <etharp_raw+0x114>)
 8013506:	4823      	ldr	r0, [pc, #140]	; (8013594 <etharp_raw+0x10c>)
 8013508:	f004 fd44 	bl	8017f94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	3308      	adds	r3, #8
 8013510:	2206      	movs	r2, #6
 8013512:	6839      	ldr	r1, [r7, #0]
 8013514:	4618      	mov	r0, r3
 8013516:	f004 fd2a 	bl	8017f6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	3312      	adds	r3, #18
 801351e:	2206      	movs	r2, #6
 8013520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013522:	4618      	mov	r0, r3
 8013524:	f004 fd23 	bl	8017f6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8013528:	697b      	ldr	r3, [r7, #20]
 801352a:	330e      	adds	r3, #14
 801352c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801352e:	6812      	ldr	r2, [r2, #0]
 8013530:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	3318      	adds	r3, #24
 8013536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013538:	6812      	ldr	r2, [r2, #0]
 801353a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801353c:	697b      	ldr	r3, [r7, #20]
 801353e:	2200      	movs	r2, #0
 8013540:	701a      	strb	r2, [r3, #0]
 8013542:	2200      	movs	r2, #0
 8013544:	f042 0201 	orr.w	r2, r2, #1
 8013548:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801354a:	697b      	ldr	r3, [r7, #20]
 801354c:	2200      	movs	r2, #0
 801354e:	f042 0208 	orr.w	r2, r2, #8
 8013552:	709a      	strb	r2, [r3, #2]
 8013554:	2200      	movs	r2, #0
 8013556:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8013558:	697b      	ldr	r3, [r7, #20]
 801355a:	2206      	movs	r2, #6
 801355c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801355e:	697b      	ldr	r3, [r7, #20]
 8013560:	2204      	movs	r2, #4
 8013562:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8013564:	f640 0306 	movw	r3, #2054	; 0x806
 8013568:	9300      	str	r3, [sp, #0]
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	68ba      	ldr	r2, [r7, #8]
 801356e:	69b9      	ldr	r1, [r7, #24]
 8013570:	68f8      	ldr	r0, [r7, #12]
 8013572:	f001 fcbf 	bl	8014ef4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8013576:	69b8      	ldr	r0, [r7, #24]
 8013578:	f7f6 f930 	bl	80097dc <pbuf_free>
  p = NULL;
 801357c:	2300      	movs	r3, #0
 801357e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8013580:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013584:	4618      	mov	r0, r3
 8013586:	3720      	adds	r7, #32
 8013588:	46bd      	mov	sp, r7
 801358a:	bd80      	pop	{r7, pc}
 801358c:	0801c0a8 	.word	0x0801c0a8
 8013590:	0801c1f8 	.word	0x0801c1f8
 8013594:	0801c120 	.word	0x0801c120
 8013598:	0801c2a8 	.word	0x0801c2a8
 801359c:	0801c2dc 	.word	0x0801c2dc

080135a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b088      	sub	sp, #32
 80135a4:	af04      	add	r7, sp, #16
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80135bc:	2201      	movs	r2, #1
 80135be:	9203      	str	r2, [sp, #12]
 80135c0:	68ba      	ldr	r2, [r7, #8]
 80135c2:	9202      	str	r2, [sp, #8]
 80135c4:	4a06      	ldr	r2, [pc, #24]	; (80135e0 <etharp_request_dst+0x40>)
 80135c6:	9201      	str	r2, [sp, #4]
 80135c8:	9300      	str	r3, [sp, #0]
 80135ca:	4603      	mov	r3, r0
 80135cc:	687a      	ldr	r2, [r7, #4]
 80135ce:	68f8      	ldr	r0, [r7, #12]
 80135d0:	f7ff ff5a 	bl	8013488 <etharp_raw>
 80135d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80135d6:	4618      	mov	r0, r3
 80135d8:	3710      	adds	r7, #16
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	0801cb18 	.word	0x0801cb18

080135e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80135e4:	b580      	push	{r7, lr}
 80135e6:	b082      	sub	sp, #8
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
 80135ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80135ee:	4a05      	ldr	r2, [pc, #20]	; (8013604 <etharp_request+0x20>)
 80135f0:	6839      	ldr	r1, [r7, #0]
 80135f2:	6878      	ldr	r0, [r7, #4]
 80135f4:	f7ff ffd4 	bl	80135a0 <etharp_request_dst>
 80135f8:	4603      	mov	r3, r0
}
 80135fa:	4618      	mov	r0, r3
 80135fc:	3708      	adds	r7, #8
 80135fe:	46bd      	mov	sp, r7
 8013600:	bd80      	pop	{r7, pc}
 8013602:	bf00      	nop
 8013604:	0801cb10 	.word	0x0801cb10

08013608 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b08e      	sub	sp, #56	; 0x38
 801360c:	af04      	add	r7, sp, #16
 801360e:	6078      	str	r0, [r7, #4]
 8013610:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8013612:	4b79      	ldr	r3, [pc, #484]	; (80137f8 <icmp_input+0x1f0>)
 8013614:	689b      	ldr	r3, [r3, #8]
 8013616:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8013618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801361a:	781b      	ldrb	r3, [r3, #0]
 801361c:	f003 030f 	and.w	r3, r3, #15
 8013620:	b2db      	uxtb	r3, r3
 8013622:	009b      	lsls	r3, r3, #2
 8013624:	b2db      	uxtb	r3, r3
 8013626:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8013628:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801362a:	2b13      	cmp	r3, #19
 801362c:	f240 80cd 	bls.w	80137ca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	895b      	ldrh	r3, [r3, #10]
 8013634:	2b03      	cmp	r3, #3
 8013636:	f240 80ca 	bls.w	80137ce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	685b      	ldr	r3, [r3, #4]
 801363e:	781b      	ldrb	r3, [r3, #0]
 8013640:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8013644:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8013648:	2b00      	cmp	r3, #0
 801364a:	f000 80b7 	beq.w	80137bc <icmp_input+0x1b4>
 801364e:	2b08      	cmp	r3, #8
 8013650:	f040 80b7 	bne.w	80137c2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8013654:	4b69      	ldr	r3, [pc, #420]	; (80137fc <icmp_input+0x1f4>)
 8013656:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013658:	4b67      	ldr	r3, [pc, #412]	; (80137f8 <icmp_input+0x1f0>)
 801365a:	695b      	ldr	r3, [r3, #20]
 801365c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013660:	2be0      	cmp	r3, #224	; 0xe0
 8013662:	f000 80bb 	beq.w	80137dc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8013666:	4b64      	ldr	r3, [pc, #400]	; (80137f8 <icmp_input+0x1f0>)
 8013668:	695a      	ldr	r2, [r3, #20]
 801366a:	4b63      	ldr	r3, [pc, #396]	; (80137f8 <icmp_input+0x1f0>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	4619      	mov	r1, r3
 8013670:	4610      	mov	r0, r2
 8013672:	f000 fc09 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013676:	4603      	mov	r3, r0
 8013678:	2b00      	cmp	r3, #0
 801367a:	f040 80b1 	bne.w	80137e0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801367e:	687b      	ldr	r3, [r7, #4]
 8013680:	891b      	ldrh	r3, [r3, #8]
 8013682:	2b07      	cmp	r3, #7
 8013684:	f240 80a5 	bls.w	80137d2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013688:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801368a:	330e      	adds	r3, #14
 801368c:	4619      	mov	r1, r3
 801368e:	6878      	ldr	r0, [r7, #4]
 8013690:	f7f6 f80e 	bl	80096b0 <pbuf_add_header>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d04b      	beq.n	8013732 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	891a      	ldrh	r2, [r3, #8]
 801369e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136a0:	4413      	add	r3, r2
 80136a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80136a4:	687b      	ldr	r3, [r7, #4]
 80136a6:	891b      	ldrh	r3, [r3, #8]
 80136a8:	8b7a      	ldrh	r2, [r7, #26]
 80136aa:	429a      	cmp	r2, r3
 80136ac:	f0c0 809a 	bcc.w	80137e4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80136b0:	8b7b      	ldrh	r3, [r7, #26]
 80136b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80136b6:	4619      	mov	r1, r3
 80136b8:	200e      	movs	r0, #14
 80136ba:	f7f5 fdaf 	bl	800921c <pbuf_alloc>
 80136be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	f000 8090 	beq.w	80137e8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	895b      	ldrh	r3, [r3, #10]
 80136cc:	461a      	mov	r2, r3
 80136ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136d0:	3308      	adds	r3, #8
 80136d2:	429a      	cmp	r2, r3
 80136d4:	d203      	bcs.n	80136de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80136d6:	6978      	ldr	r0, [r7, #20]
 80136d8:	f7f6 f880 	bl	80097dc <pbuf_free>
          goto icmperr;
 80136dc:	e085      	b.n	80137ea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80136de:	697b      	ldr	r3, [r7, #20]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80136e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80136e6:	4618      	mov	r0, r3
 80136e8:	f004 fc41 	bl	8017f6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80136ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80136ee:	4619      	mov	r1, r3
 80136f0:	6978      	ldr	r0, [r7, #20]
 80136f2:	f7f5 ffed 	bl	80096d0 <pbuf_remove_header>
 80136f6:	4603      	mov	r3, r0
 80136f8:	2b00      	cmp	r3, #0
 80136fa:	d009      	beq.n	8013710 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80136fc:	4b40      	ldr	r3, [pc, #256]	; (8013800 <icmp_input+0x1f8>)
 80136fe:	22b6      	movs	r2, #182	; 0xb6
 8013700:	4940      	ldr	r1, [pc, #256]	; (8013804 <icmp_input+0x1fc>)
 8013702:	4841      	ldr	r0, [pc, #260]	; (8013808 <icmp_input+0x200>)
 8013704:	f004 fc46 	bl	8017f94 <iprintf>
          pbuf_free(r);
 8013708:	6978      	ldr	r0, [r7, #20]
 801370a:	f7f6 f867 	bl	80097dc <pbuf_free>
          goto icmperr;
 801370e:	e06c      	b.n	80137ea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8013710:	6879      	ldr	r1, [r7, #4]
 8013712:	6978      	ldr	r0, [r7, #20]
 8013714:	f7f6 f996 	bl	8009a44 <pbuf_copy>
 8013718:	4603      	mov	r3, r0
 801371a:	2b00      	cmp	r3, #0
 801371c:	d003      	beq.n	8013726 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801371e:	6978      	ldr	r0, [r7, #20]
 8013720:	f7f6 f85c 	bl	80097dc <pbuf_free>
          goto icmperr;
 8013724:	e061      	b.n	80137ea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8013726:	6878      	ldr	r0, [r7, #4]
 8013728:	f7f6 f858 	bl	80097dc <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	607b      	str	r3, [r7, #4]
 8013730:	e00f      	b.n	8013752 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8013732:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013734:	330e      	adds	r3, #14
 8013736:	4619      	mov	r1, r3
 8013738:	6878      	ldr	r0, [r7, #4]
 801373a:	f7f5 ffc9 	bl	80096d0 <pbuf_remove_header>
 801373e:	4603      	mov	r3, r0
 8013740:	2b00      	cmp	r3, #0
 8013742:	d006      	beq.n	8013752 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8013744:	4b2e      	ldr	r3, [pc, #184]	; (8013800 <icmp_input+0x1f8>)
 8013746:	22c7      	movs	r2, #199	; 0xc7
 8013748:	4930      	ldr	r1, [pc, #192]	; (801380c <icmp_input+0x204>)
 801374a:	482f      	ldr	r0, [pc, #188]	; (8013808 <icmp_input+0x200>)
 801374c:	f004 fc22 	bl	8017f94 <iprintf>
          goto icmperr;
 8013750:	e04b      	b.n	80137ea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	685b      	ldr	r3, [r3, #4]
 8013756:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8013758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801375a:	4619      	mov	r1, r3
 801375c:	6878      	ldr	r0, [r7, #4]
 801375e:	f7f5 ffa7 	bl	80096b0 <pbuf_add_header>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d12b      	bne.n	80137c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	685b      	ldr	r3, [r3, #4]
 801376c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801376e:	69fb      	ldr	r3, [r7, #28]
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8013776:	4b20      	ldr	r3, [pc, #128]	; (80137f8 <icmp_input+0x1f0>)
 8013778:	691a      	ldr	r2, [r3, #16]
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	2200      	movs	r2, #0
 8013782:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8013784:	693b      	ldr	r3, [r7, #16]
 8013786:	2200      	movs	r2, #0
 8013788:	709a      	strb	r2, [r3, #2]
 801378a:	2200      	movs	r2, #0
 801378c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	22ff      	movs	r2, #255	; 0xff
 8013792:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	2200      	movs	r2, #0
 8013798:	729a      	strb	r2, [r3, #10]
 801379a:	2200      	movs	r2, #0
 801379c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	9302      	str	r3, [sp, #8]
 80137a2:	2301      	movs	r3, #1
 80137a4:	9301      	str	r3, [sp, #4]
 80137a6:	2300      	movs	r3, #0
 80137a8:	9300      	str	r3, [sp, #0]
 80137aa:	23ff      	movs	r3, #255	; 0xff
 80137ac:	2200      	movs	r2, #0
 80137ae:	69f9      	ldr	r1, [r7, #28]
 80137b0:	6878      	ldr	r0, [r7, #4]
 80137b2:	f000 fa91 	bl	8013cd8 <ip4_output_if>
 80137b6:	4603      	mov	r3, r0
 80137b8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80137ba:	e001      	b.n	80137c0 <icmp_input+0x1b8>
      break;
 80137bc:	bf00      	nop
 80137be:	e000      	b.n	80137c2 <icmp_input+0x1ba>
      break;
 80137c0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80137c2:	6878      	ldr	r0, [r7, #4]
 80137c4:	f7f6 f80a 	bl	80097dc <pbuf_free>
  return;
 80137c8:	e013      	b.n	80137f2 <icmp_input+0x1ea>
    goto lenerr;
 80137ca:	bf00      	nop
 80137cc:	e002      	b.n	80137d4 <icmp_input+0x1cc>
    goto lenerr;
 80137ce:	bf00      	nop
 80137d0:	e000      	b.n	80137d4 <icmp_input+0x1cc>
        goto lenerr;
 80137d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f7f6 f801 	bl	80097dc <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137da:	e00a      	b.n	80137f2 <icmp_input+0x1ea>
        goto icmperr;
 80137dc:	bf00      	nop
 80137de:	e004      	b.n	80137ea <icmp_input+0x1e2>
        goto icmperr;
 80137e0:	bf00      	nop
 80137e2:	e002      	b.n	80137ea <icmp_input+0x1e2>
          goto icmperr;
 80137e4:	bf00      	nop
 80137e6:	e000      	b.n	80137ea <icmp_input+0x1e2>
          goto icmperr;
 80137e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80137ea:	6878      	ldr	r0, [r7, #4]
 80137ec:	f7f5 fff6 	bl	80097dc <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80137f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80137f2:	3728      	adds	r7, #40	; 0x28
 80137f4:	46bd      	mov	sp, r7
 80137f6:	bd80      	pop	{r7, pc}
 80137f8:	20008da8 	.word	0x20008da8
 80137fc:	20008dbc 	.word	0x20008dbc
 8013800:	0801c320 	.word	0x0801c320
 8013804:	0801c358 	.word	0x0801c358
 8013808:	0801c390 	.word	0x0801c390
 801380c:	0801c3b8 	.word	0x0801c3b8

08013810 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8013810:	b580      	push	{r7, lr}
 8013812:	b082      	sub	sp, #8
 8013814:	af00      	add	r7, sp, #0
 8013816:	6078      	str	r0, [r7, #4]
 8013818:	460b      	mov	r3, r1
 801381a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801381c:	78fb      	ldrb	r3, [r7, #3]
 801381e:	461a      	mov	r2, r3
 8013820:	2103      	movs	r1, #3
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 f814 	bl	8013850 <icmp_send_response>
}
 8013828:	bf00      	nop
 801382a:	3708      	adds	r7, #8
 801382c:	46bd      	mov	sp, r7
 801382e:	bd80      	pop	{r7, pc}

08013830 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8013830:	b580      	push	{r7, lr}
 8013832:	b082      	sub	sp, #8
 8013834:	af00      	add	r7, sp, #0
 8013836:	6078      	str	r0, [r7, #4]
 8013838:	460b      	mov	r3, r1
 801383a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801383c:	78fb      	ldrb	r3, [r7, #3]
 801383e:	461a      	mov	r2, r3
 8013840:	210b      	movs	r1, #11
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f000 f804 	bl	8013850 <icmp_send_response>
}
 8013848:	bf00      	nop
 801384a:	3708      	adds	r7, #8
 801384c:	46bd      	mov	sp, r7
 801384e:	bd80      	pop	{r7, pc}

08013850 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	b08c      	sub	sp, #48	; 0x30
 8013854:	af04      	add	r7, sp, #16
 8013856:	6078      	str	r0, [r7, #4]
 8013858:	460b      	mov	r3, r1
 801385a:	70fb      	strb	r3, [r7, #3]
 801385c:	4613      	mov	r3, r2
 801385e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8013860:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013864:	2124      	movs	r1, #36	; 0x24
 8013866:	2022      	movs	r0, #34	; 0x22
 8013868:	f7f5 fcd8 	bl	800921c <pbuf_alloc>
 801386c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801386e:	69fb      	ldr	r3, [r7, #28]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d04c      	beq.n	801390e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8013874:	69fb      	ldr	r3, [r7, #28]
 8013876:	895b      	ldrh	r3, [r3, #10]
 8013878:	2b23      	cmp	r3, #35	; 0x23
 801387a:	d806      	bhi.n	801388a <icmp_send_response+0x3a>
 801387c:	4b26      	ldr	r3, [pc, #152]	; (8013918 <icmp_send_response+0xc8>)
 801387e:	f240 1269 	movw	r2, #361	; 0x169
 8013882:	4926      	ldr	r1, [pc, #152]	; (801391c <icmp_send_response+0xcc>)
 8013884:	4826      	ldr	r0, [pc, #152]	; (8013920 <icmp_send_response+0xd0>)
 8013886:	f004 fb85 	bl	8017f94 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	685b      	ldr	r3, [r3, #4]
 801388e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8013890:	69fb      	ldr	r3, [r7, #28]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	78fa      	ldrb	r2, [r7, #3]
 801389a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801389c:	697b      	ldr	r3, [r7, #20]
 801389e:	78ba      	ldrb	r2, [r7, #2]
 80138a0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2200      	movs	r2, #0
 80138a6:	711a      	strb	r2, [r3, #4]
 80138a8:	2200      	movs	r2, #0
 80138aa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80138ac:	697b      	ldr	r3, [r7, #20]
 80138ae:	2200      	movs	r2, #0
 80138b0:	719a      	strb	r2, [r3, #6]
 80138b2:	2200      	movs	r2, #0
 80138b4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	685b      	ldr	r3, [r3, #4]
 80138ba:	f103 0008 	add.w	r0, r3, #8
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	685b      	ldr	r3, [r3, #4]
 80138c2:	221c      	movs	r2, #28
 80138c4:	4619      	mov	r1, r3
 80138c6:	f004 fb52 	bl	8017f6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80138ca:	69bb      	ldr	r3, [r7, #24]
 80138cc:	68db      	ldr	r3, [r3, #12]
 80138ce:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80138d0:	f107 030c 	add.w	r3, r7, #12
 80138d4:	4618      	mov	r0, r3
 80138d6:	f000 f825 	bl	8013924 <ip4_route>
 80138da:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	2b00      	cmp	r3, #0
 80138e0:	d011      	beq.n	8013906 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	2200      	movs	r2, #0
 80138e6:	709a      	strb	r2, [r3, #2]
 80138e8:	2200      	movs	r2, #0
 80138ea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80138ec:	f107 020c 	add.w	r2, r7, #12
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	9302      	str	r3, [sp, #8]
 80138f4:	2301      	movs	r3, #1
 80138f6:	9301      	str	r3, [sp, #4]
 80138f8:	2300      	movs	r3, #0
 80138fa:	9300      	str	r3, [sp, #0]
 80138fc:	23ff      	movs	r3, #255	; 0xff
 80138fe:	2100      	movs	r1, #0
 8013900:	69f8      	ldr	r0, [r7, #28]
 8013902:	f000 f9e9 	bl	8013cd8 <ip4_output_if>
  }
  pbuf_free(q);
 8013906:	69f8      	ldr	r0, [r7, #28]
 8013908:	f7f5 ff68 	bl	80097dc <pbuf_free>
 801390c:	e000      	b.n	8013910 <icmp_send_response+0xc0>
    return;
 801390e:	bf00      	nop
}
 8013910:	3720      	adds	r7, #32
 8013912:	46bd      	mov	sp, r7
 8013914:	bd80      	pop	{r7, pc}
 8013916:	bf00      	nop
 8013918:	0801c320 	.word	0x0801c320
 801391c:	0801c3ec 	.word	0x0801c3ec
 8013920:	0801c390 	.word	0x0801c390

08013924 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8013924:	b480      	push	{r7}
 8013926:	b085      	sub	sp, #20
 8013928:	af00      	add	r7, sp, #0
 801392a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801392c:	4b33      	ldr	r3, [pc, #204]	; (80139fc <ip4_route+0xd8>)
 801392e:	681b      	ldr	r3, [r3, #0]
 8013930:	60fb      	str	r3, [r7, #12]
 8013932:	e036      	b.n	80139a2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801393a:	f003 0301 	and.w	r3, r3, #1
 801393e:	b2db      	uxtb	r3, r3
 8013940:	2b00      	cmp	r3, #0
 8013942:	d02b      	beq.n	801399c <ip4_route+0x78>
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801394a:	089b      	lsrs	r3, r3, #2
 801394c:	f003 0301 	and.w	r3, r3, #1
 8013950:	b2db      	uxtb	r3, r3
 8013952:	2b00      	cmp	r3, #0
 8013954:	d022      	beq.n	801399c <ip4_route+0x78>
 8013956:	68fb      	ldr	r3, [r7, #12]
 8013958:	3304      	adds	r3, #4
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d01d      	beq.n	801399c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	681a      	ldr	r2, [r3, #0]
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	3304      	adds	r3, #4
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	405a      	eors	r2, r3
 801396c:	68fb      	ldr	r3, [r7, #12]
 801396e:	3308      	adds	r3, #8
 8013970:	681b      	ldr	r3, [r3, #0]
 8013972:	4013      	ands	r3, r2
 8013974:	2b00      	cmp	r3, #0
 8013976:	d101      	bne.n	801397c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8013978:	68fb      	ldr	r3, [r7, #12]
 801397a:	e038      	b.n	80139ee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801397c:	68fb      	ldr	r3, [r7, #12]
 801397e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013982:	f003 0302 	and.w	r3, r3, #2
 8013986:	2b00      	cmp	r3, #0
 8013988:	d108      	bne.n	801399c <ip4_route+0x78>
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681a      	ldr	r2, [r3, #0]
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	330c      	adds	r3, #12
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	429a      	cmp	r2, r3
 8013996:	d101      	bne.n	801399c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8013998:	68fb      	ldr	r3, [r7, #12]
 801399a:	e028      	b.n	80139ee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801399c:	68fb      	ldr	r3, [r7, #12]
 801399e:	681b      	ldr	r3, [r3, #0]
 80139a0:	60fb      	str	r3, [r7, #12]
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d1c5      	bne.n	8013934 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139a8:	4b15      	ldr	r3, [pc, #84]	; (8013a00 <ip4_route+0xdc>)
 80139aa:	681b      	ldr	r3, [r3, #0]
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	d01a      	beq.n	80139e6 <ip4_route+0xc2>
 80139b0:	4b13      	ldr	r3, [pc, #76]	; (8013a00 <ip4_route+0xdc>)
 80139b2:	681b      	ldr	r3, [r3, #0]
 80139b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139b8:	f003 0301 	and.w	r3, r3, #1
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d012      	beq.n	80139e6 <ip4_route+0xc2>
 80139c0:	4b0f      	ldr	r3, [pc, #60]	; (8013a00 <ip4_route+0xdc>)
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139c8:	f003 0304 	and.w	r3, r3, #4
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d00a      	beq.n	80139e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139d0:	4b0b      	ldr	r3, [pc, #44]	; (8013a00 <ip4_route+0xdc>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	3304      	adds	r3, #4
 80139d6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80139d8:	2b00      	cmp	r3, #0
 80139da:	d004      	beq.n	80139e6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	b2db      	uxtb	r3, r3
 80139e2:	2b7f      	cmp	r3, #127	; 0x7f
 80139e4:	d101      	bne.n	80139ea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80139e6:	2300      	movs	r3, #0
 80139e8:	e001      	b.n	80139ee <ip4_route+0xca>
  }

  return netif_default;
 80139ea:	4b05      	ldr	r3, [pc, #20]	; (8013a00 <ip4_route+0xdc>)
 80139ec:	681b      	ldr	r3, [r3, #0]
}
 80139ee:	4618      	mov	r0, r3
 80139f0:	3714      	adds	r7, #20
 80139f2:	46bd      	mov	sp, r7
 80139f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f8:	4770      	bx	lr
 80139fa:	bf00      	nop
 80139fc:	2000c4cc 	.word	0x2000c4cc
 8013a00:	2000c4d0 	.word	0x2000c4d0

08013a04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b082      	sub	sp, #8
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013a12:	f003 0301 	and.w	r3, r3, #1
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d016      	beq.n	8013a4a <ip4_input_accept+0x46>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	3304      	adds	r3, #4
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d011      	beq.n	8013a4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a26:	4b0b      	ldr	r3, [pc, #44]	; (8013a54 <ip4_input_accept+0x50>)
 8013a28:	695a      	ldr	r2, [r3, #20]
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	3304      	adds	r3, #4
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	429a      	cmp	r2, r3
 8013a32:	d008      	beq.n	8013a46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8013a34:	4b07      	ldr	r3, [pc, #28]	; (8013a54 <ip4_input_accept+0x50>)
 8013a36:	695b      	ldr	r3, [r3, #20]
 8013a38:	6879      	ldr	r1, [r7, #4]
 8013a3a:	4618      	mov	r0, r3
 8013a3c:	f000 fa24 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013a40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d001      	beq.n	8013a4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8013a46:	2301      	movs	r3, #1
 8013a48:	e000      	b.n	8013a4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8013a4a:	2300      	movs	r3, #0
}
 8013a4c:	4618      	mov	r0, r3
 8013a4e:	3708      	adds	r7, #8
 8013a50:	46bd      	mov	sp, r7
 8013a52:	bd80      	pop	{r7, pc}
 8013a54:	20008da8 	.word	0x20008da8

08013a58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8013a58:	b580      	push	{r7, lr}
 8013a5a:	b088      	sub	sp, #32
 8013a5c:	af00      	add	r7, sp, #0
 8013a5e:	6078      	str	r0, [r7, #4]
 8013a60:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8013a62:	2301      	movs	r3, #1
 8013a64:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	781b      	ldrb	r3, [r3, #0]
 8013a70:	091b      	lsrs	r3, r3, #4
 8013a72:	b2db      	uxtb	r3, r3
 8013a74:	2b04      	cmp	r3, #4
 8013a76:	d004      	beq.n	8013a82 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f7f5 feaf 	bl	80097dc <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8013a7e:	2300      	movs	r3, #0
 8013a80:	e121      	b.n	8013cc6 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8013a82:	69fb      	ldr	r3, [r7, #28]
 8013a84:	781b      	ldrb	r3, [r3, #0]
 8013a86:	f003 030f 	and.w	r3, r3, #15
 8013a8a:	b2db      	uxtb	r3, r3
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	b2db      	uxtb	r3, r3
 8013a90:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8013a92:	69fb      	ldr	r3, [r7, #28]
 8013a94:	885b      	ldrh	r3, [r3, #2]
 8013a96:	b29b      	uxth	r3, r3
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f7f4 faeb 	bl	8008074 <lwip_htons>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	891b      	ldrh	r3, [r3, #8]
 8013aa6:	8a3a      	ldrh	r2, [r7, #16]
 8013aa8:	429a      	cmp	r2, r3
 8013aaa:	d204      	bcs.n	8013ab6 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8013aac:	8a3b      	ldrh	r3, [r7, #16]
 8013aae:	4619      	mov	r1, r3
 8013ab0:	6878      	ldr	r0, [r7, #4]
 8013ab2:	f7f5 fd0d 	bl	80094d0 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	895b      	ldrh	r3, [r3, #10]
 8013aba:	8a7a      	ldrh	r2, [r7, #18]
 8013abc:	429a      	cmp	r2, r3
 8013abe:	d807      	bhi.n	8013ad0 <ip4_input+0x78>
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	891b      	ldrh	r3, [r3, #8]
 8013ac4:	8a3a      	ldrh	r2, [r7, #16]
 8013ac6:	429a      	cmp	r2, r3
 8013ac8:	d802      	bhi.n	8013ad0 <ip4_input+0x78>
 8013aca:	8a7b      	ldrh	r3, [r7, #18]
 8013acc:	2b13      	cmp	r3, #19
 8013ace:	d804      	bhi.n	8013ada <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8013ad0:	6878      	ldr	r0, [r7, #4]
 8013ad2:	f7f5 fe83 	bl	80097dc <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8013ad6:	2300      	movs	r3, #0
 8013ad8:	e0f5      	b.n	8013cc6 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8013ada:	69fb      	ldr	r3, [r7, #28]
 8013adc:	691b      	ldr	r3, [r3, #16]
 8013ade:	4a7c      	ldr	r2, [pc, #496]	; (8013cd0 <ip4_input+0x278>)
 8013ae0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	68db      	ldr	r3, [r3, #12]
 8013ae6:	4a7a      	ldr	r2, [pc, #488]	; (8013cd0 <ip4_input+0x278>)
 8013ae8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013aea:	4b79      	ldr	r3, [pc, #484]	; (8013cd0 <ip4_input+0x278>)
 8013aec:	695b      	ldr	r3, [r3, #20]
 8013aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013af2:	2be0      	cmp	r3, #224	; 0xe0
 8013af4:	d112      	bne.n	8013b1c <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013afc:	f003 0301 	and.w	r3, r3, #1
 8013b00:	b2db      	uxtb	r3, r3
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d007      	beq.n	8013b16 <ip4_input+0xbe>
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	3304      	adds	r3, #4
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d002      	beq.n	8013b16 <ip4_input+0xbe>
      netif = inp;
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	61bb      	str	r3, [r7, #24]
 8013b14:	e02a      	b.n	8013b6c <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b16:	2300      	movs	r3, #0
 8013b18:	61bb      	str	r3, [r7, #24]
 8013b1a:	e027      	b.n	8013b6c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8013b1c:	6838      	ldr	r0, [r7, #0]
 8013b1e:	f7ff ff71 	bl	8013a04 <ip4_input_accept>
 8013b22:	4603      	mov	r3, r0
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d002      	beq.n	8013b2e <ip4_input+0xd6>
      netif = inp;
 8013b28:	683b      	ldr	r3, [r7, #0]
 8013b2a:	61bb      	str	r3, [r7, #24]
 8013b2c:	e01e      	b.n	8013b6c <ip4_input+0x114>
    } else {
      netif = NULL;
 8013b2e:	2300      	movs	r3, #0
 8013b30:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8013b32:	4b67      	ldr	r3, [pc, #412]	; (8013cd0 <ip4_input+0x278>)
 8013b34:	695b      	ldr	r3, [r3, #20]
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	2b7f      	cmp	r3, #127	; 0x7f
 8013b3a:	d017      	beq.n	8013b6c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8013b3c:	4b65      	ldr	r3, [pc, #404]	; (8013cd4 <ip4_input+0x27c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	61bb      	str	r3, [r7, #24]
 8013b42:	e00e      	b.n	8013b62 <ip4_input+0x10a>
          if (netif == inp) {
 8013b44:	69ba      	ldr	r2, [r7, #24]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d006      	beq.n	8013b5a <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8013b4c:	69b8      	ldr	r0, [r7, #24]
 8013b4e:	f7ff ff59 	bl	8013a04 <ip4_input_accept>
 8013b52:	4603      	mov	r3, r0
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d108      	bne.n	8013b6a <ip4_input+0x112>
 8013b58:	e000      	b.n	8013b5c <ip4_input+0x104>
            continue;
 8013b5a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8013b5c:	69bb      	ldr	r3, [r7, #24]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	61bb      	str	r3, [r7, #24]
 8013b62:	69bb      	ldr	r3, [r7, #24]
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d1ed      	bne.n	8013b44 <ip4_input+0xec>
 8013b68:	e000      	b.n	8013b6c <ip4_input+0x114>
            break;
 8013b6a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8013b6c:	69bb      	ldr	r3, [r7, #24]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d111      	bne.n	8013b96 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8013b72:	69fb      	ldr	r3, [r7, #28]
 8013b74:	7a5b      	ldrb	r3, [r3, #9]
 8013b76:	2b11      	cmp	r3, #17
 8013b78:	d10d      	bne.n	8013b96 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8013b7a:	8a7b      	ldrh	r3, [r7, #18]
 8013b7c:	69fa      	ldr	r2, [r7, #28]
 8013b7e:	4413      	add	r3, r2
 8013b80:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	885b      	ldrh	r3, [r3, #2]
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8013b8c:	d103      	bne.n	8013b96 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8013b8e:	683b      	ldr	r3, [r7, #0]
 8013b90:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8013b92:	2300      	movs	r3, #0
 8013b94:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8013b96:	697b      	ldr	r3, [r7, #20]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d017      	beq.n	8013bcc <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8013b9c:	4b4c      	ldr	r3, [pc, #304]	; (8013cd0 <ip4_input+0x278>)
 8013b9e:	691b      	ldr	r3, [r3, #16]
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d013      	beq.n	8013bcc <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013ba4:	4b4a      	ldr	r3, [pc, #296]	; (8013cd0 <ip4_input+0x278>)
 8013ba6:	691b      	ldr	r3, [r3, #16]
 8013ba8:	6839      	ldr	r1, [r7, #0]
 8013baa:	4618      	mov	r0, r3
 8013bac:	f000 f96c 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d105      	bne.n	8013bc2 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8013bb6:	4b46      	ldr	r3, [pc, #280]	; (8013cd0 <ip4_input+0x278>)
 8013bb8:	691b      	ldr	r3, [r3, #16]
 8013bba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8013bbe:	2be0      	cmp	r3, #224	; 0xe0
 8013bc0:	d104      	bne.n	8013bcc <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8013bc2:	6878      	ldr	r0, [r7, #4]
 8013bc4:	f7f5 fe0a 	bl	80097dc <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	e07c      	b.n	8013cc6 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8013bcc:	69bb      	ldr	r3, [r7, #24]
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d104      	bne.n	8013bdc <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8013bd2:	6878      	ldr	r0, [r7, #4]
 8013bd4:	f7f5 fe02 	bl	80097dc <pbuf_free>
    return ERR_OK;
 8013bd8:	2300      	movs	r3, #0
 8013bda:	e074      	b.n	8013cc6 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8013bdc:	69fb      	ldr	r3, [r7, #28]
 8013bde:	88db      	ldrh	r3, [r3, #6]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	461a      	mov	r2, r3
 8013be4:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8013be8:	4013      	ands	r3, r2
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d00b      	beq.n	8013c06 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f000 fdc2 	bl	8014778 <ip4_reass>
 8013bf4:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d101      	bne.n	8013c00 <ip4_input+0x1a8>
      return ERR_OK;
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	e062      	b.n	8013cc6 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8013c00:	687b      	ldr	r3, [r7, #4]
 8013c02:	685b      	ldr	r3, [r3, #4]
 8013c04:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8013c06:	4a32      	ldr	r2, [pc, #200]	; (8013cd0 <ip4_input+0x278>)
 8013c08:	69bb      	ldr	r3, [r7, #24]
 8013c0a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8013c0c:	4a30      	ldr	r2, [pc, #192]	; (8013cd0 <ip4_input+0x278>)
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8013c12:	4a2f      	ldr	r2, [pc, #188]	; (8013cd0 <ip4_input+0x278>)
 8013c14:	69fb      	ldr	r3, [r7, #28]
 8013c16:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8013c18:	69fb      	ldr	r3, [r7, #28]
 8013c1a:	781b      	ldrb	r3, [r3, #0]
 8013c1c:	f003 030f 	and.w	r3, r3, #15
 8013c20:	b2db      	uxtb	r3, r3
 8013c22:	009b      	lsls	r3, r3, #2
 8013c24:	b2db      	uxtb	r3, r3
 8013c26:	b29a      	uxth	r2, r3
 8013c28:	4b29      	ldr	r3, [pc, #164]	; (8013cd0 <ip4_input+0x278>)
 8013c2a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8013c2c:	8a7b      	ldrh	r3, [r7, #18]
 8013c2e:	4619      	mov	r1, r3
 8013c30:	6878      	ldr	r0, [r7, #4]
 8013c32:	f7f5 fd4d 	bl	80096d0 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	7a5b      	ldrb	r3, [r3, #9]
 8013c3a:	2b06      	cmp	r3, #6
 8013c3c:	d009      	beq.n	8013c52 <ip4_input+0x1fa>
 8013c3e:	2b11      	cmp	r3, #17
 8013c40:	d002      	beq.n	8013c48 <ip4_input+0x1f0>
 8013c42:	2b01      	cmp	r3, #1
 8013c44:	d00a      	beq.n	8013c5c <ip4_input+0x204>
 8013c46:	e00e      	b.n	8013c66 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8013c48:	6839      	ldr	r1, [r7, #0]
 8013c4a:	6878      	ldr	r0, [r7, #4]
 8013c4c:	f7fc fad0 	bl	80101f0 <udp_input>
        break;
 8013c50:	e026      	b.n	8013ca0 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013c52:	6839      	ldr	r1, [r7, #0]
 8013c54:	6878      	ldr	r0, [r7, #4]
 8013c56:	f7f7 fe7f 	bl	800b958 <tcp_input>
        break;
 8013c5a:	e021      	b.n	8013ca0 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8013c5c:	6839      	ldr	r1, [r7, #0]
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	f7ff fcd2 	bl	8013608 <icmp_input>
        break;
 8013c64:	e01c      	b.n	8013ca0 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c66:	4b1a      	ldr	r3, [pc, #104]	; (8013cd0 <ip4_input+0x278>)
 8013c68:	695b      	ldr	r3, [r3, #20]
 8013c6a:	69b9      	ldr	r1, [r7, #24]
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f000 f90b 	bl	8013e88 <ip4_addr_isbroadcast_u32>
 8013c72:	4603      	mov	r3, r0
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d10f      	bne.n	8013c98 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013c78:	4b15      	ldr	r3, [pc, #84]	; (8013cd0 <ip4_input+0x278>)
 8013c7a:	695b      	ldr	r3, [r3, #20]
 8013c7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013c80:	2be0      	cmp	r3, #224	; 0xe0
 8013c82:	d009      	beq.n	8013c98 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013c84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013c88:	4619      	mov	r1, r3
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7f5 fd93 	bl	80097b6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013c90:	2102      	movs	r1, #2
 8013c92:	6878      	ldr	r0, [r7, #4]
 8013c94:	f7ff fdbc 	bl	8013810 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013c98:	6878      	ldr	r0, [r7, #4]
 8013c9a:	f7f5 fd9f 	bl	80097dc <pbuf_free>
        break;
 8013c9e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013ca0:	4b0b      	ldr	r3, [pc, #44]	; (8013cd0 <ip4_input+0x278>)
 8013ca2:	2200      	movs	r2, #0
 8013ca4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013ca6:	4b0a      	ldr	r3, [pc, #40]	; (8013cd0 <ip4_input+0x278>)
 8013ca8:	2200      	movs	r2, #0
 8013caa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8013cac:	4b08      	ldr	r3, [pc, #32]	; (8013cd0 <ip4_input+0x278>)
 8013cae:	2200      	movs	r2, #0
 8013cb0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013cb2:	4b07      	ldr	r3, [pc, #28]	; (8013cd0 <ip4_input+0x278>)
 8013cb4:	2200      	movs	r2, #0
 8013cb6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013cb8:	4b05      	ldr	r3, [pc, #20]	; (8013cd0 <ip4_input+0x278>)
 8013cba:	2200      	movs	r2, #0
 8013cbc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8013cbe:	4b04      	ldr	r3, [pc, #16]	; (8013cd0 <ip4_input+0x278>)
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013cc4:	2300      	movs	r3, #0
}
 8013cc6:	4618      	mov	r0, r3
 8013cc8:	3720      	adds	r7, #32
 8013cca:	46bd      	mov	sp, r7
 8013ccc:	bd80      	pop	{r7, pc}
 8013cce:	bf00      	nop
 8013cd0:	20008da8 	.word	0x20008da8
 8013cd4:	2000c4cc 	.word	0x2000c4cc

08013cd8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b08a      	sub	sp, #40	; 0x28
 8013cdc:	af04      	add	r7, sp, #16
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
 8013ce4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013ce6:	68bb      	ldr	r3, [r7, #8]
 8013ce8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	2b00      	cmp	r3, #0
 8013cee:	d009      	beq.n	8013d04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8013cf0:	68bb      	ldr	r3, [r7, #8]
 8013cf2:	2b00      	cmp	r3, #0
 8013cf4:	d003      	beq.n	8013cfe <ip4_output_if+0x26>
 8013cf6:	68bb      	ldr	r3, [r7, #8]
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d102      	bne.n	8013d04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	3304      	adds	r3, #4
 8013d02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8013d04:	78fa      	ldrb	r2, [r7, #3]
 8013d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d08:	9302      	str	r3, [sp, #8]
 8013d0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8013d0e:	9301      	str	r3, [sp, #4]
 8013d10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8013d14:	9300      	str	r3, [sp, #0]
 8013d16:	4613      	mov	r3, r2
 8013d18:	687a      	ldr	r2, [r7, #4]
 8013d1a:	6979      	ldr	r1, [r7, #20]
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f000 f805 	bl	8013d2c <ip4_output_if_src>
 8013d22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3718      	adds	r7, #24
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}

08013d2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b088      	sub	sp, #32
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	60f8      	str	r0, [r7, #12]
 8013d34:	60b9      	str	r1, [r7, #8]
 8013d36:	607a      	str	r2, [r7, #4]
 8013d38:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	7b9b      	ldrb	r3, [r3, #14]
 8013d3e:	2b01      	cmp	r3, #1
 8013d40:	d006      	beq.n	8013d50 <ip4_output_if_src+0x24>
 8013d42:	4b4b      	ldr	r3, [pc, #300]	; (8013e70 <ip4_output_if_src+0x144>)
 8013d44:	f44f 7255 	mov.w	r2, #852	; 0x354
 8013d48:	494a      	ldr	r1, [pc, #296]	; (8013e74 <ip4_output_if_src+0x148>)
 8013d4a:	484b      	ldr	r0, [pc, #300]	; (8013e78 <ip4_output_if_src+0x14c>)
 8013d4c:	f004 f922 	bl	8017f94 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d060      	beq.n	8013e18 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013d56:	2314      	movs	r3, #20
 8013d58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8013d5a:	2114      	movs	r1, #20
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f7f5 fca7 	bl	80096b0 <pbuf_add_header>
 8013d62:	4603      	mov	r3, r0
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d002      	beq.n	8013d6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013d68:	f06f 0301 	mvn.w	r3, #1
 8013d6c:	e07c      	b.n	8013e68 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	685b      	ldr	r3, [r3, #4]
 8013d72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013d74:	68fb      	ldr	r3, [r7, #12]
 8013d76:	895b      	ldrh	r3, [r3, #10]
 8013d78:	2b13      	cmp	r3, #19
 8013d7a:	d806      	bhi.n	8013d8a <ip4_output_if_src+0x5e>
 8013d7c:	4b3c      	ldr	r3, [pc, #240]	; (8013e70 <ip4_output_if_src+0x144>)
 8013d7e:	f240 3289 	movw	r2, #905	; 0x389
 8013d82:	493e      	ldr	r1, [pc, #248]	; (8013e7c <ip4_output_if_src+0x150>)
 8013d84:	483c      	ldr	r0, [pc, #240]	; (8013e78 <ip4_output_if_src+0x14c>)
 8013d86:	f004 f905 	bl	8017f94 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	78fa      	ldrb	r2, [r7, #3]
 8013d8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013d90:	69fb      	ldr	r3, [r7, #28]
 8013d92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013d96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	69fb      	ldr	r3, [r7, #28]
 8013d9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013da0:	8b7b      	ldrh	r3, [r7, #26]
 8013da2:	089b      	lsrs	r3, r3, #2
 8013da4:	b29b      	uxth	r3, r3
 8013da6:	b2db      	uxtb	r3, r3
 8013da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013dac:	b2da      	uxtb	r2, r3
 8013dae:	69fb      	ldr	r3, [r7, #28]
 8013db0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013db2:	69fb      	ldr	r3, [r7, #28]
 8013db4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013db8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013dba:	68fb      	ldr	r3, [r7, #12]
 8013dbc:	891b      	ldrh	r3, [r3, #8]
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7f4 f958 	bl	8008074 <lwip_htons>
 8013dc4:	4603      	mov	r3, r0
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	69fb      	ldr	r3, [r7, #28]
 8013dca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013dcc:	69fb      	ldr	r3, [r7, #28]
 8013dce:	2200      	movs	r2, #0
 8013dd0:	719a      	strb	r2, [r3, #6]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013dd6:	4b2a      	ldr	r3, [pc, #168]	; (8013e80 <ip4_output_if_src+0x154>)
 8013dd8:	881b      	ldrh	r3, [r3, #0]
 8013dda:	4618      	mov	r0, r3
 8013ddc:	f7f4 f94a 	bl	8008074 <lwip_htons>
 8013de0:	4603      	mov	r3, r0
 8013de2:	461a      	mov	r2, r3
 8013de4:	69fb      	ldr	r3, [r7, #28]
 8013de6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013de8:	4b25      	ldr	r3, [pc, #148]	; (8013e80 <ip4_output_if_src+0x154>)
 8013dea:	881b      	ldrh	r3, [r3, #0]
 8013dec:	3301      	adds	r3, #1
 8013dee:	b29a      	uxth	r2, r3
 8013df0:	4b23      	ldr	r3, [pc, #140]	; (8013e80 <ip4_output_if_src+0x154>)
 8013df2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d104      	bne.n	8013e04 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013dfa:	4b22      	ldr	r3, [pc, #136]	; (8013e84 <ip4_output_if_src+0x158>)
 8013dfc:	681a      	ldr	r2, [r3, #0]
 8013dfe:	69fb      	ldr	r3, [r7, #28]
 8013e00:	60da      	str	r2, [r3, #12]
 8013e02:	e003      	b.n	8013e0c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013e04:	68bb      	ldr	r3, [r7, #8]
 8013e06:	681a      	ldr	r2, [r3, #0]
 8013e08:	69fb      	ldr	r3, [r7, #28]
 8013e0a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013e0c:	69fb      	ldr	r3, [r7, #28]
 8013e0e:	2200      	movs	r2, #0
 8013e10:	729a      	strb	r2, [r3, #10]
 8013e12:	2200      	movs	r2, #0
 8013e14:	72da      	strb	r2, [r3, #11]
 8013e16:	e00f      	b.n	8013e38 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	895b      	ldrh	r3, [r3, #10]
 8013e1c:	2b13      	cmp	r3, #19
 8013e1e:	d802      	bhi.n	8013e26 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013e20:	f06f 0301 	mvn.w	r3, #1
 8013e24:	e020      	b.n	8013e68 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	685b      	ldr	r3, [r3, #4]
 8013e2a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8013e2c:	69fb      	ldr	r3, [r7, #28]
 8013e2e:	691b      	ldr	r3, [r3, #16]
 8013e30:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8013e32:	f107 0314 	add.w	r3, r7, #20
 8013e36:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8013e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d00c      	beq.n	8013e5a <ip4_output_if_src+0x12e>
 8013e40:	68fb      	ldr	r3, [r7, #12]
 8013e42:	891a      	ldrh	r2, [r3, #8]
 8013e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013e48:	429a      	cmp	r2, r3
 8013e4a:	d906      	bls.n	8013e5a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8013e4c:	687a      	ldr	r2, [r7, #4]
 8013e4e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013e50:	68f8      	ldr	r0, [r7, #12]
 8013e52:	f000 fe7d 	bl	8014b50 <ip4_frag>
 8013e56:	4603      	mov	r3, r0
 8013e58:	e006      	b.n	8013e68 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5c:	695b      	ldr	r3, [r3, #20]
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	68f9      	ldr	r1, [r7, #12]
 8013e62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e64:	4798      	blx	r3
 8013e66:	4603      	mov	r3, r0
}
 8013e68:	4618      	mov	r0, r3
 8013e6a:	3720      	adds	r7, #32
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	0801c418 	.word	0x0801c418
 8013e74:	0801c44c 	.word	0x0801c44c
 8013e78:	0801c458 	.word	0x0801c458
 8013e7c:	0801c480 	.word	0x0801c480
 8013e80:	200084ea 	.word	0x200084ea
 8013e84:	0801cb08 	.word	0x0801cb08

08013e88 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013e88:	b480      	push	{r7}
 8013e8a:	b085      	sub	sp, #20
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
 8013e90:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e9c:	d002      	beq.n	8013ea4 <ip4_addr_isbroadcast_u32+0x1c>
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d101      	bne.n	8013ea8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013ea4:	2301      	movs	r3, #1
 8013ea6:	e02a      	b.n	8013efe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8013eae:	f003 0302 	and.w	r3, r3, #2
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d101      	bne.n	8013eba <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	e021      	b.n	8013efe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013eba:	683b      	ldr	r3, [r7, #0]
 8013ebc:	3304      	adds	r3, #4
 8013ebe:	681b      	ldr	r3, [r3, #0]
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	429a      	cmp	r2, r3
 8013ec4:	d101      	bne.n	8013eca <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	e019      	b.n	8013efe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	3304      	adds	r3, #4
 8013ed0:	681b      	ldr	r3, [r3, #0]
 8013ed2:	405a      	eors	r2, r3
 8013ed4:	683b      	ldr	r3, [r7, #0]
 8013ed6:	3308      	adds	r3, #8
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4013      	ands	r3, r2
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d10d      	bne.n	8013efc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	3308      	adds	r3, #8
 8013ee4:	681b      	ldr	r3, [r3, #0]
 8013ee6:	43da      	mvns	r2, r3
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013eec:	683b      	ldr	r3, [r7, #0]
 8013eee:	3308      	adds	r3, #8
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013ef4:	429a      	cmp	r2, r3
 8013ef6:	d101      	bne.n	8013efc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013ef8:	2301      	movs	r3, #1
 8013efa:	e000      	b.n	8013efe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013efc:	2300      	movs	r3, #0
  }
}
 8013efe:	4618      	mov	r0, r3
 8013f00:	3714      	adds	r7, #20
 8013f02:	46bd      	mov	sp, r7
 8013f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f08:	4770      	bx	lr
	...

08013f0c <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8013f0c:	b5b0      	push	{r4, r5, r7, lr}
 8013f0e:	b08a      	sub	sp, #40	; 0x28
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8013f16:	f107 030c 	add.w	r3, r7, #12
 8013f1a:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8013f24:	f003 fff4 	bl	8017f10 <__locale_ctype_ptr>
 8013f28:	4602      	mov	r2, r0
 8013f2a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f2e:	3301      	adds	r3, #1
 8013f30:	4413      	add	r3, r2
 8013f32:	781b      	ldrb	r3, [r3, #0]
 8013f34:	f003 0304 	and.w	r3, r3, #4
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d101      	bne.n	8013f40 <ip4addr_aton+0x34>
      return 0;
 8013f3c:	2300      	movs	r3, #0
 8013f3e:	e10d      	b.n	801415c <ip4addr_aton+0x250>
    }
    val = 0;
 8013f40:	2300      	movs	r3, #0
 8013f42:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8013f44:	230a      	movs	r3, #10
 8013f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8013f4a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f4e:	2b30      	cmp	r3, #48	; 0x30
 8013f50:	d11c      	bne.n	8013f8c <ip4addr_aton+0x80>
      c = *++cp;
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	3301      	adds	r3, #1
 8013f56:	607b      	str	r3, [r7, #4]
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	781b      	ldrb	r3, [r3, #0]
 8013f5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8013f60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f64:	2b78      	cmp	r3, #120	; 0x78
 8013f66:	d003      	beq.n	8013f70 <ip4addr_aton+0x64>
 8013f68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f6c:	2b58      	cmp	r3, #88	; 0x58
 8013f6e:	d10a      	bne.n	8013f86 <ip4addr_aton+0x7a>
        base = 16;
 8013f70:	2310      	movs	r3, #16
 8013f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	607b      	str	r3, [r7, #4]
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013f84:	e002      	b.n	8013f8c <ip4addr_aton+0x80>
      } else {
        base = 8;
 8013f86:	2308      	movs	r3, #8
 8013f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8013f8c:	f003 ffc0 	bl	8017f10 <__locale_ctype_ptr>
 8013f90:	4602      	mov	r2, r0
 8013f92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013f96:	3301      	adds	r3, #1
 8013f98:	4413      	add	r3, r2
 8013f9a:	781b      	ldrb	r3, [r3, #0]
 8013f9c:	f003 0304 	and.w	r3, r3, #4
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d011      	beq.n	8013fc8 <ip4addr_aton+0xbc>
        val = (val * base) + (u32_t)(c - '0');
 8013fa4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013faa:	fb02 f203 	mul.w	r2, r2, r3
 8013fae:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013fb2:	4413      	add	r3, r2
 8013fb4:	3b30      	subs	r3, #48	; 0x30
 8013fb6:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	3301      	adds	r3, #1
 8013fbc:	607b      	str	r3, [r7, #4]
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	781b      	ldrb	r3, [r3, #0]
 8013fc2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8013fc6:	e7e1      	b.n	8013f8c <ip4addr_aton+0x80>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8013fc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013fcc:	2b10      	cmp	r3, #16
 8013fce:	d12b      	bne.n	8014028 <ip4addr_aton+0x11c>
 8013fd0:	f003 ff9e 	bl	8017f10 <__locale_ctype_ptr>
 8013fd4:	4602      	mov	r2, r0
 8013fd6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013fda:	3301      	adds	r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	781b      	ldrb	r3, [r3, #0]
 8013fe0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d01f      	beq.n	8014028 <ip4addr_aton+0x11c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8013fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fea:	011c      	lsls	r4, r3, #4
 8013fec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013ff0:	f103 050a 	add.w	r5, r3, #10
 8013ff4:	f003 ff8c 	bl	8017f10 <__locale_ctype_ptr>
 8013ff8:	4602      	mov	r2, r0
 8013ffa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8013ffe:	3301      	adds	r3, #1
 8014000:	4413      	add	r3, r2
 8014002:	781b      	ldrb	r3, [r3, #0]
 8014004:	f003 0303 	and.w	r3, r3, #3
 8014008:	2b02      	cmp	r3, #2
 801400a:	d101      	bne.n	8014010 <ip4addr_aton+0x104>
 801400c:	2361      	movs	r3, #97	; 0x61
 801400e:	e000      	b.n	8014012 <ip4addr_aton+0x106>
 8014010:	2341      	movs	r3, #65	; 0x41
 8014012:	1aeb      	subs	r3, r5, r3
 8014014:	4323      	orrs	r3, r4
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	3301      	adds	r3, #1
 801401c:	607b      	str	r3, [r7, #4]
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	781b      	ldrb	r3, [r3, #0]
 8014022:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8014026:	e7b1      	b.n	8013f8c <ip4addr_aton+0x80>
      } else {
        break;
      }
    }
    if (c == '.') {
 8014028:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801402c:	2b2e      	cmp	r3, #46	; 0x2e
 801402e:	d114      	bne.n	801405a <ip4addr_aton+0x14e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 8014030:	f107 030c 	add.w	r3, r7, #12
 8014034:	330c      	adds	r3, #12
 8014036:	69fa      	ldr	r2, [r7, #28]
 8014038:	429a      	cmp	r2, r3
 801403a:	d301      	bcc.n	8014040 <ip4addr_aton+0x134>
        return 0;
 801403c:	2300      	movs	r3, #0
 801403e:	e08d      	b.n	801415c <ip4addr_aton+0x250>
      }
      *pp++ = val;
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	1d1a      	adds	r2, r3, #4
 8014044:	61fa      	str	r2, [r7, #28]
 8014046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014048:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	3301      	adds	r3, #1
 801404e:	607b      	str	r3, [r7, #4]
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	781b      	ldrb	r3, [r3, #0]
 8014054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8014058:	e764      	b.n	8013f24 <ip4addr_aton+0x18>
    } else {
      break;
 801405a:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801405c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014060:	2b00      	cmp	r3, #0
 8014062:	d00d      	beq.n	8014080 <ip4addr_aton+0x174>
 8014064:	f003 ff54 	bl	8017f10 <__locale_ctype_ptr>
 8014068:	4602      	mov	r2, r0
 801406a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801406e:	3301      	adds	r3, #1
 8014070:	4413      	add	r3, r2
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	f003 0308 	and.w	r3, r3, #8
 8014078:	2b00      	cmp	r3, #0
 801407a:	d101      	bne.n	8014080 <ip4addr_aton+0x174>
    return 0;
 801407c:	2300      	movs	r3, #0
 801407e:	e06d      	b.n	801415c <ip4addr_aton+0x250>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8014080:	69fa      	ldr	r2, [r7, #28]
 8014082:	f107 030c 	add.w	r3, r7, #12
 8014086:	1ad3      	subs	r3, r2, r3
 8014088:	109b      	asrs	r3, r3, #2
 801408a:	3301      	adds	r3, #1
 801408c:	2b04      	cmp	r3, #4
 801408e:	d853      	bhi.n	8014138 <ip4addr_aton+0x22c>
 8014090:	a201      	add	r2, pc, #4	; (adr r2, 8014098 <ip4addr_aton+0x18c>)
 8014092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014096:	bf00      	nop
 8014098:	080140ad 	.word	0x080140ad
 801409c:	08014147 	.word	0x08014147
 80140a0:	080140b1 	.word	0x080140b1
 80140a4:	080140d3 	.word	0x080140d3
 80140a8:	08014101 	.word	0x08014101

    case 0:
      return 0;       /* initial nondigit */
 80140ac:	2300      	movs	r3, #0
 80140ae:	e055      	b.n	801415c <ip4addr_aton+0x250>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 80140b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80140b6:	d301      	bcc.n	80140bc <ip4addr_aton+0x1b0>
        return 0;
 80140b8:	2300      	movs	r3, #0
 80140ba:	e04f      	b.n	801415c <ip4addr_aton+0x250>
      }
      if (parts[0] > 0xff) {
 80140bc:	68fb      	ldr	r3, [r7, #12]
 80140be:	2bff      	cmp	r3, #255	; 0xff
 80140c0:	d901      	bls.n	80140c6 <ip4addr_aton+0x1ba>
        return 0;
 80140c2:	2300      	movs	r3, #0
 80140c4:	e04a      	b.n	801415c <ip4addr_aton+0x250>
      }
      val |= parts[0] << 24;
 80140c6:	68fb      	ldr	r3, [r7, #12]
 80140c8:	061b      	lsls	r3, r3, #24
 80140ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140cc:	4313      	orrs	r3, r2
 80140ce:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80140d0:	e03a      	b.n	8014148 <ip4addr_aton+0x23c>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80140d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140d8:	d301      	bcc.n	80140de <ip4addr_aton+0x1d2>
        return 0;
 80140da:	2300      	movs	r3, #0
 80140dc:	e03e      	b.n	801415c <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80140de:	68fb      	ldr	r3, [r7, #12]
 80140e0:	2bff      	cmp	r3, #255	; 0xff
 80140e2:	d802      	bhi.n	80140ea <ip4addr_aton+0x1de>
 80140e4:	693b      	ldr	r3, [r7, #16]
 80140e6:	2bff      	cmp	r3, #255	; 0xff
 80140e8:	d901      	bls.n	80140ee <ip4addr_aton+0x1e2>
        return 0;
 80140ea:	2300      	movs	r3, #0
 80140ec:	e036      	b.n	801415c <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80140ee:	68fb      	ldr	r3, [r7, #12]
 80140f0:	061a      	lsls	r2, r3, #24
 80140f2:	693b      	ldr	r3, [r7, #16]
 80140f4:	041b      	lsls	r3, r3, #16
 80140f6:	4313      	orrs	r3, r2
 80140f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140fa:	4313      	orrs	r3, r2
 80140fc:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80140fe:	e023      	b.n	8014148 <ip4addr_aton+0x23c>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 8014100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014102:	2bff      	cmp	r3, #255	; 0xff
 8014104:	d901      	bls.n	801410a <ip4addr_aton+0x1fe>
        return 0;
 8014106:	2300      	movs	r3, #0
 8014108:	e028      	b.n	801415c <ip4addr_aton+0x250>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2bff      	cmp	r3, #255	; 0xff
 801410e:	d805      	bhi.n	801411c <ip4addr_aton+0x210>
 8014110:	693b      	ldr	r3, [r7, #16]
 8014112:	2bff      	cmp	r3, #255	; 0xff
 8014114:	d802      	bhi.n	801411c <ip4addr_aton+0x210>
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	2bff      	cmp	r3, #255	; 0xff
 801411a:	d901      	bls.n	8014120 <ip4addr_aton+0x214>
        return 0;
 801411c:	2300      	movs	r3, #0
 801411e:	e01d      	b.n	801415c <ip4addr_aton+0x250>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	061a      	lsls	r2, r3, #24
 8014124:	693b      	ldr	r3, [r7, #16]
 8014126:	041b      	lsls	r3, r3, #16
 8014128:	431a      	orrs	r2, r3
 801412a:	697b      	ldr	r3, [r7, #20]
 801412c:	021b      	lsls	r3, r3, #8
 801412e:	4313      	orrs	r3, r2
 8014130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014132:	4313      	orrs	r3, r2
 8014134:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8014136:	e007      	b.n	8014148 <ip4addr_aton+0x23c>
    default:
      LWIP_ASSERT("unhandled", 0);
 8014138:	4b0a      	ldr	r3, [pc, #40]	; (8014164 <ip4addr_aton+0x258>)
 801413a:	22f9      	movs	r2, #249	; 0xf9
 801413c:	490a      	ldr	r1, [pc, #40]	; (8014168 <ip4addr_aton+0x25c>)
 801413e:	480b      	ldr	r0, [pc, #44]	; (801416c <ip4addr_aton+0x260>)
 8014140:	f003 ff28 	bl	8017f94 <iprintf>
      break;
 8014144:	e000      	b.n	8014148 <ip4addr_aton+0x23c>
      break;
 8014146:	bf00      	nop
  }
  if (addr) {
 8014148:	683b      	ldr	r3, [r7, #0]
 801414a:	2b00      	cmp	r3, #0
 801414c:	d005      	beq.n	801415a <ip4addr_aton+0x24e>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801414e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014150:	f7f3 ffa5 	bl	800809e <lwip_htonl>
 8014154:	4602      	mov	r2, r0
 8014156:	683b      	ldr	r3, [r7, #0]
 8014158:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801415a:	2301      	movs	r3, #1
}
 801415c:	4618      	mov	r0, r3
 801415e:	3728      	adds	r7, #40	; 0x28
 8014160:	46bd      	mov	sp, r7
 8014162:	bdb0      	pop	{r4, r5, r7, pc}
 8014164:	0801c4b0 	.word	0x0801c4b0
 8014168:	0801c4ec 	.word	0x0801c4ec
 801416c:	0801c4f8 	.word	0x0801c4f8

08014170 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b084      	sub	sp, #16
 8014174:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8014176:	2300      	movs	r3, #0
 8014178:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801417a:	4b12      	ldr	r3, [pc, #72]	; (80141c4 <ip_reass_tmr+0x54>)
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8014180:	e018      	b.n	80141b4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	7fdb      	ldrb	r3, [r3, #31]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d00b      	beq.n	80141a2 <ip_reass_tmr+0x32>
      r->timer--;
 801418a:	68fb      	ldr	r3, [r7, #12]
 801418c:	7fdb      	ldrb	r3, [r3, #31]
 801418e:	3b01      	subs	r3, #1
 8014190:	b2da      	uxtb	r2, r3
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	60fb      	str	r3, [r7, #12]
 80141a0:	e008      	b.n	80141b4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80141a6:	68fb      	ldr	r3, [r7, #12]
 80141a8:	681b      	ldr	r3, [r3, #0]
 80141aa:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80141ac:	68b9      	ldr	r1, [r7, #8]
 80141ae:	6878      	ldr	r0, [r7, #4]
 80141b0:	f000 f80a 	bl	80141c8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d1e3      	bne.n	8014182 <ip_reass_tmr+0x12>
    }
  }
}
 80141ba:	bf00      	nop
 80141bc:	3710      	adds	r7, #16
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	200084ec 	.word	0x200084ec

080141c8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b088      	sub	sp, #32
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80141d2:	2300      	movs	r3, #0
 80141d4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	429a      	cmp	r2, r3
 80141dc:	d105      	bne.n	80141ea <ip_reass_free_complete_datagram+0x22>
 80141de:	4b45      	ldr	r3, [pc, #276]	; (80142f4 <ip_reass_free_complete_datagram+0x12c>)
 80141e0:	22ab      	movs	r2, #171	; 0xab
 80141e2:	4945      	ldr	r1, [pc, #276]	; (80142f8 <ip_reass_free_complete_datagram+0x130>)
 80141e4:	4845      	ldr	r0, [pc, #276]	; (80142fc <ip_reass_free_complete_datagram+0x134>)
 80141e6:	f003 fed5 	bl	8017f94 <iprintf>
  if (prev != NULL) {
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d00a      	beq.n	8014206 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	687a      	ldr	r2, [r7, #4]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d005      	beq.n	8014206 <ip_reass_free_complete_datagram+0x3e>
 80141fa:	4b3e      	ldr	r3, [pc, #248]	; (80142f4 <ip_reass_free_complete_datagram+0x12c>)
 80141fc:	22ad      	movs	r2, #173	; 0xad
 80141fe:	4940      	ldr	r1, [pc, #256]	; (8014300 <ip_reass_free_complete_datagram+0x138>)
 8014200:	483e      	ldr	r0, [pc, #248]	; (80142fc <ip_reass_free_complete_datagram+0x134>)
 8014202:	f003 fec7 	bl	8017f94 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801420e:	697b      	ldr	r3, [r7, #20]
 8014210:	889b      	ldrh	r3, [r3, #4]
 8014212:	b29b      	uxth	r3, r3
 8014214:	2b00      	cmp	r3, #0
 8014216:	d12a      	bne.n	801426e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	685b      	ldr	r3, [r3, #4]
 801421c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	681a      	ldr	r2, [r3, #0]
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8014226:	69bb      	ldr	r3, [r7, #24]
 8014228:	6858      	ldr	r0, [r3, #4]
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	3308      	adds	r3, #8
 801422e:	2214      	movs	r2, #20
 8014230:	4619      	mov	r1, r3
 8014232:	f003 fe9c 	bl	8017f6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8014236:	2101      	movs	r1, #1
 8014238:	69b8      	ldr	r0, [r7, #24]
 801423a:	f7ff faf9 	bl	8013830 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801423e:	69b8      	ldr	r0, [r7, #24]
 8014240:	f7f5 fb5a 	bl	80098f8 <pbuf_clen>
 8014244:	4603      	mov	r3, r0
 8014246:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014248:	8bfa      	ldrh	r2, [r7, #30]
 801424a:	8a7b      	ldrh	r3, [r7, #18]
 801424c:	4413      	add	r3, r2
 801424e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014252:	db05      	blt.n	8014260 <ip_reass_free_complete_datagram+0x98>
 8014254:	4b27      	ldr	r3, [pc, #156]	; (80142f4 <ip_reass_free_complete_datagram+0x12c>)
 8014256:	22bc      	movs	r2, #188	; 0xbc
 8014258:	492a      	ldr	r1, [pc, #168]	; (8014304 <ip_reass_free_complete_datagram+0x13c>)
 801425a:	4828      	ldr	r0, [pc, #160]	; (80142fc <ip_reass_free_complete_datagram+0x134>)
 801425c:	f003 fe9a 	bl	8017f94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8014260:	8bfa      	ldrh	r2, [r7, #30]
 8014262:	8a7b      	ldrh	r3, [r7, #18]
 8014264:	4413      	add	r3, r2
 8014266:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8014268:	69b8      	ldr	r0, [r7, #24]
 801426a:	f7f5 fab7 	bl	80097dc <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	685b      	ldr	r3, [r3, #4]
 8014272:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8014274:	e01f      	b.n	80142b6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8014276:	69bb      	ldr	r3, [r7, #24]
 8014278:	685b      	ldr	r3, [r3, #4]
 801427a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8014280:	697b      	ldr	r3, [r7, #20]
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8014286:	68f8      	ldr	r0, [r7, #12]
 8014288:	f7f5 fb36 	bl	80098f8 <pbuf_clen>
 801428c:	4603      	mov	r3, r0
 801428e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8014290:	8bfa      	ldrh	r2, [r7, #30]
 8014292:	8a7b      	ldrh	r3, [r7, #18]
 8014294:	4413      	add	r3, r2
 8014296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801429a:	db05      	blt.n	80142a8 <ip_reass_free_complete_datagram+0xe0>
 801429c:	4b15      	ldr	r3, [pc, #84]	; (80142f4 <ip_reass_free_complete_datagram+0x12c>)
 801429e:	22cc      	movs	r2, #204	; 0xcc
 80142a0:	4918      	ldr	r1, [pc, #96]	; (8014304 <ip_reass_free_complete_datagram+0x13c>)
 80142a2:	4816      	ldr	r0, [pc, #88]	; (80142fc <ip_reass_free_complete_datagram+0x134>)
 80142a4:	f003 fe76 	bl	8017f94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80142a8:	8bfa      	ldrh	r2, [r7, #30]
 80142aa:	8a7b      	ldrh	r3, [r7, #18]
 80142ac:	4413      	add	r3, r2
 80142ae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80142b0:	68f8      	ldr	r0, [r7, #12]
 80142b2:	f7f5 fa93 	bl	80097dc <pbuf_free>
  while (p != NULL) {
 80142b6:	69bb      	ldr	r3, [r7, #24]
 80142b8:	2b00      	cmp	r3, #0
 80142ba:	d1dc      	bne.n	8014276 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80142bc:	6839      	ldr	r1, [r7, #0]
 80142be:	6878      	ldr	r0, [r7, #4]
 80142c0:	f000 f8c2 	bl	8014448 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80142c4:	4b10      	ldr	r3, [pc, #64]	; (8014308 <ip_reass_free_complete_datagram+0x140>)
 80142c6:	881b      	ldrh	r3, [r3, #0]
 80142c8:	8bfa      	ldrh	r2, [r7, #30]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	d905      	bls.n	80142da <ip_reass_free_complete_datagram+0x112>
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <ip_reass_free_complete_datagram+0x12c>)
 80142d0:	22d2      	movs	r2, #210	; 0xd2
 80142d2:	490e      	ldr	r1, [pc, #56]	; (801430c <ip_reass_free_complete_datagram+0x144>)
 80142d4:	4809      	ldr	r0, [pc, #36]	; (80142fc <ip_reass_free_complete_datagram+0x134>)
 80142d6:	f003 fe5d 	bl	8017f94 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80142da:	4b0b      	ldr	r3, [pc, #44]	; (8014308 <ip_reass_free_complete_datagram+0x140>)
 80142dc:	881a      	ldrh	r2, [r3, #0]
 80142de:	8bfb      	ldrh	r3, [r7, #30]
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	b29a      	uxth	r2, r3
 80142e4:	4b08      	ldr	r3, [pc, #32]	; (8014308 <ip_reass_free_complete_datagram+0x140>)
 80142e6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80142e8:	8bfb      	ldrh	r3, [r7, #30]
}
 80142ea:	4618      	mov	r0, r3
 80142ec:	3720      	adds	r7, #32
 80142ee:	46bd      	mov	sp, r7
 80142f0:	bd80      	pop	{r7, pc}
 80142f2:	bf00      	nop
 80142f4:	0801c520 	.word	0x0801c520
 80142f8:	0801c55c 	.word	0x0801c55c
 80142fc:	0801c568 	.word	0x0801c568
 8014300:	0801c590 	.word	0x0801c590
 8014304:	0801c5a4 	.word	0x0801c5a4
 8014308:	200084f0 	.word	0x200084f0
 801430c:	0801c5c4 	.word	0x0801c5c4

08014310 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08a      	sub	sp, #40	; 0x28
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
 8014318:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801431a:	2300      	movs	r3, #0
 801431c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801431e:	2300      	movs	r3, #0
 8014320:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8014322:	2300      	movs	r3, #0
 8014324:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8014326:	2300      	movs	r3, #0
 8014328:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801432a:	2300      	movs	r3, #0
 801432c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801432e:	4b28      	ldr	r3, [pc, #160]	; (80143d0 <ip_reass_remove_oldest_datagram+0xc0>)
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014334:	e030      	b.n	8014398 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8014336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014338:	695a      	ldr	r2, [r3, #20]
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	68db      	ldr	r3, [r3, #12]
 801433e:	429a      	cmp	r2, r3
 8014340:	d10c      	bne.n	801435c <ip_reass_remove_oldest_datagram+0x4c>
 8014342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014344:	699a      	ldr	r2, [r3, #24]
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	429a      	cmp	r2, r3
 801434c:	d106      	bne.n	801435c <ip_reass_remove_oldest_datagram+0x4c>
 801434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014350:	899a      	ldrh	r2, [r3, #12]
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	889b      	ldrh	r3, [r3, #4]
 8014356:	b29b      	uxth	r3, r3
 8014358:	429a      	cmp	r2, r3
 801435a:	d014      	beq.n	8014386 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	3301      	adds	r3, #1
 8014360:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8014362:	6a3b      	ldr	r3, [r7, #32]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d104      	bne.n	8014372 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8014368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801436a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	61bb      	str	r3, [r7, #24]
 8014370:	e009      	b.n	8014386 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	7fda      	ldrb	r2, [r3, #31]
 8014376:	6a3b      	ldr	r3, [r7, #32]
 8014378:	7fdb      	ldrb	r3, [r3, #31]
 801437a:	429a      	cmp	r2, r3
 801437c:	d803      	bhi.n	8014386 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801437e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014380:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8014382:	69fb      	ldr	r3, [r7, #28]
 8014384:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8014386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	2b00      	cmp	r3, #0
 801438c:	d001      	beq.n	8014392 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801438e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014390:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8014392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8014398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439a:	2b00      	cmp	r3, #0
 801439c:	d1cb      	bne.n	8014336 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801439e:	6a3b      	ldr	r3, [r7, #32]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d008      	beq.n	80143b6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80143a4:	69b9      	ldr	r1, [r7, #24]
 80143a6:	6a38      	ldr	r0, [r7, #32]
 80143a8:	f7ff ff0e 	bl	80141c8 <ip_reass_free_complete_datagram>
 80143ac:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80143ae:	697a      	ldr	r2, [r7, #20]
 80143b0:	68fb      	ldr	r3, [r7, #12]
 80143b2:	4413      	add	r3, r2
 80143b4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80143b6:	697a      	ldr	r2, [r7, #20]
 80143b8:	683b      	ldr	r3, [r7, #0]
 80143ba:	429a      	cmp	r2, r3
 80143bc:	da02      	bge.n	80143c4 <ip_reass_remove_oldest_datagram+0xb4>
 80143be:	693b      	ldr	r3, [r7, #16]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	dcac      	bgt.n	801431e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80143c4:	697b      	ldr	r3, [r7, #20]
}
 80143c6:	4618      	mov	r0, r3
 80143c8:	3728      	adds	r7, #40	; 0x28
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	200084ec 	.word	0x200084ec

080143d4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80143d4:	b580      	push	{r7, lr}
 80143d6:	b084      	sub	sp, #16
 80143d8:	af00      	add	r7, sp, #0
 80143da:	6078      	str	r0, [r7, #4]
 80143dc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143de:	2004      	movs	r0, #4
 80143e0:	f7f4 fafe 	bl	80089e0 <memp_malloc>
 80143e4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d110      	bne.n	801440e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80143ec:	6839      	ldr	r1, [r7, #0]
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f7ff ff8e 	bl	8014310 <ip_reass_remove_oldest_datagram>
 80143f4:	4602      	mov	r2, r0
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	4293      	cmp	r3, r2
 80143fa:	dc03      	bgt.n	8014404 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80143fc:	2004      	movs	r0, #4
 80143fe:	f7f4 faef 	bl	80089e0 <memp_malloc>
 8014402:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	2b00      	cmp	r3, #0
 8014408:	d101      	bne.n	801440e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801440a:	2300      	movs	r3, #0
 801440c:	e016      	b.n	801443c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801440e:	2220      	movs	r2, #32
 8014410:	2100      	movs	r1, #0
 8014412:	68f8      	ldr	r0, [r7, #12]
 8014414:	f003 fdb6 	bl	8017f84 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	220f      	movs	r2, #15
 801441c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801441e:	4b09      	ldr	r3, [pc, #36]	; (8014444 <ip_reass_enqueue_new_datagram+0x70>)
 8014420:	681a      	ldr	r2, [r3, #0]
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8014426:	4a07      	ldr	r2, [pc, #28]	; (8014444 <ip_reass_enqueue_new_datagram+0x70>)
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801442c:	68fb      	ldr	r3, [r7, #12]
 801442e:	3308      	adds	r3, #8
 8014430:	2214      	movs	r2, #20
 8014432:	6879      	ldr	r1, [r7, #4]
 8014434:	4618      	mov	r0, r3
 8014436:	f003 fd9a 	bl	8017f6e <memcpy>
  return ipr;
 801443a:	68fb      	ldr	r3, [r7, #12]
}
 801443c:	4618      	mov	r0, r3
 801443e:	3710      	adds	r7, #16
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}
 8014444:	200084ec 	.word	0x200084ec

08014448 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b082      	sub	sp, #8
 801444c:	af00      	add	r7, sp, #0
 801444e:	6078      	str	r0, [r7, #4]
 8014450:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8014452:	4b10      	ldr	r3, [pc, #64]	; (8014494 <ip_reass_dequeue_datagram+0x4c>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	687a      	ldr	r2, [r7, #4]
 8014458:	429a      	cmp	r2, r3
 801445a:	d104      	bne.n	8014466 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	4a0c      	ldr	r2, [pc, #48]	; (8014494 <ip_reass_dequeue_datagram+0x4c>)
 8014462:	6013      	str	r3, [r2, #0]
 8014464:	e00d      	b.n	8014482 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8014466:	683b      	ldr	r3, [r7, #0]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d106      	bne.n	801447a <ip_reass_dequeue_datagram+0x32>
 801446c:	4b0a      	ldr	r3, [pc, #40]	; (8014498 <ip_reass_dequeue_datagram+0x50>)
 801446e:	f240 1245 	movw	r2, #325	; 0x145
 8014472:	490a      	ldr	r1, [pc, #40]	; (801449c <ip_reass_dequeue_datagram+0x54>)
 8014474:	480a      	ldr	r0, [pc, #40]	; (80144a0 <ip_reass_dequeue_datagram+0x58>)
 8014476:	f003 fd8d 	bl	8017f94 <iprintf>
    prev->next = ipr->next;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681a      	ldr	r2, [r3, #0]
 801447e:	683b      	ldr	r3, [r7, #0]
 8014480:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8014482:	6879      	ldr	r1, [r7, #4]
 8014484:	2004      	movs	r0, #4
 8014486:	f7f4 fafd 	bl	8008a84 <memp_free>
}
 801448a:	bf00      	nop
 801448c:	3708      	adds	r7, #8
 801448e:	46bd      	mov	sp, r7
 8014490:	bd80      	pop	{r7, pc}
 8014492:	bf00      	nop
 8014494:	200084ec 	.word	0x200084ec
 8014498:	0801c520 	.word	0x0801c520
 801449c:	0801c5e8 	.word	0x0801c5e8
 80144a0:	0801c568 	.word	0x0801c568

080144a4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80144a4:	b580      	push	{r7, lr}
 80144a6:	b08c      	sub	sp, #48	; 0x30
 80144a8:	af00      	add	r7, sp, #0
 80144aa:	60f8      	str	r0, [r7, #12]
 80144ac:	60b9      	str	r1, [r7, #8]
 80144ae:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80144b0:	2300      	movs	r3, #0
 80144b2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80144b4:	2301      	movs	r3, #1
 80144b6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80144b8:	68bb      	ldr	r3, [r7, #8]
 80144ba:	685b      	ldr	r3, [r3, #4]
 80144bc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80144be:	69fb      	ldr	r3, [r7, #28]
 80144c0:	885b      	ldrh	r3, [r3, #2]
 80144c2:	b29b      	uxth	r3, r3
 80144c4:	4618      	mov	r0, r3
 80144c6:	f7f3 fdd5 	bl	8008074 <lwip_htons>
 80144ca:	4603      	mov	r3, r0
 80144cc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80144ce:	69fb      	ldr	r3, [r7, #28]
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f003 030f 	and.w	r3, r3, #15
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	009b      	lsls	r3, r3, #2
 80144da:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80144dc:	7e7b      	ldrb	r3, [r7, #25]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	8b7a      	ldrh	r2, [r7, #26]
 80144e2:	429a      	cmp	r2, r3
 80144e4:	d202      	bcs.n	80144ec <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80144e6:	f04f 33ff 	mov.w	r3, #4294967295
 80144ea:	e135      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80144ec:	7e7b      	ldrb	r3, [r7, #25]
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	8b7a      	ldrh	r2, [r7, #26]
 80144f2:	1ad3      	subs	r3, r2, r3
 80144f4:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80144f6:	69fb      	ldr	r3, [r7, #28]
 80144f8:	88db      	ldrh	r3, [r3, #6]
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	4618      	mov	r0, r3
 80144fe:	f7f3 fdb9 	bl	8008074 <lwip_htons>
 8014502:	4603      	mov	r3, r0
 8014504:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014508:	b29b      	uxth	r3, r3
 801450a:	00db      	lsls	r3, r3, #3
 801450c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	685b      	ldr	r3, [r3, #4]
 8014512:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	2200      	movs	r2, #0
 8014518:	701a      	strb	r2, [r3, #0]
 801451a:	2200      	movs	r2, #0
 801451c:	705a      	strb	r2, [r3, #1]
 801451e:	2200      	movs	r2, #0
 8014520:	709a      	strb	r2, [r3, #2]
 8014522:	2200      	movs	r2, #0
 8014524:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8014526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014528:	8afa      	ldrh	r2, [r7, #22]
 801452a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801452c:	8afa      	ldrh	r2, [r7, #22]
 801452e:	8b7b      	ldrh	r3, [r7, #26]
 8014530:	4413      	add	r3, r2
 8014532:	b29a      	uxth	r2, r3
 8014534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014536:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8014538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453a:	88db      	ldrh	r3, [r3, #6]
 801453c:	b29b      	uxth	r3, r3
 801453e:	8afa      	ldrh	r2, [r7, #22]
 8014540:	429a      	cmp	r2, r3
 8014542:	d902      	bls.n	801454a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014544:	f04f 33ff 	mov.w	r3, #4294967295
 8014548:	e106      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801454a:	68fb      	ldr	r3, [r7, #12]
 801454c:	685b      	ldr	r3, [r3, #4]
 801454e:	627b      	str	r3, [r7, #36]	; 0x24
 8014550:	e068      	b.n	8014624 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8014552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014554:	685b      	ldr	r3, [r3, #4]
 8014556:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8014558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801455a:	889b      	ldrh	r3, [r3, #4]
 801455c:	b29a      	uxth	r2, r3
 801455e:	693b      	ldr	r3, [r7, #16]
 8014560:	889b      	ldrh	r3, [r3, #4]
 8014562:	b29b      	uxth	r3, r3
 8014564:	429a      	cmp	r2, r3
 8014566:	d235      	bcs.n	80145d4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8014568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801456a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801456c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801456e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014570:	2b00      	cmp	r3, #0
 8014572:	d020      	beq.n	80145b6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8014574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014576:	889b      	ldrh	r3, [r3, #4]
 8014578:	b29a      	uxth	r2, r3
 801457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801457c:	88db      	ldrh	r3, [r3, #6]
 801457e:	b29b      	uxth	r3, r3
 8014580:	429a      	cmp	r2, r3
 8014582:	d307      	bcc.n	8014594 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8014584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014586:	88db      	ldrh	r3, [r3, #6]
 8014588:	b29a      	uxth	r2, r3
 801458a:	693b      	ldr	r3, [r7, #16]
 801458c:	889b      	ldrh	r3, [r3, #4]
 801458e:	b29b      	uxth	r3, r3
 8014590:	429a      	cmp	r2, r3
 8014592:	d902      	bls.n	801459a <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8014594:	f04f 33ff 	mov.w	r3, #4294967295
 8014598:	e0de      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801459a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801459c:	68ba      	ldr	r2, [r7, #8]
 801459e:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80145a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a2:	88db      	ldrh	r3, [r3, #6]
 80145a4:	b29a      	uxth	r2, r3
 80145a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145a8:	889b      	ldrh	r3, [r3, #4]
 80145aa:	b29b      	uxth	r3, r3
 80145ac:	429a      	cmp	r2, r3
 80145ae:	d03d      	beq.n	801462c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80145b0:	2300      	movs	r3, #0
 80145b2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80145b4:	e03a      	b.n	801462c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	88db      	ldrh	r3, [r3, #6]
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	889b      	ldrh	r3, [r3, #4]
 80145c0:	b29b      	uxth	r3, r3
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d902      	bls.n	80145cc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145c6:	f04f 33ff 	mov.w	r3, #4294967295
 80145ca:	e0c5      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	68ba      	ldr	r2, [r7, #8]
 80145d0:	605a      	str	r2, [r3, #4]
      break;
 80145d2:	e02b      	b.n	801462c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80145d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145d6:	889b      	ldrh	r3, [r3, #4]
 80145d8:	b29a      	uxth	r2, r3
 80145da:	693b      	ldr	r3, [r7, #16]
 80145dc:	889b      	ldrh	r3, [r3, #4]
 80145de:	b29b      	uxth	r3, r3
 80145e0:	429a      	cmp	r2, r3
 80145e2:	d102      	bne.n	80145ea <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145e4:	f04f 33ff 	mov.w	r3, #4294967295
 80145e8:	e0b6      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80145ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145ec:	889b      	ldrh	r3, [r3, #4]
 80145ee:	b29a      	uxth	r2, r3
 80145f0:	693b      	ldr	r3, [r7, #16]
 80145f2:	88db      	ldrh	r3, [r3, #6]
 80145f4:	b29b      	uxth	r3, r3
 80145f6:	429a      	cmp	r2, r3
 80145f8:	d202      	bcs.n	8014600 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80145fa:	f04f 33ff 	mov.w	r3, #4294967295
 80145fe:	e0ab      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8014600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014602:	2b00      	cmp	r3, #0
 8014604:	d009      	beq.n	801461a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8014606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014608:	88db      	ldrh	r3, [r3, #6]
 801460a:	b29a      	uxth	r2, r3
 801460c:	693b      	ldr	r3, [r7, #16]
 801460e:	889b      	ldrh	r3, [r3, #4]
 8014610:	b29b      	uxth	r3, r3
 8014612:	429a      	cmp	r2, r3
 8014614:	d001      	beq.n	801461a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8014616:	2300      	movs	r3, #0
 8014618:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801461a:	693b      	ldr	r3, [r7, #16]
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8014624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014626:	2b00      	cmp	r3, #0
 8014628:	d193      	bne.n	8014552 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801462a:	e000      	b.n	801462e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801462c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014630:	2b00      	cmp	r3, #0
 8014632:	d12d      	bne.n	8014690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8014634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014636:	2b00      	cmp	r3, #0
 8014638:	d01c      	beq.n	8014674 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801463a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801463c:	88db      	ldrh	r3, [r3, #6]
 801463e:	b29a      	uxth	r2, r3
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	889b      	ldrh	r3, [r3, #4]
 8014644:	b29b      	uxth	r3, r3
 8014646:	429a      	cmp	r2, r3
 8014648:	d906      	bls.n	8014658 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801464a:	4b45      	ldr	r3, [pc, #276]	; (8014760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801464c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8014650:	4944      	ldr	r1, [pc, #272]	; (8014764 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8014652:	4845      	ldr	r0, [pc, #276]	; (8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014654:	f003 fc9e 	bl	8017f94 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8014658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801465a:	68ba      	ldr	r2, [r7, #8]
 801465c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014660:	88db      	ldrh	r3, [r3, #6]
 8014662:	b29a      	uxth	r2, r3
 8014664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014666:	889b      	ldrh	r3, [r3, #4]
 8014668:	b29b      	uxth	r3, r3
 801466a:	429a      	cmp	r2, r3
 801466c:	d010      	beq.n	8014690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801466e:	2300      	movs	r3, #0
 8014670:	623b      	str	r3, [r7, #32]
 8014672:	e00d      	b.n	8014690 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	685b      	ldr	r3, [r3, #4]
 8014678:	2b00      	cmp	r3, #0
 801467a:	d006      	beq.n	801468a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801467c:	4b38      	ldr	r3, [pc, #224]	; (8014760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801467e:	f240 12bf 	movw	r2, #447	; 0x1bf
 8014682:	493a      	ldr	r1, [pc, #232]	; (801476c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8014684:	4838      	ldr	r0, [pc, #224]	; (8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014686:	f003 fc85 	bl	8017f94 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801468a:	68fb      	ldr	r3, [r7, #12]
 801468c:	68ba      	ldr	r2, [r7, #8]
 801468e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	2b00      	cmp	r3, #0
 8014694:	d105      	bne.n	80146a2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	7f9b      	ldrb	r3, [r3, #30]
 801469a:	f003 0301 	and.w	r3, r3, #1
 801469e:	2b00      	cmp	r3, #0
 80146a0:	d059      	beq.n	8014756 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80146a2:	6a3b      	ldr	r3, [r7, #32]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d04f      	beq.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80146a8:	68fb      	ldr	r3, [r7, #12]
 80146aa:	685b      	ldr	r3, [r3, #4]
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d006      	beq.n	80146be <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	685b      	ldr	r3, [r3, #4]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	889b      	ldrh	r3, [r3, #4]
 80146b8:	b29b      	uxth	r3, r3
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d002      	beq.n	80146c4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80146be:	2300      	movs	r3, #0
 80146c0:	623b      	str	r3, [r7, #32]
 80146c2:	e041      	b.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80146c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80146c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80146ce:	e012      	b.n	80146f6 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80146d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d2:	685b      	ldr	r3, [r3, #4]
 80146d4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80146d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146d8:	88db      	ldrh	r3, [r3, #6]
 80146da:	b29a      	uxth	r2, r3
 80146dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146de:	889b      	ldrh	r3, [r3, #4]
 80146e0:	b29b      	uxth	r3, r3
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d002      	beq.n	80146ec <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80146e6:	2300      	movs	r3, #0
 80146e8:	623b      	str	r3, [r7, #32]
            break;
 80146ea:	e007      	b.n	80146fc <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80146ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ee:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80146f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80146f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d1e9      	bne.n	80146d0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80146fc:	6a3b      	ldr	r3, [r7, #32]
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d022      	beq.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	2b00      	cmp	r3, #0
 8014708:	d106      	bne.n	8014718 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801470a:	4b15      	ldr	r3, [pc, #84]	; (8014760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801470c:	f240 12df 	movw	r2, #479	; 0x1df
 8014710:	4917      	ldr	r1, [pc, #92]	; (8014770 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8014712:	4815      	ldr	r0, [pc, #84]	; (8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014714:	f003 fc3e 	bl	8017f94 <iprintf>
          LWIP_ASSERT("sanity check",
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	685b      	ldr	r3, [r3, #4]
 801471c:	685b      	ldr	r3, [r3, #4]
 801471e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014720:	429a      	cmp	r2, r3
 8014722:	d106      	bne.n	8014732 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8014724:	4b0e      	ldr	r3, [pc, #56]	; (8014760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8014726:	f240 12e1 	movw	r2, #481	; 0x1e1
 801472a:	4911      	ldr	r1, [pc, #68]	; (8014770 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801472c:	480e      	ldr	r0, [pc, #56]	; (8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801472e:	f003 fc31 	bl	8017f94 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8014732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d006      	beq.n	8014748 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801473a:	4b09      	ldr	r3, [pc, #36]	; (8014760 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801473c:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014740:	490c      	ldr	r1, [pc, #48]	; (8014774 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8014742:	4809      	ldr	r0, [pc, #36]	; (8014768 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8014744:	f003 fc26 	bl	8017f94 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8014748:	6a3b      	ldr	r3, [r7, #32]
 801474a:	2b00      	cmp	r3, #0
 801474c:	bf14      	ite	ne
 801474e:	2301      	movne	r3, #1
 8014750:	2300      	moveq	r3, #0
 8014752:	b2db      	uxtb	r3, r3
 8014754:	e000      	b.n	8014758 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8014756:	2300      	movs	r3, #0
}
 8014758:	4618      	mov	r0, r3
 801475a:	3730      	adds	r7, #48	; 0x30
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	0801c520 	.word	0x0801c520
 8014764:	0801c604 	.word	0x0801c604
 8014768:	0801c568 	.word	0x0801c568
 801476c:	0801c624 	.word	0x0801c624
 8014770:	0801c65c 	.word	0x0801c65c
 8014774:	0801c66c 	.word	0x0801c66c

08014778 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b08e      	sub	sp, #56	; 0x38
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	685b      	ldr	r3, [r3, #4]
 8014784:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8014786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	f003 030f 	and.w	r3, r3, #15
 801478e:	b2db      	uxtb	r3, r3
 8014790:	009b      	lsls	r3, r3, #2
 8014792:	b2db      	uxtb	r3, r3
 8014794:	2b14      	cmp	r3, #20
 8014796:	f040 8167 	bne.w	8014a68 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801479c:	88db      	ldrh	r3, [r3, #6]
 801479e:	b29b      	uxth	r3, r3
 80147a0:	4618      	mov	r0, r3
 80147a2:	f7f3 fc67 	bl	8008074 <lwip_htons>
 80147a6:	4603      	mov	r3, r0
 80147a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80147ac:	b29b      	uxth	r3, r3
 80147ae:	00db      	lsls	r3, r3, #3
 80147b0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80147b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147b4:	885b      	ldrh	r3, [r3, #2]
 80147b6:	b29b      	uxth	r3, r3
 80147b8:	4618      	mov	r0, r3
 80147ba:	f7f3 fc5b 	bl	8008074 <lwip_htons>
 80147be:	4603      	mov	r3, r0
 80147c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	781b      	ldrb	r3, [r3, #0]
 80147c6:	f003 030f 	and.w	r3, r3, #15
 80147ca:	b2db      	uxtb	r3, r3
 80147cc:	009b      	lsls	r3, r3, #2
 80147ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80147d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147d6:	b29b      	uxth	r3, r3
 80147d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147da:	429a      	cmp	r2, r3
 80147dc:	f0c0 8146 	bcc.w	8014a6c <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80147e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80147e4:	b29b      	uxth	r3, r3
 80147e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80147e8:	1ad3      	subs	r3, r2, r3
 80147ea:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80147ec:	6878      	ldr	r0, [r7, #4]
 80147ee:	f7f5 f883 	bl	80098f8 <pbuf_clen>
 80147f2:	4603      	mov	r3, r0
 80147f4:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80147f6:	4ba3      	ldr	r3, [pc, #652]	; (8014a84 <ip4_reass+0x30c>)
 80147f8:	881b      	ldrh	r3, [r3, #0]
 80147fa:	461a      	mov	r2, r3
 80147fc:	8c3b      	ldrh	r3, [r7, #32]
 80147fe:	4413      	add	r3, r2
 8014800:	2b0a      	cmp	r3, #10
 8014802:	dd10      	ble.n	8014826 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014804:	8c3b      	ldrh	r3, [r7, #32]
 8014806:	4619      	mov	r1, r3
 8014808:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801480a:	f7ff fd81 	bl	8014310 <ip_reass_remove_oldest_datagram>
 801480e:	4603      	mov	r3, r0
 8014810:	2b00      	cmp	r3, #0
 8014812:	f000 812d 	beq.w	8014a70 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8014816:	4b9b      	ldr	r3, [pc, #620]	; (8014a84 <ip4_reass+0x30c>)
 8014818:	881b      	ldrh	r3, [r3, #0]
 801481a:	461a      	mov	r2, r3
 801481c:	8c3b      	ldrh	r3, [r7, #32]
 801481e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8014820:	2b0a      	cmp	r3, #10
 8014822:	f300 8125 	bgt.w	8014a70 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014826:	4b98      	ldr	r3, [pc, #608]	; (8014a88 <ip4_reass+0x310>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	633b      	str	r3, [r7, #48]	; 0x30
 801482c:	e015      	b.n	801485a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014830:	695a      	ldr	r2, [r3, #20]
 8014832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	429a      	cmp	r2, r3
 8014838:	d10c      	bne.n	8014854 <ip4_reass+0xdc>
 801483a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801483c:	699a      	ldr	r2, [r3, #24]
 801483e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014840:	691b      	ldr	r3, [r3, #16]
 8014842:	429a      	cmp	r2, r3
 8014844:	d106      	bne.n	8014854 <ip4_reass+0xdc>
 8014846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014848:	899a      	ldrh	r2, [r3, #12]
 801484a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801484c:	889b      	ldrh	r3, [r3, #4]
 801484e:	b29b      	uxth	r3, r3
 8014850:	429a      	cmp	r2, r3
 8014852:	d006      	beq.n	8014862 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8014854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014856:	681b      	ldr	r3, [r3, #0]
 8014858:	633b      	str	r3, [r7, #48]	; 0x30
 801485a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801485c:	2b00      	cmp	r3, #0
 801485e:	d1e6      	bne.n	801482e <ip4_reass+0xb6>
 8014860:	e000      	b.n	8014864 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8014862:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8014864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014866:	2b00      	cmp	r3, #0
 8014868:	d109      	bne.n	801487e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801486a:	8c3b      	ldrh	r3, [r7, #32]
 801486c:	4619      	mov	r1, r3
 801486e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014870:	f7ff fdb0 	bl	80143d4 <ip_reass_enqueue_new_datagram>
 8014874:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8014876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014878:	2b00      	cmp	r3, #0
 801487a:	d11c      	bne.n	80148b6 <ip4_reass+0x13e>
      goto nullreturn;
 801487c:	e0f9      	b.n	8014a72 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801487e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014880:	88db      	ldrh	r3, [r3, #6]
 8014882:	b29b      	uxth	r3, r3
 8014884:	4618      	mov	r0, r3
 8014886:	f7f3 fbf5 	bl	8008074 <lwip_htons>
 801488a:	4603      	mov	r3, r0
 801488c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014890:	2b00      	cmp	r3, #0
 8014892:	d110      	bne.n	80148b6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8014894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014896:	89db      	ldrh	r3, [r3, #14]
 8014898:	4618      	mov	r0, r3
 801489a:	f7f3 fbeb 	bl	8008074 <lwip_htons>
 801489e:	4603      	mov	r3, r0
 80148a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d006      	beq.n	80148b6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80148a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148aa:	3308      	adds	r3, #8
 80148ac:	2214      	movs	r2, #20
 80148ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80148b0:	4618      	mov	r0, r3
 80148b2:	f003 fb5c 	bl	8017f6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80148b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148b8:	88db      	ldrh	r3, [r3, #6]
 80148ba:	b29b      	uxth	r3, r3
 80148bc:	f003 0320 	and.w	r3, r3, #32
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	bf0c      	ite	eq
 80148c4:	2301      	moveq	r3, #1
 80148c6:	2300      	movne	r3, #0
 80148c8:	b2db      	uxtb	r3, r3
 80148ca:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80148cc:	69fb      	ldr	r3, [r7, #28]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d00e      	beq.n	80148f0 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80148d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80148d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148d6:	4413      	add	r3, r2
 80148d8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80148da:	8b7a      	ldrh	r2, [r7, #26]
 80148dc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80148de:	429a      	cmp	r2, r3
 80148e0:	f0c0 80a0 	bcc.w	8014a24 <ip4_reass+0x2ac>
 80148e4:	8b7b      	ldrh	r3, [r7, #26]
 80148e6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80148ea:	4293      	cmp	r3, r2
 80148ec:	f200 809a 	bhi.w	8014a24 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80148f0:	69fa      	ldr	r2, [r7, #28]
 80148f2:	6879      	ldr	r1, [r7, #4]
 80148f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80148f6:	f7ff fdd5 	bl	80144a4 <ip_reass_chain_frag_into_datagram_and_validate>
 80148fa:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80148fc:	697b      	ldr	r3, [r7, #20]
 80148fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014902:	f000 8091 	beq.w	8014a28 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8014906:	4b5f      	ldr	r3, [pc, #380]	; (8014a84 <ip4_reass+0x30c>)
 8014908:	881a      	ldrh	r2, [r3, #0]
 801490a:	8c3b      	ldrh	r3, [r7, #32]
 801490c:	4413      	add	r3, r2
 801490e:	b29a      	uxth	r2, r3
 8014910:	4b5c      	ldr	r3, [pc, #368]	; (8014a84 <ip4_reass+0x30c>)
 8014912:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8014914:	69fb      	ldr	r3, [r7, #28]
 8014916:	2b00      	cmp	r3, #0
 8014918:	d00d      	beq.n	8014936 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801491a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801491c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801491e:	4413      	add	r3, r2
 8014920:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8014922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014924:	8a7a      	ldrh	r2, [r7, #18]
 8014926:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8014928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801492a:	7f9b      	ldrb	r3, [r3, #30]
 801492c:	f043 0301 	orr.w	r3, r3, #1
 8014930:	b2da      	uxtb	r2, r3
 8014932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014934:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8014936:	697b      	ldr	r3, [r7, #20]
 8014938:	2b01      	cmp	r3, #1
 801493a:	d171      	bne.n	8014a20 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801493c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801493e:	8b9b      	ldrh	r3, [r3, #28]
 8014940:	3314      	adds	r3, #20
 8014942:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8014944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014946:	685b      	ldr	r3, [r3, #4]
 8014948:	685b      	ldr	r3, [r3, #4]
 801494a:	681b      	ldr	r3, [r3, #0]
 801494c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	685b      	ldr	r3, [r3, #4]
 8014954:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8014956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014958:	3308      	adds	r3, #8
 801495a:	2214      	movs	r2, #20
 801495c:	4619      	mov	r1, r3
 801495e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014960:	f003 fb05 	bl	8017f6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8014964:	8a3b      	ldrh	r3, [r7, #16]
 8014966:	4618      	mov	r0, r3
 8014968:	f7f3 fb84 	bl	8008074 <lwip_htons>
 801496c:	4603      	mov	r3, r0
 801496e:	461a      	mov	r2, r3
 8014970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014972:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8014974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014976:	2200      	movs	r2, #0
 8014978:	719a      	strb	r2, [r3, #6]
 801497a:	2200      	movs	r2, #0
 801497c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014980:	2200      	movs	r2, #0
 8014982:	729a      	strb	r2, [r3, #10]
 8014984:	2200      	movs	r2, #0
 8014986:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8014988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801498a:	685b      	ldr	r3, [r3, #4]
 801498c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801498e:	e00d      	b.n	80149ac <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8014990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8014996:	2114      	movs	r1, #20
 8014998:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801499a:	f7f4 fe99 	bl	80096d0 <pbuf_remove_header>
      pbuf_cat(p, r);
 801499e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f7f4 ffe9 	bl	8009978 <pbuf_cat>
      r = iprh->next_pbuf;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80149ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1ee      	bne.n	8014990 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80149b2:	4b35      	ldr	r3, [pc, #212]	; (8014a88 <ip4_reass+0x310>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d102      	bne.n	80149c2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80149bc:	2300      	movs	r3, #0
 80149be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149c0:	e010      	b.n	80149e4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80149c2:	4b31      	ldr	r3, [pc, #196]	; (8014a88 <ip4_reass+0x310>)
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149c8:	e007      	b.n	80149da <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80149ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80149d0:	429a      	cmp	r2, r3
 80149d2:	d006      	beq.n	80149e2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80149d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80149da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d1f4      	bne.n	80149ca <ip4_reass+0x252>
 80149e0:	e000      	b.n	80149e4 <ip4_reass+0x26c>
          break;
 80149e2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80149e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80149e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80149e8:	f7ff fd2e 	bl	8014448 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80149ec:	6878      	ldr	r0, [r7, #4]
 80149ee:	f7f4 ff83 	bl	80098f8 <pbuf_clen>
 80149f2:	4603      	mov	r3, r0
 80149f4:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80149f6:	4b23      	ldr	r3, [pc, #140]	; (8014a84 <ip4_reass+0x30c>)
 80149f8:	881b      	ldrh	r3, [r3, #0]
 80149fa:	8c3a      	ldrh	r2, [r7, #32]
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d906      	bls.n	8014a0e <ip4_reass+0x296>
 8014a00:	4b22      	ldr	r3, [pc, #136]	; (8014a8c <ip4_reass+0x314>)
 8014a02:	f240 229b 	movw	r2, #667	; 0x29b
 8014a06:	4922      	ldr	r1, [pc, #136]	; (8014a90 <ip4_reass+0x318>)
 8014a08:	4822      	ldr	r0, [pc, #136]	; (8014a94 <ip4_reass+0x31c>)
 8014a0a:	f003 fac3 	bl	8017f94 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8014a0e:	4b1d      	ldr	r3, [pc, #116]	; (8014a84 <ip4_reass+0x30c>)
 8014a10:	881a      	ldrh	r2, [r3, #0]
 8014a12:	8c3b      	ldrh	r3, [r7, #32]
 8014a14:	1ad3      	subs	r3, r2, r3
 8014a16:	b29a      	uxth	r2, r3
 8014a18:	4b1a      	ldr	r3, [pc, #104]	; (8014a84 <ip4_reass+0x30c>)
 8014a1a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	e02c      	b.n	8014a7a <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8014a20:	2300      	movs	r3, #0
 8014a22:	e02a      	b.n	8014a7a <ip4_reass+0x302>

nullreturn_ipr:
 8014a24:	bf00      	nop
 8014a26:	e000      	b.n	8014a2a <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8014a28:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8014a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d106      	bne.n	8014a3e <ip4_reass+0x2c6>
 8014a30:	4b16      	ldr	r3, [pc, #88]	; (8014a8c <ip4_reass+0x314>)
 8014a32:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8014a36:	4918      	ldr	r1, [pc, #96]	; (8014a98 <ip4_reass+0x320>)
 8014a38:	4816      	ldr	r0, [pc, #88]	; (8014a94 <ip4_reass+0x31c>)
 8014a3a:	f003 faab 	bl	8017f94 <iprintf>
  if (ipr->p == NULL) {
 8014a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014a40:	685b      	ldr	r3, [r3, #4]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d114      	bne.n	8014a70 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8014a46:	4b10      	ldr	r3, [pc, #64]	; (8014a88 <ip4_reass+0x310>)
 8014a48:	681b      	ldr	r3, [r3, #0]
 8014a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014a4c:	429a      	cmp	r2, r3
 8014a4e:	d006      	beq.n	8014a5e <ip4_reass+0x2e6>
 8014a50:	4b0e      	ldr	r3, [pc, #56]	; (8014a8c <ip4_reass+0x314>)
 8014a52:	f240 22ab 	movw	r2, #683	; 0x2ab
 8014a56:	4911      	ldr	r1, [pc, #68]	; (8014a9c <ip4_reass+0x324>)
 8014a58:	480e      	ldr	r0, [pc, #56]	; (8014a94 <ip4_reass+0x31c>)
 8014a5a:	f003 fa9b 	bl	8017f94 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8014a5e:	2100      	movs	r1, #0
 8014a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014a62:	f7ff fcf1 	bl	8014448 <ip_reass_dequeue_datagram>
 8014a66:	e004      	b.n	8014a72 <ip4_reass+0x2fa>
    goto nullreturn;
 8014a68:	bf00      	nop
 8014a6a:	e002      	b.n	8014a72 <ip4_reass+0x2fa>
    goto nullreturn;
 8014a6c:	bf00      	nop
 8014a6e:	e000      	b.n	8014a72 <ip4_reass+0x2fa>
  }

nullreturn:
 8014a70:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8014a72:	6878      	ldr	r0, [r7, #4]
 8014a74:	f7f4 feb2 	bl	80097dc <pbuf_free>
  return NULL;
 8014a78:	2300      	movs	r3, #0
}
 8014a7a:	4618      	mov	r0, r3
 8014a7c:	3738      	adds	r7, #56	; 0x38
 8014a7e:	46bd      	mov	sp, r7
 8014a80:	bd80      	pop	{r7, pc}
 8014a82:	bf00      	nop
 8014a84:	200084f0 	.word	0x200084f0
 8014a88:	200084ec 	.word	0x200084ec
 8014a8c:	0801c520 	.word	0x0801c520
 8014a90:	0801c690 	.word	0x0801c690
 8014a94:	0801c568 	.word	0x0801c568
 8014a98:	0801c6ac 	.word	0x0801c6ac
 8014a9c:	0801c6b8 	.word	0x0801c6b8

08014aa0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8014aa0:	b580      	push	{r7, lr}
 8014aa2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8014aa4:	2005      	movs	r0, #5
 8014aa6:	f7f3 ff9b 	bl	80089e0 <memp_malloc>
 8014aaa:	4603      	mov	r3, r0
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	bd80      	pop	{r7, pc}

08014ab0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8014ab0:	b580      	push	{r7, lr}
 8014ab2:	b082      	sub	sp, #8
 8014ab4:	af00      	add	r7, sp, #0
 8014ab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8014ab8:	687b      	ldr	r3, [r7, #4]
 8014aba:	2b00      	cmp	r3, #0
 8014abc:	d106      	bne.n	8014acc <ip_frag_free_pbuf_custom_ref+0x1c>
 8014abe:	4b07      	ldr	r3, [pc, #28]	; (8014adc <ip_frag_free_pbuf_custom_ref+0x2c>)
 8014ac0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8014ac4:	4906      	ldr	r1, [pc, #24]	; (8014ae0 <ip_frag_free_pbuf_custom_ref+0x30>)
 8014ac6:	4807      	ldr	r0, [pc, #28]	; (8014ae4 <ip_frag_free_pbuf_custom_ref+0x34>)
 8014ac8:	f003 fa64 	bl	8017f94 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8014acc:	6879      	ldr	r1, [r7, #4]
 8014ace:	2005      	movs	r0, #5
 8014ad0:	f7f3 ffd8 	bl	8008a84 <memp_free>
}
 8014ad4:	bf00      	nop
 8014ad6:	3708      	adds	r7, #8
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	0801c520 	.word	0x0801c520
 8014ae0:	0801c6d8 	.word	0x0801c6d8
 8014ae4:	0801c568 	.word	0x0801c568

08014ae8 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8014ae8:	b580      	push	{r7, lr}
 8014aea:	b084      	sub	sp, #16
 8014aec:	af00      	add	r7, sp, #0
 8014aee:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d106      	bne.n	8014b08 <ipfrag_free_pbuf_custom+0x20>
 8014afa:	4b11      	ldr	r3, [pc, #68]	; (8014b40 <ipfrag_free_pbuf_custom+0x58>)
 8014afc:	f240 22ce 	movw	r2, #718	; 0x2ce
 8014b00:	4910      	ldr	r1, [pc, #64]	; (8014b44 <ipfrag_free_pbuf_custom+0x5c>)
 8014b02:	4811      	ldr	r0, [pc, #68]	; (8014b48 <ipfrag_free_pbuf_custom+0x60>)
 8014b04:	f003 fa46 	bl	8017f94 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8014b08:	68fa      	ldr	r2, [r7, #12]
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d006      	beq.n	8014b1e <ipfrag_free_pbuf_custom+0x36>
 8014b10:	4b0b      	ldr	r3, [pc, #44]	; (8014b40 <ipfrag_free_pbuf_custom+0x58>)
 8014b12:	f240 22cf 	movw	r2, #719	; 0x2cf
 8014b16:	490d      	ldr	r1, [pc, #52]	; (8014b4c <ipfrag_free_pbuf_custom+0x64>)
 8014b18:	480b      	ldr	r0, [pc, #44]	; (8014b48 <ipfrag_free_pbuf_custom+0x60>)
 8014b1a:	f003 fa3b 	bl	8017f94 <iprintf>
  if (pcr->original != NULL) {
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	695b      	ldr	r3, [r3, #20]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d004      	beq.n	8014b30 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	695b      	ldr	r3, [r3, #20]
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7f4 fe56 	bl	80097dc <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8014b30:	68f8      	ldr	r0, [r7, #12]
 8014b32:	f7ff ffbd 	bl	8014ab0 <ip_frag_free_pbuf_custom_ref>
}
 8014b36:	bf00      	nop
 8014b38:	3710      	adds	r7, #16
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0801c520 	.word	0x0801c520
 8014b44:	0801c6e4 	.word	0x0801c6e4
 8014b48:	0801c568 	.word	0x0801c568
 8014b4c:	0801c6f0 	.word	0x0801c6f0

08014b50 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b094      	sub	sp, #80	; 0x50
 8014b54:	af02      	add	r7, sp, #8
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8014b62:	68bb      	ldr	r3, [r7, #8]
 8014b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014b66:	3b14      	subs	r3, #20
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	da00      	bge.n	8014b6e <ip4_frag+0x1e>
 8014b6c:	3307      	adds	r3, #7
 8014b6e:	10db      	asrs	r3, r3, #3
 8014b70:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8014b72:	2314      	movs	r3, #20
 8014b74:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8014b76:	68fb      	ldr	r3, [r7, #12]
 8014b78:	685b      	ldr	r3, [r3, #4]
 8014b7a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8014b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014b7e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8014b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014b82:	781b      	ldrb	r3, [r3, #0]
 8014b84:	f003 030f 	and.w	r3, r3, #15
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	b2db      	uxtb	r3, r3
 8014b8e:	2b14      	cmp	r3, #20
 8014b90:	d002      	beq.n	8014b98 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8014b92:	f06f 0305 	mvn.w	r3, #5
 8014b96:	e10f      	b.n	8014db8 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	895b      	ldrh	r3, [r3, #10]
 8014b9c:	2b13      	cmp	r3, #19
 8014b9e:	d809      	bhi.n	8014bb4 <ip4_frag+0x64>
 8014ba0:	4b87      	ldr	r3, [pc, #540]	; (8014dc0 <ip4_frag+0x270>)
 8014ba2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8014ba6:	4987      	ldr	r1, [pc, #540]	; (8014dc4 <ip4_frag+0x274>)
 8014ba8:	4887      	ldr	r0, [pc, #540]	; (8014dc8 <ip4_frag+0x278>)
 8014baa:	f003 f9f3 	bl	8017f94 <iprintf>
 8014bae:	f06f 0305 	mvn.w	r3, #5
 8014bb2:	e101      	b.n	8014db8 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8014bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014bb6:	88db      	ldrh	r3, [r3, #6]
 8014bb8:	b29b      	uxth	r3, r3
 8014bba:	4618      	mov	r0, r3
 8014bbc:	f7f3 fa5a 	bl	8008074 <lwip_htons>
 8014bc0:	4603      	mov	r3, r0
 8014bc2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8014bc4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014bc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014bca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8014bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014bd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8014bd4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	891b      	ldrh	r3, [r3, #8]
 8014bda:	3b14      	subs	r3, #20
 8014bdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8014be0:	e0e0      	b.n	8014da4 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8014be2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014be4:	00db      	lsls	r3, r3, #3
 8014be6:	b29b      	uxth	r3, r3
 8014be8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014bec:	4293      	cmp	r3, r2
 8014bee:	bf28      	it	cs
 8014bf0:	4613      	movcs	r3, r2
 8014bf2:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8014bf4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014bf8:	2114      	movs	r1, #20
 8014bfa:	200e      	movs	r0, #14
 8014bfc:	f7f4 fb0e 	bl	800921c <pbuf_alloc>
 8014c00:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8014c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	f000 80d4 	beq.w	8014db2 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8014c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c0c:	895b      	ldrh	r3, [r3, #10]
 8014c0e:	2b13      	cmp	r3, #19
 8014c10:	d806      	bhi.n	8014c20 <ip4_frag+0xd0>
 8014c12:	4b6b      	ldr	r3, [pc, #428]	; (8014dc0 <ip4_frag+0x270>)
 8014c14:	f240 3225 	movw	r2, #805	; 0x325
 8014c18:	496c      	ldr	r1, [pc, #432]	; (8014dcc <ip4_frag+0x27c>)
 8014c1a:	486b      	ldr	r0, [pc, #428]	; (8014dc8 <ip4_frag+0x278>)
 8014c1c:	f003 f9ba 	bl	8017f94 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8014c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c22:	685b      	ldr	r3, [r3, #4]
 8014c24:	2214      	movs	r2, #20
 8014c26:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8014c28:	4618      	mov	r0, r3
 8014c2a:	f003 f9a0 	bl	8017f6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8014c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014c30:	685b      	ldr	r3, [r3, #4]
 8014c32:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8014c34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014c36:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8014c3a:	e064      	b.n	8014d06 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	895a      	ldrh	r2, [r3, #10]
 8014c40:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c42:	1ad3      	subs	r3, r2, r3
 8014c44:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	895b      	ldrh	r3, [r3, #10]
 8014c4a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d906      	bls.n	8014c5e <ip4_frag+0x10e>
 8014c50:	4b5b      	ldr	r3, [pc, #364]	; (8014dc0 <ip4_frag+0x270>)
 8014c52:	f240 322d 	movw	r2, #813	; 0x32d
 8014c56:	495e      	ldr	r1, [pc, #376]	; (8014dd0 <ip4_frag+0x280>)
 8014c58:	485b      	ldr	r0, [pc, #364]	; (8014dc8 <ip4_frag+0x278>)
 8014c5a:	f003 f99b 	bl	8017f94 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8014c5e:	8bfa      	ldrh	r2, [r7, #30]
 8014c60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014c64:	4293      	cmp	r3, r2
 8014c66:	bf28      	it	cs
 8014c68:	4613      	movcs	r3, r2
 8014c6a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8014c6e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014c72:	2b00      	cmp	r3, #0
 8014c74:	d105      	bne.n	8014c82 <ip4_frag+0x132>
        poff = 0;
 8014c76:	2300      	movs	r3, #0
 8014c78:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	60fb      	str	r3, [r7, #12]
        continue;
 8014c80:	e041      	b.n	8014d06 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8014c82:	f7ff ff0d 	bl	8014aa0 <ip_frag_alloc_pbuf_custom_ref>
 8014c86:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8014c88:	69bb      	ldr	r3, [r7, #24]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d103      	bne.n	8014c96 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8014c8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014c90:	f7f4 fda4 	bl	80097dc <pbuf_free>
        goto memerr;
 8014c94:	e08e      	b.n	8014db4 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c96:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8014c9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8014c9e:	4413      	add	r3, r2
 8014ca0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8014ca4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8014ca8:	9201      	str	r2, [sp, #4]
 8014caa:	9300      	str	r3, [sp, #0]
 8014cac:	4603      	mov	r3, r0
 8014cae:	2241      	movs	r2, #65	; 0x41
 8014cb0:	2000      	movs	r0, #0
 8014cb2:	f7f4 fbd9 	bl	8009468 <pbuf_alloced_custom>
 8014cb6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8014cb8:	697b      	ldr	r3, [r7, #20]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	d106      	bne.n	8014ccc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8014cbe:	69b8      	ldr	r0, [r7, #24]
 8014cc0:	f7ff fef6 	bl	8014ab0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8014cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014cc6:	f7f4 fd89 	bl	80097dc <pbuf_free>
        goto memerr;
 8014cca:	e073      	b.n	8014db4 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8014ccc:	68f8      	ldr	r0, [r7, #12]
 8014cce:	f7f4 fe2b 	bl	8009928 <pbuf_ref>
      pcr->original = p;
 8014cd2:	69bb      	ldr	r3, [r7, #24]
 8014cd4:	68fa      	ldr	r2, [r7, #12]
 8014cd6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	4a3e      	ldr	r2, [pc, #248]	; (8014dd4 <ip4_frag+0x284>)
 8014cdc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8014cde:	6979      	ldr	r1, [r7, #20]
 8014ce0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014ce2:	f7f4 fe49 	bl	8009978 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8014ce6:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8014cea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8014cf4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d004      	beq.n	8014d06 <ip4_frag+0x1b6>
        poff = 0;
 8014cfc:	2300      	movs	r3, #0
 8014cfe:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8014d06:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d196      	bne.n	8014c3c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8014d0e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8014d10:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8014d14:	4413      	add	r3, r2
 8014d16:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8014d18:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d1c:	68bb      	ldr	r3, [r7, #8]
 8014d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d20:	3b14      	subs	r3, #20
 8014d22:	429a      	cmp	r2, r3
 8014d24:	bfd4      	ite	le
 8014d26:	2301      	movle	r3, #1
 8014d28:	2300      	movgt	r3, #0
 8014d2a:	b2db      	uxtb	r3, r3
 8014d2c:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8014d2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8014d32:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8014d36:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8014d38:	6a3b      	ldr	r3, [r7, #32]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d002      	beq.n	8014d44 <ip4_frag+0x1f4>
 8014d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d003      	beq.n	8014d4c <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8014d44:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d46:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8014d4a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8014d4c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8014d4e:	4618      	mov	r0, r3
 8014d50:	f7f3 f990 	bl	8008074 <lwip_htons>
 8014d54:	4603      	mov	r3, r0
 8014d56:	461a      	mov	r2, r3
 8014d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d5a:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8014d5c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d5e:	3314      	adds	r3, #20
 8014d60:	b29b      	uxth	r3, r3
 8014d62:	4618      	mov	r0, r3
 8014d64:	f7f3 f986 	bl	8008074 <lwip_htons>
 8014d68:	4603      	mov	r3, r0
 8014d6a:	461a      	mov	r2, r3
 8014d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d6e:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8014d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014d72:	2200      	movs	r2, #0
 8014d74:	729a      	strb	r2, [r3, #10]
 8014d76:	2200      	movs	r2, #0
 8014d78:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	695b      	ldr	r3, [r3, #20]
 8014d7e:	687a      	ldr	r2, [r7, #4]
 8014d80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014d82:	68b8      	ldr	r0, [r7, #8]
 8014d84:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8014d86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014d88:	f7f4 fd28 	bl	80097dc <pbuf_free>
    left = (u16_t)(left - fragsize);
 8014d8c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014d90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014d92:	1ad3      	subs	r3, r2, r3
 8014d94:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8014d98:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8014d9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8014d9e:	4413      	add	r3, r2
 8014da0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8014da4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014da8:	2b00      	cmp	r3, #0
 8014daa:	f47f af1a 	bne.w	8014be2 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8014dae:	2300      	movs	r3, #0
 8014db0:	e002      	b.n	8014db8 <ip4_frag+0x268>
      goto memerr;
 8014db2:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8014db4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014db8:	4618      	mov	r0, r3
 8014dba:	3748      	adds	r7, #72	; 0x48
 8014dbc:	46bd      	mov	sp, r7
 8014dbe:	bd80      	pop	{r7, pc}
 8014dc0:	0801c520 	.word	0x0801c520
 8014dc4:	0801c6fc 	.word	0x0801c6fc
 8014dc8:	0801c568 	.word	0x0801c568
 8014dcc:	0801c718 	.word	0x0801c718
 8014dd0:	0801c738 	.word	0x0801c738
 8014dd4:	08014ae9 	.word	0x08014ae9

08014dd8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b086      	sub	sp, #24
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
 8014de0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8014de2:	230e      	movs	r3, #14
 8014de4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	895b      	ldrh	r3, [r3, #10]
 8014dea:	2b0e      	cmp	r3, #14
 8014dec:	d96e      	bls.n	8014ecc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	7bdb      	ldrb	r3, [r3, #15]
 8014df2:	2b00      	cmp	r3, #0
 8014df4:	d106      	bne.n	8014e04 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8014df6:	683b      	ldr	r3, [r7, #0]
 8014df8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014dfc:	3301      	adds	r3, #1
 8014dfe:	b2da      	uxtb	r2, r3
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	7b1a      	ldrb	r2, [r3, #12]
 8014e0e:	7b5b      	ldrb	r3, [r3, #13]
 8014e10:	021b      	lsls	r3, r3, #8
 8014e12:	4313      	orrs	r3, r2
 8014e14:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8014e16:	693b      	ldr	r3, [r7, #16]
 8014e18:	781b      	ldrb	r3, [r3, #0]
 8014e1a:	f003 0301 	and.w	r3, r3, #1
 8014e1e:	2b00      	cmp	r3, #0
 8014e20:	d023      	beq.n	8014e6a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8014e22:	693b      	ldr	r3, [r7, #16]
 8014e24:	781b      	ldrb	r3, [r3, #0]
 8014e26:	2b01      	cmp	r3, #1
 8014e28:	d10f      	bne.n	8014e4a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	785b      	ldrb	r3, [r3, #1]
 8014e2e:	2b00      	cmp	r3, #0
 8014e30:	d11b      	bne.n	8014e6a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8014e36:	2b5e      	cmp	r3, #94	; 0x5e
 8014e38:	d117      	bne.n	8014e6a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	7b5b      	ldrb	r3, [r3, #13]
 8014e3e:	f043 0310 	orr.w	r3, r3, #16
 8014e42:	b2da      	uxtb	r2, r3
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	735a      	strb	r2, [r3, #13]
 8014e48:	e00f      	b.n	8014e6a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8014e4a:	693b      	ldr	r3, [r7, #16]
 8014e4c:	2206      	movs	r2, #6
 8014e4e:	4928      	ldr	r1, [pc, #160]	; (8014ef0 <ethernet_input+0x118>)
 8014e50:	4618      	mov	r0, r3
 8014e52:	f003 f87d 	bl	8017f50 <memcmp>
 8014e56:	4603      	mov	r3, r0
 8014e58:	2b00      	cmp	r3, #0
 8014e5a:	d106      	bne.n	8014e6a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	7b5b      	ldrb	r3, [r3, #13]
 8014e60:	f043 0308 	orr.w	r3, r3, #8
 8014e64:	b2da      	uxtb	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8014e6a:	89fb      	ldrh	r3, [r7, #14]
 8014e6c:	2b08      	cmp	r3, #8
 8014e6e:	d003      	beq.n	8014e78 <ethernet_input+0xa0>
 8014e70:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8014e74:	d014      	beq.n	8014ea0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8014e76:	e032      	b.n	8014ede <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014e78:	683b      	ldr	r3, [r7, #0]
 8014e7a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014e7e:	f003 0308 	and.w	r3, r3, #8
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d024      	beq.n	8014ed0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014e86:	8afb      	ldrh	r3, [r7, #22]
 8014e88:	4619      	mov	r1, r3
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f7f4 fc20 	bl	80096d0 <pbuf_remove_header>
 8014e90:	4603      	mov	r3, r0
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d11e      	bne.n	8014ed4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8014e96:	6839      	ldr	r1, [r7, #0]
 8014e98:	6878      	ldr	r0, [r7, #4]
 8014e9a:	f7fe fddd 	bl	8013a58 <ip4_input>
      break;
 8014e9e:	e013      	b.n	8014ec8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014ea0:	683b      	ldr	r3, [r7, #0]
 8014ea2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014ea6:	f003 0308 	and.w	r3, r3, #8
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d014      	beq.n	8014ed8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8014eae:	8afb      	ldrh	r3, [r7, #22]
 8014eb0:	4619      	mov	r1, r3
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7f4 fc0c 	bl	80096d0 <pbuf_remove_header>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d10e      	bne.n	8014edc <ethernet_input+0x104>
        etharp_input(p, netif);
 8014ebe:	6839      	ldr	r1, [r7, #0]
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f7fd ff79 	bl	8012db8 <etharp_input>
      break;
 8014ec6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014ec8:	2300      	movs	r3, #0
 8014eca:	e00c      	b.n	8014ee6 <ethernet_input+0x10e>
    goto free_and_return;
 8014ecc:	bf00      	nop
 8014ece:	e006      	b.n	8014ede <ethernet_input+0x106>
        goto free_and_return;
 8014ed0:	bf00      	nop
 8014ed2:	e004      	b.n	8014ede <ethernet_input+0x106>
        goto free_and_return;
 8014ed4:	bf00      	nop
 8014ed6:	e002      	b.n	8014ede <ethernet_input+0x106>
        goto free_and_return;
 8014ed8:	bf00      	nop
 8014eda:	e000      	b.n	8014ede <ethernet_input+0x106>
        goto free_and_return;
 8014edc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8014ede:	6878      	ldr	r0, [r7, #4]
 8014ee0:	f7f4 fc7c 	bl	80097dc <pbuf_free>
  return ERR_OK;
 8014ee4:	2300      	movs	r3, #0
}
 8014ee6:	4618      	mov	r0, r3
 8014ee8:	3718      	adds	r7, #24
 8014eea:	46bd      	mov	sp, r7
 8014eec:	bd80      	pop	{r7, pc}
 8014eee:	bf00      	nop
 8014ef0:	0801cb10 	.word	0x0801cb10

08014ef4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b086      	sub	sp, #24
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	60f8      	str	r0, [r7, #12]
 8014efc:	60b9      	str	r1, [r7, #8]
 8014efe:	607a      	str	r2, [r7, #4]
 8014f00:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014f02:	8c3b      	ldrh	r3, [r7, #32]
 8014f04:	4618      	mov	r0, r3
 8014f06:	f7f3 f8b5 	bl	8008074 <lwip_htons>
 8014f0a:	4603      	mov	r3, r0
 8014f0c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8014f0e:	210e      	movs	r1, #14
 8014f10:	68b8      	ldr	r0, [r7, #8]
 8014f12:	f7f4 fbcd 	bl	80096b0 <pbuf_add_header>
 8014f16:	4603      	mov	r3, r0
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d125      	bne.n	8014f68 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8014f1c:	68bb      	ldr	r3, [r7, #8]
 8014f1e:	685b      	ldr	r3, [r3, #4]
 8014f20:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014f22:	693b      	ldr	r3, [r7, #16]
 8014f24:	8afa      	ldrh	r2, [r7, #22]
 8014f26:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014f28:	693b      	ldr	r3, [r7, #16]
 8014f2a:	2206      	movs	r2, #6
 8014f2c:	6839      	ldr	r1, [r7, #0]
 8014f2e:	4618      	mov	r0, r3
 8014f30:	f003 f81d 	bl	8017f6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014f34:	693b      	ldr	r3, [r7, #16]
 8014f36:	3306      	adds	r3, #6
 8014f38:	2206      	movs	r2, #6
 8014f3a:	6879      	ldr	r1, [r7, #4]
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f003 f816 	bl	8017f6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014f48:	2b06      	cmp	r3, #6
 8014f4a:	d006      	beq.n	8014f5a <ethernet_output+0x66>
 8014f4c:	4b0a      	ldr	r3, [pc, #40]	; (8014f78 <ethernet_output+0x84>)
 8014f4e:	f240 1233 	movw	r2, #307	; 0x133
 8014f52:	490a      	ldr	r1, [pc, #40]	; (8014f7c <ethernet_output+0x88>)
 8014f54:	480a      	ldr	r0, [pc, #40]	; (8014f80 <ethernet_output+0x8c>)
 8014f56:	f003 f81d 	bl	8017f94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8014f5a:	68fb      	ldr	r3, [r7, #12]
 8014f5c:	699b      	ldr	r3, [r3, #24]
 8014f5e:	68b9      	ldr	r1, [r7, #8]
 8014f60:	68f8      	ldr	r0, [r7, #12]
 8014f62:	4798      	blx	r3
 8014f64:	4603      	mov	r3, r0
 8014f66:	e002      	b.n	8014f6e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8014f68:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8014f6a:	f06f 0301 	mvn.w	r3, #1
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	3718      	adds	r7, #24
 8014f72:	46bd      	mov	sp, r7
 8014f74:	bd80      	pop	{r7, pc}
 8014f76:	bf00      	nop
 8014f78:	0801c748 	.word	0x0801c748
 8014f7c:	0801c780 	.word	0x0801c780
 8014f80:	0801c7b4 	.word	0x0801c7b4

08014f84 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8014f84:	b580      	push	{r7, lr}
 8014f86:	b086      	sub	sp, #24
 8014f88:	af00      	add	r7, sp, #0
 8014f8a:	6078      	str	r0, [r7, #4]
 8014f8c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8014f8e:	683b      	ldr	r3, [r7, #0]
 8014f90:	60bb      	str	r3, [r7, #8]
 8014f92:	2304      	movs	r3, #4
 8014f94:	60fb      	str	r3, [r7, #12]
 8014f96:	2300      	movs	r3, #0
 8014f98:	613b      	str	r3, [r7, #16]
 8014f9a:	2300      	movs	r3, #0
 8014f9c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8014f9e:	f107 0308 	add.w	r3, r7, #8
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	4618      	mov	r0, r3
 8014fa6:	f7ee f89c 	bl	80030e2 <osMessageCreate>
 8014faa:	4602      	mov	r2, r0
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	681b      	ldr	r3, [r3, #0]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d102      	bne.n	8014fbe <sys_mbox_new+0x3a>
    return ERR_MEM;
 8014fb8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fbc:	e000      	b.n	8014fc0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3718      	adds	r7, #24
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}

08014fc8 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8014fc8:	b580      	push	{r7, lr}
 8014fca:	b082      	sub	sp, #8
 8014fcc:	af00      	add	r7, sp, #0
 8014fce:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8014fd0:	687b      	ldr	r3, [r7, #4]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	4618      	mov	r0, r3
 8014fd6:	f7ee f961 	bl	800329c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	681b      	ldr	r3, [r3, #0]
 8014fde:	4618      	mov	r0, r3
 8014fe0:	f7ee f972 	bl	80032c8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8014fe4:	bf00      	nop
 8014fe6:	3708      	adds	r7, #8
 8014fe8:	46bd      	mov	sp, r7
 8014fea:	bd80      	pop	{r7, pc}

08014fec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014fec:	b580      	push	{r7, lr}
 8014fee:	b084      	sub	sp, #16
 8014ff0:	af00      	add	r7, sp, #0
 8014ff2:	6078      	str	r0, [r7, #4]
 8014ff4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	6839      	ldr	r1, [r7, #0]
 8014ffc:	2200      	movs	r2, #0
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7ee f898 	bl	8003134 <osMessagePut>
 8015004:	4603      	mov	r3, r0
 8015006:	2b00      	cmp	r3, #0
 8015008:	d102      	bne.n	8015010 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801500a:	2300      	movs	r3, #0
 801500c:	73fb      	strb	r3, [r7, #15]
 801500e:	e001      	b.n	8015014 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015010:	23ff      	movs	r3, #255	; 0xff
 8015012:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015014:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015018:	4618      	mov	r0, r3
 801501a:	3710      	adds	r7, #16
 801501c:	46bd      	mov	sp, r7
 801501e:	bd80      	pop	{r7, pc}

08015020 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015020:	b580      	push	{r7, lr}
 8015022:	b08c      	sub	sp, #48	; 0x30
 8015024:	af00      	add	r7, sp, #0
 8015026:	61f8      	str	r0, [r7, #28]
 8015028:	61b9      	str	r1, [r7, #24]
 801502a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801502c:	f7ed fe81 	bl	8002d32 <osKernelSysTick>
 8015030:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015032:	697b      	ldr	r3, [r7, #20]
 8015034:	2b00      	cmp	r3, #0
 8015036:	d017      	beq.n	8015068 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8015038:	69fb      	ldr	r3, [r7, #28]
 801503a:	6819      	ldr	r1, [r3, #0]
 801503c:	f107 0320 	add.w	r3, r7, #32
 8015040:	697a      	ldr	r2, [r7, #20]
 8015042:	4618      	mov	r0, r3
 8015044:	f7ee f8b6 	bl	80031b4 <osMessageGet>

    if(event.status == osEventMessage)
 8015048:	6a3b      	ldr	r3, [r7, #32]
 801504a:	2b10      	cmp	r3, #16
 801504c:	d109      	bne.n	8015062 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015050:	461a      	mov	r2, r3
 8015052:	69bb      	ldr	r3, [r7, #24]
 8015054:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8015056:	f7ed fe6c 	bl	8002d32 <osKernelSysTick>
 801505a:	4602      	mov	r2, r0
 801505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	e019      	b.n	8015096 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015062:	f04f 33ff 	mov.w	r3, #4294967295
 8015066:	e016      	b.n	8015096 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8015068:	69fb      	ldr	r3, [r7, #28]
 801506a:	6819      	ldr	r1, [r3, #0]
 801506c:	463b      	mov	r3, r7
 801506e:	f04f 32ff 	mov.w	r2, #4294967295
 8015072:	4618      	mov	r0, r3
 8015074:	f7ee f89e 	bl	80031b4 <osMessageGet>
 8015078:	f107 0320 	add.w	r3, r7, #32
 801507c:	463a      	mov	r2, r7
 801507e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015080:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8015084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015086:	461a      	mov	r2, r3
 8015088:	69bb      	ldr	r3, [r7, #24]
 801508a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801508c:	f7ed fe51 	bl	8002d32 <osKernelSysTick>
 8015090:	4602      	mov	r2, r0
 8015092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015094:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8015096:	4618      	mov	r0, r3
 8015098:	3730      	adds	r7, #48	; 0x30
 801509a:	46bd      	mov	sp, r7
 801509c:	bd80      	pop	{r7, pc}

0801509e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801509e:	b580      	push	{r7, lr}
 80150a0:	b086      	sub	sp, #24
 80150a2:	af00      	add	r7, sp, #0
 80150a4:	6078      	str	r0, [r7, #4]
 80150a6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	6819      	ldr	r1, [r3, #0]
 80150ac:	f107 030c 	add.w	r3, r7, #12
 80150b0:	2200      	movs	r2, #0
 80150b2:	4618      	mov	r0, r3
 80150b4:	f7ee f87e 	bl	80031b4 <osMessageGet>

  if(event.status == osEventMessage)
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	2b10      	cmp	r3, #16
 80150bc:	d105      	bne.n	80150ca <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 80150be:	693b      	ldr	r3, [r7, #16]
 80150c0:	461a      	mov	r2, r3
 80150c2:	683b      	ldr	r3, [r7, #0]
 80150c4:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 80150c6:	2300      	movs	r3, #0
 80150c8:	e001      	b.n	80150ce <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80150ca:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80150ce:	4618      	mov	r0, r3
 80150d0:	3718      	adds	r7, #24
 80150d2:	46bd      	mov	sp, r7
 80150d4:	bd80      	pop	{r7, pc}

080150d6 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80150d6:	b480      	push	{r7}
 80150d8:	b083      	sub	sp, #12
 80150da:	af00      	add	r7, sp, #0
 80150dc:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d101      	bne.n	80150ea <sys_mbox_valid+0x14>
    return 0;
 80150e6:	2300      	movs	r3, #0
 80150e8:	e000      	b.n	80150ec <sys_mbox_valid+0x16>
  else
    return 1;
 80150ea:	2301      	movs	r3, #1
}
 80150ec:	4618      	mov	r0, r3
 80150ee:	370c      	adds	r7, #12
 80150f0:	46bd      	mov	sp, r7
 80150f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150f6:	4770      	bx	lr

080150f8 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80150f8:	b480      	push	{r7}
 80150fa:	b083      	sub	sp, #12
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2200      	movs	r2, #0
 8015104:	601a      	str	r2, [r3, #0]
}
 8015106:	bf00      	nop
 8015108:	370c      	adds	r7, #12
 801510a:	46bd      	mov	sp, r7
 801510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015110:	4770      	bx	lr

08015112 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8015112:	b580      	push	{r7, lr}
 8015114:	b084      	sub	sp, #16
 8015116:	af00      	add	r7, sp, #0
 8015118:	6078      	str	r0, [r7, #4]
 801511a:	460b      	mov	r3, r1
 801511c:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801511e:	2300      	movs	r3, #0
 8015120:	60bb      	str	r3, [r7, #8]
 8015122:	2300      	movs	r3, #0
 8015124:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8015126:	f107 0308 	add.w	r3, r7, #8
 801512a:	2101      	movs	r1, #1
 801512c:	4618      	mov	r0, r3
 801512e:	f7ed ff0d 	bl	8002f4c <osSemaphoreCreate>
 8015132:	4602      	mov	r2, r0
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d102      	bne.n	8015146 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015140:	f04f 33ff 	mov.w	r3, #4294967295
 8015144:	e009      	b.n	801515a <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8015146:	78fb      	ldrb	r3, [r7, #3]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d105      	bne.n	8015158 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	681b      	ldr	r3, [r3, #0]
 8015150:	2100      	movs	r1, #0
 8015152:	4618      	mov	r0, r3
 8015154:	f7ed ff2e 	bl	8002fb4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8015158:	2300      	movs	r3, #0
}
 801515a:	4618      	mov	r0, r3
 801515c:	3710      	adds	r7, #16
 801515e:	46bd      	mov	sp, r7
 8015160:	bd80      	pop	{r7, pc}

08015162 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8015162:	b580      	push	{r7, lr}
 8015164:	b084      	sub	sp, #16
 8015166:	af00      	add	r7, sp, #0
 8015168:	6078      	str	r0, [r7, #4]
 801516a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801516c:	f7ed fde1 	bl	8002d32 <osKernelSysTick>
 8015170:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015172:	683b      	ldr	r3, [r7, #0]
 8015174:	2b00      	cmp	r3, #0
 8015176:	d011      	beq.n	801519c <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	6839      	ldr	r1, [r7, #0]
 801517e:	4618      	mov	r0, r3
 8015180:	f7ed ff18 	bl	8002fb4 <osSemaphoreWait>
 8015184:	4603      	mov	r3, r0
 8015186:	2b00      	cmp	r3, #0
 8015188:	d105      	bne.n	8015196 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801518a:	f7ed fdd2 	bl	8002d32 <osKernelSysTick>
 801518e:	4602      	mov	r2, r0
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	1ad3      	subs	r3, r2, r3
 8015194:	e012      	b.n	80151bc <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8015196:	f04f 33ff 	mov.w	r3, #4294967295
 801519a:	e00f      	b.n	80151bc <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801519c:	bf00      	nop
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f04f 31ff 	mov.w	r1, #4294967295
 80151a6:	4618      	mov	r0, r3
 80151a8:	f7ed ff04 	bl	8002fb4 <osSemaphoreWait>
 80151ac:	4603      	mov	r3, r0
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d1f5      	bne.n	801519e <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 80151b2:	f7ed fdbe 	bl	8002d32 <osKernelSysTick>
 80151b6:	4602      	mov	r2, r0
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 80151bc:	4618      	mov	r0, r3
 80151be:	3710      	adds	r7, #16
 80151c0:	46bd      	mov	sp, r7
 80151c2:	bd80      	pop	{r7, pc}

080151c4 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 80151c4:	b580      	push	{r7, lr}
 80151c6:	b082      	sub	sp, #8
 80151c8:	af00      	add	r7, sp, #0
 80151ca:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ed ff3d 	bl	8003050 <osSemaphoreRelease>
}
 80151d6:	bf00      	nop
 80151d8:	3708      	adds	r7, #8
 80151da:	46bd      	mov	sp, r7
 80151dc:	bd80      	pop	{r7, pc}

080151de <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 80151de:	b580      	push	{r7, lr}
 80151e0:	b082      	sub	sp, #8
 80151e2:	af00      	add	r7, sp, #0
 80151e4:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7ed ff66 	bl	80030bc <osSemaphoreDelete>
}
 80151f0:	bf00      	nop
 80151f2:	3708      	adds	r7, #8
 80151f4:	46bd      	mov	sp, r7
 80151f6:	bd80      	pop	{r7, pc}

080151f8 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 80151f8:	b480      	push	{r7}
 80151fa:	b083      	sub	sp, #12
 80151fc:	af00      	add	r7, sp, #0
 80151fe:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d101      	bne.n	801520c <sys_sem_valid+0x14>
    return 0;
 8015208:	2300      	movs	r3, #0
 801520a:	e000      	b.n	801520e <sys_sem_valid+0x16>
  else
    return 1;
 801520c:	2301      	movs	r3, #1
}
 801520e:	4618      	mov	r0, r3
 8015210:	370c      	adds	r7, #12
 8015212:	46bd      	mov	sp, r7
 8015214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015218:	4770      	bx	lr

0801521a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801521a:	b480      	push	{r7}
 801521c:	b083      	sub	sp, #12
 801521e:	af00      	add	r7, sp, #0
 8015220:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	2200      	movs	r2, #0
 8015226:	601a      	str	r2, [r3, #0]
}
 8015228:	bf00      	nop
 801522a:	370c      	adds	r7, #12
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8015234:	b580      	push	{r7, lr}
 8015236:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8015238:	4803      	ldr	r0, [pc, #12]	; (8015248 <sys_init+0x14>)
 801523a:	f7ed fdea 	bl	8002e12 <osMutexCreate>
 801523e:	4602      	mov	r2, r0
 8015240:	4b02      	ldr	r3, [pc, #8]	; (801524c <sys_init+0x18>)
 8015242:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8015244:	bf00      	nop
 8015246:	bd80      	pop	{r7, pc}
 8015248:	0801cb20 	.word	0x0801cb20
 801524c:	2000c524 	.word	0x2000c524

08015250 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8015250:	b580      	push	{r7, lr}
 8015252:	b084      	sub	sp, #16
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8015258:	2300      	movs	r3, #0
 801525a:	60bb      	str	r3, [r7, #8]
 801525c:	2300      	movs	r3, #0
 801525e:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8015260:	f107 0308 	add.w	r3, r7, #8
 8015264:	4618      	mov	r0, r3
 8015266:	f7ed fdd4 	bl	8002e12 <osMutexCreate>
 801526a:	4602      	mov	r2, r0
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d102      	bne.n	801527e <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8015278:	f04f 33ff 	mov.w	r3, #4294967295
 801527c:	e000      	b.n	8015280 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801527e:	2300      	movs	r3, #0
}
 8015280:	4618      	mov	r0, r3
 8015282:	3710      	adds	r7, #16
 8015284:	46bd      	mov	sp, r7
 8015286:	bd80      	pop	{r7, pc}

08015288 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
 801528e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f04f 31ff 	mov.w	r1, #4294967295
 8015298:	4618      	mov	r0, r3
 801529a:	f7ed fdd3 	bl	8002e44 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801529e:	bf00      	nop
 80152a0:	3708      	adds	r7, #8
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd80      	pop	{r7, pc}

080152a6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80152a6:	b580      	push	{r7, lr}
 80152a8:	b082      	sub	sp, #8
 80152aa:	af00      	add	r7, sp, #0
 80152ac:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	4618      	mov	r0, r3
 80152b4:	f7ed fe14 	bl	8002ee0 <osMutexRelease>
}
 80152b8:	bf00      	nop
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}

080152c0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80152c0:	b580      	push	{r7, lr}
 80152c2:	b08c      	sub	sp, #48	; 0x30
 80152c4:	af00      	add	r7, sp, #0
 80152c6:	60f8      	str	r0, [r7, #12]
 80152c8:	60b9      	str	r1, [r7, #8]
 80152ca:	607a      	str	r2, [r7, #4]
 80152cc:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 80152ce:	f107 0314 	add.w	r3, r7, #20
 80152d2:	2200      	movs	r2, #0
 80152d4:	601a      	str	r2, [r3, #0]
 80152d6:	605a      	str	r2, [r3, #4]
 80152d8:	609a      	str	r2, [r3, #8]
 80152da:	60da      	str	r2, [r3, #12]
 80152dc:	611a      	str	r2, [r3, #16]
 80152de:	615a      	str	r2, [r3, #20]
 80152e0:	619a      	str	r2, [r3, #24]
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	617b      	str	r3, [r7, #20]
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	61bb      	str	r3, [r7, #24]
 80152ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80152ec:	b21b      	sxth	r3, r3
 80152ee:	83bb      	strh	r3, [r7, #28]
 80152f0:	683b      	ldr	r3, [r7, #0]
 80152f2:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 80152f4:	f107 0314 	add.w	r3, r7, #20
 80152f8:	6879      	ldr	r1, [r7, #4]
 80152fa:	4618      	mov	r0, r3
 80152fc:	f7ed fd29 	bl	8002d52 <osThreadCreate>
 8015300:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8015302:	4618      	mov	r0, r3
 8015304:	3730      	adds	r7, #48	; 0x30
 8015306:	46bd      	mov	sp, r7
 8015308:	bd80      	pop	{r7, pc}
	...

0801530c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801530c:	b580      	push	{r7, lr}
 801530e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8015310:	4b04      	ldr	r3, [pc, #16]	; (8015324 <sys_arch_protect+0x18>)
 8015312:	681b      	ldr	r3, [r3, #0]
 8015314:	f04f 31ff 	mov.w	r1, #4294967295
 8015318:	4618      	mov	r0, r3
 801531a:	f7ed fd93 	bl	8002e44 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801531e:	2301      	movs	r3, #1
}
 8015320:	4618      	mov	r0, r3
 8015322:	bd80      	pop	{r7, pc}
 8015324:	2000c524 	.word	0x2000c524

08015328 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b082      	sub	sp, #8
 801532c:	af00      	add	r7, sp, #0
 801532e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8015330:	4b04      	ldr	r3, [pc, #16]	; (8015344 <sys_arch_unprotect+0x1c>)
 8015332:	681b      	ldr	r3, [r3, #0]
 8015334:	4618      	mov	r0, r3
 8015336:	f7ed fdd3 	bl	8002ee0 <osMutexRelease>
}
 801533a:	bf00      	nop
 801533c:	3708      	adds	r7, #8
 801533e:	46bd      	mov	sp, r7
 8015340:	bd80      	pop	{r7, pc}
 8015342:	bf00      	nop
 8015344:	2000c524 	.word	0x2000c524

08015348 <NewMessageData>:
 *******************************************************************************/
#include <MQTTClient.h>
#include <stdio.h>
#include <string.h>

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 8015348:	b480      	push	{r7}
 801534a:	b085      	sub	sp, #20
 801534c:	af00      	add	r7, sp, #0
 801534e:	60f8      	str	r0, [r7, #12]
 8015350:	60b9      	str	r1, [r7, #8]
 8015352:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	68ba      	ldr	r2, [r7, #8]
 8015358:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 801535a:	68fb      	ldr	r3, [r7, #12]
 801535c:	687a      	ldr	r2, [r7, #4]
 801535e:	601a      	str	r2, [r3, #0]
}
 8015360:	bf00      	nop
 8015362:	3714      	adds	r7, #20
 8015364:	46bd      	mov	sp, r7
 8015366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801536a:	4770      	bx	lr

0801536c <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 801536c:	b480      	push	{r7}
 801536e:	b083      	sub	sp, #12
 8015370:	af00      	add	r7, sp, #0
 8015372:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	681b      	ldr	r3, [r3, #0]
 8015378:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801537c:	4293      	cmp	r3, r2
 801537e:	d003      	beq.n	8015388 <getNextPacketId+0x1c>
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	3301      	adds	r3, #1
 8015386:	e000      	b.n	801538a <getNextPacketId+0x1e>
 8015388:	2301      	movs	r3, #1
 801538a:	687a      	ldr	r2, [r7, #4]
 801538c:	6013      	str	r3, [r2, #0]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
}
 8015392:	4618      	mov	r0, r3
 8015394:	370c      	adds	r7, #12
 8015396:	46bd      	mov	sp, r7
 8015398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801539c:	4770      	bx	lr

0801539e <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 801539e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80153a0:	b087      	sub	sp, #28
 80153a2:	af00      	add	r7, sp, #0
 80153a4:	60f8      	str	r0, [r7, #12]
 80153a6:	60b9      	str	r1, [r7, #8]
 80153a8:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 80153aa:	f04f 33ff 	mov.w	r3, #4294967295
 80153ae:	617b      	str	r3, [r7, #20]
        sent = 0;
 80153b0:	2300      	movs	r3, #0
 80153b2:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 80153b4:	e018      	b.n	80153e8 <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 80153b6:	68fb      	ldr	r3, [r7, #12]
 80153b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80153ba:	689c      	ldr	r4, [r3, #8]
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	691a      	ldr	r2, [r3, #16]
 80153c4:	693b      	ldr	r3, [r7, #16]
 80153c6:	18d6      	adds	r6, r2, r3
 80153c8:	6878      	ldr	r0, [r7, #4]
 80153ca:	f001 f87d 	bl	80164c8 <TimerLeftMS>
 80153ce:	4603      	mov	r3, r0
 80153d0:	68ba      	ldr	r2, [r7, #8]
 80153d2:	4631      	mov	r1, r6
 80153d4:	4628      	mov	r0, r5
 80153d6:	47a0      	blx	r4
 80153d8:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	2b00      	cmp	r3, #0
 80153de:	db0e      	blt.n	80153fe <sendPacket+0x60>
            break;
        sent += rc;
 80153e0:	693a      	ldr	r2, [r7, #16]
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	4413      	add	r3, r2
 80153e6:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 80153e8:	693a      	ldr	r2, [r7, #16]
 80153ea:	68bb      	ldr	r3, [r7, #8]
 80153ec:	429a      	cmp	r2, r3
 80153ee:	da07      	bge.n	8015400 <sendPacket+0x62>
 80153f0:	6878      	ldr	r0, [r7, #4]
 80153f2:	f001 f827 	bl	8016444 <TimerIsExpired>
 80153f6:	4603      	mov	r3, r0
 80153f8:	2b00      	cmp	r3, #0
 80153fa:	d0dc      	beq.n	80153b6 <sendPacket+0x18>
 80153fc:	e000      	b.n	8015400 <sendPacket+0x62>
            break;
 80153fe:	bf00      	nop
    }
    if (sent == length)
 8015400:	693a      	ldr	r2, [r7, #16]
 8015402:	68bb      	ldr	r3, [r7, #8]
 8015404:	429a      	cmp	r2, r3
 8015406:	d10b      	bne.n	8015420 <sendPacket+0x82>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have MQTT_SUCESSfully sent the packet
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	f103 0258 	add.w	r2, r3, #88	; 0x58
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	699b      	ldr	r3, [r3, #24]
 8015412:	4619      	mov	r1, r3
 8015414:	4610      	mov	r0, r2
 8015416:	f001 f83f 	bl	8016498 <TimerCountdown>
        rc = MQTT_SUCESS;
 801541a:	2300      	movs	r3, #0
 801541c:	617b      	str	r3, [r7, #20]
 801541e:	e002      	b.n	8015426 <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 8015420:	f04f 33ff 	mov.w	r3, #4294967295
 8015424:	617b      	str	r3, [r7, #20]
    return rc;
 8015426:	697b      	ldr	r3, [r7, #20]
}
 8015428:	4618      	mov	r0, r3
 801542a:	371c      	adds	r7, #28
 801542c:	46bd      	mov	sp, r7
 801542e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015430 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b086      	sub	sp, #24
 8015434:	af00      	add	r7, sp, #0
 8015436:	60f8      	str	r0, [r7, #12]
 8015438:	60b9      	str	r1, [r7, #8]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	68ba      	ldr	r2, [r7, #8]
 8015442:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015444:	2300      	movs	r3, #0
 8015446:	617b      	str	r3, [r7, #20]
 8015448:	e008      	b.n	801545c <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	697a      	ldr	r2, [r7, #20]
 801544e:	3205      	adds	r2, #5
 8015450:	2100      	movs	r1, #0
 8015452:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015456:	697b      	ldr	r3, [r7, #20]
 8015458:	3301      	adds	r3, #1
 801545a:	617b      	str	r3, [r7, #20]
 801545c:	697b      	ldr	r3, [r7, #20]
 801545e:	2b04      	cmp	r3, #4
 8015460:	ddf3      	ble.n	801544a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	687a      	ldr	r2, [r7, #4]
 8015466:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	683a      	ldr	r2, [r7, #0]
 801546c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 801546e:	68fb      	ldr	r3, [r7, #12]
 8015470:	6a3a      	ldr	r2, [r7, #32]
 8015472:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 8015474:	68fb      	ldr	r3, [r7, #12]
 8015476:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015478:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801547e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 8015480:	68fb      	ldr	r3, [r7, #12]
 8015482:	2200      	movs	r2, #0
 8015484:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2200      	movs	r2, #0
 801548a:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	2200      	movs	r2, #0
 8015490:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 8015492:	68fb      	ldr	r3, [r7, #12]
 8015494:	2200      	movs	r2, #0
 8015496:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	2201      	movs	r2, #1
 801549c:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	3358      	adds	r3, #88	; 0x58
 80154a2:	4618      	mov	r0, r3
 80154a4:	f001 f826 	bl	80164f4 <TimerInit>
    TimerInit(&c->last_received);
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	3360      	adds	r3, #96	; 0x60
 80154ac:	4618      	mov	r0, r3
 80154ae:	f001 f821 	bl	80164f4 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 80154b2:	bf00      	nop
 80154b4:	3718      	adds	r7, #24
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}

080154ba <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 80154ba:	b590      	push	{r4, r7, lr}
 80154bc:	b08b      	sub	sp, #44	; 0x2c
 80154be:	af00      	add	r7, sp, #0
 80154c0:	60f8      	str	r0, [r7, #12]
 80154c2:	60b9      	str	r1, [r7, #8]
 80154c4:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 80154c6:	2301      	movs	r3, #1
 80154c8:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 80154ca:	2300      	movs	r3, #0
 80154cc:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 80154ce:	2304      	movs	r3, #4
 80154d0:	61fb      	str	r3, [r7, #28]

    *value = 0;
 80154d2:	68bb      	ldr	r3, [r7, #8]
 80154d4:	2200      	movs	r2, #0
 80154d6:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 80154d8:	f04f 33ff 	mov.w	r3, #4294967295
 80154dc:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 80154de:	6a3b      	ldr	r3, [r7, #32]
 80154e0:	3301      	adds	r3, #1
 80154e2:	623b      	str	r3, [r7, #32]
 80154e4:	6a3a      	ldr	r2, [r7, #32]
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	429a      	cmp	r2, r3
 80154ea:	dd03      	ble.n	80154f4 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 80154ec:	f04f 33ff 	mov.w	r3, #4294967295
 80154f0:	61bb      	str	r3, [r7, #24]
            goto exit;
 80154f2:	e021      	b.n	8015538 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80154f8:	685c      	ldr	r4, [r3, #4]
 80154fa:	68fb      	ldr	r3, [r7, #12]
 80154fc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80154fe:	f107 0117 	add.w	r1, r7, #23
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	2201      	movs	r2, #1
 8015506:	47a0      	blx	r4
 8015508:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	2b01      	cmp	r3, #1
 801550e:	d112      	bne.n	8015536 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 8015510:	68bb      	ldr	r3, [r7, #8]
 8015512:	681a      	ldr	r2, [r3, #0]
 8015514:	7dfb      	ldrb	r3, [r7, #23]
 8015516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801551a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801551c:	fb01 f303 	mul.w	r3, r1, r3
 8015520:	441a      	add	r2, r3
 8015522:	68bb      	ldr	r3, [r7, #8]
 8015524:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 8015526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015528:	01db      	lsls	r3, r3, #7
 801552a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 801552c:	7dfb      	ldrb	r3, [r7, #23]
 801552e:	b25b      	sxtb	r3, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	dbd1      	blt.n	80154d8 <decodePacket+0x1e>
exit:
 8015534:	e000      	b.n	8015538 <decodePacket+0x7e>
            goto exit;
 8015536:	bf00      	nop
    return len;
 8015538:	6a3b      	ldr	r3, [r7, #32]
}
 801553a:	4618      	mov	r0, r3
 801553c:	372c      	adds	r7, #44	; 0x2c
 801553e:	46bd      	mov	sp, r7
 8015540:	bd90      	pop	{r4, r7, pc}

08015542 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 8015542:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015544:	b089      	sub	sp, #36	; 0x24
 8015546:	af00      	add	r7, sp, #0
 8015548:	60f8      	str	r0, [r7, #12]
 801554a:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 801554c:	2300      	movs	r3, #0
 801554e:	617b      	str	r3, [r7, #20]
    int len = 0;
 8015550:	2300      	movs	r3, #0
 8015552:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 8015554:	2300      	movs	r3, #0
 8015556:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801555c:	685c      	ldr	r4, [r3, #4]
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	695e      	ldr	r6, [r3, #20]
 8015566:	68b8      	ldr	r0, [r7, #8]
 8015568:	f000 ffae 	bl	80164c8 <TimerLeftMS>
 801556c:	4603      	mov	r3, r0
 801556e:	2201      	movs	r2, #1
 8015570:	4631      	mov	r1, r6
 8015572:	4628      	mov	r0, r5
 8015574:	47a0      	blx	r4
 8015576:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	2b01      	cmp	r3, #1
 801557c:	d15d      	bne.n	801563a <readPacket+0xf8>
        goto exit;

    len = 1;
 801557e:	2301      	movs	r3, #1
 8015580:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 8015582:	68b8      	ldr	r0, [r7, #8]
 8015584:	f000 ffa0 	bl	80164c8 <TimerLeftMS>
 8015588:	4602      	mov	r2, r0
 801558a:	f107 0310 	add.w	r3, r7, #16
 801558e:	4619      	mov	r1, r3
 8015590:	68f8      	ldr	r0, [r7, #12]
 8015592:	f7ff ff92 	bl	80154ba <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	695b      	ldr	r3, [r3, #20]
 801559a:	3301      	adds	r3, #1
 801559c:	693a      	ldr	r2, [r7, #16]
 801559e:	4611      	mov	r1, r2
 80155a0:	4618      	mov	r0, r3
 80155a2:	f001 f87f 	bl	80166a4 <MQTTPacket_encode>
 80155a6:	4602      	mov	r2, r0
 80155a8:	69bb      	ldr	r3, [r7, #24]
 80155aa:	4413      	add	r3, r2
 80155ac:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 80155ae:	68fb      	ldr	r3, [r7, #12]
 80155b0:	68da      	ldr	r2, [r3, #12]
 80155b2:	69bb      	ldr	r3, [r7, #24]
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	693a      	ldr	r2, [r7, #16]
 80155b8:	4293      	cmp	r3, r2
 80155ba:	d203      	bcs.n	80155c4 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 80155bc:	f06f 0301 	mvn.w	r3, #1
 80155c0:	61fb      	str	r3, [r7, #28]
        goto exit;
 80155c2:	e03d      	b.n	8015640 <readPacket+0xfe>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len)) {
 80155c4:	693b      	ldr	r3, [r7, #16]
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	dd20      	ble.n	801560c <readPacket+0xca>
 80155ca:	68fb      	ldr	r3, [r7, #12]
 80155cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80155ce:	685c      	ldr	r4, [r3, #4]
 80155d0:	68fb      	ldr	r3, [r7, #12]
 80155d2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 80155d4:	68fb      	ldr	r3, [r7, #12]
 80155d6:	695a      	ldr	r2, [r3, #20]
 80155d8:	69bb      	ldr	r3, [r7, #24]
 80155da:	18d6      	adds	r6, r2, r3
 80155dc:	693b      	ldr	r3, [r7, #16]
 80155de:	607b      	str	r3, [r7, #4]
 80155e0:	68b8      	ldr	r0, [r7, #8]
 80155e2:	f000 ff71 	bl	80164c8 <TimerLeftMS>
 80155e6:	4603      	mov	r3, r0
 80155e8:	687a      	ldr	r2, [r7, #4]
 80155ea:	4631      	mov	r1, r6
 80155ec:	4628      	mov	r0, r5
 80155ee:	47a0      	blx	r4
 80155f0:	4602      	mov	r2, r0
 80155f2:	693b      	ldr	r3, [r7, #16]
 80155f4:	429a      	cmp	r2, r3
 80155f6:	bf14      	ite	ne
 80155f8:	2301      	movne	r3, #1
 80155fa:	2300      	moveq	r3, #0
 80155fc:	b2db      	uxtb	r3, r3
 80155fe:	61fb      	str	r3, [r7, #28]
 8015600:	69fb      	ldr	r3, [r7, #28]
 8015602:	2b00      	cmp	r3, #0
 8015604:	d002      	beq.n	801560c <readPacket+0xca>
        rc = 0;
 8015606:	2300      	movs	r3, #0
 8015608:	61fb      	str	r3, [r7, #28]
        goto exit;
 801560a:	e019      	b.n	8015640 <readPacket+0xfe>
    }

    header.byte = c->readbuf[0];
 801560c:	68fb      	ldr	r3, [r7, #12]
 801560e:	695b      	ldr	r3, [r3, #20]
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 8015614:	7d3b      	ldrb	r3, [r7, #20]
 8015616:	f3c3 1303 	ubfx	r3, r3, #4, #4
 801561a:	b2db      	uxtb	r3, r3
 801561c:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	699b      	ldr	r3, [r3, #24]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d00b      	beq.n	801563e <readPacket+0xfc>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have MQTT_SUCESSfully received a packet
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	f103 0260 	add.w	r2, r3, #96	; 0x60
 801562c:	68fb      	ldr	r3, [r7, #12]
 801562e:	699b      	ldr	r3, [r3, #24]
 8015630:	4619      	mov	r1, r3
 8015632:	4610      	mov	r0, r2
 8015634:	f000 ff30 	bl	8016498 <TimerCountdown>
 8015638:	e002      	b.n	8015640 <readPacket+0xfe>
        goto exit;
 801563a:	bf00      	nop
 801563c:	e000      	b.n	8015640 <readPacket+0xfe>
exit:
 801563e:	bf00      	nop
    return rc;
 8015640:	69fb      	ldr	r3, [r7, #28]
}
 8015642:	4618      	mov	r0, r3
 8015644:	3724      	adds	r7, #36	; 0x24
 8015646:	46bd      	mov	sp, r7
 8015648:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801564a <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 801564a:	b480      	push	{r7}
 801564c:	b087      	sub	sp, #28
 801564e:	af00      	add	r7, sp, #0
 8015650:	6078      	str	r0, [r7, #4]
 8015652:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	689b      	ldr	r3, [r3, #8]
 801565c:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 801565e:	683b      	ldr	r3, [r7, #0]
 8015660:	685b      	ldr	r3, [r3, #4]
 8015662:	461a      	mov	r2, r3
 8015664:	693b      	ldr	r3, [r7, #16]
 8015666:	4413      	add	r3, r2
 8015668:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 801566a:	e039      	b.n	80156e0 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 801566c:	693b      	ldr	r3, [r7, #16]
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	2b2f      	cmp	r3, #47	; 0x2f
 8015672:	d103      	bne.n	801567c <isTopicMatched+0x32>
 8015674:	697b      	ldr	r3, [r7, #20]
 8015676:	781b      	ldrb	r3, [r3, #0]
 8015678:	2b2f      	cmp	r3, #47	; 0x2f
 801567a:	d13a      	bne.n	80156f2 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 801567c:	697b      	ldr	r3, [r7, #20]
 801567e:	781b      	ldrb	r3, [r3, #0]
 8015680:	2b2b      	cmp	r3, #43	; 0x2b
 8015682:	d009      	beq.n	8015698 <isTopicMatched+0x4e>
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	781b      	ldrb	r3, [r3, #0]
 8015688:	2b23      	cmp	r3, #35	; 0x23
 801568a:	d005      	beq.n	8015698 <isTopicMatched+0x4e>
 801568c:	697b      	ldr	r3, [r7, #20]
 801568e:	781a      	ldrb	r2, [r3, #0]
 8015690:	693b      	ldr	r3, [r7, #16]
 8015692:	781b      	ldrb	r3, [r3, #0]
 8015694:	429a      	cmp	r2, r3
 8015696:	d12e      	bne.n	80156f6 <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 8015698:	697b      	ldr	r3, [r7, #20]
 801569a:	781b      	ldrb	r3, [r3, #0]
 801569c:	2b2b      	cmp	r3, #43	; 0x2b
 801569e:	d112      	bne.n	80156c6 <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 80156a0:	693b      	ldr	r3, [r7, #16]
 80156a2:	3301      	adds	r3, #1
 80156a4:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80156a6:	e005      	b.n	80156b4 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	3301      	adds	r3, #1
 80156ac:	613b      	str	r3, [r7, #16]
 80156ae:	693b      	ldr	r3, [r7, #16]
 80156b0:	3301      	adds	r3, #1
 80156b2:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 80156b4:	68fa      	ldr	r2, [r7, #12]
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d20b      	bcs.n	80156d4 <isTopicMatched+0x8a>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	781b      	ldrb	r3, [r3, #0]
 80156c0:	2b2f      	cmp	r3, #47	; 0x2f
 80156c2:	d1f1      	bne.n	80156a8 <isTopicMatched+0x5e>
 80156c4:	e006      	b.n	80156d4 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 80156c6:	697b      	ldr	r3, [r7, #20]
 80156c8:	781b      	ldrb	r3, [r3, #0]
 80156ca:	2b23      	cmp	r3, #35	; 0x23
 80156cc:	d102      	bne.n	80156d4 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 80156ce:	68bb      	ldr	r3, [r7, #8]
 80156d0:	3b01      	subs	r3, #1
 80156d2:	613b      	str	r3, [r7, #16]
        curf++;
 80156d4:	697b      	ldr	r3, [r7, #20]
 80156d6:	3301      	adds	r3, #1
 80156d8:	617b      	str	r3, [r7, #20]
        curn++;
 80156da:	693b      	ldr	r3, [r7, #16]
 80156dc:	3301      	adds	r3, #1
 80156de:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 80156e0:	697b      	ldr	r3, [r7, #20]
 80156e2:	781b      	ldrb	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d007      	beq.n	80156f8 <isTopicMatched+0xae>
 80156e8:	693a      	ldr	r2, [r7, #16]
 80156ea:	68bb      	ldr	r3, [r7, #8]
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d3bd      	bcc.n	801566c <isTopicMatched+0x22>
 80156f0:	e002      	b.n	80156f8 <isTopicMatched+0xae>
            break;
 80156f2:	bf00      	nop
 80156f4:	e000      	b.n	80156f8 <isTopicMatched+0xae>
            break;
 80156f6:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 80156f8:	693a      	ldr	r2, [r7, #16]
 80156fa:	68bb      	ldr	r3, [r7, #8]
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d105      	bne.n	801570c <isTopicMatched+0xc2>
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	781b      	ldrb	r3, [r3, #0]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d101      	bne.n	801570c <isTopicMatched+0xc2>
 8015708:	2301      	movs	r3, #1
 801570a:	e000      	b.n	801570e <isTopicMatched+0xc4>
 801570c:	2300      	movs	r3, #0
 801570e:	b2db      	uxtb	r3, r3
}
 8015710:	4618      	mov	r0, r3
 8015712:	371c      	adds	r7, #28
 8015714:	46bd      	mov	sp, r7
 8015716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571a:	4770      	bx	lr

0801571c <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 801571c:	b580      	push	{r7, lr}
 801571e:	b08a      	sub	sp, #40	; 0x28
 8015720:	af00      	add	r7, sp, #0
 8015722:	60f8      	str	r0, [r7, #12]
 8015724:	60b9      	str	r1, [r7, #8]
 8015726:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 8015728:	f04f 33ff 	mov.w	r3, #4294967295
 801572c:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801572e:	2300      	movs	r3, #0
 8015730:	627b      	str	r3, [r7, #36]	; 0x24
 8015732:	e03c      	b.n	80157ae <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015738:	3205      	adds	r2, #5
 801573a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d032      	beq.n	80157a8 <deliverMessage+0x8c>
 8015742:	68fb      	ldr	r3, [r7, #12]
 8015744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015746:	3205      	adds	r2, #5
 8015748:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 801574c:	4619      	mov	r1, r3
 801574e:	68b8      	ldr	r0, [r7, #8]
 8015750:	f001 f978 	bl	8016a44 <MQTTPacket_equals>
 8015754:	4603      	mov	r3, r0
 8015756:	2b00      	cmp	r3, #0
 8015758:	d10b      	bne.n	8015772 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801575e:	3205      	adds	r2, #5
 8015760:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015764:	68b9      	ldr	r1, [r7, #8]
 8015766:	4618      	mov	r0, r3
 8015768:	f7ff ff6f 	bl	801564a <isTopicMatched>
 801576c:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 801576e:	2b00      	cmp	r3, #0
 8015770:	d01a      	beq.n	80157a8 <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 8015772:	68fa      	ldr	r2, [r7, #12]
 8015774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015776:	3305      	adds	r3, #5
 8015778:	00db      	lsls	r3, r3, #3
 801577a:	4413      	add	r3, r2
 801577c:	685b      	ldr	r3, [r3, #4]
 801577e:	2b00      	cmp	r3, #0
 8015780:	d012      	beq.n	80157a8 <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 8015782:	f107 0318 	add.w	r3, r7, #24
 8015786:	687a      	ldr	r2, [r7, #4]
 8015788:	68b9      	ldr	r1, [r7, #8]
 801578a:	4618      	mov	r0, r3
 801578c:	f7ff fddc 	bl	8015348 <NewMessageData>
                c->messageHandlers[i].fp(&md);
 8015790:	68fa      	ldr	r2, [r7, #12]
 8015792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015794:	3305      	adds	r3, #5
 8015796:	00db      	lsls	r3, r3, #3
 8015798:	4413      	add	r3, r2
 801579a:	685b      	ldr	r3, [r3, #4]
 801579c:	f107 0218 	add.w	r2, r7, #24
 80157a0:	4610      	mov	r0, r2
 80157a2:	4798      	blx	r3
                rc = MQTT_SUCESS;
 80157a4:	2300      	movs	r3, #0
 80157a6:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80157a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157aa:	3301      	adds	r3, #1
 80157ac:	627b      	str	r3, [r7, #36]	; 0x24
 80157ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80157b0:	2b04      	cmp	r3, #4
 80157b2:	ddbf      	ble.n	8015734 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 80157b4:	6a3b      	ldr	r3, [r7, #32]
 80157b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157ba:	d112      	bne.n	80157e2 <deliverMessage+0xc6>
 80157bc:	68fb      	ldr	r3, [r7, #12]
 80157be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d00e      	beq.n	80157e2 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 80157c4:	f107 0310 	add.w	r3, r7, #16
 80157c8:	687a      	ldr	r2, [r7, #4]
 80157ca:	68b9      	ldr	r1, [r7, #8]
 80157cc:	4618      	mov	r0, r3
 80157ce:	f7ff fdbb 	bl	8015348 <NewMessageData>
        c->defaultMessageHandler(&md);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80157d6:	f107 0210 	add.w	r2, r7, #16
 80157da:	4610      	mov	r0, r2
 80157dc:	4798      	blx	r3
        rc = MQTT_SUCESS;
 80157de:	2300      	movs	r3, #0
 80157e0:	623b      	str	r3, [r7, #32]
    }

    return rc;
 80157e2:	6a3b      	ldr	r3, [r7, #32]
}
 80157e4:	4618      	mov	r0, r3
 80157e6:	3728      	adds	r7, #40	; 0x28
 80157e8:	46bd      	mov	sp, r7
 80157ea:	bd80      	pop	{r7, pc}

080157ec <keepalive>:


int keepalive(MQTTClient* c)
{
 80157ec:	b580      	push	{r7, lr}
 80157ee:	b086      	sub	sp, #24
 80157f0:	af00      	add	r7, sp, #0
 80157f2:	6078      	str	r0, [r7, #4]
    int rc = MQTT_SUCESS;
 80157f4:	2300      	movs	r3, #0
 80157f6:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	699b      	ldr	r3, [r3, #24]
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d03e      	beq.n	801587e <keepalive+0x92>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 8015800:	687b      	ldr	r3, [r7, #4]
 8015802:	3358      	adds	r3, #88	; 0x58
 8015804:	4618      	mov	r0, r3
 8015806:	f000 fe1d 	bl	8016444 <TimerIsExpired>
 801580a:	4603      	mov	r3, r0
 801580c:	2b00      	cmp	r3, #0
 801580e:	d107      	bne.n	8015820 <keepalive+0x34>
 8015810:	687b      	ldr	r3, [r7, #4]
 8015812:	3360      	adds	r3, #96	; 0x60
 8015814:	4618      	mov	r0, r3
 8015816:	f000 fe15 	bl	8016444 <TimerIsExpired>
 801581a:	4603      	mov	r3, r0
 801581c:	2b00      	cmp	r3, #0
 801581e:	d030      	beq.n	8015882 <keepalive+0x96>
    {
        if (c->ping_outstanding)
 8015820:	687b      	ldr	r3, [r7, #4]
 8015822:	7f1b      	ldrb	r3, [r3, #28]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d003      	beq.n	8015830 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 8015828:	f04f 33ff 	mov.w	r3, #4294967295
 801582c:	617b      	str	r3, [r7, #20]
 801582e:	e029      	b.n	8015884 <keepalive+0x98>
        else
        {
            Timer timer;
            TimerInit(&timer);
 8015830:	f107 0308 	add.w	r3, r7, #8
 8015834:	4618      	mov	r0, r3
 8015836:	f000 fe5d 	bl	80164f4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 801583a:	f107 0308 	add.w	r3, r7, #8
 801583e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015842:	4618      	mov	r0, r3
 8015844:	f000 fe14 	bl	8016470 <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	691a      	ldr	r2, [r3, #16]
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	689b      	ldr	r3, [r3, #8]
 8015850:	4619      	mov	r1, r3
 8015852:	4610      	mov	r0, r2
 8015854:	f000 fd2a 	bl	80162ac <MQTTSerialize_pingreq>
 8015858:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQTT_SUCESS) // send the ping packet
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	2b00      	cmp	r3, #0
 801585e:	dd11      	ble.n	8015884 <keepalive+0x98>
 8015860:	f107 0308 	add.w	r3, r7, #8
 8015864:	461a      	mov	r2, r3
 8015866:	6939      	ldr	r1, [r7, #16]
 8015868:	6878      	ldr	r0, [r7, #4]
 801586a:	f7ff fd98 	bl	801539e <sendPacket>
 801586e:	6178      	str	r0, [r7, #20]
 8015870:	697b      	ldr	r3, [r7, #20]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d106      	bne.n	8015884 <keepalive+0x98>
                c->ping_outstanding = 1;
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	2201      	movs	r2, #1
 801587a:	771a      	strb	r2, [r3, #28]
 801587c:	e002      	b.n	8015884 <keepalive+0x98>
        goto exit;
 801587e:	bf00      	nop
 8015880:	e000      	b.n	8015884 <keepalive+0x98>
        }
    }

exit:
 8015882:	bf00      	nop
    return rc;
 8015884:	697b      	ldr	r3, [r7, #20]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3718      	adds	r7, #24
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}

0801588e <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 801588e:	b480      	push	{r7}
 8015890:	b085      	sub	sp, #20
 8015892:	af00      	add	r7, sp, #0
 8015894:	6078      	str	r0, [r7, #4]
    int i = 0;
 8015896:	2300      	movs	r3, #0
 8015898:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 801589a:	2300      	movs	r3, #0
 801589c:	60fb      	str	r3, [r7, #12]
 801589e:	e008      	b.n	80158b2 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	68fa      	ldr	r2, [r7, #12]
 80158a4:	3205      	adds	r2, #5
 80158a6:	2100      	movs	r1, #0
 80158a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 80158ac:	68fb      	ldr	r3, [r7, #12]
 80158ae:	3301      	adds	r3, #1
 80158b0:	60fb      	str	r3, [r7, #12]
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	2b04      	cmp	r3, #4
 80158b6:	ddf3      	ble.n	80158a0 <MQTTCleanSession+0x12>
}
 80158b8:	bf00      	nop
 80158ba:	3714      	adds	r7, #20
 80158bc:	46bd      	mov	sp, r7
 80158be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158c2:	4770      	bx	lr

080158c4 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b082      	sub	sp, #8
 80158c8:	af00      	add	r7, sp, #0
 80158ca:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	2200      	movs	r2, #0
 80158d0:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	2200      	movs	r2, #0
 80158d6:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d002      	beq.n	80158e6 <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 80158e0:	6878      	ldr	r0, [r7, #4]
 80158e2:	f7ff ffd4 	bl	801588e <MQTTCleanSession>
}
 80158e6:	bf00      	nop
 80158e8:	3708      	adds	r7, #8
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}
	...

080158f0 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 80158f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f2:	b095      	sub	sp, #84	; 0x54
 80158f4:	af06      	add	r7, sp, #24
 80158f6:	6078      	str	r0, [r7, #4]
 80158f8:	6039      	str	r1, [r7, #0]
    int len = 0,
 80158fa:	2300      	movs	r3, #0
 80158fc:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQTT_SUCESS;
 80158fe:	2300      	movs	r3, #0
 8015900:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 8015902:	6839      	ldr	r1, [r7, #0]
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f7ff fe1c 	bl	8015542 <readPacket>
 801590a:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 801590c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801590e:	2b0d      	cmp	r3, #13
 8015910:	d81e      	bhi.n	8015950 <cycle+0x60>
 8015912:	a201      	add	r2, pc, #4	; (adr r2, 8015918 <cycle+0x28>)
 8015914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015918:	08015aa9 	.word	0x08015aa9
 801591c:	08015951 	.word	0x08015951
 8015920:	08015aa9 	.word	0x08015aa9
 8015924:	08015957 	.word	0x08015957
 8015928:	08015aa9 	.word	0x08015aa9
 801592c:	08015a25 	.word	0x08015a25
 8015930:	08015a25 	.word	0x08015a25
 8015934:	08015aa9 	.word	0x08015aa9
 8015938:	08015951 	.word	0x08015951
 801593c:	08015aa9 	.word	0x08015aa9
 8015940:	08015951 	.word	0x08015951
 8015944:	08015aa9 	.word	0x08015aa9
 8015948:	08015951 	.word	0x08015951
 801594c:	08015aa1 	.word	0x08015aa1
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 8015950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015952:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 8015954:	e0ba      	b.n	8015acc <cycle+0x1dc>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 8015956:	2300      	movs	r3, #0
 8015958:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 801595e:	687a      	ldr	r2, [r7, #4]
 8015960:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 8015962:	4616      	mov	r6, r2
 8015964:	f107 0210 	add.w	r2, r7, #16
 8015968:	1d15      	adds	r5, r2, #4
 801596a:	f107 0210 	add.w	r2, r7, #16
 801596e:	1c54      	adds	r4, r2, #1
 8015970:	f107 010c 	add.w	r1, r7, #12
 8015974:	f107 0210 	add.w	r2, r7, #16
 8015978:	1c90      	adds	r0, r2, #2
 801597a:	9604      	str	r6, [sp, #16]
 801597c:	9303      	str	r3, [sp, #12]
 801597e:	f107 0310 	add.w	r3, r7, #16
 8015982:	330c      	adds	r3, #12
 8015984:	9302      	str	r3, [sp, #8]
 8015986:	f107 0310 	add.w	r3, r7, #16
 801598a:	3308      	adds	r3, #8
 801598c:	9301      	str	r3, [sp, #4]
 801598e:	f107 0320 	add.w	r3, r7, #32
 8015992:	9300      	str	r3, [sp, #0]
 8015994:	462b      	mov	r3, r5
 8015996:	4622      	mov	r2, r4
 8015998:	f000 fc97 	bl	80162ca <MQTTDeserialize_publish>
 801599c:	4603      	mov	r3, r0
 801599e:	2b01      	cmp	r3, #1
 80159a0:	f040 8091 	bne.w	8015ac6 <cycle+0x1d6>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 80159a4:	68fb      	ldr	r3, [r7, #12]
 80159a6:	b2db      	uxtb	r3, r3
 80159a8:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 80159aa:	f107 0210 	add.w	r2, r7, #16
 80159ae:	f107 0320 	add.w	r3, r7, #32
 80159b2:	4619      	mov	r1, r3
 80159b4:	6878      	ldr	r0, [r7, #4]
 80159b6:	f7ff feb1 	bl	801571c <deliverMessage>
            if (msg.qos != QOS0)
 80159ba:	7c3b      	ldrb	r3, [r7, #16]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	d075      	beq.n	8015aac <cycle+0x1bc>
            {
                if (msg.qos == QOS1)
 80159c0:	7c3b      	ldrb	r3, [r7, #16]
 80159c2:	2b01      	cmp	r3, #1
 80159c4:	d10c      	bne.n	80159e0 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	6918      	ldr	r0, [r3, #16]
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	689b      	ldr	r3, [r3, #8]
 80159ce:	4619      	mov	r1, r3
 80159d0:	8abb      	ldrh	r3, [r7, #20]
 80159d2:	9300      	str	r3, [sp, #0]
 80159d4:	2300      	movs	r3, #0
 80159d6:	2204      	movs	r2, #4
 80159d8:	f001 f86b 	bl	8016ab2 <MQTTSerialize_ack>
 80159dc:	6378      	str	r0, [r7, #52]	; 0x34
 80159de:	e00e      	b.n	80159fe <cycle+0x10e>
                else if (msg.qos == QOS2)
 80159e0:	7c3b      	ldrb	r3, [r7, #16]
 80159e2:	2b02      	cmp	r3, #2
 80159e4:	d10b      	bne.n	80159fe <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	6918      	ldr	r0, [r3, #16]
 80159ea:	687b      	ldr	r3, [r7, #4]
 80159ec:	689b      	ldr	r3, [r3, #8]
 80159ee:	4619      	mov	r1, r3
 80159f0:	8abb      	ldrh	r3, [r7, #20]
 80159f2:	9300      	str	r3, [sp, #0]
 80159f4:	2300      	movs	r3, #0
 80159f6:	2205      	movs	r2, #5
 80159f8:	f001 f85b 	bl	8016ab2 <MQTTSerialize_ack>
 80159fc:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 80159fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	dc03      	bgt.n	8015a0c <cycle+0x11c>
                    rc = FAILURE;
 8015a04:	f04f 33ff 	mov.w	r3, #4294967295
 8015a08:	633b      	str	r3, [r7, #48]	; 0x30
 8015a0a:	e005      	b.n	8015a18 <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 8015a0c:	683a      	ldr	r2, [r7, #0]
 8015a0e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f7ff fcc4 	bl	801539e <sendPacket>
 8015a16:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 8015a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a1e:	d145      	bne.n	8015aac <cycle+0x1bc>
                    goto exit; // there was a problem
 8015a20:	bf00      	nop
 8015a22:	e053      	b.n	8015acc <cycle+0x1dc>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	695c      	ldr	r4, [r3, #20]
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	68db      	ldr	r3, [r3, #12]
 8015a2c:	f107 020a 	add.w	r2, r7, #10
 8015a30:	f107 0109 	add.w	r1, r7, #9
 8015a34:	f107 0008 	add.w	r0, r7, #8
 8015a38:	9300      	str	r3, [sp, #0]
 8015a3a:	4623      	mov	r3, r4
 8015a3c:	f000 fcb7 	bl	80163ae <MQTTDeserialize_ack>
 8015a40:	4603      	mov	r3, r0
 8015a42:	2b01      	cmp	r3, #1
 8015a44:	d003      	beq.n	8015a4e <cycle+0x15e>
                rc = FAILURE;
 8015a46:	f04f 33ff 	mov.w	r3, #4294967295
 8015a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8015a4c:	e023      	b.n	8015a96 <cycle+0x1a6>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	6918      	ldr	r0, [r3, #16]
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	689b      	ldr	r3, [r3, #8]
 8015a56:	4619      	mov	r1, r3
 8015a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a5a:	2b05      	cmp	r3, #5
 8015a5c:	d101      	bne.n	8015a62 <cycle+0x172>
 8015a5e:	2206      	movs	r2, #6
 8015a60:	e000      	b.n	8015a64 <cycle+0x174>
 8015a62:	2207      	movs	r2, #7
 8015a64:	897b      	ldrh	r3, [r7, #10]
 8015a66:	9300      	str	r3, [sp, #0]
 8015a68:	2300      	movs	r3, #0
 8015a6a:	f001 f822 	bl	8016ab2 <MQTTSerialize_ack>
 8015a6e:	6378      	str	r0, [r7, #52]	; 0x34
 8015a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	dc03      	bgt.n	8015a7e <cycle+0x18e>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 8015a76:	f04f 33ff 	mov.w	r3, #4294967295
 8015a7a:	633b      	str	r3, [r7, #48]	; 0x30
 8015a7c:	e00b      	b.n	8015a96 <cycle+0x1a6>
            else if ((rc = sendPacket(c, len, timer)) != MQTT_SUCESS) // send the PUBREL packet
 8015a7e:	683a      	ldr	r2, [r7, #0]
 8015a80:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015a82:	6878      	ldr	r0, [r7, #4]
 8015a84:	f7ff fc8b 	bl	801539e <sendPacket>
 8015a88:	6338      	str	r0, [r7, #48]	; 0x30
 8015a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d002      	beq.n	8015a96 <cycle+0x1a6>
                rc = FAILURE; // there was a problem
 8015a90:	f04f 33ff 	mov.w	r3, #4294967295
 8015a94:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 8015a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a9c:	d108      	bne.n	8015ab0 <cycle+0x1c0>
                goto exit; // there was a problem
 8015a9e:	e015      	b.n	8015acc <cycle+0x1dc>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 8015aa0:	687b      	ldr	r3, [r7, #4]
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	771a      	strb	r2, [r3, #28]
            break;
 8015aa6:	e004      	b.n	8015ab2 <cycle+0x1c2>
            break;
 8015aa8:	bf00      	nop
 8015aaa:	e002      	b.n	8015ab2 <cycle+0x1c2>
            break;
 8015aac:	bf00      	nop
 8015aae:	e000      	b.n	8015ab2 <cycle+0x1c2>
            break;
 8015ab0:	bf00      	nop
    }

    if (keepalive(c) != MQTT_SUCESS) {
 8015ab2:	6878      	ldr	r0, [r7, #4]
 8015ab4:	f7ff fe9a 	bl	80157ec <keepalive>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	2b00      	cmp	r3, #0
 8015abc:	d005      	beq.n	8015aca <cycle+0x1da>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 8015abe:	f04f 33ff 	mov.w	r3, #4294967295
 8015ac2:	633b      	str	r3, [r7, #48]	; 0x30
 8015ac4:	e002      	b.n	8015acc <cycle+0x1dc>
                goto exit;
 8015ac6:	bf00      	nop
 8015ac8:	e000      	b.n	8015acc <cycle+0x1dc>
    }

exit:
 8015aca:	bf00      	nop
    if (rc == MQTT_SUCESS)
 8015acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d102      	bne.n	8015ad8 <cycle+0x1e8>
        rc = packet_type;
 8015ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8015ad6:	e006      	b.n	8015ae6 <cycle+0x1f6>
    else if (c->isconnected)
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	6a1b      	ldr	r3, [r3, #32]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d002      	beq.n	8015ae6 <cycle+0x1f6>
        MQTTCloseSession(c);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f7ff feef 	bl	80158c4 <MQTTCloseSession>
    return rc;
 8015ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	373c      	adds	r7, #60	; 0x3c
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015af0 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b086      	sub	sp, #24
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
 8015af8:	6039      	str	r1, [r7, #0]
    int rc = MQTT_SUCESS;
 8015afa:	2300      	movs	r3, #0
 8015afc:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 8015afe:	f107 030c 	add.w	r3, r7, #12
 8015b02:	4618      	mov	r0, r3
 8015b04:	f000 fcf6 	bl	80164f4 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 8015b08:	683a      	ldr	r2, [r7, #0]
 8015b0a:	f107 030c 	add.w	r3, r7, #12
 8015b0e:	4611      	mov	r1, r2
 8015b10:	4618      	mov	r0, r3
 8015b12:	f000 fcad 	bl	8016470 <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 8015b16:	f107 030c 	add.w	r3, r7, #12
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	6878      	ldr	r0, [r7, #4]
 8015b1e:	f7ff fee7 	bl	80158f0 <cycle>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	da03      	bge.n	8015b30 <MQTTYield+0x40>
        {
            rc = FAILURE;
 8015b28:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2c:	617b      	str	r3, [r7, #20]
            break;
 8015b2e:	e007      	b.n	8015b40 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 8015b30:	f107 030c 	add.w	r3, r7, #12
 8015b34:	4618      	mov	r0, r3
 8015b36:	f000 fc85 	bl	8016444 <TimerIsExpired>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d0ea      	beq.n	8015b16 <MQTTYield+0x26>

    return rc;
 8015b40:	697b      	ldr	r3, [r7, #20]
}
 8015b42:	4618      	mov	r0, r3
 8015b44:	3718      	adds	r7, #24
 8015b46:	46bd      	mov	sp, r7
 8015b48:	bd80      	pop	{r7, pc}

08015b4a <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b086      	sub	sp, #24
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	60f8      	str	r0, [r7, #12]
 8015b52:	60b9      	str	r1, [r7, #8]
 8015b54:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8015b56:	f04f 33ff 	mov.w	r3, #4294967295
 8015b5a:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 8015b5c:	6878      	ldr	r0, [r7, #4]
 8015b5e:	f000 fc71 	bl	8016444 <TimerIsExpired>
 8015b62:	4603      	mov	r3, r0
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d10c      	bne.n	8015b82 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 8015b68:	6879      	ldr	r1, [r7, #4]
 8015b6a:	68f8      	ldr	r0, [r7, #12]
 8015b6c:	f7ff fec0 	bl	80158f0 <cycle>
 8015b70:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 8015b72:	697a      	ldr	r2, [r7, #20]
 8015b74:	68bb      	ldr	r3, [r7, #8]
 8015b76:	429a      	cmp	r2, r3
 8015b78:	d004      	beq.n	8015b84 <waitfor+0x3a>
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	daed      	bge.n	8015b5c <waitfor+0x12>
 8015b80:	e000      	b.n	8015b84 <waitfor+0x3a>
            break; // we timed out
 8015b82:	bf00      	nop

    return rc;
 8015b84:	697b      	ldr	r3, [r7, #20]
}
 8015b86:	4618      	mov	r0, r3
 8015b88:	3718      	adds	r7, #24
 8015b8a:	46bd      	mov	sp, r7
 8015b8c:	bd80      	pop	{r7, pc}
	...

08015b90 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b09e      	sub	sp, #120	; 0x78
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	60f8      	str	r0, [r7, #12]
 8015b98:	60b9      	str	r1, [r7, #8]
 8015b9a:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 8015b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba0:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 8015ba2:	4a43      	ldr	r2, [pc, #268]	; (8015cb0 <MQTTConnectWithResults+0x120>)
 8015ba4:	f107 0310 	add.w	r3, r7, #16
 8015ba8:	4611      	mov	r1, r2
 8015baa:	2258      	movs	r2, #88	; 0x58
 8015bac:	4618      	mov	r0, r3
 8015bae:	f002 f9de 	bl	8017f6e <memcpy>
    int len = 0;
 8015bb2:	2300      	movs	r3, #0
 8015bb4:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	6a1b      	ldr	r3, [r3, #32]
 8015bba:	2b00      	cmp	r3, #0
 8015bbc:	d164      	bne.n	8015c88 <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 8015bbe:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015bc2:	4618      	mov	r0, r3
 8015bc4:	f000 fc96 	bl	80164f4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	685a      	ldr	r2, [r3, #4]
 8015bcc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015bd0:	4611      	mov	r1, r2
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	f000 fc4c 	bl	8016470 <TimerCountdownMS>

    if (options == 0)
 8015bd8:	68bb      	ldr	r3, [r7, #8]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d102      	bne.n	8015be4 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 8015bde:	f107 0310 	add.w	r3, r7, #16
 8015be2:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 8015be4:	68bb      	ldr	r3, [r7, #8]
 8015be6:	8b1b      	ldrh	r3, [r3, #24]
 8015be8:	461a      	mov	r2, r3
 8015bea:	68fb      	ldr	r3, [r7, #12]
 8015bec:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 8015bee:	68bb      	ldr	r3, [r7, #8]
 8015bf0:	7e9b      	ldrb	r3, [r3, #26]
 8015bf2:	461a      	mov	r2, r3
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 8015bf8:	68fb      	ldr	r3, [r7, #12]
 8015bfa:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	699b      	ldr	r3, [r3, #24]
 8015c02:	4619      	mov	r1, r3
 8015c04:	4610      	mov	r0, r2
 8015c06:	f000 fc47 	bl	8016498 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 8015c0a:	68fb      	ldr	r3, [r7, #12]
 8015c0c:	6918      	ldr	r0, [r3, #16]
 8015c0e:	68fb      	ldr	r3, [r7, #12]
 8015c10:	689b      	ldr	r3, [r3, #8]
 8015c12:	68ba      	ldr	r2, [r7, #8]
 8015c14:	4619      	mov	r1, r3
 8015c16:	f000 f9cd 	bl	8015fb4 <MQTTSerialize_connect>
 8015c1a:	6738      	str	r0, [r7, #112]	; 0x70
 8015c1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	dd34      	ble.n	8015c8c <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQTT_SUCESS)  // send the connect packet
 8015c22:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015c26:	461a      	mov	r2, r3
 8015c28:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8015c2a:	68f8      	ldr	r0, [r7, #12]
 8015c2c:	f7ff fbb7 	bl	801539e <sendPacket>
 8015c30:	6778      	str	r0, [r7, #116]	; 0x74
 8015c32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d12b      	bne.n	8015c90 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 8015c38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	2102      	movs	r1, #2
 8015c40:	68f8      	ldr	r0, [r7, #12]
 8015c42:	f7ff ff82 	bl	8015b4a <waitfor>
 8015c46:	4603      	mov	r3, r0
 8015c48:	2b02      	cmp	r3, #2
 8015c4a:	d119      	bne.n	8015c80 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2200      	movs	r2, #0
 8015c50:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2200      	movs	r2, #0
 8015c56:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	1c58      	adds	r0, r3, #1
 8015c5c:	6879      	ldr	r1, [r7, #4]
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	695a      	ldr	r2, [r3, #20]
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	f000 fa93 	bl	8016190 <MQTTDeserialize_connack>
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	2b01      	cmp	r3, #1
 8015c6e:	d103      	bne.n	8015c78 <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	781b      	ldrb	r3, [r3, #0]
 8015c74:	677b      	str	r3, [r7, #116]	; 0x74
 8015c76:	e00c      	b.n	8015c92 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 8015c78:	f04f 33ff 	mov.w	r3, #4294967295
 8015c7c:	677b      	str	r3, [r7, #116]	; 0x74
 8015c7e:	e008      	b.n	8015c92 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 8015c80:	f04f 33ff 	mov.w	r3, #4294967295
 8015c84:	677b      	str	r3, [r7, #116]	; 0x74
 8015c86:	e004      	b.n	8015c92 <MQTTConnectWithResults+0x102>
		  goto exit;
 8015c88:	bf00      	nop
 8015c8a:	e002      	b.n	8015c92 <MQTTConnectWithResults+0x102>
        goto exit;
 8015c8c:	bf00      	nop
 8015c8e:	e000      	b.n	8015c92 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 8015c90:	bf00      	nop

exit:
    if (rc == MQTT_SUCESS)
 8015c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d105      	bne.n	8015ca4 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 8015c98:	68fb      	ldr	r3, [r7, #12]
 8015c9a:	2201      	movs	r2, #1
 8015c9c:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 8015c9e:	68fb      	ldr	r3, [r7, #12]
 8015ca0:	2200      	movs	r2, #0
 8015ca2:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 8015ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	3778      	adds	r7, #120	; 0x78
 8015caa:	46bd      	mov	sp, r7
 8015cac:	bd80      	pop	{r7, pc}
 8015cae:	bf00      	nop
 8015cb0:	0801c7dc 	.word	0x0801c7dc

08015cb4 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 8015cb4:	b580      	push	{r7, lr}
 8015cb6:	b084      	sub	sp, #16
 8015cb8:	af00      	add	r7, sp, #0
 8015cba:	6078      	str	r0, [r7, #4]
 8015cbc:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 8015cbe:	f107 030c 	add.w	r3, r7, #12
 8015cc2:	461a      	mov	r2, r3
 8015cc4:	6839      	ldr	r1, [r7, #0]
 8015cc6:	6878      	ldr	r0, [r7, #4]
 8015cc8:	f7ff ff62 	bl	8015b90 <MQTTConnectWithResults>
 8015ccc:	4603      	mov	r3, r0
}
 8015cce:	4618      	mov	r0, r3
 8015cd0:	3710      	adds	r7, #16
 8015cd2:	46bd      	mov	sp, r7
 8015cd4:	bd80      	pop	{r7, pc}

08015cd6 <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 8015cd6:	b580      	push	{r7, lr}
 8015cd8:	b086      	sub	sp, #24
 8015cda:	af00      	add	r7, sp, #0
 8015cdc:	60f8      	str	r0, [r7, #12]
 8015cde:	60b9      	str	r1, [r7, #8]
 8015ce0:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 8015ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ce6:	617b      	str	r3, [r7, #20]
    int i = -1;
 8015ce8:	f04f 33ff 	mov.w	r3, #4294967295
 8015cec:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015cee:	2300      	movs	r3, #0
 8015cf0:	613b      	str	r3, [r7, #16]
 8015cf2:	e028      	b.n	8015d46 <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 8015cf4:	68fb      	ldr	r3, [r7, #12]
 8015cf6:	693a      	ldr	r2, [r7, #16]
 8015cf8:	3205      	adds	r2, #5
 8015cfa:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d01e      	beq.n	8015d40 <MQTTSetMessageHandler+0x6a>
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	693a      	ldr	r2, [r7, #16]
 8015d06:	3205      	adds	r2, #5
 8015d08:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015d0c:	68b9      	ldr	r1, [r7, #8]
 8015d0e:	4618      	mov	r0, r3
 8015d10:	f7ea fa6e 	bl	80001f0 <strcmp>
 8015d14:	4603      	mov	r3, r0
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d112      	bne.n	8015d40 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d10c      	bne.n	8015d3a <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 8015d20:	68fb      	ldr	r3, [r7, #12]
 8015d22:	693a      	ldr	r2, [r7, #16]
 8015d24:	3205      	adds	r2, #5
 8015d26:	2100      	movs	r1, #0
 8015d28:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 8015d2c:	68fa      	ldr	r2, [r7, #12]
 8015d2e:	693b      	ldr	r3, [r7, #16]
 8015d30:	3305      	adds	r3, #5
 8015d32:	00db      	lsls	r3, r3, #3
 8015d34:	4413      	add	r3, r2
 8015d36:	2200      	movs	r2, #0
 8015d38:	605a      	str	r2, [r3, #4]
            }
            rc = MQTT_SUCESS; /* return i when adding new subscription */
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	617b      	str	r3, [r7, #20]
            break;
 8015d3e:	e005      	b.n	8015d4c <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	3301      	adds	r3, #1
 8015d44:	613b      	str	r3, [r7, #16]
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	2b04      	cmp	r3, #4
 8015d4a:	ddd3      	ble.n	8015cf4 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	2b00      	cmp	r3, #0
 8015d50:	d026      	beq.n	8015da0 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 8015d52:	697b      	ldr	r3, [r7, #20]
 8015d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d58:	d112      	bne.n	8015d80 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	613b      	str	r3, [r7, #16]
 8015d5e:	e00c      	b.n	8015d7a <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 8015d60:	68fb      	ldr	r3, [r7, #12]
 8015d62:	693a      	ldr	r2, [r7, #16]
 8015d64:	3205      	adds	r2, #5
 8015d66:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d102      	bne.n	8015d74 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQTT_SUCESS;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	617b      	str	r3, [r7, #20]
                    break;
 8015d72:	e005      	b.n	8015d80 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	3301      	adds	r3, #1
 8015d78:	613b      	str	r3, [r7, #16]
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	2b04      	cmp	r3, #4
 8015d7e:	ddef      	ble.n	8015d60 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 8015d80:	693b      	ldr	r3, [r7, #16]
 8015d82:	2b04      	cmp	r3, #4
 8015d84:	dc0c      	bgt.n	8015da0 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	693a      	ldr	r2, [r7, #16]
 8015d8a:	3205      	adds	r2, #5
 8015d8c:	68b9      	ldr	r1, [r7, #8]
 8015d8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 8015d92:	68fa      	ldr	r2, [r7, #12]
 8015d94:	693b      	ldr	r3, [r7, #16]
 8015d96:	3305      	adds	r3, #5
 8015d98:	00db      	lsls	r3, r3, #3
 8015d9a:	4413      	add	r3, r2
 8015d9c:	687a      	ldr	r2, [r7, #4]
 8015d9e:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 8015da0:	697b      	ldr	r3, [r7, #20]
}
 8015da2:	4618      	mov	r0, r3
 8015da4:	3718      	adds	r7, #24
 8015da6:	46bd      	mov	sp, r7
 8015da8:	bd80      	pop	{r7, pc}

08015daa <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 8015daa:	b5b0      	push	{r4, r5, r7, lr}
 8015dac:	b092      	sub	sp, #72	; 0x48
 8015dae:	af04      	add	r7, sp, #16
 8015db0:	60f8      	str	r0, [r7, #12]
 8015db2:	60b9      	str	r1, [r7, #8]
 8015db4:	603b      	str	r3, [r7, #0]
 8015db6:	4613      	mov	r3, r2
 8015db8:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 8015dba:	f04f 33ff 	mov.w	r3, #4294967295
 8015dbe:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 8015dc4:	2300      	movs	r3, #0
 8015dc6:	61fb      	str	r3, [r7, #28]
 8015dc8:	2300      	movs	r3, #0
 8015dca:	623b      	str	r3, [r7, #32]
 8015dcc:	2300      	movs	r3, #0
 8015dce:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	6a1b      	ldr	r3, [r3, #32]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d063      	beq.n	8015ea4 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 8015ddc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015de0:	4618      	mov	r0, r3
 8015de2:	f000 fb87 	bl	80164f4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 8015de6:	68fb      	ldr	r3, [r7, #12]
 8015de8:	685a      	ldr	r2, [r3, #4]
 8015dea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015dee:	4611      	mov	r1, r2
 8015df0:	4618      	mov	r0, r3
 8015df2:	f000 fb3d 	bl	8016470 <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	691c      	ldr	r4, [r3, #16]
 8015dfa:	68fb      	ldr	r3, [r7, #12]
 8015dfc:	689b      	ldr	r3, [r3, #8]
 8015dfe:	461d      	mov	r5, r3
 8015e00:	68f8      	ldr	r0, [r7, #12]
 8015e02:	f7ff fab3 	bl	801536c <getNextPacketId>
 8015e06:	4603      	mov	r3, r0
 8015e08:	b29a      	uxth	r2, r3
 8015e0a:	1dfb      	adds	r3, r7, #7
 8015e0c:	9302      	str	r3, [sp, #8]
 8015e0e:	f107 031c 	add.w	r3, r7, #28
 8015e12:	9301      	str	r3, [sp, #4]
 8015e14:	2301      	movs	r3, #1
 8015e16:	9300      	str	r3, [sp, #0]
 8015e18:	4613      	mov	r3, r2
 8015e1a:	2200      	movs	r2, #0
 8015e1c:	4629      	mov	r1, r5
 8015e1e:	4620      	mov	r0, r4
 8015e20:	f000 fec4 	bl	8016bac <MQTTSerialize_subscribe>
 8015e24:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 8015e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	dd3d      	ble.n	8015ea8 <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQTT_SUCESS) // send the subscribe packet
 8015e2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e30:	461a      	mov	r2, r3
 8015e32:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015e34:	68f8      	ldr	r0, [r7, #12]
 8015e36:	f7ff fab2 	bl	801539e <sendPacket>
 8015e3a:	6378      	str	r0, [r7, #52]	; 0x34
 8015e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015e3e:	2b00      	cmp	r3, #0
 8015e40:	d134      	bne.n	8015eac <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 8015e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015e46:	461a      	mov	r2, r3
 8015e48:	2109      	movs	r1, #9
 8015e4a:	68f8      	ldr	r0, [r7, #12]
 8015e4c:	f7ff fe7d 	bl	8015b4a <waitfor>
 8015e50:	4603      	mov	r3, r0
 8015e52:	2b09      	cmp	r3, #9
 8015e54:	d122      	bne.n	8015e9c <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 8015e56:	2300      	movs	r3, #0
 8015e58:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 8015e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 8015e60:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8015e62:	68fb      	ldr	r3, [r7, #12]
 8015e64:	695b      	ldr	r3, [r3, #20]
 8015e66:	68fa      	ldr	r2, [r7, #12]
 8015e68:	68d2      	ldr	r2, [r2, #12]
 8015e6a:	4614      	mov	r4, r2
 8015e6c:	f107 0218 	add.w	r2, r7, #24
 8015e70:	f107 0016 	add.w	r0, r7, #22
 8015e74:	9401      	str	r4, [sp, #4]
 8015e76:	9300      	str	r3, [sp, #0]
 8015e78:	460b      	mov	r3, r1
 8015e7a:	2101      	movs	r1, #1
 8015e7c:	f000 ff13 	bl	8016ca6 <MQTTDeserialize_suback>
 8015e80:	4603      	mov	r3, r0
 8015e82:	2b01      	cmp	r3, #1
 8015e84:	d113      	bne.n	8015eae <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 8015e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b80      	cmp	r3, #128	; 0x80
 8015e8c:	d00f      	beq.n	8015eae <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 8015e8e:	683a      	ldr	r2, [r7, #0]
 8015e90:	68b9      	ldr	r1, [r7, #8]
 8015e92:	68f8      	ldr	r0, [r7, #12]
 8015e94:	f7ff ff1f 	bl	8015cd6 <MQTTSetMessageHandler>
 8015e98:	6378      	str	r0, [r7, #52]	; 0x34
 8015e9a:	e008      	b.n	8015eae <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 8015e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8015ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8015ea2:	e004      	b.n	8015eae <MQTTSubscribeWithResults+0x104>
		    goto exit;
 8015ea4:	bf00      	nop
 8015ea6:	e002      	b.n	8015eae <MQTTSubscribeWithResults+0x104>
        goto exit;
 8015ea8:	bf00      	nop
 8015eaa:	e000      	b.n	8015eae <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 8015eac:	bf00      	nop

exit:
    if (rc == FAILURE)
 8015eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015eb4:	d102      	bne.n	8015ebc <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 8015eb6:	68f8      	ldr	r0, [r7, #12]
 8015eb8:	f7ff fd04 	bl	80158c4 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 8015ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8015ebe:	4618      	mov	r0, r3
 8015ec0:	3738      	adds	r7, #56	; 0x38
 8015ec2:	46bd      	mov	sp, r7
 8015ec4:	bdb0      	pop	{r4, r5, r7, pc}

08015ec6 <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 8015ec6:	b580      	push	{r7, lr}
 8015ec8:	b088      	sub	sp, #32
 8015eca:	af02      	add	r7, sp, #8
 8015ecc:	60f8      	str	r0, [r7, #12]
 8015ece:	60b9      	str	r1, [r7, #8]
 8015ed0:	603b      	str	r3, [r7, #0]
 8015ed2:	4613      	mov	r3, r2
 8015ed4:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 8015ed6:	79fa      	ldrb	r2, [r7, #7]
 8015ed8:	f107 0314 	add.w	r3, r7, #20
 8015edc:	9300      	str	r3, [sp, #0]
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	68b9      	ldr	r1, [r7, #8]
 8015ee2:	68f8      	ldr	r0, [r7, #12]
 8015ee4:	f7ff ff61 	bl	8015daa <MQTTSubscribeWithResults>
 8015ee8:	4603      	mov	r3, r0
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3718      	adds	r7, #24
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}

08015ef2 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 8015ef2:	b590      	push	{r4, r7, lr}
 8015ef4:	b085      	sub	sp, #20
 8015ef6:	af00      	add	r7, sp, #0
 8015ef8:	6078      	str	r0, [r7, #4]
	int len = 0;
 8015efa:	2300      	movs	r3, #0
 8015efc:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	7a1b      	ldrb	r3, [r3, #8]
 8015f02:	2b03      	cmp	r3, #3
 8015f04:	d102      	bne.n	8015f0c <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8015f06:	230c      	movs	r3, #12
 8015f08:	60fb      	str	r3, [r7, #12]
 8015f0a:	e005      	b.n	8015f18 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	7a1b      	ldrb	r3, [r3, #8]
 8015f10:	2b04      	cmp	r3, #4
 8015f12:	d101      	bne.n	8015f18 <MQTTSerialize_connectLength+0x26>
		len = 10;
 8015f14:	230a      	movs	r3, #10
 8015f16:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	330c      	adds	r3, #12
 8015f1c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f20:	f000 fd77 	bl	8016a12 <MQTTstrlen>
 8015f24:	4603      	mov	r3, r0
 8015f26:	3302      	adds	r3, #2
 8015f28:	68fa      	ldr	r2, [r7, #12]
 8015f2a:	4413      	add	r3, r2
 8015f2c:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	7edb      	ldrb	r3, [r3, #27]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d013      	beq.n	8015f5e <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	3324      	adds	r3, #36	; 0x24
 8015f3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f3e:	f000 fd68 	bl	8016a12 <MQTTstrlen>
 8015f42:	4603      	mov	r3, r0
 8015f44:	1c9c      	adds	r4, r3, #2
 8015f46:	687b      	ldr	r3, [r7, #4]
 8015f48:	3330      	adds	r3, #48	; 0x30
 8015f4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f4e:	f000 fd60 	bl	8016a12 <MQTTstrlen>
 8015f52:	4603      	mov	r3, r0
 8015f54:	4423      	add	r3, r4
 8015f56:	3302      	adds	r3, #2
 8015f58:	68fa      	ldr	r2, [r7, #12]
 8015f5a:	4413      	add	r3, r2
 8015f5c:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d103      	bne.n	8015f6e <MQTTSerialize_connectLength+0x7c>
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d00a      	beq.n	8015f84 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	3340      	adds	r3, #64	; 0x40
 8015f72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f76:	f000 fd4c 	bl	8016a12 <MQTTstrlen>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	3302      	adds	r3, #2
 8015f7e:	68fa      	ldr	r2, [r7, #12]
 8015f80:	4413      	add	r3, r2
 8015f82:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d103      	bne.n	8015f94 <MQTTSerialize_connectLength+0xa2>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d00a      	beq.n	8015faa <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	334c      	adds	r3, #76	; 0x4c
 8015f98:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8015f9c:	f000 fd39 	bl	8016a12 <MQTTstrlen>
 8015fa0:	4603      	mov	r3, r0
 8015fa2:	3302      	adds	r3, #2
 8015fa4:	68fa      	ldr	r2, [r7, #12]
 8015fa6:	4413      	add	r3, r2
 8015fa8:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8015faa:	68fb      	ldr	r3, [r7, #12]
}
 8015fac:	4618      	mov	r0, r3
 8015fae:	3714      	adds	r7, #20
 8015fb0:	46bd      	mov	sp, r7
 8015fb2:	bd90      	pop	{r4, r7, pc}

08015fb4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8015fb4:	b580      	push	{r7, lr}
 8015fb6:	b08a      	sub	sp, #40	; 0x28
 8015fb8:	af00      	add	r7, sp, #0
 8015fba:	60f8      	str	r0, [r7, #12]
 8015fbc:	60b9      	str	r1, [r7, #8]
 8015fbe:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8015fc4:	2300      	movs	r3, #0
 8015fc6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8015fc8:	2300      	movs	r3, #0
 8015fca:	617b      	str	r3, [r7, #20]
	int len = 0;
 8015fcc:	2300      	movs	r3, #0
 8015fce:	623b      	str	r3, [r7, #32]
	int rc = -1;
 8015fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fd4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8015fd6:	6878      	ldr	r0, [r7, #4]
 8015fd8:	f7ff ff8b 	bl	8015ef2 <MQTTSerialize_connectLength>
 8015fdc:	6238      	str	r0, [r7, #32]
 8015fde:	6a38      	ldr	r0, [r7, #32]
 8015fe0:	f000 fbcc 	bl	801677c <MQTTPacket_len>
 8015fe4:	4602      	mov	r2, r0
 8015fe6:	68bb      	ldr	r3, [r7, #8]
 8015fe8:	4293      	cmp	r3, r2
 8015fea:	da03      	bge.n	8015ff4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8015fec:	f06f 0301 	mvn.w	r3, #1
 8015ff0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8015ff2:	e0c3      	b.n	801617c <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8015ff8:	7e3b      	ldrb	r3, [r7, #24]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	f362 1307 	bfi	r3, r2, #4, #4
 8016000:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8016002:	7e3a      	ldrb	r2, [r7, #24]
 8016004:	f107 031c 	add.w	r3, r7, #28
 8016008:	4611      	mov	r1, r2
 801600a:	4618      	mov	r0, r3
 801600c:	f000 fc45 	bl	801689a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 8016010:	69fb      	ldr	r3, [r7, #28]
 8016012:	6a39      	ldr	r1, [r7, #32]
 8016014:	4618      	mov	r0, r3
 8016016:	f000 fb45 	bl	80166a4 <MQTTPacket_encode>
 801601a:	4602      	mov	r2, r0
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	4413      	add	r3, r2
 8016020:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	7a1b      	ldrb	r3, [r3, #8]
 8016026:	2b04      	cmp	r3, #4
 8016028:	d10c      	bne.n	8016044 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 801602a:	f107 031c 	add.w	r3, r7, #28
 801602e:	4956      	ldr	r1, [pc, #344]	; (8016188 <MQTTSerialize_connect+0x1d4>)
 8016030:	4618      	mov	r0, r3
 8016032:	f000 fc70 	bl	8016916 <writeCString>
		writeChar(&ptr, (char) 4);
 8016036:	f107 031c 	add.w	r3, r7, #28
 801603a:	2104      	movs	r1, #4
 801603c:	4618      	mov	r0, r3
 801603e:	f000 fc2c 	bl	801689a <writeChar>
 8016042:	e00b      	b.n	801605c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 8016044:	f107 031c 	add.w	r3, r7, #28
 8016048:	4950      	ldr	r1, [pc, #320]	; (801618c <MQTTSerialize_connect+0x1d8>)
 801604a:	4618      	mov	r0, r3
 801604c:	f000 fc63 	bl	8016916 <writeCString>
		writeChar(&ptr, (char) 3);
 8016050:	f107 031c 	add.w	r3, r7, #28
 8016054:	2103      	movs	r1, #3
 8016056:	4618      	mov	r0, r3
 8016058:	f000 fc1f 	bl	801689a <writeChar>
	}

	flags.all = 0;
 801605c:	2300      	movs	r3, #0
 801605e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	7e9b      	ldrb	r3, [r3, #26]
 8016064:	f003 0301 	and.w	r3, r3, #1
 8016068:	b2da      	uxtb	r2, r3
 801606a:	7d3b      	ldrb	r3, [r7, #20]
 801606c:	f362 0341 	bfi	r3, r2, #1, #1
 8016070:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	7edb      	ldrb	r3, [r3, #27]
 8016076:	2b00      	cmp	r3, #0
 8016078:	bf14      	ite	ne
 801607a:	2301      	movne	r3, #1
 801607c:	2300      	moveq	r3, #0
 801607e:	b2da      	uxtb	r2, r3
 8016080:	7d3b      	ldrb	r3, [r7, #20]
 8016082:	f362 0382 	bfi	r3, r2, #2, #1
 8016086:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 8016088:	7d3b      	ldrb	r3, [r7, #20]
 801608a:	f003 0304 	and.w	r3, r3, #4
 801608e:	b2db      	uxtb	r3, r3
 8016090:	2b00      	cmp	r3, #0
 8016092:	d013      	beq.n	80160bc <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 801609a:	f003 0303 	and.w	r3, r3, #3
 801609e:	b2da      	uxtb	r2, r3
 80160a0:	7d3b      	ldrb	r3, [r7, #20]
 80160a2:	f362 03c4 	bfi	r3, r2, #3, #2
 80160a6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80160ae:	f003 0301 	and.w	r3, r3, #1
 80160b2:	b2da      	uxtb	r2, r3
 80160b4:	7d3b      	ldrb	r3, [r7, #20]
 80160b6:	f362 1345 	bfi	r3, r2, #5, #1
 80160ba:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 80160bc:	687b      	ldr	r3, [r7, #4]
 80160be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d103      	bne.n	80160cc <MQTTSerialize_connect+0x118>
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d003      	beq.n	80160d4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 80160cc:	7d3b      	ldrb	r3, [r7, #20]
 80160ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80160d2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80160d8:	2b00      	cmp	r3, #0
 80160da:	d103      	bne.n	80160e4 <MQTTSerialize_connect+0x130>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d003      	beq.n	80160ec <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 80160e4:	7d3b      	ldrb	r3, [r7, #20]
 80160e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160ea:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 80160ec:	7d3a      	ldrb	r2, [r7, #20]
 80160ee:	f107 031c 	add.w	r3, r7, #28
 80160f2:	4611      	mov	r1, r2
 80160f4:	4618      	mov	r0, r3
 80160f6:	f000 fbd0 	bl	801689a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	8b1b      	ldrh	r3, [r3, #24]
 80160fe:	461a      	mov	r2, r3
 8016100:	f107 031c 	add.w	r3, r7, #28
 8016104:	4611      	mov	r1, r2
 8016106:	4618      	mov	r0, r3
 8016108:	f000 fbdc 	bl	80168c4 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f107 001c 	add.w	r0, r7, #28
 8016112:	330c      	adds	r3, #12
 8016114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016116:	f000 fc1d 	bl	8016954 <writeMQTTString>
	if (options->willFlag)
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	7edb      	ldrb	r3, [r3, #27]
 801611e:	2b00      	cmp	r3, #0
 8016120:	d00d      	beq.n	801613e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	f107 001c 	add.w	r0, r7, #28
 8016128:	3324      	adds	r3, #36	; 0x24
 801612a:	cb0e      	ldmia	r3, {r1, r2, r3}
 801612c:	f000 fc12 	bl	8016954 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	f107 001c 	add.w	r0, r7, #28
 8016136:	3330      	adds	r3, #48	; 0x30
 8016138:	cb0e      	ldmia	r3, {r1, r2, r3}
 801613a:	f000 fc0b 	bl	8016954 <writeMQTTString>
	}
	if (flags.bits.username)
 801613e:	7d3b      	ldrb	r3, [r7, #20]
 8016140:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8016144:	b2db      	uxtb	r3, r3
 8016146:	2b00      	cmp	r3, #0
 8016148:	d006      	beq.n	8016158 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	f107 001c 	add.w	r0, r7, #28
 8016150:	3340      	adds	r3, #64	; 0x40
 8016152:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016154:	f000 fbfe 	bl	8016954 <writeMQTTString>
	if (flags.bits.password)
 8016158:	7d3b      	ldrb	r3, [r7, #20]
 801615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801615e:	b2db      	uxtb	r3, r3
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 8016164:	687b      	ldr	r3, [r7, #4]
 8016166:	f107 001c 	add.w	r0, r7, #28
 801616a:	334c      	adds	r3, #76	; 0x4c
 801616c:	cb0e      	ldmia	r3, {r1, r2, r3}
 801616e:	f000 fbf1 	bl	8016954 <writeMQTTString>

	rc = ptr - buf;
 8016172:	69fb      	ldr	r3, [r7, #28]
 8016174:	461a      	mov	r2, r3
 8016176:	68fb      	ldr	r3, [r7, #12]
 8016178:	1ad3      	subs	r3, r2, r3
 801617a:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 801617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801617e:	4618      	mov	r0, r3
 8016180:	3728      	adds	r7, #40	; 0x28
 8016182:	46bd      	mov	sp, r7
 8016184:	bd80      	pop	{r7, pc}
 8016186:	bf00      	nop
 8016188:	0801c834 	.word	0x0801c834
 801618c:	0801c83c 	.word	0x0801c83c

08016190 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 8016190:	b580      	push	{r7, lr}
 8016192:	b08a      	sub	sp, #40	; 0x28
 8016194:	af00      	add	r7, sp, #0
 8016196:	60f8      	str	r0, [r7, #12]
 8016198:	60b9      	str	r1, [r7, #8]
 801619a:	607a      	str	r2, [r7, #4]
 801619c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 801619e:	2300      	movs	r3, #0
 80161a0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80161a2:	687b      	ldr	r3, [r7, #4]
 80161a4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80161a6:	2300      	movs	r3, #0
 80161a8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80161aa:	2300      	movs	r3, #0
 80161ac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 80161ae:	2300      	movs	r3, #0
 80161b0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80161b2:	f107 0318 	add.w	r3, r7, #24
 80161b6:	4618      	mov	r0, r3
 80161b8:	f000 fb5b 	bl	8016872 <readChar>
 80161bc:	4603      	mov	r3, r0
 80161be:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 80161c0:	7f3b      	ldrb	r3, [r7, #28]
 80161c2:	f023 030f 	bic.w	r3, r3, #15
 80161c6:	b2db      	uxtb	r3, r3
 80161c8:	2b20      	cmp	r3, #32
 80161ca:	d12e      	bne.n	801622a <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80161cc:	69bb      	ldr	r3, [r7, #24]
 80161ce:	f107 0214 	add.w	r2, r7, #20
 80161d2:	4611      	mov	r1, r2
 80161d4:	4618      	mov	r0, r3
 80161d6:	f000 fb1b 	bl	8016810 <MQTTPacket_decodeBuf>
 80161da:	6278      	str	r0, [r7, #36]	; 0x24
 80161dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161de:	69bb      	ldr	r3, [r7, #24]
 80161e0:	4413      	add	r3, r2
 80161e2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 80161e4:	69bb      	ldr	r3, [r7, #24]
 80161e6:	697a      	ldr	r2, [r7, #20]
 80161e8:	4413      	add	r3, r2
 80161ea:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 80161ec:	6a3b      	ldr	r3, [r7, #32]
 80161ee:	69ba      	ldr	r2, [r7, #24]
 80161f0:	1a9b      	subs	r3, r3, r2
 80161f2:	2b01      	cmp	r3, #1
 80161f4:	dd1b      	ble.n	801622e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 80161f6:	f107 0318 	add.w	r3, r7, #24
 80161fa:	4618      	mov	r0, r3
 80161fc:	f000 fb39 	bl	8016872 <readChar>
 8016200:	4603      	mov	r3, r0
 8016202:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 8016204:	7c3b      	ldrb	r3, [r7, #16]
 8016206:	f3c3 0300 	ubfx	r3, r3, #0, #1
 801620a:	b2db      	uxtb	r3, r3
 801620c:	461a      	mov	r2, r3
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 8016212:	f107 0318 	add.w	r3, r7, #24
 8016216:	4618      	mov	r0, r3
 8016218:	f000 fb2b 	bl	8016872 <readChar>
 801621c:	4603      	mov	r3, r0
 801621e:	461a      	mov	r2, r3
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	701a      	strb	r2, [r3, #0]

	rc = 1;
 8016224:	2301      	movs	r3, #1
 8016226:	627b      	str	r3, [r7, #36]	; 0x24
 8016228:	e002      	b.n	8016230 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801622a:	bf00      	nop
 801622c:	e000      	b.n	8016230 <MQTTDeserialize_connack+0xa0>
		goto exit;
 801622e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016232:	4618      	mov	r0, r3
 8016234:	3728      	adds	r7, #40	; 0x28
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}

0801623a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 801623a:	b580      	push	{r7, lr}
 801623c:	b088      	sub	sp, #32
 801623e:	af00      	add	r7, sp, #0
 8016240:	60f8      	str	r0, [r7, #12]
 8016242:	60b9      	str	r1, [r7, #8]
 8016244:	4613      	mov	r3, r2
 8016246:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 8016248:	2300      	movs	r3, #0
 801624a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 801624c:	f04f 33ff 	mov.w	r3, #4294967295
 8016250:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	2b01      	cmp	r3, #1
 801625a:	dc03      	bgt.n	8016264 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 801625c:	f06f 0301 	mvn.w	r3, #1
 8016260:	61fb      	str	r3, [r7, #28]
		goto exit;
 8016262:	e01e      	b.n	80162a2 <MQTTSerialize_zero+0x68>
	}
	header.byte = 0;
 8016264:	2300      	movs	r3, #0
 8016266:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 8016268:	79fb      	ldrb	r3, [r7, #7]
 801626a:	f003 030f 	and.w	r3, r3, #15
 801626e:	b2da      	uxtb	r2, r3
 8016270:	7e3b      	ldrb	r3, [r7, #24]
 8016272:	f362 1307 	bfi	r3, r2, #4, #4
 8016276:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8016278:	7e3a      	ldrb	r2, [r7, #24]
 801627a:	f107 0314 	add.w	r3, r7, #20
 801627e:	4611      	mov	r1, r2
 8016280:	4618      	mov	r0, r3
 8016282:	f000 fb0a 	bl	801689a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 8016286:	697b      	ldr	r3, [r7, #20]
 8016288:	2100      	movs	r1, #0
 801628a:	4618      	mov	r0, r3
 801628c:	f000 fa0a 	bl	80166a4 <MQTTPacket_encode>
 8016290:	4602      	mov	r2, r0
 8016292:	697b      	ldr	r3, [r7, #20]
 8016294:	4413      	add	r3, r2
 8016296:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 8016298:	697b      	ldr	r3, [r7, #20]
 801629a:	461a      	mov	r2, r3
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	1ad3      	subs	r3, r2, r3
 80162a0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 80162a2:	69fb      	ldr	r3, [r7, #28]
}
 80162a4:	4618      	mov	r0, r3
 80162a6:	3720      	adds	r7, #32
 80162a8:	46bd      	mov	sp, r7
 80162aa:	bd80      	pop	{r7, pc}

080162ac <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 80162b6:	220c      	movs	r2, #12
 80162b8:	6839      	ldr	r1, [r7, #0]
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	f7ff ffbd 	bl	801623a <MQTTSerialize_zero>
 80162c0:	4603      	mov	r3, r0
}
 80162c2:	4618      	mov	r0, r3
 80162c4:	3708      	adds	r7, #8
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}

080162ca <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80162ca:	b580      	push	{r7, lr}
 80162cc:	b08a      	sub	sp, #40	; 0x28
 80162ce:	af00      	add	r7, sp, #0
 80162d0:	60f8      	str	r0, [r7, #12]
 80162d2:	60b9      	str	r1, [r7, #8]
 80162d4:	607a      	str	r2, [r7, #4]
 80162d6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80162d8:	2300      	movs	r3, #0
 80162da:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80162dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80162de:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80162e0:	2300      	movs	r3, #0
 80162e2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80162e4:	2300      	movs	r3, #0
 80162e6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 80162e8:	2300      	movs	r3, #0
 80162ea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80162ec:	f107 0318 	add.w	r3, r7, #24
 80162f0:	4618      	mov	r0, r3
 80162f2:	f000 fabe 	bl	8016872 <readChar>
 80162f6:	4603      	mov	r3, r0
 80162f8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 80162fa:	7f3b      	ldrb	r3, [r7, #28]
 80162fc:	f023 030f 	bic.w	r3, r3, #15
 8016300:	b2db      	uxtb	r3, r3
 8016302:	2b30      	cmp	r3, #48	; 0x30
 8016304:	d14b      	bne.n	801639e <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8016306:	7f3b      	ldrb	r3, [r7, #28]
 8016308:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801630c:	b2db      	uxtb	r3, r3
 801630e:	461a      	mov	r2, r3
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8016314:	7f3b      	ldrb	r3, [r7, #28]
 8016316:	f3c3 0341 	ubfx	r3, r3, #1, #2
 801631a:	b2db      	uxtb	r3, r3
 801631c:	461a      	mov	r2, r3
 801631e:	68bb      	ldr	r3, [r7, #8]
 8016320:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8016322:	7f3b      	ldrb	r3, [r7, #28]
 8016324:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8016328:	b2db      	uxtb	r3, r3
 801632a:	461a      	mov	r2, r3
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8016330:	69bb      	ldr	r3, [r7, #24]
 8016332:	f107 0214 	add.w	r2, r7, #20
 8016336:	4611      	mov	r1, r2
 8016338:	4618      	mov	r0, r3
 801633a:	f000 fa69 	bl	8016810 <MQTTPacket_decodeBuf>
 801633e:	6278      	str	r0, [r7, #36]	; 0x24
 8016340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	4413      	add	r3, r2
 8016346:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8016348:	69bb      	ldr	r3, [r7, #24]
 801634a:	697a      	ldr	r2, [r7, #20]
 801634c:	4413      	add	r3, r2
 801634e:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8016350:	f107 0318 	add.w	r3, r7, #24
 8016354:	6a3a      	ldr	r2, [r7, #32]
 8016356:	4619      	mov	r1, r3
 8016358:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801635a:	f000 fb29 	bl	80169b0 <readMQTTLenString>
 801635e:	4603      	mov	r3, r0
 8016360:	2b00      	cmp	r3, #0
 8016362:	d01e      	beq.n	80163a2 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 8016364:	6a3b      	ldr	r3, [r7, #32]
 8016366:	69ba      	ldr	r2, [r7, #24]
 8016368:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 801636a:	2b00      	cmp	r3, #0
 801636c:	db19      	blt.n	80163a2 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 801636e:	68bb      	ldr	r3, [r7, #8]
 8016370:	681b      	ldr	r3, [r3, #0]
 8016372:	2b00      	cmp	r3, #0
 8016374:	dd08      	ble.n	8016388 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 8016376:	f107 0318 	add.w	r3, r7, #24
 801637a:	4618      	mov	r0, r3
 801637c:	f000 fa5e 	bl	801683c <readInt>
 8016380:	4603      	mov	r3, r0
 8016382:	b29a      	uxth	r2, r3
 8016384:	683b      	ldr	r3, [r7, #0]
 8016386:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 8016388:	6a3b      	ldr	r3, [r7, #32]
 801638a:	69ba      	ldr	r2, [r7, #24]
 801638c:	1a9a      	subs	r2, r3, r2
 801638e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016390:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 8016392:	69ba      	ldr	r2, [r7, #24]
 8016394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016396:	601a      	str	r2, [r3, #0]
	rc = 1;
 8016398:	2301      	movs	r3, #1
 801639a:	627b      	str	r3, [r7, #36]	; 0x24
 801639c:	e002      	b.n	80163a4 <MQTTDeserialize_publish+0xda>
		goto exit;
 801639e:	bf00      	nop
 80163a0:	e000      	b.n	80163a4 <MQTTDeserialize_publish+0xda>
exit:
 80163a2:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 80163a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80163a6:	4618      	mov	r0, r3
 80163a8:	3728      	adds	r7, #40	; 0x28
 80163aa:	46bd      	mov	sp, r7
 80163ac:	bd80      	pop	{r7, pc}

080163ae <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 80163ae:	b580      	push	{r7, lr}
 80163b0:	b08a      	sub	sp, #40	; 0x28
 80163b2:	af00      	add	r7, sp, #0
 80163b4:	60f8      	str	r0, [r7, #12]
 80163b6:	60b9      	str	r1, [r7, #8]
 80163b8:	607a      	str	r2, [r7, #4]
 80163ba:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 80163bc:	2300      	movs	r3, #0
 80163be:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 80163c0:	683b      	ldr	r3, [r7, #0]
 80163c2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 80163c4:	2300      	movs	r3, #0
 80163c6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 80163c8:	2300      	movs	r3, #0
 80163ca:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 80163cc:	f107 0318 	add.w	r3, r7, #24
 80163d0:	4618      	mov	r0, r3
 80163d2:	f000 fa4e 	bl	8016872 <readChar>
 80163d6:	4603      	mov	r3, r0
 80163d8:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 80163da:	7f3b      	ldrb	r3, [r7, #28]
 80163dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80163e0:	b2db      	uxtb	r3, r3
 80163e2:	461a      	mov	r2, r3
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 80163e8:	7f3b      	ldrb	r3, [r7, #28]
 80163ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80163ee:	b2db      	uxtb	r3, r3
 80163f0:	461a      	mov	r2, r3
 80163f2:	68fb      	ldr	r3, [r7, #12]
 80163f4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 80163f6:	69bb      	ldr	r3, [r7, #24]
 80163f8:	f107 0214 	add.w	r2, r7, #20
 80163fc:	4611      	mov	r1, r2
 80163fe:	4618      	mov	r0, r3
 8016400:	f000 fa06 	bl	8016810 <MQTTPacket_decodeBuf>
 8016404:	6278      	str	r0, [r7, #36]	; 0x24
 8016406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016408:	69bb      	ldr	r3, [r7, #24]
 801640a:	4413      	add	r3, r2
 801640c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	697a      	ldr	r2, [r7, #20]
 8016412:	4413      	add	r3, r2
 8016414:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 8016416:	6a3b      	ldr	r3, [r7, #32]
 8016418:	69ba      	ldr	r2, [r7, #24]
 801641a:	1a9b      	subs	r3, r3, r2
 801641c:	2b01      	cmp	r3, #1
 801641e:	dd0b      	ble.n	8016438 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 8016420:	f107 0318 	add.w	r3, r7, #24
 8016424:	4618      	mov	r0, r3
 8016426:	f000 fa09 	bl	801683c <readInt>
 801642a:	4603      	mov	r3, r0
 801642c:	b29a      	uxth	r2, r3
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	801a      	strh	r2, [r3, #0]

	rc = 1;
 8016432:	2301      	movs	r3, #1
 8016434:	627b      	str	r3, [r7, #36]	; 0x24
 8016436:	e000      	b.n	801643a <MQTTDeserialize_ack+0x8c>
		goto exit;
 8016438:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 801643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801643c:	4618      	mov	r0, r3
 801643e:	3728      	adds	r7, #40	; 0x28
 8016440:	46bd      	mov	sp, r7
 8016442:	bd80      	pop	{r7, pc}

08016444 <TimerIsExpired>:
#define SERVER_IP3	1
#define SERVER_IP4	227

uint32_t MilliTimer;

char TimerIsExpired(Timer *timer) {
 8016444:	b480      	push	{r7}
 8016446:	b085      	sub	sp, #20
 8016448:	af00      	add	r7, sp, #0
 801644a:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	685a      	ldr	r2, [r3, #4]
 8016450:	4b06      	ldr	r3, [pc, #24]	; (801646c <TimerIsExpired+0x28>)
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	1ad3      	subs	r3, r2, r3
 8016456:	60fb      	str	r3, [r7, #12]
	return (left < 0);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	0fdb      	lsrs	r3, r3, #31
 801645c:	b2db      	uxtb	r3, r3
}
 801645e:	4618      	mov	r0, r3
 8016460:	3714      	adds	r7, #20
 8016462:	46bd      	mov	sp, r7
 8016464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016468:	4770      	bx	lr
 801646a:	bf00      	nop
 801646c:	2000c528 	.word	0x2000c528

08016470 <TimerCountdownMS>:

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
 8016470:	b480      	push	{r7}
 8016472:	b083      	sub	sp, #12
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
 8016478:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + timeout;
 801647a:	4b06      	ldr	r3, [pc, #24]	; (8016494 <TimerCountdownMS+0x24>)
 801647c:	681a      	ldr	r2, [r3, #0]
 801647e:	683b      	ldr	r3, [r7, #0]
 8016480:	441a      	add	r2, r3
 8016482:	687b      	ldr	r3, [r7, #4]
 8016484:	605a      	str	r2, [r3, #4]
}
 8016486:	bf00      	nop
 8016488:	370c      	adds	r7, #12
 801648a:	46bd      	mov	sp, r7
 801648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016490:	4770      	bx	lr
 8016492:	bf00      	nop
 8016494:	2000c528 	.word	0x2000c528

08016498 <TimerCountdown>:

void TimerCountdown(Timer *timer, unsigned int timeout) {
 8016498:	b480      	push	{r7}
 801649a:	b083      	sub	sp, #12
 801649c:	af00      	add	r7, sp, #0
 801649e:	6078      	str	r0, [r7, #4]
 80164a0:	6039      	str	r1, [r7, #0]
	timer->end_time = MilliTimer + (timeout * 1000);
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80164a8:	fb02 f203 	mul.w	r2, r2, r3
 80164ac:	4b05      	ldr	r3, [pc, #20]	; (80164c4 <TimerCountdown+0x2c>)
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	441a      	add	r2, r3
 80164b2:	687b      	ldr	r3, [r7, #4]
 80164b4:	605a      	str	r2, [r3, #4]
}
 80164b6:	bf00      	nop
 80164b8:	370c      	adds	r7, #12
 80164ba:	46bd      	mov	sp, r7
 80164bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c0:	4770      	bx	lr
 80164c2:	bf00      	nop
 80164c4:	2000c528 	.word	0x2000c528

080164c8 <TimerLeftMS>:

int TimerLeftMS(Timer *timer) {
 80164c8:	b480      	push	{r7}
 80164ca:	b085      	sub	sp, #20
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
	long left = timer->end_time - MilliTimer;
 80164d0:	687b      	ldr	r3, [r7, #4]
 80164d2:	685a      	ldr	r2, [r3, #4]
 80164d4:	4b06      	ldr	r3, [pc, #24]	; (80164f0 <TimerLeftMS+0x28>)
 80164d6:	681b      	ldr	r3, [r3, #0]
 80164d8:	1ad3      	subs	r3, r2, r3
 80164da:	60fb      	str	r3, [r7, #12]
	return (left < 0) ? 0 : left;
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 80164e2:	4618      	mov	r0, r3
 80164e4:	3714      	adds	r7, #20
 80164e6:	46bd      	mov	sp, r7
 80164e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ec:	4770      	bx	lr
 80164ee:	bf00      	nop
 80164f0:	2000c528 	.word	0x2000c528

080164f4 <TimerInit>:

void TimerInit(Timer *timer) {
 80164f4:	b480      	push	{r7}
 80164f6:	b083      	sub	sp, #12
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
	timer->end_time = 0;
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	2200      	movs	r2, #0
 8016500:	605a      	str	r2, [r3, #4]
}
 8016502:	bf00      	nop
 8016504:	370c      	adds	r7, #12
 8016506:	46bd      	mov	sp, r7
 8016508:	f85d 7b04 	ldr.w	r7, [sp], #4
 801650c:	4770      	bx	lr
	...

08016510 <NewNetwork>:

void NewNetwork(Network *n) {
 8016510:	b480      	push	{r7}
 8016512:	b083      	sub	sp, #12
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
	n->conn = NULL;
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2200      	movs	r2, #0
 801651c:	601a      	str	r2, [r3, #0]
	n->mqttread = net_read;
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	4a06      	ldr	r2, [pc, #24]	; (801653c <NewNetwork+0x2c>)
 8016522:	605a      	str	r2, [r3, #4]
	n->mqttwrite = net_write;
 8016524:	687b      	ldr	r3, [r7, #4]
 8016526:	4a06      	ldr	r2, [pc, #24]	; (8016540 <NewNetwork+0x30>)
 8016528:	609a      	str	r2, [r3, #8]
	n->disconnect = net_disconnect;
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	4a05      	ldr	r2, [pc, #20]	; (8016544 <NewNetwork+0x34>)
 801652e:	60da      	str	r2, [r3, #12]
}
 8016530:	bf00      	nop
 8016532:	370c      	adds	r7, #12
 8016534:	46bd      	mov	sp, r7
 8016536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801653a:	4770      	bx	lr
 801653c:	08016549 	.word	0x08016549
 8016540:	080165bf 	.word	0x080165bf
 8016544:	08016619 	.word	0x08016619

08016548 <net_read>:

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 8016548:	b580      	push	{r7, lr}
 801654a:	b088      	sub	sp, #32
 801654c:	af00      	add	r7, sp, #0
 801654e:	60f8      	str	r0, [r7, #12]
 8016550:	60b9      	str	r1, [r7, #8]
 8016552:	607a      	str	r2, [r7, #4]
 8016554:	603b      	str	r3, [r7, #0]
	struct netbuf *buf;
	void *data;

	uint16_t nLen = 0; //buffer length
 8016556:	2300      	movs	r3, #0
 8016558:	827b      	strh	r3, [r7, #18]
	uint16_t nRead = 0; //read buffer index
 801655a:	2300      	movs	r3, #0
 801655c:	83fb      	strh	r3, [r7, #30]

	while (netconn_recv(n->conn, &buf) == ERR_OK) //receive the response
 801655e:	e01e      	b.n	801659e <net_read+0x56>
	{
		do {
			netbuf_data(buf, &data, &nLen); //receive data pointer & length
 8016560:	69bb      	ldr	r3, [r7, #24]
 8016562:	f107 0212 	add.w	r2, r7, #18
 8016566:	f107 0114 	add.w	r1, r7, #20
 801656a:	4618      	mov	r0, r3
 801656c:	f7f1 fb54 	bl	8007c18 <netbuf_data>
			memcpy(buffer + nRead, data, nLen);
 8016570:	8bfb      	ldrh	r3, [r7, #30]
 8016572:	68ba      	ldr	r2, [r7, #8]
 8016574:	4413      	add	r3, r2
 8016576:	6979      	ldr	r1, [r7, #20]
 8016578:	8a7a      	ldrh	r2, [r7, #18]
 801657a:	4618      	mov	r0, r3
 801657c:	f001 fcf7 	bl	8017f6e <memcpy>
			nRead += nLen;
 8016580:	8a7a      	ldrh	r2, [r7, #18]
 8016582:	8bfb      	ldrh	r3, [r7, #30]
 8016584:	4413      	add	r3, r2
 8016586:	83fb      	strh	r3, [r7, #30]
		} while (netbuf_next(buf) >= 0); //check buffer empty
 8016588:	69bb      	ldr	r3, [r7, #24]
 801658a:	4618      	mov	r0, r3
 801658c:	f7f1 fb8e 	bl	8007cac <netbuf_next>
 8016590:	4603      	mov	r3, r0
 8016592:	2b00      	cmp	r3, #0
 8016594:	dae4      	bge.n	8016560 <net_read+0x18>
		netbuf_delete(buf); //clear buffer
 8016596:	69bb      	ldr	r3, [r7, #24]
 8016598:	4618      	mov	r0, r3
 801659a:	f7f1 fb1d 	bl	8007bd8 <netbuf_delete>
	while (netconn_recv(n->conn, &buf) == ERR_OK) //receive the response
 801659e:	68fb      	ldr	r3, [r7, #12]
 80165a0:	681b      	ldr	r3, [r3, #0]
 80165a2:	f107 0218 	add.w	r2, r7, #24
 80165a6:	4611      	mov	r1, r2
 80165a8:	4618      	mov	r0, r3
 80165aa:	f7ef fde3 	bl	8006174 <netconn_recv>
 80165ae:	4603      	mov	r3, r0
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d0d5      	beq.n	8016560 <net_read+0x18>
	}

	return nRead;
 80165b4:	8bfb      	ldrh	r3, [r7, #30]
}
 80165b6:	4618      	mov	r0, r3
 80165b8:	3720      	adds	r7, #32
 80165ba:	46bd      	mov	sp, r7
 80165bc:	bd80      	pop	{r7, pc}

080165be <net_write>:

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
 80165be:	b580      	push	{r7, lr}
 80165c0:	b088      	sub	sp, #32
 80165c2:	af02      	add	r7, sp, #8
 80165c4:	60f8      	str	r0, [r7, #12]
 80165c6:	60b9      	str	r1, [r7, #8]
 80165c8:	607a      	str	r2, [r7, #4]
 80165ca:	603b      	str	r3, [r7, #0]
	uint16_t nLen = 0; //buffer length
 80165cc:	2300      	movs	r3, #0
 80165ce:	82bb      	strh	r3, [r7, #20]
	uint16_t nWritten = 0; //write buffer index
 80165d0:	2300      	movs	r3, #0
 80165d2:	82fb      	strh	r3, [r7, #22]

	do {
		if (netconn_write_partly(n->conn, //connection
 80165d4:	68fb      	ldr	r3, [r7, #12]
 80165d6:	6818      	ldr	r0, [r3, #0]
 80165d8:	8afb      	ldrh	r3, [r7, #22]
				(const void*) (buffer + nWritten), //buffer pointer
 80165da:	68ba      	ldr	r2, [r7, #8]
 80165dc:	18d1      	adds	r1, r2, r3
				(len - nWritten), //buffer length
 80165de:	8afb      	ldrh	r3, [r7, #22]
 80165e0:	687a      	ldr	r2, [r7, #4]
 80165e2:	1ad3      	subs	r3, r2, r3
		if (netconn_write_partly(n->conn, //connection
 80165e4:	461a      	mov	r2, r3
 80165e6:	f107 0314 	add.w	r3, r7, #20
 80165ea:	9300      	str	r3, [sp, #0]
 80165ec:	2300      	movs	r3, #0
 80165ee:	f7ef fe3b 	bl	8006268 <netconn_write_partly>
 80165f2:	4603      	mov	r3, r0
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d002      	beq.n	80165fe <net_write+0x40>
				NETCONN_NOFLAG, //no copy
				(size_t*) &nLen) != ERR_OK) //written len
				{
			return -1;
 80165f8:	f04f 33ff 	mov.w	r3, #4294967295
 80165fc:	e008      	b.n	8016610 <net_write+0x52>
		} else {
			nWritten += nLen;
 80165fe:	8aba      	ldrh	r2, [r7, #20]
 8016600:	8afb      	ldrh	r3, [r7, #22]
 8016602:	4413      	add	r3, r2
 8016604:	82fb      	strh	r3, [r7, #22]
		}
	} while (nWritten < len); //send request
 8016606:	8afb      	ldrh	r3, [r7, #22]
 8016608:	687a      	ldr	r2, [r7, #4]
 801660a:	429a      	cmp	r2, r3
 801660c:	dce2      	bgt.n	80165d4 <net_write+0x16>

	return nWritten;
 801660e:	8afb      	ldrh	r3, [r7, #22]
}
 8016610:	4618      	mov	r0, r3
 8016612:	3718      	adds	r7, #24
 8016614:	46bd      	mov	sp, r7
 8016616:	bd80      	pop	{r7, pc}

08016618 <net_disconnect>:

void net_disconnect(Network *n) {
 8016618:	b580      	push	{r7, lr}
 801661a:	b082      	sub	sp, #8
 801661c:	af00      	add	r7, sp, #0
 801661e:	6078      	str	r0, [r7, #4]
	netconn_close(n->conn); //close session
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4618      	mov	r0, r3
 8016626:	f7ef ff21 	bl	800646c <netconn_close>
	netconn_delete(n->conn); //free memory
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	4618      	mov	r0, r3
 8016630:	f7ef fbd0 	bl	8005dd4 <netconn_delete>
}
 8016634:	bf00      	nop
 8016636:	3708      	adds	r7, #8
 8016638:	46bd      	mov	sp, r7
 801663a:	bd80      	pop	{r7, pc}

0801663c <ConnectNetwork>:

int ConnectNetwork(Network *n, char *ip, int port) {
 801663c:	b580      	push	{r7, lr}
 801663e:	b086      	sub	sp, #24
 8016640:	af00      	add	r7, sp, #0
 8016642:	60f8      	str	r0, [r7, #12]
 8016644:	60b9      	str	r1, [r7, #8]
 8016646:	607a      	str	r2, [r7, #4]
	err_t err;
	ip_addr_t server_ip;

	ipaddr_aton(ip, &server_ip);
 8016648:	f107 0310 	add.w	r3, r7, #16
 801664c:	4619      	mov	r1, r3
 801664e:	68b8      	ldr	r0, [r7, #8]
 8016650:	f7fd fc5c 	bl	8013f0c <ip4addr_aton>

	n->conn = netconn_new(NETCONN_TCP);
 8016654:	2200      	movs	r2, #0
 8016656:	2100      	movs	r1, #0
 8016658:	2010      	movs	r0, #16
 801665a:	f7ef fb1d 	bl	8005c98 <netconn_new_with_proto_and_callback>
 801665e:	4602      	mov	r2, r0
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	601a      	str	r2, [r3, #0]
	if (n->conn != NULL) {
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	681b      	ldr	r3, [r3, #0]
 8016668:	2b00      	cmp	r3, #0
 801666a:	d016      	beq.n	801669a <ConnectNetwork+0x5e>
		err = netconn_connect(n->conn, &server_ip, port);
 801666c:	68fb      	ldr	r3, [r7, #12]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	687a      	ldr	r2, [r7, #4]
 8016672:	b292      	uxth	r2, r2
 8016674:	f107 0110 	add.w	r1, r7, #16
 8016678:	4618      	mov	r0, r3
 801667a:	f7ef fbc7 	bl	8005e0c <netconn_connect>
 801667e:	4603      	mov	r3, r0
 8016680:	75fb      	strb	r3, [r7, #23]

		if (err != ERR_OK) {
 8016682:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016686:	2b00      	cmp	r3, #0
 8016688:	d007      	beq.n	801669a <ConnectNetwork+0x5e>
			netconn_delete(n->conn); //free memory
 801668a:	68fb      	ldr	r3, [r7, #12]
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	4618      	mov	r0, r3
 8016690:	f7ef fba0 	bl	8005dd4 <netconn_delete>
			return -1;
 8016694:	f04f 33ff 	mov.w	r3, #4294967295
 8016698:	e000      	b.n	801669c <ConnectNetwork+0x60>
		}
	}

	return 0;
 801669a:	2300      	movs	r3, #0
}
 801669c:	4618      	mov	r0, r3
 801669e:	3718      	adds	r7, #24
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bd80      	pop	{r7, pc}

080166a4 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80166a4:	b480      	push	{r7}
 80166a6:	b085      	sub	sp, #20
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
 80166ac:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80166ae:	2300      	movs	r3, #0
 80166b0:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80166b2:	683b      	ldr	r3, [r7, #0]
 80166b4:	425a      	negs	r2, r3
 80166b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80166ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80166be:	bf58      	it	pl
 80166c0:	4253      	negpl	r3, r2
 80166c2:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 80166c4:	683b      	ldr	r3, [r7, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	da00      	bge.n	80166cc <MQTTPacket_encode+0x28>
 80166ca:	337f      	adds	r3, #127	; 0x7f
 80166cc:	11db      	asrs	r3, r3, #7
 80166ce:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	dd03      	ble.n	80166de <MQTTPacket_encode+0x3a>
			d |= 0x80;
 80166d6:	7afb      	ldrb	r3, [r7, #11]
 80166d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80166dc:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 80166de:	68fb      	ldr	r3, [r7, #12]
 80166e0:	1c5a      	adds	r2, r3, #1
 80166e2:	60fa      	str	r2, [r7, #12]
 80166e4:	461a      	mov	r2, r3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	4413      	add	r3, r2
 80166ea:	7afa      	ldrb	r2, [r7, #11]
 80166ec:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	dcde      	bgt.n	80166b2 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 80166f4:	68fb      	ldr	r3, [r7, #12]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	3714      	adds	r7, #20
 80166fa:	46bd      	mov	sp, r7
 80166fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016700:	4770      	bx	lr

08016702 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 8016702:	b580      	push	{r7, lr}
 8016704:	b086      	sub	sp, #24
 8016706:	af00      	add	r7, sp, #0
 8016708:	6078      	str	r0, [r7, #4]
 801670a:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 801670c:	2301      	movs	r3, #1
 801670e:	617b      	str	r3, [r7, #20]
	int len = 0;
 8016710:	2300      	movs	r3, #0
 8016712:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 8016714:	683b      	ldr	r3, [r7, #0]
 8016716:	2200      	movs	r2, #0
 8016718:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 801671a:	f04f 33ff 	mov.w	r3, #4294967295
 801671e:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	3301      	adds	r3, #1
 8016724:	613b      	str	r3, [r7, #16]
 8016726:	693b      	ldr	r3, [r7, #16]
 8016728:	2b04      	cmp	r3, #4
 801672a:	dd03      	ble.n	8016734 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 801672c:	f04f 33ff 	mov.w	r3, #4294967295
 8016730:	60fb      	str	r3, [r7, #12]
			goto exit;
 8016732:	e01d      	b.n	8016770 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 8016734:	f107 020b 	add.w	r2, r7, #11
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	2101      	movs	r1, #1
 801673c:	4610      	mov	r0, r2
 801673e:	4798      	blx	r3
 8016740:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	2b01      	cmp	r3, #1
 8016746:	d112      	bne.n	801676e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8016748:	683b      	ldr	r3, [r7, #0]
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	7afb      	ldrb	r3, [r7, #11]
 801674e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016752:	6979      	ldr	r1, [r7, #20]
 8016754:	fb01 f303 	mul.w	r3, r1, r3
 8016758:	441a      	add	r2, r3
 801675a:	683b      	ldr	r3, [r7, #0]
 801675c:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 801675e:	697b      	ldr	r3, [r7, #20]
 8016760:	01db      	lsls	r3, r3, #7
 8016762:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 8016764:	7afb      	ldrb	r3, [r7, #11]
 8016766:	b25b      	sxtb	r3, r3
 8016768:	2b00      	cmp	r3, #0
 801676a:	dbd6      	blt.n	801671a <MQTTPacket_decode+0x18>
exit:
 801676c:	e000      	b.n	8016770 <MQTTPacket_decode+0x6e>
			goto exit;
 801676e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 8016770:	693b      	ldr	r3, [r7, #16]
}
 8016772:	4618      	mov	r0, r3
 8016774:	3718      	adds	r7, #24
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
	...

0801677c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 801677c:	b480      	push	{r7}
 801677e:	b083      	sub	sp, #12
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	3301      	adds	r3, #1
 8016788:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	2b7f      	cmp	r3, #127	; 0x7f
 801678e:	dc03      	bgt.n	8016798 <MQTTPacket_len+0x1c>
		rem_len += 1;
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	3301      	adds	r3, #1
 8016794:	607b      	str	r3, [r7, #4]
 8016796:	e012      	b.n	80167be <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801679e:	da03      	bge.n	80167a8 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	3302      	adds	r3, #2
 80167a4:	607b      	str	r3, [r7, #4]
 80167a6:	e00a      	b.n	80167be <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	4a08      	ldr	r2, [pc, #32]	; (80167cc <MQTTPacket_len+0x50>)
 80167ac:	4293      	cmp	r3, r2
 80167ae:	dc03      	bgt.n	80167b8 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	3303      	adds	r3, #3
 80167b4:	607b      	str	r3, [r7, #4]
 80167b6:	e002      	b.n	80167be <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80167b8:	687b      	ldr	r3, [r7, #4]
 80167ba:	3304      	adds	r3, #4
 80167bc:	607b      	str	r3, [r7, #4]
	return rem_len;
 80167be:	687b      	ldr	r3, [r7, #4]
}
 80167c0:	4618      	mov	r0, r3
 80167c2:	370c      	adds	r7, #12
 80167c4:	46bd      	mov	sp, r7
 80167c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ca:	4770      	bx	lr
 80167cc:	001ffffe 	.word	0x001ffffe

080167d0 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
 80167d8:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 80167da:	2300      	movs	r3, #0
 80167dc:	60fb      	str	r3, [r7, #12]
 80167de:	e00a      	b.n	80167f6 <bufchar+0x26>
		*c = *bufptr++;
 80167e0:	4b0a      	ldr	r3, [pc, #40]	; (801680c <bufchar+0x3c>)
 80167e2:	681b      	ldr	r3, [r3, #0]
 80167e4:	1c5a      	adds	r2, r3, #1
 80167e6:	4909      	ldr	r1, [pc, #36]	; (801680c <bufchar+0x3c>)
 80167e8:	600a      	str	r2, [r1, #0]
 80167ea:	781a      	ldrb	r2, [r3, #0]
 80167ec:	687b      	ldr	r3, [r7, #4]
 80167ee:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 80167f0:	68fb      	ldr	r3, [r7, #12]
 80167f2:	3301      	adds	r3, #1
 80167f4:	60fb      	str	r3, [r7, #12]
 80167f6:	68fa      	ldr	r2, [r7, #12]
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	429a      	cmp	r2, r3
 80167fc:	dbf0      	blt.n	80167e0 <bufchar+0x10>
	return count;
 80167fe:	683b      	ldr	r3, [r7, #0]
}
 8016800:	4618      	mov	r0, r3
 8016802:	3714      	adds	r7, #20
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr
 801680c:	200084f4 	.word	0x200084f4

08016810 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b082      	sub	sp, #8
 8016814:	af00      	add	r7, sp, #0
 8016816:	6078      	str	r0, [r7, #4]
 8016818:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 801681a:	4a06      	ldr	r2, [pc, #24]	; (8016834 <MQTTPacket_decodeBuf+0x24>)
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8016820:	6839      	ldr	r1, [r7, #0]
 8016822:	4805      	ldr	r0, [pc, #20]	; (8016838 <MQTTPacket_decodeBuf+0x28>)
 8016824:	f7ff ff6d 	bl	8016702 <MQTTPacket_decode>
 8016828:	4603      	mov	r3, r0
}
 801682a:	4618      	mov	r0, r3
 801682c:	3708      	adds	r7, #8
 801682e:	46bd      	mov	sp, r7
 8016830:	bd80      	pop	{r7, pc}
 8016832:	bf00      	nop
 8016834:	200084f4 	.word	0x200084f4
 8016838:	080167d1 	.word	0x080167d1

0801683c <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 801683c:	b480      	push	{r7}
 801683e:	b085      	sub	sp, #20
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 8016844:	687b      	ldr	r3, [r7, #4]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 801684a:	68fb      	ldr	r3, [r7, #12]
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	021b      	lsls	r3, r3, #8
 8016850:	68fa      	ldr	r2, [r7, #12]
 8016852:	3201      	adds	r2, #1
 8016854:	7812      	ldrb	r2, [r2, #0]
 8016856:	4413      	add	r3, r2
 8016858:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	1c9a      	adds	r2, r3, #2
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	601a      	str	r2, [r3, #0]
	return len;
 8016864:	68bb      	ldr	r3, [r7, #8]
}
 8016866:	4618      	mov	r0, r3
 8016868:	3714      	adds	r7, #20
 801686a:	46bd      	mov	sp, r7
 801686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016870:	4770      	bx	lr

08016872 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 8016872:	b480      	push	{r7}
 8016874:	b085      	sub	sp, #20
 8016876:	af00      	add	r7, sp, #0
 8016878:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 801687a:	687b      	ldr	r3, [r7, #4]
 801687c:	681b      	ldr	r3, [r3, #0]
 801687e:	781b      	ldrb	r3, [r3, #0]
 8016880:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	1c5a      	adds	r2, r3, #1
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	601a      	str	r2, [r3, #0]
	return c;
 801688c:	7bfb      	ldrb	r3, [r7, #15]
}
 801688e:	4618      	mov	r0, r3
 8016890:	3714      	adds	r7, #20
 8016892:	46bd      	mov	sp, r7
 8016894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016898:	4770      	bx	lr

0801689a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 801689a:	b480      	push	{r7}
 801689c:	b083      	sub	sp, #12
 801689e:	af00      	add	r7, sp, #0
 80168a0:	6078      	str	r0, [r7, #4]
 80168a2:	460b      	mov	r3, r1
 80168a4:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	681b      	ldr	r3, [r3, #0]
 80168aa:	78fa      	ldrb	r2, [r7, #3]
 80168ac:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	681b      	ldr	r3, [r3, #0]
 80168b2:	1c5a      	adds	r2, r3, #1
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	601a      	str	r2, [r3, #0]
}
 80168b8:	bf00      	nop
 80168ba:	370c      	adds	r7, #12
 80168bc:	46bd      	mov	sp, r7
 80168be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168c2:	4770      	bx	lr

080168c4 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
 80168cc:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 80168ce:	683b      	ldr	r3, [r7, #0]
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	da00      	bge.n	80168d6 <writeInt+0x12>
 80168d4:	33ff      	adds	r3, #255	; 0xff
 80168d6:	121b      	asrs	r3, r3, #8
 80168d8:	461a      	mov	r2, r3
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	681b      	ldr	r3, [r3, #0]
 80168de:	b2d2      	uxtb	r2, r2
 80168e0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	1c5a      	adds	r2, r3, #1
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 80168ec:	683b      	ldr	r3, [r7, #0]
 80168ee:	425a      	negs	r2, r3
 80168f0:	b2db      	uxtb	r3, r3
 80168f2:	b2d2      	uxtb	r2, r2
 80168f4:	bf58      	it	pl
 80168f6:	4253      	negpl	r3, r2
 80168f8:	687a      	ldr	r2, [r7, #4]
 80168fa:	6812      	ldr	r2, [r2, #0]
 80168fc:	b2db      	uxtb	r3, r3
 80168fe:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	1c5a      	adds	r2, r3, #1
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	601a      	str	r2, [r3, #0]
}
 801690a:	bf00      	nop
 801690c:	370c      	adds	r7, #12
 801690e:	46bd      	mov	sp, r7
 8016910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016914:	4770      	bx	lr

08016916 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8016916:	b580      	push	{r7, lr}
 8016918:	b084      	sub	sp, #16
 801691a:	af00      	add	r7, sp, #0
 801691c:	6078      	str	r0, [r7, #4]
 801691e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8016920:	6838      	ldr	r0, [r7, #0]
 8016922:	f7e9 fc6f 	bl	8000204 <strlen>
 8016926:	4603      	mov	r3, r0
 8016928:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 801692a:	68f9      	ldr	r1, [r7, #12]
 801692c:	6878      	ldr	r0, [r7, #4]
 801692e:	f7ff ffc9 	bl	80168c4 <writeInt>
	memcpy(*pptr, string, len);
 8016932:	687b      	ldr	r3, [r7, #4]
 8016934:	681b      	ldr	r3, [r3, #0]
 8016936:	68fa      	ldr	r2, [r7, #12]
 8016938:	6839      	ldr	r1, [r7, #0]
 801693a:	4618      	mov	r0, r3
 801693c:	f001 fb17 	bl	8017f6e <memcpy>
	*pptr += len;
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	441a      	add	r2, r3
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	601a      	str	r2, [r3, #0]
}
 801694c:	bf00      	nop
 801694e:	3710      	adds	r7, #16
 8016950:	46bd      	mov	sp, r7
 8016952:	bd80      	pop	{r7, pc}

08016954 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b084      	sub	sp, #16
 8016958:	af00      	add	r7, sp, #0
 801695a:	60f8      	str	r0, [r7, #12]
 801695c:	4638      	mov	r0, r7
 801695e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	2b00      	cmp	r3, #0
 8016966:	dd12      	ble.n	801698e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	4619      	mov	r1, r3
 801696c:	68f8      	ldr	r0, [r7, #12]
 801696e:	f7ff ffa9 	bl	80168c4 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 8016972:	68fb      	ldr	r3, [r7, #12]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	68b9      	ldr	r1, [r7, #8]
 8016978:	687a      	ldr	r2, [r7, #4]
 801697a:	4618      	mov	r0, r3
 801697c:	f001 faf7 	bl	8017f6e <memcpy>
		*pptr += mqttstring.lenstring.len;
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	687a      	ldr	r2, [r7, #4]
 8016986:	441a      	add	r2, r3
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 801698c:	e00c      	b.n	80169a8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 801698e:	683b      	ldr	r3, [r7, #0]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d005      	beq.n	80169a0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 8016994:	683b      	ldr	r3, [r7, #0]
 8016996:	4619      	mov	r1, r3
 8016998:	68f8      	ldr	r0, [r7, #12]
 801699a:	f7ff ffbc 	bl	8016916 <writeCString>
}
 801699e:	e003      	b.n	80169a8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80169a0:	2100      	movs	r1, #0
 80169a2:	68f8      	ldr	r0, [r7, #12]
 80169a4:	f7ff ff8e 	bl	80168c4 <writeInt>
}
 80169a8:	bf00      	nop
 80169aa:	3710      	adds	r7, #16
 80169ac:	46bd      	mov	sp, r7
 80169ae:	bd80      	pop	{r7, pc}

080169b0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80169b0:	b580      	push	{r7, lr}
 80169b2:	b086      	sub	sp, #24
 80169b4:	af00      	add	r7, sp, #0
 80169b6:	60f8      	str	r0, [r7, #12]
 80169b8:	60b9      	str	r1, [r7, #8]
 80169ba:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80169bc:	2300      	movs	r3, #0
 80169be:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	68ba      	ldr	r2, [r7, #8]
 80169c4:	6812      	ldr	r2, [r2, #0]
 80169c6:	1a9b      	subs	r3, r3, r2
 80169c8:	2b01      	cmp	r3, #1
 80169ca:	dd1a      	ble.n	8016a02 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80169cc:	68b8      	ldr	r0, [r7, #8]
 80169ce:	f7ff ff35 	bl	801683c <readInt>
 80169d2:	4602      	mov	r2, r0
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 80169d8:	68bb      	ldr	r3, [r7, #8]
 80169da:	681b      	ldr	r3, [r3, #0]
 80169dc:	68fa      	ldr	r2, [r7, #12]
 80169de:	6852      	ldr	r2, [r2, #4]
 80169e0:	4413      	add	r3, r2
 80169e2:	687a      	ldr	r2, [r7, #4]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d30c      	bcc.n	8016a02 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 80169e8:	68bb      	ldr	r3, [r7, #8]
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 80169f0:	68bb      	ldr	r3, [r7, #8]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	68fa      	ldr	r2, [r7, #12]
 80169f6:	6852      	ldr	r2, [r2, #4]
 80169f8:	441a      	add	r2, r3
 80169fa:	68bb      	ldr	r3, [r7, #8]
 80169fc:	601a      	str	r2, [r3, #0]
			rc = 1;
 80169fe:	2301      	movs	r3, #1
 8016a00:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8016a02:	68fb      	ldr	r3, [r7, #12]
 8016a04:	2200      	movs	r2, #0
 8016a06:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8016a08:	697b      	ldr	r3, [r7, #20]
}
 8016a0a:	4618      	mov	r0, r3
 8016a0c:	3718      	adds	r7, #24
 8016a0e:	46bd      	mov	sp, r7
 8016a10:	bd80      	pop	{r7, pc}

08016a12 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8016a12:	b580      	push	{r7, lr}
 8016a14:	b086      	sub	sp, #24
 8016a16:	af00      	add	r7, sp, #0
 8016a18:	1d3b      	adds	r3, r7, #4
 8016a1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 8016a1e:	2300      	movs	r3, #0
 8016a20:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d006      	beq.n	8016a36 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	4618      	mov	r0, r3
 8016a2c:	f7e9 fbea 	bl	8000204 <strlen>
 8016a30:	4603      	mov	r3, r0
 8016a32:	617b      	str	r3, [r7, #20]
 8016a34:	e001      	b.n	8016a3a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8016a36:	68bb      	ldr	r3, [r7, #8]
 8016a38:	617b      	str	r3, [r7, #20]
	return rc;
 8016a3a:	697b      	ldr	r3, [r7, #20]
}
 8016a3c:	4618      	mov	r0, r3
 8016a3e:	3718      	adds	r7, #24
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
 8016a4c:	6039      	str	r1, [r7, #0]
	int alen = 0,
 8016a4e:	2300      	movs	r3, #0
 8016a50:	617b      	str	r3, [r7, #20]
		blen = 0;
 8016a52:	2300      	movs	r3, #0
 8016a54:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 8016a56:	687b      	ldr	r3, [r7, #4]
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d00a      	beq.n	8016a74 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	681b      	ldr	r3, [r3, #0]
 8016a62:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	4618      	mov	r0, r3
 8016a6a:	f7e9 fbcb 	bl	8000204 <strlen>
 8016a6e:	4603      	mov	r3, r0
 8016a70:	617b      	str	r3, [r7, #20]
 8016a72:	e005      	b.n	8016a80 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 8016a74:	687b      	ldr	r3, [r7, #4]
 8016a76:	689b      	ldr	r3, [r3, #8]
 8016a78:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	685b      	ldr	r3, [r3, #4]
 8016a7e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 8016a80:	6838      	ldr	r0, [r7, #0]
 8016a82:	f7e9 fbbf 	bl	8000204 <strlen>
 8016a86:	4603      	mov	r3, r0
 8016a88:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 8016a8a:	697a      	ldr	r2, [r7, #20]
 8016a8c:	68fb      	ldr	r3, [r7, #12]
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d10a      	bne.n	8016aa8 <MQTTPacket_equals+0x64>
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	461a      	mov	r2, r3
 8016a96:	6839      	ldr	r1, [r7, #0]
 8016a98:	6938      	ldr	r0, [r7, #16]
 8016a9a:	f001 fb2b 	bl	80180f4 <strncmp>
 8016a9e:	4603      	mov	r3, r0
 8016aa0:	2b00      	cmp	r3, #0
 8016aa2:	d101      	bne.n	8016aa8 <MQTTPacket_equals+0x64>
 8016aa4:	2301      	movs	r3, #1
 8016aa6:	e000      	b.n	8016aaa <MQTTPacket_equals+0x66>
 8016aa8:	2300      	movs	r3, #0
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3718      	adds	r7, #24
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}

08016ab2 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 8016ab2:	b580      	push	{r7, lr}
 8016ab4:	b088      	sub	sp, #32
 8016ab6:	af00      	add	r7, sp, #0
 8016ab8:	60f8      	str	r0, [r7, #12]
 8016aba:	60b9      	str	r1, [r7, #8]
 8016abc:	4611      	mov	r1, r2
 8016abe:	461a      	mov	r2, r3
 8016ac0:	460b      	mov	r3, r1
 8016ac2:	71fb      	strb	r3, [r7, #7]
 8016ac4:	4613      	mov	r3, r2
 8016ac6:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 8016ac8:	2300      	movs	r3, #0
 8016aca:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 8016acc:	2300      	movs	r3, #0
 8016ace:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 8016ad0:	68fb      	ldr	r3, [r7, #12]
 8016ad2:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 8016ad4:	68bb      	ldr	r3, [r7, #8]
 8016ad6:	2b03      	cmp	r3, #3
 8016ad8:	dc03      	bgt.n	8016ae2 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016ada:	f06f 0301 	mvn.w	r3, #1
 8016ade:	61fb      	str	r3, [r7, #28]
		goto exit;
 8016ae0:	e038      	b.n	8016b54 <MQTTSerialize_ack+0xa2>
	}
	header.bits.type = packettype;
 8016ae2:	79fb      	ldrb	r3, [r7, #7]
 8016ae4:	f003 030f 	and.w	r3, r3, #15
 8016ae8:	b2da      	uxtb	r2, r3
 8016aea:	7e3b      	ldrb	r3, [r7, #24]
 8016aec:	f362 1307 	bfi	r3, r2, #4, #4
 8016af0:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 8016af2:	79bb      	ldrb	r3, [r7, #6]
 8016af4:	f003 0301 	and.w	r3, r3, #1
 8016af8:	b2da      	uxtb	r2, r3
 8016afa:	7e3b      	ldrb	r3, [r7, #24]
 8016afc:	f362 03c3 	bfi	r3, r2, #3, #1
 8016b00:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 8016b02:	79fb      	ldrb	r3, [r7, #7]
 8016b04:	2b06      	cmp	r3, #6
 8016b06:	bf0c      	ite	eq
 8016b08:	2301      	moveq	r3, #1
 8016b0a:	2300      	movne	r3, #0
 8016b0c:	b2db      	uxtb	r3, r3
 8016b0e:	f003 0303 	and.w	r3, r3, #3
 8016b12:	b2da      	uxtb	r2, r3
 8016b14:	7e3b      	ldrb	r3, [r7, #24]
 8016b16:	f362 0342 	bfi	r3, r2, #1, #2
 8016b1a:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 8016b1c:	7e3a      	ldrb	r2, [r7, #24]
 8016b1e:	f107 0314 	add.w	r3, r7, #20
 8016b22:	4611      	mov	r1, r2
 8016b24:	4618      	mov	r0, r3
 8016b26:	f7ff feb8 	bl	801689a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 8016b2a:	697b      	ldr	r3, [r7, #20]
 8016b2c:	2102      	movs	r1, #2
 8016b2e:	4618      	mov	r0, r3
 8016b30:	f7ff fdb8 	bl	80166a4 <MQTTPacket_encode>
 8016b34:	4602      	mov	r2, r0
 8016b36:	697b      	ldr	r3, [r7, #20]
 8016b38:	4413      	add	r3, r2
 8016b3a:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 8016b3c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8016b3e:	f107 0314 	add.w	r3, r7, #20
 8016b42:	4611      	mov	r1, r2
 8016b44:	4618      	mov	r0, r3
 8016b46:	f7ff febd 	bl	80168c4 <writeInt>
	rc = ptr - buf;
 8016b4a:	697b      	ldr	r3, [r7, #20]
 8016b4c:	461a      	mov	r2, r3
 8016b4e:	68fb      	ldr	r3, [r7, #12]
 8016b50:	1ad3      	subs	r3, r2, r3
 8016b52:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016b54:	69fb      	ldr	r3, [r7, #28]
}
 8016b56:	4618      	mov	r0, r3
 8016b58:	3720      	adds	r7, #32
 8016b5a:	46bd      	mov	sp, r7
 8016b5c:	bd80      	pop	{r7, pc}

08016b5e <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 8016b5e:	b580      	push	{r7, lr}
 8016b60:	b084      	sub	sp, #16
 8016b62:	af00      	add	r7, sp, #0
 8016b64:	6078      	str	r0, [r7, #4]
 8016b66:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 8016b68:	2302      	movs	r3, #2
 8016b6a:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 8016b6c:	2300      	movs	r3, #0
 8016b6e:	60fb      	str	r3, [r7, #12]
 8016b70:	e013      	b.n	8016b9a <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 8016b72:	68fa      	ldr	r2, [r7, #12]
 8016b74:	4613      	mov	r3, r2
 8016b76:	005b      	lsls	r3, r3, #1
 8016b78:	4413      	add	r3, r2
 8016b7a:	009b      	lsls	r3, r3, #2
 8016b7c:	461a      	mov	r2, r3
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	4413      	add	r3, r2
 8016b82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016b86:	f7ff ff44 	bl	8016a12 <MQTTstrlen>
 8016b8a:	4603      	mov	r3, r0
 8016b8c:	3303      	adds	r3, #3
 8016b8e:	68ba      	ldr	r2, [r7, #8]
 8016b90:	4413      	add	r3, r2
 8016b92:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	3301      	adds	r3, #1
 8016b98:	60fb      	str	r3, [r7, #12]
 8016b9a:	68fa      	ldr	r2, [r7, #12]
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	429a      	cmp	r2, r3
 8016ba0:	dbe7      	blt.n	8016b72 <MQTTSerialize_subscribeLength+0x14>
	return len;
 8016ba2:	68bb      	ldr	r3, [r7, #8]
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b08a      	sub	sp, #40	; 0x28
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	4611      	mov	r1, r2
 8016bb8:	461a      	mov	r2, r3
 8016bba:	460b      	mov	r3, r1
 8016bbc:	71fb      	strb	r3, [r7, #7]
 8016bbe:	4613      	mov	r3, r2
 8016bc0:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8016bc2:	68fb      	ldr	r3, [r7, #12]
 8016bc4:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8016bc6:	2300      	movs	r3, #0
 8016bc8:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8016bca:	2300      	movs	r3, #0
 8016bcc:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8016bce:	2300      	movs	r3, #0
 8016bd0:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8016bd2:	2300      	movs	r3, #0
 8016bd4:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8016bd6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016bd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016bda:	f7ff ffc0 	bl	8016b5e <MQTTSerialize_subscribeLength>
 8016bde:	61f8      	str	r0, [r7, #28]
 8016be0:	69f8      	ldr	r0, [r7, #28]
 8016be2:	f7ff fdcb 	bl	801677c <MQTTPacket_len>
 8016be6:	4602      	mov	r2, r0
 8016be8:	68bb      	ldr	r3, [r7, #8]
 8016bea:	4293      	cmp	r3, r2
 8016bec:	da03      	bge.n	8016bf6 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8016bee:	f06f 0301 	mvn.w	r3, #1
 8016bf2:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8016bf4:	e052      	b.n	8016c9c <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8016bfa:	7d3b      	ldrb	r3, [r7, #20]
 8016bfc:	2208      	movs	r2, #8
 8016bfe:	f362 1307 	bfi	r3, r2, #4, #4
 8016c02:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8016c04:	79fb      	ldrb	r3, [r7, #7]
 8016c06:	f003 0301 	and.w	r3, r3, #1
 8016c0a:	b2da      	uxtb	r2, r3
 8016c0c:	7d3b      	ldrb	r3, [r7, #20]
 8016c0e:	f362 03c3 	bfi	r3, r2, #3, #1
 8016c12:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8016c14:	7d3b      	ldrb	r3, [r7, #20]
 8016c16:	2201      	movs	r2, #1
 8016c18:	f362 0342 	bfi	r3, r2, #1, #2
 8016c1c:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8016c1e:	7d3a      	ldrb	r2, [r7, #20]
 8016c20:	f107 0318 	add.w	r3, r7, #24
 8016c24:	4611      	mov	r1, r2
 8016c26:	4618      	mov	r0, r3
 8016c28:	f7ff fe37 	bl	801689a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8016c2c:	69bb      	ldr	r3, [r7, #24]
 8016c2e:	69f9      	ldr	r1, [r7, #28]
 8016c30:	4618      	mov	r0, r3
 8016c32:	f7ff fd37 	bl	80166a4 <MQTTPacket_encode>
 8016c36:	4602      	mov	r2, r0
 8016c38:	69bb      	ldr	r3, [r7, #24]
 8016c3a:	4413      	add	r3, r2
 8016c3c:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8016c3e:	88ba      	ldrh	r2, [r7, #4]
 8016c40:	f107 0318 	add.w	r3, r7, #24
 8016c44:	4611      	mov	r1, r2
 8016c46:	4618      	mov	r0, r3
 8016c48:	f7ff fe3c 	bl	80168c4 <writeInt>

	for (i = 0; i < count; ++i)
 8016c4c:	2300      	movs	r3, #0
 8016c4e:	623b      	str	r3, [r7, #32]
 8016c50:	e01b      	b.n	8016c8a <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8016c52:	6a3a      	ldr	r2, [r7, #32]
 8016c54:	4613      	mov	r3, r2
 8016c56:	005b      	lsls	r3, r3, #1
 8016c58:	4413      	add	r3, r2
 8016c5a:	009b      	lsls	r3, r3, #2
 8016c5c:	461a      	mov	r2, r3
 8016c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016c60:	4413      	add	r3, r2
 8016c62:	f107 0018 	add.w	r0, r7, #24
 8016c66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016c68:	f7ff fe74 	bl	8016954 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8016c6c:	6a3b      	ldr	r3, [r7, #32]
 8016c6e:	009b      	lsls	r3, r3, #2
 8016c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8016c72:	4413      	add	r3, r2
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	b2da      	uxtb	r2, r3
 8016c78:	f107 0318 	add.w	r3, r7, #24
 8016c7c:	4611      	mov	r1, r2
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f7ff fe0b 	bl	801689a <writeChar>
	for (i = 0; i < count; ++i)
 8016c84:	6a3b      	ldr	r3, [r7, #32]
 8016c86:	3301      	adds	r3, #1
 8016c88:	623b      	str	r3, [r7, #32]
 8016c8a:	6a3a      	ldr	r2, [r7, #32]
 8016c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016c8e:	429a      	cmp	r2, r3
 8016c90:	dbdf      	blt.n	8016c52 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8016c92:	69bb      	ldr	r3, [r7, #24]
 8016c94:	461a      	mov	r2, r3
 8016c96:	68fb      	ldr	r3, [r7, #12]
 8016c98:	1ad3      	subs	r3, r2, r3
 8016c9a:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016c9e:	4618      	mov	r0, r3
 8016ca0:	3728      	adds	r7, #40	; 0x28
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	bd80      	pop	{r7, pc}

08016ca6 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 8016ca6:	b580      	push	{r7, lr}
 8016ca8:	b08a      	sub	sp, #40	; 0x28
 8016caa:	af00      	add	r7, sp, #0
 8016cac:	60f8      	str	r0, [r7, #12]
 8016cae:	60b9      	str	r1, [r7, #8]
 8016cb0:	607a      	str	r2, [r7, #4]
 8016cb2:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 8016cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016cba:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 8016cc4:	f107 0318 	add.w	r3, r7, #24
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7ff fdd2 	bl	8016872 <readChar>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 8016cd2:	7f3b      	ldrb	r3, [r7, #28]
 8016cd4:	f023 030f 	bic.w	r3, r3, #15
 8016cd8:	b2db      	uxtb	r3, r3
 8016cda:	2b90      	cmp	r3, #144	; 0x90
 8016cdc:	d142      	bne.n	8016d64 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 8016cde:	69bb      	ldr	r3, [r7, #24]
 8016ce0:	f107 0214 	add.w	r2, r7, #20
 8016ce4:	4611      	mov	r1, r2
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	f7ff fd92 	bl	8016810 <MQTTPacket_decodeBuf>
 8016cec:	6278      	str	r0, [r7, #36]	; 0x24
 8016cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016cf0:	69bb      	ldr	r3, [r7, #24]
 8016cf2:	4413      	add	r3, r2
 8016cf4:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 8016cf6:	69bb      	ldr	r3, [r7, #24]
 8016cf8:	697a      	ldr	r2, [r7, #20]
 8016cfa:	4413      	add	r3, r2
 8016cfc:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 8016cfe:	6a3b      	ldr	r3, [r7, #32]
 8016d00:	69ba      	ldr	r2, [r7, #24]
 8016d02:	1a9b      	subs	r3, r3, r2
 8016d04:	2b01      	cmp	r3, #1
 8016d06:	dd2f      	ble.n	8016d68 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 8016d08:	f107 0318 	add.w	r3, r7, #24
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	f7ff fd95 	bl	801683c <readInt>
 8016d12:	4603      	mov	r3, r0
 8016d14:	b29a      	uxth	r2, r3
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	801a      	strh	r2, [r3, #0]

	*count = 0;
 8016d1a:	687b      	ldr	r3, [r7, #4]
 8016d1c:	2200      	movs	r2, #0
 8016d1e:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8016d20:	e019      	b.n	8016d56 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	68ba      	ldr	r2, [r7, #8]
 8016d28:	429a      	cmp	r2, r3
 8016d2a:	da03      	bge.n	8016d34 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 8016d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d30:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 8016d32:	e01a      	b.n	8016d6a <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 8016d34:	f107 0318 	add.w	r3, r7, #24
 8016d38:	4618      	mov	r0, r3
 8016d3a:	f7ff fd9a 	bl	8016872 <readChar>
 8016d3e:	4603      	mov	r3, r0
 8016d40:	4618      	mov	r0, r3
 8016d42:	687b      	ldr	r3, [r7, #4]
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	1c59      	adds	r1, r3, #1
 8016d48:	687a      	ldr	r2, [r7, #4]
 8016d4a:	6011      	str	r1, [r2, #0]
 8016d4c:	009b      	lsls	r3, r3, #2
 8016d4e:	683a      	ldr	r2, [r7, #0]
 8016d50:	4413      	add	r3, r2
 8016d52:	4602      	mov	r2, r0
 8016d54:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 8016d56:	69bb      	ldr	r3, [r7, #24]
 8016d58:	6a3a      	ldr	r2, [r7, #32]
 8016d5a:	429a      	cmp	r2, r3
 8016d5c:	d8e1      	bhi.n	8016d22 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 8016d5e:	2301      	movs	r3, #1
 8016d60:	627b      	str	r3, [r7, #36]	; 0x24
 8016d62:	e002      	b.n	8016d6a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8016d64:	bf00      	nop
 8016d66:	e000      	b.n	8016d6a <MQTTDeserialize_suback+0xc4>
		goto exit;
 8016d68:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8016d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3728      	adds	r7, #40	; 0x28
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}

08016d74 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8016d74:	b580      	push	{r7, lr}
 8016d76:	b08e      	sub	sp, #56	; 0x38
 8016d78:	af00      	add	r7, sp, #0
 8016d7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016d80:	2200      	movs	r2, #0
 8016d82:	601a      	str	r2, [r3, #0]
 8016d84:	605a      	str	r2, [r3, #4]
 8016d86:	609a      	str	r2, [r3, #8]
 8016d88:	60da      	str	r2, [r3, #12]
 8016d8a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	681b      	ldr	r3, [r3, #0]
 8016d90:	4a59      	ldr	r2, [pc, #356]	; (8016ef8 <HAL_ETH_MspInit+0x184>)
 8016d92:	4293      	cmp	r3, r2
 8016d94:	f040 80ac 	bne.w	8016ef0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8016d98:	2300      	movs	r3, #0
 8016d9a:	623b      	str	r3, [r7, #32]
 8016d9c:	4b57      	ldr	r3, [pc, #348]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016da0:	4a56      	ldr	r2, [pc, #344]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016da2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8016da6:	6313      	str	r3, [r2, #48]	; 0x30
 8016da8:	4b54      	ldr	r3, [pc, #336]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8016db0:	623b      	str	r3, [r7, #32]
 8016db2:	6a3b      	ldr	r3, [r7, #32]
 8016db4:	2300      	movs	r3, #0
 8016db6:	61fb      	str	r3, [r7, #28]
 8016db8:	4b50      	ldr	r3, [pc, #320]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dbc:	4a4f      	ldr	r2, [pc, #316]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8016dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8016dc4:	4b4d      	ldr	r3, [pc, #308]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8016dcc:	61fb      	str	r3, [r7, #28]
 8016dce:	69fb      	ldr	r3, [r7, #28]
 8016dd0:	2300      	movs	r3, #0
 8016dd2:	61bb      	str	r3, [r7, #24]
 8016dd4:	4b49      	ldr	r3, [pc, #292]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016dd8:	4a48      	ldr	r2, [pc, #288]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8016dde:	6313      	str	r3, [r2, #48]	; 0x30
 8016de0:	4b46      	ldr	r3, [pc, #280]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016de4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8016de8:	61bb      	str	r3, [r7, #24]
 8016dea:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8016dec:	2300      	movs	r3, #0
 8016dee:	617b      	str	r3, [r7, #20]
 8016df0:	4b42      	ldr	r3, [pc, #264]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016df4:	4a41      	ldr	r2, [pc, #260]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016df6:	f043 0304 	orr.w	r3, r3, #4
 8016dfa:	6313      	str	r3, [r2, #48]	; 0x30
 8016dfc:	4b3f      	ldr	r3, [pc, #252]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e00:	f003 0304 	and.w	r3, r3, #4
 8016e04:	617b      	str	r3, [r7, #20]
 8016e06:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8016e08:	2300      	movs	r3, #0
 8016e0a:	613b      	str	r3, [r7, #16]
 8016e0c:	4b3b      	ldr	r3, [pc, #236]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e10:	4a3a      	ldr	r2, [pc, #232]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e12:	f043 0301 	orr.w	r3, r3, #1
 8016e16:	6313      	str	r3, [r2, #48]	; 0x30
 8016e18:	4b38      	ldr	r3, [pc, #224]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e1c:	f003 0301 	and.w	r3, r3, #1
 8016e20:	613b      	str	r3, [r7, #16]
 8016e22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016e24:	2300      	movs	r3, #0
 8016e26:	60fb      	str	r3, [r7, #12]
 8016e28:	4b34      	ldr	r3, [pc, #208]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e2c:	4a33      	ldr	r2, [pc, #204]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e2e:	f043 0302 	orr.w	r3, r3, #2
 8016e32:	6313      	str	r3, [r2, #48]	; 0x30
 8016e34:	4b31      	ldr	r3, [pc, #196]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e38:	f003 0302 	and.w	r3, r3, #2
 8016e3c:	60fb      	str	r3, [r7, #12]
 8016e3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8016e40:	2300      	movs	r3, #0
 8016e42:	60bb      	str	r3, [r7, #8]
 8016e44:	4b2d      	ldr	r3, [pc, #180]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e48:	4a2c      	ldr	r2, [pc, #176]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016e4e:	6313      	str	r3, [r2, #48]	; 0x30
 8016e50:	4b2a      	ldr	r3, [pc, #168]	; (8016efc <HAL_ETH_MspInit+0x188>)
 8016e52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016e58:	60bb      	str	r3, [r7, #8]
 8016e5a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8016e5c:	2332      	movs	r3, #50	; 0x32
 8016e5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e60:	2302      	movs	r3, #2
 8016e62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e64:	2300      	movs	r3, #0
 8016e66:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016e68:	2303      	movs	r3, #3
 8016e6a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8016e6c:	230b      	movs	r3, #11
 8016e6e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8016e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e74:	4619      	mov	r1, r3
 8016e76:	4822      	ldr	r0, [pc, #136]	; (8016f00 <HAL_ETH_MspInit+0x18c>)
 8016e78:	f7ea fe8e 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8016e7c:	2386      	movs	r3, #134	; 0x86
 8016e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016e80:	2302      	movs	r3, #2
 8016e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016e84:	2300      	movs	r3, #0
 8016e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016e88:	2303      	movs	r3, #3
 8016e8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8016e8c:	230b      	movs	r3, #11
 8016e8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8016e90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016e94:	4619      	mov	r1, r3
 8016e96:	481b      	ldr	r0, [pc, #108]	; (8016f04 <HAL_ETH_MspInit+0x190>)
 8016e98:	f7ea fe7e 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8016e9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016ea0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016ea2:	2302      	movs	r3, #2
 8016ea4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ea6:	2300      	movs	r3, #0
 8016ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016eaa:	2303      	movs	r3, #3
 8016eac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8016eae:	230b      	movs	r3, #11
 8016eb0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8016eb2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016eb6:	4619      	mov	r1, r3
 8016eb8:	4813      	ldr	r0, [pc, #76]	; (8016f08 <HAL_ETH_MspInit+0x194>)
 8016eba:	f7ea fe6d 	bl	8001b98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8016ebe:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8016ec2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8016ec4:	2302      	movs	r3, #2
 8016ec6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016ec8:	2300      	movs	r3, #0
 8016eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8016ecc:	2303      	movs	r3, #3
 8016ece:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8016ed0:	230b      	movs	r3, #11
 8016ed2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8016ed4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016ed8:	4619      	mov	r1, r3
 8016eda:	480c      	ldr	r0, [pc, #48]	; (8016f0c <HAL_ETH_MspInit+0x198>)
 8016edc:	f7ea fe5c 	bl	8001b98 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8016ee0:	2200      	movs	r2, #0
 8016ee2:	2105      	movs	r1, #5
 8016ee4:	203d      	movs	r0, #61	; 0x3d
 8016ee6:	f7e9 fc87 	bl	80007f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8016eea:	203d      	movs	r0, #61	; 0x3d
 8016eec:	f7e9 fca0 	bl	8000830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8016ef0:	bf00      	nop
 8016ef2:	3738      	adds	r7, #56	; 0x38
 8016ef4:	46bd      	mov	sp, r7
 8016ef6:	bd80      	pop	{r7, pc}
 8016ef8:	40028000 	.word	0x40028000
 8016efc:	40023800 	.word	0x40023800
 8016f00:	40020800 	.word	0x40020800
 8016f04:	40020000 	.word	0x40020000
 8016f08:	40020400 	.word	0x40020400
 8016f0c:	40021800 	.word	0x40021800

08016f10 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
 8016f16:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8016f18:	4b04      	ldr	r3, [pc, #16]	; (8016f2c <HAL_ETH_RxCpltCallback+0x1c>)
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7ec f897 	bl	8003050 <osSemaphoreRelease>
}
 8016f22:	bf00      	nop
 8016f24:	3708      	adds	r7, #8
 8016f26:	46bd      	mov	sp, r7
 8016f28:	bd80      	pop	{r7, pc}
 8016f2a:	bf00      	nop
 8016f2c:	200084f8 	.word	0x200084f8

08016f30 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8016f30:	b5b0      	push	{r4, r5, r7, lr}
 8016f32:	b090      	sub	sp, #64	; 0x40
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8016f38:	2300      	movs	r3, #0
 8016f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8016f3c:	4b5c      	ldr	r3, [pc, #368]	; (80170b0 <low_level_init+0x180>)
 8016f3e:	4a5d      	ldr	r2, [pc, #372]	; (80170b4 <low_level_init+0x184>)
 8016f40:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8016f42:	4b5b      	ldr	r3, [pc, #364]	; (80170b0 <low_level_init+0x180>)
 8016f44:	2201      	movs	r2, #1
 8016f46:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8016f48:	4b59      	ldr	r3, [pc, #356]	; (80170b0 <low_level_init+0x180>)
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8016f4e:	2300      	movs	r3, #0
 8016f50:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8016f54:	2380      	movs	r3, #128	; 0x80
 8016f56:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8016f5a:	23e1      	movs	r3, #225	; 0xe1
 8016f5c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8016f60:	2300      	movs	r3, #0
 8016f62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8016f66:	2300      	movs	r3, #0
 8016f68:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8016f72:	4a4f      	ldr	r2, [pc, #316]	; (80170b0 <low_level_init+0x180>)
 8016f74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8016f78:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8016f7a:	4b4d      	ldr	r3, [pc, #308]	; (80170b0 <low_level_init+0x180>)
 8016f7c:	2201      	movs	r2, #1
 8016f7e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8016f80:	4b4b      	ldr	r3, [pc, #300]	; (80170b0 <low_level_init+0x180>)
 8016f82:	2200      	movs	r2, #0
 8016f84:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8016f86:	4b4a      	ldr	r3, [pc, #296]	; (80170b0 <low_level_init+0x180>)
 8016f88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8016f8c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8016f8e:	4848      	ldr	r0, [pc, #288]	; (80170b0 <low_level_init+0x180>)
 8016f90:	f7e9 fc5c 	bl	800084c <HAL_ETH_Init>
 8016f94:	4603      	mov	r3, r0
 8016f96:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8016f9a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d108      	bne.n	8016fb4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8016fa2:	687b      	ldr	r3, [r7, #4]
 8016fa4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8016fa8:	f043 0304 	orr.w	r3, r3, #4
 8016fac:	b2da      	uxtb	r2, r3
 8016fae:	687b      	ldr	r3, [r7, #4]
 8016fb0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8016fb4:	2304      	movs	r3, #4
 8016fb6:	4a40      	ldr	r2, [pc, #256]	; (80170b8 <low_level_init+0x188>)
 8016fb8:	4940      	ldr	r1, [pc, #256]	; (80170bc <low_level_init+0x18c>)
 8016fba:	483d      	ldr	r0, [pc, #244]	; (80170b0 <low_level_init+0x180>)
 8016fbc:	f7e9 fde4 	bl	8000b88 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8016fc0:	2304      	movs	r3, #4
 8016fc2:	4a3f      	ldr	r2, [pc, #252]	; (80170c0 <low_level_init+0x190>)
 8016fc4:	493f      	ldr	r1, [pc, #252]	; (80170c4 <low_level_init+0x194>)
 8016fc6:	483a      	ldr	r0, [pc, #232]	; (80170b0 <low_level_init+0x180>)
 8016fc8:	f7e9 fe47 	bl	8000c5a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2206      	movs	r2, #6
 8016fd0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8016fd4:	4b36      	ldr	r3, [pc, #216]	; (80170b0 <low_level_init+0x180>)
 8016fd6:	695b      	ldr	r3, [r3, #20]
 8016fd8:	781a      	ldrb	r2, [r3, #0]
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8016fe0:	4b33      	ldr	r3, [pc, #204]	; (80170b0 <low_level_init+0x180>)
 8016fe2:	695b      	ldr	r3, [r3, #20]
 8016fe4:	785a      	ldrb	r2, [r3, #1]
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8016fec:	4b30      	ldr	r3, [pc, #192]	; (80170b0 <low_level_init+0x180>)
 8016fee:	695b      	ldr	r3, [r3, #20]
 8016ff0:	789a      	ldrb	r2, [r3, #2]
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8016ff8:	4b2d      	ldr	r3, [pc, #180]	; (80170b0 <low_level_init+0x180>)
 8016ffa:	695b      	ldr	r3, [r3, #20]
 8016ffc:	78da      	ldrb	r2, [r3, #3]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8017004:	4b2a      	ldr	r3, [pc, #168]	; (80170b0 <low_level_init+0x180>)
 8017006:	695b      	ldr	r3, [r3, #20]
 8017008:	791a      	ldrb	r2, [r3, #4]
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8017010:	4b27      	ldr	r3, [pc, #156]	; (80170b0 <low_level_init+0x180>)
 8017012:	695b      	ldr	r3, [r3, #20]
 8017014:	795a      	ldrb	r2, [r3, #5]
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8017022:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801702a:	f043 030a 	orr.w	r3, r3, #10
 801702e:	b2da      	uxtb	r2, r3
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8017036:	2300      	movs	r3, #0
 8017038:	62bb      	str	r3, [r7, #40]	; 0x28
 801703a:	2300      	movs	r3, #0
 801703c:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 801703e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017042:	2101      	movs	r1, #1
 8017044:	4618      	mov	r0, r3
 8017046:	f7eb ff81 	bl	8002f4c <osSemaphoreCreate>
 801704a:	4602      	mov	r2, r0
 801704c:	4b1e      	ldr	r3, [pc, #120]	; (80170c8 <low_level_init+0x198>)
 801704e:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8017050:	4b1e      	ldr	r3, [pc, #120]	; (80170cc <low_level_init+0x19c>)
 8017052:	f107 040c 	add.w	r4, r7, #12
 8017056:	461d      	mov	r5, r3
 8017058:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801705a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801705c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017060:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8017064:	f107 030c 	add.w	r3, r7, #12
 8017068:	6879      	ldr	r1, [r7, #4]
 801706a:	4618      	mov	r0, r3
 801706c:	f7eb fe71 	bl	8002d52 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8017070:	480f      	ldr	r0, [pc, #60]	; (80170b0 <low_level_init+0x180>)
 8017072:	f7ea f91a 	bl	80012aa <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8017076:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801707a:	461a      	mov	r2, r3
 801707c:	211d      	movs	r1, #29
 801707e:	480c      	ldr	r0, [pc, #48]	; (80170b0 <low_level_init+0x180>)
 8017080:	f7ea f845 	bl	800110e <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8017084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017086:	f043 030b 	orr.w	r3, r3, #11
 801708a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 801708c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801708e:	461a      	mov	r2, r3
 8017090:	211d      	movs	r1, #29
 8017092:	4807      	ldr	r0, [pc, #28]	; (80170b0 <low_level_init+0x180>)
 8017094:	f7ea f8a3 	bl	80011de <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8017098:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801709c:	461a      	mov	r2, r3
 801709e:	211d      	movs	r1, #29
 80170a0:	4803      	ldr	r0, [pc, #12]	; (80170b0 <low_level_init+0x180>)
 80170a2:	f7ea f834 	bl	800110e <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80170a6:	bf00      	nop
 80170a8:	3740      	adds	r7, #64	; 0x40
 80170aa:	46bd      	mov	sp, r7
 80170ac:	bdb0      	pop	{r4, r5, r7, pc}
 80170ae:	bf00      	nop
 80170b0:	2000ddfc 	.word	0x2000ddfc
 80170b4:	40028000 	.word	0x40028000
 80170b8:	2000de44 	.word	0x2000de44
 80170bc:	2000c52c 	.word	0x2000c52c
 80170c0:	2000c5ac 	.word	0x2000c5ac
 80170c4:	2000dd7c 	.word	0x2000dd7c
 80170c8:	200084f8 	.word	0x200084f8
 80170cc:	0801c84c 	.word	0x0801c84c

080170d0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80170d0:	b580      	push	{r7, lr}
 80170d2:	b08a      	sub	sp, #40	; 0x28
 80170d4:	af00      	add	r7, sp, #0
 80170d6:	6078      	str	r0, [r7, #4]
 80170d8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80170da:	4b4b      	ldr	r3, [pc, #300]	; (8017208 <low_level_output+0x138>)
 80170dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170de:	689b      	ldr	r3, [r3, #8]
 80170e0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80170e2:	2300      	movs	r3, #0
 80170e4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80170e6:	2300      	movs	r3, #0
 80170e8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80170ea:	2300      	movs	r3, #0
 80170ec:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80170ee:	2300      	movs	r3, #0
 80170f0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80170f2:	4b45      	ldr	r3, [pc, #276]	; (8017208 <low_level_output+0x138>)
 80170f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80170f8:	2300      	movs	r3, #0
 80170fa:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	623b      	str	r3, [r7, #32]
 8017100:	e05a      	b.n	80171b8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8017102:	69bb      	ldr	r3, [r7, #24]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	2b00      	cmp	r3, #0
 8017108:	da03      	bge.n	8017112 <low_level_output+0x42>
      {
        errval = ERR_USE;
 801710a:	23f8      	movs	r3, #248	; 0xf8
 801710c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8017110:	e05c      	b.n	80171cc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8017112:	6a3b      	ldr	r3, [r7, #32]
 8017114:	895b      	ldrh	r3, [r3, #10]
 8017116:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8017118:	2300      	movs	r3, #0
 801711a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801711c:	e02f      	b.n	801717e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 801711e:	69fa      	ldr	r2, [r7, #28]
 8017120:	693b      	ldr	r3, [r7, #16]
 8017122:	18d0      	adds	r0, r2, r3
 8017124:	6a3b      	ldr	r3, [r7, #32]
 8017126:	685a      	ldr	r2, [r3, #4]
 8017128:	68bb      	ldr	r3, [r7, #8]
 801712a:	18d1      	adds	r1, r2, r3
 801712c:	693b      	ldr	r3, [r7, #16]
 801712e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8017132:	3304      	adds	r3, #4
 8017134:	461a      	mov	r2, r3
 8017136:	f000 ff1a 	bl	8017f6e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 801713a:	69bb      	ldr	r3, [r7, #24]
 801713c:	68db      	ldr	r3, [r3, #12]
 801713e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8017140:	69bb      	ldr	r3, [r7, #24]
 8017142:	681b      	ldr	r3, [r3, #0]
 8017144:	2b00      	cmp	r3, #0
 8017146:	da03      	bge.n	8017150 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8017148:	23f8      	movs	r3, #248	; 0xf8
 801714a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 801714e:	e03d      	b.n	80171cc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8017150:	69bb      	ldr	r3, [r7, #24]
 8017152:	689b      	ldr	r3, [r3, #8]
 8017154:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8017156:	693a      	ldr	r2, [r7, #16]
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	4413      	add	r3, r2
 801715c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8017160:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8017162:	68ba      	ldr	r2, [r7, #8]
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	1ad3      	subs	r3, r2, r3
 8017168:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 801716c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 801716e:	697a      	ldr	r2, [r7, #20]
 8017170:	693b      	ldr	r3, [r7, #16]
 8017172:	1ad3      	subs	r3, r2, r3
 8017174:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8017178:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 801717a:	2300      	movs	r3, #0
 801717c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 801717e:	68fa      	ldr	r2, [r7, #12]
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	4413      	add	r3, r2
 8017184:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8017188:	4293      	cmp	r3, r2
 801718a:	d8c8      	bhi.n	801711e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 801718c:	69fa      	ldr	r2, [r7, #28]
 801718e:	693b      	ldr	r3, [r7, #16]
 8017190:	18d0      	adds	r0, r2, r3
 8017192:	6a3b      	ldr	r3, [r7, #32]
 8017194:	685a      	ldr	r2, [r3, #4]
 8017196:	68bb      	ldr	r3, [r7, #8]
 8017198:	4413      	add	r3, r2
 801719a:	68fa      	ldr	r2, [r7, #12]
 801719c:	4619      	mov	r1, r3
 801719e:	f000 fee6 	bl	8017f6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80171a2:	693a      	ldr	r2, [r7, #16]
 80171a4:	68fb      	ldr	r3, [r7, #12]
 80171a6:	4413      	add	r3, r2
 80171a8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80171aa:	697a      	ldr	r2, [r7, #20]
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	4413      	add	r3, r2
 80171b0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80171b2:	6a3b      	ldr	r3, [r7, #32]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	623b      	str	r3, [r7, #32]
 80171b8:	6a3b      	ldr	r3, [r7, #32]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d1a1      	bne.n	8017102 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80171be:	6979      	ldr	r1, [r7, #20]
 80171c0:	4811      	ldr	r0, [pc, #68]	; (8017208 <low_level_output+0x138>)
 80171c2:	f7e9 fdb7 	bl	8000d34 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80171c6:	2300      	movs	r3, #0
 80171c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80171cc:	4b0e      	ldr	r3, [pc, #56]	; (8017208 <low_level_output+0x138>)
 80171ce:	681b      	ldr	r3, [r3, #0]
 80171d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171d4:	3314      	adds	r3, #20
 80171d6:	681b      	ldr	r3, [r3, #0]
 80171d8:	f003 0320 	and.w	r3, r3, #32
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d00d      	beq.n	80171fc <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80171e0:	4b09      	ldr	r3, [pc, #36]	; (8017208 <low_level_output+0x138>)
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171e8:	3314      	adds	r3, #20
 80171ea:	2220      	movs	r2, #32
 80171ec:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80171ee:	4b06      	ldr	r3, [pc, #24]	; (8017208 <low_level_output+0x138>)
 80171f0:	681b      	ldr	r3, [r3, #0]
 80171f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80171f6:	3304      	adds	r3, #4
 80171f8:	2200      	movs	r2, #0
 80171fa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80171fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017200:	4618      	mov	r0, r3
 8017202:	3728      	adds	r7, #40	; 0x28
 8017204:	46bd      	mov	sp, r7
 8017206:	bd80      	pop	{r7, pc}
 8017208:	2000ddfc 	.word	0x2000ddfc

0801720c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801720c:	b580      	push	{r7, lr}
 801720e:	b08c      	sub	sp, #48	; 0x30
 8017210:	af00      	add	r7, sp, #0
 8017212:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8017214:	2300      	movs	r3, #0
 8017216:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8017218:	2300      	movs	r3, #0
 801721a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 801721c:	2300      	movs	r3, #0
 801721e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8017220:	2300      	movs	r3, #0
 8017222:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8017224:	2300      	movs	r3, #0
 8017226:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8017228:	2300      	movs	r3, #0
 801722a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 801722c:	2300      	movs	r3, #0
 801722e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8017230:	484f      	ldr	r0, [pc, #316]	; (8017370 <low_level_input+0x164>)
 8017232:	f7e9 fe69 	bl	8000f08 <HAL_ETH_GetReceivedFrame_IT>
 8017236:	4603      	mov	r3, r0
 8017238:	2b00      	cmp	r3, #0
 801723a:	d001      	beq.n	8017240 <low_level_input+0x34>
  
    return NULL;
 801723c:	2300      	movs	r3, #0
 801723e:	e092      	b.n	8017366 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8017240:	4b4b      	ldr	r3, [pc, #300]	; (8017370 <low_level_input+0x164>)
 8017242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017244:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8017246:	4b4a      	ldr	r3, [pc, #296]	; (8017370 <low_level_input+0x164>)
 8017248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801724a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 801724c:	89fb      	ldrh	r3, [r7, #14]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d007      	beq.n	8017262 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8017252:	89fb      	ldrh	r3, [r7, #14]
 8017254:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8017258:	4619      	mov	r1, r3
 801725a:	2000      	movs	r0, #0
 801725c:	f7f1 ffde 	bl	800921c <pbuf_alloc>
 8017260:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8017262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017264:	2b00      	cmp	r3, #0
 8017266:	d04b      	beq.n	8017300 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8017268:	4b41      	ldr	r3, [pc, #260]	; (8017370 <low_level_input+0x164>)
 801726a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801726c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 801726e:	2300      	movs	r3, #0
 8017270:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8017272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017274:	62bb      	str	r3, [r7, #40]	; 0x28
 8017276:	e040      	b.n	80172fa <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8017278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727a:	895b      	ldrh	r3, [r3, #10]
 801727c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 801727e:	2300      	movs	r3, #0
 8017280:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8017282:	e021      	b.n	80172c8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8017284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017286:	685a      	ldr	r2, [r3, #4]
 8017288:	69bb      	ldr	r3, [r7, #24]
 801728a:	18d0      	adds	r0, r2, r3
 801728c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801728e:	69fb      	ldr	r3, [r7, #28]
 8017290:	18d1      	adds	r1, r2, r3
 8017292:	69fb      	ldr	r3, [r7, #28]
 8017294:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8017298:	3304      	adds	r3, #4
 801729a:	461a      	mov	r2, r3
 801729c:	f000 fe67 	bl	8017f6e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80172a0:	6a3b      	ldr	r3, [r7, #32]
 80172a2:	68db      	ldr	r3, [r3, #12]
 80172a4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80172a6:	6a3b      	ldr	r3, [r7, #32]
 80172a8:	689b      	ldr	r3, [r3, #8]
 80172aa:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80172ac:	69fa      	ldr	r2, [r7, #28]
 80172ae:	697b      	ldr	r3, [r7, #20]
 80172b0:	4413      	add	r3, r2
 80172b2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80172b6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80172b8:	69ba      	ldr	r2, [r7, #24]
 80172ba:	69fb      	ldr	r3, [r7, #28]
 80172bc:	1ad3      	subs	r3, r2, r3
 80172be:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80172c2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80172c4:	2300      	movs	r3, #0
 80172c6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80172c8:	697a      	ldr	r2, [r7, #20]
 80172ca:	69fb      	ldr	r3, [r7, #28]
 80172cc:	4413      	add	r3, r2
 80172ce:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80172d2:	4293      	cmp	r3, r2
 80172d4:	d8d6      	bhi.n	8017284 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80172d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d8:	685a      	ldr	r2, [r3, #4]
 80172da:	69bb      	ldr	r3, [r7, #24]
 80172dc:	18d0      	adds	r0, r2, r3
 80172de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80172e0:	69fb      	ldr	r3, [r7, #28]
 80172e2:	4413      	add	r3, r2
 80172e4:	697a      	ldr	r2, [r7, #20]
 80172e6:	4619      	mov	r1, r3
 80172e8:	f000 fe41 	bl	8017f6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80172ec:	69fa      	ldr	r2, [r7, #28]
 80172ee:	697b      	ldr	r3, [r7, #20]
 80172f0:	4413      	add	r3, r2
 80172f2:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80172f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172f6:	681b      	ldr	r3, [r3, #0]
 80172f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80172fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d1bb      	bne.n	8017278 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8017300:	4b1b      	ldr	r3, [pc, #108]	; (8017370 <low_level_input+0x164>)
 8017302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017304:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8017306:	2300      	movs	r3, #0
 8017308:	613b      	str	r3, [r7, #16]
 801730a:	e00b      	b.n	8017324 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 801730c:	6a3b      	ldr	r3, [r7, #32]
 801730e:	681b      	ldr	r3, [r3, #0]
 8017310:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017314:	6a3b      	ldr	r3, [r7, #32]
 8017316:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8017318:	6a3b      	ldr	r3, [r7, #32]
 801731a:	68db      	ldr	r3, [r3, #12]
 801731c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801731e:	693b      	ldr	r3, [r7, #16]
 8017320:	3301      	adds	r3, #1
 8017322:	613b      	str	r3, [r7, #16]
 8017324:	4b12      	ldr	r3, [pc, #72]	; (8017370 <low_level_input+0x164>)
 8017326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017328:	693a      	ldr	r2, [r7, #16]
 801732a:	429a      	cmp	r2, r3
 801732c:	d3ee      	bcc.n	801730c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 801732e:	4b10      	ldr	r3, [pc, #64]	; (8017370 <low_level_input+0x164>)
 8017330:	2200      	movs	r2, #0
 8017332:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8017334:	4b0e      	ldr	r3, [pc, #56]	; (8017370 <low_level_input+0x164>)
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801733c:	3314      	adds	r3, #20
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017344:	2b00      	cmp	r3, #0
 8017346:	d00d      	beq.n	8017364 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8017348:	4b09      	ldr	r3, [pc, #36]	; (8017370 <low_level_input+0x164>)
 801734a:	681b      	ldr	r3, [r3, #0]
 801734c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017350:	3314      	adds	r3, #20
 8017352:	2280      	movs	r2, #128	; 0x80
 8017354:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8017356:	4b06      	ldr	r3, [pc, #24]	; (8017370 <low_level_input+0x164>)
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801735e:	3308      	adds	r3, #8
 8017360:	2200      	movs	r2, #0
 8017362:	601a      	str	r2, [r3, #0]
  }
  return p;
 8017364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8017366:	4618      	mov	r0, r3
 8017368:	3730      	adds	r7, #48	; 0x30
 801736a:	46bd      	mov	sp, r7
 801736c:	bd80      	pop	{r7, pc}
 801736e:	bf00      	nop
 8017370:	2000ddfc 	.word	0x2000ddfc

08017374 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8017374:	b580      	push	{r7, lr}
 8017376:	b084      	sub	sp, #16
 8017378:	af00      	add	r7, sp, #0
 801737a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8017380:	4b12      	ldr	r3, [pc, #72]	; (80173cc <ethernetif_input+0x58>)
 8017382:	681b      	ldr	r3, [r3, #0]
 8017384:	f04f 31ff 	mov.w	r1, #4294967295
 8017388:	4618      	mov	r0, r3
 801738a:	f7eb fe13 	bl	8002fb4 <osSemaphoreWait>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d1f5      	bne.n	8017380 <ethernetif_input+0xc>
    {
      do
      {   
        LOCK_TCPIP_CORE();
 8017394:	480e      	ldr	r0, [pc, #56]	; (80173d0 <ethernetif_input+0x5c>)
 8017396:	f7fd ff77 	bl	8015288 <sys_mutex_lock>
        p = low_level_input( netif );
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	f7ff ff36 	bl	801720c <low_level_input>
 80173a0:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80173a2:	68bb      	ldr	r3, [r7, #8]
 80173a4:	2b00      	cmp	r3, #0
 80173a6:	d00a      	beq.n	80173be <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80173a8:	68fb      	ldr	r3, [r7, #12]
 80173aa:	691b      	ldr	r3, [r3, #16]
 80173ac:	68f9      	ldr	r1, [r7, #12]
 80173ae:	68b8      	ldr	r0, [r7, #8]
 80173b0:	4798      	blx	r3
 80173b2:	4603      	mov	r3, r0
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80173b8:	68b8      	ldr	r0, [r7, #8]
 80173ba:	f7f2 fa0f 	bl	80097dc <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80173be:	4804      	ldr	r0, [pc, #16]	; (80173d0 <ethernetif_input+0x5c>)
 80173c0:	f7fd ff71 	bl	80152a6 <sys_mutex_unlock>
      } while(p!=NULL);
 80173c4:	68bb      	ldr	r3, [r7, #8]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d1e4      	bne.n	8017394 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80173ca:	e7d9      	b.n	8017380 <ethernetif_input+0xc>
 80173cc:	200084f8 	.word	0x200084f8
 80173d0:	20008da4 	.word	0x20008da4

080173d4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	2b00      	cmp	r3, #0
 80173e0:	d106      	bne.n	80173f0 <ethernetif_init+0x1c>
 80173e2:	4b0e      	ldr	r3, [pc, #56]	; (801741c <ethernetif_init+0x48>)
 80173e4:	f240 2235 	movw	r2, #565	; 0x235
 80173e8:	490d      	ldr	r1, [pc, #52]	; (8017420 <ethernetif_init+0x4c>)
 80173ea:	480e      	ldr	r0, [pc, #56]	; (8017424 <ethernetif_init+0x50>)
 80173ec:	f000 fdd2 	bl	8017f94 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	2273      	movs	r2, #115	; 0x73
 80173f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	2274      	movs	r2, #116	; 0x74
 80173fc:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	4a09      	ldr	r2, [pc, #36]	; (8017428 <ethernetif_init+0x54>)
 8017404:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	4a08      	ldr	r2, [pc, #32]	; (801742c <ethernetif_init+0x58>)
 801740a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ff fd8f 	bl	8016f30 <low_level_init>

  return ERR_OK;
 8017412:	2300      	movs	r3, #0
}
 8017414:	4618      	mov	r0, r3
 8017416:	3708      	adds	r7, #8
 8017418:	46bd      	mov	sp, r7
 801741a:	bd80      	pop	{r7, pc}
 801741c:	0801c868 	.word	0x0801c868
 8017420:	0801c87c 	.word	0x0801c87c
 8017424:	0801c88c 	.word	0x0801c88c
 8017428:	08013009 	.word	0x08013009
 801742c:	080170d1 	.word	0x080170d1

08017430 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8017434:	f7e9 f8fa 	bl	800062c <HAL_GetTick>
 8017438:	4603      	mov	r3, r0
}
 801743a:	4618      	mov	r0, r3
 801743c:	bd80      	pop	{r7, pc}
	...

08017440 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8017440:	b580      	push	{r7, lr}
 8017442:	b084      	sub	sp, #16
 8017444:	af00      	add	r7, sp, #0
 8017446:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8017448:	2300      	movs	r3, #0
 801744a:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 801744c:	687b      	ldr	r3, [r7, #4]
 801744e:	60fb      	str	r3, [r7, #12]
  
  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8017450:	f107 0308 	add.w	r3, r7, #8
 8017454:	461a      	mov	r2, r3
 8017456:	2101      	movs	r1, #1
 8017458:	4816      	ldr	r0, [pc, #88]	; (80174b4 <ethernetif_set_link+0x74>)
 801745a:	f7e9 fe58 	bl	800110e <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	f003 0304 	and.w	r3, r3, #4
 8017464:	60bb      	str	r3, [r7, #8]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 8017466:	68fb      	ldr	r3, [r7, #12]
 8017468:	681b      	ldr	r3, [r3, #0]
 801746a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801746e:	f003 0304 	and.w	r3, r3, #4
 8017472:	2b00      	cmp	r3, #0
 8017474:	d108      	bne.n	8017488 <ethernetif_set_link+0x48>
 8017476:	68bb      	ldr	r3, [r7, #8]
 8017478:	2b00      	cmp	r3, #0
 801747a:	d005      	beq.n	8017488 <ethernetif_set_link+0x48>
    {
      /* network cable is connected */ 
      netif_set_link_up(link_arg->netif);        
 801747c:	68fb      	ldr	r3, [r7, #12]
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	4618      	mov	r0, r3
 8017482:	f7f1 fd99 	bl	8008fb8 <netif_set_link_up>
 8017486:	e011      	b.n	80174ac <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 8017488:	68fb      	ldr	r3, [r7, #12]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017490:	089b      	lsrs	r3, r3, #2
 8017492:	f003 0301 	and.w	r3, r3, #1
 8017496:	b2db      	uxtb	r3, r3
 8017498:	2b00      	cmp	r3, #0
 801749a:	d007      	beq.n	80174ac <ethernetif_set_link+0x6c>
 801749c:	68bb      	ldr	r3, [r7, #8]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d104      	bne.n	80174ac <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80174a2:	68fb      	ldr	r3, [r7, #12]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	4618      	mov	r0, r3
 80174a8:	f7f1 fdbe 	bl	8009028 <netif_set_link_down>
    }
    
    /* Suspend thread for 200 ms */
    osDelay(200);
 80174ac:	20c8      	movs	r0, #200	; 0xc8
 80174ae:	f7eb fc9c 	bl	8002dea <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80174b2:	e7cd      	b.n	8017450 <ethernetif_set_link+0x10>
 80174b4:	2000ddfc 	.word	0x2000ddfc

080174b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b084      	sub	sp, #16
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80174c0:	2300      	movs	r3, #0
 80174c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80174c4:	2300      	movs	r3, #0
 80174c6:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80174ce:	089b      	lsrs	r3, r3, #2
 80174d0:	f003 0301 	and.w	r3, r3, #1
 80174d4:	b2db      	uxtb	r3, r3
 80174d6:	2b00      	cmp	r3, #0
 80174d8:	d05d      	beq.n	8017596 <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80174da:	4b34      	ldr	r3, [pc, #208]	; (80175ac <ethernetif_update_config+0xf4>)
 80174dc:	685b      	ldr	r3, [r3, #4]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d03f      	beq.n	8017562 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80174e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80174e6:	2100      	movs	r1, #0
 80174e8:	4830      	ldr	r0, [pc, #192]	; (80175ac <ethernetif_update_config+0xf4>)
 80174ea:	f7e9 fe78 	bl	80011de <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 80174ee:	f7e9 f89d 	bl	800062c <HAL_GetTick>
 80174f2:	4603      	mov	r3, r0
 80174f4:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80174f6:	f107 0308 	add.w	r3, r7, #8
 80174fa:	461a      	mov	r2, r3
 80174fc:	2101      	movs	r1, #1
 80174fe:	482b      	ldr	r0, [pc, #172]	; (80175ac <ethernetif_update_config+0xf4>)
 8017500:	f7e9 fe05 	bl	800110e <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8017504:	f7e9 f892 	bl	800062c <HAL_GetTick>
 8017508:	4602      	mov	r2, r0
 801750a:	68fb      	ldr	r3, [r7, #12]
 801750c:	1ad3      	subs	r3, r2, r3
 801750e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8017512:	d828      	bhi.n	8017566 <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8017514:	68bb      	ldr	r3, [r7, #8]
 8017516:	f003 0320 	and.w	r3, r3, #32
 801751a:	2b00      	cmp	r3, #0
 801751c:	d0eb      	beq.n	80174f6 <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 801751e:	f107 0308 	add.w	r3, r7, #8
 8017522:	461a      	mov	r2, r3
 8017524:	211f      	movs	r1, #31
 8017526:	4821      	ldr	r0, [pc, #132]	; (80175ac <ethernetif_update_config+0xf4>)
 8017528:	f7e9 fdf1 	bl	800110e <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 801752c:	68bb      	ldr	r3, [r7, #8]
 801752e:	f003 0310 	and.w	r3, r3, #16
 8017532:	2b00      	cmp	r3, #0
 8017534:	d004      	beq.n	8017540 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 8017536:	4b1d      	ldr	r3, [pc, #116]	; (80175ac <ethernetif_update_config+0xf4>)
 8017538:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801753c:	60da      	str	r2, [r3, #12]
 801753e:	e002      	b.n	8017546 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8017540:	4b1a      	ldr	r3, [pc, #104]	; (80175ac <ethernetif_update_config+0xf4>)
 8017542:	2200      	movs	r2, #0
 8017544:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8017546:	68bb      	ldr	r3, [r7, #8]
 8017548:	f003 0304 	and.w	r3, r3, #4
 801754c:	2b00      	cmp	r3, #0
 801754e:	d003      	beq.n	8017558 <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8017550:	4b16      	ldr	r3, [pc, #88]	; (80175ac <ethernetif_update_config+0xf4>)
 8017552:	2200      	movs	r2, #0
 8017554:	609a      	str	r2, [r3, #8]
 8017556:	e016      	b.n	8017586 <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8017558:	4b14      	ldr	r3, [pc, #80]	; (80175ac <ethernetif_update_config+0xf4>)
 801755a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 801755e:	609a      	str	r2, [r3, #8]
 8017560:	e011      	b.n	8017586 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8017562:	bf00      	nop
 8017564:	e000      	b.n	8017568 <ethernetif_update_config+0xb0>
          goto error;
 8017566:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8017568:	4b10      	ldr	r3, [pc, #64]	; (80175ac <ethernetif_update_config+0xf4>)
 801756a:	68db      	ldr	r3, [r3, #12]
 801756c:	08db      	lsrs	r3, r3, #3
 801756e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8017570:	4b0e      	ldr	r3, [pc, #56]	; (80175ac <ethernetif_update_config+0xf4>)
 8017572:	689b      	ldr	r3, [r3, #8]
 8017574:	085b      	lsrs	r3, r3, #1
 8017576:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8017578:	4313      	orrs	r3, r2
 801757a:	b29b      	uxth	r3, r3
 801757c:	461a      	mov	r2, r3
 801757e:	2100      	movs	r1, #0
 8017580:	480a      	ldr	r0, [pc, #40]	; (80175ac <ethernetif_update_config+0xf4>)
 8017582:	f7e9 fe2c 	bl	80011de <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8017586:	2100      	movs	r1, #0
 8017588:	4808      	ldr	r0, [pc, #32]	; (80175ac <ethernetif_update_config+0xf4>)
 801758a:	f7e9 feed 	bl	8001368 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 801758e:	4807      	ldr	r0, [pc, #28]	; (80175ac <ethernetif_update_config+0xf4>)
 8017590:	f7e9 fe8b 	bl	80012aa <HAL_ETH_Start>
 8017594:	e002      	b.n	801759c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8017596:	4805      	ldr	r0, [pc, #20]	; (80175ac <ethernetif_update_config+0xf4>)
 8017598:	f7e9 feb6 	bl	8001308 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 801759c:	6878      	ldr	r0, [r7, #4]
 801759e:	f000 f807 	bl	80175b0 <ethernetif_notify_conn_changed>
}
 80175a2:	bf00      	nop
 80175a4:	3710      	adds	r7, #16
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	2000ddfc 	.word	0x2000ddfc

080175b0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b082      	sub	sp, #8
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file 
            when the callback is needed,
  */
	if (netif_is_link_up(netif) && !netif_is_up(netif))
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80175be:	089b      	lsrs	r3, r3, #2
 80175c0:	f003 0301 	and.w	r3, r3, #1
 80175c4:	b2db      	uxtb	r3, r3
 80175c6:	2b00      	cmp	r3, #0
 80175c8:	d00c      	beq.n	80175e4 <ethernetif_notify_conn_changed+0x34>
 80175ca:	687b      	ldr	r3, [r7, #4]
 80175cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80175d0:	f003 0301 	and.w	r3, r3, #1
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d105      	bne.n	80175e4 <ethernetif_notify_conn_changed+0x34>
	{
		netif_set_up(netif);
 80175d8:	6878      	ldr	r0, [r7, #4]
 80175da:	f7f1 fc4f 	bl	8008e7c <netif_set_up>
		dhcp_start(netif);
 80175de:	6878      	ldr	r0, [r7, #4]
 80175e0:	f7f9 fd9c 	bl	801111c <dhcp_start>
	}

}
 80175e4:	bf00      	nop
 80175e6:	3708      	adds	r7, #8
 80175e8:	46bd      	mov	sp, r7
 80175ea:	bd80      	pop	{r7, pc}

080175ec <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80175ec:	b580      	push	{r7, lr}
 80175ee:	b082      	sub	sp, #8
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	6078      	str	r0, [r7, #4]
 80175f4:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET); //turn on red led when detects stack overflow
 80175f6:	2201      	movs	r2, #1
 80175f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80175fc:	4803      	ldr	r0, [pc, #12]	; (801760c <vApplicationStackOverflowHook+0x20>)
 80175fe:	f7ea fc75 	bl	8001eec <HAL_GPIO_WritePin>

}
 8017602:	bf00      	nop
 8017604:	3708      	adds	r7, #8
 8017606:	46bd      	mov	sp, r7
 8017608:	bd80      	pop	{r7, pc}
 801760a:	bf00      	nop
 801760c:	40020400 	.word	0x40020400

08017610 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8017610:	b480      	push	{r7}
 8017612:	b085      	sub	sp, #20
 8017614:	af00      	add	r7, sp, #0
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 801761c:	68fb      	ldr	r3, [r7, #12]
 801761e:	4a07      	ldr	r2, [pc, #28]	; (801763c <vApplicationGetIdleTaskMemory+0x2c>)
 8017620:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	4a06      	ldr	r2, [pc, #24]	; (8017640 <vApplicationGetIdleTaskMemory+0x30>)
 8017626:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801762e:	601a      	str	r2, [r3, #0]
	/* place for user code */
}                   
 8017630:	bf00      	nop
 8017632:	3714      	adds	r7, #20
 8017634:	46bd      	mov	sp, r7
 8017636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801763a:	4770      	bx	lr
 801763c:	200084fc 	.word	0x200084fc
 8017640:	20008550 	.word	0x20008550

08017644 <MX_FREERTOS_Init>:
/**
 * @brief  FreeRTOS initialization
 * @param  None
 * @retval None
 */
void MX_FREERTOS_Init(void) {
 8017644:	b5b0      	push	{r4, r5, r7, lr}
 8017646:	b088      	sub	sp, #32
 8017648:	af00      	add	r7, sp, #0
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 801764a:	4b0a      	ldr	r3, [pc, #40]	; (8017674 <MX_FREERTOS_Init+0x30>)
 801764c:	1d3c      	adds	r4, r7, #4
 801764e:	461d      	mov	r5, r3
 8017650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017654:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017658:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801765c:	1d3b      	adds	r3, r7, #4
 801765e:	2100      	movs	r1, #0
 8017660:	4618      	mov	r0, r3
 8017662:	f7eb fb76 	bl	8002d52 <osThreadCreate>
 8017666:	4602      	mov	r2, r0
 8017668:	4b03      	ldr	r3, [pc, #12]	; (8017678 <MX_FREERTOS_Init+0x34>)
 801766a:	601a      	str	r2, [r3, #0]

	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

}
 801766c:	bf00      	nop
 801766e:	3720      	adds	r7, #32
 8017670:	46bd      	mov	sp, r7
 8017672:	bdb0      	pop	{r4, r5, r7, pc}
 8017674:	0801c8c0 	.word	0x0801c8c0
 8017678:	2000f618 	.word	0x2000f618

0801767c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 801767c:	b5b0      	push	{r4, r5, r7, lr}
 801767e:	b08a      	sub	sp, #40	; 0x28
 8017680:	af00      	add	r7, sp, #0
 8017682:	6078      	str	r0, [r7, #4]
	/* init code for LWIP */
	MX_LWIP_Init();
 8017684:	f000 f956 	bl	8017934 <MX_LWIP_Init>
	/* USER CODE BEGIN StartDefaultTask */
	osThreadDef(mqttClientTask, StartMqttClientTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 8017688:	4b0d      	ldr	r3, [pc, #52]	; (80176c0 <StartDefaultTask+0x44>)
 801768a:	f107 040c 	add.w	r4, r7, #12
 801768e:	461d      	mov	r5, r3
 8017690:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8017692:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017694:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8017698:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	mqttClientTaskHandle = osThreadCreate(osThread(mqttClientTask), NULL); //run tcp client task
 801769c:	f107 030c 	add.w	r3, r7, #12
 80176a0:	2100      	movs	r1, #0
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7eb fb55 	bl	8002d52 <osThreadCreate>
 80176a8:	4602      	mov	r2, r0
 80176aa:	4b06      	ldr	r3, [pc, #24]	; (80176c4 <StartDefaultTask+0x48>)
 80176ac:	601a      	str	r2, [r3, #0]

	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 80176ae:	2101      	movs	r1, #1
 80176b0:	4805      	ldr	r0, [pc, #20]	; (80176c8 <StartDefaultTask+0x4c>)
 80176b2:	f7ea fc34 	bl	8001f1e <HAL_GPIO_TogglePin>
		osDelay(500);
 80176b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80176ba:	f7eb fb96 	bl	8002dea <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //toggle running led
 80176be:	e7f6      	b.n	80176ae <StartDefaultTask+0x32>
 80176c0:	0801c8ec 	.word	0x0801c8ec
 80176c4:	2000fa1c 	.word	0x2000fa1c
 80176c8:	40020400 	.word	0x40020400

080176cc <StartMqttClientTask>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void StartMqttClientTask(void const *argument)
{
 80176cc:	b580      	push	{r7, lr}
 80176ce:	b0bc      	sub	sp, #240	; 0xf0
 80176d0:	af04      	add	r7, sp, #16
 80176d2:	6078      	str	r0, [r7, #4]
	MQTTClient mqttClient;
	int ret;

	while(1)
	{
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 80176d4:	4b3b      	ldr	r3, [pc, #236]	; (80177c4 <StartMqttClientTask+0xf8>)
 80176d6:	685b      	ldr	r3, [r3, #4]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	d007      	beq.n	80176ec <StartMqttClientTask+0x20>
 80176dc:	4b39      	ldr	r3, [pc, #228]	; (80177c4 <StartMqttClientTask+0xf8>)
 80176de:	689b      	ldr	r3, [r3, #8]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d003      	beq.n	80176ec <StartMqttClientTask+0x20>
 80176e4:	4b37      	ldr	r3, [pc, #220]	; (80177c4 <StartMqttClientTask+0xf8>)
 80176e6:	68db      	ldr	r3, [r3, #12]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d104      	bne.n	80176f6 <StartMqttClientTask+0x2a>
		{
			osDelay(1000);
 80176ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80176f0:	f7eb fb7b 	bl	8002dea <osDelay>
		if (gnetif.ip_addr.addr == 0 || gnetif.netmask.addr == 0 || gnetif.gw.addr == 0) //system has no valid ip address
 80176f4:	e7ee      	b.n	80176d4 <StartMqttClientTask+0x8>
		{
			break;
		}
	}

	NewNetwork(&net);
 80176f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7fe ff08 	bl	8016510 <NewNetwork>
	ConnectNetwork(&net, BROKER_IP, MQTT_PORT);
 8017700:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8017704:	f240 725b 	movw	r2, #1883	; 0x75b
 8017708:	492f      	ldr	r1, [pc, #188]	; (80177c8 <StartMqttClientTask+0xfc>)
 801770a:	4618      	mov	r0, r3
 801770c:	f7fe ff96 	bl	801663c <ConnectNetwork>
	MQTTClientInit(&mqttClient, &net, 1000, sndBuffer, sizeof(sndBuffer), rcvBuffer, sizeof(rcvBuffer));
 8017710:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8017714:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8017718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801771c:	9302      	str	r3, [sp, #8]
 801771e:	4b2b      	ldr	r3, [pc, #172]	; (80177cc <StartMqttClientTask+0x100>)
 8017720:	9301      	str	r3, [sp, #4]
 8017722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017726:	9300      	str	r3, [sp, #0]
 8017728:	4b29      	ldr	r3, [pc, #164]	; (80177d0 <StartMqttClientTask+0x104>)
 801772a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801772e:	f7fd fe7f 	bl	8015430 <MQTTClientInit>

	MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 8017732:	4a28      	ldr	r2, [pc, #160]	; (80177d4 <StartMqttClientTask+0x108>)
 8017734:	f107 030c 	add.w	r3, r7, #12
 8017738:	4611      	mov	r1, r2
 801773a:	2258      	movs	r2, #88	; 0x58
 801773c:	4618      	mov	r0, r3
 801773e:	f000 fc16 	bl	8017f6e <memcpy>
	data.willFlag = 0;
 8017742:	2300      	movs	r3, #0
 8017744:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	data.MQTTVersion = 3;
 8017748:	2303      	movs	r3, #3
 801774a:	753b      	strb	r3, [r7, #20]
	data.clientID.cstring = "STM32F4";
 801774c:	4b22      	ldr	r3, [pc, #136]	; (80177d8 <StartMqttClientTask+0x10c>)
 801774e:	61bb      	str	r3, [r7, #24]
	data.username.cstring = "STM32F4";
 8017750:	4b21      	ldr	r3, [pc, #132]	; (80177d8 <StartMqttClientTask+0x10c>)
 8017752:	64fb      	str	r3, [r7, #76]	; 0x4c
	data.password.cstring = "PASSWD";
 8017754:	4b21      	ldr	r3, [pc, #132]	; (80177dc <StartMqttClientTask+0x110>)
 8017756:	65bb      	str	r3, [r7, #88]	; 0x58
	data.keepAliveInterval = 60;
 8017758:	233c      	movs	r3, #60	; 0x3c
 801775a:	84bb      	strh	r3, [r7, #36]	; 0x24
	data.cleansession = 1;
 801775c:	2301      	movs	r3, #1
 801775e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	ret = MQTTConnect(&mqttClient, &data);
 8017762:	f107 020c 	add.w	r2, r7, #12
 8017766:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801776a:	4611      	mov	r1, r2
 801776c:	4618      	mov	r0, r3
 801776e:	f7fe faa1 	bl	8015cb4 <MQTTConnect>
 8017772:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if(ret != MQTT_SUCESS)
 8017776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801777a:	2b00      	cmp	r3, #0
 801777c:	d004      	beq.n	8017788 <StartMqttClientTask+0xbc>
	{
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 801777e:	2201      	movs	r2, #1
 8017780:	2180      	movs	r1, #128	; 0x80
 8017782:	4817      	ldr	r0, [pc, #92]	; (80177e0 <StartMqttClientTask+0x114>)
 8017784:	f7ea fbb2 	bl	8001eec <HAL_GPIO_WritePin>
	}

	ret = MQTTSubscribe(&mqttClient, "test", QOS0, MQTT_MessageArrived);
 8017788:	f107 0064 	add.w	r0, r7, #100	; 0x64
 801778c:	4b15      	ldr	r3, [pc, #84]	; (80177e4 <StartMqttClientTask+0x118>)
 801778e:	2200      	movs	r2, #0
 8017790:	4915      	ldr	r1, [pc, #84]	; (80177e8 <StartMqttClientTask+0x11c>)
 8017792:	f7fe fb98 	bl	8015ec6 <MQTTSubscribe>
 8017796:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc
	if(ret != MQTT_SUCESS)
 801779a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d004      	beq.n	80177ac <StartMqttClientTask+0xe0>
	{
		HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 80177a2:	2201      	movs	r2, #1
 80177a4:	2180      	movs	r1, #128	; 0x80
 80177a6:	480e      	ldr	r0, [pc, #56]	; (80177e0 <StartMqttClientTask+0x114>)
 80177a8:	f7ea fba0 	bl	8001eec <HAL_GPIO_WritePin>
	}

	while(1)
	{
		MQTTYield(&mqttClient, 1000);
 80177ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80177b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80177b4:	4618      	mov	r0, r3
 80177b6:	f7fe f99b 	bl	8015af0 <MQTTYield>
		osDelay(100);
 80177ba:	2064      	movs	r0, #100	; 0x64
 80177bc:	f7eb fb15 	bl	8002dea <osDelay>
		MQTTYield(&mqttClient, 1000);
 80177c0:	e7f4      	b.n	80177ac <StartMqttClientTask+0xe0>
 80177c2:	bf00      	nop
 80177c4:	2000fe28 	.word	0x2000fe28
 80177c8:	0801c908 	.word	0x0801c908
 80177cc:	2000fa20 	.word	0x2000fa20
 80177d0:	2000f61c 	.word	0x2000f61c
 80177d4:	0801c930 	.word	0x0801c930
 80177d8:	0801c918 	.word	0x0801c918
 80177dc:	0801c920 	.word	0x0801c920
 80177e0:	40020400 	.word	0x40020400
 80177e4:	080177ed 	.word	0x080177ed
 80177e8:	0801c928 	.word	0x0801c928

080177ec <MQTT_MessageArrived>:
	}
}

void MQTT_MessageArrived(MessageData* msg)
{
 80177ec:	b580      	push	{r7, lr}
 80177ee:	b084      	sub	sp, #16
 80177f0:	af00      	add	r7, sp, #0
 80177f2:	6078      	str	r0, [r7, #4]
	MQTTMessage* message = msg->message;
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	60fb      	str	r3, [r7, #12]

	memcpy(rcvBuffer,(char*)message->payload,(int)message->payloadlen);
 80177fa:	68fb      	ldr	r3, [r7, #12]
 80177fc:	6899      	ldr	r1, [r3, #8]
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	68db      	ldr	r3, [r3, #12]
 8017802:	461a      	mov	r2, r3
 8017804:	480a      	ldr	r0, [pc, #40]	; (8017830 <MQTT_MessageArrived+0x44>)
 8017806:	f000 fbb2 	bl	8017f6e <memcpy>
	rcvBuffer[message->payloadlen + 1] = '\n';
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	68db      	ldr	r3, [r3, #12]
 801780e:	3301      	adds	r3, #1
 8017810:	4a07      	ldr	r2, [pc, #28]	; (8017830 <MQTT_MessageArrived+0x44>)
 8017812:	210a      	movs	r1, #10
 8017814:	54d1      	strb	r1, [r2, r3]

	printf("%.*s", (int)message->payloadlen, (char*)message->payload);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	68db      	ldr	r3, [r3, #12]
 801781a:	4619      	mov	r1, r3
 801781c:	68fb      	ldr	r3, [r7, #12]
 801781e:	689b      	ldr	r3, [r3, #8]
 8017820:	461a      	mov	r2, r3
 8017822:	4804      	ldr	r0, [pc, #16]	; (8017834 <MQTT_MessageArrived+0x48>)
 8017824:	f000 fbb6 	bl	8017f94 <iprintf>

}
 8017828:	bf00      	nop
 801782a:	3710      	adds	r7, #16
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	2000fa20 	.word	0x2000fa20
 8017834:	0801c988 	.word	0x0801c988

08017838 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8017838:	b580      	push	{r7, lr}
 801783a:	b08a      	sub	sp, #40	; 0x28
 801783c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801783e:	f107 0314 	add.w	r3, r7, #20
 8017842:	2200      	movs	r2, #0
 8017844:	601a      	str	r2, [r3, #0]
 8017846:	605a      	str	r2, [r3, #4]
 8017848:	609a      	str	r2, [r3, #8]
 801784a:	60da      	str	r2, [r3, #12]
 801784c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801784e:	2300      	movs	r3, #0
 8017850:	613b      	str	r3, [r7, #16]
 8017852:	4b35      	ldr	r3, [pc, #212]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017856:	4a34      	ldr	r2, [pc, #208]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017858:	f043 0304 	orr.w	r3, r3, #4
 801785c:	6313      	str	r3, [r2, #48]	; 0x30
 801785e:	4b32      	ldr	r3, [pc, #200]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017862:	f003 0304 	and.w	r3, r3, #4
 8017866:	613b      	str	r3, [r7, #16]
 8017868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801786a:	2300      	movs	r3, #0
 801786c:	60fb      	str	r3, [r7, #12]
 801786e:	4b2e      	ldr	r3, [pc, #184]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017872:	4a2d      	ldr	r2, [pc, #180]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017874:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017878:	6313      	str	r3, [r2, #48]	; 0x30
 801787a:	4b2b      	ldr	r3, [pc, #172]	; (8017928 <MX_GPIO_Init+0xf0>)
 801787c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801787e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017882:	60fb      	str	r3, [r7, #12]
 8017884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8017886:	2300      	movs	r3, #0
 8017888:	60bb      	str	r3, [r7, #8]
 801788a:	4b27      	ldr	r3, [pc, #156]	; (8017928 <MX_GPIO_Init+0xf0>)
 801788c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801788e:	4a26      	ldr	r2, [pc, #152]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017890:	f043 0301 	orr.w	r3, r3, #1
 8017894:	6313      	str	r3, [r2, #48]	; 0x30
 8017896:	4b24      	ldr	r3, [pc, #144]	; (8017928 <MX_GPIO_Init+0xf0>)
 8017898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801789a:	f003 0301 	and.w	r3, r3, #1
 801789e:	60bb      	str	r3, [r7, #8]
 80178a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80178a2:	2300      	movs	r3, #0
 80178a4:	607b      	str	r3, [r7, #4]
 80178a6:	4b20      	ldr	r3, [pc, #128]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178aa:	4a1f      	ldr	r2, [pc, #124]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178ac:	f043 0302 	orr.w	r3, r3, #2
 80178b0:	6313      	str	r3, [r2, #48]	; 0x30
 80178b2:	4b1d      	ldr	r3, [pc, #116]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178b6:	f003 0302 	and.w	r3, r3, #2
 80178ba:	607b      	str	r3, [r7, #4]
 80178bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80178be:	2300      	movs	r3, #0
 80178c0:	603b      	str	r3, [r7, #0]
 80178c2:	4b19      	ldr	r3, [pc, #100]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178c6:	4a18      	ldr	r2, [pc, #96]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80178cc:	6313      	str	r3, [r2, #48]	; 0x30
 80178ce:	4b16      	ldr	r3, [pc, #88]	; (8017928 <MX_GPIO_Init+0xf0>)
 80178d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80178d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80178d6:	603b      	str	r3, [r7, #0]
 80178d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 80178da:	2200      	movs	r2, #0
 80178dc:	f244 0181 	movw	r1, #16513	; 0x4081
 80178e0:	4812      	ldr	r0, [pc, #72]	; (801792c <MX_GPIO_Init+0xf4>)
 80178e2:	f7ea fb03 	bl	8001eec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 80178e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80178ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80178ec:	2300      	movs	r3, #0
 80178ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80178f0:	2300      	movs	r3, #0
 80178f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 80178f4:	f107 0314 	add.w	r3, r7, #20
 80178f8:	4619      	mov	r1, r3
 80178fa:	480d      	ldr	r0, [pc, #52]	; (8017930 <MX_GPIO_Init+0xf8>)
 80178fc:	f7ea f94c 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8017900:	f244 0381 	movw	r3, #16513	; 0x4081
 8017904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8017906:	2301      	movs	r3, #1
 8017908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801790a:	2300      	movs	r3, #0
 801790c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801790e:	2300      	movs	r3, #0
 8017910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017912:	f107 0314 	add.w	r3, r7, #20
 8017916:	4619      	mov	r1, r3
 8017918:	4804      	ldr	r0, [pc, #16]	; (801792c <MX_GPIO_Init+0xf4>)
 801791a:	f7ea f93d 	bl	8001b98 <HAL_GPIO_Init>

}
 801791e:	bf00      	nop
 8017920:	3728      	adds	r7, #40	; 0x28
 8017922:	46bd      	mov	sp, r7
 8017924:	bd80      	pop	{r7, pc}
 8017926:	bf00      	nop
 8017928:	40023800 	.word	0x40023800
 801792c:	40020400 	.word	0x40020400
 8017930:	40020800 	.word	0x40020800

08017934 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8017934:	b5b0      	push	{r4, r5, r7, lr}
 8017936:	b08e      	sub	sp, #56	; 0x38
 8017938:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 801793a:	2100      	movs	r1, #0
 801793c:	2000      	movs	r0, #0
 801793e:	f7f0 fb4f 	bl	8007fe0 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8017942:	4b2a      	ldr	r3, [pc, #168]	; (80179ec <MX_LWIP_Init+0xb8>)
 8017944:	2200      	movs	r2, #0
 8017946:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8017948:	4b29      	ldr	r3, [pc, #164]	; (80179f0 <MX_LWIP_Init+0xbc>)
 801794a:	2200      	movs	r2, #0
 801794c:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 801794e:	4b29      	ldr	r3, [pc, #164]	; (80179f4 <MX_LWIP_Init+0xc0>)
 8017950:	2200      	movs	r2, #0
 8017952:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8017954:	4b28      	ldr	r3, [pc, #160]	; (80179f8 <MX_LWIP_Init+0xc4>)
 8017956:	9302      	str	r3, [sp, #8]
 8017958:	4b28      	ldr	r3, [pc, #160]	; (80179fc <MX_LWIP_Init+0xc8>)
 801795a:	9301      	str	r3, [sp, #4]
 801795c:	2300      	movs	r3, #0
 801795e:	9300      	str	r3, [sp, #0]
 8017960:	4b24      	ldr	r3, [pc, #144]	; (80179f4 <MX_LWIP_Init+0xc0>)
 8017962:	4a23      	ldr	r2, [pc, #140]	; (80179f0 <MX_LWIP_Init+0xbc>)
 8017964:	4921      	ldr	r1, [pc, #132]	; (80179ec <MX_LWIP_Init+0xb8>)
 8017966:	4826      	ldr	r0, [pc, #152]	; (8017a00 <MX_LWIP_Init+0xcc>)
 8017968:	f7f1 f8be 	bl	8008ae8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801796c:	4824      	ldr	r0, [pc, #144]	; (8017a00 <MX_LWIP_Init+0xcc>)
 801796e:	f7f1 fa75 	bl	8008e5c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8017972:	4b23      	ldr	r3, [pc, #140]	; (8017a00 <MX_LWIP_Init+0xcc>)
 8017974:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8017978:	089b      	lsrs	r3, r3, #2
 801797a:	f003 0301 	and.w	r3, r3, #1
 801797e:	b2db      	uxtb	r3, r3
 8017980:	2b00      	cmp	r3, #0
 8017982:	d003      	beq.n	801798c <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8017984:	481e      	ldr	r0, [pc, #120]	; (8017a00 <MX_LWIP_Init+0xcc>)
 8017986:	f7f1 fa79 	bl	8008e7c <netif_set_up>
 801798a:	e002      	b.n	8017992 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801798c:	481c      	ldr	r0, [pc, #112]	; (8017a00 <MX_LWIP_Init+0xcc>)
 801798e:	f7f1 fae1 	bl	8008f54 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8017992:	491c      	ldr	r1, [pc, #112]	; (8017a04 <MX_LWIP_Init+0xd0>)
 8017994:	481a      	ldr	r0, [pc, #104]	; (8017a00 <MX_LWIP_Init+0xcc>)
 8017996:	f7f1 fb77 	bl	8009088 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 801799a:	2300      	movs	r3, #0
 801799c:	623b      	str	r3, [r7, #32]
 801799e:	2300      	movs	r3, #0
 80179a0:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 80179a2:	f107 0320 	add.w	r3, r7, #32
 80179a6:	2101      	movs	r1, #1
 80179a8:	4618      	mov	r0, r3
 80179aa:	f7eb facf 	bl	8002f4c <osSemaphoreCreate>
 80179ae:	4602      	mov	r2, r0
 80179b0:	4b15      	ldr	r3, [pc, #84]	; (8017a08 <MX_LWIP_Init+0xd4>)
 80179b2:	601a      	str	r2, [r3, #0]

  link_arg.netif = &gnetif;
 80179b4:	4b15      	ldr	r3, [pc, #84]	; (8017a0c <MX_LWIP_Init+0xd8>)
 80179b6:	4a12      	ldr	r2, [pc, #72]	; (8017a00 <MX_LWIP_Init+0xcc>)
 80179b8:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 80179ba:	4b13      	ldr	r3, [pc, #76]	; (8017a08 <MX_LWIP_Init+0xd4>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	4a13      	ldr	r2, [pc, #76]	; (8017a0c <MX_LWIP_Init+0xd8>)
 80179c0:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80179c2:	4b13      	ldr	r3, [pc, #76]	; (8017a10 <MX_LWIP_Init+0xdc>)
 80179c4:	1d3c      	adds	r4, r7, #4
 80179c6:	461d      	mov	r5, r3
 80179c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80179ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80179cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80179d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 80179d4:	1d3b      	adds	r3, r7, #4
 80179d6:	490d      	ldr	r1, [pc, #52]	; (8017a0c <MX_LWIP_Init+0xd8>)
 80179d8:	4618      	mov	r0, r3
 80179da:	f7eb f9ba 	bl	8002d52 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80179de:	4808      	ldr	r0, [pc, #32]	; (8017a00 <MX_LWIP_Init+0xcc>)
 80179e0:	f7f9 fb9c 	bl	801111c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80179e4:	bf00      	nop
 80179e6:	3728      	adds	r7, #40	; 0x28
 80179e8:	46bd      	mov	sp, r7
 80179ea:	bdb0      	pop	{r4, r5, r7, pc}
 80179ec:	2000fe60 	.word	0x2000fe60
 80179f0:	2000fe64 	.word	0x2000fe64
 80179f4:	2000fe68 	.word	0x2000fe68
 80179f8:	08007ef1 	.word	0x08007ef1
 80179fc:	080173d5 	.word	0x080173d5
 8017a00:	2000fe28 	.word	0x2000fe28
 8017a04:	080174b9 	.word	0x080174b9
 8017a08:	20008d50 	.word	0x20008d50
 8017a0c:	2000fe20 	.word	0x2000fe20
 8017a10:	0801c998 	.word	0x0801c998

08017a14 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8017a14:	b480      	push	{r7}
 8017a16:	b083      	sub	sp, #12
 8017a18:	af00      	add	r7, sp, #0
 8017a1a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017a1c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017a20:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8017a24:	f003 0301 	and.w	r3, r3, #1
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d013      	beq.n	8017a54 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8017a2c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017a30:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8017a34:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d00b      	beq.n	8017a54 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8017a3c:	e000      	b.n	8017a40 <ITM_SendChar+0x2c>
    {
      __NOP();
 8017a3e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8017a40:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	2b00      	cmp	r3, #0
 8017a48:	d0f9      	beq.n	8017a3e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8017a4a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8017a4e:	687a      	ldr	r2, [r7, #4]
 8017a50:	b2d2      	uxtb	r2, r2
 8017a52:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8017a54:	687b      	ldr	r3, [r7, #4]
}
 8017a56:	4618      	mov	r0, r3
 8017a58:	370c      	adds	r7, #12
 8017a5a:	46bd      	mov	sp, r7
 8017a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a60:	4770      	bx	lr

08017a62 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8017a62:	b580      	push	{r7, lr}
 8017a64:	b086      	sub	sp, #24
 8017a66:	af00      	add	r7, sp, #0
 8017a68:	60f8      	str	r0, [r7, #12]
 8017a6a:	60b9      	str	r1, [r7, #8]
 8017a6c:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017a6e:	2300      	movs	r3, #0
 8017a70:	617b      	str	r3, [r7, #20]
 8017a72:	e009      	b.n	8017a88 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	1c5a      	adds	r2, r3, #1
 8017a78:	60ba      	str	r2, [r7, #8]
 8017a7a:	781b      	ldrb	r3, [r3, #0]
 8017a7c:	4618      	mov	r0, r3
 8017a7e:	f7ff ffc9 	bl	8017a14 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017a82:	697b      	ldr	r3, [r7, #20]
 8017a84:	3301      	adds	r3, #1
 8017a86:	617b      	str	r3, [r7, #20]
 8017a88:	697a      	ldr	r2, [r7, #20]
 8017a8a:	687b      	ldr	r3, [r7, #4]
 8017a8c:	429a      	cmp	r2, r3
 8017a8e:	dbf1      	blt.n	8017a74 <_write+0x12>
  }
  return len;
 8017a90:	687b      	ldr	r3, [r7, #4]
}
 8017a92:	4618      	mov	r0, r3
 8017a94:	3718      	adds	r7, #24
 8017a96:	46bd      	mov	sp, r7
 8017a98:	bd80      	pop	{r7, pc}
	...

08017a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8017a9c:	b580      	push	{r7, lr}
 8017a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8017aa0:	f7e8 fd8e 	bl	80005c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8017aa4:	f000 f80c 	bl	8017ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8017aa8:	f7ff fec6 	bl	8017838 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 8017aac:	4803      	ldr	r0, [pc, #12]	; (8017abc <main+0x20>)
 8017aae:	f000 fae5 	bl	801807c <puts>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8017ab2:	f7ff fdc7 	bl	8017644 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8017ab6:	f7eb f935 	bl	8002d24 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8017aba:	e7fe      	b.n	8017aba <main+0x1e>
 8017abc:	0801c9b4 	.word	0x0801c9b4

08017ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b094      	sub	sp, #80	; 0x50
 8017ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017ac6:	f107 0320 	add.w	r3, r7, #32
 8017aca:	2230      	movs	r2, #48	; 0x30
 8017acc:	2100      	movs	r1, #0
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f000 fa58 	bl	8017f84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017ad4:	f107 030c 	add.w	r3, r7, #12
 8017ad8:	2200      	movs	r2, #0
 8017ada:	601a      	str	r2, [r3, #0]
 8017adc:	605a      	str	r2, [r3, #4]
 8017ade:	609a      	str	r2, [r3, #8]
 8017ae0:	60da      	str	r2, [r3, #12]
 8017ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	60bb      	str	r3, [r7, #8]
 8017ae8:	4b28      	ldr	r3, [pc, #160]	; (8017b8c <SystemClock_Config+0xcc>)
 8017aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017aec:	4a27      	ldr	r2, [pc, #156]	; (8017b8c <SystemClock_Config+0xcc>)
 8017aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017af2:	6413      	str	r3, [r2, #64]	; 0x40
 8017af4:	4b25      	ldr	r3, [pc, #148]	; (8017b8c <SystemClock_Config+0xcc>)
 8017af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017afc:	60bb      	str	r3, [r7, #8]
 8017afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8017b00:	2300      	movs	r3, #0
 8017b02:	607b      	str	r3, [r7, #4]
 8017b04:	4b22      	ldr	r3, [pc, #136]	; (8017b90 <SystemClock_Config+0xd0>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	4a21      	ldr	r2, [pc, #132]	; (8017b90 <SystemClock_Config+0xd0>)
 8017b0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017b0e:	6013      	str	r3, [r2, #0]
 8017b10:	4b1f      	ldr	r3, [pc, #124]	; (8017b90 <SystemClock_Config+0xd0>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017b18:	607b      	str	r3, [r7, #4]
 8017b1a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8017b1c:	2301      	movs	r3, #1
 8017b1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8017b20:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8017b24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8017b26:	2302      	movs	r3, #2
 8017b28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017b2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8017b30:	2304      	movs	r3, #4
 8017b32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8017b34:	23a8      	movs	r3, #168	; 0xa8
 8017b36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017b38:	2302      	movs	r3, #2
 8017b3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8017b3c:	2307      	movs	r3, #7
 8017b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017b40:	f107 0320 	add.w	r3, r7, #32
 8017b44:	4618      	mov	r0, r3
 8017b46:	f7ea fa05 	bl	8001f54 <HAL_RCC_OscConfig>
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	2b00      	cmp	r3, #0
 8017b4e:	d001      	beq.n	8017b54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8017b50:	f000 f83e 	bl	8017bd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017b54:	230f      	movs	r3, #15
 8017b56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8017b58:	2302      	movs	r3, #2
 8017b5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017b5c:	2300      	movs	r3, #0
 8017b5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8017b60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8017b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8017b6c:	f107 030c 	add.w	r3, r7, #12
 8017b70:	2105      	movs	r1, #5
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7ea fc5e 	bl	8002434 <HAL_RCC_ClockConfig>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d001      	beq.n	8017b82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8017b7e:	f000 f827 	bl	8017bd0 <Error_Handler>
  }
}
 8017b82:	bf00      	nop
 8017b84:	3750      	adds	r7, #80	; 0x50
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	40023800 	.word	0x40023800
 8017b90:	40007000 	.word	0x40007000

08017b94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8017b94:	b580      	push	{r7, lr}
 8017b96:	b082      	sub	sp, #8
 8017b98:	af00      	add	r7, sp, #0
 8017b9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	4a09      	ldr	r2, [pc, #36]	; (8017bc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8017ba2:	4293      	cmp	r3, r2
 8017ba4:	d101      	bne.n	8017baa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8017ba6:	f7e8 fd2d 	bl	8000604 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim->Instance == TIM6) {
 8017baa:	687b      	ldr	r3, [r7, #4]
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	4a06      	ldr	r2, [pc, #24]	; (8017bc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d104      	bne.n	8017bbe <HAL_TIM_PeriodElapsedCallback+0x2a>
    MilliTimer++;
 8017bb4:	4b05      	ldr	r3, [pc, #20]	; (8017bcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	4a04      	ldr	r2, [pc, #16]	; (8017bcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8017bbc:	6013      	str	r3, [r2, #0]
  }

  /* USER CODE END Callback 1 */
}
 8017bbe:	bf00      	nop
 8017bc0:	3708      	adds	r7, #8
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	bd80      	pop	{r7, pc}
 8017bc6:	bf00      	nop
 8017bc8:	40001000 	.word	0x40001000
 8017bcc:	2000c528 	.word	0x2000c528

08017bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8017bd0:	b480      	push	{r7}
 8017bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8017bd4:	bf00      	nop
 8017bd6:	46bd      	mov	sp, r7
 8017bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bdc:	4770      	bx	lr
	...

08017be0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8017be0:	b580      	push	{r7, lr}
 8017be2:	b082      	sub	sp, #8
 8017be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017be6:	2300      	movs	r3, #0
 8017be8:	607b      	str	r3, [r7, #4]
 8017bea:	4b12      	ldr	r3, [pc, #72]	; (8017c34 <HAL_MspInit+0x54>)
 8017bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bee:	4a11      	ldr	r2, [pc, #68]	; (8017c34 <HAL_MspInit+0x54>)
 8017bf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8017bf6:	4b0f      	ldr	r3, [pc, #60]	; (8017c34 <HAL_MspInit+0x54>)
 8017bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017bfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017bfe:	607b      	str	r3, [r7, #4]
 8017c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8017c02:	2300      	movs	r3, #0
 8017c04:	603b      	str	r3, [r7, #0]
 8017c06:	4b0b      	ldr	r3, [pc, #44]	; (8017c34 <HAL_MspInit+0x54>)
 8017c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c0a:	4a0a      	ldr	r2, [pc, #40]	; (8017c34 <HAL_MspInit+0x54>)
 8017c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017c10:	6413      	str	r3, [r2, #64]	; 0x40
 8017c12:	4b08      	ldr	r3, [pc, #32]	; (8017c34 <HAL_MspInit+0x54>)
 8017c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8017c1a:	603b      	str	r3, [r7, #0]
 8017c1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8017c1e:	2200      	movs	r2, #0
 8017c20:	210f      	movs	r1, #15
 8017c22:	f06f 0001 	mvn.w	r0, #1
 8017c26:	f7e8 fde7 	bl	80007f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8017c2a:	bf00      	nop
 8017c2c:	3708      	adds	r7, #8
 8017c2e:	46bd      	mov	sp, r7
 8017c30:	bd80      	pop	{r7, pc}
 8017c32:	bf00      	nop
 8017c34:	40023800 	.word	0x40023800

08017c38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8017c38:	b580      	push	{r7, lr}
 8017c3a:	b08c      	sub	sp, #48	; 0x30
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8017c40:	2300      	movs	r3, #0
 8017c42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8017c44:	2300      	movs	r3, #0
 8017c46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8017c48:	2200      	movs	r2, #0
 8017c4a:	6879      	ldr	r1, [r7, #4]
 8017c4c:	2036      	movs	r0, #54	; 0x36
 8017c4e:	f7e8 fdd3 	bl	80007f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8017c52:	2036      	movs	r0, #54	; 0x36
 8017c54:	f7e8 fdec 	bl	8000830 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8017c58:	2300      	movs	r3, #0
 8017c5a:	60fb      	str	r3, [r7, #12]
 8017c5c:	4b1f      	ldr	r3, [pc, #124]	; (8017cdc <HAL_InitTick+0xa4>)
 8017c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c60:	4a1e      	ldr	r2, [pc, #120]	; (8017cdc <HAL_InitTick+0xa4>)
 8017c62:	f043 0310 	orr.w	r3, r3, #16
 8017c66:	6413      	str	r3, [r2, #64]	; 0x40
 8017c68:	4b1c      	ldr	r3, [pc, #112]	; (8017cdc <HAL_InitTick+0xa4>)
 8017c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017c6c:	f003 0310 	and.w	r3, r3, #16
 8017c70:	60fb      	str	r3, [r7, #12]
 8017c72:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017c74:	f107 0210 	add.w	r2, r7, #16
 8017c78:	f107 0314 	add.w	r3, r7, #20
 8017c7c:	4611      	mov	r1, r2
 8017c7e:	4618      	mov	r0, r3
 8017c80:	f7ea fdb6 	bl	80027f0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8017c84:	f7ea fda0 	bl	80027c8 <HAL_RCC_GetPCLK1Freq>
 8017c88:	4603      	mov	r3, r0
 8017c8a:	005b      	lsls	r3, r3, #1
 8017c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8017c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c90:	4a13      	ldr	r2, [pc, #76]	; (8017ce0 <HAL_InitTick+0xa8>)
 8017c92:	fba2 2303 	umull	r2, r3, r2, r3
 8017c96:	0c9b      	lsrs	r3, r3, #18
 8017c98:	3b01      	subs	r3, #1
 8017c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8017c9c:	4b11      	ldr	r3, [pc, #68]	; (8017ce4 <HAL_InitTick+0xac>)
 8017c9e:	4a12      	ldr	r2, [pc, #72]	; (8017ce8 <HAL_InitTick+0xb0>)
 8017ca0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8017ca2:	4b10      	ldr	r3, [pc, #64]	; (8017ce4 <HAL_InitTick+0xac>)
 8017ca4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8017ca8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8017caa:	4a0e      	ldr	r2, [pc, #56]	; (8017ce4 <HAL_InitTick+0xac>)
 8017cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017cae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8017cb0:	4b0c      	ldr	r3, [pc, #48]	; (8017ce4 <HAL_InitTick+0xac>)
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017cb6:	4b0b      	ldr	r3, [pc, #44]	; (8017ce4 <HAL_InitTick+0xac>)
 8017cb8:	2200      	movs	r2, #0
 8017cba:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8017cbc:	4809      	ldr	r0, [pc, #36]	; (8017ce4 <HAL_InitTick+0xac>)
 8017cbe:	f7ea fdc9 	bl	8002854 <HAL_TIM_Base_Init>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d104      	bne.n	8017cd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8017cc8:	4806      	ldr	r0, [pc, #24]	; (8017ce4 <HAL_InitTick+0xac>)
 8017cca:	f7ea fdf8 	bl	80028be <HAL_TIM_Base_Start_IT>
 8017cce:	4603      	mov	r3, r0
 8017cd0:	e000      	b.n	8017cd4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8017cd2:	2301      	movs	r3, #1
}
 8017cd4:	4618      	mov	r0, r3
 8017cd6:	3730      	adds	r7, #48	; 0x30
 8017cd8:	46bd      	mov	sp, r7
 8017cda:	bd80      	pop	{r7, pc}
 8017cdc:	40023800 	.word	0x40023800
 8017ce0:	431bde83 	.word	0x431bde83
 8017ce4:	2000fe6c 	.word	0x2000fe6c
 8017ce8:	40001000 	.word	0x40001000

08017cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8017cec:	b480      	push	{r7}
 8017cee:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8017cf0:	bf00      	nop
 8017cf2:	46bd      	mov	sp, r7
 8017cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cf8:	4770      	bx	lr

08017cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8017cfa:	b480      	push	{r7}
 8017cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8017cfe:	e7fe      	b.n	8017cfe <HardFault_Handler+0x4>

08017d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8017d00:	b480      	push	{r7}
 8017d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8017d04:	e7fe      	b.n	8017d04 <MemManage_Handler+0x4>

08017d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8017d06:	b480      	push	{r7}
 8017d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8017d0a:	e7fe      	b.n	8017d0a <BusFault_Handler+0x4>

08017d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8017d0c:	b480      	push	{r7}
 8017d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8017d10:	e7fe      	b.n	8017d10 <UsageFault_Handler+0x4>

08017d12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8017d12:	b480      	push	{r7}
 8017d14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8017d16:	bf00      	nop
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d1e:	4770      	bx	lr

08017d20 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8017d24:	4802      	ldr	r0, [pc, #8]	; (8017d30 <TIM6_DAC_IRQHandler+0x10>)
 8017d26:	f7ea fdee 	bl	8002906 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8017d2a:	bf00      	nop
 8017d2c:	bd80      	pop	{r7, pc}
 8017d2e:	bf00      	nop
 8017d30:	2000fe6c 	.word	0x2000fe6c

08017d34 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8017d34:	b580      	push	{r7, lr}
 8017d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8017d38:	4802      	ldr	r0, [pc, #8]	; (8017d44 <ETH_IRQHandler+0x10>)
 8017d3a:	f7e9 f96d 	bl	8001018 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8017d3e:	bf00      	nop
 8017d40:	bd80      	pop	{r7, pc}
 8017d42:	bf00      	nop
 8017d44:	2000ddfc 	.word	0x2000ddfc

08017d48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8017d48:	b580      	push	{r7, lr}
 8017d4a:	b086      	sub	sp, #24
 8017d4c:	af00      	add	r7, sp, #0
 8017d4e:	60f8      	str	r0, [r7, #12]
 8017d50:	60b9      	str	r1, [r7, #8]
 8017d52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d54:	2300      	movs	r3, #0
 8017d56:	617b      	str	r3, [r7, #20]
 8017d58:	e00a      	b.n	8017d70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8017d5a:	f3af 8000 	nop.w
 8017d5e:	4601      	mov	r1, r0
 8017d60:	68bb      	ldr	r3, [r7, #8]
 8017d62:	1c5a      	adds	r2, r3, #1
 8017d64:	60ba      	str	r2, [r7, #8]
 8017d66:	b2ca      	uxtb	r2, r1
 8017d68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	3301      	adds	r3, #1
 8017d6e:	617b      	str	r3, [r7, #20]
 8017d70:	697a      	ldr	r2, [r7, #20]
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	429a      	cmp	r2, r3
 8017d76:	dbf0      	blt.n	8017d5a <_read+0x12>
	}

return len;
 8017d78:	687b      	ldr	r3, [r7, #4]
}
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	3718      	adds	r7, #24
 8017d7e:	46bd      	mov	sp, r7
 8017d80:	bd80      	pop	{r7, pc}

08017d82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8017d82:	b480      	push	{r7}
 8017d84:	b083      	sub	sp, #12
 8017d86:	af00      	add	r7, sp, #0
 8017d88:	6078      	str	r0, [r7, #4]
	return -1;
 8017d8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	370c      	adds	r7, #12
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr

08017d9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8017d9a:	b480      	push	{r7}
 8017d9c:	b083      	sub	sp, #12
 8017d9e:	af00      	add	r7, sp, #0
 8017da0:	6078      	str	r0, [r7, #4]
 8017da2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8017da4:	683b      	ldr	r3, [r7, #0]
 8017da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017daa:	605a      	str	r2, [r3, #4]
	return 0;
 8017dac:	2300      	movs	r3, #0
}
 8017dae:	4618      	mov	r0, r3
 8017db0:	370c      	adds	r7, #12
 8017db2:	46bd      	mov	sp, r7
 8017db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017db8:	4770      	bx	lr

08017dba <_isatty>:

int _isatty(int file)
{
 8017dba:	b480      	push	{r7}
 8017dbc:	b083      	sub	sp, #12
 8017dbe:	af00      	add	r7, sp, #0
 8017dc0:	6078      	str	r0, [r7, #4]
	return 1;
 8017dc2:	2301      	movs	r3, #1
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr

08017dd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8017dd0:	b480      	push	{r7}
 8017dd2:	b085      	sub	sp, #20
 8017dd4:	af00      	add	r7, sp, #0
 8017dd6:	60f8      	str	r0, [r7, #12]
 8017dd8:	60b9      	str	r1, [r7, #8]
 8017dda:	607a      	str	r2, [r7, #4]
	return 0;
 8017ddc:	2300      	movs	r3, #0
}
 8017dde:	4618      	mov	r0, r3
 8017de0:	3714      	adds	r7, #20
 8017de2:	46bd      	mov	sp, r7
 8017de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017de8:	4770      	bx	lr
	...

08017dec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8017dec:	b480      	push	{r7}
 8017dee:	b085      	sub	sp, #20
 8017df0:	af00      	add	r7, sp, #0
 8017df2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8017df4:	4b11      	ldr	r3, [pc, #68]	; (8017e3c <_sbrk+0x50>)
 8017df6:	681b      	ldr	r3, [r3, #0]
 8017df8:	2b00      	cmp	r3, #0
 8017dfa:	d102      	bne.n	8017e02 <_sbrk+0x16>
		heap_end = &end;
 8017dfc:	4b0f      	ldr	r3, [pc, #60]	; (8017e3c <_sbrk+0x50>)
 8017dfe:	4a10      	ldr	r2, [pc, #64]	; (8017e40 <_sbrk+0x54>)
 8017e00:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8017e02:	4b0e      	ldr	r3, [pc, #56]	; (8017e3c <_sbrk+0x50>)
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8017e08:	4b0c      	ldr	r3, [pc, #48]	; (8017e3c <_sbrk+0x50>)
 8017e0a:	681a      	ldr	r2, [r3, #0]
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	4413      	add	r3, r2
 8017e10:	466a      	mov	r2, sp
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d905      	bls.n	8017e22 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8017e16:	4b0b      	ldr	r3, [pc, #44]	; (8017e44 <_sbrk+0x58>)
 8017e18:	220c      	movs	r2, #12
 8017e1a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8017e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8017e20:	e006      	b.n	8017e30 <_sbrk+0x44>
	}

	heap_end += incr;
 8017e22:	4b06      	ldr	r3, [pc, #24]	; (8017e3c <_sbrk+0x50>)
 8017e24:	681a      	ldr	r2, [r3, #0]
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	4413      	add	r3, r2
 8017e2a:	4a04      	ldr	r2, [pc, #16]	; (8017e3c <_sbrk+0x50>)
 8017e2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8017e2e:	68fb      	ldr	r3, [r7, #12]
}
 8017e30:	4618      	mov	r0, r3
 8017e32:	3714      	adds	r7, #20
 8017e34:	46bd      	mov	sp, r7
 8017e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e3a:	4770      	bx	lr
 8017e3c:	20008d54 	.word	0x20008d54
 8017e40:	2000feb0 	.word	0x2000feb0
 8017e44:	2000c520 	.word	0x2000c520

08017e48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8017e48:	b480      	push	{r7}
 8017e4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8017e4c:	4b08      	ldr	r3, [pc, #32]	; (8017e70 <SystemInit+0x28>)
 8017e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017e52:	4a07      	ldr	r2, [pc, #28]	; (8017e70 <SystemInit+0x28>)
 8017e54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8017e58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8017e5c:	4b04      	ldr	r3, [pc, #16]	; (8017e70 <SystemInit+0x28>)
 8017e5e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8017e62:	609a      	str	r2, [r3, #8]
#endif
}
 8017e64:	bf00      	nop
 8017e66:	46bd      	mov	sp, r7
 8017e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e6c:	4770      	bx	lr
 8017e6e:	bf00      	nop
 8017e70:	e000ed00 	.word	0xe000ed00

08017e74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8017e74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8017eac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8017e78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8017e7a:	e003      	b.n	8017e84 <LoopCopyDataInit>

08017e7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8017e7c:	4b0c      	ldr	r3, [pc, #48]	; (8017eb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8017e7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8017e80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8017e82:	3104      	adds	r1, #4

08017e84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8017e84:	480b      	ldr	r0, [pc, #44]	; (8017eb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8017e86:	4b0c      	ldr	r3, [pc, #48]	; (8017eb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8017e88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8017e8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8017e8c:	d3f6      	bcc.n	8017e7c <CopyDataInit>
  ldr  r2, =_sbss
 8017e8e:	4a0b      	ldr	r2, [pc, #44]	; (8017ebc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8017e90:	e002      	b.n	8017e98 <LoopFillZerobss>

08017e92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8017e92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8017e94:	f842 3b04 	str.w	r3, [r2], #4

08017e98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8017e98:	4b09      	ldr	r3, [pc, #36]	; (8017ec0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8017e9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8017e9c:	d3f9      	bcc.n	8017e92 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8017e9e:	f7ff ffd3 	bl	8017e48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8017ea2:	f000 f811 	bl	8017ec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8017ea6:	f7ff fdf9 	bl	8017a9c <main>
  bx  lr    
 8017eaa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8017eac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8017eb0:	0801ccf4 	.word	0x0801ccf4
  ldr  r0, =_sdata
 8017eb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8017eb8:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8017ebc:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8017ec0:	2000feac 	.word	0x2000feac

08017ec4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8017ec4:	e7fe      	b.n	8017ec4 <ADC_IRQHandler>
	...

08017ec8 <__libc_init_array>:
 8017ec8:	b570      	push	{r4, r5, r6, lr}
 8017eca:	4e0d      	ldr	r6, [pc, #52]	; (8017f00 <__libc_init_array+0x38>)
 8017ecc:	4c0d      	ldr	r4, [pc, #52]	; (8017f04 <__libc_init_array+0x3c>)
 8017ece:	1ba4      	subs	r4, r4, r6
 8017ed0:	10a4      	asrs	r4, r4, #2
 8017ed2:	2500      	movs	r5, #0
 8017ed4:	42a5      	cmp	r5, r4
 8017ed6:	d109      	bne.n	8017eec <__libc_init_array+0x24>
 8017ed8:	4e0b      	ldr	r6, [pc, #44]	; (8017f08 <__libc_init_array+0x40>)
 8017eda:	4c0c      	ldr	r4, [pc, #48]	; (8017f0c <__libc_init_array+0x44>)
 8017edc:	f000 fffe 	bl	8018edc <_init>
 8017ee0:	1ba4      	subs	r4, r4, r6
 8017ee2:	10a4      	asrs	r4, r4, #2
 8017ee4:	2500      	movs	r5, #0
 8017ee6:	42a5      	cmp	r5, r4
 8017ee8:	d105      	bne.n	8017ef6 <__libc_init_array+0x2e>
 8017eea:	bd70      	pop	{r4, r5, r6, pc}
 8017eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017ef0:	4798      	blx	r3
 8017ef2:	3501      	adds	r5, #1
 8017ef4:	e7ee      	b.n	8017ed4 <__libc_init_array+0xc>
 8017ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017efa:	4798      	blx	r3
 8017efc:	3501      	adds	r5, #1
 8017efe:	e7f2      	b.n	8017ee6 <__libc_init_array+0x1e>
 8017f00:	0801ccec 	.word	0x0801ccec
 8017f04:	0801ccec 	.word	0x0801ccec
 8017f08:	0801ccec 	.word	0x0801ccec
 8017f0c:	0801ccf0 	.word	0x0801ccf0

08017f10 <__locale_ctype_ptr>:
 8017f10:	4b04      	ldr	r3, [pc, #16]	; (8017f24 <__locale_ctype_ptr+0x14>)
 8017f12:	4a05      	ldr	r2, [pc, #20]	; (8017f28 <__locale_ctype_ptr+0x18>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	6a1b      	ldr	r3, [r3, #32]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	bf08      	it	eq
 8017f1c:	4613      	moveq	r3, r2
 8017f1e:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8017f22:	4770      	bx	lr
 8017f24:	20000020 	.word	0x20000020
 8017f28:	20000084 	.word	0x20000084

08017f2c <__ascii_mbtowc>:
 8017f2c:	b082      	sub	sp, #8
 8017f2e:	b901      	cbnz	r1, 8017f32 <__ascii_mbtowc+0x6>
 8017f30:	a901      	add	r1, sp, #4
 8017f32:	b142      	cbz	r2, 8017f46 <__ascii_mbtowc+0x1a>
 8017f34:	b14b      	cbz	r3, 8017f4a <__ascii_mbtowc+0x1e>
 8017f36:	7813      	ldrb	r3, [r2, #0]
 8017f38:	600b      	str	r3, [r1, #0]
 8017f3a:	7812      	ldrb	r2, [r2, #0]
 8017f3c:	1c10      	adds	r0, r2, #0
 8017f3e:	bf18      	it	ne
 8017f40:	2001      	movne	r0, #1
 8017f42:	b002      	add	sp, #8
 8017f44:	4770      	bx	lr
 8017f46:	4610      	mov	r0, r2
 8017f48:	e7fb      	b.n	8017f42 <__ascii_mbtowc+0x16>
 8017f4a:	f06f 0001 	mvn.w	r0, #1
 8017f4e:	e7f8      	b.n	8017f42 <__ascii_mbtowc+0x16>

08017f50 <memcmp>:
 8017f50:	b530      	push	{r4, r5, lr}
 8017f52:	2400      	movs	r4, #0
 8017f54:	42a2      	cmp	r2, r4
 8017f56:	d101      	bne.n	8017f5c <memcmp+0xc>
 8017f58:	2000      	movs	r0, #0
 8017f5a:	e007      	b.n	8017f6c <memcmp+0x1c>
 8017f5c:	5d03      	ldrb	r3, [r0, r4]
 8017f5e:	3401      	adds	r4, #1
 8017f60:	190d      	adds	r5, r1, r4
 8017f62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017f66:	42ab      	cmp	r3, r5
 8017f68:	d0f4      	beq.n	8017f54 <memcmp+0x4>
 8017f6a:	1b58      	subs	r0, r3, r5
 8017f6c:	bd30      	pop	{r4, r5, pc}

08017f6e <memcpy>:
 8017f6e:	b510      	push	{r4, lr}
 8017f70:	1e43      	subs	r3, r0, #1
 8017f72:	440a      	add	r2, r1
 8017f74:	4291      	cmp	r1, r2
 8017f76:	d100      	bne.n	8017f7a <memcpy+0xc>
 8017f78:	bd10      	pop	{r4, pc}
 8017f7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017f7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017f82:	e7f7      	b.n	8017f74 <memcpy+0x6>

08017f84 <memset>:
 8017f84:	4402      	add	r2, r0
 8017f86:	4603      	mov	r3, r0
 8017f88:	4293      	cmp	r3, r2
 8017f8a:	d100      	bne.n	8017f8e <memset+0xa>
 8017f8c:	4770      	bx	lr
 8017f8e:	f803 1b01 	strb.w	r1, [r3], #1
 8017f92:	e7f9      	b.n	8017f88 <memset+0x4>

08017f94 <iprintf>:
 8017f94:	b40f      	push	{r0, r1, r2, r3}
 8017f96:	4b0a      	ldr	r3, [pc, #40]	; (8017fc0 <iprintf+0x2c>)
 8017f98:	b513      	push	{r0, r1, r4, lr}
 8017f9a:	681c      	ldr	r4, [r3, #0]
 8017f9c:	b124      	cbz	r4, 8017fa8 <iprintf+0x14>
 8017f9e:	69a3      	ldr	r3, [r4, #24]
 8017fa0:	b913      	cbnz	r3, 8017fa8 <iprintf+0x14>
 8017fa2:	4620      	mov	r0, r4
 8017fa4:	f000 fa76 	bl	8018494 <__sinit>
 8017fa8:	ab05      	add	r3, sp, #20
 8017faa:	9a04      	ldr	r2, [sp, #16]
 8017fac:	68a1      	ldr	r1, [r4, #8]
 8017fae:	9301      	str	r3, [sp, #4]
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f000 fc37 	bl	8018824 <_vfiprintf_r>
 8017fb6:	b002      	add	sp, #8
 8017fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017fbc:	b004      	add	sp, #16
 8017fbe:	4770      	bx	lr
 8017fc0:	20000020 	.word	0x20000020

08017fc4 <_puts_r>:
 8017fc4:	b570      	push	{r4, r5, r6, lr}
 8017fc6:	460e      	mov	r6, r1
 8017fc8:	4605      	mov	r5, r0
 8017fca:	b118      	cbz	r0, 8017fd4 <_puts_r+0x10>
 8017fcc:	6983      	ldr	r3, [r0, #24]
 8017fce:	b90b      	cbnz	r3, 8017fd4 <_puts_r+0x10>
 8017fd0:	f000 fa60 	bl	8018494 <__sinit>
 8017fd4:	69ab      	ldr	r3, [r5, #24]
 8017fd6:	68ac      	ldr	r4, [r5, #8]
 8017fd8:	b913      	cbnz	r3, 8017fe0 <_puts_r+0x1c>
 8017fda:	4628      	mov	r0, r5
 8017fdc:	f000 fa5a 	bl	8018494 <__sinit>
 8017fe0:	4b23      	ldr	r3, [pc, #140]	; (8018070 <_puts_r+0xac>)
 8017fe2:	429c      	cmp	r4, r3
 8017fe4:	d117      	bne.n	8018016 <_puts_r+0x52>
 8017fe6:	686c      	ldr	r4, [r5, #4]
 8017fe8:	89a3      	ldrh	r3, [r4, #12]
 8017fea:	071b      	lsls	r3, r3, #28
 8017fec:	d51d      	bpl.n	801802a <_puts_r+0x66>
 8017fee:	6923      	ldr	r3, [r4, #16]
 8017ff0:	b1db      	cbz	r3, 801802a <_puts_r+0x66>
 8017ff2:	3e01      	subs	r6, #1
 8017ff4:	68a3      	ldr	r3, [r4, #8]
 8017ff6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8017ffa:	3b01      	subs	r3, #1
 8017ffc:	60a3      	str	r3, [r4, #8]
 8017ffe:	b9e9      	cbnz	r1, 801803c <_puts_r+0x78>
 8018000:	2b00      	cmp	r3, #0
 8018002:	da2e      	bge.n	8018062 <_puts_r+0x9e>
 8018004:	4622      	mov	r2, r4
 8018006:	210a      	movs	r1, #10
 8018008:	4628      	mov	r0, r5
 801800a:	f000 f885 	bl	8018118 <__swbuf_r>
 801800e:	3001      	adds	r0, #1
 8018010:	d011      	beq.n	8018036 <_puts_r+0x72>
 8018012:	200a      	movs	r0, #10
 8018014:	e011      	b.n	801803a <_puts_r+0x76>
 8018016:	4b17      	ldr	r3, [pc, #92]	; (8018074 <_puts_r+0xb0>)
 8018018:	429c      	cmp	r4, r3
 801801a:	d101      	bne.n	8018020 <_puts_r+0x5c>
 801801c:	68ac      	ldr	r4, [r5, #8]
 801801e:	e7e3      	b.n	8017fe8 <_puts_r+0x24>
 8018020:	4b15      	ldr	r3, [pc, #84]	; (8018078 <_puts_r+0xb4>)
 8018022:	429c      	cmp	r4, r3
 8018024:	bf08      	it	eq
 8018026:	68ec      	ldreq	r4, [r5, #12]
 8018028:	e7de      	b.n	8017fe8 <_puts_r+0x24>
 801802a:	4621      	mov	r1, r4
 801802c:	4628      	mov	r0, r5
 801802e:	f000 f8d3 	bl	80181d8 <__swsetup_r>
 8018032:	2800      	cmp	r0, #0
 8018034:	d0dd      	beq.n	8017ff2 <_puts_r+0x2e>
 8018036:	f04f 30ff 	mov.w	r0, #4294967295
 801803a:	bd70      	pop	{r4, r5, r6, pc}
 801803c:	2b00      	cmp	r3, #0
 801803e:	da04      	bge.n	801804a <_puts_r+0x86>
 8018040:	69a2      	ldr	r2, [r4, #24]
 8018042:	429a      	cmp	r2, r3
 8018044:	dc06      	bgt.n	8018054 <_puts_r+0x90>
 8018046:	290a      	cmp	r1, #10
 8018048:	d004      	beq.n	8018054 <_puts_r+0x90>
 801804a:	6823      	ldr	r3, [r4, #0]
 801804c:	1c5a      	adds	r2, r3, #1
 801804e:	6022      	str	r2, [r4, #0]
 8018050:	7019      	strb	r1, [r3, #0]
 8018052:	e7cf      	b.n	8017ff4 <_puts_r+0x30>
 8018054:	4622      	mov	r2, r4
 8018056:	4628      	mov	r0, r5
 8018058:	f000 f85e 	bl	8018118 <__swbuf_r>
 801805c:	3001      	adds	r0, #1
 801805e:	d1c9      	bne.n	8017ff4 <_puts_r+0x30>
 8018060:	e7e9      	b.n	8018036 <_puts_r+0x72>
 8018062:	6823      	ldr	r3, [r4, #0]
 8018064:	200a      	movs	r0, #10
 8018066:	1c5a      	adds	r2, r3, #1
 8018068:	6022      	str	r2, [r4, #0]
 801806a:	7018      	strb	r0, [r3, #0]
 801806c:	e7e5      	b.n	801803a <_puts_r+0x76>
 801806e:	bf00      	nop
 8018070:	0801cc70 	.word	0x0801cc70
 8018074:	0801cc90 	.word	0x0801cc90
 8018078:	0801cc50 	.word	0x0801cc50

0801807c <puts>:
 801807c:	4b02      	ldr	r3, [pc, #8]	; (8018088 <puts+0xc>)
 801807e:	4601      	mov	r1, r0
 8018080:	6818      	ldr	r0, [r3, #0]
 8018082:	f7ff bf9f 	b.w	8017fc4 <_puts_r>
 8018086:	bf00      	nop
 8018088:	20000020 	.word	0x20000020

0801808c <rand>:
 801808c:	b538      	push	{r3, r4, r5, lr}
 801808e:	4b13      	ldr	r3, [pc, #76]	; (80180dc <rand+0x50>)
 8018090:	681c      	ldr	r4, [r3, #0]
 8018092:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018094:	b97b      	cbnz	r3, 80180b6 <rand+0x2a>
 8018096:	2018      	movs	r0, #24
 8018098:	f000 faea 	bl	8018670 <malloc>
 801809c:	4a10      	ldr	r2, [pc, #64]	; (80180e0 <rand+0x54>)
 801809e:	4b11      	ldr	r3, [pc, #68]	; (80180e4 <rand+0x58>)
 80180a0:	63a0      	str	r0, [r4, #56]	; 0x38
 80180a2:	e9c0 2300 	strd	r2, r3, [r0]
 80180a6:	4b10      	ldr	r3, [pc, #64]	; (80180e8 <rand+0x5c>)
 80180a8:	6083      	str	r3, [r0, #8]
 80180aa:	230b      	movs	r3, #11
 80180ac:	8183      	strh	r3, [r0, #12]
 80180ae:	2201      	movs	r2, #1
 80180b0:	2300      	movs	r3, #0
 80180b2:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80180b6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80180b8:	480c      	ldr	r0, [pc, #48]	; (80180ec <rand+0x60>)
 80180ba:	690a      	ldr	r2, [r1, #16]
 80180bc:	694b      	ldr	r3, [r1, #20]
 80180be:	4c0c      	ldr	r4, [pc, #48]	; (80180f0 <rand+0x64>)
 80180c0:	4350      	muls	r0, r2
 80180c2:	fb04 0003 	mla	r0, r4, r3, r0
 80180c6:	fba2 2304 	umull	r2, r3, r2, r4
 80180ca:	4403      	add	r3, r0
 80180cc:	1c54      	adds	r4, r2, #1
 80180ce:	f143 0500 	adc.w	r5, r3, #0
 80180d2:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80180d6:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80180da:	bd38      	pop	{r3, r4, r5, pc}
 80180dc:	20000020 	.word	0x20000020
 80180e0:	abcd330e 	.word	0xabcd330e
 80180e4:	e66d1234 	.word	0xe66d1234
 80180e8:	0005deec 	.word	0x0005deec
 80180ec:	5851f42d 	.word	0x5851f42d
 80180f0:	4c957f2d 	.word	0x4c957f2d

080180f4 <strncmp>:
 80180f4:	b510      	push	{r4, lr}
 80180f6:	b16a      	cbz	r2, 8018114 <strncmp+0x20>
 80180f8:	3901      	subs	r1, #1
 80180fa:	1884      	adds	r4, r0, r2
 80180fc:	f810 3b01 	ldrb.w	r3, [r0], #1
 8018100:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8018104:	4293      	cmp	r3, r2
 8018106:	d103      	bne.n	8018110 <strncmp+0x1c>
 8018108:	42a0      	cmp	r0, r4
 801810a:	d001      	beq.n	8018110 <strncmp+0x1c>
 801810c:	2b00      	cmp	r3, #0
 801810e:	d1f5      	bne.n	80180fc <strncmp+0x8>
 8018110:	1a98      	subs	r0, r3, r2
 8018112:	bd10      	pop	{r4, pc}
 8018114:	4610      	mov	r0, r2
 8018116:	e7fc      	b.n	8018112 <strncmp+0x1e>

08018118 <__swbuf_r>:
 8018118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801811a:	460e      	mov	r6, r1
 801811c:	4614      	mov	r4, r2
 801811e:	4605      	mov	r5, r0
 8018120:	b118      	cbz	r0, 801812a <__swbuf_r+0x12>
 8018122:	6983      	ldr	r3, [r0, #24]
 8018124:	b90b      	cbnz	r3, 801812a <__swbuf_r+0x12>
 8018126:	f000 f9b5 	bl	8018494 <__sinit>
 801812a:	4b21      	ldr	r3, [pc, #132]	; (80181b0 <__swbuf_r+0x98>)
 801812c:	429c      	cmp	r4, r3
 801812e:	d12a      	bne.n	8018186 <__swbuf_r+0x6e>
 8018130:	686c      	ldr	r4, [r5, #4]
 8018132:	69a3      	ldr	r3, [r4, #24]
 8018134:	60a3      	str	r3, [r4, #8]
 8018136:	89a3      	ldrh	r3, [r4, #12]
 8018138:	071a      	lsls	r2, r3, #28
 801813a:	d52e      	bpl.n	801819a <__swbuf_r+0x82>
 801813c:	6923      	ldr	r3, [r4, #16]
 801813e:	b363      	cbz	r3, 801819a <__swbuf_r+0x82>
 8018140:	6923      	ldr	r3, [r4, #16]
 8018142:	6820      	ldr	r0, [r4, #0]
 8018144:	1ac0      	subs	r0, r0, r3
 8018146:	6963      	ldr	r3, [r4, #20]
 8018148:	b2f6      	uxtb	r6, r6
 801814a:	4283      	cmp	r3, r0
 801814c:	4637      	mov	r7, r6
 801814e:	dc04      	bgt.n	801815a <__swbuf_r+0x42>
 8018150:	4621      	mov	r1, r4
 8018152:	4628      	mov	r0, r5
 8018154:	f000 f934 	bl	80183c0 <_fflush_r>
 8018158:	bb28      	cbnz	r0, 80181a6 <__swbuf_r+0x8e>
 801815a:	68a3      	ldr	r3, [r4, #8]
 801815c:	3b01      	subs	r3, #1
 801815e:	60a3      	str	r3, [r4, #8]
 8018160:	6823      	ldr	r3, [r4, #0]
 8018162:	1c5a      	adds	r2, r3, #1
 8018164:	6022      	str	r2, [r4, #0]
 8018166:	701e      	strb	r6, [r3, #0]
 8018168:	6963      	ldr	r3, [r4, #20]
 801816a:	3001      	adds	r0, #1
 801816c:	4283      	cmp	r3, r0
 801816e:	d004      	beq.n	801817a <__swbuf_r+0x62>
 8018170:	89a3      	ldrh	r3, [r4, #12]
 8018172:	07db      	lsls	r3, r3, #31
 8018174:	d519      	bpl.n	80181aa <__swbuf_r+0x92>
 8018176:	2e0a      	cmp	r6, #10
 8018178:	d117      	bne.n	80181aa <__swbuf_r+0x92>
 801817a:	4621      	mov	r1, r4
 801817c:	4628      	mov	r0, r5
 801817e:	f000 f91f 	bl	80183c0 <_fflush_r>
 8018182:	b190      	cbz	r0, 80181aa <__swbuf_r+0x92>
 8018184:	e00f      	b.n	80181a6 <__swbuf_r+0x8e>
 8018186:	4b0b      	ldr	r3, [pc, #44]	; (80181b4 <__swbuf_r+0x9c>)
 8018188:	429c      	cmp	r4, r3
 801818a:	d101      	bne.n	8018190 <__swbuf_r+0x78>
 801818c:	68ac      	ldr	r4, [r5, #8]
 801818e:	e7d0      	b.n	8018132 <__swbuf_r+0x1a>
 8018190:	4b09      	ldr	r3, [pc, #36]	; (80181b8 <__swbuf_r+0xa0>)
 8018192:	429c      	cmp	r4, r3
 8018194:	bf08      	it	eq
 8018196:	68ec      	ldreq	r4, [r5, #12]
 8018198:	e7cb      	b.n	8018132 <__swbuf_r+0x1a>
 801819a:	4621      	mov	r1, r4
 801819c:	4628      	mov	r0, r5
 801819e:	f000 f81b 	bl	80181d8 <__swsetup_r>
 80181a2:	2800      	cmp	r0, #0
 80181a4:	d0cc      	beq.n	8018140 <__swbuf_r+0x28>
 80181a6:	f04f 37ff 	mov.w	r7, #4294967295
 80181aa:	4638      	mov	r0, r7
 80181ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181ae:	bf00      	nop
 80181b0:	0801cc70 	.word	0x0801cc70
 80181b4:	0801cc90 	.word	0x0801cc90
 80181b8:	0801cc50 	.word	0x0801cc50

080181bc <__ascii_wctomb>:
 80181bc:	b149      	cbz	r1, 80181d2 <__ascii_wctomb+0x16>
 80181be:	2aff      	cmp	r2, #255	; 0xff
 80181c0:	bf85      	ittet	hi
 80181c2:	238a      	movhi	r3, #138	; 0x8a
 80181c4:	6003      	strhi	r3, [r0, #0]
 80181c6:	700a      	strbls	r2, [r1, #0]
 80181c8:	f04f 30ff 	movhi.w	r0, #4294967295
 80181cc:	bf98      	it	ls
 80181ce:	2001      	movls	r0, #1
 80181d0:	4770      	bx	lr
 80181d2:	4608      	mov	r0, r1
 80181d4:	4770      	bx	lr
	...

080181d8 <__swsetup_r>:
 80181d8:	4b32      	ldr	r3, [pc, #200]	; (80182a4 <__swsetup_r+0xcc>)
 80181da:	b570      	push	{r4, r5, r6, lr}
 80181dc:	681d      	ldr	r5, [r3, #0]
 80181de:	4606      	mov	r6, r0
 80181e0:	460c      	mov	r4, r1
 80181e2:	b125      	cbz	r5, 80181ee <__swsetup_r+0x16>
 80181e4:	69ab      	ldr	r3, [r5, #24]
 80181e6:	b913      	cbnz	r3, 80181ee <__swsetup_r+0x16>
 80181e8:	4628      	mov	r0, r5
 80181ea:	f000 f953 	bl	8018494 <__sinit>
 80181ee:	4b2e      	ldr	r3, [pc, #184]	; (80182a8 <__swsetup_r+0xd0>)
 80181f0:	429c      	cmp	r4, r3
 80181f2:	d10f      	bne.n	8018214 <__swsetup_r+0x3c>
 80181f4:	686c      	ldr	r4, [r5, #4]
 80181f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80181fa:	b29a      	uxth	r2, r3
 80181fc:	0715      	lsls	r5, r2, #28
 80181fe:	d42c      	bmi.n	801825a <__swsetup_r+0x82>
 8018200:	06d0      	lsls	r0, r2, #27
 8018202:	d411      	bmi.n	8018228 <__swsetup_r+0x50>
 8018204:	2209      	movs	r2, #9
 8018206:	6032      	str	r2, [r6, #0]
 8018208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801820c:	81a3      	strh	r3, [r4, #12]
 801820e:	f04f 30ff 	mov.w	r0, #4294967295
 8018212:	e03e      	b.n	8018292 <__swsetup_r+0xba>
 8018214:	4b25      	ldr	r3, [pc, #148]	; (80182ac <__swsetup_r+0xd4>)
 8018216:	429c      	cmp	r4, r3
 8018218:	d101      	bne.n	801821e <__swsetup_r+0x46>
 801821a:	68ac      	ldr	r4, [r5, #8]
 801821c:	e7eb      	b.n	80181f6 <__swsetup_r+0x1e>
 801821e:	4b24      	ldr	r3, [pc, #144]	; (80182b0 <__swsetup_r+0xd8>)
 8018220:	429c      	cmp	r4, r3
 8018222:	bf08      	it	eq
 8018224:	68ec      	ldreq	r4, [r5, #12]
 8018226:	e7e6      	b.n	80181f6 <__swsetup_r+0x1e>
 8018228:	0751      	lsls	r1, r2, #29
 801822a:	d512      	bpl.n	8018252 <__swsetup_r+0x7a>
 801822c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801822e:	b141      	cbz	r1, 8018242 <__swsetup_r+0x6a>
 8018230:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018234:	4299      	cmp	r1, r3
 8018236:	d002      	beq.n	801823e <__swsetup_r+0x66>
 8018238:	4630      	mov	r0, r6
 801823a:	f000 fa21 	bl	8018680 <_free_r>
 801823e:	2300      	movs	r3, #0
 8018240:	6363      	str	r3, [r4, #52]	; 0x34
 8018242:	89a3      	ldrh	r3, [r4, #12]
 8018244:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018248:	81a3      	strh	r3, [r4, #12]
 801824a:	2300      	movs	r3, #0
 801824c:	6063      	str	r3, [r4, #4]
 801824e:	6923      	ldr	r3, [r4, #16]
 8018250:	6023      	str	r3, [r4, #0]
 8018252:	89a3      	ldrh	r3, [r4, #12]
 8018254:	f043 0308 	orr.w	r3, r3, #8
 8018258:	81a3      	strh	r3, [r4, #12]
 801825a:	6923      	ldr	r3, [r4, #16]
 801825c:	b94b      	cbnz	r3, 8018272 <__swsetup_r+0x9a>
 801825e:	89a3      	ldrh	r3, [r4, #12]
 8018260:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018268:	d003      	beq.n	8018272 <__swsetup_r+0x9a>
 801826a:	4621      	mov	r1, r4
 801826c:	4630      	mov	r0, r6
 801826e:	f000 f9bf 	bl	80185f0 <__smakebuf_r>
 8018272:	89a2      	ldrh	r2, [r4, #12]
 8018274:	f012 0301 	ands.w	r3, r2, #1
 8018278:	d00c      	beq.n	8018294 <__swsetup_r+0xbc>
 801827a:	2300      	movs	r3, #0
 801827c:	60a3      	str	r3, [r4, #8]
 801827e:	6963      	ldr	r3, [r4, #20]
 8018280:	425b      	negs	r3, r3
 8018282:	61a3      	str	r3, [r4, #24]
 8018284:	6923      	ldr	r3, [r4, #16]
 8018286:	b953      	cbnz	r3, 801829e <__swsetup_r+0xc6>
 8018288:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801828c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8018290:	d1ba      	bne.n	8018208 <__swsetup_r+0x30>
 8018292:	bd70      	pop	{r4, r5, r6, pc}
 8018294:	0792      	lsls	r2, r2, #30
 8018296:	bf58      	it	pl
 8018298:	6963      	ldrpl	r3, [r4, #20]
 801829a:	60a3      	str	r3, [r4, #8]
 801829c:	e7f2      	b.n	8018284 <__swsetup_r+0xac>
 801829e:	2000      	movs	r0, #0
 80182a0:	e7f7      	b.n	8018292 <__swsetup_r+0xba>
 80182a2:	bf00      	nop
 80182a4:	20000020 	.word	0x20000020
 80182a8:	0801cc70 	.word	0x0801cc70
 80182ac:	0801cc90 	.word	0x0801cc90
 80182b0:	0801cc50 	.word	0x0801cc50

080182b4 <__sflush_r>:
 80182b4:	898a      	ldrh	r2, [r1, #12]
 80182b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80182ba:	4605      	mov	r5, r0
 80182bc:	0710      	lsls	r0, r2, #28
 80182be:	460c      	mov	r4, r1
 80182c0:	d458      	bmi.n	8018374 <__sflush_r+0xc0>
 80182c2:	684b      	ldr	r3, [r1, #4]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	dc05      	bgt.n	80182d4 <__sflush_r+0x20>
 80182c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80182ca:	2b00      	cmp	r3, #0
 80182cc:	dc02      	bgt.n	80182d4 <__sflush_r+0x20>
 80182ce:	2000      	movs	r0, #0
 80182d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80182d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80182d6:	2e00      	cmp	r6, #0
 80182d8:	d0f9      	beq.n	80182ce <__sflush_r+0x1a>
 80182da:	2300      	movs	r3, #0
 80182dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80182e0:	682f      	ldr	r7, [r5, #0]
 80182e2:	6a21      	ldr	r1, [r4, #32]
 80182e4:	602b      	str	r3, [r5, #0]
 80182e6:	d032      	beq.n	801834e <__sflush_r+0x9a>
 80182e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80182ea:	89a3      	ldrh	r3, [r4, #12]
 80182ec:	075a      	lsls	r2, r3, #29
 80182ee:	d505      	bpl.n	80182fc <__sflush_r+0x48>
 80182f0:	6863      	ldr	r3, [r4, #4]
 80182f2:	1ac0      	subs	r0, r0, r3
 80182f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80182f6:	b10b      	cbz	r3, 80182fc <__sflush_r+0x48>
 80182f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80182fa:	1ac0      	subs	r0, r0, r3
 80182fc:	2300      	movs	r3, #0
 80182fe:	4602      	mov	r2, r0
 8018300:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018302:	6a21      	ldr	r1, [r4, #32]
 8018304:	4628      	mov	r0, r5
 8018306:	47b0      	blx	r6
 8018308:	1c43      	adds	r3, r0, #1
 801830a:	89a3      	ldrh	r3, [r4, #12]
 801830c:	d106      	bne.n	801831c <__sflush_r+0x68>
 801830e:	6829      	ldr	r1, [r5, #0]
 8018310:	291d      	cmp	r1, #29
 8018312:	d848      	bhi.n	80183a6 <__sflush_r+0xf2>
 8018314:	4a29      	ldr	r2, [pc, #164]	; (80183bc <__sflush_r+0x108>)
 8018316:	40ca      	lsrs	r2, r1
 8018318:	07d6      	lsls	r6, r2, #31
 801831a:	d544      	bpl.n	80183a6 <__sflush_r+0xf2>
 801831c:	2200      	movs	r2, #0
 801831e:	6062      	str	r2, [r4, #4]
 8018320:	04d9      	lsls	r1, r3, #19
 8018322:	6922      	ldr	r2, [r4, #16]
 8018324:	6022      	str	r2, [r4, #0]
 8018326:	d504      	bpl.n	8018332 <__sflush_r+0x7e>
 8018328:	1c42      	adds	r2, r0, #1
 801832a:	d101      	bne.n	8018330 <__sflush_r+0x7c>
 801832c:	682b      	ldr	r3, [r5, #0]
 801832e:	b903      	cbnz	r3, 8018332 <__sflush_r+0x7e>
 8018330:	6560      	str	r0, [r4, #84]	; 0x54
 8018332:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018334:	602f      	str	r7, [r5, #0]
 8018336:	2900      	cmp	r1, #0
 8018338:	d0c9      	beq.n	80182ce <__sflush_r+0x1a>
 801833a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801833e:	4299      	cmp	r1, r3
 8018340:	d002      	beq.n	8018348 <__sflush_r+0x94>
 8018342:	4628      	mov	r0, r5
 8018344:	f000 f99c 	bl	8018680 <_free_r>
 8018348:	2000      	movs	r0, #0
 801834a:	6360      	str	r0, [r4, #52]	; 0x34
 801834c:	e7c0      	b.n	80182d0 <__sflush_r+0x1c>
 801834e:	2301      	movs	r3, #1
 8018350:	4628      	mov	r0, r5
 8018352:	47b0      	blx	r6
 8018354:	1c41      	adds	r1, r0, #1
 8018356:	d1c8      	bne.n	80182ea <__sflush_r+0x36>
 8018358:	682b      	ldr	r3, [r5, #0]
 801835a:	2b00      	cmp	r3, #0
 801835c:	d0c5      	beq.n	80182ea <__sflush_r+0x36>
 801835e:	2b1d      	cmp	r3, #29
 8018360:	d001      	beq.n	8018366 <__sflush_r+0xb2>
 8018362:	2b16      	cmp	r3, #22
 8018364:	d101      	bne.n	801836a <__sflush_r+0xb6>
 8018366:	602f      	str	r7, [r5, #0]
 8018368:	e7b1      	b.n	80182ce <__sflush_r+0x1a>
 801836a:	89a3      	ldrh	r3, [r4, #12]
 801836c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018370:	81a3      	strh	r3, [r4, #12]
 8018372:	e7ad      	b.n	80182d0 <__sflush_r+0x1c>
 8018374:	690f      	ldr	r7, [r1, #16]
 8018376:	2f00      	cmp	r7, #0
 8018378:	d0a9      	beq.n	80182ce <__sflush_r+0x1a>
 801837a:	0793      	lsls	r3, r2, #30
 801837c:	680e      	ldr	r6, [r1, #0]
 801837e:	bf08      	it	eq
 8018380:	694b      	ldreq	r3, [r1, #20]
 8018382:	600f      	str	r7, [r1, #0]
 8018384:	bf18      	it	ne
 8018386:	2300      	movne	r3, #0
 8018388:	eba6 0807 	sub.w	r8, r6, r7
 801838c:	608b      	str	r3, [r1, #8]
 801838e:	f1b8 0f00 	cmp.w	r8, #0
 8018392:	dd9c      	ble.n	80182ce <__sflush_r+0x1a>
 8018394:	4643      	mov	r3, r8
 8018396:	463a      	mov	r2, r7
 8018398:	6a21      	ldr	r1, [r4, #32]
 801839a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801839c:	4628      	mov	r0, r5
 801839e:	47b0      	blx	r6
 80183a0:	2800      	cmp	r0, #0
 80183a2:	dc06      	bgt.n	80183b2 <__sflush_r+0xfe>
 80183a4:	89a3      	ldrh	r3, [r4, #12]
 80183a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80183aa:	81a3      	strh	r3, [r4, #12]
 80183ac:	f04f 30ff 	mov.w	r0, #4294967295
 80183b0:	e78e      	b.n	80182d0 <__sflush_r+0x1c>
 80183b2:	4407      	add	r7, r0
 80183b4:	eba8 0800 	sub.w	r8, r8, r0
 80183b8:	e7e9      	b.n	801838e <__sflush_r+0xda>
 80183ba:	bf00      	nop
 80183bc:	20400001 	.word	0x20400001

080183c0 <_fflush_r>:
 80183c0:	b538      	push	{r3, r4, r5, lr}
 80183c2:	690b      	ldr	r3, [r1, #16]
 80183c4:	4605      	mov	r5, r0
 80183c6:	460c      	mov	r4, r1
 80183c8:	b1db      	cbz	r3, 8018402 <_fflush_r+0x42>
 80183ca:	b118      	cbz	r0, 80183d4 <_fflush_r+0x14>
 80183cc:	6983      	ldr	r3, [r0, #24]
 80183ce:	b90b      	cbnz	r3, 80183d4 <_fflush_r+0x14>
 80183d0:	f000 f860 	bl	8018494 <__sinit>
 80183d4:	4b0c      	ldr	r3, [pc, #48]	; (8018408 <_fflush_r+0x48>)
 80183d6:	429c      	cmp	r4, r3
 80183d8:	d109      	bne.n	80183ee <_fflush_r+0x2e>
 80183da:	686c      	ldr	r4, [r5, #4]
 80183dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80183e0:	b17b      	cbz	r3, 8018402 <_fflush_r+0x42>
 80183e2:	4621      	mov	r1, r4
 80183e4:	4628      	mov	r0, r5
 80183e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183ea:	f7ff bf63 	b.w	80182b4 <__sflush_r>
 80183ee:	4b07      	ldr	r3, [pc, #28]	; (801840c <_fflush_r+0x4c>)
 80183f0:	429c      	cmp	r4, r3
 80183f2:	d101      	bne.n	80183f8 <_fflush_r+0x38>
 80183f4:	68ac      	ldr	r4, [r5, #8]
 80183f6:	e7f1      	b.n	80183dc <_fflush_r+0x1c>
 80183f8:	4b05      	ldr	r3, [pc, #20]	; (8018410 <_fflush_r+0x50>)
 80183fa:	429c      	cmp	r4, r3
 80183fc:	bf08      	it	eq
 80183fe:	68ec      	ldreq	r4, [r5, #12]
 8018400:	e7ec      	b.n	80183dc <_fflush_r+0x1c>
 8018402:	2000      	movs	r0, #0
 8018404:	bd38      	pop	{r3, r4, r5, pc}
 8018406:	bf00      	nop
 8018408:	0801cc70 	.word	0x0801cc70
 801840c:	0801cc90 	.word	0x0801cc90
 8018410:	0801cc50 	.word	0x0801cc50

08018414 <std>:
 8018414:	2300      	movs	r3, #0
 8018416:	b510      	push	{r4, lr}
 8018418:	4604      	mov	r4, r0
 801841a:	e9c0 3300 	strd	r3, r3, [r0]
 801841e:	6083      	str	r3, [r0, #8]
 8018420:	8181      	strh	r1, [r0, #12]
 8018422:	6643      	str	r3, [r0, #100]	; 0x64
 8018424:	81c2      	strh	r2, [r0, #14]
 8018426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801842a:	6183      	str	r3, [r0, #24]
 801842c:	4619      	mov	r1, r3
 801842e:	2208      	movs	r2, #8
 8018430:	305c      	adds	r0, #92	; 0x5c
 8018432:	f7ff fda7 	bl	8017f84 <memset>
 8018436:	4b05      	ldr	r3, [pc, #20]	; (801844c <std+0x38>)
 8018438:	6263      	str	r3, [r4, #36]	; 0x24
 801843a:	4b05      	ldr	r3, [pc, #20]	; (8018450 <std+0x3c>)
 801843c:	62a3      	str	r3, [r4, #40]	; 0x28
 801843e:	4b05      	ldr	r3, [pc, #20]	; (8018454 <std+0x40>)
 8018440:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018442:	4b05      	ldr	r3, [pc, #20]	; (8018458 <std+0x44>)
 8018444:	6224      	str	r4, [r4, #32]
 8018446:	6323      	str	r3, [r4, #48]	; 0x30
 8018448:	bd10      	pop	{r4, pc}
 801844a:	bf00      	nop
 801844c:	08018d81 	.word	0x08018d81
 8018450:	08018da3 	.word	0x08018da3
 8018454:	08018ddb 	.word	0x08018ddb
 8018458:	08018dff 	.word	0x08018dff

0801845c <_cleanup_r>:
 801845c:	4901      	ldr	r1, [pc, #4]	; (8018464 <_cleanup_r+0x8>)
 801845e:	f000 b885 	b.w	801856c <_fwalk_reent>
 8018462:	bf00      	nop
 8018464:	080183c1 	.word	0x080183c1

08018468 <__sfmoreglue>:
 8018468:	b570      	push	{r4, r5, r6, lr}
 801846a:	1e4a      	subs	r2, r1, #1
 801846c:	2568      	movs	r5, #104	; 0x68
 801846e:	4355      	muls	r5, r2
 8018470:	460e      	mov	r6, r1
 8018472:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018476:	f000 f951 	bl	801871c <_malloc_r>
 801847a:	4604      	mov	r4, r0
 801847c:	b140      	cbz	r0, 8018490 <__sfmoreglue+0x28>
 801847e:	2100      	movs	r1, #0
 8018480:	e9c0 1600 	strd	r1, r6, [r0]
 8018484:	300c      	adds	r0, #12
 8018486:	60a0      	str	r0, [r4, #8]
 8018488:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801848c:	f7ff fd7a 	bl	8017f84 <memset>
 8018490:	4620      	mov	r0, r4
 8018492:	bd70      	pop	{r4, r5, r6, pc}

08018494 <__sinit>:
 8018494:	6983      	ldr	r3, [r0, #24]
 8018496:	b510      	push	{r4, lr}
 8018498:	4604      	mov	r4, r0
 801849a:	bb33      	cbnz	r3, 80184ea <__sinit+0x56>
 801849c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80184a0:	6503      	str	r3, [r0, #80]	; 0x50
 80184a2:	4b12      	ldr	r3, [pc, #72]	; (80184ec <__sinit+0x58>)
 80184a4:	4a12      	ldr	r2, [pc, #72]	; (80184f0 <__sinit+0x5c>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	6282      	str	r2, [r0, #40]	; 0x28
 80184aa:	4298      	cmp	r0, r3
 80184ac:	bf04      	itt	eq
 80184ae:	2301      	moveq	r3, #1
 80184b0:	6183      	streq	r3, [r0, #24]
 80184b2:	f000 f81f 	bl	80184f4 <__sfp>
 80184b6:	6060      	str	r0, [r4, #4]
 80184b8:	4620      	mov	r0, r4
 80184ba:	f000 f81b 	bl	80184f4 <__sfp>
 80184be:	60a0      	str	r0, [r4, #8]
 80184c0:	4620      	mov	r0, r4
 80184c2:	f000 f817 	bl	80184f4 <__sfp>
 80184c6:	2200      	movs	r2, #0
 80184c8:	60e0      	str	r0, [r4, #12]
 80184ca:	2104      	movs	r1, #4
 80184cc:	6860      	ldr	r0, [r4, #4]
 80184ce:	f7ff ffa1 	bl	8018414 <std>
 80184d2:	2201      	movs	r2, #1
 80184d4:	2109      	movs	r1, #9
 80184d6:	68a0      	ldr	r0, [r4, #8]
 80184d8:	f7ff ff9c 	bl	8018414 <std>
 80184dc:	2202      	movs	r2, #2
 80184de:	2112      	movs	r1, #18
 80184e0:	68e0      	ldr	r0, [r4, #12]
 80184e2:	f7ff ff97 	bl	8018414 <std>
 80184e6:	2301      	movs	r3, #1
 80184e8:	61a3      	str	r3, [r4, #24]
 80184ea:	bd10      	pop	{r4, pc}
 80184ec:	0801cb40 	.word	0x0801cb40
 80184f0:	0801845d 	.word	0x0801845d

080184f4 <__sfp>:
 80184f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184f6:	4b1b      	ldr	r3, [pc, #108]	; (8018564 <__sfp+0x70>)
 80184f8:	681e      	ldr	r6, [r3, #0]
 80184fa:	69b3      	ldr	r3, [r6, #24]
 80184fc:	4607      	mov	r7, r0
 80184fe:	b913      	cbnz	r3, 8018506 <__sfp+0x12>
 8018500:	4630      	mov	r0, r6
 8018502:	f7ff ffc7 	bl	8018494 <__sinit>
 8018506:	3648      	adds	r6, #72	; 0x48
 8018508:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801850c:	3b01      	subs	r3, #1
 801850e:	d503      	bpl.n	8018518 <__sfp+0x24>
 8018510:	6833      	ldr	r3, [r6, #0]
 8018512:	b133      	cbz	r3, 8018522 <__sfp+0x2e>
 8018514:	6836      	ldr	r6, [r6, #0]
 8018516:	e7f7      	b.n	8018508 <__sfp+0x14>
 8018518:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801851c:	b16d      	cbz	r5, 801853a <__sfp+0x46>
 801851e:	3468      	adds	r4, #104	; 0x68
 8018520:	e7f4      	b.n	801850c <__sfp+0x18>
 8018522:	2104      	movs	r1, #4
 8018524:	4638      	mov	r0, r7
 8018526:	f7ff ff9f 	bl	8018468 <__sfmoreglue>
 801852a:	6030      	str	r0, [r6, #0]
 801852c:	2800      	cmp	r0, #0
 801852e:	d1f1      	bne.n	8018514 <__sfp+0x20>
 8018530:	230c      	movs	r3, #12
 8018532:	603b      	str	r3, [r7, #0]
 8018534:	4604      	mov	r4, r0
 8018536:	4620      	mov	r0, r4
 8018538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801853a:	4b0b      	ldr	r3, [pc, #44]	; (8018568 <__sfp+0x74>)
 801853c:	6665      	str	r5, [r4, #100]	; 0x64
 801853e:	e9c4 5500 	strd	r5, r5, [r4]
 8018542:	60a5      	str	r5, [r4, #8]
 8018544:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018548:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801854c:	2208      	movs	r2, #8
 801854e:	4629      	mov	r1, r5
 8018550:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018554:	f7ff fd16 	bl	8017f84 <memset>
 8018558:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801855c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018560:	e7e9      	b.n	8018536 <__sfp+0x42>
 8018562:	bf00      	nop
 8018564:	0801cb40 	.word	0x0801cb40
 8018568:	ffff0001 	.word	0xffff0001

0801856c <_fwalk_reent>:
 801856c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018570:	4680      	mov	r8, r0
 8018572:	4689      	mov	r9, r1
 8018574:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018578:	2600      	movs	r6, #0
 801857a:	b914      	cbnz	r4, 8018582 <_fwalk_reent+0x16>
 801857c:	4630      	mov	r0, r6
 801857e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018582:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018586:	3f01      	subs	r7, #1
 8018588:	d501      	bpl.n	801858e <_fwalk_reent+0x22>
 801858a:	6824      	ldr	r4, [r4, #0]
 801858c:	e7f5      	b.n	801857a <_fwalk_reent+0xe>
 801858e:	89ab      	ldrh	r3, [r5, #12]
 8018590:	2b01      	cmp	r3, #1
 8018592:	d907      	bls.n	80185a4 <_fwalk_reent+0x38>
 8018594:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018598:	3301      	adds	r3, #1
 801859a:	d003      	beq.n	80185a4 <_fwalk_reent+0x38>
 801859c:	4629      	mov	r1, r5
 801859e:	4640      	mov	r0, r8
 80185a0:	47c8      	blx	r9
 80185a2:	4306      	orrs	r6, r0
 80185a4:	3568      	adds	r5, #104	; 0x68
 80185a6:	e7ee      	b.n	8018586 <_fwalk_reent+0x1a>

080185a8 <__swhatbuf_r>:
 80185a8:	b570      	push	{r4, r5, r6, lr}
 80185aa:	460e      	mov	r6, r1
 80185ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80185b0:	2900      	cmp	r1, #0
 80185b2:	b096      	sub	sp, #88	; 0x58
 80185b4:	4614      	mov	r4, r2
 80185b6:	461d      	mov	r5, r3
 80185b8:	da07      	bge.n	80185ca <__swhatbuf_r+0x22>
 80185ba:	2300      	movs	r3, #0
 80185bc:	602b      	str	r3, [r5, #0]
 80185be:	89b3      	ldrh	r3, [r6, #12]
 80185c0:	061a      	lsls	r2, r3, #24
 80185c2:	d410      	bmi.n	80185e6 <__swhatbuf_r+0x3e>
 80185c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80185c8:	e00e      	b.n	80185e8 <__swhatbuf_r+0x40>
 80185ca:	466a      	mov	r2, sp
 80185cc:	f000 fc3e 	bl	8018e4c <_fstat_r>
 80185d0:	2800      	cmp	r0, #0
 80185d2:	dbf2      	blt.n	80185ba <__swhatbuf_r+0x12>
 80185d4:	9a01      	ldr	r2, [sp, #4]
 80185d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80185da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80185de:	425a      	negs	r2, r3
 80185e0:	415a      	adcs	r2, r3
 80185e2:	602a      	str	r2, [r5, #0]
 80185e4:	e7ee      	b.n	80185c4 <__swhatbuf_r+0x1c>
 80185e6:	2340      	movs	r3, #64	; 0x40
 80185e8:	2000      	movs	r0, #0
 80185ea:	6023      	str	r3, [r4, #0]
 80185ec:	b016      	add	sp, #88	; 0x58
 80185ee:	bd70      	pop	{r4, r5, r6, pc}

080185f0 <__smakebuf_r>:
 80185f0:	898b      	ldrh	r3, [r1, #12]
 80185f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80185f4:	079d      	lsls	r5, r3, #30
 80185f6:	4606      	mov	r6, r0
 80185f8:	460c      	mov	r4, r1
 80185fa:	d507      	bpl.n	801860c <__smakebuf_r+0x1c>
 80185fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018600:	6023      	str	r3, [r4, #0]
 8018602:	6123      	str	r3, [r4, #16]
 8018604:	2301      	movs	r3, #1
 8018606:	6163      	str	r3, [r4, #20]
 8018608:	b002      	add	sp, #8
 801860a:	bd70      	pop	{r4, r5, r6, pc}
 801860c:	ab01      	add	r3, sp, #4
 801860e:	466a      	mov	r2, sp
 8018610:	f7ff ffca 	bl	80185a8 <__swhatbuf_r>
 8018614:	9900      	ldr	r1, [sp, #0]
 8018616:	4605      	mov	r5, r0
 8018618:	4630      	mov	r0, r6
 801861a:	f000 f87f 	bl	801871c <_malloc_r>
 801861e:	b948      	cbnz	r0, 8018634 <__smakebuf_r+0x44>
 8018620:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018624:	059a      	lsls	r2, r3, #22
 8018626:	d4ef      	bmi.n	8018608 <__smakebuf_r+0x18>
 8018628:	f023 0303 	bic.w	r3, r3, #3
 801862c:	f043 0302 	orr.w	r3, r3, #2
 8018630:	81a3      	strh	r3, [r4, #12]
 8018632:	e7e3      	b.n	80185fc <__smakebuf_r+0xc>
 8018634:	4b0d      	ldr	r3, [pc, #52]	; (801866c <__smakebuf_r+0x7c>)
 8018636:	62b3      	str	r3, [r6, #40]	; 0x28
 8018638:	89a3      	ldrh	r3, [r4, #12]
 801863a:	6020      	str	r0, [r4, #0]
 801863c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018640:	81a3      	strh	r3, [r4, #12]
 8018642:	9b00      	ldr	r3, [sp, #0]
 8018644:	6163      	str	r3, [r4, #20]
 8018646:	9b01      	ldr	r3, [sp, #4]
 8018648:	6120      	str	r0, [r4, #16]
 801864a:	b15b      	cbz	r3, 8018664 <__smakebuf_r+0x74>
 801864c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018650:	4630      	mov	r0, r6
 8018652:	f000 fc0d 	bl	8018e70 <_isatty_r>
 8018656:	b128      	cbz	r0, 8018664 <__smakebuf_r+0x74>
 8018658:	89a3      	ldrh	r3, [r4, #12]
 801865a:	f023 0303 	bic.w	r3, r3, #3
 801865e:	f043 0301 	orr.w	r3, r3, #1
 8018662:	81a3      	strh	r3, [r4, #12]
 8018664:	89a3      	ldrh	r3, [r4, #12]
 8018666:	431d      	orrs	r5, r3
 8018668:	81a5      	strh	r5, [r4, #12]
 801866a:	e7cd      	b.n	8018608 <__smakebuf_r+0x18>
 801866c:	0801845d 	.word	0x0801845d

08018670 <malloc>:
 8018670:	4b02      	ldr	r3, [pc, #8]	; (801867c <malloc+0xc>)
 8018672:	4601      	mov	r1, r0
 8018674:	6818      	ldr	r0, [r3, #0]
 8018676:	f000 b851 	b.w	801871c <_malloc_r>
 801867a:	bf00      	nop
 801867c:	20000020 	.word	0x20000020

08018680 <_free_r>:
 8018680:	b538      	push	{r3, r4, r5, lr}
 8018682:	4605      	mov	r5, r0
 8018684:	2900      	cmp	r1, #0
 8018686:	d045      	beq.n	8018714 <_free_r+0x94>
 8018688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801868c:	1f0c      	subs	r4, r1, #4
 801868e:	2b00      	cmp	r3, #0
 8018690:	bfb8      	it	lt
 8018692:	18e4      	addlt	r4, r4, r3
 8018694:	f000 fc0e 	bl	8018eb4 <__malloc_lock>
 8018698:	4a1f      	ldr	r2, [pc, #124]	; (8018718 <_free_r+0x98>)
 801869a:	6813      	ldr	r3, [r2, #0]
 801869c:	4610      	mov	r0, r2
 801869e:	b933      	cbnz	r3, 80186ae <_free_r+0x2e>
 80186a0:	6063      	str	r3, [r4, #4]
 80186a2:	6014      	str	r4, [r2, #0]
 80186a4:	4628      	mov	r0, r5
 80186a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80186aa:	f000 bc04 	b.w	8018eb6 <__malloc_unlock>
 80186ae:	42a3      	cmp	r3, r4
 80186b0:	d90c      	bls.n	80186cc <_free_r+0x4c>
 80186b2:	6821      	ldr	r1, [r4, #0]
 80186b4:	1862      	adds	r2, r4, r1
 80186b6:	4293      	cmp	r3, r2
 80186b8:	bf04      	itt	eq
 80186ba:	681a      	ldreq	r2, [r3, #0]
 80186bc:	685b      	ldreq	r3, [r3, #4]
 80186be:	6063      	str	r3, [r4, #4]
 80186c0:	bf04      	itt	eq
 80186c2:	1852      	addeq	r2, r2, r1
 80186c4:	6022      	streq	r2, [r4, #0]
 80186c6:	6004      	str	r4, [r0, #0]
 80186c8:	e7ec      	b.n	80186a4 <_free_r+0x24>
 80186ca:	4613      	mov	r3, r2
 80186cc:	685a      	ldr	r2, [r3, #4]
 80186ce:	b10a      	cbz	r2, 80186d4 <_free_r+0x54>
 80186d0:	42a2      	cmp	r2, r4
 80186d2:	d9fa      	bls.n	80186ca <_free_r+0x4a>
 80186d4:	6819      	ldr	r1, [r3, #0]
 80186d6:	1858      	adds	r0, r3, r1
 80186d8:	42a0      	cmp	r0, r4
 80186da:	d10b      	bne.n	80186f4 <_free_r+0x74>
 80186dc:	6820      	ldr	r0, [r4, #0]
 80186de:	4401      	add	r1, r0
 80186e0:	1858      	adds	r0, r3, r1
 80186e2:	4282      	cmp	r2, r0
 80186e4:	6019      	str	r1, [r3, #0]
 80186e6:	d1dd      	bne.n	80186a4 <_free_r+0x24>
 80186e8:	6810      	ldr	r0, [r2, #0]
 80186ea:	6852      	ldr	r2, [r2, #4]
 80186ec:	605a      	str	r2, [r3, #4]
 80186ee:	4401      	add	r1, r0
 80186f0:	6019      	str	r1, [r3, #0]
 80186f2:	e7d7      	b.n	80186a4 <_free_r+0x24>
 80186f4:	d902      	bls.n	80186fc <_free_r+0x7c>
 80186f6:	230c      	movs	r3, #12
 80186f8:	602b      	str	r3, [r5, #0]
 80186fa:	e7d3      	b.n	80186a4 <_free_r+0x24>
 80186fc:	6820      	ldr	r0, [r4, #0]
 80186fe:	1821      	adds	r1, r4, r0
 8018700:	428a      	cmp	r2, r1
 8018702:	bf04      	itt	eq
 8018704:	6811      	ldreq	r1, [r2, #0]
 8018706:	6852      	ldreq	r2, [r2, #4]
 8018708:	6062      	str	r2, [r4, #4]
 801870a:	bf04      	itt	eq
 801870c:	1809      	addeq	r1, r1, r0
 801870e:	6021      	streq	r1, [r4, #0]
 8018710:	605c      	str	r4, [r3, #4]
 8018712:	e7c7      	b.n	80186a4 <_free_r+0x24>
 8018714:	bd38      	pop	{r3, r4, r5, pc}
 8018716:	bf00      	nop
 8018718:	20008d58 	.word	0x20008d58

0801871c <_malloc_r>:
 801871c:	b570      	push	{r4, r5, r6, lr}
 801871e:	1ccd      	adds	r5, r1, #3
 8018720:	f025 0503 	bic.w	r5, r5, #3
 8018724:	3508      	adds	r5, #8
 8018726:	2d0c      	cmp	r5, #12
 8018728:	bf38      	it	cc
 801872a:	250c      	movcc	r5, #12
 801872c:	2d00      	cmp	r5, #0
 801872e:	4606      	mov	r6, r0
 8018730:	db01      	blt.n	8018736 <_malloc_r+0x1a>
 8018732:	42a9      	cmp	r1, r5
 8018734:	d903      	bls.n	801873e <_malloc_r+0x22>
 8018736:	230c      	movs	r3, #12
 8018738:	6033      	str	r3, [r6, #0]
 801873a:	2000      	movs	r0, #0
 801873c:	bd70      	pop	{r4, r5, r6, pc}
 801873e:	f000 fbb9 	bl	8018eb4 <__malloc_lock>
 8018742:	4a21      	ldr	r2, [pc, #132]	; (80187c8 <_malloc_r+0xac>)
 8018744:	6814      	ldr	r4, [r2, #0]
 8018746:	4621      	mov	r1, r4
 8018748:	b991      	cbnz	r1, 8018770 <_malloc_r+0x54>
 801874a:	4c20      	ldr	r4, [pc, #128]	; (80187cc <_malloc_r+0xb0>)
 801874c:	6823      	ldr	r3, [r4, #0]
 801874e:	b91b      	cbnz	r3, 8018758 <_malloc_r+0x3c>
 8018750:	4630      	mov	r0, r6
 8018752:	f000 fb05 	bl	8018d60 <_sbrk_r>
 8018756:	6020      	str	r0, [r4, #0]
 8018758:	4629      	mov	r1, r5
 801875a:	4630      	mov	r0, r6
 801875c:	f000 fb00 	bl	8018d60 <_sbrk_r>
 8018760:	1c43      	adds	r3, r0, #1
 8018762:	d124      	bne.n	80187ae <_malloc_r+0x92>
 8018764:	230c      	movs	r3, #12
 8018766:	6033      	str	r3, [r6, #0]
 8018768:	4630      	mov	r0, r6
 801876a:	f000 fba4 	bl	8018eb6 <__malloc_unlock>
 801876e:	e7e4      	b.n	801873a <_malloc_r+0x1e>
 8018770:	680b      	ldr	r3, [r1, #0]
 8018772:	1b5b      	subs	r3, r3, r5
 8018774:	d418      	bmi.n	80187a8 <_malloc_r+0x8c>
 8018776:	2b0b      	cmp	r3, #11
 8018778:	d90f      	bls.n	801879a <_malloc_r+0x7e>
 801877a:	600b      	str	r3, [r1, #0]
 801877c:	50cd      	str	r5, [r1, r3]
 801877e:	18cc      	adds	r4, r1, r3
 8018780:	4630      	mov	r0, r6
 8018782:	f000 fb98 	bl	8018eb6 <__malloc_unlock>
 8018786:	f104 000b 	add.w	r0, r4, #11
 801878a:	1d23      	adds	r3, r4, #4
 801878c:	f020 0007 	bic.w	r0, r0, #7
 8018790:	1ac3      	subs	r3, r0, r3
 8018792:	d0d3      	beq.n	801873c <_malloc_r+0x20>
 8018794:	425a      	negs	r2, r3
 8018796:	50e2      	str	r2, [r4, r3]
 8018798:	e7d0      	b.n	801873c <_malloc_r+0x20>
 801879a:	428c      	cmp	r4, r1
 801879c:	684b      	ldr	r3, [r1, #4]
 801879e:	bf16      	itet	ne
 80187a0:	6063      	strne	r3, [r4, #4]
 80187a2:	6013      	streq	r3, [r2, #0]
 80187a4:	460c      	movne	r4, r1
 80187a6:	e7eb      	b.n	8018780 <_malloc_r+0x64>
 80187a8:	460c      	mov	r4, r1
 80187aa:	6849      	ldr	r1, [r1, #4]
 80187ac:	e7cc      	b.n	8018748 <_malloc_r+0x2c>
 80187ae:	1cc4      	adds	r4, r0, #3
 80187b0:	f024 0403 	bic.w	r4, r4, #3
 80187b4:	42a0      	cmp	r0, r4
 80187b6:	d005      	beq.n	80187c4 <_malloc_r+0xa8>
 80187b8:	1a21      	subs	r1, r4, r0
 80187ba:	4630      	mov	r0, r6
 80187bc:	f000 fad0 	bl	8018d60 <_sbrk_r>
 80187c0:	3001      	adds	r0, #1
 80187c2:	d0cf      	beq.n	8018764 <_malloc_r+0x48>
 80187c4:	6025      	str	r5, [r4, #0]
 80187c6:	e7db      	b.n	8018780 <_malloc_r+0x64>
 80187c8:	20008d58 	.word	0x20008d58
 80187cc:	20008d5c 	.word	0x20008d5c

080187d0 <__sfputc_r>:
 80187d0:	6893      	ldr	r3, [r2, #8]
 80187d2:	3b01      	subs	r3, #1
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	b410      	push	{r4}
 80187d8:	6093      	str	r3, [r2, #8]
 80187da:	da08      	bge.n	80187ee <__sfputc_r+0x1e>
 80187dc:	6994      	ldr	r4, [r2, #24]
 80187de:	42a3      	cmp	r3, r4
 80187e0:	db01      	blt.n	80187e6 <__sfputc_r+0x16>
 80187e2:	290a      	cmp	r1, #10
 80187e4:	d103      	bne.n	80187ee <__sfputc_r+0x1e>
 80187e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187ea:	f7ff bc95 	b.w	8018118 <__swbuf_r>
 80187ee:	6813      	ldr	r3, [r2, #0]
 80187f0:	1c58      	adds	r0, r3, #1
 80187f2:	6010      	str	r0, [r2, #0]
 80187f4:	7019      	strb	r1, [r3, #0]
 80187f6:	4608      	mov	r0, r1
 80187f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80187fc:	4770      	bx	lr

080187fe <__sfputs_r>:
 80187fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018800:	4606      	mov	r6, r0
 8018802:	460f      	mov	r7, r1
 8018804:	4614      	mov	r4, r2
 8018806:	18d5      	adds	r5, r2, r3
 8018808:	42ac      	cmp	r4, r5
 801880a:	d101      	bne.n	8018810 <__sfputs_r+0x12>
 801880c:	2000      	movs	r0, #0
 801880e:	e007      	b.n	8018820 <__sfputs_r+0x22>
 8018810:	463a      	mov	r2, r7
 8018812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018816:	4630      	mov	r0, r6
 8018818:	f7ff ffda 	bl	80187d0 <__sfputc_r>
 801881c:	1c43      	adds	r3, r0, #1
 801881e:	d1f3      	bne.n	8018808 <__sfputs_r+0xa>
 8018820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018824 <_vfiprintf_r>:
 8018824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018828:	460c      	mov	r4, r1
 801882a:	b09d      	sub	sp, #116	; 0x74
 801882c:	4617      	mov	r7, r2
 801882e:	461d      	mov	r5, r3
 8018830:	4606      	mov	r6, r0
 8018832:	b118      	cbz	r0, 801883c <_vfiprintf_r+0x18>
 8018834:	6983      	ldr	r3, [r0, #24]
 8018836:	b90b      	cbnz	r3, 801883c <_vfiprintf_r+0x18>
 8018838:	f7ff fe2c 	bl	8018494 <__sinit>
 801883c:	4b7c      	ldr	r3, [pc, #496]	; (8018a30 <_vfiprintf_r+0x20c>)
 801883e:	429c      	cmp	r4, r3
 8018840:	d158      	bne.n	80188f4 <_vfiprintf_r+0xd0>
 8018842:	6874      	ldr	r4, [r6, #4]
 8018844:	89a3      	ldrh	r3, [r4, #12]
 8018846:	0718      	lsls	r0, r3, #28
 8018848:	d55e      	bpl.n	8018908 <_vfiprintf_r+0xe4>
 801884a:	6923      	ldr	r3, [r4, #16]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d05b      	beq.n	8018908 <_vfiprintf_r+0xe4>
 8018850:	2300      	movs	r3, #0
 8018852:	9309      	str	r3, [sp, #36]	; 0x24
 8018854:	2320      	movs	r3, #32
 8018856:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801885a:	2330      	movs	r3, #48	; 0x30
 801885c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018860:	9503      	str	r5, [sp, #12]
 8018862:	f04f 0b01 	mov.w	fp, #1
 8018866:	46b8      	mov	r8, r7
 8018868:	4645      	mov	r5, r8
 801886a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801886e:	b10b      	cbz	r3, 8018874 <_vfiprintf_r+0x50>
 8018870:	2b25      	cmp	r3, #37	; 0x25
 8018872:	d154      	bne.n	801891e <_vfiprintf_r+0xfa>
 8018874:	ebb8 0a07 	subs.w	sl, r8, r7
 8018878:	d00b      	beq.n	8018892 <_vfiprintf_r+0x6e>
 801887a:	4653      	mov	r3, sl
 801887c:	463a      	mov	r2, r7
 801887e:	4621      	mov	r1, r4
 8018880:	4630      	mov	r0, r6
 8018882:	f7ff ffbc 	bl	80187fe <__sfputs_r>
 8018886:	3001      	adds	r0, #1
 8018888:	f000 80c2 	beq.w	8018a10 <_vfiprintf_r+0x1ec>
 801888c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801888e:	4453      	add	r3, sl
 8018890:	9309      	str	r3, [sp, #36]	; 0x24
 8018892:	f898 3000 	ldrb.w	r3, [r8]
 8018896:	2b00      	cmp	r3, #0
 8018898:	f000 80ba 	beq.w	8018a10 <_vfiprintf_r+0x1ec>
 801889c:	2300      	movs	r3, #0
 801889e:	f04f 32ff 	mov.w	r2, #4294967295
 80188a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80188a6:	9304      	str	r3, [sp, #16]
 80188a8:	9307      	str	r3, [sp, #28]
 80188aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80188ae:	931a      	str	r3, [sp, #104]	; 0x68
 80188b0:	46a8      	mov	r8, r5
 80188b2:	2205      	movs	r2, #5
 80188b4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80188b8:	485e      	ldr	r0, [pc, #376]	; (8018a34 <_vfiprintf_r+0x210>)
 80188ba:	f7e7 fcb1 	bl	8000220 <memchr>
 80188be:	9b04      	ldr	r3, [sp, #16]
 80188c0:	bb78      	cbnz	r0, 8018922 <_vfiprintf_r+0xfe>
 80188c2:	06d9      	lsls	r1, r3, #27
 80188c4:	bf44      	itt	mi
 80188c6:	2220      	movmi	r2, #32
 80188c8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80188cc:	071a      	lsls	r2, r3, #28
 80188ce:	bf44      	itt	mi
 80188d0:	222b      	movmi	r2, #43	; 0x2b
 80188d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80188d6:	782a      	ldrb	r2, [r5, #0]
 80188d8:	2a2a      	cmp	r2, #42	; 0x2a
 80188da:	d02a      	beq.n	8018932 <_vfiprintf_r+0x10e>
 80188dc:	9a07      	ldr	r2, [sp, #28]
 80188de:	46a8      	mov	r8, r5
 80188e0:	2000      	movs	r0, #0
 80188e2:	250a      	movs	r5, #10
 80188e4:	4641      	mov	r1, r8
 80188e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80188ea:	3b30      	subs	r3, #48	; 0x30
 80188ec:	2b09      	cmp	r3, #9
 80188ee:	d969      	bls.n	80189c4 <_vfiprintf_r+0x1a0>
 80188f0:	b360      	cbz	r0, 801894c <_vfiprintf_r+0x128>
 80188f2:	e024      	b.n	801893e <_vfiprintf_r+0x11a>
 80188f4:	4b50      	ldr	r3, [pc, #320]	; (8018a38 <_vfiprintf_r+0x214>)
 80188f6:	429c      	cmp	r4, r3
 80188f8:	d101      	bne.n	80188fe <_vfiprintf_r+0xda>
 80188fa:	68b4      	ldr	r4, [r6, #8]
 80188fc:	e7a2      	b.n	8018844 <_vfiprintf_r+0x20>
 80188fe:	4b4f      	ldr	r3, [pc, #316]	; (8018a3c <_vfiprintf_r+0x218>)
 8018900:	429c      	cmp	r4, r3
 8018902:	bf08      	it	eq
 8018904:	68f4      	ldreq	r4, [r6, #12]
 8018906:	e79d      	b.n	8018844 <_vfiprintf_r+0x20>
 8018908:	4621      	mov	r1, r4
 801890a:	4630      	mov	r0, r6
 801890c:	f7ff fc64 	bl	80181d8 <__swsetup_r>
 8018910:	2800      	cmp	r0, #0
 8018912:	d09d      	beq.n	8018850 <_vfiprintf_r+0x2c>
 8018914:	f04f 30ff 	mov.w	r0, #4294967295
 8018918:	b01d      	add	sp, #116	; 0x74
 801891a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801891e:	46a8      	mov	r8, r5
 8018920:	e7a2      	b.n	8018868 <_vfiprintf_r+0x44>
 8018922:	4a44      	ldr	r2, [pc, #272]	; (8018a34 <_vfiprintf_r+0x210>)
 8018924:	1a80      	subs	r0, r0, r2
 8018926:	fa0b f000 	lsl.w	r0, fp, r0
 801892a:	4318      	orrs	r0, r3
 801892c:	9004      	str	r0, [sp, #16]
 801892e:	4645      	mov	r5, r8
 8018930:	e7be      	b.n	80188b0 <_vfiprintf_r+0x8c>
 8018932:	9a03      	ldr	r2, [sp, #12]
 8018934:	1d11      	adds	r1, r2, #4
 8018936:	6812      	ldr	r2, [r2, #0]
 8018938:	9103      	str	r1, [sp, #12]
 801893a:	2a00      	cmp	r2, #0
 801893c:	db01      	blt.n	8018942 <_vfiprintf_r+0x11e>
 801893e:	9207      	str	r2, [sp, #28]
 8018940:	e004      	b.n	801894c <_vfiprintf_r+0x128>
 8018942:	4252      	negs	r2, r2
 8018944:	f043 0302 	orr.w	r3, r3, #2
 8018948:	9207      	str	r2, [sp, #28]
 801894a:	9304      	str	r3, [sp, #16]
 801894c:	f898 3000 	ldrb.w	r3, [r8]
 8018950:	2b2e      	cmp	r3, #46	; 0x2e
 8018952:	d10e      	bne.n	8018972 <_vfiprintf_r+0x14e>
 8018954:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018958:	2b2a      	cmp	r3, #42	; 0x2a
 801895a:	d138      	bne.n	80189ce <_vfiprintf_r+0x1aa>
 801895c:	9b03      	ldr	r3, [sp, #12]
 801895e:	1d1a      	adds	r2, r3, #4
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	9203      	str	r2, [sp, #12]
 8018964:	2b00      	cmp	r3, #0
 8018966:	bfb8      	it	lt
 8018968:	f04f 33ff 	movlt.w	r3, #4294967295
 801896c:	f108 0802 	add.w	r8, r8, #2
 8018970:	9305      	str	r3, [sp, #20]
 8018972:	4d33      	ldr	r5, [pc, #204]	; (8018a40 <_vfiprintf_r+0x21c>)
 8018974:	f898 1000 	ldrb.w	r1, [r8]
 8018978:	2203      	movs	r2, #3
 801897a:	4628      	mov	r0, r5
 801897c:	f7e7 fc50 	bl	8000220 <memchr>
 8018980:	b140      	cbz	r0, 8018994 <_vfiprintf_r+0x170>
 8018982:	2340      	movs	r3, #64	; 0x40
 8018984:	1b40      	subs	r0, r0, r5
 8018986:	fa03 f000 	lsl.w	r0, r3, r0
 801898a:	9b04      	ldr	r3, [sp, #16]
 801898c:	4303      	orrs	r3, r0
 801898e:	f108 0801 	add.w	r8, r8, #1
 8018992:	9304      	str	r3, [sp, #16]
 8018994:	f898 1000 	ldrb.w	r1, [r8]
 8018998:	482a      	ldr	r0, [pc, #168]	; (8018a44 <_vfiprintf_r+0x220>)
 801899a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801899e:	2206      	movs	r2, #6
 80189a0:	f108 0701 	add.w	r7, r8, #1
 80189a4:	f7e7 fc3c 	bl	8000220 <memchr>
 80189a8:	2800      	cmp	r0, #0
 80189aa:	d037      	beq.n	8018a1c <_vfiprintf_r+0x1f8>
 80189ac:	4b26      	ldr	r3, [pc, #152]	; (8018a48 <_vfiprintf_r+0x224>)
 80189ae:	bb1b      	cbnz	r3, 80189f8 <_vfiprintf_r+0x1d4>
 80189b0:	9b03      	ldr	r3, [sp, #12]
 80189b2:	3307      	adds	r3, #7
 80189b4:	f023 0307 	bic.w	r3, r3, #7
 80189b8:	3308      	adds	r3, #8
 80189ba:	9303      	str	r3, [sp, #12]
 80189bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189be:	444b      	add	r3, r9
 80189c0:	9309      	str	r3, [sp, #36]	; 0x24
 80189c2:	e750      	b.n	8018866 <_vfiprintf_r+0x42>
 80189c4:	fb05 3202 	mla	r2, r5, r2, r3
 80189c8:	2001      	movs	r0, #1
 80189ca:	4688      	mov	r8, r1
 80189cc:	e78a      	b.n	80188e4 <_vfiprintf_r+0xc0>
 80189ce:	2300      	movs	r3, #0
 80189d0:	f108 0801 	add.w	r8, r8, #1
 80189d4:	9305      	str	r3, [sp, #20]
 80189d6:	4619      	mov	r1, r3
 80189d8:	250a      	movs	r5, #10
 80189da:	4640      	mov	r0, r8
 80189dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80189e0:	3a30      	subs	r2, #48	; 0x30
 80189e2:	2a09      	cmp	r2, #9
 80189e4:	d903      	bls.n	80189ee <_vfiprintf_r+0x1ca>
 80189e6:	2b00      	cmp	r3, #0
 80189e8:	d0c3      	beq.n	8018972 <_vfiprintf_r+0x14e>
 80189ea:	9105      	str	r1, [sp, #20]
 80189ec:	e7c1      	b.n	8018972 <_vfiprintf_r+0x14e>
 80189ee:	fb05 2101 	mla	r1, r5, r1, r2
 80189f2:	2301      	movs	r3, #1
 80189f4:	4680      	mov	r8, r0
 80189f6:	e7f0      	b.n	80189da <_vfiprintf_r+0x1b6>
 80189f8:	ab03      	add	r3, sp, #12
 80189fa:	9300      	str	r3, [sp, #0]
 80189fc:	4622      	mov	r2, r4
 80189fe:	4b13      	ldr	r3, [pc, #76]	; (8018a4c <_vfiprintf_r+0x228>)
 8018a00:	a904      	add	r1, sp, #16
 8018a02:	4630      	mov	r0, r6
 8018a04:	f3af 8000 	nop.w
 8018a08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8018a0c:	4681      	mov	r9, r0
 8018a0e:	d1d5      	bne.n	80189bc <_vfiprintf_r+0x198>
 8018a10:	89a3      	ldrh	r3, [r4, #12]
 8018a12:	065b      	lsls	r3, r3, #25
 8018a14:	f53f af7e 	bmi.w	8018914 <_vfiprintf_r+0xf0>
 8018a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018a1a:	e77d      	b.n	8018918 <_vfiprintf_r+0xf4>
 8018a1c:	ab03      	add	r3, sp, #12
 8018a1e:	9300      	str	r3, [sp, #0]
 8018a20:	4622      	mov	r2, r4
 8018a22:	4b0a      	ldr	r3, [pc, #40]	; (8018a4c <_vfiprintf_r+0x228>)
 8018a24:	a904      	add	r1, sp, #16
 8018a26:	4630      	mov	r0, r6
 8018a28:	f000 f888 	bl	8018b3c <_printf_i>
 8018a2c:	e7ec      	b.n	8018a08 <_vfiprintf_r+0x1e4>
 8018a2e:	bf00      	nop
 8018a30:	0801cc70 	.word	0x0801cc70
 8018a34:	0801ccb0 	.word	0x0801ccb0
 8018a38:	0801cc90 	.word	0x0801cc90
 8018a3c:	0801cc50 	.word	0x0801cc50
 8018a40:	0801ccb6 	.word	0x0801ccb6
 8018a44:	0801ccba 	.word	0x0801ccba
 8018a48:	00000000 	.word	0x00000000
 8018a4c:	080187ff 	.word	0x080187ff

08018a50 <_printf_common>:
 8018a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018a54:	4691      	mov	r9, r2
 8018a56:	461f      	mov	r7, r3
 8018a58:	688a      	ldr	r2, [r1, #8]
 8018a5a:	690b      	ldr	r3, [r1, #16]
 8018a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018a60:	4293      	cmp	r3, r2
 8018a62:	bfb8      	it	lt
 8018a64:	4613      	movlt	r3, r2
 8018a66:	f8c9 3000 	str.w	r3, [r9]
 8018a6a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018a6e:	4606      	mov	r6, r0
 8018a70:	460c      	mov	r4, r1
 8018a72:	b112      	cbz	r2, 8018a7a <_printf_common+0x2a>
 8018a74:	3301      	adds	r3, #1
 8018a76:	f8c9 3000 	str.w	r3, [r9]
 8018a7a:	6823      	ldr	r3, [r4, #0]
 8018a7c:	0699      	lsls	r1, r3, #26
 8018a7e:	bf42      	ittt	mi
 8018a80:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018a84:	3302      	addmi	r3, #2
 8018a86:	f8c9 3000 	strmi.w	r3, [r9]
 8018a8a:	6825      	ldr	r5, [r4, #0]
 8018a8c:	f015 0506 	ands.w	r5, r5, #6
 8018a90:	d107      	bne.n	8018aa2 <_printf_common+0x52>
 8018a92:	f104 0a19 	add.w	sl, r4, #25
 8018a96:	68e3      	ldr	r3, [r4, #12]
 8018a98:	f8d9 2000 	ldr.w	r2, [r9]
 8018a9c:	1a9b      	subs	r3, r3, r2
 8018a9e:	42ab      	cmp	r3, r5
 8018aa0:	dc28      	bgt.n	8018af4 <_printf_common+0xa4>
 8018aa2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018aa6:	6822      	ldr	r2, [r4, #0]
 8018aa8:	3300      	adds	r3, #0
 8018aaa:	bf18      	it	ne
 8018aac:	2301      	movne	r3, #1
 8018aae:	0692      	lsls	r2, r2, #26
 8018ab0:	d42d      	bmi.n	8018b0e <_printf_common+0xbe>
 8018ab2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018ab6:	4639      	mov	r1, r7
 8018ab8:	4630      	mov	r0, r6
 8018aba:	47c0      	blx	r8
 8018abc:	3001      	adds	r0, #1
 8018abe:	d020      	beq.n	8018b02 <_printf_common+0xb2>
 8018ac0:	6823      	ldr	r3, [r4, #0]
 8018ac2:	68e5      	ldr	r5, [r4, #12]
 8018ac4:	f8d9 2000 	ldr.w	r2, [r9]
 8018ac8:	f003 0306 	and.w	r3, r3, #6
 8018acc:	2b04      	cmp	r3, #4
 8018ace:	bf08      	it	eq
 8018ad0:	1aad      	subeq	r5, r5, r2
 8018ad2:	68a3      	ldr	r3, [r4, #8]
 8018ad4:	6922      	ldr	r2, [r4, #16]
 8018ad6:	bf0c      	ite	eq
 8018ad8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018adc:	2500      	movne	r5, #0
 8018ade:	4293      	cmp	r3, r2
 8018ae0:	bfc4      	itt	gt
 8018ae2:	1a9b      	subgt	r3, r3, r2
 8018ae4:	18ed      	addgt	r5, r5, r3
 8018ae6:	f04f 0900 	mov.w	r9, #0
 8018aea:	341a      	adds	r4, #26
 8018aec:	454d      	cmp	r5, r9
 8018aee:	d11a      	bne.n	8018b26 <_printf_common+0xd6>
 8018af0:	2000      	movs	r0, #0
 8018af2:	e008      	b.n	8018b06 <_printf_common+0xb6>
 8018af4:	2301      	movs	r3, #1
 8018af6:	4652      	mov	r2, sl
 8018af8:	4639      	mov	r1, r7
 8018afa:	4630      	mov	r0, r6
 8018afc:	47c0      	blx	r8
 8018afe:	3001      	adds	r0, #1
 8018b00:	d103      	bne.n	8018b0a <_printf_common+0xba>
 8018b02:	f04f 30ff 	mov.w	r0, #4294967295
 8018b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018b0a:	3501      	adds	r5, #1
 8018b0c:	e7c3      	b.n	8018a96 <_printf_common+0x46>
 8018b0e:	18e1      	adds	r1, r4, r3
 8018b10:	1c5a      	adds	r2, r3, #1
 8018b12:	2030      	movs	r0, #48	; 0x30
 8018b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018b18:	4422      	add	r2, r4
 8018b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018b1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018b22:	3302      	adds	r3, #2
 8018b24:	e7c5      	b.n	8018ab2 <_printf_common+0x62>
 8018b26:	2301      	movs	r3, #1
 8018b28:	4622      	mov	r2, r4
 8018b2a:	4639      	mov	r1, r7
 8018b2c:	4630      	mov	r0, r6
 8018b2e:	47c0      	blx	r8
 8018b30:	3001      	adds	r0, #1
 8018b32:	d0e6      	beq.n	8018b02 <_printf_common+0xb2>
 8018b34:	f109 0901 	add.w	r9, r9, #1
 8018b38:	e7d8      	b.n	8018aec <_printf_common+0x9c>
	...

08018b3c <_printf_i>:
 8018b3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018b40:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018b44:	460c      	mov	r4, r1
 8018b46:	7e09      	ldrb	r1, [r1, #24]
 8018b48:	b085      	sub	sp, #20
 8018b4a:	296e      	cmp	r1, #110	; 0x6e
 8018b4c:	4617      	mov	r7, r2
 8018b4e:	4606      	mov	r6, r0
 8018b50:	4698      	mov	r8, r3
 8018b52:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018b54:	f000 80b3 	beq.w	8018cbe <_printf_i+0x182>
 8018b58:	d822      	bhi.n	8018ba0 <_printf_i+0x64>
 8018b5a:	2963      	cmp	r1, #99	; 0x63
 8018b5c:	d036      	beq.n	8018bcc <_printf_i+0x90>
 8018b5e:	d80a      	bhi.n	8018b76 <_printf_i+0x3a>
 8018b60:	2900      	cmp	r1, #0
 8018b62:	f000 80b9 	beq.w	8018cd8 <_printf_i+0x19c>
 8018b66:	2958      	cmp	r1, #88	; 0x58
 8018b68:	f000 8083 	beq.w	8018c72 <_printf_i+0x136>
 8018b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018b70:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018b74:	e032      	b.n	8018bdc <_printf_i+0xa0>
 8018b76:	2964      	cmp	r1, #100	; 0x64
 8018b78:	d001      	beq.n	8018b7e <_printf_i+0x42>
 8018b7a:	2969      	cmp	r1, #105	; 0x69
 8018b7c:	d1f6      	bne.n	8018b6c <_printf_i+0x30>
 8018b7e:	6820      	ldr	r0, [r4, #0]
 8018b80:	6813      	ldr	r3, [r2, #0]
 8018b82:	0605      	lsls	r5, r0, #24
 8018b84:	f103 0104 	add.w	r1, r3, #4
 8018b88:	d52a      	bpl.n	8018be0 <_printf_i+0xa4>
 8018b8a:	681b      	ldr	r3, [r3, #0]
 8018b8c:	6011      	str	r1, [r2, #0]
 8018b8e:	2b00      	cmp	r3, #0
 8018b90:	da03      	bge.n	8018b9a <_printf_i+0x5e>
 8018b92:	222d      	movs	r2, #45	; 0x2d
 8018b94:	425b      	negs	r3, r3
 8018b96:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018b9a:	486f      	ldr	r0, [pc, #444]	; (8018d58 <_printf_i+0x21c>)
 8018b9c:	220a      	movs	r2, #10
 8018b9e:	e039      	b.n	8018c14 <_printf_i+0xd8>
 8018ba0:	2973      	cmp	r1, #115	; 0x73
 8018ba2:	f000 809d 	beq.w	8018ce0 <_printf_i+0x1a4>
 8018ba6:	d808      	bhi.n	8018bba <_printf_i+0x7e>
 8018ba8:	296f      	cmp	r1, #111	; 0x6f
 8018baa:	d020      	beq.n	8018bee <_printf_i+0xb2>
 8018bac:	2970      	cmp	r1, #112	; 0x70
 8018bae:	d1dd      	bne.n	8018b6c <_printf_i+0x30>
 8018bb0:	6823      	ldr	r3, [r4, #0]
 8018bb2:	f043 0320 	orr.w	r3, r3, #32
 8018bb6:	6023      	str	r3, [r4, #0]
 8018bb8:	e003      	b.n	8018bc2 <_printf_i+0x86>
 8018bba:	2975      	cmp	r1, #117	; 0x75
 8018bbc:	d017      	beq.n	8018bee <_printf_i+0xb2>
 8018bbe:	2978      	cmp	r1, #120	; 0x78
 8018bc0:	d1d4      	bne.n	8018b6c <_printf_i+0x30>
 8018bc2:	2378      	movs	r3, #120	; 0x78
 8018bc4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018bc8:	4864      	ldr	r0, [pc, #400]	; (8018d5c <_printf_i+0x220>)
 8018bca:	e055      	b.n	8018c78 <_printf_i+0x13c>
 8018bcc:	6813      	ldr	r3, [r2, #0]
 8018bce:	1d19      	adds	r1, r3, #4
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	6011      	str	r1, [r2, #0]
 8018bd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018bd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018bdc:	2301      	movs	r3, #1
 8018bde:	e08c      	b.n	8018cfa <_printf_i+0x1be>
 8018be0:	681b      	ldr	r3, [r3, #0]
 8018be2:	6011      	str	r1, [r2, #0]
 8018be4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018be8:	bf18      	it	ne
 8018bea:	b21b      	sxthne	r3, r3
 8018bec:	e7cf      	b.n	8018b8e <_printf_i+0x52>
 8018bee:	6813      	ldr	r3, [r2, #0]
 8018bf0:	6825      	ldr	r5, [r4, #0]
 8018bf2:	1d18      	adds	r0, r3, #4
 8018bf4:	6010      	str	r0, [r2, #0]
 8018bf6:	0628      	lsls	r0, r5, #24
 8018bf8:	d501      	bpl.n	8018bfe <_printf_i+0xc2>
 8018bfa:	681b      	ldr	r3, [r3, #0]
 8018bfc:	e002      	b.n	8018c04 <_printf_i+0xc8>
 8018bfe:	0668      	lsls	r0, r5, #25
 8018c00:	d5fb      	bpl.n	8018bfa <_printf_i+0xbe>
 8018c02:	881b      	ldrh	r3, [r3, #0]
 8018c04:	4854      	ldr	r0, [pc, #336]	; (8018d58 <_printf_i+0x21c>)
 8018c06:	296f      	cmp	r1, #111	; 0x6f
 8018c08:	bf14      	ite	ne
 8018c0a:	220a      	movne	r2, #10
 8018c0c:	2208      	moveq	r2, #8
 8018c0e:	2100      	movs	r1, #0
 8018c10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018c14:	6865      	ldr	r5, [r4, #4]
 8018c16:	60a5      	str	r5, [r4, #8]
 8018c18:	2d00      	cmp	r5, #0
 8018c1a:	f2c0 8095 	blt.w	8018d48 <_printf_i+0x20c>
 8018c1e:	6821      	ldr	r1, [r4, #0]
 8018c20:	f021 0104 	bic.w	r1, r1, #4
 8018c24:	6021      	str	r1, [r4, #0]
 8018c26:	2b00      	cmp	r3, #0
 8018c28:	d13d      	bne.n	8018ca6 <_printf_i+0x16a>
 8018c2a:	2d00      	cmp	r5, #0
 8018c2c:	f040 808e 	bne.w	8018d4c <_printf_i+0x210>
 8018c30:	4665      	mov	r5, ip
 8018c32:	2a08      	cmp	r2, #8
 8018c34:	d10b      	bne.n	8018c4e <_printf_i+0x112>
 8018c36:	6823      	ldr	r3, [r4, #0]
 8018c38:	07db      	lsls	r3, r3, #31
 8018c3a:	d508      	bpl.n	8018c4e <_printf_i+0x112>
 8018c3c:	6923      	ldr	r3, [r4, #16]
 8018c3e:	6862      	ldr	r2, [r4, #4]
 8018c40:	429a      	cmp	r2, r3
 8018c42:	bfde      	ittt	le
 8018c44:	2330      	movle	r3, #48	; 0x30
 8018c46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018c4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018c4e:	ebac 0305 	sub.w	r3, ip, r5
 8018c52:	6123      	str	r3, [r4, #16]
 8018c54:	f8cd 8000 	str.w	r8, [sp]
 8018c58:	463b      	mov	r3, r7
 8018c5a:	aa03      	add	r2, sp, #12
 8018c5c:	4621      	mov	r1, r4
 8018c5e:	4630      	mov	r0, r6
 8018c60:	f7ff fef6 	bl	8018a50 <_printf_common>
 8018c64:	3001      	adds	r0, #1
 8018c66:	d14d      	bne.n	8018d04 <_printf_i+0x1c8>
 8018c68:	f04f 30ff 	mov.w	r0, #4294967295
 8018c6c:	b005      	add	sp, #20
 8018c6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018c72:	4839      	ldr	r0, [pc, #228]	; (8018d58 <_printf_i+0x21c>)
 8018c74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018c78:	6813      	ldr	r3, [r2, #0]
 8018c7a:	6821      	ldr	r1, [r4, #0]
 8018c7c:	1d1d      	adds	r5, r3, #4
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	6015      	str	r5, [r2, #0]
 8018c82:	060a      	lsls	r2, r1, #24
 8018c84:	d50b      	bpl.n	8018c9e <_printf_i+0x162>
 8018c86:	07ca      	lsls	r2, r1, #31
 8018c88:	bf44      	itt	mi
 8018c8a:	f041 0120 	orrmi.w	r1, r1, #32
 8018c8e:	6021      	strmi	r1, [r4, #0]
 8018c90:	b91b      	cbnz	r3, 8018c9a <_printf_i+0x15e>
 8018c92:	6822      	ldr	r2, [r4, #0]
 8018c94:	f022 0220 	bic.w	r2, r2, #32
 8018c98:	6022      	str	r2, [r4, #0]
 8018c9a:	2210      	movs	r2, #16
 8018c9c:	e7b7      	b.n	8018c0e <_printf_i+0xd2>
 8018c9e:	064d      	lsls	r5, r1, #25
 8018ca0:	bf48      	it	mi
 8018ca2:	b29b      	uxthmi	r3, r3
 8018ca4:	e7ef      	b.n	8018c86 <_printf_i+0x14a>
 8018ca6:	4665      	mov	r5, ip
 8018ca8:	fbb3 f1f2 	udiv	r1, r3, r2
 8018cac:	fb02 3311 	mls	r3, r2, r1, r3
 8018cb0:	5cc3      	ldrb	r3, [r0, r3]
 8018cb2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018cb6:	460b      	mov	r3, r1
 8018cb8:	2900      	cmp	r1, #0
 8018cba:	d1f5      	bne.n	8018ca8 <_printf_i+0x16c>
 8018cbc:	e7b9      	b.n	8018c32 <_printf_i+0xf6>
 8018cbe:	6813      	ldr	r3, [r2, #0]
 8018cc0:	6825      	ldr	r5, [r4, #0]
 8018cc2:	6961      	ldr	r1, [r4, #20]
 8018cc4:	1d18      	adds	r0, r3, #4
 8018cc6:	6010      	str	r0, [r2, #0]
 8018cc8:	0628      	lsls	r0, r5, #24
 8018cca:	681b      	ldr	r3, [r3, #0]
 8018ccc:	d501      	bpl.n	8018cd2 <_printf_i+0x196>
 8018cce:	6019      	str	r1, [r3, #0]
 8018cd0:	e002      	b.n	8018cd8 <_printf_i+0x19c>
 8018cd2:	066a      	lsls	r2, r5, #25
 8018cd4:	d5fb      	bpl.n	8018cce <_printf_i+0x192>
 8018cd6:	8019      	strh	r1, [r3, #0]
 8018cd8:	2300      	movs	r3, #0
 8018cda:	6123      	str	r3, [r4, #16]
 8018cdc:	4665      	mov	r5, ip
 8018cde:	e7b9      	b.n	8018c54 <_printf_i+0x118>
 8018ce0:	6813      	ldr	r3, [r2, #0]
 8018ce2:	1d19      	adds	r1, r3, #4
 8018ce4:	6011      	str	r1, [r2, #0]
 8018ce6:	681d      	ldr	r5, [r3, #0]
 8018ce8:	6862      	ldr	r2, [r4, #4]
 8018cea:	2100      	movs	r1, #0
 8018cec:	4628      	mov	r0, r5
 8018cee:	f7e7 fa97 	bl	8000220 <memchr>
 8018cf2:	b108      	cbz	r0, 8018cf8 <_printf_i+0x1bc>
 8018cf4:	1b40      	subs	r0, r0, r5
 8018cf6:	6060      	str	r0, [r4, #4]
 8018cf8:	6863      	ldr	r3, [r4, #4]
 8018cfa:	6123      	str	r3, [r4, #16]
 8018cfc:	2300      	movs	r3, #0
 8018cfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018d02:	e7a7      	b.n	8018c54 <_printf_i+0x118>
 8018d04:	6923      	ldr	r3, [r4, #16]
 8018d06:	462a      	mov	r2, r5
 8018d08:	4639      	mov	r1, r7
 8018d0a:	4630      	mov	r0, r6
 8018d0c:	47c0      	blx	r8
 8018d0e:	3001      	adds	r0, #1
 8018d10:	d0aa      	beq.n	8018c68 <_printf_i+0x12c>
 8018d12:	6823      	ldr	r3, [r4, #0]
 8018d14:	079b      	lsls	r3, r3, #30
 8018d16:	d413      	bmi.n	8018d40 <_printf_i+0x204>
 8018d18:	68e0      	ldr	r0, [r4, #12]
 8018d1a:	9b03      	ldr	r3, [sp, #12]
 8018d1c:	4298      	cmp	r0, r3
 8018d1e:	bfb8      	it	lt
 8018d20:	4618      	movlt	r0, r3
 8018d22:	e7a3      	b.n	8018c6c <_printf_i+0x130>
 8018d24:	2301      	movs	r3, #1
 8018d26:	464a      	mov	r2, r9
 8018d28:	4639      	mov	r1, r7
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	47c0      	blx	r8
 8018d2e:	3001      	adds	r0, #1
 8018d30:	d09a      	beq.n	8018c68 <_printf_i+0x12c>
 8018d32:	3501      	adds	r5, #1
 8018d34:	68e3      	ldr	r3, [r4, #12]
 8018d36:	9a03      	ldr	r2, [sp, #12]
 8018d38:	1a9b      	subs	r3, r3, r2
 8018d3a:	42ab      	cmp	r3, r5
 8018d3c:	dcf2      	bgt.n	8018d24 <_printf_i+0x1e8>
 8018d3e:	e7eb      	b.n	8018d18 <_printf_i+0x1dc>
 8018d40:	2500      	movs	r5, #0
 8018d42:	f104 0919 	add.w	r9, r4, #25
 8018d46:	e7f5      	b.n	8018d34 <_printf_i+0x1f8>
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d1ac      	bne.n	8018ca6 <_printf_i+0x16a>
 8018d4c:	7803      	ldrb	r3, [r0, #0]
 8018d4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018d52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018d56:	e76c      	b.n	8018c32 <_printf_i+0xf6>
 8018d58:	0801ccc1 	.word	0x0801ccc1
 8018d5c:	0801ccd2 	.word	0x0801ccd2

08018d60 <_sbrk_r>:
 8018d60:	b538      	push	{r3, r4, r5, lr}
 8018d62:	4c06      	ldr	r4, [pc, #24]	; (8018d7c <_sbrk_r+0x1c>)
 8018d64:	2300      	movs	r3, #0
 8018d66:	4605      	mov	r5, r0
 8018d68:	4608      	mov	r0, r1
 8018d6a:	6023      	str	r3, [r4, #0]
 8018d6c:	f7ff f83e 	bl	8017dec <_sbrk>
 8018d70:	1c43      	adds	r3, r0, #1
 8018d72:	d102      	bne.n	8018d7a <_sbrk_r+0x1a>
 8018d74:	6823      	ldr	r3, [r4, #0]
 8018d76:	b103      	cbz	r3, 8018d7a <_sbrk_r+0x1a>
 8018d78:	602b      	str	r3, [r5, #0]
 8018d7a:	bd38      	pop	{r3, r4, r5, pc}
 8018d7c:	2000c520 	.word	0x2000c520

08018d80 <__sread>:
 8018d80:	b510      	push	{r4, lr}
 8018d82:	460c      	mov	r4, r1
 8018d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d88:	f000 f896 	bl	8018eb8 <_read_r>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	bfab      	itete	ge
 8018d90:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d92:	89a3      	ldrhlt	r3, [r4, #12]
 8018d94:	181b      	addge	r3, r3, r0
 8018d96:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d9a:	bfac      	ite	ge
 8018d9c:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d9e:	81a3      	strhlt	r3, [r4, #12]
 8018da0:	bd10      	pop	{r4, pc}

08018da2 <__swrite>:
 8018da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018da6:	461f      	mov	r7, r3
 8018da8:	898b      	ldrh	r3, [r1, #12]
 8018daa:	05db      	lsls	r3, r3, #23
 8018dac:	4605      	mov	r5, r0
 8018dae:	460c      	mov	r4, r1
 8018db0:	4616      	mov	r6, r2
 8018db2:	d505      	bpl.n	8018dc0 <__swrite+0x1e>
 8018db4:	2302      	movs	r3, #2
 8018db6:	2200      	movs	r2, #0
 8018db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dbc:	f000 f868 	bl	8018e90 <_lseek_r>
 8018dc0:	89a3      	ldrh	r3, [r4, #12]
 8018dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018dc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018dca:	81a3      	strh	r3, [r4, #12]
 8018dcc:	4632      	mov	r2, r6
 8018dce:	463b      	mov	r3, r7
 8018dd0:	4628      	mov	r0, r5
 8018dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018dd6:	f000 b817 	b.w	8018e08 <_write_r>

08018dda <__sseek>:
 8018dda:	b510      	push	{r4, lr}
 8018ddc:	460c      	mov	r4, r1
 8018dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018de2:	f000 f855 	bl	8018e90 <_lseek_r>
 8018de6:	1c43      	adds	r3, r0, #1
 8018de8:	89a3      	ldrh	r3, [r4, #12]
 8018dea:	bf15      	itete	ne
 8018dec:	6560      	strne	r0, [r4, #84]	; 0x54
 8018dee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018df2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018df6:	81a3      	strheq	r3, [r4, #12]
 8018df8:	bf18      	it	ne
 8018dfa:	81a3      	strhne	r3, [r4, #12]
 8018dfc:	bd10      	pop	{r4, pc}

08018dfe <__sclose>:
 8018dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e02:	f000 b813 	b.w	8018e2c <_close_r>
	...

08018e08 <_write_r>:
 8018e08:	b538      	push	{r3, r4, r5, lr}
 8018e0a:	4c07      	ldr	r4, [pc, #28]	; (8018e28 <_write_r+0x20>)
 8018e0c:	4605      	mov	r5, r0
 8018e0e:	4608      	mov	r0, r1
 8018e10:	4611      	mov	r1, r2
 8018e12:	2200      	movs	r2, #0
 8018e14:	6022      	str	r2, [r4, #0]
 8018e16:	461a      	mov	r2, r3
 8018e18:	f7fe fe23 	bl	8017a62 <_write>
 8018e1c:	1c43      	adds	r3, r0, #1
 8018e1e:	d102      	bne.n	8018e26 <_write_r+0x1e>
 8018e20:	6823      	ldr	r3, [r4, #0]
 8018e22:	b103      	cbz	r3, 8018e26 <_write_r+0x1e>
 8018e24:	602b      	str	r3, [r5, #0]
 8018e26:	bd38      	pop	{r3, r4, r5, pc}
 8018e28:	2000c520 	.word	0x2000c520

08018e2c <_close_r>:
 8018e2c:	b538      	push	{r3, r4, r5, lr}
 8018e2e:	4c06      	ldr	r4, [pc, #24]	; (8018e48 <_close_r+0x1c>)
 8018e30:	2300      	movs	r3, #0
 8018e32:	4605      	mov	r5, r0
 8018e34:	4608      	mov	r0, r1
 8018e36:	6023      	str	r3, [r4, #0]
 8018e38:	f7fe ffa3 	bl	8017d82 <_close>
 8018e3c:	1c43      	adds	r3, r0, #1
 8018e3e:	d102      	bne.n	8018e46 <_close_r+0x1a>
 8018e40:	6823      	ldr	r3, [r4, #0]
 8018e42:	b103      	cbz	r3, 8018e46 <_close_r+0x1a>
 8018e44:	602b      	str	r3, [r5, #0]
 8018e46:	bd38      	pop	{r3, r4, r5, pc}
 8018e48:	2000c520 	.word	0x2000c520

08018e4c <_fstat_r>:
 8018e4c:	b538      	push	{r3, r4, r5, lr}
 8018e4e:	4c07      	ldr	r4, [pc, #28]	; (8018e6c <_fstat_r+0x20>)
 8018e50:	2300      	movs	r3, #0
 8018e52:	4605      	mov	r5, r0
 8018e54:	4608      	mov	r0, r1
 8018e56:	4611      	mov	r1, r2
 8018e58:	6023      	str	r3, [r4, #0]
 8018e5a:	f7fe ff9e 	bl	8017d9a <_fstat>
 8018e5e:	1c43      	adds	r3, r0, #1
 8018e60:	d102      	bne.n	8018e68 <_fstat_r+0x1c>
 8018e62:	6823      	ldr	r3, [r4, #0]
 8018e64:	b103      	cbz	r3, 8018e68 <_fstat_r+0x1c>
 8018e66:	602b      	str	r3, [r5, #0]
 8018e68:	bd38      	pop	{r3, r4, r5, pc}
 8018e6a:	bf00      	nop
 8018e6c:	2000c520 	.word	0x2000c520

08018e70 <_isatty_r>:
 8018e70:	b538      	push	{r3, r4, r5, lr}
 8018e72:	4c06      	ldr	r4, [pc, #24]	; (8018e8c <_isatty_r+0x1c>)
 8018e74:	2300      	movs	r3, #0
 8018e76:	4605      	mov	r5, r0
 8018e78:	4608      	mov	r0, r1
 8018e7a:	6023      	str	r3, [r4, #0]
 8018e7c:	f7fe ff9d 	bl	8017dba <_isatty>
 8018e80:	1c43      	adds	r3, r0, #1
 8018e82:	d102      	bne.n	8018e8a <_isatty_r+0x1a>
 8018e84:	6823      	ldr	r3, [r4, #0]
 8018e86:	b103      	cbz	r3, 8018e8a <_isatty_r+0x1a>
 8018e88:	602b      	str	r3, [r5, #0]
 8018e8a:	bd38      	pop	{r3, r4, r5, pc}
 8018e8c:	2000c520 	.word	0x2000c520

08018e90 <_lseek_r>:
 8018e90:	b538      	push	{r3, r4, r5, lr}
 8018e92:	4c07      	ldr	r4, [pc, #28]	; (8018eb0 <_lseek_r+0x20>)
 8018e94:	4605      	mov	r5, r0
 8018e96:	4608      	mov	r0, r1
 8018e98:	4611      	mov	r1, r2
 8018e9a:	2200      	movs	r2, #0
 8018e9c:	6022      	str	r2, [r4, #0]
 8018e9e:	461a      	mov	r2, r3
 8018ea0:	f7fe ff96 	bl	8017dd0 <_lseek>
 8018ea4:	1c43      	adds	r3, r0, #1
 8018ea6:	d102      	bne.n	8018eae <_lseek_r+0x1e>
 8018ea8:	6823      	ldr	r3, [r4, #0]
 8018eaa:	b103      	cbz	r3, 8018eae <_lseek_r+0x1e>
 8018eac:	602b      	str	r3, [r5, #0]
 8018eae:	bd38      	pop	{r3, r4, r5, pc}
 8018eb0:	2000c520 	.word	0x2000c520

08018eb4 <__malloc_lock>:
 8018eb4:	4770      	bx	lr

08018eb6 <__malloc_unlock>:
 8018eb6:	4770      	bx	lr

08018eb8 <_read_r>:
 8018eb8:	b538      	push	{r3, r4, r5, lr}
 8018eba:	4c07      	ldr	r4, [pc, #28]	; (8018ed8 <_read_r+0x20>)
 8018ebc:	4605      	mov	r5, r0
 8018ebe:	4608      	mov	r0, r1
 8018ec0:	4611      	mov	r1, r2
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	6022      	str	r2, [r4, #0]
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	f7fe ff3e 	bl	8017d48 <_read>
 8018ecc:	1c43      	adds	r3, r0, #1
 8018ece:	d102      	bne.n	8018ed6 <_read_r+0x1e>
 8018ed0:	6823      	ldr	r3, [r4, #0]
 8018ed2:	b103      	cbz	r3, 8018ed6 <_read_r+0x1e>
 8018ed4:	602b      	str	r3, [r5, #0]
 8018ed6:	bd38      	pop	{r3, r4, r5, pc}
 8018ed8:	2000c520 	.word	0x2000c520

08018edc <_init>:
 8018edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ede:	bf00      	nop
 8018ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ee2:	bc08      	pop	{r3}
 8018ee4:	469e      	mov	lr, r3
 8018ee6:	4770      	bx	lr

08018ee8 <_fini>:
 8018ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eea:	bf00      	nop
 8018eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eee:	bc08      	pop	{r3}
 8018ef0:	469e      	mov	lr, r3
 8018ef2:	4770      	bx	lr
