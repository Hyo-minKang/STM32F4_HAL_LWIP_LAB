
STM32F4_HAL_ETH_TCPCLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001083c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fe4  080109ec  080109ec  000209ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080139d0  080139d0  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  080139d0  080139d0  000239d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080139d8  080139d8  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080139d8  080139d8  000239d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080139dc  080139dc  000239dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080139e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006d28  2000007c  08013a5c  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20006da4  08013a5c  00036da4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002a7a8  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005125  00000000  00000000  0005a854  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  0005f980  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001158  00000000  00000000  00060b58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f27e  00000000  00000000  00061cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001c385  00000000  00000000  00090f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8841  00000000  00000000  000ad2b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195af4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c90  00000000  00000000  00195b70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080109d4 	.word	0x080109d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	080109d4 	.word	0x080109d4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_GPIO_Init+0xf0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f244 0181 	movw	r1, #16513	; 0x4081
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_GPIO_Init+0xf4>)
 800064a:	f001 fe51 	bl	80022f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000664:	f001 fc9a 	bl	8001f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000668:	f244 0381 	movw	r3, #16513	; 0x4081
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000682:	f001 fc8b 	bl	8001f9c <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40020400 	.word	0x40020400
 8000698:	40020800 	.word	0x40020800

0800069c <ethernetif_notify_conn_changed>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ethernetif_notify_conn_changed(struct netif *netif)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
   when the callback is needed,
   */
  if (netif_is_link_up(netif))
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80006aa:	089b      	lsrs	r3, r3, #2
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d00b      	beq.n	80006ce <ethernetif_notify_conn_changed+0x32>
  {
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80006b6:	2201      	movs	r2, #1
 80006b8:	2101      	movs	r1, #1
 80006ba:	480c      	ldr	r0, [pc, #48]	; (80006ec <ethernetif_notify_conn_changed+0x50>)
 80006bc:	f001 fe18 	bl	80022f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 80006c0:	2200      	movs	r2, #0
 80006c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006c6:	4809      	ldr	r0, [pc, #36]	; (80006ec <ethernetif_notify_conn_changed+0x50>)
 80006c8:	f001 fe12 	bl	80022f0 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
  }
}
 80006cc:	e00a      	b.n	80006e4 <ethernetif_notify_conn_changed+0x48>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2101      	movs	r1, #1
 80006d2:	4806      	ldr	r0, [pc, #24]	; (80006ec <ethernetif_notify_conn_changed+0x50>)
 80006d4:	f001 fe0c 	bl	80022f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 80006d8:	2201      	movs	r2, #1
 80006da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80006de:	4803      	ldr	r0, [pc, #12]	; (80006ec <ethernetif_notify_conn_changed+0x50>)
 80006e0:	f001 fe06 	bl	80022f0 <HAL_GPIO_WritePin>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40020400 	.word	0x40020400

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f4:	f000 f9b2 	bl	8000a5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f8:	f000 f80c 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fc:	f7ff ff50 	bl	80005a0 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000700:	f002 fa4a 	bl	8002b98 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  ethernetif_notify_conn_changed(&gnetif);
 8000704:	4802      	ldr	r0, [pc, #8]	; (8000710 <main+0x20>)
 8000706:	f7ff ffc9 	bl	800069c <ethernetif_notify_conn_changed>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    MX_LWIP_Process();
 800070a:	f002 fa8b 	bl	8002c24 <MX_LWIP_Process>
 800070e:	e7fc      	b.n	800070a <main+0x1a>
 8000710:	200006b0 	.word	0x200006b0

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f00f fa2e 	bl	800fb84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000774:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000788:	23a8      	movs	r3, #168	; 0xa8
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000790:	2307      	movs	r3, #7
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f001 fdc3 	bl	8002324 <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007a4:	f000 f820 	bl	80007e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	2105      	movs	r1, #5
 80007c6:	4618      	mov	r0, r3
 80007c8:	f002 f81c 	bl	8002804 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007d2:	f000 f809 	bl	80007e8 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
	...

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	; (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	; (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800080c:	6453      	str	r3, [r2, #68]	; 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	; (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	; (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	; 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800084c:	bf00      	nop
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr

08000856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000856:	b480      	push	{r7}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085a:	e7fe      	b.n	800085a <HardFault_Handler+0x4>

0800085c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800085c:	b480      	push	{r7}
 800085e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000860:	e7fe      	b.n	8000860 <MemManage_Handler+0x4>

08000862 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000866:	e7fe      	b.n	8000866 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	e7fe      	b.n	800086c <UsageFault_Handler+0x4>

0800086e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	46bd      	mov	sp, r7
 8000876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087a:	4770      	bx	lr

0800087c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089c:	f000 f930 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
 80008b4:	e00a      	b.n	80008cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008b6:	f3af 8000 	nop.w
 80008ba:	4601      	mov	r1, r0
 80008bc:	68bb      	ldr	r3, [r7, #8]
 80008be:	1c5a      	adds	r2, r3, #1
 80008c0:	60ba      	str	r2, [r7, #8]
 80008c2:	b2ca      	uxtb	r2, r1
 80008c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf0      	blt.n	80008b6 <_read+0x12>
	}

return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008de:	b580      	push	{r7, lr}
 80008e0:	b086      	sub	sp, #24
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	60f8      	str	r0, [r7, #12]
 80008e6:	60b9      	str	r1, [r7, #8]
 80008e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
 80008ee:	e009      	b.n	8000904 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	1c5a      	adds	r2, r3, #1
 80008f4:	60ba      	str	r2, [r7, #8]
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	4618      	mov	r0, r3
 80008fa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	3301      	adds	r3, #1
 8000902:	617b      	str	r3, [r7, #20]
 8000904:	697a      	ldr	r2, [r7, #20]
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	429a      	cmp	r2, r3
 800090a:	dbf1      	blt.n	80008f0 <_write+0x12>
	}
	return len;
 800090c:	687b      	ldr	r3, [r7, #4]
}
 800090e:	4618      	mov	r0, r3
 8000910:	3718      	adds	r7, #24
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <_close>:

int _close(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return -1;
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800093e:	605a      	str	r2, [r3, #4]
	return 0;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr

0800094e <_isatty>:

int _isatty(int file)
{
 800094e:	b480      	push	{r7}
 8000950:	b083      	sub	sp, #12
 8000952:	af00      	add	r7, sp, #0
 8000954:	6078      	str	r0, [r7, #4]
	return 1;
 8000956:	2301      	movs	r3, #1
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000964:	b480      	push	{r7}
 8000966:	b085      	sub	sp, #20
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	return 0;
 8000970:	2300      	movs	r3, #0
}
 8000972:	4618      	mov	r0, r3
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
	...

08000980 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x50>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d102      	bne.n	8000996 <_sbrk+0x16>
		heap_end = &end;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <_sbrk+0x50>)
 8000992:	4a10      	ldr	r2, [pc, #64]	; (80009d4 <_sbrk+0x54>)
 8000994:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <_sbrk+0x50>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800099c:	4b0c      	ldr	r3, [pc, #48]	; (80009d0 <_sbrk+0x50>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4413      	add	r3, r2
 80009a4:	466a      	mov	r2, sp
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d905      	bls.n	80009b6 <_sbrk+0x36>
	{
		errno = ENOMEM;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <_sbrk+0x58>)
 80009ac:	220c      	movs	r2, #12
 80009ae:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80009b0:	f04f 33ff 	mov.w	r3, #4294967295
 80009b4:	e006      	b.n	80009c4 <_sbrk+0x44>
	}

	heap_end += incr;
 80009b6:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <_sbrk+0x50>)
 80009b8:	681a      	ldr	r2, [r3, #0]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4413      	add	r3, r2
 80009be:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <_sbrk+0x50>)
 80009c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr
 80009d0:	20000098 	.word	0x20000098
 80009d4:	20006da8 	.word	0x20006da8
 80009d8:	20006da0 	.word	0x20006da0

080009dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <SystemInit+0x28>)
 80009e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e6:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <SystemInit+0x28>)
 80009e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <SystemInit+0x28>)
 80009f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009f6:	609a      	str	r2, [r3, #8]
#endif
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop
 8000a04:	e000ed00 	.word	0xe000ed00

08000a08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000a08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a40 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000a0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000a0e:	e003      	b.n	8000a18 <LoopCopyDataInit>

08000a10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000a12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000a14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000a16:	3104      	adds	r1, #4

08000a18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000a1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000a1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000a20:	d3f6      	bcc.n	8000a10 <CopyDataInit>
  ldr  r2, =_sbss
 8000a22:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000a24:	e002      	b.n	8000a2c <LoopFillZerobss>

08000a26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000a26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000a28:	f842 3b04 	str.w	r3, [r2], #4

08000a2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000a2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000a30:	d3f9      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000a32:	f7ff ffd3 	bl	80009dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f00f f867 	bl	800fb08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a3a:	f7ff fe59 	bl	80006f0 <main>
  bx  lr    
 8000a3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000a40:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000a44:	080139e0 	.word	0x080139e0
  ldr  r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a4c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000a50:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000a54:	20006da4 	.word	0x20006da4

08000a58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a58:	e7fe      	b.n	8000a58 <ADC_IRQHandler>
	...

08000a5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a60:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	; (8000a9c <HAL_Init+0x40>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <HAL_Init+0x40>)
 8000a72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_Init+0x40>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_Init+0x40>)
 8000a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a84:	2003      	movs	r0, #3
 8000a86:	f000 f92f 	bl	8000ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f000 f808 	bl	8000aa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a90:	f7ff feb2 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a94:	2300      	movs	r3, #0
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40023c00 	.word	0x40023c00

08000aa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x54>)
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <HAL_InitTick+0x58>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f939 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00e      	b.n	8000aec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	2b0f      	cmp	r3, #15
 8000ad2:	d80a      	bhi.n	8000aea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f000 f90f 	bl	8000cfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <HAL_InitTick+0x5c>)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e000      	b.n	8000aec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000aea:	2301      	movs	r3, #1
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	20000000 	.word	0x20000000
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000004 	.word	0x20000004

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000008 	.word	0x20000008
 8000b24:	200006ac 	.word	0x200006ac

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200006ac 	.word	0x200006ac

08000b40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b48:	f7ff ffee 	bl	8000b28 <HAL_GetTick>
 8000b4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b58:	d005      	beq.n	8000b66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_Delay+0x40>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	461a      	mov	r2, r3
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b66:	bf00      	nop
 8000b68:	f7ff ffde 	bl	8000b28 <HAL_GetTick>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	68fa      	ldr	r2, [r7, #12]
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d8f7      	bhi.n	8000b68 <HAL_Delay+0x28>
  {
  }
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000008 	.word	0x20000008

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	6039      	str	r1, [r7, #0]
 8000bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	db0a      	blt.n	8000c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	b2da      	uxtb	r2, r3
 8000c00:	490c      	ldr	r1, [pc, #48]	; (8000c34 <__NVIC_SetPriority+0x4c>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	0112      	lsls	r2, r2, #4
 8000c08:	b2d2      	uxtb	r2, r2
 8000c0a:	440b      	add	r3, r1
 8000c0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c10:	e00a      	b.n	8000c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	4908      	ldr	r1, [pc, #32]	; (8000c38 <__NVIC_SetPriority+0x50>)
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	f003 030f 	and.w	r3, r3, #15
 8000c1e:	3b04      	subs	r3, #4
 8000c20:	0112      	lsls	r2, r2, #4
 8000c22:	b2d2      	uxtb	r2, r2
 8000c24:	440b      	add	r3, r1
 8000c26:	761a      	strb	r2, [r3, #24]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000e100 	.word	0xe000e100
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b089      	sub	sp, #36	; 0x24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c50:	69fb      	ldr	r3, [r7, #28]
 8000c52:	f1c3 0307 	rsb	r3, r3, #7
 8000c56:	2b04      	cmp	r3, #4
 8000c58:	bf28      	it	cs
 8000c5a:	2304      	movcs	r3, #4
 8000c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3304      	adds	r3, #4
 8000c62:	2b06      	cmp	r3, #6
 8000c64:	d902      	bls.n	8000c6c <NVIC_EncodePriority+0x30>
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	3b03      	subs	r3, #3
 8000c6a:	e000      	b.n	8000c6e <NVIC_EncodePriority+0x32>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c70:	f04f 32ff 	mov.w	r2, #4294967295
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7a:	43da      	mvns	r2, r3
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	401a      	ands	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c84:	f04f 31ff 	mov.w	r1, #4294967295
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c8e:	43d9      	mvns	r1, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	4313      	orrs	r3, r2
         );
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3724      	adds	r7, #36	; 0x24
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
	...

08000ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3b01      	subs	r3, #1
 8000cb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb4:	d301      	bcc.n	8000cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	e00f      	b.n	8000cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cba:	4a0a      	ldr	r2, [pc, #40]	; (8000ce4 <SysTick_Config+0x40>)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	3b01      	subs	r3, #1
 8000cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc2:	210f      	movs	r1, #15
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	f7ff ff8e 	bl	8000be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ccc:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <SysTick_Config+0x40>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd2:	4b04      	ldr	r3, [pc, #16]	; (8000ce4 <SysTick_Config+0x40>)
 8000cd4:	2207      	movs	r2, #7
 8000cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	e000e010 	.word	0xe000e010

08000ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff47 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}

08000cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfe:	b580      	push	{r7, lr}
 8000d00:	b086      	sub	sp, #24
 8000d02:	af00      	add	r7, sp, #0
 8000d04:	4603      	mov	r3, r0
 8000d06:	60b9      	str	r1, [r7, #8]
 8000d08:	607a      	str	r2, [r7, #4]
 8000d0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d10:	f7ff ff5c 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	68b9      	ldr	r1, [r7, #8]
 8000d1a:	6978      	ldr	r0, [r7, #20]
 8000d1c:	f7ff ff8e 	bl	8000c3c <NVIC_EncodePriority>
 8000d20:	4602      	mov	r2, r0
 8000d22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d26:	4611      	mov	r1, r2
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff5d 	bl	8000be8 <__NVIC_SetPriority>
}
 8000d2e:	bf00      	nop
 8000d30:	3718      	adds	r7, #24
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffb0 	bl	8000ca4 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b088      	sub	sp, #32
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8000d60:	4baa      	ldr	r3, [pc, #680]	; (800100c <HAL_ETH_Init+0x2bc>)
 8000d62:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d101      	bne.n	8000d76 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
 8000d74:	e185      	b.n	8001082 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d106      	bne.n	8000d90 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f001 ff58 	bl	8002c40 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d90:	2300      	movs	r3, #0
 8000d92:	60bb      	str	r3, [r7, #8]
 8000d94:	4b9e      	ldr	r3, [pc, #632]	; (8001010 <HAL_ETH_Init+0x2c0>)
 8000d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d98:	4a9d      	ldr	r2, [pc, #628]	; (8001010 <HAL_ETH_Init+0x2c0>)
 8000d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9e:	6453      	str	r3, [r2, #68]	; 0x44
 8000da0:	4b9b      	ldr	r3, [pc, #620]	; (8001010 <HAL_ETH_Init+0x2c0>)
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da8:	60bb      	str	r3, [r7, #8]
 8000daa:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8000dac:	4b99      	ldr	r3, [pc, #612]	; (8001014 <HAL_ETH_Init+0x2c4>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4a98      	ldr	r2, [pc, #608]	; (8001014 <HAL_ETH_Init+0x2c4>)
 8000db2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000db6:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8000db8:	4b96      	ldr	r3, [pc, #600]	; (8001014 <HAL_ETH_Init+0x2c4>)
 8000dba:	685a      	ldr	r2, [r3, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6a1b      	ldr	r3, [r3, #32]
 8000dc0:	4994      	ldr	r1, [pc, #592]	; (8001014 <HAL_ETH_Init+0x2c4>)
 8000dc2:	4313      	orrs	r3, r2
 8000dc4:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000dce:	681a      	ldr	r2, [r3, #0]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f042 0201 	orr.w	r2, r2, #1
 8000dd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000ddc:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8000dde:	f7ff fea3 	bl	8000b28 <HAL_GetTick>
 8000de2:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000de4:	e011      	b.n	8000e0a <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8000de6:	f7ff fe9f 	bl	8000b28 <HAL_GetTick>
 8000dea:	4602      	mov	r2, r0
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	1ad3      	subs	r3, r2, r3
 8000df0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000df4:	d909      	bls.n	8000e0a <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2203      	movs	r2, #3
 8000dfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	2200      	movs	r2, #0
 8000e02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8000e06:	2303      	movs	r3, #3
 8000e08:	e13b      	b.n	8001082 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0301 	and.w	r3, r3, #1
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e4      	bne.n	8000de6 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f023 031c 	bic.w	r3, r3, #28
 8000e2a:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8000e2c:	f001 fea8 	bl	8002b80 <HAL_RCC_GetHCLKFreq>
 8000e30:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8000e32:	69bb      	ldr	r3, [r7, #24]
 8000e34:	4a78      	ldr	r2, [pc, #480]	; (8001018 <HAL_ETH_Init+0x2c8>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	d908      	bls.n	8000e4c <HAL_ETH_Init+0xfc>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	4a77      	ldr	r2, [pc, #476]	; (800101c <HAL_ETH_Init+0x2cc>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d804      	bhi.n	8000e4c <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	f043 0308 	orr.w	r3, r3, #8
 8000e48:	61fb      	str	r3, [r7, #28]
 8000e4a:	e027      	b.n	8000e9c <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	4a73      	ldr	r2, [pc, #460]	; (800101c <HAL_ETH_Init+0x2cc>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d908      	bls.n	8000e66 <HAL_ETH_Init+0x116>
 8000e54:	69bb      	ldr	r3, [r7, #24]
 8000e56:	4a72      	ldr	r2, [pc, #456]	; (8001020 <HAL_ETH_Init+0x2d0>)
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d804      	bhi.n	8000e66 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	f043 030c 	orr.w	r3, r3, #12
 8000e62:	61fb      	str	r3, [r7, #28]
 8000e64:	e01a      	b.n	8000e9c <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	4a6d      	ldr	r2, [pc, #436]	; (8001020 <HAL_ETH_Init+0x2d0>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d903      	bls.n	8000e76 <HAL_ETH_Init+0x126>
 8000e6e:	69bb      	ldr	r3, [r7, #24]
 8000e70:	4a6c      	ldr	r2, [pc, #432]	; (8001024 <HAL_ETH_Init+0x2d4>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d911      	bls.n	8000e9a <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	4a6a      	ldr	r2, [pc, #424]	; (8001024 <HAL_ETH_Init+0x2d4>)
 8000e7a:	4293      	cmp	r3, r2
 8000e7c:	d908      	bls.n	8000e90 <HAL_ETH_Init+0x140>
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	4a69      	ldr	r2, [pc, #420]	; (8001028 <HAL_ETH_Init+0x2d8>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d804      	bhi.n	8000e90 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f043 0304 	orr.w	r3, r3, #4
 8000e8c:	61fb      	str	r3, [r7, #28]
 8000e8e:	e005      	b.n	8000e9c <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	61fb      	str	r3, [r7, #28]
 8000e98:	e000      	b.n	8000e9c <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8000e9a:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	69fa      	ldr	r2, [r7, #28]
 8000ea2:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8000ea4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fb9a 	bl	80015e4 <HAL_ETH_WritePHYRegister>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d00b      	beq.n	8000ece <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8000eba:	6939      	ldr	r1, [r7, #16]
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f000 fd4f 	bl	8001960 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0d9      	b.n	8001082 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8000ece:	20ff      	movs	r0, #255	; 0xff
 8000ed0:	f7ff fe36 	bl	8000b40 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80a7 	beq.w	800102c <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8000ede:	f7ff fe23 	bl	8000b28 <HAL_GetTick>
 8000ee2:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	461a      	mov	r2, r3
 8000eea:	2101      	movs	r1, #1
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f000 fb11 	bl	8001514 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8000ef2:	f7ff fe19 	bl	8000b28 <HAL_GetTick>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	697b      	ldr	r3, [r7, #20]
 8000efa:	1ad3      	subs	r3, r2, r3
 8000efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f00:	4293      	cmp	r3, r2
 8000f02:	d90f      	bls.n	8000f24 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f08:	6939      	ldr	r1, [r7, #16]
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f000 fd28 	bl	8001960 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2201      	movs	r2, #1
 8000f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f20:	2303      	movs	r3, #3
 8000f22:	e0ae      	b.n	8001082 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d0da      	beq.n	8000ee4 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8000f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f32:	2100      	movs	r1, #0
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f000 fb55 	bl	80015e4 <HAL_ETH_WritePHYRegister>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d00b      	beq.n	8000f58 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000f44:	6939      	ldr	r1, [r7, #16]
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f000 fd0a 	bl	8001960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000f54:	2301      	movs	r3, #1
 8000f56:	e094      	b.n	8001082 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8000f58:	f7ff fde6 	bl	8000b28 <HAL_GetTick>
 8000f5c:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8000f5e:	f107 030c 	add.w	r3, r7, #12
 8000f62:	461a      	mov	r2, r3
 8000f64:	2101      	movs	r1, #1
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 fad4 	bl	8001514 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8000f6c:	f7ff fddc 	bl	8000b28 <HAL_GetTick>
 8000f70:	4602      	mov	r2, r0
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	1ad3      	subs	r3, r2, r3
 8000f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d90f      	bls.n	8000f9e <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8000f82:	6939      	ldr	r1, [r7, #16]
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	f000 fceb 	bl	8001960 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e071      	b.n	8001082 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	f003 0320 	and.w	r3, r3, #32
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0da      	beq.n	8000f5e <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8000fa8:	f107 030c 	add.w	r3, r7, #12
 8000fac:	461a      	mov	r2, r3
 8000fae:	211f      	movs	r1, #31
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 faaf 	bl	8001514 <HAL_ETH_ReadPHYRegister>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d00b      	beq.n	8000fd4 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8000fc0:	6939      	ldr	r1, [r7, #16]
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f000 fccc 	bl	8001960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e056      	b.n	8001082 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d004      	beq.n	8000fe8 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	e002      	b.n	8000fee <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f003 0304 	and.w	r3, r3, #4
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d003      	beq.n	8001000 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	e037      	b.n	8001070 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	e032      	b.n	8001070 <HAL_ETH_Init+0x320>
 800100a:	bf00      	nop
 800100c:	03938700 	.word	0x03938700
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	01312cff 	.word	0x01312cff
 800101c:	02160ebf 	.word	0x02160ebf
 8001020:	039386ff 	.word	0x039386ff
 8001024:	05f5e0ff 	.word	0x05f5e0ff
 8001028:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	08db      	lsrs	r3, r3, #3
 8001032:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	085b      	lsrs	r3, r3, #1
 800103a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 800103c:	4313      	orrs	r3, r2
 800103e:	b29b      	uxth	r3, r3
 8001040:	461a      	mov	r2, r3
 8001042:	2100      	movs	r1, #0
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 facd 	bl	80015e4 <HAL_ETH_WritePHYRegister>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d00b      	beq.n	8001068 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f000 fc82 	bl	8001960 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2201      	movs	r2, #1
 8001060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001064:	2301      	movs	r3, #1
 8001066:	e00c      	b.n	8001082 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001068:	f640 70ff 	movw	r0, #4095	; 0xfff
 800106c:	f7ff fd68 	bl	8000b40 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f000 fc74 	bl	8001960 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3720      	adds	r7, #32
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop

0800108c <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 800108c:	b480      	push	{r7}
 800108e:	b087      	sub	sp, #28
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800109a:	2300      	movs	r3, #0
 800109c:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_ETH_DMATxDescListInit+0x20>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e052      	b.n	8001152 <HAL_ETH_DMATxDescListInit+0xc6>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	2202      	movs	r2, #2
 80010b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	68ba      	ldr	r2, [r7, #8]
 80010c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	e030      	b.n	800112a <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	015b      	lsls	r3, r3, #5
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	4413      	add	r3, r2
 80010d0:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80010d8:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80010e0:	fb02 f303 	mul.w	r3, r2, r3
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	461a      	mov	r2, r3
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	3b01      	subs	r3, #1
 8001106:	697a      	ldr	r2, [r7, #20]
 8001108:	429a      	cmp	r2, r3
 800110a:	d208      	bcs.n	800111e <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	3301      	adds	r3, #1
 8001110:	015b      	lsls	r3, r3, #5
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	4413      	add	r3, r2
 8001116:	461a      	mov	r2, r3
 8001118:	693b      	ldr	r3, [r7, #16]
 800111a:	60da      	str	r2, [r3, #12]
 800111c:	e002      	b.n	8001124 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
 800112a:	697a      	ldr	r2, [r7, #20]
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3ca      	bcc.n	80010c8 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	68ba      	ldr	r2, [r7, #8]
 8001138:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800113c:	3310      	adds	r3, #16
 800113e:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	2200      	movs	r2, #0
 800114c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001150:	2300      	movs	r3, #0
}
 8001152:	4618      	mov	r0, r3
 8001154:	371c      	adds	r7, #28
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr

0800115e <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 800115e:	b480      	push	{r7}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800116c:	2300      	movs	r3, #0
 800116e:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001176:	2b01      	cmp	r3, #1
 8001178:	d101      	bne.n	800117e <HAL_ETH_DMARxDescListInit+0x20>
 800117a:	2302      	movs	r3, #2
 800117c:	e056      	b.n	800122c <HAL_ETH_DMARxDescListInit+0xce>
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2201      	movs	r2, #1
 8001182:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	68ba      	ldr	r2, [r7, #8]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001194:	2300      	movs	r3, #0
 8001196:	617b      	str	r3, [r7, #20]
 8001198:	e034      	b.n	8001204 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	015b      	lsls	r3, r3, #5
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	4413      	add	r3, r2
 80011a2:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80011aa:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80011b2:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011ba:	fb02 f303 	mul.w	r3, r2, r3
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	4413      	add	r3, r2
 80011c2:	461a      	mov	r2, r3
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d105      	bne.n	80011dc <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3b01      	subs	r3, #1
 80011e0:	697a      	ldr	r2, [r7, #20]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d208      	bcs.n	80011f8 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	3301      	adds	r3, #1
 80011ea:	015b      	lsls	r3, r3, #5
 80011ec:	68ba      	ldr	r2, [r7, #8]
 80011ee:	4413      	add	r3, r2
 80011f0:	461a      	mov	r2, r3
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	60da      	str	r2, [r3, #12]
 80011f6:	e002      	b.n	80011fe <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80011fe:	697b      	ldr	r3, [r7, #20]
 8001200:	3301      	adds	r3, #1
 8001202:	617b      	str	r3, [r7, #20]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d3c6      	bcc.n	800119a <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001216:	330c      	adds	r3, #12
 8001218:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	371c      	adds	r7, #28
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001238:	b480      	push	{r7}
 800123a:	b087      	sub	sp, #28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
 8001240:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	2300      	movs	r3, #0
 8001248:	60fb      	str	r3, [r7, #12]
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001254:	2b01      	cmp	r3, #1
 8001256:	d101      	bne.n	800125c <HAL_ETH_TransmitFrame+0x24>
 8001258:	2302      	movs	r3, #2
 800125a:	e0cd      	b.n	80013f8 <HAL_ETH_TransmitFrame+0x1c0>
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2201      	movs	r2, #1
 8001260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2202      	movs	r2, #2
 8001268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d109      	bne.n	8001286 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001282:	2301      	movs	r3, #1
 8001284:	e0b8      	b.n	80013f8 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	da09      	bge.n	80012a4 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2212      	movs	r2, #18
 8001294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	e0a9      	b.n	80013f8 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d915      	bls.n	80012da <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	4a54      	ldr	r2, [pc, #336]	; (8001404 <HAL_ETH_TransmitFrame+0x1cc>)
 80012b2:	fba2 2303 	umull	r2, r3, r2, r3
 80012b6:	0a9b      	lsrs	r3, r3, #10
 80012b8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80012ba:	683a      	ldr	r2, [r7, #0]
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_ETH_TransmitFrame+0x1cc>)
 80012be:	fba3 1302 	umull	r1, r3, r3, r2
 80012c2:	0a9b      	lsrs	r3, r3, #10
 80012c4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80012c8:	fb01 f303 	mul.w	r3, r1, r3
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	3301      	adds	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	e001      	b.n	80012de <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80012da:	2301      	movs	r3, #1
 80012dc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d11c      	bne.n	800131e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012ee:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80012f2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80012fe:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800130e:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	461a      	mov	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
 800131c:	e04b      	b.n	80013b6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
 8001322:	e044      	b.n	80013ae <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800132e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001332:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d107      	bne.n	800134a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800133e:	681a      	ldr	r2, [r3, #0]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001344:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001348:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001352:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3b01      	subs	r3, #1
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	429a      	cmp	r2, r3
 800135c:	d116      	bne.n	800138c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800136c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	4a25      	ldr	r2, [pc, #148]	; (8001408 <HAL_ETH_TransmitFrame+0x1d0>)
 8001372:	fb02 f203 	mul.w	r2, r2, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	4413      	add	r3, r2
 800137a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800137e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001384:	68fa      	ldr	r2, [r7, #12]
 8001386:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800138a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800139a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	461a      	mov	r2, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	3301      	adds	r3, #1
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	693a      	ldr	r2, [r7, #16]
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	429a      	cmp	r2, r3
 80013b4:	d3b6      	bcc.n	8001324 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013be:	3314      	adds	r3, #20
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0304 	and.w	r3, r3, #4
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d00d      	beq.n	80013e6 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d2:	3314      	adds	r3, #20
 80013d4:	2204      	movs	r2, #4
 80013d6:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013e0:	3304      	adds	r3, #4
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	371c      	adds	r7, #28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	ac02b00b 	.word	0xac02b00b
 8001408:	fffffa0c 	.word	0xfffffa0c

0800140c <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800141e:	2b01      	cmp	r3, #1
 8001420:	d101      	bne.n	8001426 <HAL_ETH_GetReceivedFrame+0x1a>
 8001422:	2302      	movs	r3, #2
 8001424:	e070      	b.n	8001508 <HAL_ETH_GetReceivedFrame+0xfc>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2201      	movs	r2, #1
 800142a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2202      	movs	r2, #2
 8001432:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db5a      	blt.n	80014f6 <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144a:	2b00      	cmp	r3, #0
 800144c:	d030      	beq.n	80014b0 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	2b01      	cmp	r3, #1
 800145e:	d103      	bne.n	8001468 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	0c1b      	lsrs	r3, r3, #16
 8001478:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800147c:	3b04      	subs	r3, #4
 800147e:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	68fa      	ldr	r2, [r7, #12]
 8001484:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	68db      	ldr	r3, [r3, #12]
 8001496:	461a      	mov	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	e02b      	b.n	8001508 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d010      	beq.n	80014e0 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	461a      	mov	r2, r3
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	629a      	str	r2, [r3, #40]	; 0x28
 80014de:	e00a      	b.n	80014f6 <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014e4:	1c5a      	adds	r2, r3, #1
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3714      	adds	r7, #20
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	460b      	mov	r3, r1
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b82      	cmp	r3, #130	; 0x82
 8001534:	d101      	bne.n	800153a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001536:	2302      	movs	r3, #2
 8001538:	e050      	b.n	80015dc <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2282      	movs	r2, #130	; 0x82
 800153e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	691b      	ldr	r3, [r3, #16]
 8001548:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	f003 031c 	and.w	r3, r3, #28
 8001550:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	8a1b      	ldrh	r3, [r3, #16]
 8001556:	02db      	lsls	r3, r3, #11
 8001558:	b29b      	uxth	r3, r3
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	4313      	orrs	r3, r2
 800155e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001560:	897b      	ldrh	r3, [r7, #10]
 8001562:	019b      	lsls	r3, r3, #6
 8001564:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	4313      	orrs	r3, r2
 800156c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f023 0302 	bic.w	r3, r3, #2
 8001574:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f043 0301 	orr.w	r3, r3, #1
 800157c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001586:	f7ff facf 	bl	8000b28 <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800158c:	e015      	b.n	80015ba <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800158e:	f7ff facb 	bl	8000b28 <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800159c:	d309      	bcc.n	80015b2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80015a6:	68fb      	ldr	r3, [r7, #12]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e014      	b.n	80015dc <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1e4      	bne.n	800158e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695b      	ldr	r3, [r3, #20]
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2201      	movs	r2, #1
 80015d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b086      	sub	sp, #24
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	460b      	mov	r3, r1
 80015ee:	607a      	str	r2, [r7, #4]
 80015f0:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b42      	cmp	r3, #66	; 0x42
 8001604:	d101      	bne.n	800160a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	e04e      	b.n	80016a8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2242      	movs	r2, #66	; 0x42
 800160e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f003 031c 	and.w	r3, r3, #28
 8001620:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	8a1b      	ldrh	r3, [r3, #16]
 8001626:	02db      	lsls	r3, r3, #11
 8001628:	b29b      	uxth	r3, r3
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001630:	897b      	ldrh	r3, [r7, #10]
 8001632:	019b      	lsls	r3, r3, #6
 8001634:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	4313      	orrs	r3, r2
 800163c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	b29a      	uxth	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	697a      	ldr	r2, [r7, #20]
 800165e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001660:	f7ff fa62 	bl	8000b28 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001666:	e015      	b.n	8001694 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001668:	f7ff fa5e 	bl	8000b28 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001676:	d309      	bcc.n	800168c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2201      	movs	r2, #1
 800167c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	2200      	movs	r2, #0
 8001684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001688:	2303      	movs	r3, #3
 800168a:	e00d      	b.n	80016a8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	691b      	ldr	r3, [r3, #16]
 8001692:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1e4      	bne.n	8001668 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3718      	adds	r7, #24
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}

080016b0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d101      	bne.n	80016c6 <HAL_ETH_Start+0x16>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e01f      	b.n	8001706 <HAL_ETH_Start+0x56>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2202      	movs	r2, #2
 80016d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 fb44 	bl	8001d64 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 fb7b 	bl	8001dd8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 fc12 	bl	8001f0c <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f000 fbaf 	bl	8001e4c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 fbdc 	bl	8001eac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2200      	movs	r2, #0
 8001700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800171c:	2b01      	cmp	r3, #1
 800171e:	d101      	bne.n	8001724 <HAL_ETH_Stop+0x16>
 8001720:	2302      	movs	r3, #2
 8001722:	e01f      	b.n	8001764 <HAL_ETH_Stop+0x56>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2201      	movs	r2, #1
 8001728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2202      	movs	r2, #2
 8001730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f000 fba1 	bl	8001e7c <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 800173a:	6878      	ldr	r0, [r7, #4]
 800173c:	f000 fbce 	bl	8001edc <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f000 fb66 	bl	8001e12 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f000 fbe0 	bl	8001f0c <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 fb26 	bl	8001d9e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001780:	2b01      	cmp	r3, #1
 8001782:	d101      	bne.n	8001788 <HAL_ETH_ConfigMAC+0x1c>
 8001784:	2302      	movs	r3, #2
 8001786:	e0e4      	b.n	8001952 <HAL_ETH_ConfigMAC+0x1e6>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2201      	movs	r2, #1
 800178c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2202      	movs	r2, #2
 8001794:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80b1 	beq.w	8001902 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4b6c      	ldr	r3, [pc, #432]	; (800195c <HAL_ETH_ConfigMAC+0x1f0>)
 80017ac:	4013      	ands	r3, r2
 80017ae:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80017b8:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80017be:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80017c4:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80017ca:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80017d0:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80017d6:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80017dc:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80017e2:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80017e8:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80017ee:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80017f4:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80017fa:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	68fa      	ldr	r2, [r7, #12]
 8001808:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001812:	2001      	movs	r0, #1
 8001814:	f7ff f994 	bl	8000b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001828:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 800182e:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001834:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 800183a:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001840:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001846:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001852:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001854:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800185e:	2001      	movs	r0, #1
 8001860:	f7ff f96e 	bl	8000b40 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001874:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800187e:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800188e:	4013      	ands	r3, r2
 8001890:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800189c:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80018a2:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80018a8:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80018ae:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80018b4:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80018cc:	2001      	movs	r0, #1
 80018ce:	f7ff f937 	bl	8000b40 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80018f2:	2001      	movs	r0, #1
 80018f4:	f7ff f924 	bl	8000b40 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	68fa      	ldr	r2, [r7, #12]
 80018fe:	61da      	str	r2, [r3, #28]
 8001900:	e01e      	b.n	8001940 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001910:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	68fa      	ldr	r2, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001932:	2001      	movs	r0, #1
 8001934:	f7ff f904 	bl	8000b40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3710      	adds	r7, #16
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	ff20810f 	.word	0xff20810f

08001960 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b0b0      	sub	sp, #192	; 0xc0
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d007      	beq.n	8001986 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001984:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001986:	2300      	movs	r3, #0
 8001988:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800198e:	2300      	movs	r3, #0
 8001990:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800199a:	2300      	movs	r3, #0
 800199c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d103      	bne.n	80019ae <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80019a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019aa:	663b      	str	r3, [r7, #96]	; 0x60
 80019ac:	e001      	b.n	80019b2 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80019b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019b6:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80019bc:	2300      	movs	r3, #0
 80019be:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80019c0:	2300      	movs	r3, #0
 80019c2:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80019cc:	2340      	movs	r3, #64	; 0x40
 80019ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80019dc:	2300      	movs	r3, #0
 80019de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001a06:	2300      	movs	r3, #0
 8001a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001a12:	2300      	movs	r3, #0
 8001a14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001a34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a38:	4bac      	ldr	r3, [pc, #688]	; (8001cec <ETH_MACDMAConfig+0x38c>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a40:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a44:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001a46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001a48:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001a4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001a4c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001a52:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001a56:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001a58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001a5a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001a60:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001a64:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001a68:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001a6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001a6c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001a70:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001a72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001a74:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001a76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001a88:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff f853 	bl	8000b40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aa2:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001aa4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001aa6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001aa8:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001aaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001aac:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001aae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001ab2:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001ab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001ab8:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001aba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001abe:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001ac0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001ac4:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001ac8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001ad0:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001ad2:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f7ff f82e 	bl	8000b40 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001aec:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001af6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001b00:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b10:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001b14:	4013      	ands	r3, r2
 8001b16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001b1e:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001b20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b24:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001b26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001b2a:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001b2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001b30:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001b32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001b36:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001b3c:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001b3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b42:	4313      	orrs	r3, r2
 8001b44:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b50:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b5c:	2001      	movs	r0, #1
 8001b5e:	f7fe ffef 	bl	8000b40 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b6a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b6c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001b70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	69db      	ldr	r3, [r3, #28]
 8001b82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b86:	2001      	movs	r0, #1
 8001b88:	f7fe ffda 	bl	8000b40 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001b94:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001b96:	2300      	movs	r3, #0
 8001b98:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001b9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b9e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001ba4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ba8:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001baa:	2300      	movs	r3, #0
 8001bac:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001bba:	2304      	movs	r3, #4
 8001bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001bbe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001bc4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bc8:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001bca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bce:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001bd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bd4:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001bd6:	2380      	movs	r3, #128	; 0x80
 8001bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bea:	3318      	adds	r3, #24
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001bf2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <ETH_MACDMAConfig+0x390>)
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001bfe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001c00:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c02:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001c04:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001c06:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001c08:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001c0a:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001c0c:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001c0e:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001c10:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001c12:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001c14:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001c16:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001c1a:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001c1e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c24:	4313      	orrs	r3, r2
 8001c26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c32:	3318      	adds	r3, #24
 8001c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c38:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	3318      	adds	r3, #24
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c4a:	2001      	movs	r0, #1
 8001c4c:	f7fe ff78 	bl	8000b40 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c58:	3318      	adds	r3, #24
 8001c5a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001c5e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c64:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001c68:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001c6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001c6c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8001c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8001c70:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001c74:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8001c76:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8001c78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8001c7a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001c84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c88:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c98:	2001      	movs	r0, #1
 8001c9a:	f7fe ff51 	bl	8000b40 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001caa:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d10f      	bne.n	8001cd4 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cbc:	331c      	adds	r3, #28
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cd0:	331c      	adds	r3, #28
 8001cd2:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f000 f809 	bl	8001cf4 <ETH_MACAddressConfig>
}
 8001ce2:	bf00      	nop
 8001ce4:	37c0      	adds	r7, #192	; 0xc0
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	ff20810f 	.word	0xff20810f
 8001cf0:	f8de3f23 	.word	0xf8de3f23

08001cf4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b087      	sub	sp, #28
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3305      	adds	r3, #5
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	3204      	adds	r2, #4
 8001d0c:	7812      	ldrb	r2, [r2, #0]
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <ETH_MACAddressConfig+0x68>)
 8001d16:	4413      	add	r3, r2
 8001d18:	461a      	mov	r2, r3
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3303      	adds	r3, #3
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	061a      	lsls	r2, r3, #24
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	041b      	lsls	r3, r3, #16
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3301      	adds	r3, #1
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	021b      	lsls	r3, r3, #8
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	7812      	ldrb	r2, [r2, #0]
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <ETH_MACAddressConfig+0x6c>)
 8001d46:	4413      	add	r3, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	6013      	str	r3, [r2, #0]
}
 8001d4e:	bf00      	nop
 8001d50:	371c      	adds	r7, #28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40028040 	.word	0x40028040
 8001d60:	40028044 	.word	0x40028044

08001d64 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0208 	orr.w	r2, r2, #8
 8001d7e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f000 f8e9 	bl	8001f60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b084      	sub	sp, #16
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f022 0208 	bic.w	r2, r2, #8
 8001db8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 f8cc 	bl	8001f60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68fa      	ldr	r2, [r7, #12]
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3710      	adds	r7, #16
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001de0:	2300      	movs	r3, #0
 8001de2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0204 	orr.w	r2, r2, #4
 8001df2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	f000 f8af 	bl	8001f60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	601a      	str	r2, [r3, #0]
}
 8001e0a:	bf00      	nop
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0204 	bic.w	r2, r2, #4
 8001e2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001e36:	2001      	movs	r0, #1
 8001e38:	f000 f892 	bl	8001f60 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68fa      	ldr	r2, [r7, #12]
 8001e42:	601a      	str	r2, [r3, #0]
}
 8001e44:	bf00      	nop
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e5c:	3318      	adds	r3, #24
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr

08001e7c <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8001e7c:	b480      	push	{r7}
 8001e7e:	b083      	sub	sp, #12
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e98:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9c:	3318      	adds	r3, #24
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ebc:	3318      	adds	r3, #24
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f042 0202 	orr.w	r2, r2, #2
 8001ec8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ecc:	3318      	adds	r3, #24
 8001ece:	601a      	str	r2, [r3, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr

08001edc <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eec:	3318      	adds	r3, #24
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f022 0202 	bic.w	r2, r2, #2
 8001ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efc:	3318      	adds	r3, #24
 8001efe:	601a      	str	r2, [r3, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f20:	3318      	adds	r3, #24
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8001f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f30:	3318      	adds	r3, #24
 8001f32:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f3c:	3318      	adds	r3, #24
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8001f42:	2001      	movs	r0, #1
 8001f44:	f000 f80c 	bl	8001f60 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f52:	3318      	adds	r3, #24
 8001f54:	601a      	str	r2, [r3, #0]
}
 8001f56:	bf00      	nop
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b085      	sub	sp, #20
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f68:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <ETH_Delay+0x34>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a0a      	ldr	r2, [pc, #40]	; (8001f98 <ETH_Delay+0x38>)
 8001f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f72:	0a5b      	lsrs	r3, r3, #9
 8001f74:	687a      	ldr	r2, [r7, #4]
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8001f7c:	bf00      	nop
  } 
  while (Delay --);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	1e5a      	subs	r2, r3, #1
 8001f82:	60fa      	str	r2, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f9      	bne.n	8001f7c <ETH_Delay+0x1c>
}
 8001f88:	bf00      	nop
 8001f8a:	3714      	adds	r7, #20
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20000000 	.word	0x20000000
 8001f98:	10624dd3 	.word	0x10624dd3

08001f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b089      	sub	sp, #36	; 0x24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	e177      	b.n	80022a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4013      	ands	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	f040 8166 	bne.w	80022a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_GPIO_Init+0x5a>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d007      	beq.n	8001ff6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fea:	2b11      	cmp	r3, #17
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	2b12      	cmp	r3, #18
 8001ff4:	d130      	bne.n	8002058 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	005b      	lsls	r3, r3, #1
 8002000:	2203      	movs	r2, #3
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	fa02 f303 	lsl.w	r3, r2, r3
 800201a:	69ba      	ldr	r2, [r7, #24]
 800201c:	4313      	orrs	r3, r2
 800201e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800202c:	2201      	movs	r2, #1
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	f003 0201 	and.w	r2, r3, #1
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	68db      	ldr	r3, [r3, #12]
 800205c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b02      	cmp	r3, #2
 800208e:	d003      	beq.n	8002098 <HAL_GPIO_Init+0xfc>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b12      	cmp	r3, #18
 8002096:	d123      	bne.n	80020e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	220f      	movs	r2, #15
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	691a      	ldr	r2, [r3, #16]
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	08da      	lsrs	r2, r3, #3
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	3208      	adds	r2, #8
 80020da:	69b9      	ldr	r1, [r7, #24]
 80020dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	2203      	movs	r2, #3
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 0203 	and.w	r2, r3, #3
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80c0 	beq.w	80022a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b65      	ldr	r3, [pc, #404]	; (80022bc <HAL_GPIO_Init+0x320>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	4a64      	ldr	r2, [pc, #400]	; (80022bc <HAL_GPIO_Init+0x320>)
 800212c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002130:	6453      	str	r3, [r2, #68]	; 0x44
 8002132:	4b62      	ldr	r3, [pc, #392]	; (80022bc <HAL_GPIO_Init+0x320>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800213e:	4a60      	ldr	r2, [pc, #384]	; (80022c0 <HAL_GPIO_Init+0x324>)
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	089b      	lsrs	r3, r3, #2
 8002144:	3302      	adds	r3, #2
 8002146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	220f      	movs	r2, #15
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a57      	ldr	r2, [pc, #348]	; (80022c4 <HAL_GPIO_Init+0x328>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d037      	beq.n	80021da <HAL_GPIO_Init+0x23e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a56      	ldr	r2, [pc, #344]	; (80022c8 <HAL_GPIO_Init+0x32c>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d031      	beq.n	80021d6 <HAL_GPIO_Init+0x23a>
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4a55      	ldr	r2, [pc, #340]	; (80022cc <HAL_GPIO_Init+0x330>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d02b      	beq.n	80021d2 <HAL_GPIO_Init+0x236>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a54      	ldr	r2, [pc, #336]	; (80022d0 <HAL_GPIO_Init+0x334>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d025      	beq.n	80021ce <HAL_GPIO_Init+0x232>
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a53      	ldr	r2, [pc, #332]	; (80022d4 <HAL_GPIO_Init+0x338>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d01f      	beq.n	80021ca <HAL_GPIO_Init+0x22e>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_GPIO_Init+0x33c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d019      	beq.n	80021c6 <HAL_GPIO_Init+0x22a>
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a51      	ldr	r2, [pc, #324]	; (80022dc <HAL_GPIO_Init+0x340>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d013      	beq.n	80021c2 <HAL_GPIO_Init+0x226>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a50      	ldr	r2, [pc, #320]	; (80022e0 <HAL_GPIO_Init+0x344>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d00d      	beq.n	80021be <HAL_GPIO_Init+0x222>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4f      	ldr	r2, [pc, #316]	; (80022e4 <HAL_GPIO_Init+0x348>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d007      	beq.n	80021ba <HAL_GPIO_Init+0x21e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a4e      	ldr	r2, [pc, #312]	; (80022e8 <HAL_GPIO_Init+0x34c>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d101      	bne.n	80021b6 <HAL_GPIO_Init+0x21a>
 80021b2:	2309      	movs	r3, #9
 80021b4:	e012      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021b6:	230a      	movs	r3, #10
 80021b8:	e010      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ba:	2308      	movs	r3, #8
 80021bc:	e00e      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021be:	2307      	movs	r3, #7
 80021c0:	e00c      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c2:	2306      	movs	r3, #6
 80021c4:	e00a      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021c6:	2305      	movs	r3, #5
 80021c8:	e008      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ca:	2304      	movs	r3, #4
 80021cc:	e006      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021ce:	2303      	movs	r3, #3
 80021d0:	e004      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e002      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e000      	b.n	80021dc <HAL_GPIO_Init+0x240>
 80021da:	2300      	movs	r3, #0
 80021dc:	69fa      	ldr	r2, [r7, #28]
 80021de:	f002 0203 	and.w	r2, r2, #3
 80021e2:	0092      	lsls	r2, r2, #2
 80021e4:	4093      	lsls	r3, r2
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021ec:	4934      	ldr	r1, [pc, #208]	; (80022c0 <HAL_GPIO_Init+0x324>)
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	089b      	lsrs	r3, r3, #2
 80021f2:	3302      	adds	r3, #2
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021fa:	4b3c      	ldr	r3, [pc, #240]	; (80022ec <HAL_GPIO_Init+0x350>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	43db      	mvns	r3, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4013      	ands	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d003      	beq.n	800221e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800221e:	4a33      	ldr	r2, [pc, #204]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002224:	4b31      	ldr	r3, [pc, #196]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	43db      	mvns	r3, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4013      	ands	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d003      	beq.n	8002248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002248:	4a28      	ldr	r2, [pc, #160]	; (80022ec <HAL_GPIO_Init+0x350>)
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800224e:	4b27      	ldr	r3, [pc, #156]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002250:	689b      	ldr	r3, [r3, #8]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4313      	orrs	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002272:	4a1e      	ldr	r2, [pc, #120]	; (80022ec <HAL_GPIO_Init+0x350>)
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <HAL_GPIO_Init+0x350>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800229c:	4a13      	ldr	r2, [pc, #76]	; (80022ec <HAL_GPIO_Init+0x350>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	3301      	adds	r3, #1
 80022a6:	61fb      	str	r3, [r7, #28]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b0f      	cmp	r3, #15
 80022ac:	f67f ae84 	bls.w	8001fb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b0:	bf00      	nop
 80022b2:	3724      	adds	r7, #36	; 0x24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40013800 	.word	0x40013800
 80022c4:	40020000 	.word	0x40020000
 80022c8:	40020400 	.word	0x40020400
 80022cc:	40020800 	.word	0x40020800
 80022d0:	40020c00 	.word	0x40020c00
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40021400 	.word	0x40021400
 80022dc:	40021800 	.word	0x40021800
 80022e0:	40021c00 	.word	0x40021c00
 80022e4:	40022000 	.word	0x40022000
 80022e8:	40022400 	.word	0x40022400
 80022ec:	40013c00 	.word	0x40013c00

080022f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	460b      	mov	r3, r1
 80022fa:	807b      	strh	r3, [r7, #2]
 80022fc:	4613      	mov	r3, r2
 80022fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002300:	787b      	ldrb	r3, [r7, #1]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002306:	887a      	ldrh	r2, [r7, #2]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800230c:	e003      	b.n	8002316 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800230e:	887b      	ldrh	r3, [r7, #2]
 8002310:	041a      	lsls	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	619a      	str	r2, [r3, #24]
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
	...

08002324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b086      	sub	sp, #24
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d101      	bne.n	8002336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e25b      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002342:	4ba3      	ldr	r3, [pc, #652]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800234e:	4ba0      	ldr	r3, [pc, #640]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002356:	2b08      	cmp	r3, #8
 8002358:	d112      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800235a:	4b9d      	ldr	r3, [pc, #628]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002366:	d10b      	bne.n	8002380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002368:	4b99      	ldr	r3, [pc, #612]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d05b      	beq.n	800242c <HAL_RCC_OscConfig+0x108>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d157      	bne.n	800242c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e236      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002388:	d106      	bne.n	8002398 <HAL_RCC_OscConfig+0x74>
 800238a:	4b91      	ldr	r3, [pc, #580]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a90      	ldr	r2, [pc, #576]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002394:	6013      	str	r3, [r2, #0]
 8002396:	e01d      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023a0:	d10c      	bne.n	80023bc <HAL_RCC_OscConfig+0x98>
 80023a2:	4b8b      	ldr	r3, [pc, #556]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a8a      	ldr	r2, [pc, #552]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	4b88      	ldr	r3, [pc, #544]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a87      	ldr	r2, [pc, #540]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	e00b      	b.n	80023d4 <HAL_RCC_OscConfig+0xb0>
 80023bc:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a83      	ldr	r2, [pc, #524]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023c6:	6013      	str	r3, [r2, #0]
 80023c8:	4b81      	ldr	r3, [pc, #516]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a80      	ldr	r2, [pc, #512]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d013      	beq.n	8002404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe fba4 	bl	8000b28 <HAL_GetTick>
 80023e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023e2:	e008      	b.n	80023f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023e4:	f7fe fba0 	bl	8000b28 <HAL_GetTick>
 80023e8:	4602      	mov	r2, r0
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	2b64      	cmp	r3, #100	; 0x64
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e1fb      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b76      	ldr	r3, [pc, #472]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d0f0      	beq.n	80023e4 <HAL_RCC_OscConfig+0xc0>
 8002402:	e014      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002404:	f7fe fb90 	bl	8000b28 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7fe fb8c 	bl	8000b28 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b64      	cmp	r3, #100	; 0x64
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e1e7      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800241e:	4b6c      	ldr	r3, [pc, #432]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0xe8>
 800242a:	e000      	b.n	800242e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d063      	beq.n	8002502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800243a:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00b      	beq.n	800245e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002446:	4b62      	ldr	r3, [pc, #392]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800244e:	2b08      	cmp	r3, #8
 8002450:	d11c      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002452:	4b5f      	ldr	r3, [pc, #380]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d116      	bne.n	800248c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245e:	4b5c      	ldr	r3, [pc, #368]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	2b01      	cmp	r3, #1
 8002470:	d001      	beq.n	8002476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e1bb      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	4952      	ldr	r1, [pc, #328]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	e03a      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d020      	beq.n	80024d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002494:	4b4f      	ldr	r3, [pc, #316]	; (80025d4 <HAL_RCC_OscConfig+0x2b0>)
 8002496:	2201      	movs	r2, #1
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800249a:	f7fe fb45 	bl	8000b28 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024a2:	f7fe fb41 	bl	8000b28 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e19c      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024c0:	4b43      	ldr	r3, [pc, #268]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4940      	ldr	r1, [pc, #256]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	600b      	str	r3, [r1, #0]
 80024d4:	e015      	b.n	8002502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_OscConfig+0x2b0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7fe fb24 	bl	8000b28 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024e4:	f7fe fb20 	bl	8000b28 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17b      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024f6:	4b36      	ldr	r3, [pc, #216]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	2b00      	cmp	r3, #0
 800250c:	d030      	beq.n	8002570 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d016      	beq.n	8002544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002516:	4b30      	ldr	r3, [pc, #192]	; (80025d8 <HAL_RCC_OscConfig+0x2b4>)
 8002518:	2201      	movs	r2, #1
 800251a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f7fe fb04 	bl	8000b28 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002524:	f7fe fb00 	bl	8000b28 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b02      	cmp	r3, #2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e15b      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0x200>
 8002542:	e015      	b.n	8002570 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	4b24      	ldr	r3, [pc, #144]	; (80025d8 <HAL_RCC_OscConfig+0x2b4>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254a:	f7fe faed 	bl	8000b28 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002552:	f7fe fae9 	bl	8000b28 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e144      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002564:	4b1a      	ldr	r3, [pc, #104]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	f000 80a0 	beq.w	80026be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800257e:	2300      	movs	r3, #0
 8002580:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002582:	4b13      	ldr	r3, [pc, #76]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	60bb      	str	r3, [r7, #8]
 8002592:	4b0f      	ldr	r3, [pc, #60]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002596:	4a0e      	ldr	r2, [pc, #56]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	; 0x40
 800259e:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCC_OscConfig+0x2ac>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	60bb      	str	r3, [r7, #8]
 80025a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025aa:	2301      	movs	r3, #1
 80025ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d121      	bne.n	80025fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a07      	ldr	r2, [pc, #28]	; (80025dc <HAL_RCC_OscConfig+0x2b8>)
 80025c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025c6:	f7fe faaf 	bl	8000b28 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025cc:	e011      	b.n	80025f2 <HAL_RCC_OscConfig+0x2ce>
 80025ce:	bf00      	nop
 80025d0:	40023800 	.word	0x40023800
 80025d4:	42470000 	.word	0x42470000
 80025d8:	42470e80 	.word	0x42470e80
 80025dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e0:	f7fe faa2 	bl	8000b28 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e0fd      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <HAL_RCC_OscConfig+0x4d4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d0f0      	beq.n	80025e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b01      	cmp	r3, #1
 8002604:	d106      	bne.n	8002614 <HAL_RCC_OscConfig+0x2f0>
 8002606:	4b7d      	ldr	r3, [pc, #500]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a7c      	ldr	r2, [pc, #496]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	e01c      	b.n	800264e <HAL_RCC_OscConfig+0x32a>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b05      	cmp	r3, #5
 800261a:	d10c      	bne.n	8002636 <HAL_RCC_OscConfig+0x312>
 800261c:	4b77      	ldr	r3, [pc, #476]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	4a76      	ldr	r2, [pc, #472]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002622:	f043 0304 	orr.w	r3, r3, #4
 8002626:	6713      	str	r3, [r2, #112]	; 0x70
 8002628:	4b74      	ldr	r3, [pc, #464]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4a73      	ldr	r2, [pc, #460]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6713      	str	r3, [r2, #112]	; 0x70
 8002634:	e00b      	b.n	800264e <HAL_RCC_OscConfig+0x32a>
 8002636:	4b71      	ldr	r3, [pc, #452]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263a:	4a70      	ldr	r2, [pc, #448]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800263c:	f023 0301 	bic.w	r3, r3, #1
 8002640:	6713      	str	r3, [r2, #112]	; 0x70
 8002642:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002646:	4a6d      	ldr	r2, [pc, #436]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002648:	f023 0304 	bic.w	r3, r3, #4
 800264c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d015      	beq.n	8002682 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002656:	f7fe fa67 	bl	8000b28 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800265c:	e00a      	b.n	8002674 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265e:	f7fe fa63 	bl	8000b28 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	f241 3288 	movw	r2, #5000	; 0x1388
 800266c:	4293      	cmp	r3, r2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e0bc      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	4b61      	ldr	r3, [pc, #388]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0ee      	beq.n	800265e <HAL_RCC_OscConfig+0x33a>
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002682:	f7fe fa51 	bl	8000b28 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fa4d 	bl	8000b28 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0a6      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d1ee      	bne.n	800268a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026ac:	7dfb      	ldrb	r3, [r7, #23]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d105      	bne.n	80026be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b2:	4b52      	ldr	r3, [pc, #328]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a51      	ldr	r2, [pc, #324]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 80026b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	f000 8092 	beq.w	80027ec <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026c8:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 030c 	and.w	r3, r3, #12
 80026d0:	2b08      	cmp	r3, #8
 80026d2:	d05c      	beq.n	800278e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d141      	bne.n	8002760 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026dc:	4b48      	ldr	r3, [pc, #288]	; (8002800 <HAL_RCC_OscConfig+0x4dc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e2:	f7fe fa21 	bl	8000b28 <HAL_GetTick>
 80026e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e8:	e008      	b.n	80026fc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ea:	f7fe fa1d 	bl	8000b28 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b02      	cmp	r3, #2
 80026f6:	d901      	bls.n	80026fc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026f8:	2303      	movs	r3, #3
 80026fa:	e078      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fc:	4b3f      	ldr	r3, [pc, #252]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1f0      	bne.n	80026ea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002716:	019b      	lsls	r3, r3, #6
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271e:	085b      	lsrs	r3, r3, #1
 8002720:	3b01      	subs	r3, #1
 8002722:	041b      	lsls	r3, r3, #16
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	061b      	lsls	r3, r3, #24
 800272c:	4933      	ldr	r1, [pc, #204]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002732:	4b33      	ldr	r3, [pc, #204]	; (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002738:	f7fe f9f6 	bl	8000b28 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002740:	f7fe f9f2 	bl	8000b28 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e04d      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d0f0      	beq.n	8002740 <HAL_RCC_OscConfig+0x41c>
 800275e:	e045      	b.n	80027ec <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002760:	4b27      	ldr	r3, [pc, #156]	; (8002800 <HAL_RCC_OscConfig+0x4dc>)
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002766:	f7fe f9df 	bl	8000b28 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276e:	f7fe f9db 	bl	8000b28 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e036      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002780:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x44a>
 800278c:	e02e      	b.n	80027ec <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e029      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800279a:	4b18      	ldr	r3, [pc, #96]	; (80027fc <HAL_RCC_OscConfig+0x4d8>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d11c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d115      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027bc:	68fa      	ldr	r2, [r7, #12]
 80027be:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027c2:	4013      	ands	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d106      	bne.n	80027e8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d001      	beq.n	80027ec <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3718      	adds	r7, #24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40007000 	.word	0x40007000
 80027fc:	40023800 	.word	0x40023800
 8002800:	42470060 	.word	0x42470060

08002804 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0cc      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 030f 	and.w	r3, r3, #15
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	429a      	cmp	r2, r3
 8002824:	d90c      	bls.n	8002840 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002826:	4b65      	ldr	r3, [pc, #404]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b63      	ldr	r3, [pc, #396]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0b8      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d020      	beq.n	800288e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002858:	4b59      	ldr	r3, [pc, #356]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	4a58      	ldr	r2, [pc, #352]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002862:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0308 	and.w	r3, r3, #8
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002870:	4b53      	ldr	r3, [pc, #332]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a52      	ldr	r2, [pc, #328]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800287a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800287c:	4b50      	ldr	r3, [pc, #320]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	494d      	ldr	r1, [pc, #308]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b00      	cmp	r3, #0
 8002898:	d044      	beq.n	8002924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d107      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028a2:	4b47      	ldr	r3, [pc, #284]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d119      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e07f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d003      	beq.n	80028c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d107      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028c2:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d109      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e06f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d2:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e067      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b37      	ldr	r3, [pc, #220]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4934      	ldr	r1, [pc, #208]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028f4:	f7fe f918 	bl	8000b28 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7fe f914 	bl	8000b28 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e04f      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b2b      	ldr	r3, [pc, #172]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 030f 	and.w	r3, r3, #15
 800292c:	683a      	ldr	r2, [r7, #0]
 800292e:	429a      	cmp	r2, r3
 8002930:	d20c      	bcs.n	800294c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002932:	4b22      	ldr	r3, [pc, #136]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 8002934:	683a      	ldr	r2, [r7, #0]
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800293a:	4b20      	ldr	r3, [pc, #128]	; (80029bc <HAL_RCC_ClockConfig+0x1b8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 030f 	and.w	r3, r3, #15
 8002942:	683a      	ldr	r2, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d001      	beq.n	800294c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e032      	b.n	80029b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b00      	cmp	r3, #0
 8002956:	d008      	beq.n	800296a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002958:	4b19      	ldr	r3, [pc, #100]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4916      	ldr	r1, [pc, #88]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0308 	and.w	r3, r3, #8
 8002972:	2b00      	cmp	r3, #0
 8002974:	d009      	beq.n	800298a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002976:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	490e      	ldr	r1, [pc, #56]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800298a:	f000 f821 	bl	80029d0 <HAL_RCC_GetSysClockFreq>
 800298e:	4601      	mov	r1, r0
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	4a0a      	ldr	r2, [pc, #40]	; (80029c4 <HAL_RCC_ClockConfig+0x1c0>)
 800299c:	5cd3      	ldrb	r3, [r2, r3]
 800299e:	fa21 f303 	lsr.w	r3, r1, r3
 80029a2:	4a09      	ldr	r2, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1c4>)
 80029a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029a6:	4b09      	ldr	r3, [pc, #36]	; (80029cc <HAL_RCC_ClockConfig+0x1c8>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe f878 	bl	8000aa0 <HAL_InitTick>

  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023c00 	.word	0x40023c00
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08013828 	.word	0x08013828
 80029c8:	20000000 	.word	0x20000000
 80029cc:	20000004 	.word	0x20000004

080029d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d2:	b085      	sub	sp, #20
 80029d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	607b      	str	r3, [r7, #4]
 80029da:	2300      	movs	r3, #0
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	2300      	movs	r3, #0
 80029e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e6:	4b63      	ldr	r3, [pc, #396]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d007      	beq.n	8002a02 <HAL_RCC_GetSysClockFreq+0x32>
 80029f2:	2b08      	cmp	r3, #8
 80029f4:	d008      	beq.n	8002a08 <HAL_RCC_GetSysClockFreq+0x38>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f040 80b4 	bne.w	8002b64 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029fc:	4b5e      	ldr	r3, [pc, #376]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029fe:	60bb      	str	r3, [r7, #8]
       break;
 8002a00:	e0b3      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a02:	4b5e      	ldr	r3, [pc, #376]	; (8002b7c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a04:	60bb      	str	r3, [r7, #8]
      break;
 8002a06:	e0b0      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a08:	4b5a      	ldr	r3, [pc, #360]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a10:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a12:	4b58      	ldr	r3, [pc, #352]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d04a      	beq.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1e:	4b55      	ldr	r3, [pc, #340]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	099b      	lsrs	r3, r3, #6
 8002a24:	f04f 0400 	mov.w	r4, #0
 8002a28:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a2c:	f04f 0200 	mov.w	r2, #0
 8002a30:	ea03 0501 	and.w	r5, r3, r1
 8002a34:	ea04 0602 	and.w	r6, r4, r2
 8002a38:	4629      	mov	r1, r5
 8002a3a:	4632      	mov	r2, r6
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	f04f 0400 	mov.w	r4, #0
 8002a44:	0154      	lsls	r4, r2, #5
 8002a46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a4a:	014b      	lsls	r3, r1, #5
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4622      	mov	r2, r4
 8002a50:	1b49      	subs	r1, r1, r5
 8002a52:	eb62 0206 	sbc.w	r2, r2, r6
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	0194      	lsls	r4, r2, #6
 8002a60:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a64:	018b      	lsls	r3, r1, #6
 8002a66:	1a5b      	subs	r3, r3, r1
 8002a68:	eb64 0402 	sbc.w	r4, r4, r2
 8002a6c:	f04f 0100 	mov.w	r1, #0
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	00e2      	lsls	r2, r4, #3
 8002a76:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a7a:	00d9      	lsls	r1, r3, #3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4614      	mov	r4, r2
 8002a80:	195b      	adds	r3, r3, r5
 8002a82:	eb44 0406 	adc.w	r4, r4, r6
 8002a86:	f04f 0100 	mov.w	r1, #0
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	0262      	lsls	r2, r4, #9
 8002a90:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a94:	0259      	lsls	r1, r3, #9
 8002a96:	460b      	mov	r3, r1
 8002a98:	4614      	mov	r4, r2
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	4621      	mov	r1, r4
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	4623      	mov	r3, r4
 8002aa8:	f7fd fbfa 	bl	80002a0 <__aeabi_uldivmod>
 8002aac:	4603      	mov	r3, r0
 8002aae:	460c      	mov	r4, r1
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	e049      	b.n	8002b48 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab4:	4b2f      	ldr	r3, [pc, #188]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	f04f 0400 	mov.w	r4, #0
 8002abe:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	ea03 0501 	and.w	r5, r3, r1
 8002aca:	ea04 0602 	and.w	r6, r4, r2
 8002ace:	4629      	mov	r1, r5
 8002ad0:	4632      	mov	r2, r6
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	0154      	lsls	r4, r2, #5
 8002adc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ae0:	014b      	lsls	r3, r1, #5
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4622      	mov	r2, r4
 8002ae6:	1b49      	subs	r1, r1, r5
 8002ae8:	eb62 0206 	sbc.w	r2, r2, r6
 8002aec:	f04f 0300 	mov.w	r3, #0
 8002af0:	f04f 0400 	mov.w	r4, #0
 8002af4:	0194      	lsls	r4, r2, #6
 8002af6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002afa:	018b      	lsls	r3, r1, #6
 8002afc:	1a5b      	subs	r3, r3, r1
 8002afe:	eb64 0402 	sbc.w	r4, r4, r2
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	00e2      	lsls	r2, r4, #3
 8002b0c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b10:	00d9      	lsls	r1, r3, #3
 8002b12:	460b      	mov	r3, r1
 8002b14:	4614      	mov	r4, r2
 8002b16:	195b      	adds	r3, r3, r5
 8002b18:	eb44 0406 	adc.w	r4, r4, r6
 8002b1c:	f04f 0100 	mov.w	r1, #0
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	02a2      	lsls	r2, r4, #10
 8002b26:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b2a:	0299      	lsls	r1, r3, #10
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4614      	mov	r4, r2
 8002b30:	4618      	mov	r0, r3
 8002b32:	4621      	mov	r1, r4
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f04f 0400 	mov.w	r4, #0
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	4623      	mov	r3, r4
 8002b3e:	f7fd fbaf 	bl	80002a0 <__aeabi_uldivmod>
 8002b42:	4603      	mov	r3, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b48:	4b0a      	ldr	r3, [pc, #40]	; (8002b74 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	0c1b      	lsrs	r3, r3, #16
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	3301      	adds	r3, #1
 8002b54:	005b      	lsls	r3, r3, #1
 8002b56:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b60:	60bb      	str	r3, [r7, #8]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b66:	60bb      	str	r3, [r7, #8]
      break;
 8002b68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b74:	40023800 	.word	0x40023800
 8002b78:	00f42400 	.word	0x00f42400
 8002b7c:	007a1200 	.word	0x007a1200

08002b80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b80:	b480      	push	{r7}
 8002b82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b86:	681b      	ldr	r3, [r3, #0]
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	20000000 	.word	0x20000000

08002b98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002b9e:	f000 ff3f 	bl	8003a20 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <MX_LWIP_Init+0x70>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8002ba8:	4b18      	ldr	r3, [pc, #96]	; (8002c0c <MX_LWIP_Init+0x74>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8002bae:	4b18      	ldr	r3, [pc, #96]	; (8002c10 <MX_LWIP_Init+0x78>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	; (8002c14 <MX_LWIP_Init+0x7c>)
 8002bb6:	9302      	str	r3, [sp, #8]
 8002bb8:	4b17      	ldr	r3, [pc, #92]	; (8002c18 <MX_LWIP_Init+0x80>)
 8002bba:	9301      	str	r3, [sp, #4]
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	9300      	str	r3, [sp, #0]
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <MX_LWIP_Init+0x78>)
 8002bc2:	4a12      	ldr	r2, [pc, #72]	; (8002c0c <MX_LWIP_Init+0x74>)
 8002bc4:	4910      	ldr	r1, [pc, #64]	; (8002c08 <MX_LWIP_Init+0x70>)
 8002bc6:	4815      	ldr	r0, [pc, #84]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bc8:	f001 fbd2 	bl	8004370 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002bcc:	4813      	ldr	r0, [pc, #76]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bce:	f001 fd89 	bl	80046e4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002bd2:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002bd8:	089b      	lsrs	r3, r3, #2
 8002bda:	f003 0301 	and.w	r3, r3, #1
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d003      	beq.n	8002bec <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002be4:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002be6:	f001 fd8d 	bl	8004704 <netif_set_up>
 8002bea:	e002      	b.n	8002bf2 <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002bec:	480b      	ldr	r0, [pc, #44]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bee:	f001 fdf5 	bl	80047dc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002bf2:	490b      	ldr	r1, [pc, #44]	; (8002c20 <MX_LWIP_Init+0x88>)
 8002bf4:	4809      	ldr	r0, [pc, #36]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bf6:	f001 fe8b 	bl	8004910 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8002bfa:	4808      	ldr	r0, [pc, #32]	; (8002c1c <MX_LWIP_Init+0x84>)
 8002bfc:	f009 f952 	bl	800bea4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	200006e8 	.word	0x200006e8
 8002c0c:	200006ec 	.word	0x200006ec
 8002c10:	200006f0 	.word	0x200006f0
 8002c14:	0800f95d 	.word	0x0800f95d
 8002c18:	080031fd 	.word	0x080031fd
 8002c1c:	200006b0 	.word	0x200006b0
 8002c20:	080032f1 	.word	0x080032f1

08002c24 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002c28:	4804      	ldr	r0, [pc, #16]	; (8002c3c <MX_LWIP_Process+0x18>)
 8002c2a:	f000 fac7 	bl	80031bc <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8002c2e:	f008 f843 	bl	800acb8 <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 8002c32:	4802      	ldr	r0, [pc, #8]	; (8002c3c <MX_LWIP_Process+0x18>)
 8002c34:	f000 fb18 	bl	8003268 <ethernetif_set_link>
/* USER CODE END 4_3 */
}
 8002c38:	bf00      	nop
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	200006b0 	.word	0x200006b0

08002c40 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b08e      	sub	sp, #56	; 0x38
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	605a      	str	r2, [r3, #4]
 8002c52:	609a      	str	r2, [r3, #8]
 8002c54:	60da      	str	r2, [r3, #12]
 8002c56:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_ETH_MspInit+0x174>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	f040 80a4 	bne.w	8002dac <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
 8002c68:	4b53      	ldr	r3, [pc, #332]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6c:	4a52      	ldr	r2, [pc, #328]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c6e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c72:	6313      	str	r3, [r2, #48]	; 0x30
 8002c74:	4b50      	ldr	r3, [pc, #320]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	2300      	movs	r3, #0
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	4b4c      	ldr	r3, [pc, #304]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	4a4b      	ldr	r2, [pc, #300]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c8a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c90:	4b49      	ldr	r3, [pc, #292]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c98:	61fb      	str	r3, [r7, #28]
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	4b45      	ldr	r3, [pc, #276]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca4:	4a44      	ldr	r2, [pc, #272]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002ca6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002caa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cac:	4b42      	ldr	r3, [pc, #264]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb4:	61bb      	str	r3, [r7, #24]
 8002cb6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	4b3e      	ldr	r3, [pc, #248]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4a3d      	ldr	r2, [pc, #244]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc8:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	617b      	str	r3, [r7, #20]
 8002cd2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	4b37      	ldr	r3, [pc, #220]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4a36      	ldr	r2, [pc, #216]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cde:	f043 0301 	orr.w	r3, r3, #1
 8002ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce4:	4b34      	ldr	r3, [pc, #208]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	613b      	str	r3, [r7, #16]
 8002cee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	4a2f      	ldr	r2, [pc, #188]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002cfa:	f043 0302 	orr.w	r3, r3, #2
 8002cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8002d00:	4b2d      	ldr	r3, [pc, #180]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d04:	f003 0302 	and.w	r3, r3, #2
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60bb      	str	r3, [r7, #8]
 8002d10:	4b29      	ldr	r3, [pc, #164]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a28      	ldr	r2, [pc, #160]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002d16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1c:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_ETH_MspInit+0x178>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d28:	2332      	movs	r3, #50	; 0x32
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d38:	230b      	movs	r3, #11
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d40:	4619      	mov	r1, r3
 8002d42:	481e      	ldr	r0, [pc, #120]	; (8002dbc <HAL_ETH_MspInit+0x17c>)
 8002d44:	f7ff f92a 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002d48:	2386      	movs	r3, #134	; 0x86
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d58:	230b      	movs	r3, #11
 8002d5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d60:	4619      	mov	r1, r3
 8002d62:	4817      	ldr	r0, [pc, #92]	; (8002dc0 <HAL_ETH_MspInit+0x180>)
 8002d64:	f7ff f91a 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002d68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6e:	2302      	movs	r3, #2
 8002d70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d72:	2300      	movs	r3, #0
 8002d74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d76:	2303      	movs	r3, #3
 8002d78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d7a:	230b      	movs	r3, #11
 8002d7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d82:	4619      	mov	r1, r3
 8002d84:	480f      	ldr	r0, [pc, #60]	; (8002dc4 <HAL_ETH_MspInit+0x184>)
 8002d86:	f7ff f909 	bl	8001f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002d8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d94:	2300      	movs	r3, #0
 8002d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002d9c:	230b      	movs	r3, #11
 8002d9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002da0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002da4:	4619      	mov	r1, r3
 8002da6:	4808      	ldr	r0, [pc, #32]	; (8002dc8 <HAL_ETH_MspInit+0x188>)
 8002da8:	f7ff f8f8 	bl	8001f9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8002dac:	bf00      	nop
 8002dae:	3738      	adds	r7, #56	; 0x38
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	40028000 	.word	0x40028000
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	40020800 	.word	0x40020800
 8002dc0:	40020000 	.word	0x40020000
 8002dc4:	40020400 	.word	0x40020400
 8002dc8:	40021800 	.word	0x40021800

08002dcc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8002dd8:	4b49      	ldr	r3, [pc, #292]	; (8002f00 <low_level_init+0x134>)
 8002dda:	4a4a      	ldr	r2, [pc, #296]	; (8002f04 <low_level_init+0x138>)
 8002ddc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8002dde:	4b48      	ldr	r3, [pc, #288]	; (8002f00 <low_level_init+0x134>)
 8002de0:	2201      	movs	r2, #1
 8002de2:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8002de4:	4b46      	ldr	r3, [pc, #280]	; (8002f00 <low_level_init+0x134>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8002dea:	2300      	movs	r3, #0
 8002dec:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8002dee:	2380      	movs	r3, #128	; 0x80
 8002df0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8002df2:	23e1      	movs	r3, #225	; 0xe1
 8002df4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8002df6:	2300      	movs	r3, #0
 8002df8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8002e02:	4a3f      	ldr	r2, [pc, #252]	; (8002f00 <low_level_init+0x134>)
 8002e04:	f107 0308 	add.w	r3, r7, #8
 8002e08:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8002e0a:	4b3d      	ldr	r3, [pc, #244]	; (8002f00 <low_level_init+0x134>)
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8002e10:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <low_level_init+0x134>)
 8002e12:	2200      	movs	r2, #0
 8002e14:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8002e16:	4b3a      	ldr	r3, [pc, #232]	; (8002f00 <low_level_init+0x134>)
 8002e18:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e1c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8002e1e:	4838      	ldr	r0, [pc, #224]	; (8002f00 <low_level_init+0x134>)
 8002e20:	f7fd ff96 	bl	8000d50 <HAL_ETH_Init>
 8002e24:	4603      	mov	r3, r0
 8002e26:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 8002e28:	7dfb      	ldrb	r3, [r7, #23]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d108      	bne.n	8002e40 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002e34:	f043 0304 	orr.w	r3, r3, #4
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8002e40:	2304      	movs	r3, #4
 8002e42:	4a31      	ldr	r2, [pc, #196]	; (8002f08 <low_level_init+0x13c>)
 8002e44:	4931      	ldr	r1, [pc, #196]	; (8002f0c <low_level_init+0x140>)
 8002e46:	482e      	ldr	r0, [pc, #184]	; (8002f00 <low_level_init+0x134>)
 8002e48:	f7fe f920 	bl	800108c <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	4a30      	ldr	r2, [pc, #192]	; (8002f10 <low_level_init+0x144>)
 8002e50:	4930      	ldr	r1, [pc, #192]	; (8002f14 <low_level_init+0x148>)
 8002e52:	482b      	ldr	r0, [pc, #172]	; (8002f00 <low_level_init+0x134>)
 8002e54:	f7fe f983 	bl	800115e <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2206      	movs	r2, #6
 8002e5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8002e60:	4b27      	ldr	r3, [pc, #156]	; (8002f00 <low_level_init+0x134>)
 8002e62:	695b      	ldr	r3, [r3, #20]
 8002e64:	781a      	ldrb	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8002e6c:	4b24      	ldr	r3, [pc, #144]	; (8002f00 <low_level_init+0x134>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	785a      	ldrb	r2, [r3, #1]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8002e78:	4b21      	ldr	r3, [pc, #132]	; (8002f00 <low_level_init+0x134>)
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	789a      	ldrb	r2, [r3, #2]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8002e84:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <low_level_init+0x134>)
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	78da      	ldrb	r2, [r3, #3]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <low_level_init+0x134>)
 8002e92:	695b      	ldr	r3, [r3, #20]
 8002e94:	791a      	ldrb	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8002e9c:	4b18      	ldr	r3, [pc, #96]	; (8002f00 <low_level_init+0x134>)
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	795a      	ldrb	r2, [r3, #5]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002eae:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002eb6:	f043 030a 	orr.w	r3, r3, #10
 8002eba:	b2da      	uxtb	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8002ec2:	480f      	ldr	r0, [pc, #60]	; (8002f00 <low_level_init+0x134>)
 8002ec4:	f7fe fbf4 	bl	80016b0 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8002ec8:	f107 0310 	add.w	r3, r7, #16
 8002ecc:	461a      	mov	r2, r3
 8002ece:	211d      	movs	r1, #29
 8002ed0:	480b      	ldr	r0, [pc, #44]	; (8002f00 <low_level_init+0x134>)
 8002ed2:	f7fe fb1f 	bl	8001514 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f043 030b 	orr.w	r3, r3, #11
 8002edc:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	211d      	movs	r1, #29
 8002ee4:	4806      	ldr	r0, [pc, #24]	; (8002f00 <low_level_init+0x134>)
 8002ee6:	f7fe fb7d 	bl	80015e4 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8002eea:	f107 0310 	add.w	r3, r7, #16
 8002eee:	461a      	mov	r2, r3
 8002ef0:	211d      	movs	r1, #29
 8002ef2:	4803      	ldr	r0, [pc, #12]	; (8002f00 <low_level_init+0x134>)
 8002ef4:	f7fe fb0e 	bl	8001514 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8002ef8:	bf00      	nop
 8002efa:	3718      	adds	r7, #24
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}
 8002f00:	20001fc4 	.word	0x20001fc4
 8002f04:	40028000 	.word	0x40028000
 8002f08:	2000200c 	.word	0x2000200c
 8002f0c:	200006f4 	.word	0x200006f4
 8002f10:	20000774 	.word	0x20000774
 8002f14:	20001f44 	.word	0x20001f44

08002f18 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08a      	sub	sp, #40	; 0x28
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8002f22:	4b4b      	ldr	r3, [pc, #300]	; (8003050 <low_level_output+0x138>)
 8002f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8002f32:	2300      	movs	r3, #0
 8002f34:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8002f3a:	4b45      	ldr	r3, [pc, #276]	; (8003050 <low_level_output+0x138>)
 8002f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f3e:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8002f40:	2300      	movs	r3, #0
 8002f42:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	623b      	str	r3, [r7, #32]
 8002f48:	e05a      	b.n	8003000 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	da03      	bge.n	8002f5a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8002f52:	23f8      	movs	r3, #248	; 0xf8
 8002f54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8002f58:	e05c      	b.n	8003014 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8002f5a:	6a3b      	ldr	r3, [r7, #32]
 8002f5c:	895b      	ldrh	r3, [r3, #10]
 8002f5e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8002f60:	2300      	movs	r3, #0
 8002f62:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002f64:	e02f      	b.n	8002fc6 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8002f66:	69fa      	ldr	r2, [r7, #28]
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	18d0      	adds	r0, r2, r3
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	18d1      	adds	r1, r2, r3
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8002f7a:	3304      	adds	r3, #4
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f00c fdf6 	bl	800fb6e <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	da03      	bge.n	8002f98 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8002f90:	23f8      	movs	r3, #248	; 0xf8
 8002f92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8002f96:	e03d      	b.n	8003014 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8002fa8:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002fb4:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002fc0:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	4413      	add	r3, r2
 8002fcc:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d8c8      	bhi.n	8002f66 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	18d0      	adds	r0, r2, r3
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f00c fdc2 	bl	800fb6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	623b      	str	r3, [r7, #32]
 8003000:	6a3b      	ldr	r3, [r7, #32]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d1a1      	bne.n	8002f4a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8003006:	6979      	ldr	r1, [r7, #20]
 8003008:	4811      	ldr	r0, [pc, #68]	; (8003050 <low_level_output+0x138>)
 800300a:	f7fe f915 	bl	8001238 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800300e:	2300      	movs	r3, #0
 8003010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <low_level_output+0x138>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800301c:	3314      	adds	r3, #20
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0320 	and.w	r3, r3, #32
 8003024:	2b00      	cmp	r3, #0
 8003026:	d00d      	beq.n	8003044 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8003028:	4b09      	ldr	r3, [pc, #36]	; (8003050 <low_level_output+0x138>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003030:	3314      	adds	r3, #20
 8003032:	2220      	movs	r2, #32
 8003034:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8003036:	4b06      	ldr	r3, [pc, #24]	; (8003050 <low_level_output+0x138>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800303e:	3304      	adds	r3, #4
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8003044:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003048:	4618      	mov	r0, r3
 800304a:	3728      	adds	r7, #40	; 0x28
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20001fc4 	.word	0x20001fc4

08003054 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08c      	sub	sp, #48	; 0x30
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003060:	2300      	movs	r3, #0
 8003062:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8003064:	2300      	movs	r3, #0
 8003066:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8003074:	2300      	movs	r3, #0
 8003076:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003078:	484f      	ldr	r0, [pc, #316]	; (80031b8 <low_level_input+0x164>)
 800307a:	f7fe f9c7 	bl	800140c <HAL_ETH_GetReceivedFrame>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d001      	beq.n	8003088 <low_level_input+0x34>
  
    return NULL;
 8003084:	2300      	movs	r3, #0
 8003086:	e092      	b.n	80031ae <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003088:	4b4b      	ldr	r3, [pc, #300]	; (80031b8 <low_level_input+0x164>)
 800308a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800308e:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <low_level_input+0x164>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8003094:	89fb      	ldrh	r3, [r7, #14]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800309a:	89fb      	ldrh	r3, [r7, #14]
 800309c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 80030a0:	4619      	mov	r1, r3
 80030a2:	2000      	movs	r0, #0
 80030a4:	f001 fcd0 	bl	8004a48 <pbuf_alloc>
 80030a8:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 80030aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d04b      	beq.n	8003148 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80030b0:	4b41      	ldr	r3, [pc, #260]	; (80031b8 <low_level_input+0x164>)
 80030b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b4:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80030ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030be:	e040      	b.n	8003142 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	895b      	ldrh	r3, [r3, #10]
 80030c4:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80030ca:	e021      	b.n	8003110 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80030cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	18d0      	adds	r0, r2, r3
 80030d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	18d1      	adds	r1, r2, r3
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80030e0:	3304      	adds	r3, #4
 80030e2:	461a      	mov	r2, r3
 80030e4:	f00c fd43 	bl	800fb6e <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80030e8:	6a3b      	ldr	r3, [r7, #32]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80030ee:	6a3b      	ldr	r3, [r7, #32]
 80030f0:	689b      	ldr	r3, [r3, #8]
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80030f4:	69fa      	ldr	r2, [r7, #28]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	4413      	add	r3, r2
 80030fa:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80030fe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800310a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	4413      	add	r3, r2
 8003116:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800311a:	4293      	cmp	r3, r2
 800311c:	d8d6      	bhi.n	80030cc <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800311e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	18d0      	adds	r0, r2, r3
 8003126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	4413      	add	r3, r2
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	4619      	mov	r1, r3
 8003130:	f00c fd1d 	bl	800fb6e <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8003134:	69fa      	ldr	r2, [r7, #28]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	4413      	add	r3, r2
 800313a:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
 8003142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003144:	2b00      	cmp	r3, #0
 8003146:	d1bb      	bne.n	80030c0 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <low_level_input+0x164>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800314e:	2300      	movs	r3, #0
 8003150:	613b      	str	r3, [r7, #16]
 8003152:	e00b      	b.n	800316c <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8003154:	6a3b      	ldr	r3, [r7, #32]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	3301      	adds	r3, #1
 800316a:	613b      	str	r3, [r7, #16]
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <low_level_input+0x164>)
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	693a      	ldr	r2, [r7, #16]
 8003172:	429a      	cmp	r2, r3
 8003174:	d3ee      	bcc.n	8003154 <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8003176:	4b10      	ldr	r3, [pc, #64]	; (80031b8 <low_level_input+0x164>)
 8003178:	2200      	movs	r2, #0
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <low_level_input+0x164>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003184:	3314      	adds	r3, #20
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00d      	beq.n	80031ac <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003190:	4b09      	ldr	r3, [pc, #36]	; (80031b8 <low_level_input+0x164>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003198:	3314      	adds	r3, #20
 800319a:	2280      	movs	r2, #128	; 0x80
 800319c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800319e:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <low_level_input+0x164>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031a6:	3308      	adds	r3, #8
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
  }
  return p;
 80031ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3730      	adds	r7, #48	; 0x30
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	20001fc4 	.word	0x20001fc4

080031bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff ff45 	bl	8003054 <low_level_input>
 80031ca:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	4798      	blx	r3
 80031dc:	4603      	mov	r3, r0
 80031de:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80031e0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d006      	beq.n	80031f6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f001 ff0d 	bl	8005008 <pbuf_free>
    p = NULL;    
 80031ee:	2300      	movs	r3, #0
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e000      	b.n	80031f6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 80031f4:	bf00      	nop
  }
}
 80031f6:	3710      	adds	r7, #16
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}

080031fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <ethernetif_init+0x1c>
 800320a:	4b0e      	ldr	r3, [pc, #56]	; (8003244 <ethernetif_init+0x48>)
 800320c:	f240 2211 	movw	r2, #529	; 0x211
 8003210:	490d      	ldr	r1, [pc, #52]	; (8003248 <ethernetif_init+0x4c>)
 8003212:	480e      	ldr	r0, [pc, #56]	; (800324c <ethernetif_init+0x50>)
 8003214:	f00c fcbe 	bl	800fb94 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2273      	movs	r2, #115	; 0x73
 800321c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2274      	movs	r2, #116	; 0x74
 8003224:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a09      	ldr	r2, [pc, #36]	; (8003250 <ethernetif_init+0x54>)
 800322c:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a08      	ldr	r2, [pc, #32]	; (8003254 <ethernetif_init+0x58>)
 8003232:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f7ff fdc9 	bl	8002dcc <low_level_init>

  return ERR_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3708      	adds	r7, #8
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	080109ec 	.word	0x080109ec
 8003248:	08010a08 	.word	0x08010a08
 800324c:	08010a18 	.word	0x08010a18
 8003250:	0800ddf1 	.word	0x0800ddf1
 8003254:	08002f19 	.word	0x08002f19

08003258 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800325c:	f7fd fc64 	bl	8000b28 <HAL_GetTick>
 8003260:	4603      	mov	r3, r0
}
 8003262:	4618      	mov	r0, r3
 8003264:	bd80      	pop	{r7, pc}
	...

08003268 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0; 
  
void ethernetif_set_link(struct netif *netif)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 8003274:	f7fd fc58 	bl	8000b28 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	4b1b      	ldr	r3, [pc, #108]	; (80032e8 <ethernetif_set_link+0x80>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2bc7      	cmp	r3, #199	; 0xc7
 8003282:	d92c      	bls.n	80032de <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick(); 
 8003284:	f7fd fc50 	bl	8000b28 <HAL_GetTick>
 8003288:	4602      	mov	r2, r0
 800328a:	4b17      	ldr	r3, [pc, #92]	; (80032e8 <ethernetif_set_link+0x80>)
 800328c:	601a      	str	r2, [r3, #0]
    
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800328e:	f107 030c 	add.w	r3, r7, #12
 8003292:	461a      	mov	r2, r3
 8003294:	2101      	movs	r1, #1
 8003296:	4815      	ldr	r0, [pc, #84]	; (80032ec <ethernetif_set_link+0x84>)
 8003298:	f7fe f93c 	bl	8001514 <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 0304 	and.w	r3, r3, #4
 80032a2:	60fb      	str	r3, [r7, #12]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032aa:	f003 0304 	and.w	r3, r3, #4
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d106      	bne.n	80032c0 <ethernetif_set_link+0x58>
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */ 
      netif_set_link_up(netif);        
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f001 fac1 	bl	8004840 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 80032be:	e00e      	b.n	80032de <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <ethernetif_set_link+0x76>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f001 fae9 	bl	80048b0 <netif_set_link_down>
}
 80032de:	bf00      	nop
 80032e0:	3710      	adds	r7, #16
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	2000009c 	.word	0x2000009c
 80032ec:	20001fc4 	.word	0x20001fc4

080032f0 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b084      	sub	sp, #16
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80032f8:	2300      	movs	r3, #0
 80032fa:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80032fc:	2300      	movs	r3, #0
 80032fe:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003306:	089b      	lsrs	r3, r3, #2
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d05d      	beq.n	80033ce <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003312:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03f      	beq.n	800339a <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800331a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800331e:	2100      	movs	r1, #0
 8003320:	4830      	ldr	r0, [pc, #192]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003322:	f7fe f95f 	bl	80015e4 <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 8003326:	f7fd fbff 	bl	8000b28 <HAL_GetTick>
 800332a:	4603      	mov	r3, r0
 800332c:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800332e:	f107 0308 	add.w	r3, r7, #8
 8003332:	461a      	mov	r2, r3
 8003334:	2101      	movs	r1, #1
 8003336:	482b      	ldr	r0, [pc, #172]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003338:	f7fe f8ec 	bl	8001514 <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800333c:	f7fd fbf4 	bl	8000b28 <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800334a:	d828      	bhi.n	800339e <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d0eb      	beq.n	800332e <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8003356:	f107 0308 	add.w	r3, r7, #8
 800335a:	461a      	mov	r2, r3
 800335c:	211f      	movs	r1, #31
 800335e:	4821      	ldr	r0, [pc, #132]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003360:	f7fe f8d8 	bl	8001514 <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	d004      	beq.n	8003378 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 800336e:	4b1d      	ldr	r3, [pc, #116]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003370:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003374:	60da      	str	r2, [r3, #12]
 8003376:	e002      	b.n	800337e <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003378:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <ethernetif_update_config+0xf4>)
 800337a:	2200      	movs	r2, #0
 800337c:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b00      	cmp	r3, #0
 8003386:	d003      	beq.n	8003390 <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8003388:	4b16      	ldr	r3, [pc, #88]	; (80033e4 <ethernetif_update_config+0xf4>)
 800338a:	2200      	movs	r2, #0
 800338c:	609a      	str	r2, [r3, #8]
 800338e:	e016      	b.n	80033be <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8003390:	4b14      	ldr	r3, [pc, #80]	; (80033e4 <ethernetif_update_config+0xf4>)
 8003392:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e011      	b.n	80033be <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800339a:	bf00      	nop
 800339c:	e000      	b.n	80033a0 <ethernetif_update_config+0xb0>
          goto error;
 800339e:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	08db      	lsrs	r3, r3, #3
 80033a6:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 80033a8:	4b0e      	ldr	r3, [pc, #56]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	085b      	lsrs	r3, r3, #1
 80033ae:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	461a      	mov	r2, r3
 80033b6:	2100      	movs	r1, #0
 80033b8:	480a      	ldr	r0, [pc, #40]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033ba:	f7fe f913 	bl	80015e4 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80033be:	2100      	movs	r1, #0
 80033c0:	4808      	ldr	r0, [pc, #32]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033c2:	f7fe f9d3 	bl	800176c <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 80033c6:	4807      	ldr	r0, [pc, #28]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033c8:	f7fe f972 	bl	80016b0 <HAL_ETH_Start>
 80033cc:	e002      	b.n	80033d4 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80033ce:	4805      	ldr	r0, [pc, #20]	; (80033e4 <ethernetif_update_config+0xf4>)
 80033d0:	f7fe f99d 	bl	800170e <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7fd f961 	bl	800069c <ethernetif_notify_conn_changed>
}
 80033da:	bf00      	nop
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	20001fc4 	.word	0x20001fc4

080033e8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	021b      	lsls	r3, r3, #8
 80033f6:	b21a      	sxth	r2, r3
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	0a1b      	lsrs	r3, r3, #8
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	b21b      	sxth	r3, r3
 8003400:	4313      	orrs	r3, r2
 8003402:	b21b      	sxth	r3, r3
 8003404:	b29b      	uxth	r3, r3
}
 8003406:	4618      	mov	r0, r3
 8003408:	370c      	adds	r7, #12
 800340a:	46bd      	mov	sp, r7
 800340c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003410:	4770      	bx	lr

08003412 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	061a      	lsls	r2, r3, #24
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	021b      	lsls	r3, r3, #8
 8003422:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	0a1b      	lsrs	r3, r3, #8
 800342c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003430:	431a      	orrs	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0e1b      	lsrs	r3, r3, #24
 8003436:	4313      	orrs	r3, r2
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8003448:	bf00      	nop
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
	...

08003454 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8003454:	b480      	push	{r7}
 8003456:	b083      	sub	sp, #12
 8003458:	af00      	add	r7, sp, #0
 800345a:	4603      	mov	r3, r0
 800345c:	6039      	str	r1, [r7, #0]
 800345e:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d80f      	bhi.n	8003486 <dns_setserver+0x32>
    if (dnsserver != NULL) {
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d006      	beq.n	800347a <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	4909      	ldr	r1, [pc, #36]	; (8003494 <dns_setserver+0x40>)
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	6812      	ldr	r2, [r2, #0]
 8003474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8003478:	e005      	b.n	8003486 <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800347a:	79fb      	ldrb	r3, [r7, #7]
 800347c:	4905      	ldr	r1, [pc, #20]	; (8003494 <dns_setserver+0x40>)
 800347e:	4a06      	ldr	r2, [pc, #24]	; (8003498 <dns_setserver+0x44>)
 8003480:	6812      	ldr	r2, [r2, #0]
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	20000520 	.word	0x20000520
 8003498:	08013920 	.word	0x08013920

0800349c <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 80034a0:	f000 faaa 	bl	80039f8 <dns_check_entries>
}
 80034a4:	bf00      	nop
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b090      	sub	sp, #64	; 0x40
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	4603      	mov	r3, r0
 80034b0:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 80034b2:	79fa      	ldrb	r2, [r7, #7]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	4413      	add	r3, r2
 80034ba:	011b      	lsls	r3, r3, #4
 80034bc:	4a6c      	ldr	r2, [pc, #432]	; (8003670 <dns_send+0x1c8>)
 80034be:	4413      	add	r3, r2
 80034c0:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 80034c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c4:	7adb      	ldrb	r3, [r3, #11]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d906      	bls.n	80034d8 <dns_send+0x30>
 80034ca:	4b6a      	ldr	r3, [pc, #424]	; (8003674 <dns_send+0x1cc>)
 80034cc:	f240 22fa 	movw	r2, #762	; 0x2fa
 80034d0:	4969      	ldr	r1, [pc, #420]	; (8003678 <dns_send+0x1d0>)
 80034d2:	486a      	ldr	r0, [pc, #424]	; (800367c <dns_send+0x1d4>)
 80034d4:	f00c fb5e 	bl	800fb94 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80034d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034da:	7adb      	ldrb	r3, [r3, #11]
 80034dc:	461a      	mov	r2, r3
 80034de:	4b68      	ldr	r3, [pc, #416]	; (8003680 <dns_send+0x1d8>)
 80034e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d109      	bne.n	80034fc <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 f8cb 	bl	8003688 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80034f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f4:	2200      	movs	r2, #0
 80034f6:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80034f8:	2300      	movs	r3, #0
 80034fa:	e0b4      	b.n	8003666 <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80034fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fe:	3310      	adds	r3, #16
 8003500:	4618      	mov	r0, r3
 8003502:	f7fc fe75 	bl	80001f0 <strlen>
 8003506:	4603      	mov	r3, r0
 8003508:	b29b      	uxth	r3, r3
 800350a:	3312      	adds	r3, #18
 800350c:	b29b      	uxth	r3, r3
 800350e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8003512:	4619      	mov	r1, r3
 8003514:	2036      	movs	r0, #54	; 0x36
 8003516:	f001 fa97 	bl	8004a48 <pbuf_alloc>
 800351a:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800351c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 8095 	beq.w	800364e <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 8003524:	f107 0310 	add.w	r3, r7, #16
 8003528:	220c      	movs	r2, #12
 800352a:	2100      	movs	r1, #0
 800352c:	4618      	mov	r0, r3
 800352e:	f00c fb29 	bl	800fb84 <memset>
    hdr.id = lwip_htons(entry->txid);
 8003532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003534:	891b      	ldrh	r3, [r3, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f7ff ff56 	bl	80033e8 <lwip_htons>
 800353c:	4603      	mov	r3, r0
 800353e:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8003540:	2301      	movs	r3, #1
 8003542:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 8003544:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003548:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800354a:	f107 0310 	add.w	r3, r7, #16
 800354e:	220c      	movs	r2, #12
 8003550:	4619      	mov	r1, r3
 8003552:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003554:	f002 f800 	bl	8005558 <pbuf_take>
    hostname = entry->name;
 8003558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355a:	3310      	adds	r3, #16
 800355c:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800355e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003560:	3b01      	subs	r3, #1
 8003562:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8003564:	230c      	movs	r3, #12
 8003566:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8003568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800356a:	3301      	adds	r3, #1
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800356e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003570:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8003572:	2300      	movs	r3, #0
 8003574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003578:	e007      	b.n	800358a <dns_send+0xe2>
        ++n;
 800357a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800357e:	3301      	adds	r3, #1
 8003580:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8003584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003586:	3301      	adds	r3, #1
 8003588:	63bb      	str	r3, [r7, #56]	; 0x38
 800358a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	2b2e      	cmp	r3, #46	; 0x2e
 8003590:	d003      	beq.n	800359a <dns_send+0xf2>
 8003592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1ef      	bne.n	800357a <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800359a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 80035a2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80035a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035a8:	4413      	add	r3, r2
 80035aa:	3301      	adds	r3, #1
 80035ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035b0:	da53      	bge.n	800365a <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 80035b2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80035b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035b8:	4619      	mov	r1, r3
 80035ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035bc:	f002 f8fa 	bl	80057b4 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 80035c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035c2:	3301      	adds	r3, #1
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80035c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035cc:	f002 f856 	bl	800567c <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 80035d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80035d4:	b29a      	uxth	r2, r3
 80035d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035d8:	4413      	add	r3, r2
 80035da:	b29b      	uxth	r3, r3
 80035dc:	3301      	adds	r3, #1
 80035de:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80035e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1bf      	bne.n	8003568 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80035e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035ea:	2200      	movs	r2, #0
 80035ec:	4619      	mov	r1, r3
 80035ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035f0:	f002 f8e0 	bl	80057b4 <pbuf_put_at>
    query_idx++;
 80035f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80035f6:	3301      	adds	r3, #1
 80035f8:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80035fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035fe:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8003600:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003604:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8003606:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003608:	f107 010c 	add.w	r1, r7, #12
 800360c:	2204      	movs	r2, #4
 800360e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003610:	f002 f834 	bl	800567c <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8003614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003616:	7bdb      	ldrb	r3, [r3, #15]
 8003618:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800361c:	2335      	movs	r3, #53	; 0x35
 800361e:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 8003620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003622:	7adb      	ldrb	r3, [r3, #11]
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <dns_send+0x1d8>)
 8003628:	4413      	add	r3, r2
 800362a:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800362c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003630:	4a14      	ldr	r2, [pc, #80]	; (8003684 <dns_send+0x1dc>)
 8003632:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003636:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003638:	69fa      	ldr	r2, [r7, #28]
 800363a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800363c:	f007 fd40 	bl	800b0c0 <udp_sendto>
 8003640:	4603      	mov	r3, r0
 8003642:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8003646:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003648:	f001 fcde 	bl	8005008 <pbuf_free>
 800364c:	e002      	b.n	8003654 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800364e:	23ff      	movs	r3, #255	; 0xff
 8003650:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8003654:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003658:	e005      	b.n	8003666 <dns_send+0x1be>
        goto overflow_return;
 800365a:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800365c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800365e:	f001 fcd3 	bl	8005008 <pbuf_free>
  return ERR_VAL;
 8003662:	f06f 0305 	mvn.w	r3, #5
}
 8003666:	4618      	mov	r0, r3
 8003668:	3740      	adds	r7, #64	; 0x40
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200000b0 	.word	0x200000b0
 8003674:	08010a40 	.word	0x08010a40
 8003678:	08010a70 	.word	0x08010a70
 800367c:	08010a88 	.word	0x08010a88
 8003680:	20000520 	.word	0x20000520
 8003684:	200000a0 	.word	0x200000a0

08003688 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8003688:	b590      	push	{r4, r7, lr}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	4603      	mov	r3, r0
 8003690:	6039      	str	r1, [r7, #0]
 8003692:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003694:	2300      	movs	r3, #0
 8003696:	73fb      	strb	r3, [r7, #15]
 8003698:	e03d      	b.n	8003716 <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800369a:	7bfa      	ldrb	r2, [r7, #15]
 800369c:	4957      	ldr	r1, [pc, #348]	; (80037fc <dns_call_found+0x174>)
 800369e:	4613      	mov	r3, r2
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	4413      	add	r3, r2
 80036a4:	009b      	lsls	r3, r3, #2
 80036a6:	440b      	add	r3, r1
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d030      	beq.n	8003710 <dns_call_found+0x88>
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	4952      	ldr	r1, [pc, #328]	; (80037fc <dns_call_found+0x174>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	440b      	add	r3, r1
 80036bc:	3308      	adds	r3, #8
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	79fa      	ldrb	r2, [r7, #7]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d124      	bne.n	8003710 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 80036c6:	7bfa      	ldrb	r2, [r7, #15]
 80036c8:	494c      	ldr	r1, [pc, #304]	; (80037fc <dns_call_found+0x174>)
 80036ca:	4613      	mov	r3, r2
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	681c      	ldr	r4, [r3, #0]
 80036d6:	79fa      	ldrb	r2, [r7, #7]
 80036d8:	4613      	mov	r3, r2
 80036da:	011b      	lsls	r3, r3, #4
 80036dc:	4413      	add	r3, r2
 80036de:	011b      	lsls	r3, r3, #4
 80036e0:	3310      	adds	r3, #16
 80036e2:	4a47      	ldr	r2, [pc, #284]	; (8003800 <dns_call_found+0x178>)
 80036e4:	1898      	adds	r0, r3, r2
 80036e6:	7bfa      	ldrb	r2, [r7, #15]
 80036e8:	4944      	ldr	r1, [pc, #272]	; (80037fc <dns_call_found+0x174>)
 80036ea:	4613      	mov	r3, r2
 80036ec:	005b      	lsls	r3, r3, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	3304      	adds	r3, #4
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	6839      	ldr	r1, [r7, #0]
 80036fc:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	493e      	ldr	r1, [pc, #248]	; (80037fc <dns_call_found+0x174>)
 8003702:	4613      	mov	r3, r2
 8003704:	005b      	lsls	r3, r3, #1
 8003706:	4413      	add	r3, r2
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	440b      	add	r3, r1
 800370c:	2200      	movs	r2, #0
 800370e:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	3301      	adds	r3, #1
 8003714:	73fb      	strb	r3, [r7, #15]
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d9be      	bls.n	800369a <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800371c:	2300      	movs	r3, #0
 800371e:	73fb      	strb	r3, [r7, #15]
 8003720:	e031      	b.n	8003786 <dns_call_found+0xfe>
    if (i == idx) {
 8003722:	7bfa      	ldrb	r2, [r7, #15]
 8003724:	79fb      	ldrb	r3, [r7, #7]
 8003726:	429a      	cmp	r2, r3
 8003728:	d029      	beq.n	800377e <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800372a:	7bfa      	ldrb	r2, [r7, #15]
 800372c:	4934      	ldr	r1, [pc, #208]	; (8003800 <dns_call_found+0x178>)
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	4413      	add	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	440b      	add	r3, r1
 8003738:	330a      	adds	r3, #10
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b02      	cmp	r3, #2
 800373e:	d11f      	bne.n	8003780 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8003740:	7bfa      	ldrb	r2, [r7, #15]
 8003742:	492f      	ldr	r1, [pc, #188]	; (8003800 <dns_call_found+0x178>)
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	4413      	add	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	440b      	add	r3, r1
 800374e:	330f      	adds	r3, #15
 8003750:	7819      	ldrb	r1, [r3, #0]
 8003752:	79fa      	ldrb	r2, [r7, #7]
 8003754:	482a      	ldr	r0, [pc, #168]	; (8003800 <dns_call_found+0x178>)
 8003756:	4613      	mov	r3, r2
 8003758:	011b      	lsls	r3, r3, #4
 800375a:	4413      	add	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	4403      	add	r3, r0
 8003760:	330f      	adds	r3, #15
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	4299      	cmp	r1, r3
 8003766:	d10b      	bne.n	8003780 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8003768:	79fa      	ldrb	r2, [r7, #7]
 800376a:	4925      	ldr	r1, [pc, #148]	; (8003800 <dns_call_found+0x178>)
 800376c:	4613      	mov	r3, r2
 800376e:	011b      	lsls	r3, r3, #4
 8003770:	4413      	add	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	440b      	add	r3, r1
 8003776:	330f      	adds	r3, #15
 8003778:	2204      	movs	r2, #4
 800377a:	701a      	strb	r2, [r3, #0]
        break;
 800377c:	e006      	b.n	800378c <dns_call_found+0x104>
      continue; /* only check other requests */
 800377e:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	3301      	adds	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	7bfb      	ldrb	r3, [r7, #15]
 8003788:	2b03      	cmp	r3, #3
 800378a:	d9ca      	bls.n	8003722 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800378c:	79fa      	ldrb	r2, [r7, #7]
 800378e:	491c      	ldr	r1, [pc, #112]	; (8003800 <dns_call_found+0x178>)
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	4413      	add	r3, r2
 8003796:	011b      	lsls	r3, r3, #4
 8003798:	440b      	add	r3, r1
 800379a:	330f      	adds	r3, #15
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b03      	cmp	r3, #3
 80037a0:	d827      	bhi.n	80037f2 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 80037a2:	79fa      	ldrb	r2, [r7, #7]
 80037a4:	4916      	ldr	r1, [pc, #88]	; (8003800 <dns_call_found+0x178>)
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	011b      	lsls	r3, r3, #4
 80037ae:	440b      	add	r3, r1
 80037b0:	330f      	adds	r3, #15
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	461a      	mov	r2, r3
 80037b6:	4b13      	ldr	r3, [pc, #76]	; (8003804 <dns_call_found+0x17c>)
 80037b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037bc:	4618      	mov	r0, r3
 80037be:	f007 ff4b 	bl	800b658 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 80037c2:	79fa      	ldrb	r2, [r7, #7]
 80037c4:	490e      	ldr	r1, [pc, #56]	; (8003800 <dns_call_found+0x178>)
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	4413      	add	r3, r2
 80037cc:	011b      	lsls	r3, r3, #4
 80037ce:	440b      	add	r3, r1
 80037d0:	330f      	adds	r3, #15
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	4619      	mov	r1, r3
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <dns_call_found+0x17c>)
 80037d8:	2200      	movs	r2, #0
 80037da:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 80037de:	79fa      	ldrb	r2, [r7, #7]
 80037e0:	4907      	ldr	r1, [pc, #28]	; (8003800 <dns_call_found+0x178>)
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	4413      	add	r3, r2
 80037e8:	011b      	lsls	r3, r3, #4
 80037ea:	440b      	add	r3, r1
 80037ec:	330f      	adds	r3, #15
 80037ee:	2204      	movs	r2, #4
 80037f0:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 80037f2:	bf00      	nop
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd90      	pop	{r4, r7, pc}
 80037fa:	bf00      	nop
 80037fc:	200004f0 	.word	0x200004f0
 8003800:	200000b0 	.word	0x200000b0
 8003804:	200000a0 	.word	0x200000a0

08003808 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800380e:	f00c f9d9 	bl	800fbc4 <rand>
 8003812:	4603      	mov	r3, r0
 8003814:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8003816:	2300      	movs	r3, #0
 8003818:	71fb      	strb	r3, [r7, #7]
 800381a:	e01a      	b.n	8003852 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800381c:	79fa      	ldrb	r2, [r7, #7]
 800381e:	4911      	ldr	r1, [pc, #68]	; (8003864 <dns_create_txid+0x5c>)
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	330a      	adds	r3, #10
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d10c      	bne.n	800384c <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8003832:	79fa      	ldrb	r2, [r7, #7]
 8003834:	490b      	ldr	r1, [pc, #44]	; (8003864 <dns_create_txid+0x5c>)
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	4413      	add	r3, r2
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	440b      	add	r3, r1
 8003840:	3308      	adds	r3, #8
 8003842:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8003844:	88ba      	ldrh	r2, [r7, #4]
 8003846:	429a      	cmp	r2, r3
 8003848:	d100      	bne.n	800384c <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800384a:	e7e0      	b.n	800380e <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800384c:	79fb      	ldrb	r3, [r7, #7]
 800384e:	3301      	adds	r3, #1
 8003850:	71fb      	strb	r3, [r7, #7]
 8003852:	79fb      	ldrb	r3, [r7, #7]
 8003854:	2b03      	cmp	r3, #3
 8003856:	d9e1      	bls.n	800381c <dns_create_txid+0x14>
    }
  }

  return txid;
 8003858:	88bb      	ldrh	r3, [r7, #4]
}
 800385a:	4618      	mov	r0, r3
 800385c:	3708      	adds	r7, #8
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	200000b0 	.word	0x200000b0

08003868 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8003868:	b480      	push	{r7}
 800386a:	b085      	sub	sp, #20
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8003870:	2300      	movs	r3, #0
 8003872:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00e      	beq.n	8003898 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	7adb      	ldrb	r3, [r3, #11]
 800387e:	3301      	adds	r3, #1
 8003880:	2b01      	cmp	r3, #1
 8003882:	dc09      	bgt.n	8003898 <dns_backupserver_available+0x30>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	7adb      	ldrb	r3, [r3, #11]
 8003888:	3301      	adds	r3, #1
 800388a:	4a07      	ldr	r2, [pc, #28]	; (80038a8 <dns_backupserver_available+0x40>)
 800388c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <dns_backupserver_available+0x30>
      ret = 1;
 8003894:	2301      	movs	r3, #1
 8003896:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003898:	7bfb      	ldrb	r3, [r7, #15]
}
 800389a:	4618      	mov	r0, r3
 800389c:	3714      	adds	r7, #20
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	20000520 	.word	0x20000520

080038ac <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 80038b6:	79fa      	ldrb	r2, [r7, #7]
 80038b8:	4613      	mov	r3, r2
 80038ba:	011b      	lsls	r3, r3, #4
 80038bc:	4413      	add	r3, r2
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	4a48      	ldr	r2, [pc, #288]	; (80039e4 <dns_check_entry+0x138>)
 80038c2:	4413      	add	r3, r2
 80038c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 80038c6:	79fb      	ldrb	r3, [r7, #7]
 80038c8:	2b03      	cmp	r3, #3
 80038ca:	d906      	bls.n	80038da <dns_check_entry+0x2e>
 80038cc:	4b46      	ldr	r3, [pc, #280]	; (80039e8 <dns_check_entry+0x13c>)
 80038ce:	f240 421c 	movw	r2, #1052	; 0x41c
 80038d2:	4946      	ldr	r1, [pc, #280]	; (80039ec <dns_check_entry+0x140>)
 80038d4:	4846      	ldr	r0, [pc, #280]	; (80039f0 <dns_check_entry+0x144>)
 80038d6:	f00c f95d 	bl	800fb94 <iprintf>

  switch (entry->state) {
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	7a9b      	ldrb	r3, [r3, #10]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d86f      	bhi.n	80039c2 <dns_check_entry+0x116>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <dns_check_entry+0x3c>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080039d3 	.word	0x080039d3
 80038ec:	080038f9 	.word	0x080038f9
 80038f0:	0800392b 	.word	0x0800392b
 80038f4:	080039a1 	.word	0x080039a1
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 80038f8:	f7ff ff86 	bl	8003808 <dns_create_txid>
 80038fc:	4603      	mov	r3, r0
 80038fe:	461a      	mov	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2202      	movs	r2, #2
 8003908:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2201      	movs	r2, #1
 8003914:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800391c:	79fb      	ldrb	r3, [r7, #7]
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff fdc2 	bl	80034a8 <dns_send>
 8003924:	4603      	mov	r3, r0
 8003926:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8003928:	e058      	b.n	80039dc <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	7b1b      	ldrb	r3, [r3, #12]
 800392e:	3b01      	subs	r3, #1
 8003930:	b2da      	uxtb	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	731a      	strb	r2, [r3, #12]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	7b1b      	ldrb	r3, [r3, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d14b      	bne.n	80039d6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	7b5b      	ldrb	r3, [r3, #13]
 8003942:	3301      	adds	r3, #1
 8003944:	b2da      	uxtb	r2, r3
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	735a      	strb	r2, [r3, #13]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	7b5b      	ldrb	r3, [r3, #13]
 800394e:	2b04      	cmp	r3, #4
 8003950:	d11b      	bne.n	800398a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8003952:	68f8      	ldr	r0, [r7, #12]
 8003954:	f7ff ff88 	bl	8003868 <dns_backupserver_available>
 8003958:	4603      	mov	r3, r0
 800395a:	2b00      	cmp	r3, #0
 800395c:	d00c      	beq.n	8003978 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	7adb      	ldrb	r3, [r3, #11]
 8003962:	3301      	adds	r3, #1
 8003964:	b2da      	uxtb	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2201      	movs	r2, #1
 800396e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	735a      	strb	r2, [r3, #13]
 8003976:	e00c      	b.n	8003992 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8003978:	79fb      	ldrb	r3, [r7, #7]
 800397a:	2100      	movs	r1, #0
 800397c:	4618      	mov	r0, r3
 800397e:	f7ff fe83 	bl	8003688 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	729a      	strb	r2, [r3, #10]
            break;
 8003988:	e028      	b.n	80039dc <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	7b5a      	ldrb	r2, [r3, #13]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8003992:	79fb      	ldrb	r3, [r7, #7]
 8003994:	4618      	mov	r0, r3
 8003996:	f7ff fd87 	bl	80034a8 <dns_send>
 800399a:	4603      	mov	r3, r0
 800399c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800399e:	e01a      	b.n	80039d6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <dns_check_entry+0x10e>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	1e5a      	subs	r2, r3, #1
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d10f      	bne.n	80039da <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2200      	movs	r2, #0
 80039be:	729a      	strb	r2, [r3, #10]
      }
      break;
 80039c0:	e00b      	b.n	80039da <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 80039c2:	4b09      	ldr	r3, [pc, #36]	; (80039e8 <dns_check_entry+0x13c>)
 80039c4:	f240 425b 	movw	r2, #1115	; 0x45b
 80039c8:	490a      	ldr	r1, [pc, #40]	; (80039f4 <dns_check_entry+0x148>)
 80039ca:	4809      	ldr	r0, [pc, #36]	; (80039f0 <dns_check_entry+0x144>)
 80039cc:	f00c f8e2 	bl	800fb94 <iprintf>
      break;
 80039d0:	e004      	b.n	80039dc <dns_check_entry+0x130>
      break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <dns_check_entry+0x130>
      break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <dns_check_entry+0x130>
      break;
 80039da:	bf00      	nop
  }
}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}
 80039e4:	200000b0 	.word	0x200000b0
 80039e8:	08010a40 	.word	0x08010a40
 80039ec:	08010ab0 	.word	0x08010ab0
 80039f0:	08010a88 	.word	0x08010a88
 80039f4:	08010acc 	.word	0x08010acc

080039f8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 80039fe:	2300      	movs	r3, #0
 8003a00:	71fb      	strb	r3, [r7, #7]
 8003a02:	e006      	b.n	8003a12 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	4618      	mov	r0, r3
 8003a08:	f7ff ff50 	bl	80038ac <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	3301      	adds	r3, #1
 8003a10:	71fb      	strb	r3, [r7, #7]
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b03      	cmp	r3, #3
 8003a16:	d9f5      	bls.n	8003a04 <dns_check_entries+0xc>
  }
}
 8003a18:	bf00      	nop
 8003a1a:	3708      	adds	r7, #8
 8003a1c:	46bd      	mov	sp, r7
 8003a1e:	bd80      	pop	{r7, pc}

08003a20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003a26:	2300      	movs	r3, #0
 8003a28:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003a2a:	f000 f8d7 	bl	8003bdc <mem_init>
  memp_init();
 8003a2e:	f000 fbdd 	bl	80041ec <memp_init>
  pbuf_init();
  netif_init();
 8003a32:	f000 fc95 	bl	8004360 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003a36:	f007 f981 	bl	800ad3c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003a3a:	f001 fedd 	bl	80057f8 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8003a3e:	f7ff fd01 	bl	8003444 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003a42:	f007 f8f3 	bl	800ac2c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003a46:	bf00      	nop
 8003a48:	3708      	adds	r7, #8
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003a5a:	4b05      	ldr	r3, [pc, #20]	; (8003a70 <ptr_to_mem+0x20>)
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	88fb      	ldrh	r3, [r7, #6]
 8003a60:	4413      	add	r3, r2
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000528 	.word	0x20000528

08003a74 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a05      	ldr	r2, [pc, #20]	; (8003a94 <mem_to_ptr+0x20>)
 8003a80:	6812      	ldr	r2, [r2, #0]
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	b29b      	uxth	r3, r3
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
 8003a92:	bf00      	nop
 8003a94:	20000528 	.word	0x20000528

08003a98 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003aa0:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <plug_holes+0x120>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d206      	bcs.n	8003ab8 <plug_holes+0x20>
 8003aaa:	4b44      	ldr	r3, [pc, #272]	; (8003bbc <plug_holes+0x124>)
 8003aac:	f240 12df 	movw	r2, #479	; 0x1df
 8003ab0:	4943      	ldr	r1, [pc, #268]	; (8003bc0 <plug_holes+0x128>)
 8003ab2:	4844      	ldr	r0, [pc, #272]	; (8003bc4 <plug_holes+0x12c>)
 8003ab4:	f00c f86e 	bl	800fb94 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003ab8:	4b43      	ldr	r3, [pc, #268]	; (8003bc8 <plug_holes+0x130>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d306      	bcc.n	8003ad0 <plug_holes+0x38>
 8003ac2:	4b3e      	ldr	r3, [pc, #248]	; (8003bbc <plug_holes+0x124>)
 8003ac4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003ac8:	4940      	ldr	r1, [pc, #256]	; (8003bcc <plug_holes+0x134>)
 8003aca:	483e      	ldr	r0, [pc, #248]	; (8003bc4 <plug_holes+0x12c>)
 8003acc:	f00c f862 	bl	800fb94 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	791b      	ldrb	r3, [r3, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d006      	beq.n	8003ae6 <plug_holes+0x4e>
 8003ad8:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <plug_holes+0x124>)
 8003ada:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003ade:	493c      	ldr	r1, [pc, #240]	; (8003bd0 <plug_holes+0x138>)
 8003ae0:	4838      	ldr	r0, [pc, #224]	; (8003bc4 <plug_holes+0x12c>)
 8003ae2:	f00c f857 	bl	800fb94 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	881b      	ldrh	r3, [r3, #0]
 8003aea:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003aee:	d906      	bls.n	8003afe <plug_holes+0x66>
 8003af0:	4b32      	ldr	r3, [pc, #200]	; (8003bbc <plug_holes+0x124>)
 8003af2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003af6:	4937      	ldr	r1, [pc, #220]	; (8003bd4 <plug_holes+0x13c>)
 8003af8:	4832      	ldr	r0, [pc, #200]	; (8003bc4 <plug_holes+0x12c>)
 8003afa:	f00c f84b 	bl	800fb94 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	881b      	ldrh	r3, [r3, #0]
 8003b02:	4618      	mov	r0, r3
 8003b04:	f7ff ffa4 	bl	8003a50 <ptr_to_mem>
 8003b08:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	429a      	cmp	r2, r3
 8003b10:	d024      	beq.n	8003b5c <plug_holes+0xc4>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	791b      	ldrb	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d120      	bne.n	8003b5c <plug_holes+0xc4>
 8003b1a:	4b2b      	ldr	r3, [pc, #172]	; (8003bc8 <plug_holes+0x130>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d01b      	beq.n	8003b5c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003b24:	4b2c      	ldr	r3, [pc, #176]	; (8003bd8 <plug_holes+0x140>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68fa      	ldr	r2, [r7, #12]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d102      	bne.n	8003b34 <plug_holes+0x9c>
      lfree = mem;
 8003b2e:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <plug_holes+0x140>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	881a      	ldrh	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	881b      	ldrh	r3, [r3, #0]
 8003b40:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b44:	d00a      	beq.n	8003b5c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	881b      	ldrh	r3, [r3, #0]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f7ff ff80 	bl	8003a50 <ptr_to_mem>
 8003b50:	4604      	mov	r4, r0
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f7ff ff8e 	bl	8003a74 <mem_to_ptr>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	885b      	ldrh	r3, [r3, #2]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff ff75 	bl	8003a50 <ptr_to_mem>
 8003b66:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d01f      	beq.n	8003bb0 <plug_holes+0x118>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	791b      	ldrb	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d11b      	bne.n	8003bb0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003b78:	4b17      	ldr	r3, [pc, #92]	; (8003bd8 <plug_holes+0x140>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d102      	bne.n	8003b88 <plug_holes+0xf0>
      lfree = pmem;
 8003b82:	4a15      	ldr	r2, [pc, #84]	; (8003bd8 <plug_holes+0x140>)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	881a      	ldrh	r2, [r3, #0]
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	881b      	ldrh	r3, [r3, #0]
 8003b94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003b98:	d00a      	beq.n	8003bb0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	881b      	ldrh	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7ff ff56 	bl	8003a50 <ptr_to_mem>
 8003ba4:	4604      	mov	r4, r0
 8003ba6:	68b8      	ldr	r0, [r7, #8]
 8003ba8:	f7ff ff64 	bl	8003a74 <mem_to_ptr>
 8003bac:	4603      	mov	r3, r0
 8003bae:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	20000528 	.word	0x20000528
 8003bbc:	08010aec 	.word	0x08010aec
 8003bc0:	08010b1c 	.word	0x08010b1c
 8003bc4:	08010b34 	.word	0x08010b34
 8003bc8:	2000052c 	.word	0x2000052c
 8003bcc:	08010b5c 	.word	0x08010b5c
 8003bd0:	08010b78 	.word	0x08010b78
 8003bd4:	08010b94 	.word	0x08010b94
 8003bd8:	20000530 	.word	0x20000530

08003bdc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003be2:	4b18      	ldr	r3, [pc, #96]	; (8003c44 <mem_init+0x68>)
 8003be4:	3303      	adds	r3, #3
 8003be6:	f023 0303 	bic.w	r3, r3, #3
 8003bea:	461a      	mov	r2, r3
 8003bec:	4b16      	ldr	r3, [pc, #88]	; (8003c48 <mem_init+0x6c>)
 8003bee:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003bf0:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <mem_init+0x6c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003bfc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003c0a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003c0e:	f7ff ff1f 	bl	8003a50 <ptr_to_mem>
 8003c12:	4602      	mov	r2, r0
 8003c14:	4b0d      	ldr	r3, [pc, #52]	; (8003c4c <mem_init+0x70>)
 8003c16:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8003c18:	4b0c      	ldr	r3, [pc, #48]	; (8003c4c <mem_init+0x70>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <mem_init+0x70>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003c28:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003c2a:	4b08      	ldr	r3, [pc, #32]	; (8003c4c <mem_init+0x70>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003c32:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <mem_init+0x6c>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <mem_init+0x74>)
 8003c3a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	200037f4 	.word	0x200037f4
 8003c48:	20000528 	.word	0x20000528
 8003c4c:	2000052c 	.word	0x2000052c
 8003c50:	20000530 	.word	0x20000530

08003c54 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff ff09 	bl	8003a74 <mem_to_ptr>
 8003c62:	4603      	mov	r3, r0
 8003c64:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	881b      	ldrh	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7ff fef0 	bl	8003a50 <ptr_to_mem>
 8003c70:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	885b      	ldrh	r3, [r3, #2]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7ff feea 	bl	8003a50 <ptr_to_mem>
 8003c7c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c86:	d818      	bhi.n	8003cba <mem_link_valid+0x66>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	885b      	ldrh	r3, [r3, #2]
 8003c8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003c90:	d813      	bhi.n	8003cba <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8003c96:	8afa      	ldrh	r2, [r7, #22]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d004      	beq.n	8003ca6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	8afa      	ldrh	r2, [r7, #22]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d109      	bne.n	8003cba <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003ca6:	4b08      	ldr	r3, [pc, #32]	; (8003cc8 <mem_link_valid+0x74>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d006      	beq.n	8003cbe <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	885b      	ldrh	r3, [r3, #2]
 8003cb4:	8afa      	ldrh	r2, [r7, #22]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <mem_link_valid+0x6a>
    return 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	e000      	b.n	8003cc0 <mem_link_valid+0x6c>
  }
  return 1;
 8003cbe:	2301      	movs	r3, #1
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	2000052c 	.word	0x2000052c

08003ccc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d04c      	beq.n	8003d74 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d007      	beq.n	8003cf4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8003ce4:	4b25      	ldr	r3, [pc, #148]	; (8003d7c <mem_free+0xb0>)
 8003ce6:	f240 2273 	movw	r2, #627	; 0x273
 8003cea:	4925      	ldr	r1, [pc, #148]	; (8003d80 <mem_free+0xb4>)
 8003cec:	4825      	ldr	r0, [pc, #148]	; (8003d84 <mem_free+0xb8>)
 8003cee:	f00b ff51 	bl	800fb94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003cf2:	e040      	b.n	8003d76 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	3b08      	subs	r3, #8
 8003cf8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8003cfa:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <mem_free+0xbc>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68fa      	ldr	r2, [r7, #12]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d306      	bcc.n	8003d12 <mem_free+0x46>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f103 020c 	add.w	r2, r3, #12
 8003d0a:	4b20      	ldr	r3, [pc, #128]	; (8003d8c <mem_free+0xc0>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d907      	bls.n	8003d22 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8003d12:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <mem_free+0xb0>)
 8003d14:	f240 227f 	movw	r2, #639	; 0x27f
 8003d18:	491d      	ldr	r1, [pc, #116]	; (8003d90 <mem_free+0xc4>)
 8003d1a:	481a      	ldr	r0, [pc, #104]	; (8003d84 <mem_free+0xb8>)
 8003d1c:	f00b ff3a 	bl	800fb94 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003d20:	e029      	b.n	8003d76 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	791b      	ldrb	r3, [r3, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d107      	bne.n	8003d3a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8003d2a:	4b14      	ldr	r3, [pc, #80]	; (8003d7c <mem_free+0xb0>)
 8003d2c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8003d30:	4918      	ldr	r1, [pc, #96]	; (8003d94 <mem_free+0xc8>)
 8003d32:	4814      	ldr	r0, [pc, #80]	; (8003d84 <mem_free+0xb8>)
 8003d34:	f00b ff2e 	bl	800fb94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003d38:	e01d      	b.n	8003d76 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8003d3a:	68f8      	ldr	r0, [r7, #12]
 8003d3c:	f7ff ff8a 	bl	8003c54 <mem_link_valid>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d107      	bne.n	8003d56 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8003d46:	4b0d      	ldr	r3, [pc, #52]	; (8003d7c <mem_free+0xb0>)
 8003d48:	f240 2295 	movw	r2, #661	; 0x295
 8003d4c:	4912      	ldr	r1, [pc, #72]	; (8003d98 <mem_free+0xcc>)
 8003d4e:	480d      	ldr	r0, [pc, #52]	; (8003d84 <mem_free+0xb8>)
 8003d50:	f00b ff20 	bl	800fb94 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8003d54:	e00f      	b.n	8003d76 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8003d5c:	4b0f      	ldr	r3, [pc, #60]	; (8003d9c <mem_free+0xd0>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d202      	bcs.n	8003d6c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8003d66:	4a0d      	ldr	r2, [pc, #52]	; (8003d9c <mem_free+0xd0>)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7ff fe93 	bl	8003a98 <plug_holes>
 8003d72:	e000      	b.n	8003d76 <mem_free+0xaa>
    return;
 8003d74:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	08010aec 	.word	0x08010aec
 8003d80:	08010bc0 	.word	0x08010bc0
 8003d84:	08010b34 	.word	0x08010b34
 8003d88:	20000528 	.word	0x20000528
 8003d8c:	2000052c 	.word	0x2000052c
 8003d90:	08010be4 	.word	0x08010be4
 8003d94:	08010c00 	.word	0x08010c00
 8003d98:	08010c28 	.word	0x08010c28
 8003d9c:	20000530 	.word	0x20000530

08003da0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	460b      	mov	r3, r1
 8003daa:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8003dac:	887b      	ldrh	r3, [r7, #2]
 8003dae:	3303      	adds	r3, #3
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f023 0303 	bic.w	r3, r3, #3
 8003db6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8003db8:	8bfb      	ldrh	r3, [r7, #30]
 8003dba:	2b0b      	cmp	r3, #11
 8003dbc:	d801      	bhi.n	8003dc2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8003dbe:	230c      	movs	r3, #12
 8003dc0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8003dc2:	8bfb      	ldrh	r3, [r7, #30]
 8003dc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003dc8:	d803      	bhi.n	8003dd2 <mem_trim+0x32>
 8003dca:	8bfa      	ldrh	r2, [r7, #30]
 8003dcc:	887b      	ldrh	r3, [r7, #2]
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d201      	bcs.n	8003dd6 <mem_trim+0x36>
    return NULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e0cc      	b.n	8003f70 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8003dd6:	4b68      	ldr	r3, [pc, #416]	; (8003f78 <mem_trim+0x1d8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d304      	bcc.n	8003dea <mem_trim+0x4a>
 8003de0:	4b66      	ldr	r3, [pc, #408]	; (8003f7c <mem_trim+0x1dc>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d306      	bcc.n	8003df8 <mem_trim+0x58>
 8003dea:	4b65      	ldr	r3, [pc, #404]	; (8003f80 <mem_trim+0x1e0>)
 8003dec:	f240 22d2 	movw	r2, #722	; 0x2d2
 8003df0:	4964      	ldr	r1, [pc, #400]	; (8003f84 <mem_trim+0x1e4>)
 8003df2:	4865      	ldr	r0, [pc, #404]	; (8003f88 <mem_trim+0x1e8>)
 8003df4:	f00b fece 	bl	800fb94 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8003df8:	4b5f      	ldr	r3, [pc, #380]	; (8003f78 <mem_trim+0x1d8>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	687a      	ldr	r2, [r7, #4]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d304      	bcc.n	8003e0c <mem_trim+0x6c>
 8003e02:	4b5e      	ldr	r3, [pc, #376]	; (8003f7c <mem_trim+0x1dc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d301      	bcc.n	8003e10 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	e0af      	b.n	8003f70 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3b08      	subs	r3, #8
 8003e14:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8003e16:	69b8      	ldr	r0, [r7, #24]
 8003e18:	f7ff fe2c 	bl	8003a74 <mem_to_ptr>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	881a      	ldrh	r2, [r3, #0]
 8003e24:	8afb      	ldrh	r3, [r7, #22]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b08      	subs	r3, #8
 8003e2c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8003e2e:	8bfa      	ldrh	r2, [r7, #30]
 8003e30:	8abb      	ldrh	r3, [r7, #20]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d906      	bls.n	8003e44 <mem_trim+0xa4>
 8003e36:	4b52      	ldr	r3, [pc, #328]	; (8003f80 <mem_trim+0x1e0>)
 8003e38:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8003e3c:	4953      	ldr	r1, [pc, #332]	; (8003f8c <mem_trim+0x1ec>)
 8003e3e:	4852      	ldr	r0, [pc, #328]	; (8003f88 <mem_trim+0x1e8>)
 8003e40:	f00b fea8 	bl	800fb94 <iprintf>
  if (newsize > size) {
 8003e44:	8bfa      	ldrh	r2, [r7, #30]
 8003e46:	8abb      	ldrh	r3, [r7, #20]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d901      	bls.n	8003e50 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	e08f      	b.n	8003f70 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8003e50:	8bfa      	ldrh	r2, [r7, #30]
 8003e52:	8abb      	ldrh	r3, [r7, #20]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d101      	bne.n	8003e5c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	e089      	b.n	8003f70 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8003e5c:	69bb      	ldr	r3, [r7, #24]
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff fdf5 	bl	8003a50 <ptr_to_mem>
 8003e66:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	791b      	ldrb	r3, [r3, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d13f      	bne.n	8003ef0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	881b      	ldrh	r3, [r3, #0]
 8003e74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003e78:	d106      	bne.n	8003e88 <mem_trim+0xe8>
 8003e7a:	4b41      	ldr	r3, [pc, #260]	; (8003f80 <mem_trim+0x1e0>)
 8003e7c:	f240 22f5 	movw	r2, #757	; 0x2f5
 8003e80:	4943      	ldr	r1, [pc, #268]	; (8003f90 <mem_trim+0x1f0>)
 8003e82:	4841      	ldr	r0, [pc, #260]	; (8003f88 <mem_trim+0x1e8>)
 8003e84:	f00b fe86 	bl	800fb94 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003e8e:	8afa      	ldrh	r2, [r7, #22]
 8003e90:	8bfb      	ldrh	r3, [r7, #30]
 8003e92:	4413      	add	r3, r2
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3308      	adds	r3, #8
 8003e98:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8003e9a:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <mem_trim+0x1f4>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d106      	bne.n	8003eb2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 8003ea4:	89fb      	ldrh	r3, [r7, #14]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7ff fdd2 	bl	8003a50 <ptr_to_mem>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <mem_trim+0x1f4>)
 8003eb0:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8003eb2:	89fb      	ldrh	r3, [r7, #14]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff fdcb 	bl	8003a50 <ptr_to_mem>
 8003eba:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	89ba      	ldrh	r2, [r7, #12]
 8003ec6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	8afa      	ldrh	r2, [r7, #22]
 8003ecc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	89fa      	ldrh	r2, [r7, #14]
 8003ed2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	881b      	ldrh	r3, [r3, #0]
 8003ed8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003edc:	d047      	beq.n	8003f6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	881b      	ldrh	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f7ff fdb4 	bl	8003a50 <ptr_to_mem>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	89fb      	ldrh	r3, [r7, #14]
 8003eec:	8053      	strh	r3, [r2, #2]
 8003eee:	e03e      	b.n	8003f6e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8003ef0:	8bfb      	ldrh	r3, [r7, #30]
 8003ef2:	f103 0214 	add.w	r2, r3, #20
 8003ef6:	8abb      	ldrh	r3, [r7, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d838      	bhi.n	8003f6e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8003efc:	8afa      	ldrh	r2, [r7, #22]
 8003efe:	8bfb      	ldrh	r3, [r7, #30]
 8003f00:	4413      	add	r3, r2
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3308      	adds	r3, #8
 8003f06:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8003f08:	69bb      	ldr	r3, [r7, #24]
 8003f0a:	881b      	ldrh	r3, [r3, #0]
 8003f0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f10:	d106      	bne.n	8003f20 <mem_trim+0x180>
 8003f12:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <mem_trim+0x1e0>)
 8003f14:	f240 3216 	movw	r2, #790	; 0x316
 8003f18:	491d      	ldr	r1, [pc, #116]	; (8003f90 <mem_trim+0x1f0>)
 8003f1a:	481b      	ldr	r0, [pc, #108]	; (8003f88 <mem_trim+0x1e8>)
 8003f1c:	f00b fe3a 	bl	800fb94 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8003f20:	89fb      	ldrh	r3, [r7, #14]
 8003f22:	4618      	mov	r0, r3
 8003f24:	f7ff fd94 	bl	8003a50 <ptr_to_mem>
 8003f28:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <mem_trim+0x1f4>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	693a      	ldr	r2, [r7, #16]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d202      	bcs.n	8003f3a <mem_trim+0x19a>
      lfree = mem2;
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <mem_trim+0x1f4>)
 8003f36:	693b      	ldr	r3, [r7, #16]
 8003f38:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8003f40:	69bb      	ldr	r3, [r7, #24]
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	8afa      	ldrh	r2, [r7, #22]
 8003f4c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	89fa      	ldrh	r2, [r7, #14]
 8003f52:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	881b      	ldrh	r3, [r3, #0]
 8003f58:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f5c:	d007      	beq.n	8003f6e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff fd74 	bl	8003a50 <ptr_to_mem>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	89fb      	ldrh	r3, [r7, #14]
 8003f6c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8003f6e:	687b      	ldr	r3, [r7, #4]
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3720      	adds	r7, #32
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	20000528 	.word	0x20000528
 8003f7c:	2000052c 	.word	0x2000052c
 8003f80:	08010aec 	.word	0x08010aec
 8003f84:	08010c5c 	.word	0x08010c5c
 8003f88:	08010b34 	.word	0x08010b34
 8003f8c:	08010c74 	.word	0x08010c74
 8003f90:	08010c94 	.word	0x08010c94
 8003f94:	20000530 	.word	0x20000530

08003f98 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <mem_malloc+0x14>
    return NULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e0d9      	b.n	8004160 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	3303      	adds	r3, #3
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8003fb8:	8bbb      	ldrh	r3, [r7, #28]
 8003fba:	2b0b      	cmp	r3, #11
 8003fbc:	d801      	bhi.n	8003fc2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8003fbe:	230c      	movs	r3, #12
 8003fc0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8003fc2:	8bbb      	ldrh	r3, [r7, #28]
 8003fc4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003fc8:	d803      	bhi.n	8003fd2 <mem_malloc+0x3a>
 8003fca:	8bba      	ldrh	r2, [r7, #28]
 8003fcc:	88fb      	ldrh	r3, [r7, #6]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d201      	bcs.n	8003fd6 <mem_malloc+0x3e>
    return NULL;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	e0c4      	b.n	8004160 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8003fd6:	4b64      	ldr	r3, [pc, #400]	; (8004168 <mem_malloc+0x1d0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff fd4a 	bl	8003a74 <mem_to_ptr>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	83fb      	strh	r3, [r7, #30]
 8003fe4:	e0b4      	b.n	8004150 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8003fe6:	8bfb      	ldrh	r3, [r7, #30]
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7ff fd31 	bl	8003a50 <ptr_to_mem>
 8003fee:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	791b      	ldrb	r3, [r3, #4]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f040 80a4 	bne.w	8004142 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	8bfb      	ldrh	r3, [r7, #30]
 8004002:	1ad3      	subs	r3, r2, r3
 8004004:	f1a3 0208 	sub.w	r2, r3, #8
 8004008:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800400a:	429a      	cmp	r2, r3
 800400c:	f0c0 8099 	bcc.w	8004142 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8004010:	697b      	ldr	r3, [r7, #20]
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	461a      	mov	r2, r3
 8004016:	8bfb      	ldrh	r3, [r7, #30]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	f1a3 0208 	sub.w	r2, r3, #8
 800401e:	8bbb      	ldrh	r3, [r7, #28]
 8004020:	3314      	adds	r3, #20
 8004022:	429a      	cmp	r2, r3
 8004024:	d333      	bcc.n	800408e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8004026:	8bfa      	ldrh	r2, [r7, #30]
 8004028:	8bbb      	ldrh	r3, [r7, #28]
 800402a:	4413      	add	r3, r2
 800402c:	b29b      	uxth	r3, r3
 800402e:	3308      	adds	r3, #8
 8004030:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8004032:	8a7b      	ldrh	r3, [r7, #18]
 8004034:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004038:	d106      	bne.n	8004048 <mem_malloc+0xb0>
 800403a:	4b4c      	ldr	r3, [pc, #304]	; (800416c <mem_malloc+0x1d4>)
 800403c:	f240 3287 	movw	r2, #903	; 0x387
 8004040:	494b      	ldr	r1, [pc, #300]	; (8004170 <mem_malloc+0x1d8>)
 8004042:	484c      	ldr	r0, [pc, #304]	; (8004174 <mem_malloc+0x1dc>)
 8004044:	f00b fda6 	bl	800fb94 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004048:	8a7b      	ldrh	r3, [r7, #18]
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fd00 	bl	8003a50 <ptr_to_mem>
 8004050:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	2200      	movs	r2, #0
 8004056:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	881a      	ldrh	r2, [r3, #0]
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8bfa      	ldrh	r2, [r7, #30]
 8004064:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	8a7a      	ldrh	r2, [r7, #18]
 800406a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	2201      	movs	r2, #1
 8004070:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800407a:	d00b      	beq.n	8004094 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	881b      	ldrh	r3, [r3, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f7ff fce5 	bl	8003a50 <ptr_to_mem>
 8004086:	4602      	mov	r2, r0
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	8053      	strh	r3, [r2, #2]
 800408c:	e002      	b.n	8004094 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2201      	movs	r2, #1
 8004092:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8004094:	4b34      	ldr	r3, [pc, #208]	; (8004168 <mem_malloc+0x1d0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	697a      	ldr	r2, [r7, #20]
 800409a:	429a      	cmp	r2, r3
 800409c:	d127      	bne.n	80040ee <mem_malloc+0x156>
          struct mem *cur = lfree;
 800409e:	4b32      	ldr	r3, [pc, #200]	; (8004168 <mem_malloc+0x1d0>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80040a4:	e005      	b.n	80040b2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	881b      	ldrh	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7ff fcd0 	bl	8003a50 <ptr_to_mem>
 80040b0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	791b      	ldrb	r3, [r3, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d004      	beq.n	80040c4 <mem_malloc+0x12c>
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <mem_malloc+0x1e0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d1f0      	bne.n	80040a6 <mem_malloc+0x10e>
          }
          lfree = cur;
 80040c4:	4a28      	ldr	r2, [pc, #160]	; (8004168 <mem_malloc+0x1d0>)
 80040c6:	69bb      	ldr	r3, [r7, #24]
 80040c8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80040ca:	4b27      	ldr	r3, [pc, #156]	; (8004168 <mem_malloc+0x1d0>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <mem_malloc+0x1e0>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d00b      	beq.n	80040ee <mem_malloc+0x156>
 80040d6:	4b24      	ldr	r3, [pc, #144]	; (8004168 <mem_malloc+0x1d0>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d006      	beq.n	80040ee <mem_malloc+0x156>
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <mem_malloc+0x1d4>)
 80040e2:	f240 32b5 	movw	r2, #949	; 0x3b5
 80040e6:	4925      	ldr	r1, [pc, #148]	; (800417c <mem_malloc+0x1e4>)
 80040e8:	4822      	ldr	r0, [pc, #136]	; (8004174 <mem_malloc+0x1dc>)
 80040ea:	f00b fd53 	bl	800fb94 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80040ee:	8bba      	ldrh	r2, [r7, #28]
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	4413      	add	r3, r2
 80040f4:	3308      	adds	r3, #8
 80040f6:	4a20      	ldr	r2, [pc, #128]	; (8004178 <mem_malloc+0x1e0>)
 80040f8:	6812      	ldr	r2, [r2, #0]
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d906      	bls.n	800410c <mem_malloc+0x174>
 80040fe:	4b1b      	ldr	r3, [pc, #108]	; (800416c <mem_malloc+0x1d4>)
 8004100:	f240 32ba 	movw	r2, #954	; 0x3ba
 8004104:	491e      	ldr	r1, [pc, #120]	; (8004180 <mem_malloc+0x1e8>)
 8004106:	481b      	ldr	r0, [pc, #108]	; (8004174 <mem_malloc+0x1dc>)
 8004108:	f00b fd44 	bl	800fb94 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d006      	beq.n	8004124 <mem_malloc+0x18c>
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <mem_malloc+0x1d4>)
 8004118:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 800411c:	4919      	ldr	r1, [pc, #100]	; (8004184 <mem_malloc+0x1ec>)
 800411e:	4815      	ldr	r0, [pc, #84]	; (8004174 <mem_malloc+0x1dc>)
 8004120:	f00b fd38 	bl	800fb94 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d006      	beq.n	800413c <mem_malloc+0x1a4>
 800412e:	4b0f      	ldr	r3, [pc, #60]	; (800416c <mem_malloc+0x1d4>)
 8004130:	f240 32be 	movw	r2, #958	; 0x3be
 8004134:	4914      	ldr	r1, [pc, #80]	; (8004188 <mem_malloc+0x1f0>)
 8004136:	480f      	ldr	r0, [pc, #60]	; (8004174 <mem_malloc+0x1dc>)
 8004138:	f00b fd2c 	bl	800fb94 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	3308      	adds	r3, #8
 8004140:	e00e      	b.n	8004160 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 8004142:	8bfb      	ldrh	r3, [r7, #30]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fc83 	bl	8003a50 <ptr_to_mem>
 800414a:	4603      	mov	r3, r0
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004150:	8bfa      	ldrh	r2, [r7, #30]
 8004152:	8bbb      	ldrh	r3, [r7, #28]
 8004154:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004158:	429a      	cmp	r2, r3
 800415a:	f4ff af44 	bcc.w	8003fe6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	20000530 	.word	0x20000530
 800416c:	08010aec 	.word	0x08010aec
 8004170:	08010c94 	.word	0x08010c94
 8004174:	08010b34 	.word	0x08010b34
 8004178:	2000052c 	.word	0x2000052c
 800417c:	08010ca8 	.word	0x08010ca8
 8004180:	08010cc4 	.word	0x08010cc4
 8004184:	08010cf4 	.word	0x08010cf4
 8004188:	08010d24 	.word	0x08010d24

0800418c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800418c:	b480      	push	{r7}
 800418e:	b085      	sub	sp, #20
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2200      	movs	r2, #0
 800419a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	3303      	adds	r3, #3
 80041a2:	f023 0303 	bic.w	r3, r3, #3
 80041a6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
 80041ac:	e011      	b.n	80041d2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	689b      	ldr	r3, [r3, #8]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	881b      	ldrh	r3, [r3, #0]
 80041c4:	461a      	mov	r2, r3
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	4413      	add	r3, r2
 80041ca:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	3301      	adds	r3, #1
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	885b      	ldrh	r3, [r3, #2]
 80041d6:	461a      	mov	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	4293      	cmp	r3, r2
 80041dc:	dbe7      	blt.n	80041ae <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80041de:	bf00      	nop
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr
	...

080041ec <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80041f2:	2300      	movs	r3, #0
 80041f4:	80fb      	strh	r3, [r7, #6]
 80041f6:	e009      	b.n	800420c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80041f8:	88fb      	ldrh	r3, [r7, #6]
 80041fa:	4a08      	ldr	r2, [pc, #32]	; (800421c <memp_init+0x30>)
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ffc3 	bl	800418c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8004206:	88fb      	ldrh	r3, [r7, #6]
 8004208:	3301      	adds	r3, #1
 800420a:	80fb      	strh	r3, [r7, #6]
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	2b08      	cmp	r3, #8
 8004210:	d9f2      	bls.n	80041f8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8004212:	bf00      	nop
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	080138a4 	.word	0x080138a4

08004220 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d012      	beq.n	800425c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	6812      	ldr	r2, [r2, #0]
 800423e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f003 0303 	and.w	r3, r3, #3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <do_memp_malloc_pool+0x38>
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <do_memp_malloc_pool+0x48>)
 800424c:	f240 1219 	movw	r2, #281	; 0x119
 8004250:	4906      	ldr	r1, [pc, #24]	; (800426c <do_memp_malloc_pool+0x4c>)
 8004252:	4807      	ldr	r0, [pc, #28]	; (8004270 <do_memp_malloc_pool+0x50>)
 8004254:	f00b fc9e 	bl	800fb94 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	e000      	b.n	800425e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	08010d48 	.word	0x08010d48
 800426c:	08010d78 	.word	0x08010d78
 8004270:	08010d9c 	.word	0x08010d9c

08004274 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800427e:	79fb      	ldrb	r3, [r7, #7]
 8004280:	2b08      	cmp	r3, #8
 8004282:	d908      	bls.n	8004296 <memp_malloc+0x22>
 8004284:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <memp_malloc+0x3c>)
 8004286:	f240 1257 	movw	r2, #343	; 0x157
 800428a:	490a      	ldr	r1, [pc, #40]	; (80042b4 <memp_malloc+0x40>)
 800428c:	480a      	ldr	r0, [pc, #40]	; (80042b8 <memp_malloc+0x44>)
 800428e:	f00b fc81 	bl	800fb94 <iprintf>
 8004292:	2300      	movs	r3, #0
 8004294:	e008      	b.n	80042a8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8004296:	79fb      	ldrb	r3, [r7, #7]
 8004298:	4a08      	ldr	r2, [pc, #32]	; (80042bc <memp_malloc+0x48>)
 800429a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800429e:	4618      	mov	r0, r3
 80042a0:	f7ff ffbe 	bl	8004220 <do_memp_malloc_pool>
 80042a4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80042a6:	68fb      	ldr	r3, [r7, #12]
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}
 80042b0:	08010d48 	.word	0x08010d48
 80042b4:	08010dd8 	.word	0x08010dd8
 80042b8:	08010d9c 	.word	0x08010d9c
 80042bc:	080138a4 	.word	0x080138a4

080042c0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d006      	beq.n	80042e2 <do_memp_free_pool+0x22>
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <do_memp_free_pool+0x40>)
 80042d6:	f240 126d 	movw	r2, #365	; 0x16d
 80042da:	490a      	ldr	r1, [pc, #40]	; (8004304 <do_memp_free_pool+0x44>)
 80042dc:	480a      	ldr	r0, [pc, #40]	; (8004308 <do_memp_free_pool+0x48>)
 80042de:	f00b fc59 	bl	800fb94 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80042f8:	bf00      	nop
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	08010d48 	.word	0x08010d48
 8004304:	08010df8 	.word	0x08010df8
 8004308:	08010d9c 	.word	0x08010d9c

0800430c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	6039      	str	r1, [r7, #0]
 8004316:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8004318:	79fb      	ldrb	r3, [r7, #7]
 800431a:	2b08      	cmp	r3, #8
 800431c:	d907      	bls.n	800432e <memp_free+0x22>
 800431e:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <memp_free+0x44>)
 8004320:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8004324:	490b      	ldr	r1, [pc, #44]	; (8004354 <memp_free+0x48>)
 8004326:	480c      	ldr	r0, [pc, #48]	; (8004358 <memp_free+0x4c>)
 8004328:	f00b fc34 	bl	800fb94 <iprintf>
 800432c:	e00c      	b.n	8004348 <memp_free+0x3c>

  if (mem == NULL) {
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d008      	beq.n	8004346 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4a09      	ldr	r2, [pc, #36]	; (800435c <memp_free+0x50>)
 8004338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800433c:	6839      	ldr	r1, [r7, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff ffbe 	bl	80042c0 <do_memp_free_pool>
 8004344:	e000      	b.n	8004348 <memp_free+0x3c>
    return;
 8004346:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	08010d48 	.word	0x08010d48
 8004354:	08010e18 	.word	0x08010e18
 8004358:	08010d9c 	.word	0x08010d9c
 800435c:	080138a4 	.word	0x080138a4

08004360 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8004364:	bf00      	nop
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr
	...

08004370 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d108      	bne.n	8004396 <netif_add+0x26>
 8004384:	4b5b      	ldr	r3, [pc, #364]	; (80044f4 <netif_add+0x184>)
 8004386:	f240 1227 	movw	r2, #295	; 0x127
 800438a:	495b      	ldr	r1, [pc, #364]	; (80044f8 <netif_add+0x188>)
 800438c:	485b      	ldr	r0, [pc, #364]	; (80044fc <netif_add+0x18c>)
 800438e:	f00b fc01 	bl	800fb94 <iprintf>
 8004392:	2300      	movs	r3, #0
 8004394:	e0a9      	b.n	80044ea <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	2b00      	cmp	r3, #0
 800439a:	d108      	bne.n	80043ae <netif_add+0x3e>
 800439c:	4b55      	ldr	r3, [pc, #340]	; (80044f4 <netif_add+0x184>)
 800439e:	f44f 7294 	mov.w	r2, #296	; 0x128
 80043a2:	4957      	ldr	r1, [pc, #348]	; (8004500 <netif_add+0x190>)
 80043a4:	4855      	ldr	r0, [pc, #340]	; (80044fc <netif_add+0x18c>)
 80043a6:	f00b fbf5 	bl	800fb94 <iprintf>
 80043aa:	2300      	movs	r3, #0
 80043ac:	e09d      	b.n	80044ea <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d101      	bne.n	80043b8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <netif_add+0x194>)
 80043b6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80043be:	4b51      	ldr	r3, [pc, #324]	; (8004504 <netif_add+0x194>)
 80043c0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80043c8:	4b4e      	ldr	r3, [pc, #312]	; (8004504 <netif_add+0x194>)
 80043ca:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4a49      	ldr	r2, [pc, #292]	; (8004508 <netif_add+0x198>)
 80043e2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	3324      	adds	r3, #36	; 0x24
 80043f6:	2204      	movs	r2, #4
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f00b fbc2 	bl	800fb84 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6a3a      	ldr	r2, [r7, #32]
 800440a:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800440c:	4b3f      	ldr	r3, [pc, #252]	; (800450c <netif_add+0x19c>)
 800440e:	781a      	ldrb	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800441a:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	68b9      	ldr	r1, [r7, #8]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f914 	bl	8004650 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	4798      	blx	r3
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <netif_add+0xc8>
    return NULL;
 8004434:	2300      	movs	r3, #0
 8004436:	e058      	b.n	80044ea <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800443e:	2bff      	cmp	r3, #255	; 0xff
 8004440:	d103      	bne.n	800444a <netif_add+0xda>
        netif->num = 0;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800444e:	4b30      	ldr	r3, [pc, #192]	; (8004510 <netif_add+0x1a0>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	617b      	str	r3, [r7, #20]
 8004454:	e02b      	b.n	80044ae <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8004456:	697a      	ldr	r2, [r7, #20]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	429a      	cmp	r2, r3
 800445c:	d106      	bne.n	800446c <netif_add+0xfc>
 800445e:	4b25      	ldr	r3, [pc, #148]	; (80044f4 <netif_add+0x184>)
 8004460:	f240 128b 	movw	r2, #395	; 0x18b
 8004464:	492b      	ldr	r1, [pc, #172]	; (8004514 <netif_add+0x1a4>)
 8004466:	4825      	ldr	r0, [pc, #148]	; (80044fc <netif_add+0x18c>)
 8004468:	f00b fb94 	bl	800fb94 <iprintf>
        num_netifs++;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	3301      	adds	r3, #1
 8004470:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2bff      	cmp	r3, #255	; 0xff
 8004476:	dd06      	ble.n	8004486 <netif_add+0x116>
 8004478:	4b1e      	ldr	r3, [pc, #120]	; (80044f4 <netif_add+0x184>)
 800447a:	f240 128d 	movw	r2, #397	; 0x18d
 800447e:	4926      	ldr	r1, [pc, #152]	; (8004518 <netif_add+0x1a8>)
 8004480:	481e      	ldr	r0, [pc, #120]	; (80044fc <netif_add+0x18c>)
 8004482:	f00b fb87 	bl	800fb94 <iprintf>
        if (netif2->num == netif->num) {
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004492:	429a      	cmp	r2, r3
 8004494:	d108      	bne.n	80044a8 <netif_add+0x138>
          netif->num++;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800449c:	3301      	adds	r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 80044a6:	e005      	b.n	80044b4 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	617b      	str	r3, [r7, #20]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d1d0      	bne.n	8004456 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1be      	bne.n	8004438 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044c0:	2bfe      	cmp	r3, #254	; 0xfe
 80044c2:	d103      	bne.n	80044cc <netif_add+0x15c>
    netif_num = 0;
 80044c4:	4b11      	ldr	r3, [pc, #68]	; (800450c <netif_add+0x19c>)
 80044c6:	2200      	movs	r2, #0
 80044c8:	701a      	strb	r2, [r3, #0]
 80044ca:	e006      	b.n	80044da <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80044d2:	3301      	adds	r3, #1
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	4b0d      	ldr	r3, [pc, #52]	; (800450c <netif_add+0x19c>)
 80044d8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80044da:	4b0d      	ldr	r3, [pc, #52]	; (8004510 <netif_add+0x1a0>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80044e2:	4a0b      	ldr	r2, [pc, #44]	; (8004510 <netif_add+0x1a0>)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80044e8:	68fb      	ldr	r3, [r7, #12]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3718      	adds	r7, #24
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
 80044f2:	bf00      	nop
 80044f4:	08010e34 	.word	0x08010e34
 80044f8:	08010ec8 	.word	0x08010ec8
 80044fc:	08010e84 	.word	0x08010e84
 8004500:	08010ee4 	.word	0x08010ee4
 8004504:	08013920 	.word	0x08013920
 8004508:	08004933 	.word	0x08004933
 800450c:	20000558 	.word	0x20000558
 8004510:	20006d40 	.word	0x20006d40
 8004514:	08010f08 	.word	0x08010f08
 8004518:	08010f1c 	.word	0x08010f1c

0800451c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b082      	sub	sp, #8
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8004526:	6839      	ldr	r1, [r7, #0]
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f002 fca1 	bl	8006e70 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800452e:	6839      	ldr	r1, [r7, #0]
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f007 f8eb 	bl	800b70c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8004536:	bf00      	nop
 8004538:	3708      	adds	r7, #8
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d106      	bne.n	8004560 <netif_do_set_ipaddr+0x20>
 8004552:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <netif_do_set_ipaddr+0x88>)
 8004554:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004558:	491c      	ldr	r1, [pc, #112]	; (80045cc <netif_do_set_ipaddr+0x8c>)
 800455a:	481d      	ldr	r0, [pc, #116]	; (80045d0 <netif_do_set_ipaddr+0x90>)
 800455c:	f00b fb1a 	bl	800fb94 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <netif_do_set_ipaddr+0x34>
 8004566:	4b18      	ldr	r3, [pc, #96]	; (80045c8 <netif_do_set_ipaddr+0x88>)
 8004568:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800456c:	4917      	ldr	r1, [pc, #92]	; (80045cc <netif_do_set_ipaddr+0x8c>)
 800456e:	4818      	ldr	r0, [pc, #96]	; (80045d0 <netif_do_set_ipaddr+0x90>)
 8004570:	f00b fb10 	bl	800fb94 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	681a      	ldr	r2, [r3, #0]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	3304      	adds	r3, #4
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	429a      	cmp	r2, r3
 8004580:	d01c      	beq.n	80045bc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3304      	adds	r3, #4
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8004592:	f107 0314 	add.w	r3, r7, #20
 8004596:	4619      	mov	r1, r3
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff ffbf 	bl	800451c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d002      	beq.n	80045aa <netif_do_set_ipaddr+0x6a>
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	e000      	b.n	80045ac <netif_do_set_ipaddr+0x6c>
 80045aa:	2300      	movs	r3, #0
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80045b0:	2101      	movs	r1, #1
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f000 f8d2 	bl	800475c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80045b8:	2301      	movs	r3, #1
 80045ba:	e000      	b.n	80045be <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80045bc:	2300      	movs	r3, #0
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	08010e34 	.word	0x08010e34
 80045cc:	08010f4c 	.word	0x08010f4c
 80045d0:	08010e84 	.word	0x08010e84

080045d4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	3308      	adds	r3, #8
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d00a      	beq.n	8004604 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d002      	beq.n	80045fa <netif_do_set_netmask+0x26>
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	e000      	b.n	80045fc <netif_do_set_netmask+0x28>
 80045fa:	2300      	movs	r3, #0
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8004604:	2300      	movs	r3, #0
}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8004612:	b480      	push	{r7}
 8004614:	b085      	sub	sp, #20
 8004616:	af00      	add	r7, sp, #0
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	330c      	adds	r3, #12
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	429a      	cmp	r2, r3
 800462a:	d00a      	beq.n	8004642 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <netif_do_set_gw+0x26>
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	e000      	b.n	800463a <netif_do_set_gw+0x28>
 8004638:	2300      	movs	r3, #0
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800463e:	2301      	movs	r3, #1
 8004640:	e000      	b.n	8004644 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3714      	adds	r7, #20
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b088      	sub	sp, #32
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800466c:	4b1c      	ldr	r3, [pc, #112]	; (80046e0 <netif_set_addr+0x90>)
 800466e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d101      	bne.n	800467a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004676:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <netif_set_addr+0x90>)
 8004678:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d101      	bne.n	8004684 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004680:	4b17      	ldr	r3, [pc, #92]	; (80046e0 <netif_set_addr+0x90>)
 8004682:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <netif_set_addr+0x42>
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <netif_set_addr+0x46>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <netif_set_addr+0x48>
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
  if (remove) {
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80046a0:	f107 0310 	add.w	r3, r7, #16
 80046a4:	461a      	mov	r2, r3
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f7ff ff49 	bl	8004540 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80046ae:	69fa      	ldr	r2, [r7, #28]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f7ff ff8e 	bl	80045d4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	6839      	ldr	r1, [r7, #0]
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f7ff ffa8 	bl	8004612 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80046c8:	f107 0310 	add.w	r3, r7, #16
 80046cc:	461a      	mov	r2, r3
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f7ff ff35 	bl	8004540 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 80046d6:	bf00      	nop
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	08013920 	.word	0x08013920

080046e4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80046ec:	4a04      	ldr	r2, [pc, #16]	; (8004700 <netif_set_default+0x1c>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80046f2:	bf00      	nop
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20006d44 	.word	0x20006d44

08004704 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d107      	bne.n	8004722 <netif_set_up+0x1e>
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <netif_set_up+0x4c>)
 8004714:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004718:	490e      	ldr	r1, [pc, #56]	; (8004754 <netif_set_up+0x50>)
 800471a:	480f      	ldr	r0, [pc, #60]	; (8004758 <netif_set_up+0x54>)
 800471c:	f00b fa3a 	bl	800fb94 <iprintf>
 8004720:	e013      	b.n	800474a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004728:	f003 0301 	and.w	r3, r3, #1
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10c      	bne.n	800474a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004736:	f043 0301 	orr.w	r3, r3, #1
 800473a:	b2da      	uxtb	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004742:	2103      	movs	r1, #3
 8004744:	6878      	ldr	r0, [r7, #4]
 8004746:	f000 f809 	bl	800475c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	08010e34 	.word	0x08010e34
 8004754:	08010fbc 	.word	0x08010fbc
 8004758:	08010e84 	.word	0x08010e84

0800475c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d106      	bne.n	800477c <netif_issue_reports+0x20>
 800476e:	4b18      	ldr	r3, [pc, #96]	; (80047d0 <netif_issue_reports+0x74>)
 8004770:	f240 326d 	movw	r2, #877	; 0x36d
 8004774:	4917      	ldr	r1, [pc, #92]	; (80047d4 <netif_issue_reports+0x78>)
 8004776:	4818      	ldr	r0, [pc, #96]	; (80047d8 <netif_issue_reports+0x7c>)
 8004778:	f00b fa0c 	bl	800fb94 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004782:	f003 0304 	and.w	r3, r3, #4
 8004786:	2b00      	cmp	r3, #0
 8004788:	d01e      	beq.n	80047c8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004790:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004794:	2b00      	cmp	r3, #0
 8004796:	d017      	beq.n	80047c8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004798:	78fb      	ldrb	r3, [r7, #3]
 800479a:	f003 0301 	and.w	r3, r3, #1
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d013      	beq.n	80047ca <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3304      	adds	r3, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d00e      	beq.n	80047ca <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3304      	adds	r3, #4
 80047be:	4619      	mov	r1, r3
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f009 fe03 	bl	800e3cc <etharp_request>
 80047c6:	e000      	b.n	80047ca <netif_issue_reports+0x6e>
    return;
 80047c8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 80047ca:	3708      	adds	r7, #8
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}
 80047d0:	08010e34 	.word	0x08010e34
 80047d4:	08010fd8 	.word	0x08010fd8
 80047d8:	08010e84 	.word	0x08010e84

080047dc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d107      	bne.n	80047fa <netif_set_down+0x1e>
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <netif_set_down+0x58>)
 80047ec:	f240 329b 	movw	r2, #923	; 0x39b
 80047f0:	4911      	ldr	r1, [pc, #68]	; (8004838 <netif_set_down+0x5c>)
 80047f2:	4812      	ldr	r0, [pc, #72]	; (800483c <netif_set_down+0x60>)
 80047f4:	f00b f9ce 	bl	800fb94 <iprintf>
 80047f8:	e019      	b.n	800482e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004800:	f003 0301 	and.w	r3, r3, #1
 8004804:	2b00      	cmp	r3, #0
 8004806:	d012      	beq.n	800482e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800480e:	f023 0301 	bic.w	r3, r3, #1
 8004812:	b2da      	uxtb	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f009 f989 	bl	800db40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	08010e34 	.word	0x08010e34
 8004838:	08010ffc 	.word	0x08010ffc
 800483c:	08010e84 	.word	0x08010e84

08004840 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <netif_set_link_up+0x1e>
 800484e:	4b15      	ldr	r3, [pc, #84]	; (80048a4 <netif_set_link_up+0x64>)
 8004850:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004854:	4914      	ldr	r1, [pc, #80]	; (80048a8 <netif_set_link_up+0x68>)
 8004856:	4815      	ldr	r0, [pc, #84]	; (80048ac <netif_set_link_up+0x6c>)
 8004858:	f00b f99c 	bl	800fb94 <iprintf>
 800485c:	e01e      	b.n	800489c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	d117      	bne.n	800489c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004872:	f043 0304 	orr.w	r3, r3, #4
 8004876:	b2da      	uxtb	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f007 fb8e 	bl	800bfa0 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004884:	2103      	movs	r1, #3
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f7ff ff68 	bl	800475c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <netif_set_link_up+0x5c>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	69db      	ldr	r3, [r3, #28]
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	08010e34 	.word	0x08010e34
 80048a8:	0801101c 	.word	0x0801101c
 80048ac:	08010e84 	.word	0x08010e84

080048b0 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d107      	bne.n	80048ce <netif_set_link_down+0x1e>
 80048be:	4b11      	ldr	r3, [pc, #68]	; (8004904 <netif_set_link_down+0x54>)
 80048c0:	f240 4206 	movw	r2, #1030	; 0x406
 80048c4:	4910      	ldr	r1, [pc, #64]	; (8004908 <netif_set_link_down+0x58>)
 80048c6:	4811      	ldr	r0, [pc, #68]	; (800490c <netif_set_link_down+0x5c>)
 80048c8:	f00b f964 	bl	800fb94 <iprintf>
 80048cc:	e017      	b.n	80048fe <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d010      	beq.n	80048fe <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80048e2:	f023 0304 	bic.w	r3, r3, #4
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <netif_set_link_down+0x4e>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	08010e34 	.word	0x08010e34
 8004908:	08011040 	.word	0x08011040
 800490c:	08010e84 	.word	0x08010e84

08004910 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	61da      	str	r2, [r3, #28]
  }
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr

08004932 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	60f8      	str	r0, [r7, #12]
 800493a:	60b9      	str	r1, [r7, #8]
 800493c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800493e:	f06f 030b 	mvn.w	r3, #11
}
 8004942:	4618      	mov	r0, r3
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
	...

08004950 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	4603      	mov	r3, r0
 8004958:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800495a:	79fb      	ldrb	r3, [r7, #7]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d013      	beq.n	8004988 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004960:	4b0d      	ldr	r3, [pc, #52]	; (8004998 <netif_get_by_index+0x48>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e00c      	b.n	8004982 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800496e:	3301      	adds	r3, #1
 8004970:	b2db      	uxtb	r3, r3
 8004972:	79fa      	ldrb	r2, [r7, #7]
 8004974:	429a      	cmp	r2, r3
 8004976:	d101      	bne.n	800497c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	e006      	b.n	800498a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1ef      	bne.n	8004968 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004988:	2300      	movs	r3, #0
}
 800498a:	4618      	mov	r0, r3
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20006d40 	.word	0x20006d40

0800499c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b082      	sub	sp, #8
 80049a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80049a2:	4b0c      	ldr	r3, [pc, #48]	; (80049d4 <pbuf_free_ooseq+0x38>)
 80049a4:	2200      	movs	r2, #0
 80049a6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80049a8:	4b0b      	ldr	r3, [pc, #44]	; (80049d8 <pbuf_free_ooseq+0x3c>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	607b      	str	r3, [r7, #4]
 80049ae:	e00a      	b.n	80049c6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f002 fa97 	bl	8006eec <tcp_free_ooseq>
      return;
 80049be:	e005      	b.n	80049cc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	607b      	str	r3, [r7, #4]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1f1      	bne.n	80049b0 <pbuf_free_ooseq+0x14>
    }
  }
}
 80049cc:	3708      	adds	r7, #8
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	20006d48 	.word	0x20006d48
 80049d8:	20006d50 	.word	0x20006d50

080049dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80049dc:	b480      	push	{r7}
 80049de:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 80049e0:	4b03      	ldr	r3, [pc, #12]	; (80049f0 <pbuf_pool_is_empty+0x14>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80049e6:	bf00      	nop
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr
 80049f0:	20006d48 	.word	0x20006d48

080049f4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	60f8      	str	r0, [r7, #12]
 80049fc:	60b9      	str	r1, [r7, #8]
 80049fe:	4611      	mov	r1, r2
 8004a00:	461a      	mov	r2, r3
 8004a02:	460b      	mov	r3, r1
 8004a04:	80fb      	strh	r3, [r7, #6]
 8004a06:	4613      	mov	r3, r2
 8004a08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68ba      	ldr	r2, [r7, #8]
 8004a14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	88fa      	ldrh	r2, [r7, #6]
 8004a1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	88ba      	ldrh	r2, [r7, #4]
 8004a20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004a22:	8b3b      	ldrh	r3, [r7, #24]
 8004a24:	b2da      	uxtb	r2, r3
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	7f3a      	ldrb	r2, [r7, #28]
 8004a2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	73da      	strb	r2, [r3, #15]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	4603      	mov	r3, r0
 8004a50:	71fb      	strb	r3, [r7, #7]
 8004a52:	460b      	mov	r3, r1
 8004a54:	80bb      	strh	r3, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004a5a:	79fb      	ldrb	r3, [r7, #7]
 8004a5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004a5e:	887b      	ldrh	r3, [r7, #2]
 8004a60:	2b41      	cmp	r3, #65	; 0x41
 8004a62:	d00b      	beq.n	8004a7c <pbuf_alloc+0x34>
 8004a64:	2b41      	cmp	r3, #65	; 0x41
 8004a66:	dc02      	bgt.n	8004a6e <pbuf_alloc+0x26>
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d007      	beq.n	8004a7c <pbuf_alloc+0x34>
 8004a6c:	e0c2      	b.n	8004bf4 <pbuf_alloc+0x1ac>
 8004a6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004a72:	d00b      	beq.n	8004a8c <pbuf_alloc+0x44>
 8004a74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004a78:	d070      	beq.n	8004b5c <pbuf_alloc+0x114>
 8004a7a:	e0bb      	b.n	8004bf4 <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004a7c:	887a      	ldrh	r2, [r7, #2]
 8004a7e:	88bb      	ldrh	r3, [r7, #4]
 8004a80:	4619      	mov	r1, r3
 8004a82:	2000      	movs	r0, #0
 8004a84:	f000 f8d2 	bl	8004c2c <pbuf_alloc_reference>
 8004a88:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004a8a:	e0bd      	b.n	8004c08 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004a94:	88bb      	ldrh	r3, [r7, #4]
 8004a96:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004a98:	2008      	movs	r0, #8
 8004a9a:	f7ff fbeb 	bl	8004274 <memp_malloc>
 8004a9e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d109      	bne.n	8004aba <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8004aa6:	f7ff ff99 	bl	80049dc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d002      	beq.n	8004ab6 <pbuf_alloc+0x6e>
            pbuf_free(p);
 8004ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ab2:	f000 faa9 	bl	8005008 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	e0a7      	b.n	8004c0a <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004aba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004abc:	3303      	adds	r3, #3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f023 0303 	bic.w	r3, r3, #3
 8004ac4:	b29b      	uxth	r3, r3
 8004ac6:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	8b7a      	ldrh	r2, [r7, #26]
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	bf28      	it	cs
 8004ad2:	4613      	movcs	r3, r2
 8004ad4:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ad8:	3310      	adds	r3, #16
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4413      	add	r3, r2
 8004ade:	3303      	adds	r3, #3
 8004ae0:	f023 0303 	bic.w	r3, r3, #3
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	89f9      	ldrh	r1, [r7, #14]
 8004ae8:	8b7a      	ldrh	r2, [r7, #26]
 8004aea:	2300      	movs	r3, #0
 8004aec:	9301      	str	r3, [sp, #4]
 8004aee:	887b      	ldrh	r3, [r7, #2]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	460b      	mov	r3, r1
 8004af4:	4601      	mov	r1, r0
 8004af6:	6938      	ldr	r0, [r7, #16]
 8004af8:	f7ff ff7c 	bl	80049f4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	f003 0303 	and.w	r3, r3, #3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d006      	beq.n	8004b16 <pbuf_alloc+0xce>
 8004b08:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <pbuf_alloc+0x1cc>)
 8004b0a:	f240 1201 	movw	r2, #257	; 0x101
 8004b0e:	4942      	ldr	r1, [pc, #264]	; (8004c18 <pbuf_alloc+0x1d0>)
 8004b10:	4842      	ldr	r0, [pc, #264]	; (8004c1c <pbuf_alloc+0x1d4>)
 8004b12:	f00b f83f 	bl	800fb94 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004b16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b18:	3303      	adds	r3, #3
 8004b1a:	f023 0303 	bic.w	r3, r3, #3
 8004b1e:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004b22:	d106      	bne.n	8004b32 <pbuf_alloc+0xea>
 8004b24:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <pbuf_alloc+0x1cc>)
 8004b26:	f240 1203 	movw	r2, #259	; 0x103
 8004b2a:	493d      	ldr	r1, [pc, #244]	; (8004c20 <pbuf_alloc+0x1d8>)
 8004b2c:	483b      	ldr	r0, [pc, #236]	; (8004c1c <pbuf_alloc+0x1d4>)
 8004b2e:	f00b f831 	bl	800fb94 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d102      	bne.n	8004b3e <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004b3c:	e002      	b.n	8004b44 <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004b48:	8b7a      	ldrh	r2, [r7, #26]
 8004b4a:	89fb      	ldrh	r3, [r7, #14]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004b50:	2300      	movs	r3, #0
 8004b52:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004b54:	8b7b      	ldrh	r3, [r7, #26]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19e      	bne.n	8004a98 <pbuf_alloc+0x50>
      break;
 8004b5a:	e055      	b.n	8004c08 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004b5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004b5e:	3303      	adds	r3, #3
 8004b60:	b29b      	uxth	r3, r3
 8004b62:	f023 0303 	bic.w	r3, r3, #3
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	88bb      	ldrh	r3, [r7, #4]
 8004b6a:	3303      	adds	r3, #3
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	f023 0303 	bic.w	r3, r3, #3
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4413      	add	r3, r2
 8004b76:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004b78:	8b3b      	ldrh	r3, [r7, #24]
 8004b7a:	3310      	adds	r3, #16
 8004b7c:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004b7e:	8b3a      	ldrh	r2, [r7, #24]
 8004b80:	88bb      	ldrh	r3, [r7, #4]
 8004b82:	3303      	adds	r3, #3
 8004b84:	f023 0303 	bic.w	r3, r3, #3
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d306      	bcc.n	8004b9a <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004b8c:	8afa      	ldrh	r2, [r7, #22]
 8004b8e:	88bb      	ldrh	r3, [r7, #4]
 8004b90:	3303      	adds	r3, #3
 8004b92:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004b96:	429a      	cmp	r2, r3
 8004b98:	d201      	bcs.n	8004b9e <pbuf_alloc+0x156>
        return NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e035      	b.n	8004c0a <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004b9e:	8afb      	ldrh	r3, [r7, #22]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f9f9 	bl	8003f98 <mem_malloc>
 8004ba6:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <pbuf_alloc+0x16a>
        return NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	e02b      	b.n	8004c0a <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004bb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004bb4:	3310      	adds	r3, #16
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	4413      	add	r3, r2
 8004bba:	3303      	adds	r3, #3
 8004bbc:	f023 0303 	bic.w	r3, r3, #3
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	88b9      	ldrh	r1, [r7, #4]
 8004bc4:	88ba      	ldrh	r2, [r7, #4]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	9301      	str	r3, [sp, #4]
 8004bca:	887b      	ldrh	r3, [r7, #2]
 8004bcc:	9300      	str	r3, [sp, #0]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4601      	mov	r1, r0
 8004bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004bd4:	f7ff ff0e 	bl	80049f4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	f003 0303 	and.w	r3, r3, #3
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d010      	beq.n	8004c06 <pbuf_alloc+0x1be>
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <pbuf_alloc+0x1cc>)
 8004be6:	f240 1223 	movw	r2, #291	; 0x123
 8004bea:	490e      	ldr	r1, [pc, #56]	; (8004c24 <pbuf_alloc+0x1dc>)
 8004bec:	480b      	ldr	r0, [pc, #44]	; (8004c1c <pbuf_alloc+0x1d4>)
 8004bee:	f00a ffd1 	bl	800fb94 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004bf2:	e008      	b.n	8004c06 <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004bf4:	4b07      	ldr	r3, [pc, #28]	; (8004c14 <pbuf_alloc+0x1cc>)
 8004bf6:	f240 1227 	movw	r2, #295	; 0x127
 8004bfa:	490b      	ldr	r1, [pc, #44]	; (8004c28 <pbuf_alloc+0x1e0>)
 8004bfc:	4807      	ldr	r0, [pc, #28]	; (8004c1c <pbuf_alloc+0x1d4>)
 8004bfe:	f00a ffc9 	bl	800fb94 <iprintf>
      return NULL;
 8004c02:	2300      	movs	r3, #0
 8004c04:	e001      	b.n	8004c0a <pbuf_alloc+0x1c2>
      break;
 8004c06:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	08011064 	.word	0x08011064
 8004c18:	08011094 	.word	0x08011094
 8004c1c:	080110c4 	.word	0x080110c4
 8004c20:	080110ec 	.word	0x080110ec
 8004c24:	08011120 	.word	0x08011120
 8004c28:	0801114c 	.word	0x0801114c

08004c2c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	460b      	mov	r3, r1
 8004c36:	807b      	strh	r3, [r7, #2]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8004c3c:	883b      	ldrh	r3, [r7, #0]
 8004c3e:	2b41      	cmp	r3, #65	; 0x41
 8004c40:	d009      	beq.n	8004c56 <pbuf_alloc_reference+0x2a>
 8004c42:	883b      	ldrh	r3, [r7, #0]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d006      	beq.n	8004c56 <pbuf_alloc_reference+0x2a>
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <pbuf_alloc_reference+0x5c>)
 8004c4a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8004c4e:	490f      	ldr	r1, [pc, #60]	; (8004c8c <pbuf_alloc_reference+0x60>)
 8004c50:	480f      	ldr	r0, [pc, #60]	; (8004c90 <pbuf_alloc_reference+0x64>)
 8004c52:	f00a ff9f 	bl	800fb94 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8004c56:	2007      	movs	r0, #7
 8004c58:	f7ff fb0c 	bl	8004274 <memp_malloc>
 8004c5c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	e00b      	b.n	8004c80 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8004c68:	8879      	ldrh	r1, [r7, #2]
 8004c6a:	887a      	ldrh	r2, [r7, #2]
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	9301      	str	r3, [sp, #4]
 8004c70:	883b      	ldrh	r3, [r7, #0]
 8004c72:	9300      	str	r3, [sp, #0]
 8004c74:	460b      	mov	r3, r1
 8004c76:	6879      	ldr	r1, [r7, #4]
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f7ff febb 	bl	80049f4 <pbuf_init_alloced_pbuf>
  return p;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3710      	adds	r7, #16
 8004c84:	46bd      	mov	sp, r7
 8004c86:	bd80      	pop	{r7, pc}
 8004c88:	08011064 	.word	0x08011064
 8004c8c:	08011168 	.word	0x08011168
 8004c90:	080110c4 	.word	0x080110c4

08004c94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b088      	sub	sp, #32
 8004c98:	af02      	add	r7, sp, #8
 8004c9a:	607b      	str	r3, [r7, #4]
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	81bb      	strh	r3, [r7, #12]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8004ca8:	7bfb      	ldrb	r3, [r7, #15]
 8004caa:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8004cac:	8a7b      	ldrh	r3, [r7, #18]
 8004cae:	3303      	adds	r3, #3
 8004cb0:	f023 0203 	bic.w	r2, r3, #3
 8004cb4:	89bb      	ldrh	r3, [r7, #12]
 8004cb6:	441a      	add	r2, r3
 8004cb8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d901      	bls.n	8004cc2 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	e018      	b.n	8004cf4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8004cc2:	6a3b      	ldr	r3, [r7, #32]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d007      	beq.n	8004cd8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8004cc8:	8a7b      	ldrh	r3, [r7, #18]
 8004cca:	3303      	adds	r3, #3
 8004ccc:	f023 0303 	bic.w	r3, r3, #3
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e001      	b.n	8004cdc <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	89b9      	ldrh	r1, [r7, #12]
 8004ce0:	89ba      	ldrh	r2, [r7, #12]
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	9301      	str	r3, [sp, #4]
 8004ce6:	897b      	ldrh	r3, [r7, #10]
 8004ce8:	9300      	str	r3, [sp, #0]
 8004cea:	460b      	mov	r3, r1
 8004cec:	6979      	ldr	r1, [r7, #20]
 8004cee:	f7ff fe81 	bl	80049f4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8004cf2:	687b      	ldr	r3, [r7, #4]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3718      	adds	r7, #24
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d106      	bne.n	8004d1c <pbuf_realloc+0x20>
 8004d0e:	4b3a      	ldr	r3, [pc, #232]	; (8004df8 <pbuf_realloc+0xfc>)
 8004d10:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8004d14:	4939      	ldr	r1, [pc, #228]	; (8004dfc <pbuf_realloc+0x100>)
 8004d16:	483a      	ldr	r0, [pc, #232]	; (8004e00 <pbuf_realloc+0x104>)
 8004d18:	f00a ff3c 	bl	800fb94 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	891b      	ldrh	r3, [r3, #8]
 8004d20:	887a      	ldrh	r2, [r7, #2]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d264      	bcs.n	8004df0 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	891a      	ldrh	r2, [r3, #8]
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8004d30:	887b      	ldrh	r3, [r7, #2]
 8004d32:	817b      	strh	r3, [r7, #10]
  q = p;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8004d38:	e018      	b.n	8004d6c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	895b      	ldrh	r3, [r3, #10]
 8004d3e:	897a      	ldrh	r2, [r7, #10]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	891a      	ldrh	r2, [r3, #8]
 8004d48:	893b      	ldrh	r3, [r7, #8]
 8004d4a:	1ad3      	subs	r3, r2, r3
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <pbuf_realloc+0x70>
 8004d5e:	4b26      	ldr	r3, [pc, #152]	; (8004df8 <pbuf_realloc+0xfc>)
 8004d60:	f240 12af 	movw	r2, #431	; 0x1af
 8004d64:	4927      	ldr	r1, [pc, #156]	; (8004e04 <pbuf_realloc+0x108>)
 8004d66:	4826      	ldr	r0, [pc, #152]	; (8004e00 <pbuf_realloc+0x104>)
 8004d68:	f00a ff14 	bl	800fb94 <iprintf>
  while (rem_len > q->len) {
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	895b      	ldrh	r3, [r3, #10]
 8004d70:	897a      	ldrh	r2, [r7, #10]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d8e1      	bhi.n	8004d3a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	7b1b      	ldrb	r3, [r3, #12]
 8004d7a:	f003 030f 	and.w	r3, r3, #15
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d122      	bne.n	8004dc8 <pbuf_realloc+0xcc>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	895b      	ldrh	r3, [r3, #10]
 8004d86:	897a      	ldrh	r2, [r7, #10]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d01d      	beq.n	8004dc8 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	7b5b      	ldrb	r3, [r3, #13]
 8004d90:	f003 0302 	and.w	r3, r3, #2
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d117      	bne.n	8004dc8 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	897b      	ldrh	r3, [r7, #10]
 8004da6:	4413      	add	r3, r2
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	4619      	mov	r1, r3
 8004dac:	68f8      	ldr	r0, [r7, #12]
 8004dae:	f7fe fff7 	bl	8003da0 <mem_trim>
 8004db2:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <pbuf_realloc+0xcc>
 8004dba:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <pbuf_realloc+0xfc>)
 8004dbc:	f240 12bd 	movw	r2, #445	; 0x1bd
 8004dc0:	4911      	ldr	r1, [pc, #68]	; (8004e08 <pbuf_realloc+0x10c>)
 8004dc2:	480f      	ldr	r0, [pc, #60]	; (8004e00 <pbuf_realloc+0x104>)
 8004dc4:	f00a fee6 	bl	800fb94 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	897a      	ldrh	r2, [r7, #10]
 8004dcc:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	895a      	ldrh	r2, [r3, #10]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4618      	mov	r0, r3
 8004de4:	f000 f910 	bl	8005008 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e000      	b.n	8004df2 <pbuf_realloc+0xf6>
    return;
 8004df0:	bf00      	nop

}
 8004df2:	3710      	adds	r7, #16
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	08011064 	.word	0x08011064
 8004dfc:	0801117c 	.word	0x0801117c
 8004e00:	080110c4 	.word	0x080110c4
 8004e04:	08011194 	.word	0x08011194
 8004e08:	080111ac 	.word	0x080111ac

08004e0c <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b086      	sub	sp, #24
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	4613      	mov	r3, r2
 8004e18:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <pbuf_add_header_impl+0x22>
 8004e20:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <pbuf_add_header_impl+0xc4>)
 8004e22:	f240 12df 	movw	r2, #479	; 0x1df
 8004e26:	492b      	ldr	r1, [pc, #172]	; (8004ed4 <pbuf_add_header_impl+0xc8>)
 8004e28:	482b      	ldr	r0, [pc, #172]	; (8004ed8 <pbuf_add_header_impl+0xcc>)
 8004e2a:	f00a feb3 	bl	800fb94 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d003      	beq.n	8004e3c <pbuf_add_header_impl+0x30>
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e3a:	d301      	bcc.n	8004e40 <pbuf_add_header_impl+0x34>
    return 1;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e043      	b.n	8004ec8 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d101      	bne.n	8004e4a <pbuf_add_header_impl+0x3e>
    return 0;
 8004e46:	2300      	movs	r3, #0
 8004e48:	e03e      	b.n	8004ec8 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	891a      	ldrh	r2, [r3, #8]
 8004e52:	8a7b      	ldrh	r3, [r7, #18]
 8004e54:	4413      	add	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	8a7a      	ldrh	r2, [r7, #18]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d901      	bls.n	8004e62 <pbuf_add_header_impl+0x56>
    return 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e032      	b.n	8004ec8 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	7b1b      	ldrb	r3, [r3, #12]
 8004e66:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8004e68:	8a3b      	ldrh	r3, [r7, #16]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d00c      	beq.n	8004e8c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	685a      	ldr	r2, [r3, #4]
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	425b      	negs	r3, r3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	3310      	adds	r3, #16
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d20d      	bcs.n	8004ea4 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e01d      	b.n	8004ec8 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d006      	beq.n	8004ea0 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	68bb      	ldr	r3, [r7, #8]
 8004e98:	425b      	negs	r3, r3
 8004e9a:	4413      	add	r3, r2
 8004e9c:	617b      	str	r3, [r7, #20]
 8004e9e:	e001      	b.n	8004ea4 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e011      	b.n	8004ec8 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	895a      	ldrh	r2, [r3, #10]
 8004eae:	8a7b      	ldrh	r3, [r7, #18]
 8004eb0:	4413      	add	r3, r2
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	891a      	ldrh	r2, [r3, #8]
 8004ebc:	8a7b      	ldrh	r3, [r7, #18]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	811a      	strh	r2, [r3, #8]


  return 0;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3718      	adds	r7, #24
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	08011064 	.word	0x08011064
 8004ed4:	080111c8 	.word	0x080111c8
 8004ed8:	080110c4 	.word	0x080110c4

08004edc <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b082      	sub	sp, #8
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f7ff ff8e 	bl	8004e0c <pbuf_add_header_impl>
 8004ef0:	4603      	mov	r3, r0
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3708      	adds	r7, #8
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}
	...

08004efc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d106      	bne.n	8004f1a <pbuf_remove_header+0x1e>
 8004f0c:	4b20      	ldr	r3, [pc, #128]	; (8004f90 <pbuf_remove_header+0x94>)
 8004f0e:	f240 224b 	movw	r2, #587	; 0x24b
 8004f12:	4920      	ldr	r1, [pc, #128]	; (8004f94 <pbuf_remove_header+0x98>)
 8004f14:	4820      	ldr	r0, [pc, #128]	; (8004f98 <pbuf_remove_header+0x9c>)
 8004f16:	f00a fe3d 	bl	800fb94 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <pbuf_remove_header+0x2c>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f26:	d301      	bcc.n	8004f2c <pbuf_remove_header+0x30>
    return 1;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	e02c      	b.n	8004f86 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d101      	bne.n	8004f36 <pbuf_remove_header+0x3a>
    return 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	e027      	b.n	8004f86 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	895b      	ldrh	r3, [r3, #10]
 8004f3e:	89fa      	ldrh	r2, [r7, #14]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d908      	bls.n	8004f56 <pbuf_remove_header+0x5a>
 8004f44:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <pbuf_remove_header+0x94>)
 8004f46:	f240 2255 	movw	r2, #597	; 0x255
 8004f4a:	4914      	ldr	r1, [pc, #80]	; (8004f9c <pbuf_remove_header+0xa0>)
 8004f4c:	4812      	ldr	r0, [pc, #72]	; (8004f98 <pbuf_remove_header+0x9c>)
 8004f4e:	f00a fe21 	bl	800fb94 <iprintf>
 8004f52:	2301      	movs	r3, #1
 8004f54:	e017      	b.n	8004f86 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	685a      	ldr	r2, [r3, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	441a      	add	r2, r3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	895a      	ldrh	r2, [r3, #10]
 8004f6c:	89fb      	ldrh	r3, [r7, #14]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	b29a      	uxth	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	891a      	ldrh	r2, [r3, #8]
 8004f7a:	89fb      	ldrh	r3, [r7, #14]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	b29a      	uxth	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	08011064 	.word	0x08011064
 8004f94:	080111c8 	.word	0x080111c8
 8004f98:	080110c4 	.word	0x080110c4
 8004f9c:	080111d4 	.word	0x080111d4

08004fa0 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	807b      	strh	r3, [r7, #2]
 8004fac:	4613      	mov	r3, r2
 8004fae:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8004fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da08      	bge.n	8004fca <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8004fb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fbc:	425b      	negs	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f7ff ff9b 	bl	8004efc <pbuf_remove_header>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	e007      	b.n	8004fda <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8004fca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fce:	787a      	ldrb	r2, [r7, #1]
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7ff ff1a 	bl	8004e0c <pbuf_add_header_impl>
 8004fd8:	4603      	mov	r3, r0
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b082      	sub	sp, #8
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	460b      	mov	r3, r1
 8004fec:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8004fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff ffd2 	bl	8004fa0 <pbuf_header_impl>
 8004ffc:	4603      	mov	r3, r0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b086      	sub	sp, #24
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d10b      	bne.n	800502e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d106      	bne.n	800502a <pbuf_free+0x22>
 800501c:	4b38      	ldr	r3, [pc, #224]	; (8005100 <pbuf_free+0xf8>)
 800501e:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8005022:	4938      	ldr	r1, [pc, #224]	; (8005104 <pbuf_free+0xfc>)
 8005024:	4838      	ldr	r0, [pc, #224]	; (8005108 <pbuf_free+0x100>)
 8005026:	f00a fdb5 	bl	800fb94 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800502a:	2300      	movs	r3, #0
 800502c:	e063      	b.n	80050f6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800502e:	2300      	movs	r3, #0
 8005030:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8005032:	e05c      	b.n	80050ee <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	7b9b      	ldrb	r3, [r3, #14]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d106      	bne.n	800504a <pbuf_free+0x42>
 800503c:	4b30      	ldr	r3, [pc, #192]	; (8005100 <pbuf_free+0xf8>)
 800503e:	f240 22f1 	movw	r2, #753	; 0x2f1
 8005042:	4932      	ldr	r1, [pc, #200]	; (800510c <pbuf_free+0x104>)
 8005044:	4830      	ldr	r0, [pc, #192]	; (8005108 <pbuf_free+0x100>)
 8005046:	f00a fda5 	bl	800fb94 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	7b9b      	ldrb	r3, [r3, #14]
 800504e:	3b01      	subs	r3, #1
 8005050:	b2da      	uxtb	r2, r3
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	739a      	strb	r2, [r3, #14]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7b9b      	ldrb	r3, [r3, #14]
 800505a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800505c:	7dbb      	ldrb	r3, [r7, #22]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d143      	bne.n	80050ea <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	7b1b      	ldrb	r3, [r3, #12]
 800506c:	f003 030f 	and.w	r3, r3, #15
 8005070:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	7b5b      	ldrb	r3, [r3, #13]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d011      	beq.n	80050a2 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <pbuf_free+0x90>
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <pbuf_free+0xf8>)
 800508c:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005090:	491f      	ldr	r1, [pc, #124]	; (8005110 <pbuf_free+0x108>)
 8005092:	481d      	ldr	r0, [pc, #116]	; (8005108 <pbuf_free+0x100>)
 8005094:	f00a fd7e 	bl	800fb94 <iprintf>
        pc->custom_free_function(p);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	4798      	blx	r3
 80050a0:	e01d      	b.n	80050de <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80050a2:	7bfb      	ldrb	r3, [r7, #15]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d104      	bne.n	80050b2 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80050a8:	6879      	ldr	r1, [r7, #4]
 80050aa:	2008      	movs	r0, #8
 80050ac:	f7ff f92e 	bl	800430c <memp_free>
 80050b0:	e015      	b.n	80050de <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80050b2:	7bfb      	ldrb	r3, [r7, #15]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d104      	bne.n	80050c2 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	2007      	movs	r0, #7
 80050bc:	f7ff f926 	bl	800430c <memp_free>
 80050c0:	e00d      	b.n	80050de <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80050c2:	7bfb      	ldrb	r3, [r7, #15]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d103      	bne.n	80050d0 <pbuf_free+0xc8>
          mem_free(p);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fe fdff 	bl	8003ccc <mem_free>
 80050ce:	e006      	b.n	80050de <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80050d0:	4b0b      	ldr	r3, [pc, #44]	; (8005100 <pbuf_free+0xf8>)
 80050d2:	f240 320f 	movw	r2, #783	; 0x30f
 80050d6:	490f      	ldr	r1, [pc, #60]	; (8005114 <pbuf_free+0x10c>)
 80050d8:	480b      	ldr	r0, [pc, #44]	; (8005108 <pbuf_free+0x100>)
 80050da:	f00a fd5b 	bl	800fb94 <iprintf>
        }
      }
      count++;
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	3301      	adds	r3, #1
 80050e2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	607b      	str	r3, [r7, #4]
 80050e8:	e001      	b.n	80050ee <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80050ea:	2300      	movs	r3, #0
 80050ec:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d19f      	bne.n	8005034 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80050f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	3718      	adds	r7, #24
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	08011064 	.word	0x08011064
 8005104:	080111c8 	.word	0x080111c8
 8005108:	080110c4 	.word	0x080110c4
 800510c:	080111f4 	.word	0x080111f4
 8005110:	0801120c 	.word	0x0801120c
 8005114:	08011230 	.word	0x08011230

08005118 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8005120:	2300      	movs	r3, #0
 8005122:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8005124:	e005      	b.n	8005132 <pbuf_clen+0x1a>
    ++len;
 8005126:	89fb      	ldrh	r3, [r7, #14]
 8005128:	3301      	adds	r3, #1
 800512a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1f6      	bne.n	8005126 <pbuf_clen+0xe>
  }
  return len;
 8005138:	89fb      	ldrh	r3, [r7, #14]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
	...

08005148 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d010      	beq.n	8005178 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	7b9b      	ldrb	r3, [r3, #14]
 800515a:	3301      	adds	r3, #1
 800515c:	b2da      	uxtb	r2, r3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7b9b      	ldrb	r3, [r3, #14]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <pbuf_ref+0x30>
 800516a:	4b05      	ldr	r3, [pc, #20]	; (8005180 <pbuf_ref+0x38>)
 800516c:	f240 3242 	movw	r2, #834	; 0x342
 8005170:	4904      	ldr	r1, [pc, #16]	; (8005184 <pbuf_ref+0x3c>)
 8005172:	4805      	ldr	r0, [pc, #20]	; (8005188 <pbuf_ref+0x40>)
 8005174:	f00a fd0e 	bl	800fb94 <iprintf>
  }
}
 8005178:	bf00      	nop
 800517a:	3708      	adds	r7, #8
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	08011064 	.word	0x08011064
 8005184:	08011244 	.word	0x08011244
 8005188:	080110c4 	.word	0x080110c4

0800518c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
 8005194:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <pbuf_cat+0x16>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d107      	bne.n	80051b2 <pbuf_cat+0x26>
 80051a2:	4b20      	ldr	r3, [pc, #128]	; (8005224 <pbuf_cat+0x98>)
 80051a4:	f240 325a 	movw	r2, #858	; 0x35a
 80051a8:	491f      	ldr	r1, [pc, #124]	; (8005228 <pbuf_cat+0x9c>)
 80051aa:	4820      	ldr	r0, [pc, #128]	; (800522c <pbuf_cat+0xa0>)
 80051ac:	f00a fcf2 	bl	800fb94 <iprintf>
 80051b0:	e034      	b.n	800521c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	e00a      	b.n	80051ce <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	891a      	ldrh	r2, [r3, #8]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	891b      	ldrh	r3, [r3, #8]
 80051c0:	4413      	add	r3, r2
 80051c2:	b29a      	uxth	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1f0      	bne.n	80051b8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	891a      	ldrh	r2, [r3, #8]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	895b      	ldrh	r3, [r3, #10]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d006      	beq.n	80051f0 <pbuf_cat+0x64>
 80051e2:	4b10      	ldr	r3, [pc, #64]	; (8005224 <pbuf_cat+0x98>)
 80051e4:	f240 3262 	movw	r2, #866	; 0x362
 80051e8:	4911      	ldr	r1, [pc, #68]	; (8005230 <pbuf_cat+0xa4>)
 80051ea:	4810      	ldr	r0, [pc, #64]	; (800522c <pbuf_cat+0xa0>)
 80051ec:	f00a fcd2 	bl	800fb94 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d006      	beq.n	8005206 <pbuf_cat+0x7a>
 80051f8:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <pbuf_cat+0x98>)
 80051fa:	f240 3263 	movw	r2, #867	; 0x363
 80051fe:	490d      	ldr	r1, [pc, #52]	; (8005234 <pbuf_cat+0xa8>)
 8005200:	480a      	ldr	r0, [pc, #40]	; (800522c <pbuf_cat+0xa0>)
 8005202:	f00a fcc7 	bl	800fb94 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	891a      	ldrh	r2, [r3, #8]
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	891b      	ldrh	r3, [r3, #8]
 800520e:	4413      	add	r3, r2
 8005210:	b29a      	uxth	r2, r3
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	683a      	ldr	r2, [r7, #0]
 800521a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
 8005222:	bf00      	nop
 8005224:	08011064 	.word	0x08011064
 8005228:	08011258 	.word	0x08011258
 800522c:	080110c4 	.word	0x080110c4
 8005230:	08011290 	.word	0x08011290
 8005234:	080112c0 	.word	0x080112c0

08005238 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8005242:	6839      	ldr	r1, [r7, #0]
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f7ff ffa1 	bl	800518c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800524a:	6838      	ldr	r0, [r7, #0]
 800524c:	f7ff ff7c 	bl	8005148 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005250:	bf00      	nop
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	2300      	movs	r3, #0
 8005268:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d008      	beq.n	8005282 <pbuf_copy+0x2a>
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <pbuf_copy+0x2a>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	891a      	ldrh	r2, [r3, #8]
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	891b      	ldrh	r3, [r3, #8]
 800527e:	429a      	cmp	r2, r3
 8005280:	d209      	bcs.n	8005296 <pbuf_copy+0x3e>
 8005282:	4b57      	ldr	r3, [pc, #348]	; (80053e0 <pbuf_copy+0x188>)
 8005284:	f240 32ca 	movw	r2, #970	; 0x3ca
 8005288:	4956      	ldr	r1, [pc, #344]	; (80053e4 <pbuf_copy+0x18c>)
 800528a:	4857      	ldr	r0, [pc, #348]	; (80053e8 <pbuf_copy+0x190>)
 800528c:	f00a fc82 	bl	800fb94 <iprintf>
 8005290:	f06f 030f 	mvn.w	r3, #15
 8005294:	e09f      	b.n	80053d6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	895b      	ldrh	r3, [r3, #10]
 800529a:	461a      	mov	r2, r3
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	1ad2      	subs	r2, r2, r3
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	895b      	ldrh	r3, [r3, #10]
 80052a4:	4619      	mov	r1, r3
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	1acb      	subs	r3, r1, r3
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d306      	bcc.n	80052bc <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	895b      	ldrh	r3, [r3, #10]
 80052b2:	461a      	mov	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	60fb      	str	r3, [r7, #12]
 80052ba:	e005      	b.n	80052c8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	895b      	ldrh	r3, [r3, #10]
 80052c0:	461a      	mov	r2, r3
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	18d0      	adds	r0, r2, r3
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685a      	ldr	r2, [r3, #4]
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	4413      	add	r3, r2
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	4619      	mov	r1, r3
 80052dc:	f00a fc47 	bl	800fb6e <memcpy>
    offset_to += len;
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	4413      	add	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	895b      	ldrh	r3, [r3, #10]
 80052f4:	461a      	mov	r2, r3
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d906      	bls.n	800530a <pbuf_copy+0xb2>
 80052fc:	4b38      	ldr	r3, [pc, #224]	; (80053e0 <pbuf_copy+0x188>)
 80052fe:	f240 32d9 	movw	r2, #985	; 0x3d9
 8005302:	493a      	ldr	r1, [pc, #232]	; (80053ec <pbuf_copy+0x194>)
 8005304:	4838      	ldr	r0, [pc, #224]	; (80053e8 <pbuf_copy+0x190>)
 8005306:	f00a fc45 	bl	800fb94 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	895b      	ldrh	r3, [r3, #10]
 800530e:	461a      	mov	r2, r3
 8005310:	693b      	ldr	r3, [r7, #16]
 8005312:	4293      	cmp	r3, r2
 8005314:	d906      	bls.n	8005324 <pbuf_copy+0xcc>
 8005316:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <pbuf_copy+0x188>)
 8005318:	f240 32da 	movw	r2, #986	; 0x3da
 800531c:	4934      	ldr	r1, [pc, #208]	; (80053f0 <pbuf_copy+0x198>)
 800531e:	4832      	ldr	r0, [pc, #200]	; (80053e8 <pbuf_copy+0x190>)
 8005320:	f00a fc38 	bl	800fb94 <iprintf>
    if (offset_from >= p_from->len) {
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	895b      	ldrh	r3, [r3, #10]
 8005328:	461a      	mov	r2, r3
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	4293      	cmp	r3, r2
 800532e:	d304      	bcc.n	800533a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8005330:	2300      	movs	r3, #0
 8005332:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	895b      	ldrh	r3, [r3, #10]
 800533e:	461a      	mov	r2, r3
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	4293      	cmp	r3, r2
 8005344:	d114      	bne.n	8005370 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d10c      	bne.n	8005370 <pbuf_copy+0x118>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d009      	beq.n	8005370 <pbuf_copy+0x118>
 800535c:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <pbuf_copy+0x188>)
 800535e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8005362:	4924      	ldr	r1, [pc, #144]	; (80053f4 <pbuf_copy+0x19c>)
 8005364:	4820      	ldr	r0, [pc, #128]	; (80053e8 <pbuf_copy+0x190>)
 8005366:	f00a fc15 	bl	800fb94 <iprintf>
 800536a:	f06f 030f 	mvn.w	r3, #15
 800536e:	e032      	b.n	80053d6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d013      	beq.n	800539e <pbuf_copy+0x146>
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	895a      	ldrh	r2, [r3, #10]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	891b      	ldrh	r3, [r3, #8]
 800537e:	429a      	cmp	r2, r3
 8005380:	d10d      	bne.n	800539e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d009      	beq.n	800539e <pbuf_copy+0x146>
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <pbuf_copy+0x188>)
 800538c:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8005390:	4919      	ldr	r1, [pc, #100]	; (80053f8 <pbuf_copy+0x1a0>)
 8005392:	4815      	ldr	r0, [pc, #84]	; (80053e8 <pbuf_copy+0x190>)
 8005394:	f00a fbfe 	bl	800fb94 <iprintf>
 8005398:	f06f 0305 	mvn.w	r3, #5
 800539c:	e01b      	b.n	80053d6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d013      	beq.n	80053cc <pbuf_copy+0x174>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	895a      	ldrh	r2, [r3, #10]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	891b      	ldrh	r3, [r3, #8]
 80053ac:	429a      	cmp	r2, r3
 80053ae:	d10d      	bne.n	80053cc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d009      	beq.n	80053cc <pbuf_copy+0x174>
 80053b8:	4b09      	ldr	r3, [pc, #36]	; (80053e0 <pbuf_copy+0x188>)
 80053ba:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80053be:	490e      	ldr	r1, [pc, #56]	; (80053f8 <pbuf_copy+0x1a0>)
 80053c0:	4809      	ldr	r0, [pc, #36]	; (80053e8 <pbuf_copy+0x190>)
 80053c2:	f00a fbe7 	bl	800fb94 <iprintf>
 80053c6:	f06f 0305 	mvn.w	r3, #5
 80053ca:	e004      	b.n	80053d6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f47f af61 	bne.w	8005296 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	08011064 	.word	0x08011064
 80053e4:	0801130c 	.word	0x0801130c
 80053e8:	080110c4 	.word	0x080110c4
 80053ec:	0801133c 	.word	0x0801133c
 80053f0:	08011354 	.word	0x08011354
 80053f4:	08011370 	.word	0x08011370
 80053f8:	08011380 	.word	0x08011380

080053fc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4611      	mov	r1, r2
 8005408:	461a      	mov	r2, r3
 800540a:	460b      	mov	r3, r1
 800540c:	80fb      	strh	r3, [r7, #6]
 800540e:	4613      	mov	r3, r2
 8005410:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d108      	bne.n	8005432 <pbuf_copy_partial+0x36>
 8005420:	4b2b      	ldr	r3, [pc, #172]	; (80054d0 <pbuf_copy_partial+0xd4>)
 8005422:	f240 420a 	movw	r2, #1034	; 0x40a
 8005426:	492b      	ldr	r1, [pc, #172]	; (80054d4 <pbuf_copy_partial+0xd8>)
 8005428:	482b      	ldr	r0, [pc, #172]	; (80054d8 <pbuf_copy_partial+0xdc>)
 800542a:	f00a fbb3 	bl	800fb94 <iprintf>
 800542e:	2300      	movs	r3, #0
 8005430:	e04a      	b.n	80054c8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d108      	bne.n	800544a <pbuf_copy_partial+0x4e>
 8005438:	4b25      	ldr	r3, [pc, #148]	; (80054d0 <pbuf_copy_partial+0xd4>)
 800543a:	f240 420b 	movw	r2, #1035	; 0x40b
 800543e:	4927      	ldr	r1, [pc, #156]	; (80054dc <pbuf_copy_partial+0xe0>)
 8005440:	4825      	ldr	r0, [pc, #148]	; (80054d8 <pbuf_copy_partial+0xdc>)
 8005442:	f00a fba7 	bl	800fb94 <iprintf>
 8005446:	2300      	movs	r3, #0
 8005448:	e03e      	b.n	80054c8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	61fb      	str	r3, [r7, #28]
 800544e:	e034      	b.n	80054ba <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005450:	88bb      	ldrh	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00a      	beq.n	800546c <pbuf_copy_partial+0x70>
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	895b      	ldrh	r3, [r3, #10]
 800545a:	88ba      	ldrh	r2, [r7, #4]
 800545c:	429a      	cmp	r2, r3
 800545e:	d305      	bcc.n	800546c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	895b      	ldrh	r3, [r3, #10]
 8005464:	88ba      	ldrh	r2, [r7, #4]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	80bb      	strh	r3, [r7, #4]
 800546a:	e023      	b.n	80054b4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	895a      	ldrh	r2, [r3, #10]
 8005470:	88bb      	ldrh	r3, [r7, #4]
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8005476:	8b3a      	ldrh	r2, [r7, #24]
 8005478:	88fb      	ldrh	r3, [r7, #6]
 800547a:	429a      	cmp	r2, r3
 800547c:	d901      	bls.n	8005482 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800547e:	88fb      	ldrh	r3, [r7, #6]
 8005480:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8005482:	8b7b      	ldrh	r3, [r7, #26]
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	18d0      	adds	r0, r2, r3
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	685a      	ldr	r2, [r3, #4]
 800548c:	88bb      	ldrh	r3, [r7, #4]
 800548e:	4413      	add	r3, r2
 8005490:	8b3a      	ldrh	r2, [r7, #24]
 8005492:	4619      	mov	r1, r3
 8005494:	f00a fb6b 	bl	800fb6e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005498:	8afa      	ldrh	r2, [r7, #22]
 800549a:	8b3b      	ldrh	r3, [r7, #24]
 800549c:	4413      	add	r3, r2
 800549e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80054a0:	8b7a      	ldrh	r2, [r7, #26]
 80054a2:	8b3b      	ldrh	r3, [r7, #24]
 80054a4:	4413      	add	r3, r2
 80054a6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80054a8:	88fa      	ldrh	r2, [r7, #6]
 80054aa:	8b3b      	ldrh	r3, [r7, #24]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80054b0:	2300      	movs	r3, #0
 80054b2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	61fb      	str	r3, [r7, #28]
 80054ba:	88fb      	ldrh	r3, [r7, #6]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d002      	beq.n	80054c6 <pbuf_copy_partial+0xca>
 80054c0:	69fb      	ldr	r3, [r7, #28]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d1c4      	bne.n	8005450 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80054c6:	8afb      	ldrh	r3, [r7, #22]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3720      	adds	r7, #32
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	08011064 	.word	0x08011064
 80054d4:	080113ac 	.word	0x080113ac
 80054d8:	080110c4 	.word	0x080110c4
 80054dc:	080113cc 	.word	0x080113cc

080054e0 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b087      	sub	sp, #28
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	460b      	mov	r3, r1
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80054ee:	897b      	ldrh	r3, [r7, #10]
 80054f0:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80054f6:	e007      	b.n	8005508 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	895b      	ldrh	r3, [r3, #10]
 80054fc:	8afa      	ldrh	r2, [r7, #22]
 80054fe:	1ad3      	subs	r3, r2, r3
 8005500:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d004      	beq.n	8005518 <pbuf_skip_const+0x38>
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	895b      	ldrh	r3, [r3, #10]
 8005512:	8afa      	ldrh	r2, [r7, #22]
 8005514:	429a      	cmp	r2, r3
 8005516:	d2ef      	bcs.n	80054f8 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	8afa      	ldrh	r2, [r7, #22]
 8005522:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8005524:	693b      	ldr	r3, [r7, #16]
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8005532:	b580      	push	{r7, lr}
 8005534:	b086      	sub	sp, #24
 8005536:	af00      	add	r7, sp, #0
 8005538:	60f8      	str	r0, [r7, #12]
 800553a:	460b      	mov	r3, r1
 800553c:	607a      	str	r2, [r7, #4]
 800553e:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8005540:	897b      	ldrh	r3, [r7, #10]
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	4619      	mov	r1, r3
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f7ff ffca 	bl	80054e0 <pbuf_skip_const>
 800554c:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800554e:	697b      	ldr	r3, [r7, #20]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3718      	adds	r7, #24
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	4613      	mov	r3, r2
 8005564:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800556a:	2300      	movs	r3, #0
 800556c:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d109      	bne.n	8005588 <pbuf_take+0x30>
 8005574:	4b3a      	ldr	r3, [pc, #232]	; (8005660 <pbuf_take+0x108>)
 8005576:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800557a:	493a      	ldr	r1, [pc, #232]	; (8005664 <pbuf_take+0x10c>)
 800557c:	483a      	ldr	r0, [pc, #232]	; (8005668 <pbuf_take+0x110>)
 800557e:	f00a fb09 	bl	800fb94 <iprintf>
 8005582:	f06f 030f 	mvn.w	r3, #15
 8005586:	e067      	b.n	8005658 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d109      	bne.n	80055a2 <pbuf_take+0x4a>
 800558e:	4b34      	ldr	r3, [pc, #208]	; (8005660 <pbuf_take+0x108>)
 8005590:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8005594:	4935      	ldr	r1, [pc, #212]	; (800566c <pbuf_take+0x114>)
 8005596:	4834      	ldr	r0, [pc, #208]	; (8005668 <pbuf_take+0x110>)
 8005598:	f00a fafc 	bl	800fb94 <iprintf>
 800559c:	f06f 030f 	mvn.w	r3, #15
 80055a0:	e05a      	b.n	8005658 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	891b      	ldrh	r3, [r3, #8]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d909      	bls.n	80055c0 <pbuf_take+0x68>
 80055ac:	4b2c      	ldr	r3, [pc, #176]	; (8005660 <pbuf_take+0x108>)
 80055ae:	f240 42b5 	movw	r2, #1205	; 0x4b5
 80055b2:	492f      	ldr	r1, [pc, #188]	; (8005670 <pbuf_take+0x118>)
 80055b4:	482c      	ldr	r0, [pc, #176]	; (8005668 <pbuf_take+0x110>)
 80055b6:	f00a faed 	bl	800fb94 <iprintf>
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e04b      	b.n	8005658 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d007      	beq.n	80055d6 <pbuf_take+0x7e>
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d004      	beq.n	80055d6 <pbuf_take+0x7e>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	891b      	ldrh	r3, [r3, #8]
 80055d0:	88fa      	ldrh	r2, [r7, #6]
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d902      	bls.n	80055dc <pbuf_take+0x84>
    return ERR_ARG;
 80055d6:	f06f 030f 	mvn.w	r3, #15
 80055da:	e03d      	b.n	8005658 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	61fb      	str	r3, [r7, #28]
 80055e0:	e028      	b.n	8005634 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80055e2:	69fb      	ldr	r3, [r7, #28]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <pbuf_take+0x9e>
 80055e8:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <pbuf_take+0x108>)
 80055ea:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80055ee:	4921      	ldr	r1, [pc, #132]	; (8005674 <pbuf_take+0x11c>)
 80055f0:	481d      	ldr	r0, [pc, #116]	; (8005668 <pbuf_take+0x110>)
 80055f2:	f00a facf 	bl	800fb94 <iprintf>
    buf_copy_len = total_copy_len;
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	895b      	ldrh	r3, [r3, #10]
 80055fe:	461a      	mov	r2, r3
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	4293      	cmp	r3, r2
 8005604:	d902      	bls.n	800560c <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	895b      	ldrh	r3, [r3, #10]
 800560a:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	6858      	ldr	r0, [r3, #4]
 8005610:	68ba      	ldr	r2, [r7, #8]
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	4413      	add	r3, r2
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	4619      	mov	r1, r3
 800561a:	f00a faa8 	bl	800fb6e <memcpy>
    total_copy_len -= buf_copy_len;
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	4413      	add	r3, r2
 800562c:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	61fb      	str	r3, [r7, #28]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1d3      	bne.n	80055e2 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d103      	bne.n	8005648 <pbuf_take+0xf0>
 8005640:	88fb      	ldrh	r3, [r7, #6]
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	429a      	cmp	r2, r3
 8005646:	d006      	beq.n	8005656 <pbuf_take+0xfe>
 8005648:	4b05      	ldr	r3, [pc, #20]	; (8005660 <pbuf_take+0x108>)
 800564a:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800564e:	490a      	ldr	r1, [pc, #40]	; (8005678 <pbuf_take+0x120>)
 8005650:	4805      	ldr	r0, [pc, #20]	; (8005668 <pbuf_take+0x110>)
 8005652:	f00a fa9f 	bl	800fb94 <iprintf>
  return ERR_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	08011064 	.word	0x08011064
 8005664:	0801143c 	.word	0x0801143c
 8005668:	080110c4 	.word	0x080110c4
 800566c:	08011454 	.word	0x08011454
 8005670:	08011470 	.word	0x08011470
 8005674:	08011490 	.word	0x08011490
 8005678:	080114a8 	.word	0x080114a8

0800567c <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	4611      	mov	r1, r2
 8005688:	461a      	mov	r2, r3
 800568a:	460b      	mov	r3, r1
 800568c:	80fb      	strh	r3, [r7, #6]
 800568e:	4613      	mov	r3, r2
 8005690:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8005692:	f107 0210 	add.w	r2, r7, #16
 8005696:	88bb      	ldrh	r3, [r7, #4]
 8005698:	4619      	mov	r1, r3
 800569a:	68f8      	ldr	r0, [r7, #12]
 800569c:	f7ff ff49 	bl	8005532 <pbuf_skip>
 80056a0:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d047      	beq.n	8005738 <pbuf_take_at+0xbc>
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	891b      	ldrh	r3, [r3, #8]
 80056ac:	461a      	mov	r2, r3
 80056ae:	8a3b      	ldrh	r3, [r7, #16]
 80056b0:	4619      	mov	r1, r3
 80056b2:	88fb      	ldrh	r3, [r7, #6]
 80056b4:	440b      	add	r3, r1
 80056b6:	429a      	cmp	r2, r3
 80056b8:	db3e      	blt.n	8005738 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80056be:	68bb      	ldr	r3, [r7, #8]
 80056c0:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	895a      	ldrh	r2, [r3, #10]
 80056c6:	8a3b      	ldrh	r3, [r7, #16]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d806      	bhi.n	80056da <pbuf_take_at+0x5e>
 80056cc:	4b1d      	ldr	r3, [pc, #116]	; (8005744 <pbuf_take_at+0xc8>)
 80056ce:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80056d2:	491d      	ldr	r1, [pc, #116]	; (8005748 <pbuf_take_at+0xcc>)
 80056d4:	481d      	ldr	r0, [pc, #116]	; (800574c <pbuf_take_at+0xd0>)
 80056d6:	f00a fa5d 	bl	800fb94 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	895b      	ldrh	r3, [r3, #10]
 80056de:	461a      	mov	r2, r3
 80056e0:	8a3b      	ldrh	r3, [r7, #16]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	429a      	cmp	r2, r3
 80056e8:	da05      	bge.n	80056f6 <pbuf_take_at+0x7a>
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	895a      	ldrh	r2, [r3, #10]
 80056ee:	8a3b      	ldrh	r3, [r7, #16]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	e000      	b.n	80056f8 <pbuf_take_at+0x7c>
 80056f6:	88fb      	ldrh	r3, [r7, #6]
 80056f8:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80056fa:	69fb      	ldr	r3, [r7, #28]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	8a3a      	ldrh	r2, [r7, #16]
 8005700:	4413      	add	r3, r2
 8005702:	8a7a      	ldrh	r2, [r7, #18]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	4618      	mov	r0, r3
 8005708:	f00a fa31 	bl	800fb6e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800570c:	8b7a      	ldrh	r2, [r7, #26]
 800570e:	8a7b      	ldrh	r3, [r7, #18]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8005714:	8a7b      	ldrh	r3, [r7, #18]
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	4413      	add	r3, r2
 800571a:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800571c:	8b7b      	ldrh	r3, [r7, #26]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d008      	beq.n	8005734 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	8b7a      	ldrh	r2, [r7, #26]
 8005728:	6979      	ldr	r1, [r7, #20]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff ff14 	bl	8005558 <pbuf_take>
 8005730:	4603      	mov	r3, r0
 8005732:	e003      	b.n	800573c <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8005734:	2300      	movs	r3, #0
 8005736:	e001      	b.n	800573c <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8005738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800573c:	4618      	mov	r0, r3
 800573e:	3720      	adds	r7, #32
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	08011064 	.word	0x08011064
 8005748:	080114c0 	.word	0x080114c0
 800574c:	080110c4 	.word	0x080110c4

08005750 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	4603      	mov	r3, r0
 8005758:	603a      	str	r2, [r7, #0]
 800575a:	71fb      	strb	r3, [r7, #7]
 800575c:	460b      	mov	r3, r1
 800575e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	8919      	ldrh	r1, [r3, #8]
 8005764:	88ba      	ldrh	r2, [r7, #4]
 8005766:	79fb      	ldrb	r3, [r7, #7]
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff f96d 	bl	8004a48 <pbuf_alloc>
 800576e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <pbuf_clone+0x2a>
    return NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	e011      	b.n	800579e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f7ff fd6b 	bl	8005258 <pbuf_copy>
 8005782:	4603      	mov	r3, r0
 8005784:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005786:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d006      	beq.n	800579c <pbuf_clone+0x4c>
 800578e:	4b06      	ldr	r3, [pc, #24]	; (80057a8 <pbuf_clone+0x58>)
 8005790:	f240 5224 	movw	r2, #1316	; 0x524
 8005794:	4905      	ldr	r1, [pc, #20]	; (80057ac <pbuf_clone+0x5c>)
 8005796:	4806      	ldr	r0, [pc, #24]	; (80057b0 <pbuf_clone+0x60>)
 8005798:	f00a f9fc 	bl	800fb94 <iprintf>
  return q;
 800579c:	68fb      	ldr	r3, [r7, #12]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3710      	adds	r7, #16
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	08011064 	.word	0x08011064
 80057ac:	080114d8 	.word	0x080114d8
 80057b0:	080110c4 	.word	0x080110c4

080057b4 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	460b      	mov	r3, r1
 80057be:	807b      	strh	r3, [r7, #2]
 80057c0:	4613      	mov	r3, r2
 80057c2:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80057c4:	f107 020a 	add.w	r2, r7, #10
 80057c8:	887b      	ldrh	r3, [r7, #2]
 80057ca:	4619      	mov	r1, r3
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f7ff feb0 	bl	8005532 <pbuf_skip>
 80057d2:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <pbuf_put_at+0x3c>
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	895a      	ldrh	r2, [r3, #10]
 80057de:	897b      	ldrh	r3, [r7, #10]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d905      	bls.n	80057f0 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	897a      	ldrh	r2, [r7, #10]
 80057ea:	4413      	add	r3, r2
 80057ec:	787a      	ldrb	r2, [r7, #1]
 80057ee:	701a      	strb	r2, [r3, #0]
  }
}
 80057f0:	bf00      	nop
 80057f2:	3710      	adds	r7, #16
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}

080057f8 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80057fc:	f00a f9e2 	bl	800fbc4 <rand>
 8005800:	4603      	mov	r3, r0
 8005802:	b29b      	uxth	r3, r3
 8005804:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005808:	b29b      	uxth	r3, r3
 800580a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800580e:	b29a      	uxth	r2, r3
 8005810:	4b01      	ldr	r3, [pc, #4]	; (8005818 <tcp_init+0x20>)
 8005812:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005814:	bf00      	nop
 8005816:	bd80      	pop	{r7, pc}
 8005818:	2000000a 	.word	0x2000000a

0800581c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	7d1b      	ldrb	r3, [r3, #20]
 8005828:	2b01      	cmp	r3, #1
 800582a:	d105      	bne.n	8005838 <tcp_free+0x1c>
 800582c:	4b06      	ldr	r3, [pc, #24]	; (8005848 <tcp_free+0x2c>)
 800582e:	22d4      	movs	r2, #212	; 0xd4
 8005830:	4906      	ldr	r1, [pc, #24]	; (800584c <tcp_free+0x30>)
 8005832:	4807      	ldr	r0, [pc, #28]	; (8005850 <tcp_free+0x34>)
 8005834:	f00a f9ae 	bl	800fb94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	2001      	movs	r0, #1
 800583c:	f7fe fd66 	bl	800430c <memp_free>
}
 8005840:	bf00      	nop
 8005842:	3708      	adds	r7, #8
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}
 8005848:	08011564 	.word	0x08011564
 800584c:	08011594 	.word	0x08011594
 8005850:	080115a8 	.word	0x080115a8

08005854 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	7d1b      	ldrb	r3, [r3, #20]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d105      	bne.n	8005870 <tcp_free_listen+0x1c>
 8005864:	4b06      	ldr	r3, [pc, #24]	; (8005880 <tcp_free_listen+0x2c>)
 8005866:	22df      	movs	r2, #223	; 0xdf
 8005868:	4906      	ldr	r1, [pc, #24]	; (8005884 <tcp_free_listen+0x30>)
 800586a:	4807      	ldr	r0, [pc, #28]	; (8005888 <tcp_free_listen+0x34>)
 800586c:	f00a f992 	bl	800fb94 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005870:	6879      	ldr	r1, [r7, #4]
 8005872:	2002      	movs	r0, #2
 8005874:	f7fe fd4a 	bl	800430c <memp_free>
}
 8005878:	bf00      	nop
 800587a:	3708      	adds	r7, #8
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}
 8005880:	08011564 	.word	0x08011564
 8005884:	080115d0 	.word	0x080115d0
 8005888:	080115a8 	.word	0x080115a8

0800588c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005890:	f000 fe98 	bl	80065c4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <tcp_tmr+0x28>)
 8005896:	781b      	ldrb	r3, [r3, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	4b05      	ldr	r3, [pc, #20]	; (80058b4 <tcp_tmr+0x28>)
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	4b04      	ldr	r3, [pc, #16]	; (80058b4 <tcp_tmr+0x28>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	f003 0301 	and.w	r3, r3, #1
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d001      	beq.n	80058b0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80058ac:	f000 fb4c 	bl	8005f48 <tcp_slowtmr>
  }
}
 80058b0:	bf00      	nop
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000559 	.word	0x20000559

080058b8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d105      	bne.n	80058d4 <tcp_remove_listener+0x1c>
 80058c8:	4b0d      	ldr	r3, [pc, #52]	; (8005900 <tcp_remove_listener+0x48>)
 80058ca:	22ff      	movs	r2, #255	; 0xff
 80058cc:	490d      	ldr	r1, [pc, #52]	; (8005904 <tcp_remove_listener+0x4c>)
 80058ce:	480e      	ldr	r0, [pc, #56]	; (8005908 <tcp_remove_listener+0x50>)
 80058d0:	f00a f960 	bl	800fb94 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	60fb      	str	r3, [r7, #12]
 80058d8:	e00a      	b.n	80058f0 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058de:	683a      	ldr	r2, [r7, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d102      	bne.n	80058ea <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	60fb      	str	r3, [r7, #12]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f1      	bne.n	80058da <tcp_remove_listener+0x22>
    }
  }
}
 80058f6:	bf00      	nop
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
 80058fe:	bf00      	nop
 8005900:	08011564 	.word	0x08011564
 8005904:	080115ec 	.word	0x080115ec
 8005908:	080115a8 	.word	0x080115a8

0800590c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <tcp_listen_closed+0x1c>
 800591a:	4b14      	ldr	r3, [pc, #80]	; (800596c <tcp_listen_closed+0x60>)
 800591c:	f240 1211 	movw	r2, #273	; 0x111
 8005920:	4913      	ldr	r1, [pc, #76]	; (8005970 <tcp_listen_closed+0x64>)
 8005922:	4814      	ldr	r0, [pc, #80]	; (8005974 <tcp_listen_closed+0x68>)
 8005924:	f00a f936 	bl	800fb94 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	7d1b      	ldrb	r3, [r3, #20]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d006      	beq.n	800593e <tcp_listen_closed+0x32>
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <tcp_listen_closed+0x60>)
 8005932:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005936:	4910      	ldr	r1, [pc, #64]	; (8005978 <tcp_listen_closed+0x6c>)
 8005938:	480e      	ldr	r0, [pc, #56]	; (8005974 <tcp_listen_closed+0x68>)
 800593a:	f00a f92b 	bl	800fb94 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800593e:	2301      	movs	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	e00b      	b.n	800595c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005944:	4a0d      	ldr	r2, [pc, #52]	; (800597c <tcp_listen_closed+0x70>)
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff ffb1 	bl	80058b8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3301      	adds	r3, #1
 800595a:	60fb      	str	r3, [r7, #12]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b03      	cmp	r3, #3
 8005960:	d9f0      	bls.n	8005944 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005962:	bf00      	nop
 8005964:	3710      	adds	r7, #16
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	08011564 	.word	0x08011564
 8005970:	08011614 	.word	0x08011614
 8005974:	080115a8 	.word	0x080115a8
 8005978:	08011620 	.word	0x08011620
 800597c:	080138e0 	.word	0x080138e0

08005980 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b088      	sub	sp, #32
 8005984:	af04      	add	r7, sp, #16
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d106      	bne.n	80059a0 <tcp_close_shutdown+0x20>
 8005992:	4b61      	ldr	r3, [pc, #388]	; (8005b18 <tcp_close_shutdown+0x198>)
 8005994:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005998:	4960      	ldr	r1, [pc, #384]	; (8005b1c <tcp_close_shutdown+0x19c>)
 800599a:	4861      	ldr	r0, [pc, #388]	; (8005b20 <tcp_close_shutdown+0x1a0>)
 800599c:	f00a f8fa 	bl	800fb94 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80059a0:	78fb      	ldrb	r3, [r7, #3]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d066      	beq.n	8005a74 <tcp_close_shutdown+0xf4>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	7d1b      	ldrb	r3, [r3, #20]
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	d003      	beq.n	80059b6 <tcp_close_shutdown+0x36>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	7d1b      	ldrb	r3, [r3, #20]
 80059b2:	2b07      	cmp	r3, #7
 80059b4:	d15e      	bne.n	8005a74 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d104      	bne.n	80059c8 <tcp_close_shutdown+0x48>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80059c6:	d055      	beq.n	8005a74 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	8b5b      	ldrh	r3, [r3, #26]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d106      	bne.n	80059e2 <tcp_close_shutdown+0x62>
 80059d4:	4b50      	ldr	r3, [pc, #320]	; (8005b18 <tcp_close_shutdown+0x198>)
 80059d6:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80059da:	4952      	ldr	r1, [pc, #328]	; (8005b24 <tcp_close_shutdown+0x1a4>)
 80059dc:	4850      	ldr	r0, [pc, #320]	; (8005b20 <tcp_close_shutdown+0x1a0>)
 80059de:	f00a f8d9 	bl	800fb94 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80059ea:	687d      	ldr	r5, [r7, #4]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	8ad2      	ldrh	r2, [r2, #22]
 80059f4:	6879      	ldr	r1, [r7, #4]
 80059f6:	8b09      	ldrh	r1, [r1, #24]
 80059f8:	9102      	str	r1, [sp, #8]
 80059fa:	9201      	str	r2, [sp, #4]
 80059fc:	9300      	str	r3, [sp, #0]
 80059fe:	462b      	mov	r3, r5
 8005a00:	4622      	mov	r2, r4
 8005a02:	4601      	mov	r1, r0
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f004 fe8f 	bl	800a728 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f001 f8ba 	bl	8006b84 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005a10:	4b45      	ldr	r3, [pc, #276]	; (8005b28 <tcp_close_shutdown+0x1a8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	687a      	ldr	r2, [r7, #4]
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d105      	bne.n	8005a26 <tcp_close_shutdown+0xa6>
 8005a1a:	4b43      	ldr	r3, [pc, #268]	; (8005b28 <tcp_close_shutdown+0x1a8>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4a41      	ldr	r2, [pc, #260]	; (8005b28 <tcp_close_shutdown+0x1a8>)
 8005a22:	6013      	str	r3, [r2, #0]
 8005a24:	e013      	b.n	8005a4e <tcp_close_shutdown+0xce>
 8005a26:	4b40      	ldr	r3, [pc, #256]	; (8005b28 <tcp_close_shutdown+0x1a8>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	60fb      	str	r3, [r7, #12]
 8005a2c:	e00c      	b.n	8005a48 <tcp_close_shutdown+0xc8>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	68db      	ldr	r3, [r3, #12]
 8005a32:	687a      	ldr	r2, [r7, #4]
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d104      	bne.n	8005a42 <tcp_close_shutdown+0xc2>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	60da      	str	r2, [r3, #12]
 8005a40:	e005      	b.n	8005a4e <tcp_close_shutdown+0xce>
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	68db      	ldr	r3, [r3, #12]
 8005a46:	60fb      	str	r3, [r7, #12]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1ef      	bne.n	8005a2e <tcp_close_shutdown+0xae>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	60da      	str	r2, [r3, #12]
 8005a54:	4b35      	ldr	r3, [pc, #212]	; (8005b2c <tcp_close_shutdown+0x1ac>)
 8005a56:	2201      	movs	r2, #1
 8005a58:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005a5a:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <tcp_close_shutdown+0x1b0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	429a      	cmp	r2, r3
 8005a62:	d102      	bne.n	8005a6a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005a64:	f003 fd4c 	bl	8009500 <tcp_trigger_input_pcb_close>
 8005a68:	e002      	b.n	8005a70 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7ff fed6 	bl	800581c <tcp_free>
      }
      return ERR_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e04d      	b.n	8005b10 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	7d1b      	ldrb	r3, [r3, #20]
 8005a78:	2b01      	cmp	r3, #1
 8005a7a:	d02d      	beq.n	8005ad8 <tcp_close_shutdown+0x158>
 8005a7c:	2b02      	cmp	r3, #2
 8005a7e:	d036      	beq.n	8005aee <tcp_close_shutdown+0x16e>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d13f      	bne.n	8005b04 <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8adb      	ldrh	r3, [r3, #22]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d021      	beq.n	8005ad0 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005a8c:	4b29      	ldr	r3, [pc, #164]	; (8005b34 <tcp_close_shutdown+0x1b4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d105      	bne.n	8005aa2 <tcp_close_shutdown+0x122>
 8005a96:	4b27      	ldr	r3, [pc, #156]	; (8005b34 <tcp_close_shutdown+0x1b4>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	4a25      	ldr	r2, [pc, #148]	; (8005b34 <tcp_close_shutdown+0x1b4>)
 8005a9e:	6013      	str	r3, [r2, #0]
 8005aa0:	e013      	b.n	8005aca <tcp_close_shutdown+0x14a>
 8005aa2:	4b24      	ldr	r3, [pc, #144]	; (8005b34 <tcp_close_shutdown+0x1b4>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	60bb      	str	r3, [r7, #8]
 8005aa8:	e00c      	b.n	8005ac4 <tcp_close_shutdown+0x144>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d104      	bne.n	8005abe <tcp_close_shutdown+0x13e>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	68da      	ldr	r2, [r3, #12]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	60da      	str	r2, [r3, #12]
 8005abc:	e005      	b.n	8005aca <tcp_close_shutdown+0x14a>
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	60bb      	str	r3, [r7, #8]
 8005ac4:	68bb      	ldr	r3, [r7, #8]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1ef      	bne.n	8005aaa <tcp_close_shutdown+0x12a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff fea3 	bl	800581c <tcp_free>
      break;
 8005ad6:	e01a      	b.n	8005b0e <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ff17 	bl	800590c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	4815      	ldr	r0, [pc, #84]	; (8005b38 <tcp_close_shutdown+0x1b8>)
 8005ae2:	f001 f89f 	bl	8006c24 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff feb4 	bl	8005854 <tcp_free_listen>
      break;
 8005aec:	e00f      	b.n	8005b0e <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005aee:	6879      	ldr	r1, [r7, #4]
 8005af0:	480d      	ldr	r0, [pc, #52]	; (8005b28 <tcp_close_shutdown+0x1a8>)
 8005af2:	f001 f897 	bl	8006c24 <tcp_pcb_remove>
 8005af6:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <tcp_close_shutdown+0x1ac>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fe8d 	bl	800581c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005b02:	e004      	b.n	8005b0e <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f819 	bl	8005b3c <tcp_close_shutdown_fin>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	e000      	b.n	8005b10 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bdb0      	pop	{r4, r5, r7, pc}
 8005b18:	08011564 	.word	0x08011564
 8005b1c:	08011638 	.word	0x08011638
 8005b20:	080115a8 	.word	0x080115a8
 8005b24:	08011658 	.word	0x08011658
 8005b28:	20006d50 	.word	0x20006d50
 8005b2c:	20006d4c 	.word	0x20006d4c
 8005b30:	20006d64 	.word	0x20006d64
 8005b34:	20006d5c 	.word	0x20006d5c
 8005b38:	20006d58 	.word	0x20006d58

08005b3c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <tcp_close_shutdown_fin+0x1c>
 8005b4a:	4b2c      	ldr	r3, [pc, #176]	; (8005bfc <tcp_close_shutdown_fin+0xc0>)
 8005b4c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005b50:	492b      	ldr	r1, [pc, #172]	; (8005c00 <tcp_close_shutdown_fin+0xc4>)
 8005b52:	482c      	ldr	r0, [pc, #176]	; (8005c04 <tcp_close_shutdown_fin+0xc8>)
 8005b54:	f00a f81e 	bl	800fb94 <iprintf>

  switch (pcb->state) {
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	7d1b      	ldrb	r3, [r3, #20]
 8005b5c:	2b04      	cmp	r3, #4
 8005b5e:	d010      	beq.n	8005b82 <tcp_close_shutdown_fin+0x46>
 8005b60:	2b07      	cmp	r3, #7
 8005b62:	d01b      	beq.n	8005b9c <tcp_close_shutdown_fin+0x60>
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d126      	bne.n	8005bb6 <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f003 fedb 	bl	8009924 <tcp_send_fin>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005b72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d11f      	bne.n	8005bba <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2205      	movs	r2, #5
 8005b7e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005b80:	e01b      	b.n	8005bba <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f003 fece 	bl	8009924 <tcp_send_fin>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005b8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d114      	bne.n	8005bbe <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2205      	movs	r2, #5
 8005b98:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005b9a:	e010      	b.n	8005bbe <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f003 fec1 	bl	8009924 <tcp_send_fin>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d109      	bne.n	8005bc2 <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2209      	movs	r2, #9
 8005bb2:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005bb4:	e005      	b.n	8005bc2 <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e01c      	b.n	8005bf4 <tcp_close_shutdown_fin+0xb8>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <tcp_close_shutdown_fin+0x88>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <tcp_close_shutdown_fin+0x88>
      break;
 8005bc2:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	f003 ffe7 	bl	8009ba0 <tcp_output>
 8005bd2:	e00d      	b.n	8005bf0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005bd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bdc:	d108      	bne.n	8005bf0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	8b5b      	ldrh	r3, [r3, #26]
 8005be2:	f043 0308 	orr.w	r3, r3, #8
 8005be6:	b29a      	uxth	r2, r3
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	e001      	b.n	8005bf4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3710      	adds	r7, #16
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	08011564 	.word	0x08011564
 8005c00:	08011614 	.word	0x08011614
 8005c04:	080115a8 	.word	0x080115a8

08005c08 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b082      	sub	sp, #8
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d109      	bne.n	8005c2a <tcp_close+0x22>
 8005c16:	4b0f      	ldr	r3, [pc, #60]	; (8005c54 <tcp_close+0x4c>)
 8005c18:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005c1c:	490e      	ldr	r1, [pc, #56]	; (8005c58 <tcp_close+0x50>)
 8005c1e:	480f      	ldr	r0, [pc, #60]	; (8005c5c <tcp_close+0x54>)
 8005c20:	f009 ffb8 	bl	800fb94 <iprintf>
 8005c24:	f06f 030f 	mvn.w	r3, #15
 8005c28:	e00f      	b.n	8005c4a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	7d1b      	ldrb	r3, [r3, #20]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d006      	beq.n	8005c40 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8b5b      	ldrh	r3, [r3, #26]
 8005c36:	f043 0310 	orr.w	r3, r3, #16
 8005c3a:	b29a      	uxth	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8005c40:	2101      	movs	r1, #1
 8005c42:	6878      	ldr	r0, [r7, #4]
 8005c44:	f7ff fe9c 	bl	8005980 <tcp_close_shutdown>
 8005c48:	4603      	mov	r3, r0
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3708      	adds	r7, #8
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	08011564 	.word	0x08011564
 8005c58:	08011674 	.word	0x08011674
 8005c5c:	080115a8 	.word	0x080115a8

08005c60 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b08e      	sub	sp, #56	; 0x38
 8005c64:	af04      	add	r7, sp, #16
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d107      	bne.n	8005c80 <tcp_abandon+0x20>
 8005c70:	4b52      	ldr	r3, [pc, #328]	; (8005dbc <tcp_abandon+0x15c>)
 8005c72:	f240 223d 	movw	r2, #573	; 0x23d
 8005c76:	4952      	ldr	r1, [pc, #328]	; (8005dc0 <tcp_abandon+0x160>)
 8005c78:	4852      	ldr	r0, [pc, #328]	; (8005dc4 <tcp_abandon+0x164>)
 8005c7a:	f009 ff8b 	bl	800fb94 <iprintf>
 8005c7e:	e099      	b.n	8005db4 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7d1b      	ldrb	r3, [r3, #20]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d106      	bne.n	8005c96 <tcp_abandon+0x36>
 8005c88:	4b4c      	ldr	r3, [pc, #304]	; (8005dbc <tcp_abandon+0x15c>)
 8005c8a:	f240 2241 	movw	r2, #577	; 0x241
 8005c8e:	494e      	ldr	r1, [pc, #312]	; (8005dc8 <tcp_abandon+0x168>)
 8005c90:	484c      	ldr	r0, [pc, #304]	; (8005dc4 <tcp_abandon+0x164>)
 8005c92:	f009 ff7f 	bl	800fb94 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	7d1b      	ldrb	r3, [r3, #20]
 8005c9a:	2b0a      	cmp	r3, #10
 8005c9c:	d107      	bne.n	8005cae <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8005c9e:	6879      	ldr	r1, [r7, #4]
 8005ca0:	484a      	ldr	r0, [pc, #296]	; (8005dcc <tcp_abandon+0x16c>)
 8005ca2:	f000 ffbf 	bl	8006c24 <tcp_pcb_remove>
    tcp_free(pcb);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f7ff fdb8 	bl	800581c <tcp_free>
 8005cac:	e082      	b.n	8005db4 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cba:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cc8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	7d1b      	ldrb	r3, [r3, #20]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d126      	bne.n	8005d26 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8adb      	ldrh	r3, [r3, #22]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d02e      	beq.n	8005d3e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005ce0:	4b3b      	ldr	r3, [pc, #236]	; (8005dd0 <tcp_abandon+0x170>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d105      	bne.n	8005cf6 <tcp_abandon+0x96>
 8005cea:	4b39      	ldr	r3, [pc, #228]	; (8005dd0 <tcp_abandon+0x170>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	4a37      	ldr	r2, [pc, #220]	; (8005dd0 <tcp_abandon+0x170>)
 8005cf2:	6013      	str	r3, [r2, #0]
 8005cf4:	e013      	b.n	8005d1e <tcp_abandon+0xbe>
 8005cf6:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <tcp_abandon+0x170>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	61fb      	str	r3, [r7, #28]
 8005cfc:	e00c      	b.n	8005d18 <tcp_abandon+0xb8>
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	68db      	ldr	r3, [r3, #12]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d104      	bne.n	8005d12 <tcp_abandon+0xb2>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	68da      	ldr	r2, [r3, #12]
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	60da      	str	r2, [r3, #12]
 8005d10:	e005      	b.n	8005d1e <tcp_abandon+0xbe>
 8005d12:	69fb      	ldr	r3, [r7, #28]
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	61fb      	str	r3, [r7, #28]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d1ef      	bne.n	8005cfe <tcp_abandon+0x9e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2200      	movs	r2, #0
 8005d22:	60da      	str	r2, [r3, #12]
 8005d24:	e00b      	b.n	8005d3e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8adb      	ldrh	r3, [r3, #22]
 8005d2e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4828      	ldr	r0, [pc, #160]	; (8005dd4 <tcp_abandon+0x174>)
 8005d34:	f000 ff76 	bl	8006c24 <tcp_pcb_remove>
 8005d38:	4b27      	ldr	r3, [pc, #156]	; (8005dd8 <tcp_abandon+0x178>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d004      	beq.n	8005d50 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f000 fd1a 	bl	8006784 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d004      	beq.n	8005d62 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f000 fd11 	bl	8006784 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d004      	beq.n	8005d74 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f000 fd08 	bl	8006784 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00e      	beq.n	8005d98 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8005d7a:	6879      	ldr	r1, [r7, #4]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	3304      	adds	r3, #4
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	8b12      	ldrh	r2, [r2, #24]
 8005d84:	9202      	str	r2, [sp, #8]
 8005d86:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005d88:	9201      	str	r2, [sp, #4]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	69b9      	ldr	r1, [r7, #24]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f004 fcc8 	bl	800a728 <tcp_rst>
    }
    last_state = pcb->state;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	7d1b      	ldrb	r3, [r3, #20]
 8005d9c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff fd3c 	bl	800581c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d004      	beq.n	8005db4 <tcp_abandon+0x154>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	f06f 010c 	mvn.w	r1, #12
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	4798      	blx	r3
  }
}
 8005db4:	3728      	adds	r7, #40	; 0x28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	bf00      	nop
 8005dbc:	08011564 	.word	0x08011564
 8005dc0:	080116a8 	.word	0x080116a8
 8005dc4:	080115a8 	.word	0x080115a8
 8005dc8:	080116c4 	.word	0x080116c4
 8005dcc:	20006d60 	.word	0x20006d60
 8005dd0:	20006d5c 	.word	0x20006d5c
 8005dd4:	20006d50 	.word	0x20006d50
 8005dd8:	20006d4c 	.word	0x20006d4c

08005ddc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8005de4:	2101      	movs	r1, #1
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff ff3a 	bl	8005c60 <tcp_abandon>
}
 8005dec:	bf00      	nop
 8005dee:	3708      	adds	r7, #8
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <tcp_update_rcv_ann_wnd+0x1c>
 8005e02:	4b25      	ldr	r3, [pc, #148]	; (8005e98 <tcp_update_rcv_ann_wnd+0xa4>)
 8005e04:	f240 32a6 	movw	r2, #934	; 0x3a6
 8005e08:	4924      	ldr	r1, [pc, #144]	; (8005e9c <tcp_update_rcv_ann_wnd+0xa8>)
 8005e0a:	4825      	ldr	r0, [pc, #148]	; (8005ea0 <tcp_update_rcv_ann_wnd+0xac>)
 8005e0c:	f009 fec2 	bl	800fb94 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	687a      	ldr	r2, [r7, #4]
 8005e16:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8005e18:	4413      	add	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8005e24:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8005e28:	bf28      	it	cs
 8005e2a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8005e2e:	b292      	uxth	r2, r2
 8005e30:	4413      	add	r3, r2
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	db08      	blt.n	8005e4c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	e020      	b.n	8005e8e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	dd03      	ble.n	8005e62 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e60:	e014      	b.n	8005e8c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e74:	d306      	bcc.n	8005e84 <tcp_update_rcv_ann_wnd+0x90>
 8005e76:	4b08      	ldr	r3, [pc, #32]	; (8005e98 <tcp_update_rcv_ann_wnd+0xa4>)
 8005e78:	f240 32b6 	movw	r2, #950	; 0x3b6
 8005e7c:	4909      	ldr	r1, [pc, #36]	; (8005ea4 <tcp_update_rcv_ann_wnd+0xb0>)
 8005e7e:	4808      	ldr	r0, [pc, #32]	; (8005ea0 <tcp_update_rcv_ann_wnd+0xac>)
 8005e80:	f009 fe88 	bl	800fb94 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8005e8c:	2300      	movs	r3, #0
  }
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3710      	adds	r7, #16
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	08011564 	.word	0x08011564
 8005e9c:	080117c0 	.word	0x080117c0
 8005ea0:	080115a8 	.word	0x080115a8
 8005ea4:	080117e4 	.word	0x080117e4

08005ea8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b084      	sub	sp, #16
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d107      	bne.n	8005eca <tcp_recved+0x22>
 8005eba:	4b1f      	ldr	r3, [pc, #124]	; (8005f38 <tcp_recved+0x90>)
 8005ebc:	f240 32cf 	movw	r2, #975	; 0x3cf
 8005ec0:	491e      	ldr	r1, [pc, #120]	; (8005f3c <tcp_recved+0x94>)
 8005ec2:	481f      	ldr	r0, [pc, #124]	; (8005f40 <tcp_recved+0x98>)
 8005ec4:	f009 fe66 	bl	800fb94 <iprintf>
 8005ec8:	e032      	b.n	8005f30 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	7d1b      	ldrb	r3, [r3, #20]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d106      	bne.n	8005ee0 <tcp_recved+0x38>
 8005ed2:	4b19      	ldr	r3, [pc, #100]	; (8005f38 <tcp_recved+0x90>)
 8005ed4:	f240 32d3 	movw	r2, #979	; 0x3d3
 8005ed8:	491a      	ldr	r1, [pc, #104]	; (8005f44 <tcp_recved+0x9c>)
 8005eda:	4819      	ldr	r0, [pc, #100]	; (8005f40 <tcp_recved+0x98>)
 8005edc:	f009 fe5a 	bl	800fb94 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8005ee4:	887b      	ldrh	r3, [r7, #2]
 8005ee6:	4413      	add	r3, r2
 8005ee8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8005eea:	89fb      	ldrh	r3, [r7, #14]
 8005eec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005ef0:	d804      	bhi.n	8005efc <tcp_recved+0x54>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ef6:	89fa      	ldrh	r2, [r7, #14]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d204      	bcs.n	8005f06 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8005f02:	851a      	strh	r2, [r3, #40]	; 0x28
 8005f04:	e002      	b.n	8005f0c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	89fa      	ldrh	r2, [r7, #14]
 8005f0a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f7ff ff71 	bl	8005df4 <tcp_update_rcv_ann_wnd>
 8005f12:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8005f1a:	d309      	bcc.n	8005f30 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	8b5b      	ldrh	r3, [r3, #26]
 8005f20:	f043 0302 	orr.w	r3, r3, #2
 8005f24:	b29a      	uxth	r2, r3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f003 fe38 	bl	8009ba0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8005f30:	3710      	adds	r7, #16
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	08011564 	.word	0x08011564
 8005f3c:	08011800 	.word	0x08011800
 8005f40:	080115a8 	.word	0x080115a8
 8005f44:	08011818 	.word	0x08011818

08005f48 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8005f48:	b5b0      	push	{r4, r5, r7, lr}
 8005f4a:	b090      	sub	sp, #64	; 0x40
 8005f4c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8005f54:	4b94      	ldr	r3, [pc, #592]	; (80061a8 <tcp_slowtmr+0x260>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	4a93      	ldr	r2, [pc, #588]	; (80061a8 <tcp_slowtmr+0x260>)
 8005f5c:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8005f5e:	4b93      	ldr	r3, [pc, #588]	; (80061ac <tcp_slowtmr+0x264>)
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	4b91      	ldr	r3, [pc, #580]	; (80061ac <tcp_slowtmr+0x264>)
 8005f68:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8005f6e:	4b90      	ldr	r3, [pc, #576]	; (80061b0 <tcp_slowtmr+0x268>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8005f74:	e29f      	b.n	80064b6 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8005f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f78:	7d1b      	ldrb	r3, [r3, #20]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <tcp_slowtmr+0x44>
 8005f7e:	4b8d      	ldr	r3, [pc, #564]	; (80061b4 <tcp_slowtmr+0x26c>)
 8005f80:	f240 42be 	movw	r2, #1214	; 0x4be
 8005f84:	498c      	ldr	r1, [pc, #560]	; (80061b8 <tcp_slowtmr+0x270>)
 8005f86:	488d      	ldr	r0, [pc, #564]	; (80061bc <tcp_slowtmr+0x274>)
 8005f88:	f009 fe04 	bl	800fb94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8005f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f8e:	7d1b      	ldrb	r3, [r3, #20]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d106      	bne.n	8005fa2 <tcp_slowtmr+0x5a>
 8005f94:	4b87      	ldr	r3, [pc, #540]	; (80061b4 <tcp_slowtmr+0x26c>)
 8005f96:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8005f9a:	4989      	ldr	r1, [pc, #548]	; (80061c0 <tcp_slowtmr+0x278>)
 8005f9c:	4887      	ldr	r0, [pc, #540]	; (80061bc <tcp_slowtmr+0x274>)
 8005f9e:	f009 fdf9 	bl	800fb94 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8005fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fa4:	7d1b      	ldrb	r3, [r3, #20]
 8005fa6:	2b0a      	cmp	r3, #10
 8005fa8:	d106      	bne.n	8005fb8 <tcp_slowtmr+0x70>
 8005faa:	4b82      	ldr	r3, [pc, #520]	; (80061b4 <tcp_slowtmr+0x26c>)
 8005fac:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8005fb0:	4984      	ldr	r1, [pc, #528]	; (80061c4 <tcp_slowtmr+0x27c>)
 8005fb2:	4882      	ldr	r0, [pc, #520]	; (80061bc <tcp_slowtmr+0x274>)
 8005fb4:	f009 fdee 	bl	800fb94 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8005fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fba:	7f9a      	ldrb	r2, [r3, #30]
 8005fbc:	4b7b      	ldr	r3, [pc, #492]	; (80061ac <tcp_slowtmr+0x264>)
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d105      	bne.n	8005fd0 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8005fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8005fce:	e272      	b.n	80064b6 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8005fd0:	4b76      	ldr	r3, [pc, #472]	; (80061ac <tcp_slowtmr+0x264>)
 8005fd2:	781a      	ldrb	r2, [r3, #0]
 8005fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd6:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8005fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fe6:	7d1b      	ldrb	r3, [r3, #20]
 8005fe8:	2b02      	cmp	r3, #2
 8005fea:	d10a      	bne.n	8006002 <tcp_slowtmr+0xba>
 8005fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ff2:	2b05      	cmp	r3, #5
 8005ff4:	d905      	bls.n	8006002 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8005ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006000:	e11e      	b.n	8006240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006008:	2b0b      	cmp	r3, #11
 800600a:	d905      	bls.n	8006018 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800600c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006010:	3301      	adds	r3, #1
 8006012:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006016:	e113      	b.n	8006240 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8006018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800601e:	2b00      	cmp	r3, #0
 8006020:	d075      	beq.n	800610e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8006022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006026:	2b00      	cmp	r3, #0
 8006028:	d006      	beq.n	8006038 <tcp_slowtmr+0xf0>
 800602a:	4b62      	ldr	r3, [pc, #392]	; (80061b4 <tcp_slowtmr+0x26c>)
 800602c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8006030:	4965      	ldr	r1, [pc, #404]	; (80061c8 <tcp_slowtmr+0x280>)
 8006032:	4862      	ldr	r0, [pc, #392]	; (80061bc <tcp_slowtmr+0x274>)
 8006034:	f009 fdae 	bl	800fb94 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8006038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800603a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <tcp_slowtmr+0x106>
 8006040:	4b5c      	ldr	r3, [pc, #368]	; (80061b4 <tcp_slowtmr+0x26c>)
 8006042:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8006046:	4961      	ldr	r1, [pc, #388]	; (80061cc <tcp_slowtmr+0x284>)
 8006048:	485c      	ldr	r0, [pc, #368]	; (80061bc <tcp_slowtmr+0x274>)
 800604a:	f009 fda3 	bl	800fb94 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8006054:	2b0b      	cmp	r3, #11
 8006056:	d905      	bls.n	8006064 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8006058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605c:	3301      	adds	r3, #1
 800605e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006062:	e0ed      	b.n	8006240 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800606a:	3b01      	subs	r3, #1
 800606c:	4a58      	ldr	r2, [pc, #352]	; (80061d0 <tcp_slowtmr+0x288>)
 800606e:	5cd3      	ldrb	r3, [r2, r3]
 8006070:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8006072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006074:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006078:	7c7a      	ldrb	r2, [r7, #17]
 800607a:	429a      	cmp	r2, r3
 800607c:	d907      	bls.n	800608e <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800607e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006080:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006084:	3301      	adds	r3, #1
 8006086:	b2da      	uxtb	r2, r3
 8006088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800608a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800608e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006090:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006094:	7c7a      	ldrb	r2, [r7, #17]
 8006096:	429a      	cmp	r2, r3
 8006098:	f200 80d2 	bhi.w	8006240 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800609c:	2301      	movs	r3, #1
 800609e:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d108      	bne.n	80060bc <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80060aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060ac:	f004 fc30 	bl	800a910 <tcp_zero_window_probe>
 80060b0:	4603      	mov	r3, r0
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d014      	beq.n	80060e0 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
 80060ba:	e011      	b.n	80060e0 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80060bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80060c2:	4619      	mov	r1, r3
 80060c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060c6:	f003 fae5 	bl	8009694 <tcp_split_unsent_seg>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d107      	bne.n	80060e0 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80060d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80060d2:	f003 fd65 	bl	8009ba0 <tcp_output>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80060dc:	2300      	movs	r3, #0
 80060de:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80060e0:	6a3b      	ldr	r3, [r7, #32]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 80ac 	beq.w	8006240 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80060e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ea:	2200      	movs	r2, #0
 80060ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80060f6:	2b06      	cmp	r3, #6
 80060f8:	f200 80a2 	bhi.w	8006240 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80060fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006102:	3301      	adds	r3, #1
 8006104:	b2da      	uxtb	r2, r3
 8006106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006108:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800610c:	e098      	b.n	8006240 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800610e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006110:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006114:	2b00      	cmp	r3, #0
 8006116:	db0f      	blt.n	8006138 <tcp_slowtmr+0x1f0>
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800611e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006122:	4293      	cmp	r3, r2
 8006124:	d008      	beq.n	8006138 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800612c:	b29b      	uxth	r3, r3
 800612e:	3301      	adds	r3, #1
 8006130:	b29b      	uxth	r3, r3
 8006132:	b21a      	sxth	r2, r3
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8006138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800613e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006140:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8006144:	429a      	cmp	r2, r3
 8006146:	db7b      	blt.n	8006240 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8006148:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800614a:	f004 f821 	bl	800a190 <tcp_rexmit_rto_prepare>
 800614e:	4603      	mov	r3, r0
 8006150:	2b00      	cmp	r3, #0
 8006152:	d007      	beq.n	8006164 <tcp_slowtmr+0x21c>
 8006154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006158:	2b00      	cmp	r3, #0
 800615a:	d171      	bne.n	8006240 <tcp_slowtmr+0x2f8>
 800615c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	2b00      	cmp	r3, #0
 8006162:	d06d      	beq.n	8006240 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8006164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006166:	7d1b      	ldrb	r3, [r3, #20]
 8006168:	2b02      	cmp	r3, #2
 800616a:	d03a      	beq.n	80061e2 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800616c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006172:	2b0c      	cmp	r3, #12
 8006174:	bf28      	it	cs
 8006176:	230c      	movcs	r3, #12
 8006178:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800617a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800617c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006180:	10db      	asrs	r3, r3, #3
 8006182:	b21b      	sxth	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006188:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800618c:	4413      	add	r3, r2
 800618e:	7efa      	ldrb	r2, [r7, #27]
 8006190:	4910      	ldr	r1, [pc, #64]	; (80061d4 <tcp_slowtmr+0x28c>)
 8006192:	5c8a      	ldrb	r2, [r1, r2]
 8006194:	4093      	lsls	r3, r2
 8006196:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800619e:	4293      	cmp	r3, r2
 80061a0:	dc1a      	bgt.n	80061d8 <tcp_slowtmr+0x290>
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	b21a      	sxth	r2, r3
 80061a6:	e019      	b.n	80061dc <tcp_slowtmr+0x294>
 80061a8:	20006d54 	.word	0x20006d54
 80061ac:	2000055a 	.word	0x2000055a
 80061b0:	20006d50 	.word	0x20006d50
 80061b4:	08011564 	.word	0x08011564
 80061b8:	080118a8 	.word	0x080118a8
 80061bc:	080115a8 	.word	0x080115a8
 80061c0:	080118d4 	.word	0x080118d4
 80061c4:	08011900 	.word	0x08011900
 80061c8:	08011930 	.word	0x08011930
 80061cc:	08011964 	.word	0x08011964
 80061d0:	080138d8 	.word	0x080138d8
 80061d4:	080138c8 	.word	0x080138c8
 80061d8:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80061dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80061e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061e4:	2200      	movs	r2, #0
 80061e6:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80061e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80061f4:	4293      	cmp	r3, r2
 80061f6:	bf28      	it	cs
 80061f8:	4613      	movcs	r3, r2
 80061fa:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80061fc:	8a7b      	ldrh	r3, [r7, #18]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006204:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8006208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800620a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	b29b      	uxth	r3, r3
 8006216:	429a      	cmp	r2, r3
 8006218:	d206      	bcs.n	8006228 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800621a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800621c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800621e:	005b      	lsls	r3, r3, #1
 8006220:	b29a      	uxth	r2, r3
 8006222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006224:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8006228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800622c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800622e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	2200      	movs	r2, #0
 8006236:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800623a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800623c:	f004 f818 	bl	800a270 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8006240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006242:	7d1b      	ldrb	r3, [r3, #20]
 8006244:	2b06      	cmp	r3, #6
 8006246:	d111      	bne.n	800626c <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	8b5b      	ldrh	r3, [r3, #26]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00b      	beq.n	800626c <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006254:	4b9d      	ldr	r3, [pc, #628]	; (80064cc <tcp_slowtmr+0x584>)
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800625a:	6a1b      	ldr	r3, [r3, #32]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b28      	cmp	r3, #40	; 0x28
 8006260:	d904      	bls.n	800626c <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8006262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006266:	3301      	adds	r3, #1
 8006268:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800626c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800626e:	7a5b      	ldrb	r3, [r3, #9]
 8006270:	f003 0308 	and.w	r3, r3, #8
 8006274:	2b00      	cmp	r3, #0
 8006276:	d04c      	beq.n	8006312 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8006278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800627a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800627c:	2b04      	cmp	r3, #4
 800627e:	d003      	beq.n	8006288 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006282:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006284:	2b07      	cmp	r3, #7
 8006286:	d144      	bne.n	8006312 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006288:	4b90      	ldr	r3, [pc, #576]	; (80064cc <tcp_slowtmr+0x584>)
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006294:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006298:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800629c:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80062a0:	498b      	ldr	r1, [pc, #556]	; (80064d0 <tcp_slowtmr+0x588>)
 80062a2:	fba1 1303 	umull	r1, r3, r1, r3
 80062a6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d90a      	bls.n	80062c2 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80062ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80062b0:	3301      	adds	r3, #1
 80062b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80062b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ba:	3301      	adds	r3, #1
 80062bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062c0:	e027      	b.n	8006312 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062c2:	4b82      	ldr	r3, [pc, #520]	; (80064cc <tcp_slowtmr+0x584>)
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80062d8:	4618      	mov	r0, r3
 80062da:	4b7e      	ldr	r3, [pc, #504]	; (80064d4 <tcp_slowtmr+0x58c>)
 80062dc:	fb03 f300 	mul.w	r3, r3, r0
 80062e0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 80062e2:	497b      	ldr	r1, [pc, #492]	; (80064d0 <tcp_slowtmr+0x588>)
 80062e4:	fba1 1303 	umull	r1, r3, r1, r3
 80062e8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80062ea:	429a      	cmp	r2, r3
 80062ec:	d911      	bls.n	8006312 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80062ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80062f0:	f004 face 	bl	800a890 <tcp_keepalive>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80062fa:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d107      	bne.n	8006312 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006304:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8006308:	3301      	adds	r3, #1
 800630a:	b2da      	uxtb	r2, r3
 800630c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006316:	2b00      	cmp	r3, #0
 8006318:	d011      	beq.n	800633e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800631a:	4b6c      	ldr	r3, [pc, #432]	; (80064cc <tcp_slowtmr+0x584>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006320:	6a1b      	ldr	r3, [r3, #32]
 8006322:	1ad2      	subs	r2, r2, r3
 8006324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006326:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800632a:	4619      	mov	r1, r3
 800632c:	460b      	mov	r3, r1
 800632e:	005b      	lsls	r3, r3, #1
 8006330:	440b      	add	r3, r1
 8006332:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8006338:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800633a:	f000 fdd7 	bl	8006eec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800633e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006340:	7d1b      	ldrb	r3, [r3, #20]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d10b      	bne.n	800635e <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006346:	4b61      	ldr	r3, [pc, #388]	; (80064cc <tcp_slowtmr+0x584>)
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	2b28      	cmp	r3, #40	; 0x28
 8006352:	d904      	bls.n	800635e <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8006354:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006358:	3301      	adds	r3, #1
 800635a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800635e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006360:	7d1b      	ldrb	r3, [r3, #20]
 8006362:	2b09      	cmp	r3, #9
 8006364:	d10b      	bne.n	800637e <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006366:	4b59      	ldr	r3, [pc, #356]	; (80064cc <tcp_slowtmr+0x584>)
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	2bf0      	cmp	r3, #240	; 0xf0
 8006372:	d904      	bls.n	800637e <tcp_slowtmr+0x436>
        ++pcb_remove;
 8006374:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006378:	3301      	adds	r3, #1
 800637a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800637e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006382:	2b00      	cmp	r3, #0
 8006384:	d060      	beq.n	8006448 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006386:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800638c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800638e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006390:	f000 fbf8 	bl	8006b84 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006396:	2b00      	cmp	r3, #0
 8006398:	d010      	beq.n	80063bc <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800639a:	4b4f      	ldr	r3, [pc, #316]	; (80064d8 <tcp_slowtmr+0x590>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d106      	bne.n	80063b2 <tcp_slowtmr+0x46a>
 80063a4:	4b4d      	ldr	r3, [pc, #308]	; (80064dc <tcp_slowtmr+0x594>)
 80063a6:	f240 526d 	movw	r2, #1389	; 0x56d
 80063aa:	494d      	ldr	r1, [pc, #308]	; (80064e0 <tcp_slowtmr+0x598>)
 80063ac:	484d      	ldr	r0, [pc, #308]	; (80064e4 <tcp_slowtmr+0x59c>)
 80063ae:	f009 fbf1 	bl	800fb94 <iprintf>
        prev->next = pcb->next;
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063b8:	60da      	str	r2, [r3, #12]
 80063ba:	e00f      	b.n	80063dc <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80063bc:	4b46      	ldr	r3, [pc, #280]	; (80064d8 <tcp_slowtmr+0x590>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c2:	429a      	cmp	r2, r3
 80063c4:	d006      	beq.n	80063d4 <tcp_slowtmr+0x48c>
 80063c6:	4b45      	ldr	r3, [pc, #276]	; (80064dc <tcp_slowtmr+0x594>)
 80063c8:	f240 5271 	movw	r2, #1393	; 0x571
 80063cc:	4946      	ldr	r1, [pc, #280]	; (80064e8 <tcp_slowtmr+0x5a0>)
 80063ce:	4845      	ldr	r0, [pc, #276]	; (80064e4 <tcp_slowtmr+0x59c>)
 80063d0:	f009 fbe0 	bl	800fb94 <iprintf>
        tcp_active_pcbs = pcb->next;
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	4a3f      	ldr	r2, [pc, #252]	; (80064d8 <tcp_slowtmr+0x590>)
 80063da:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 80063dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d013      	beq.n	800640c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80063e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80063e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ea:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80063ec:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80063ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f0:	3304      	adds	r3, #4
 80063f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063f4:	8ad2      	ldrh	r2, [r2, #22]
 80063f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063f8:	8b09      	ldrh	r1, [r1, #24]
 80063fa:	9102      	str	r1, [sp, #8]
 80063fc:	9201      	str	r2, [sp, #4]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	462b      	mov	r3, r5
 8006402:	4622      	mov	r2, r4
 8006404:	4601      	mov	r1, r0
 8006406:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006408:	f004 f98e 	bl	800a728 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800640c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800640e:	691b      	ldr	r3, [r3, #16]
 8006410:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006414:	7d1b      	ldrb	r3, [r3, #20]
 8006416:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800641c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800641e:	68db      	ldr	r3, [r3, #12]
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006422:	6838      	ldr	r0, [r7, #0]
 8006424:	f7ff f9fa 	bl	800581c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006428:	4b30      	ldr	r3, [pc, #192]	; (80064ec <tcp_slowtmr+0x5a4>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d004      	beq.n	800643e <tcp_slowtmr+0x4f6>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	f06f 010c 	mvn.w	r1, #12
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800643e:	4b2b      	ldr	r3, [pc, #172]	; (80064ec <tcp_slowtmr+0x5a4>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d037      	beq.n	80064b6 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006446:	e590      	b.n	8005f6a <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006454:	7f1b      	ldrb	r3, [r3, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	b2da      	uxtb	r2, r3
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800645e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006460:	7f1a      	ldrb	r2, [r3, #28]
 8006462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006464:	7f5b      	ldrb	r3, [r3, #29]
 8006466:	429a      	cmp	r2, r3
 8006468:	d325      	bcc.n	80064b6 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646c:	2200      	movs	r2, #0
 800646e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006470:	4b1e      	ldr	r3, [pc, #120]	; (80064ec <tcp_slowtmr+0x5a4>)
 8006472:	2200      	movs	r2, #0
 8006474:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800647c:	2b00      	cmp	r3, #0
 800647e:	d00b      	beq.n	8006498 <tcp_slowtmr+0x550>
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006488:	6912      	ldr	r2, [r2, #16]
 800648a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	4603      	mov	r3, r0
 8006492:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006496:	e002      	b.n	800649e <tcp_slowtmr+0x556>
 8006498:	2300      	movs	r3, #0
 800649a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800649e:	4b13      	ldr	r3, [pc, #76]	; (80064ec <tcp_slowtmr+0x5a4>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d000      	beq.n	80064a8 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80064a6:	e560      	b.n	8005f6a <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80064a8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d102      	bne.n	80064b6 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80064b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064b2:	f003 fb75 	bl	8009ba0 <tcp_output>
  while (pcb != NULL) {
 80064b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f ad5c 	bne.w	8005f76 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80064be:	2300      	movs	r3, #0
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80064c2:	4b0b      	ldr	r3, [pc, #44]	; (80064f0 <tcp_slowtmr+0x5a8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80064c8:	e067      	b.n	800659a <tcp_slowtmr+0x652>
 80064ca:	bf00      	nop
 80064cc:	20006d54 	.word	0x20006d54
 80064d0:	10624dd3 	.word	0x10624dd3
 80064d4:	000124f8 	.word	0x000124f8
 80064d8:	20006d50 	.word	0x20006d50
 80064dc:	08011564 	.word	0x08011564
 80064e0:	0801199c 	.word	0x0801199c
 80064e4:	080115a8 	.word	0x080115a8
 80064e8:	080119c8 	.word	0x080119c8
 80064ec:	20006d4c 	.word	0x20006d4c
 80064f0:	20006d60 	.word	0x20006d60
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80064f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f6:	7d1b      	ldrb	r3, [r3, #20]
 80064f8:	2b0a      	cmp	r3, #10
 80064fa:	d006      	beq.n	800650a <tcp_slowtmr+0x5c2>
 80064fc:	4b2a      	ldr	r3, [pc, #168]	; (80065a8 <tcp_slowtmr+0x660>)
 80064fe:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006502:	492a      	ldr	r1, [pc, #168]	; (80065ac <tcp_slowtmr+0x664>)
 8006504:	482a      	ldr	r0, [pc, #168]	; (80065b0 <tcp_slowtmr+0x668>)
 8006506:	f009 fb45 	bl	800fb94 <iprintf>
    pcb_remove = 0;
 800650a:	2300      	movs	r3, #0
 800650c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006510:	4b28      	ldr	r3, [pc, #160]	; (80065b4 <tcp_slowtmr+0x66c>)
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006516:	6a1b      	ldr	r3, [r3, #32]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	2bf0      	cmp	r3, #240	; 0xf0
 800651c:	d904      	bls.n	8006528 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800651e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006522:	3301      	adds	r3, #1
 8006524:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006528:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800652c:	2b00      	cmp	r3, #0
 800652e:	d02f      	beq.n	8006590 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006532:	f000 fb27 	bl	8006b84 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006538:	2b00      	cmp	r3, #0
 800653a:	d010      	beq.n	800655e <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800653c:	4b1e      	ldr	r3, [pc, #120]	; (80065b8 <tcp_slowtmr+0x670>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006542:	429a      	cmp	r2, r3
 8006544:	d106      	bne.n	8006554 <tcp_slowtmr+0x60c>
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <tcp_slowtmr+0x660>)
 8006548:	f240 52af 	movw	r2, #1455	; 0x5af
 800654c:	491b      	ldr	r1, [pc, #108]	; (80065bc <tcp_slowtmr+0x674>)
 800654e:	4818      	ldr	r0, [pc, #96]	; (80065b0 <tcp_slowtmr+0x668>)
 8006550:	f009 fb20 	bl	800fb94 <iprintf>
        prev->next = pcb->next;
 8006554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006556:	68da      	ldr	r2, [r3, #12]
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	60da      	str	r2, [r3, #12]
 800655c:	e00f      	b.n	800657e <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800655e:	4b16      	ldr	r3, [pc, #88]	; (80065b8 <tcp_slowtmr+0x670>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006564:	429a      	cmp	r2, r3
 8006566:	d006      	beq.n	8006576 <tcp_slowtmr+0x62e>
 8006568:	4b0f      	ldr	r3, [pc, #60]	; (80065a8 <tcp_slowtmr+0x660>)
 800656a:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800656e:	4914      	ldr	r1, [pc, #80]	; (80065c0 <tcp_slowtmr+0x678>)
 8006570:	480f      	ldr	r0, [pc, #60]	; (80065b0 <tcp_slowtmr+0x668>)
 8006572:	f009 fb0f 	bl	800fb94 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <tcp_slowtmr+0x670>)
 800657c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006580:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006588:	69f8      	ldr	r0, [r7, #28]
 800658a:	f7ff f947 	bl	800581c <tcp_free>
 800658e:	e004      	b.n	800659a <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800659a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1a9      	bne.n	80064f4 <tcp_slowtmr+0x5ac>
    }
  }
}
 80065a0:	bf00      	nop
 80065a2:	3730      	adds	r7, #48	; 0x30
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bdb0      	pop	{r4, r5, r7, pc}
 80065a8:	08011564 	.word	0x08011564
 80065ac:	080119f4 	.word	0x080119f4
 80065b0:	080115a8 	.word	0x080115a8
 80065b4:	20006d54 	.word	0x20006d54
 80065b8:	20006d60 	.word	0x20006d60
 80065bc:	08011a24 	.word	0x08011a24
 80065c0:	08011a4c 	.word	0x08011a4c

080065c4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80065ca:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <tcp_fasttmr+0xbc>)
 80065cc:	781b      	ldrb	r3, [r3, #0]
 80065ce:	3301      	adds	r3, #1
 80065d0:	b2da      	uxtb	r2, r3
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <tcp_fasttmr+0xbc>)
 80065d4:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 80065d6:	4b2b      	ldr	r3, [pc, #172]	; (8006684 <tcp_fasttmr+0xc0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80065dc:	e048      	b.n	8006670 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	7f9a      	ldrb	r2, [r3, #30]
 80065e2:	4b27      	ldr	r3, [pc, #156]	; (8006680 <tcp_fasttmr+0xbc>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d03f      	beq.n	800666a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 80065ea:	4b25      	ldr	r3, [pc, #148]	; (8006680 <tcp_fasttmr+0xbc>)
 80065ec:	781a      	ldrb	r2, [r3, #0]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	8b5b      	ldrh	r3, [r3, #26]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d010      	beq.n	8006620 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	8b5b      	ldrh	r3, [r3, #26]
 8006602:	f043 0302 	orr.w	r3, r3, #2
 8006606:	b29a      	uxth	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f003 fac7 	bl	8009ba0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	8b5b      	ldrh	r3, [r3, #26]
 8006616:	f023 0303 	bic.w	r3, r3, #3
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	8b5b      	ldrh	r3, [r3, #26]
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	2b00      	cmp	r3, #0
 800662a:	d009      	beq.n	8006640 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	8b5b      	ldrh	r3, [r3, #26]
 8006630:	f023 0308 	bic.w	r3, r3, #8
 8006634:	b29a      	uxth	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f7ff fa7e 	bl	8005b3c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800664a:	2b00      	cmp	r3, #0
 800664c:	d00a      	beq.n	8006664 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800664e:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <tcp_fasttmr+0xc4>)
 8006650:	2200      	movs	r2, #0
 8006652:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006654:	6878      	ldr	r0, [r7, #4]
 8006656:	f000 f819 	bl	800668c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800665a:	4b0b      	ldr	r3, [pc, #44]	; (8006688 <tcp_fasttmr+0xc4>)
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d000      	beq.n	8006664 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006662:	e7b8      	b.n	80065d6 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	e002      	b.n	8006670 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1b3      	bne.n	80065de <tcp_fasttmr+0x1a>
    }
  }
}
 8006676:	bf00      	nop
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	2000055a 	.word	0x2000055a
 8006684:	20006d50 	.word	0x20006d50
 8006688:	20006d4c 	.word	0x20006d4c

0800668c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800668c:	b590      	push	{r4, r7, lr}
 800668e:	b085      	sub	sp, #20
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <tcp_process_refused_data+0x22>
 800669a:	4b37      	ldr	r3, [pc, #220]	; (8006778 <tcp_process_refused_data+0xec>)
 800669c:	f240 6209 	movw	r2, #1545	; 0x609
 80066a0:	4936      	ldr	r1, [pc, #216]	; (800677c <tcp_process_refused_data+0xf0>)
 80066a2:	4837      	ldr	r0, [pc, #220]	; (8006780 <tcp_process_refused_data+0xf4>)
 80066a4:	f009 fa76 	bl	800fb94 <iprintf>
 80066a8:	f06f 030f 	mvn.w	r3, #15
 80066ac:	e060      	b.n	8006770 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066b2:	7b5b      	ldrb	r3, [r3, #13]
 80066b4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066ba:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00b      	beq.n	80066e4 <tcp_process_refused_data+0x58>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6918      	ldr	r0, [r3, #16]
 80066d6:	2300      	movs	r3, #0
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	6879      	ldr	r1, [r7, #4]
 80066dc:	47a0      	blx	r4
 80066de:	4603      	mov	r3, r0
 80066e0:	73fb      	strb	r3, [r7, #15]
 80066e2:	e007      	b.n	80066f4 <tcp_process_refused_data+0x68>
 80066e4:	2300      	movs	r3, #0
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	2000      	movs	r0, #0
 80066ec:	f000 f8a2 	bl	8006834 <tcp_recv_null>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80066f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d12a      	bne.n	8006752 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80066fc:	7bbb      	ldrb	r3, [r7, #14]
 80066fe:	f003 0320 	and.w	r3, r3, #32
 8006702:	2b00      	cmp	r3, #0
 8006704:	d033      	beq.n	800676e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800670a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800670e:	d005      	beq.n	800671c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006714:	3301      	adds	r3, #1
 8006716:	b29a      	uxth	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00b      	beq.n	800673e <tcp_process_refused_data+0xb2>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6918      	ldr	r0, [r3, #16]
 8006730:	2300      	movs	r3, #0
 8006732:	2200      	movs	r2, #0
 8006734:	6879      	ldr	r1, [r7, #4]
 8006736:	47a0      	blx	r4
 8006738:	4603      	mov	r3, r0
 800673a:	73fb      	strb	r3, [r7, #15]
 800673c:	e001      	b.n	8006742 <tcp_process_refused_data+0xb6>
 800673e:	2300      	movs	r3, #0
 8006740:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006742:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006746:	f113 0f0d 	cmn.w	r3, #13
 800674a:	d110      	bne.n	800676e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800674c:	f06f 030c 	mvn.w	r3, #12
 8006750:	e00e      	b.n	8006770 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006756:	f113 0f0d 	cmn.w	r3, #13
 800675a:	d102      	bne.n	8006762 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800675c:	f06f 030c 	mvn.w	r3, #12
 8006760:	e006      	b.n	8006770 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006768:	f06f 0304 	mvn.w	r3, #4
 800676c:	e000      	b.n	8006770 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	bd90      	pop	{r4, r7, pc}
 8006778:	08011564 	.word	0x08011564
 800677c:	08011a74 	.word	0x08011a74
 8006780:	080115a8 	.word	0x080115a8

08006784 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800678c:	e007      	b.n	800679e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 f809 	bl	80067ac <tcp_seg_free>
    seg = next;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d1f4      	bne.n	800678e <tcp_segs_free+0xa>
  }
}
 80067a4:	bf00      	nop
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00c      	beq.n	80067d4 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d004      	beq.n	80067cc <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7fe fc1e 	bl	8005008 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80067cc:	6879      	ldr	r1, [r7, #4]
 80067ce:	2003      	movs	r0, #3
 80067d0:	f7fd fd9c 	bl	800430c <memp_free>
  }
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d106      	bne.n	80067f8 <tcp_seg_copy+0x1c>
 80067ea:	4b0f      	ldr	r3, [pc, #60]	; (8006828 <tcp_seg_copy+0x4c>)
 80067ec:	f240 6282 	movw	r2, #1666	; 0x682
 80067f0:	490e      	ldr	r1, [pc, #56]	; (800682c <tcp_seg_copy+0x50>)
 80067f2:	480f      	ldr	r0, [pc, #60]	; (8006830 <tcp_seg_copy+0x54>)
 80067f4:	f009 f9ce 	bl	800fb94 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80067f8:	2003      	movs	r0, #3
 80067fa:	f7fd fd3b 	bl	8004274 <memp_malloc>
 80067fe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d101      	bne.n	800680a <tcp_seg_copy+0x2e>
    return NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	e00a      	b.n	8006820 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800680a:	2210      	movs	r2, #16
 800680c:	6879      	ldr	r1, [r7, #4]
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f009 f9ad 	bl	800fb6e <memcpy>
  pbuf_ref(cseg->p);
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	4618      	mov	r0, r3
 800681a:	f7fe fc95 	bl	8005148 <pbuf_ref>
  return cseg;
 800681e:	68fb      	ldr	r3, [r7, #12]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	08011564 	.word	0x08011564
 800682c:	08011ab8 	.word	0x08011ab8
 8006830:	080115a8 	.word	0x080115a8

08006834 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	60f8      	str	r0, [r7, #12]
 800683c:	60b9      	str	r1, [r7, #8]
 800683e:	607a      	str	r2, [r7, #4]
 8006840:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d109      	bne.n	800685c <tcp_recv_null+0x28>
 8006848:	4b12      	ldr	r3, [pc, #72]	; (8006894 <tcp_recv_null+0x60>)
 800684a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800684e:	4912      	ldr	r1, [pc, #72]	; (8006898 <tcp_recv_null+0x64>)
 8006850:	4812      	ldr	r0, [pc, #72]	; (800689c <tcp_recv_null+0x68>)
 8006852:	f009 f99f 	bl	800fb94 <iprintf>
 8006856:	f06f 030f 	mvn.w	r3, #15
 800685a:	e016      	b.n	800688a <tcp_recv_null+0x56>

  if (p != NULL) {
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d009      	beq.n	8006876 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	891b      	ldrh	r3, [r3, #8]
 8006866:	4619      	mov	r1, r3
 8006868:	68b8      	ldr	r0, [r7, #8]
 800686a:	f7ff fb1d 	bl	8005ea8 <tcp_recved>
    pbuf_free(p);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f7fe fbca 	bl	8005008 <pbuf_free>
 8006874:	e008      	b.n	8006888 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006876:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d104      	bne.n	8006888 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800687e:	68b8      	ldr	r0, [r7, #8]
 8006880:	f7ff f9c2 	bl	8005c08 <tcp_close>
 8006884:	4603      	mov	r3, r0
 8006886:	e000      	b.n	800688a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	08011564 	.word	0x08011564
 8006898:	08011ad4 	.word	0x08011ad4
 800689c:	080115a8 	.word	0x080115a8

080068a0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b086      	sub	sp, #24
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	4603      	mov	r3, r0
 80068a8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80068aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	db01      	blt.n	80068b6 <tcp_kill_prio+0x16>
 80068b2:	79fb      	ldrb	r3, [r7, #7]
 80068b4:	e000      	b.n	80068b8 <tcp_kill_prio+0x18>
 80068b6:	237f      	movs	r3, #127	; 0x7f
 80068b8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80068ba:	7afb      	ldrb	r3, [r7, #11]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d034      	beq.n	800692a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80068c0:	7afb      	ldrb	r3, [r7, #11]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80068c6:	2300      	movs	r3, #0
 80068c8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80068ca:	2300      	movs	r3, #0
 80068cc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80068ce:	4b19      	ldr	r3, [pc, #100]	; (8006934 <tcp_kill_prio+0x94>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	617b      	str	r3, [r7, #20]
 80068d4:	e01f      	b.n	8006916 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	7d5b      	ldrb	r3, [r3, #21]
 80068da:	7afa      	ldrb	r2, [r7, #11]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d80c      	bhi.n	80068fa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80068e4:	7afa      	ldrb	r2, [r7, #11]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d112      	bne.n	8006910 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80068ea:	4b13      	ldr	r3, [pc, #76]	; (8006938 <tcp_kill_prio+0x98>)
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	6a1b      	ldr	r3, [r3, #32]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	68fa      	ldr	r2, [r7, #12]
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d80a      	bhi.n	8006910 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80068fa:	4b0f      	ldr	r3, [pc, #60]	; (8006938 <tcp_kill_prio+0x98>)
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	6a1b      	ldr	r3, [r3, #32]
 8006902:	1ad3      	subs	r3, r2, r3
 8006904:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	7d5b      	ldrb	r3, [r3, #21]
 800690e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1dc      	bne.n	80068d6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d004      	beq.n	800692c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006922:	6938      	ldr	r0, [r7, #16]
 8006924:	f7ff fa5a 	bl	8005ddc <tcp_abort>
 8006928:	e000      	b.n	800692c <tcp_kill_prio+0x8c>
    return;
 800692a:	bf00      	nop
  }
}
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	20006d50 	.word	0x20006d50
 8006938:	20006d54 	.word	0x20006d54

0800693c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b086      	sub	sp, #24
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8006946:	79fb      	ldrb	r3, [r7, #7]
 8006948:	2b08      	cmp	r3, #8
 800694a:	d009      	beq.n	8006960 <tcp_kill_state+0x24>
 800694c:	79fb      	ldrb	r3, [r7, #7]
 800694e:	2b09      	cmp	r3, #9
 8006950:	d006      	beq.n	8006960 <tcp_kill_state+0x24>
 8006952:	4b1a      	ldr	r3, [pc, #104]	; (80069bc <tcp_kill_state+0x80>)
 8006954:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8006958:	4919      	ldr	r1, [pc, #100]	; (80069c0 <tcp_kill_state+0x84>)
 800695a:	481a      	ldr	r0, [pc, #104]	; (80069c4 <tcp_kill_state+0x88>)
 800695c:	f009 f91a 	bl	800fb94 <iprintf>

  inactivity = 0;
 8006960:	2300      	movs	r3, #0
 8006962:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006968:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <tcp_kill_state+0x8c>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	617b      	str	r3, [r7, #20]
 800696e:	e017      	b.n	80069a0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	7d1b      	ldrb	r3, [r3, #20]
 8006974:	79fa      	ldrb	r2, [r7, #7]
 8006976:	429a      	cmp	r2, r3
 8006978:	d10f      	bne.n	800699a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800697a:	4b14      	ldr	r3, [pc, #80]	; (80069cc <tcp_kill_state+0x90>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6a1b      	ldr	r3, [r3, #32]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	68fa      	ldr	r2, [r7, #12]
 8006986:	429a      	cmp	r2, r3
 8006988:	d807      	bhi.n	800699a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800698a:	4b10      	ldr	r3, [pc, #64]	; (80069cc <tcp_kill_state+0x90>)
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	6a1b      	ldr	r3, [r3, #32]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	617b      	str	r3, [r7, #20]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e4      	bne.n	8006970 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d003      	beq.n	80069b4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80069ac:	2100      	movs	r1, #0
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f7ff f956 	bl	8005c60 <tcp_abandon>
  }
}
 80069b4:	bf00      	nop
 80069b6:	3718      	adds	r7, #24
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}
 80069bc:	08011564 	.word	0x08011564
 80069c0:	08011af0 	.word	0x08011af0
 80069c4:	080115a8 	.word	0x080115a8
 80069c8:	20006d50 	.word	0x20006d50
 80069cc:	20006d54 	.word	0x20006d54

080069d0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80069de:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <tcp_kill_timewait+0x58>)
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	e012      	b.n	8006a0c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80069e6:	4b11      	ldr	r3, [pc, #68]	; (8006a2c <tcp_kill_timewait+0x5c>)
 80069e8:	681a      	ldr	r2, [r3, #0]
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d807      	bhi.n	8006a06 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80069f6:	4b0d      	ldr	r3, [pc, #52]	; (8006a2c <tcp_kill_timewait+0x5c>)
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	60fb      	str	r3, [r7, #12]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e9      	bne.n	80069e6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006a18:	68b8      	ldr	r0, [r7, #8]
 8006a1a:	f7ff f9df 	bl	8005ddc <tcp_abort>
  }
}
 8006a1e:	bf00      	nop
 8006a20:	3710      	adds	r7, #16
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20006d60 	.word	0x20006d60
 8006a2c:	20006d54 	.word	0x20006d54

08006a30 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b082      	sub	sp, #8
 8006a34:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8006a36:	4b10      	ldr	r3, [pc, #64]	; (8006a78 <tcp_handle_closepend+0x48>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006a3c:	e014      	b.n	8006a68 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	8b5b      	ldrh	r3, [r3, #26]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d009      	beq.n	8006a64 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	8b5b      	ldrh	r3, [r3, #26]
 8006a54:	f023 0308 	bic.w	r3, r3, #8
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff f86c 	bl	8005b3c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d1e7      	bne.n	8006a3e <tcp_handle_closepend+0xe>
  }
}
 8006a6e:	bf00      	nop
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	20006d50 	.word	0x20006d50

08006a7c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	4603      	mov	r3, r0
 8006a84:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a86:	2001      	movs	r0, #1
 8006a88:	f7fd fbf4 	bl	8004274 <memp_malloc>
 8006a8c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d126      	bne.n	8006ae2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8006a94:	f7ff ffcc 	bl	8006a30 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8006a98:	f7ff ff9a 	bl	80069d0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	f7fd fbe9 	bl	8004274 <memp_malloc>
 8006aa2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d11b      	bne.n	8006ae2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8006aaa:	2009      	movs	r0, #9
 8006aac:	f7ff ff46 	bl	800693c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ab0:	2001      	movs	r0, #1
 8006ab2:	f7fd fbdf 	bl	8004274 <memp_malloc>
 8006ab6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d111      	bne.n	8006ae2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8006abe:	2008      	movs	r0, #8
 8006ac0:	f7ff ff3c 	bl	800693c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ac4:	2001      	movs	r0, #1
 8006ac6:	f7fd fbd5 	bl	8004274 <memp_malloc>
 8006aca:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d107      	bne.n	8006ae2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8006ad2:	79fb      	ldrb	r3, [r7, #7]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fee3 	bl	80068a0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8006ada:	2001      	movs	r0, #1
 8006adc:	f7fd fbca 	bl	8004274 <memp_malloc>
 8006ae0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d03f      	beq.n	8006b68 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8006ae8:	229c      	movs	r2, #156	; 0x9c
 8006aea:	2100      	movs	r1, #0
 8006aec:	68f8      	ldr	r0, [r7, #12]
 8006aee:	f009 f849 	bl	800fb84 <memset>
    pcb->prio = prio;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	79fa      	ldrb	r2, [r7, #7]
 8006af6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006afe:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8006b08:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	22ff      	movs	r2, #255	; 0xff
 8006b16:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f44f 7206 	mov.w	r2, #536	; 0x218
 8006b1e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2206      	movs	r2, #6
 8006b24:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2206      	movs	r2, #6
 8006b2c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b34:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	; (8006b74 <tcp_alloc+0xf8>)
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8006b46:	4b0c      	ldr	r3, [pc, #48]	; (8006b78 <tcp_alloc+0xfc>)
 8006b48:	781a      	ldrb	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8006b54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	4a08      	ldr	r2, [pc, #32]	; (8006b7c <tcp_alloc+0x100>)
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	4a07      	ldr	r2, [pc, #28]	; (8006b80 <tcp_alloc+0x104>)
 8006b64:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8006b68:	68fb      	ldr	r3, [r7, #12]
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	20006d54 	.word	0x20006d54
 8006b78:	2000055a 	.word	0x2000055a
 8006b7c:	08006835 	.word	0x08006835
 8006b80:	006ddd00 	.word	0x006ddd00

08006b84 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d107      	bne.n	8006ba2 <tcp_pcb_purge+0x1e>
 8006b92:	4b21      	ldr	r3, [pc, #132]	; (8006c18 <tcp_pcb_purge+0x94>)
 8006b94:	f640 0251 	movw	r2, #2129	; 0x851
 8006b98:	4920      	ldr	r1, [pc, #128]	; (8006c1c <tcp_pcb_purge+0x98>)
 8006b9a:	4821      	ldr	r0, [pc, #132]	; (8006c20 <tcp_pcb_purge+0x9c>)
 8006b9c:	f008 fffa 	bl	800fb94 <iprintf>
 8006ba0:	e037      	b.n	8006c12 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	7d1b      	ldrb	r3, [r3, #20]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d033      	beq.n	8006c12 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8006bae:	2b0a      	cmp	r3, #10
 8006bb0:	d02f      	beq.n	8006c12 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d02b      	beq.n	8006c12 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d007      	beq.n	8006bd2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fa1e 	bl	8005008 <pbuf_free>
      pcb->refused_data = NULL;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d002      	beq.n	8006be0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f986 	bl	8006eec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006be6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7ff fdc9 	bl	8006784 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7ff fdc4 	bl	8006784 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	66da      	str	r2, [r3, #108]	; 0x6c
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	08011564 	.word	0x08011564
 8006c1c:	08011bb0 	.word	0x08011bb0
 8006c20:	080115a8 	.word	0x080115a8

08006c24 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b084      	sub	sp, #16
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
 8006c2c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d106      	bne.n	8006c42 <tcp_pcb_remove+0x1e>
 8006c34:	4b3e      	ldr	r3, [pc, #248]	; (8006d30 <tcp_pcb_remove+0x10c>)
 8006c36:	f640 0283 	movw	r2, #2179	; 0x883
 8006c3a:	493e      	ldr	r1, [pc, #248]	; (8006d34 <tcp_pcb_remove+0x110>)
 8006c3c:	483e      	ldr	r0, [pc, #248]	; (8006d38 <tcp_pcb_remove+0x114>)
 8006c3e:	f008 ffa9 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <tcp_pcb_remove+0x32>
 8006c48:	4b39      	ldr	r3, [pc, #228]	; (8006d30 <tcp_pcb_remove+0x10c>)
 8006c4a:	f640 0284 	movw	r2, #2180	; 0x884
 8006c4e:	493b      	ldr	r1, [pc, #236]	; (8006d3c <tcp_pcb_remove+0x118>)
 8006c50:	4839      	ldr	r0, [pc, #228]	; (8006d38 <tcp_pcb_remove+0x114>)
 8006c52:	f008 ff9f 	bl	800fb94 <iprintf>

  TCP_RMV(pcblist, pcb);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d105      	bne.n	8006c6c <tcp_pcb_remove+0x48>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68da      	ldr	r2, [r3, #12]
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	601a      	str	r2, [r3, #0]
 8006c6a:	e013      	b.n	8006c94 <tcp_pcb_remove+0x70>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	60fb      	str	r3, [r7, #12]
 8006c72:	e00c      	b.n	8006c8e <tcp_pcb_remove+0x6a>
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	683a      	ldr	r2, [r7, #0]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d104      	bne.n	8006c88 <tcp_pcb_remove+0x64>
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68da      	ldr	r2, [r3, #12]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	60da      	str	r2, [r3, #12]
 8006c86:	e005      	b.n	8006c94 <tcp_pcb_remove+0x70>
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	60fb      	str	r3, [r7, #12]
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d1ef      	bne.n	8006c74 <tcp_pcb_remove+0x50>
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2200      	movs	r2, #0
 8006c98:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8006c9a:	6838      	ldr	r0, [r7, #0]
 8006c9c:	f7ff ff72 	bl	8006b84 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	7d1b      	ldrb	r3, [r3, #20]
 8006ca4:	2b0a      	cmp	r3, #10
 8006ca6:	d013      	beq.n	8006cd0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d00f      	beq.n	8006cd0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	8b5b      	ldrh	r3, [r3, #26]
 8006cb4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d009      	beq.n	8006cd0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	8b5b      	ldrh	r3, [r3, #26]
 8006cc0:	f043 0302 	orr.w	r3, r3, #2
 8006cc4:	b29a      	uxth	r2, r3
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8006cca:	6838      	ldr	r0, [r7, #0]
 8006ccc:	f002 ff68 	bl	8009ba0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	7d1b      	ldrb	r3, [r3, #20]
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d020      	beq.n	8006d1a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d006      	beq.n	8006cee <tcp_pcb_remove+0xca>
 8006ce0:	4b13      	ldr	r3, [pc, #76]	; (8006d30 <tcp_pcb_remove+0x10c>)
 8006ce2:	f640 0293 	movw	r2, #2195	; 0x893
 8006ce6:	4916      	ldr	r1, [pc, #88]	; (8006d40 <tcp_pcb_remove+0x11c>)
 8006ce8:	4813      	ldr	r0, [pc, #76]	; (8006d38 <tcp_pcb_remove+0x114>)
 8006cea:	f008 ff53 	bl	800fb94 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d006      	beq.n	8006d04 <tcp_pcb_remove+0xe0>
 8006cf6:	4b0e      	ldr	r3, [pc, #56]	; (8006d30 <tcp_pcb_remove+0x10c>)
 8006cf8:	f640 0294 	movw	r2, #2196	; 0x894
 8006cfc:	4911      	ldr	r1, [pc, #68]	; (8006d44 <tcp_pcb_remove+0x120>)
 8006cfe:	480e      	ldr	r0, [pc, #56]	; (8006d38 <tcp_pcb_remove+0x114>)
 8006d00:	f008 ff48 	bl	800fb94 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d006      	beq.n	8006d1a <tcp_pcb_remove+0xf6>
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <tcp_pcb_remove+0x10c>)
 8006d0e:	f640 0296 	movw	r2, #2198	; 0x896
 8006d12:	490d      	ldr	r1, [pc, #52]	; (8006d48 <tcp_pcb_remove+0x124>)
 8006d14:	4808      	ldr	r0, [pc, #32]	; (8006d38 <tcp_pcb_remove+0x114>)
 8006d16:	f008 ff3d 	bl	800fb94 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8006d26:	bf00      	nop
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	08011564 	.word	0x08011564
 8006d34:	08011bcc 	.word	0x08011bcc
 8006d38:	080115a8 	.word	0x080115a8
 8006d3c:	08011be8 	.word	0x08011be8
 8006d40:	08011c08 	.word	0x08011c08
 8006d44:	08011c20 	.word	0x08011c20
 8006d48:	08011c3c 	.word	0x08011c3c

08006d4c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d106      	bne.n	8006d68 <tcp_next_iss+0x1c>
 8006d5a:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <tcp_next_iss+0x38>)
 8006d5c:	f640 02af 	movw	r2, #2223	; 0x8af
 8006d60:	4909      	ldr	r1, [pc, #36]	; (8006d88 <tcp_next_iss+0x3c>)
 8006d62:	480a      	ldr	r0, [pc, #40]	; (8006d8c <tcp_next_iss+0x40>)
 8006d64:	f008 ff16 	bl	800fb94 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8006d68:	4b09      	ldr	r3, [pc, #36]	; (8006d90 <tcp_next_iss+0x44>)
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	4b09      	ldr	r3, [pc, #36]	; (8006d94 <tcp_next_iss+0x48>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4413      	add	r3, r2
 8006d72:	4a07      	ldr	r2, [pc, #28]	; (8006d90 <tcp_next_iss+0x44>)
 8006d74:	6013      	str	r3, [r2, #0]
  return iss;
 8006d76:	4b06      	ldr	r3, [pc, #24]	; (8006d90 <tcp_next_iss+0x44>)
 8006d78:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3708      	adds	r7, #8
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	08011564 	.word	0x08011564
 8006d88:	08011c54 	.word	0x08011c54
 8006d8c:	080115a8 	.word	0x080115a8
 8006d90:	2000000c 	.word	0x2000000c
 8006d94:	20006d54 	.word	0x20006d54

08006d98 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b086      	sub	sp, #24
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	4603      	mov	r3, r0
 8006da0:	60b9      	str	r1, [r7, #8]
 8006da2:	607a      	str	r2, [r7, #4]
 8006da4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d106      	bne.n	8006dba <tcp_eff_send_mss_netif+0x22>
 8006dac:	4b14      	ldr	r3, [pc, #80]	; (8006e00 <tcp_eff_send_mss_netif+0x68>)
 8006dae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8006db2:	4914      	ldr	r1, [pc, #80]	; (8006e04 <tcp_eff_send_mss_netif+0x6c>)
 8006db4:	4814      	ldr	r0, [pc, #80]	; (8006e08 <tcp_eff_send_mss_netif+0x70>)
 8006db6:	f008 feed 	bl	800fb94 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8006dc0:	89fb      	ldrh	r3, [r7, #14]
 8006dc2:	e019      	b.n	8006df8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dc8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8006dca:	8afb      	ldrh	r3, [r7, #22]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d012      	beq.n	8006df6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8006dd0:	2328      	movs	r3, #40	; 0x28
 8006dd2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8006dd4:	8afa      	ldrh	r2, [r7, #22]
 8006dd6:	8abb      	ldrh	r3, [r7, #20]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d904      	bls.n	8006de6 <tcp_eff_send_mss_netif+0x4e>
 8006ddc:	8afa      	ldrh	r2, [r7, #22]
 8006dde:	8abb      	ldrh	r3, [r7, #20]
 8006de0:	1ad3      	subs	r3, r2, r3
 8006de2:	b29b      	uxth	r3, r3
 8006de4:	e000      	b.n	8006de8 <tcp_eff_send_mss_netif+0x50>
 8006de6:	2300      	movs	r3, #0
 8006de8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8006dea:	8a7a      	ldrh	r2, [r7, #18]
 8006dec:	89fb      	ldrh	r3, [r7, #14]
 8006dee:	4293      	cmp	r3, r2
 8006df0:	bf28      	it	cs
 8006df2:	4613      	movcs	r3, r2
 8006df4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8006df6:	89fb      	ldrh	r3, [r7, #14]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}
 8006e00:	08011564 	.word	0x08011564
 8006e04:	08011c70 	.word	0x08011c70
 8006e08:	080115a8 	.word	0x080115a8

08006e0c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d119      	bne.n	8006e54 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8006e20:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8006e22:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8006e26:	4910      	ldr	r1, [pc, #64]	; (8006e68 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8006e28:	4810      	ldr	r0, [pc, #64]	; (8006e6c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8006e2a:	f008 feb3 	bl	800fb94 <iprintf>

  while (pcb != NULL) {
 8006e2e:	e011      	b.n	8006e54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d108      	bne.n	8006e4e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7fe ffca 	bl	8005ddc <tcp_abort>
      pcb = next;
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	60fb      	str	r3, [r7, #12]
 8006e4c:	e002      	b.n	8006e54 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1ea      	bne.n	8006e30 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8006e5a:	bf00      	nop
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	08011564 	.word	0x08011564
 8006e68:	08011c98 	.word	0x08011c98
 8006e6c:	080115a8 	.word	0x080115a8

08006e70 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d02a      	beq.n	8006ed6 <tcp_netif_ip_addr_changed+0x66>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d026      	beq.n	8006ed6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8006e88:	4b15      	ldr	r3, [pc, #84]	; (8006ee0 <tcp_netif_ip_addr_changed+0x70>)
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff ffbc 	bl	8006e0c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8006e94:	4b13      	ldr	r3, [pc, #76]	; (8006ee4 <tcp_netif_ip_addr_changed+0x74>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff ffb6 	bl	8006e0c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d017      	beq.n	8006ed6 <tcp_netif_ip_addr_changed+0x66>
 8006ea6:	683b      	ldr	r3, [r7, #0]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d013      	beq.n	8006ed6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <tcp_netif_ip_addr_changed+0x78>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	60fb      	str	r3, [r7, #12]
 8006eb4:	e00c      	b.n	8006ed0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681a      	ldr	r2, [r3, #0]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	429a      	cmp	r2, r3
 8006ec0:	d103      	bne.n	8006eca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1ef      	bne.n	8006eb6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20006d50 	.word	0x20006d50
 8006ee4:	20006d5c 	.word	0x20006d5c
 8006ee8:	20006d58 	.word	0x20006d58

08006eec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7ff fc3f 	bl	8006784 <tcp_segs_free>
    pcb->ooseq = NULL;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8006f0c:	bf00      	nop
 8006f0e:	3708      	adds	r7, #8
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8006f14:	b590      	push	{r4, r7, lr}
 8006f16:	b08d      	sub	sp, #52	; 0x34
 8006f18:	af04      	add	r7, sp, #16
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d105      	bne.n	8006f30 <tcp_input+0x1c>
 8006f24:	4b9b      	ldr	r3, [pc, #620]	; (8007194 <tcp_input+0x280>)
 8006f26:	2283      	movs	r2, #131	; 0x83
 8006f28:	499b      	ldr	r1, [pc, #620]	; (8007198 <tcp_input+0x284>)
 8006f2a:	489c      	ldr	r0, [pc, #624]	; (800719c <tcp_input+0x288>)
 8006f2c:	f008 fe32 	bl	800fb94 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	4a9a      	ldr	r2, [pc, #616]	; (80071a0 <tcp_input+0x28c>)
 8006f36:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	895b      	ldrh	r3, [r3, #10]
 8006f3c:	2b13      	cmp	r3, #19
 8006f3e:	f240 83c4 	bls.w	80076ca <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006f42:	4b98      	ldr	r3, [pc, #608]	; (80071a4 <tcp_input+0x290>)
 8006f44:	695a      	ldr	r2, [r3, #20]
 8006f46:	4b97      	ldr	r3, [pc, #604]	; (80071a4 <tcp_input+0x290>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	4610      	mov	r0, r2
 8006f4e:	f007 fe8f 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	f040 83ba 	bne.w	80076ce <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8006f5a:	4b92      	ldr	r3, [pc, #584]	; (80071a4 <tcp_input+0x290>)
 8006f5c:	695b      	ldr	r3, [r3, #20]
 8006f5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8006f62:	2be0      	cmp	r3, #224	; 0xe0
 8006f64:	f000 83b3 	beq.w	80076ce <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8006f68:	4b8d      	ldr	r3, [pc, #564]	; (80071a0 <tcp_input+0x28c>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	899b      	ldrh	r3, [r3, #12]
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fc fa39 	bl	80033e8 <lwip_htons>
 8006f76:	4603      	mov	r3, r0
 8006f78:	0b1b      	lsrs	r3, r3, #12
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8006f82:	7cbb      	ldrb	r3, [r7, #18]
 8006f84:	2b13      	cmp	r3, #19
 8006f86:	f240 83a2 	bls.w	80076ce <tcp_input+0x7ba>
 8006f8a:	7cbb      	ldrb	r3, [r7, #18]
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	891b      	ldrh	r3, [r3, #8]
 8006f92:	429a      	cmp	r2, r3
 8006f94:	f200 839b 	bhi.w	80076ce <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8006f98:	7cbb      	ldrb	r3, [r7, #18]
 8006f9a:	b29b      	uxth	r3, r3
 8006f9c:	3b14      	subs	r3, #20
 8006f9e:	b29a      	uxth	r2, r3
 8006fa0:	4b81      	ldr	r3, [pc, #516]	; (80071a8 <tcp_input+0x294>)
 8006fa2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8006fa4:	4b81      	ldr	r3, [pc, #516]	; (80071ac <tcp_input+0x298>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	895a      	ldrh	r2, [r3, #10]
 8006fae:	7cbb      	ldrb	r3, [r7, #18]
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	d309      	bcc.n	8006fca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8006fb6:	4b7c      	ldr	r3, [pc, #496]	; (80071a8 <tcp_input+0x294>)
 8006fb8:	881a      	ldrh	r2, [r3, #0]
 8006fba:	4b7d      	ldr	r3, [pc, #500]	; (80071b0 <tcp_input+0x29c>)
 8006fbc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8006fbe:	7cbb      	ldrb	r3, [r7, #18]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7fd ff9a 	bl	8004efc <pbuf_remove_header>
 8006fc8:	e04e      	b.n	8007068 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d105      	bne.n	8006fde <tcp_input+0xca>
 8006fd2:	4b70      	ldr	r3, [pc, #448]	; (8007194 <tcp_input+0x280>)
 8006fd4:	22c2      	movs	r2, #194	; 0xc2
 8006fd6:	4977      	ldr	r1, [pc, #476]	; (80071b4 <tcp_input+0x2a0>)
 8006fd8:	4870      	ldr	r0, [pc, #448]	; (800719c <tcp_input+0x288>)
 8006fda:	f008 fddb 	bl	800fb94 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8006fde:	2114      	movs	r1, #20
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f7fd ff8b 	bl	8004efc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	895a      	ldrh	r2, [r3, #10]
 8006fea:	4b71      	ldr	r3, [pc, #452]	; (80071b0 <tcp_input+0x29c>)
 8006fec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8006fee:	4b6e      	ldr	r3, [pc, #440]	; (80071a8 <tcp_input+0x294>)
 8006ff0:	881a      	ldrh	r2, [r3, #0]
 8006ff2:	4b6f      	ldr	r3, [pc, #444]	; (80071b0 <tcp_input+0x29c>)
 8006ff4:	881b      	ldrh	r3, [r3, #0]
 8006ff6:	1ad3      	subs	r3, r2, r3
 8006ff8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8006ffa:	4b6d      	ldr	r3, [pc, #436]	; (80071b0 <tcp_input+0x29c>)
 8006ffc:	881b      	ldrh	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fd ff7b 	bl	8004efc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	895b      	ldrh	r3, [r3, #10]
 800700c:	8a3a      	ldrh	r2, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	f200 835f 	bhi.w	80076d2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4a64      	ldr	r2, [pc, #400]	; (80071ac <tcp_input+0x298>)
 800701c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	8a3a      	ldrh	r2, [r7, #16]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f7fd ff68 	bl	8004efc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	891a      	ldrh	r2, [r3, #8]
 8007030:	8a3b      	ldrh	r3, [r7, #16]
 8007032:	1ad3      	subs	r3, r2, r3
 8007034:	b29a      	uxth	r2, r3
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	895b      	ldrh	r3, [r3, #10]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d005      	beq.n	800704e <tcp_input+0x13a>
 8007042:	4b54      	ldr	r3, [pc, #336]	; (8007194 <tcp_input+0x280>)
 8007044:	22df      	movs	r2, #223	; 0xdf
 8007046:	495c      	ldr	r1, [pc, #368]	; (80071b8 <tcp_input+0x2a4>)
 8007048:	4854      	ldr	r0, [pc, #336]	; (800719c <tcp_input+0x288>)
 800704a:	f008 fda3 	bl	800fb94 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	891a      	ldrh	r2, [r3, #8]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	891b      	ldrh	r3, [r3, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d005      	beq.n	8007068 <tcp_input+0x154>
 800705c:	4b4d      	ldr	r3, [pc, #308]	; (8007194 <tcp_input+0x280>)
 800705e:	22e0      	movs	r2, #224	; 0xe0
 8007060:	4956      	ldr	r1, [pc, #344]	; (80071bc <tcp_input+0x2a8>)
 8007062:	484e      	ldr	r0, [pc, #312]	; (800719c <tcp_input+0x288>)
 8007064:	f008 fd96 	bl	800fb94 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007068:	4b4d      	ldr	r3, [pc, #308]	; (80071a0 <tcp_input+0x28c>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	b29a      	uxth	r2, r3
 8007070:	4b4b      	ldr	r3, [pc, #300]	; (80071a0 <tcp_input+0x28c>)
 8007072:	681c      	ldr	r4, [r3, #0]
 8007074:	4610      	mov	r0, r2
 8007076:	f7fc f9b7 	bl	80033e8 <lwip_htons>
 800707a:	4603      	mov	r3, r0
 800707c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800707e:	4b48      	ldr	r3, [pc, #288]	; (80071a0 <tcp_input+0x28c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	885b      	ldrh	r3, [r3, #2]
 8007084:	b29a      	uxth	r2, r3
 8007086:	4b46      	ldr	r3, [pc, #280]	; (80071a0 <tcp_input+0x28c>)
 8007088:	681c      	ldr	r4, [r3, #0]
 800708a:	4610      	mov	r0, r2
 800708c:	f7fc f9ac 	bl	80033e8 <lwip_htons>
 8007090:	4603      	mov	r3, r0
 8007092:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8007094:	4b42      	ldr	r3, [pc, #264]	; (80071a0 <tcp_input+0x28c>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685a      	ldr	r2, [r3, #4]
 800709a:	4b41      	ldr	r3, [pc, #260]	; (80071a0 <tcp_input+0x28c>)
 800709c:	681c      	ldr	r4, [r3, #0]
 800709e:	4610      	mov	r0, r2
 80070a0:	f7fc f9b7 	bl	8003412 <lwip_htonl>
 80070a4:	4603      	mov	r3, r0
 80070a6:	6063      	str	r3, [r4, #4]
 80070a8:	6863      	ldr	r3, [r4, #4]
 80070aa:	4a45      	ldr	r2, [pc, #276]	; (80071c0 <tcp_input+0x2ac>)
 80070ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80070ae:	4b3c      	ldr	r3, [pc, #240]	; (80071a0 <tcp_input+0x28c>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	4b3a      	ldr	r3, [pc, #232]	; (80071a0 <tcp_input+0x28c>)
 80070b6:	681c      	ldr	r4, [r3, #0]
 80070b8:	4610      	mov	r0, r2
 80070ba:	f7fc f9aa 	bl	8003412 <lwip_htonl>
 80070be:	4603      	mov	r3, r0
 80070c0:	60a3      	str	r3, [r4, #8]
 80070c2:	68a3      	ldr	r3, [r4, #8]
 80070c4:	4a3f      	ldr	r2, [pc, #252]	; (80071c4 <tcp_input+0x2b0>)
 80070c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80070c8:	4b35      	ldr	r3, [pc, #212]	; (80071a0 <tcp_input+0x28c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	89db      	ldrh	r3, [r3, #14]
 80070ce:	b29a      	uxth	r2, r3
 80070d0:	4b33      	ldr	r3, [pc, #204]	; (80071a0 <tcp_input+0x28c>)
 80070d2:	681c      	ldr	r4, [r3, #0]
 80070d4:	4610      	mov	r0, r2
 80070d6:	f7fc f987 	bl	80033e8 <lwip_htons>
 80070da:	4603      	mov	r3, r0
 80070dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80070de:	4b30      	ldr	r3, [pc, #192]	; (80071a0 <tcp_input+0x28c>)
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	899b      	ldrh	r3, [r3, #12]
 80070e4:	b29b      	uxth	r3, r3
 80070e6:	4618      	mov	r0, r3
 80070e8:	f7fc f97e 	bl	80033e8 <lwip_htons>
 80070ec:	4603      	mov	r3, r0
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	4b34      	ldr	r3, [pc, #208]	; (80071c8 <tcp_input+0x2b4>)
 80070f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	891a      	ldrh	r2, [r3, #8]
 80070fe:	4b33      	ldr	r3, [pc, #204]	; (80071cc <tcp_input+0x2b8>)
 8007100:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007102:	4b31      	ldr	r3, [pc, #196]	; (80071c8 <tcp_input+0x2b4>)
 8007104:	781b      	ldrb	r3, [r3, #0]
 8007106:	f003 0303 	and.w	r3, r3, #3
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00c      	beq.n	8007128 <tcp_input+0x214>
    tcplen++;
 800710e:	4b2f      	ldr	r3, [pc, #188]	; (80071cc <tcp_input+0x2b8>)
 8007110:	881b      	ldrh	r3, [r3, #0]
 8007112:	3301      	adds	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	4b2d      	ldr	r3, [pc, #180]	; (80071cc <tcp_input+0x2b8>)
 8007118:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	891a      	ldrh	r2, [r3, #8]
 800711e:	4b2b      	ldr	r3, [pc, #172]	; (80071cc <tcp_input+0x2b8>)
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	f200 82d7 	bhi.w	80076d6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007128:	2300      	movs	r3, #0
 800712a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800712c:	4b28      	ldr	r3, [pc, #160]	; (80071d0 <tcp_input+0x2bc>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	61fb      	str	r3, [r7, #28]
 8007132:	e09d      	b.n	8007270 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	7d1b      	ldrb	r3, [r3, #20]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d105      	bne.n	8007148 <tcp_input+0x234>
 800713c:	4b15      	ldr	r3, [pc, #84]	; (8007194 <tcp_input+0x280>)
 800713e:	22fb      	movs	r2, #251	; 0xfb
 8007140:	4924      	ldr	r1, [pc, #144]	; (80071d4 <tcp_input+0x2c0>)
 8007142:	4816      	ldr	r0, [pc, #88]	; (800719c <tcp_input+0x288>)
 8007144:	f008 fd26 	bl	800fb94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	7d1b      	ldrb	r3, [r3, #20]
 800714c:	2b0a      	cmp	r3, #10
 800714e:	d105      	bne.n	800715c <tcp_input+0x248>
 8007150:	4b10      	ldr	r3, [pc, #64]	; (8007194 <tcp_input+0x280>)
 8007152:	22fc      	movs	r2, #252	; 0xfc
 8007154:	4920      	ldr	r1, [pc, #128]	; (80071d8 <tcp_input+0x2c4>)
 8007156:	4811      	ldr	r0, [pc, #68]	; (800719c <tcp_input+0x288>)
 8007158:	f008 fd1c 	bl	800fb94 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	7d1b      	ldrb	r3, [r3, #20]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d105      	bne.n	8007170 <tcp_input+0x25c>
 8007164:	4b0b      	ldr	r3, [pc, #44]	; (8007194 <tcp_input+0x280>)
 8007166:	22fd      	movs	r2, #253	; 0xfd
 8007168:	491c      	ldr	r1, [pc, #112]	; (80071dc <tcp_input+0x2c8>)
 800716a:	480c      	ldr	r0, [pc, #48]	; (800719c <tcp_input+0x288>)
 800716c:	f008 fd12 	bl	800fb94 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	7a1b      	ldrb	r3, [r3, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d033      	beq.n	80071e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	7a1a      	ldrb	r2, [r3, #8]
 800717c:	4b09      	ldr	r3, [pc, #36]	; (80071a4 <tcp_input+0x290>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007184:	3301      	adds	r3, #1
 8007186:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007188:	429a      	cmp	r2, r3
 800718a:	d029      	beq.n	80071e0 <tcp_input+0x2cc>
      prev = pcb;
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	61bb      	str	r3, [r7, #24]
      continue;
 8007190:	e06b      	b.n	800726a <tcp_input+0x356>
 8007192:	bf00      	nop
 8007194:	08011ccc 	.word	0x08011ccc
 8007198:	08011d00 	.word	0x08011d00
 800719c:	08011d18 	.word	0x08011d18
 80071a0:	2000056c 	.word	0x2000056c
 80071a4:	200037dc 	.word	0x200037dc
 80071a8:	20000570 	.word	0x20000570
 80071ac:	20000574 	.word	0x20000574
 80071b0:	20000572 	.word	0x20000572
 80071b4:	08011d40 	.word	0x08011d40
 80071b8:	08011d50 	.word	0x08011d50
 80071bc:	08011d5c 	.word	0x08011d5c
 80071c0:	2000057c 	.word	0x2000057c
 80071c4:	20000580 	.word	0x20000580
 80071c8:	20000588 	.word	0x20000588
 80071cc:	20000586 	.word	0x20000586
 80071d0:	20006d50 	.word	0x20006d50
 80071d4:	08011d7c 	.word	0x08011d7c
 80071d8:	08011da4 	.word	0x08011da4
 80071dc:	08011dd0 	.word	0x08011dd0
    }

    if (pcb->remote_port == tcphdr->src &&
 80071e0:	69fb      	ldr	r3, [r7, #28]
 80071e2:	8b1a      	ldrh	r2, [r3, #24]
 80071e4:	4b94      	ldr	r3, [pc, #592]	; (8007438 <tcp_input+0x524>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d13a      	bne.n	8007266 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	8ada      	ldrh	r2, [r3, #22]
 80071f4:	4b90      	ldr	r3, [pc, #576]	; (8007438 <tcp_input+0x524>)
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	885b      	ldrh	r3, [r3, #2]
 80071fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80071fc:	429a      	cmp	r2, r3
 80071fe:	d132      	bne.n	8007266 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	685a      	ldr	r2, [r3, #4]
 8007204:	4b8d      	ldr	r3, [pc, #564]	; (800743c <tcp_input+0x528>)
 8007206:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007208:	429a      	cmp	r2, r3
 800720a:	d12c      	bne.n	8007266 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	4b8a      	ldr	r3, [pc, #552]	; (800743c <tcp_input+0x528>)
 8007212:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007214:	429a      	cmp	r2, r3
 8007216:	d126      	bne.n	8007266 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007218:	69fb      	ldr	r3, [r7, #28]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	429a      	cmp	r2, r3
 8007220:	d106      	bne.n	8007230 <tcp_input+0x31c>
 8007222:	4b87      	ldr	r3, [pc, #540]	; (8007440 <tcp_input+0x52c>)
 8007224:	f240 120d 	movw	r2, #269	; 0x10d
 8007228:	4986      	ldr	r1, [pc, #536]	; (8007444 <tcp_input+0x530>)
 800722a:	4887      	ldr	r0, [pc, #540]	; (8007448 <tcp_input+0x534>)
 800722c:	f008 fcb2 	bl	800fb94 <iprintf>
      if (prev != NULL) {
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00a      	beq.n	800724c <tcp_input+0x338>
        prev->next = pcb->next;
 8007236:	69fb      	ldr	r3, [r7, #28]
 8007238:	68da      	ldr	r2, [r3, #12]
 800723a:	69bb      	ldr	r3, [r7, #24]
 800723c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800723e:	4b83      	ldr	r3, [pc, #524]	; (800744c <tcp_input+0x538>)
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007246:	4a81      	ldr	r2, [pc, #516]	; (800744c <tcp_input+0x538>)
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800724c:	69fb      	ldr	r3, [r7, #28]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	69fa      	ldr	r2, [r7, #28]
 8007252:	429a      	cmp	r2, r3
 8007254:	d111      	bne.n	800727a <tcp_input+0x366>
 8007256:	4b7a      	ldr	r3, [pc, #488]	; (8007440 <tcp_input+0x52c>)
 8007258:	f240 1215 	movw	r2, #277	; 0x115
 800725c:	497c      	ldr	r1, [pc, #496]	; (8007450 <tcp_input+0x53c>)
 800725e:	487a      	ldr	r0, [pc, #488]	; (8007448 <tcp_input+0x534>)
 8007260:	f008 fc98 	bl	800fb94 <iprintf>
      break;
 8007264:	e009      	b.n	800727a <tcp_input+0x366>
    }
    prev = pcb;
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	68db      	ldr	r3, [r3, #12]
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	2b00      	cmp	r3, #0
 8007274:	f47f af5e 	bne.w	8007134 <tcp_input+0x220>
 8007278:	e000      	b.n	800727c <tcp_input+0x368>
      break;
 800727a:	bf00      	nop
  }

  if (pcb == NULL) {
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	2b00      	cmp	r3, #0
 8007280:	f040 8095 	bne.w	80073ae <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007284:	4b73      	ldr	r3, [pc, #460]	; (8007454 <tcp_input+0x540>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	61fb      	str	r3, [r7, #28]
 800728a:	e03f      	b.n	800730c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	7d1b      	ldrb	r3, [r3, #20]
 8007290:	2b0a      	cmp	r3, #10
 8007292:	d006      	beq.n	80072a2 <tcp_input+0x38e>
 8007294:	4b6a      	ldr	r3, [pc, #424]	; (8007440 <tcp_input+0x52c>)
 8007296:	f240 121f 	movw	r2, #287	; 0x11f
 800729a:	496f      	ldr	r1, [pc, #444]	; (8007458 <tcp_input+0x544>)
 800729c:	486a      	ldr	r0, [pc, #424]	; (8007448 <tcp_input+0x534>)
 800729e:	f008 fc79 	bl	800fb94 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	7a1b      	ldrb	r3, [r3, #8]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d009      	beq.n	80072be <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	7a1a      	ldrb	r2, [r3, #8]
 80072ae:	4b63      	ldr	r3, [pc, #396]	; (800743c <tcp_input+0x528>)
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072b6:	3301      	adds	r3, #1
 80072b8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d122      	bne.n	8007304 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	8b1a      	ldrh	r2, [r3, #24]
 80072c2:	4b5d      	ldr	r3, [pc, #372]	; (8007438 <tcp_input+0x524>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d11b      	bne.n	8007306 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	8ada      	ldrh	r2, [r3, #22]
 80072d2:	4b59      	ldr	r3, [pc, #356]	; (8007438 <tcp_input+0x524>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	885b      	ldrh	r3, [r3, #2]
 80072d8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80072da:	429a      	cmp	r2, r3
 80072dc:	d113      	bne.n	8007306 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	685a      	ldr	r2, [r3, #4]
 80072e2:	4b56      	ldr	r3, [pc, #344]	; (800743c <tcp_input+0x528>)
 80072e4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d10d      	bne.n	8007306 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	681a      	ldr	r2, [r3, #0]
 80072ee:	4b53      	ldr	r3, [pc, #332]	; (800743c <tcp_input+0x528>)
 80072f0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d107      	bne.n	8007306 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80072f6:	69f8      	ldr	r0, [r7, #28]
 80072f8:	f000 fb52 	bl	80079a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f7fd fe83 	bl	8005008 <pbuf_free>
        return;
 8007302:	e1ee      	b.n	80076e2 <tcp_input+0x7ce>
        continue;
 8007304:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	61fb      	str	r3, [r7, #28]
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d1bc      	bne.n	800728c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007312:	2300      	movs	r3, #0
 8007314:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007316:	4b51      	ldr	r3, [pc, #324]	; (800745c <tcp_input+0x548>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	617b      	str	r3, [r7, #20]
 800731c:	e02a      	b.n	8007374 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	7a1b      	ldrb	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d00c      	beq.n	8007340 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	7a1a      	ldrb	r2, [r3, #8]
 800732a:	4b44      	ldr	r3, [pc, #272]	; (800743c <tcp_input+0x528>)
 800732c:	685b      	ldr	r3, [r3, #4]
 800732e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007332:	3301      	adds	r3, #1
 8007334:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007336:	429a      	cmp	r2, r3
 8007338:	d002      	beq.n	8007340 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	61bb      	str	r3, [r7, #24]
        continue;
 800733e:	e016      	b.n	800736e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	8ada      	ldrh	r2, [r3, #22]
 8007344:	4b3c      	ldr	r3, [pc, #240]	; (8007438 <tcp_input+0x524>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	885b      	ldrh	r3, [r3, #2]
 800734a:	b29b      	uxth	r3, r3
 800734c:	429a      	cmp	r2, r3
 800734e:	d10c      	bne.n	800736a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	4b39      	ldr	r3, [pc, #228]	; (800743c <tcp_input+0x528>)
 8007356:	695b      	ldr	r3, [r3, #20]
 8007358:	429a      	cmp	r2, r3
 800735a:	d00f      	beq.n	800737c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00d      	beq.n	800737e <tcp_input+0x46a>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	617b      	str	r3, [r7, #20]
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1d1      	bne.n	800731e <tcp_input+0x40a>
 800737a:	e000      	b.n	800737e <tcp_input+0x46a>
            break;
 800737c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d014      	beq.n	80073ae <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800738a:	697b      	ldr	r3, [r7, #20]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	69bb      	ldr	r3, [r7, #24]
 8007390:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007392:	4b32      	ldr	r3, [pc, #200]	; (800745c <tcp_input+0x548>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800739a:	4a30      	ldr	r2, [pc, #192]	; (800745c <tcp_input+0x548>)
 800739c:	697b      	ldr	r3, [r7, #20]
 800739e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80073a0:	6978      	ldr	r0, [r7, #20]
 80073a2:	f000 f9ff 	bl	80077a4 <tcp_listen_input>
      }
      pbuf_free(p);
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fd fe2e 	bl	8005008 <pbuf_free>
      return;
 80073ac:	e199      	b.n	80076e2 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	f000 8160 	beq.w	8007676 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80073b6:	4b2a      	ldr	r3, [pc, #168]	; (8007460 <tcp_input+0x54c>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	891a      	ldrh	r2, [r3, #8]
 80073c0:	4b27      	ldr	r3, [pc, #156]	; (8007460 <tcp_input+0x54c>)
 80073c2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80073c4:	4a26      	ldr	r2, [pc, #152]	; (8007460 <tcp_input+0x54c>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80073ca:	4b1b      	ldr	r3, [pc, #108]	; (8007438 <tcp_input+0x524>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a24      	ldr	r2, [pc, #144]	; (8007460 <tcp_input+0x54c>)
 80073d0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80073d2:	4b24      	ldr	r3, [pc, #144]	; (8007464 <tcp_input+0x550>)
 80073d4:	2200      	movs	r2, #0
 80073d6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80073d8:	4b23      	ldr	r3, [pc, #140]	; (8007468 <tcp_input+0x554>)
 80073da:	2200      	movs	r2, #0
 80073dc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80073de:	4b23      	ldr	r3, [pc, #140]	; (800746c <tcp_input+0x558>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80073e4:	4b22      	ldr	r3, [pc, #136]	; (8007470 <tcp_input+0x55c>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	f003 0308 	and.w	r3, r3, #8
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d006      	beq.n	80073fe <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	7b5b      	ldrb	r3, [r3, #13]
 80073f4:	f043 0301 	orr.w	r3, r3, #1
 80073f8:	b2da      	uxtb	r2, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007402:	2b00      	cmp	r3, #0
 8007404:	d038      	beq.n	8007478 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007406:	69f8      	ldr	r0, [r7, #28]
 8007408:	f7ff f940 	bl	800668c <tcp_process_refused_data>
 800740c:	4603      	mov	r3, r0
 800740e:	f113 0f0d 	cmn.w	r3, #13
 8007412:	d007      	beq.n	8007424 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007418:	2b00      	cmp	r3, #0
 800741a:	d02d      	beq.n	8007478 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800741c:	4b15      	ldr	r3, [pc, #84]	; (8007474 <tcp_input+0x560>)
 800741e:	881b      	ldrh	r3, [r3, #0]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d029      	beq.n	8007478 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007428:	2b00      	cmp	r3, #0
 800742a:	f040 8104 	bne.w	8007636 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800742e:	69f8      	ldr	r0, [r7, #28]
 8007430:	f003 f9cc 	bl	800a7cc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007434:	e0ff      	b.n	8007636 <tcp_input+0x722>
 8007436:	bf00      	nop
 8007438:	2000056c 	.word	0x2000056c
 800743c:	200037dc 	.word	0x200037dc
 8007440:	08011ccc 	.word	0x08011ccc
 8007444:	08011df8 	.word	0x08011df8
 8007448:	08011d18 	.word	0x08011d18
 800744c:	20006d50 	.word	0x20006d50
 8007450:	08011e24 	.word	0x08011e24
 8007454:	20006d60 	.word	0x20006d60
 8007458:	08011e50 	.word	0x08011e50
 800745c:	20006d58 	.word	0x20006d58
 8007460:	2000055c 	.word	0x2000055c
 8007464:	2000058c 	.word	0x2000058c
 8007468:	20000589 	.word	0x20000589
 800746c:	20000584 	.word	0x20000584
 8007470:	20000588 	.word	0x20000588
 8007474:	20000586 	.word	0x20000586
      }
    }
    tcp_input_pcb = pcb;
 8007478:	4a9b      	ldr	r2, [pc, #620]	; (80076e8 <tcp_input+0x7d4>)
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800747e:	69f8      	ldr	r0, [r7, #28]
 8007480:	f000 fb0a 	bl	8007a98 <tcp_process>
 8007484:	4603      	mov	r3, r0
 8007486:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007488:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800748c:	f113 0f0d 	cmn.w	r3, #13
 8007490:	f000 80d3 	beq.w	800763a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007494:	4b95      	ldr	r3, [pc, #596]	; (80076ec <tcp_input+0x7d8>)
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b00      	cmp	r3, #0
 800749e:	d015      	beq.n	80074cc <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d008      	beq.n	80074bc <tcp_input+0x5a8>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074b0:	69fa      	ldr	r2, [r7, #28]
 80074b2:	6912      	ldr	r2, [r2, #16]
 80074b4:	f06f 010d 	mvn.w	r1, #13
 80074b8:	4610      	mov	r0, r2
 80074ba:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80074bc:	69f9      	ldr	r1, [r7, #28]
 80074be:	488c      	ldr	r0, [pc, #560]	; (80076f0 <tcp_input+0x7dc>)
 80074c0:	f7ff fbb0 	bl	8006c24 <tcp_pcb_remove>
        tcp_free(pcb);
 80074c4:	69f8      	ldr	r0, [r7, #28]
 80074c6:	f7fe f9a9 	bl	800581c <tcp_free>
 80074ca:	e0c1      	b.n	8007650 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 80074cc:	2300      	movs	r3, #0
 80074ce:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80074d0:	4b88      	ldr	r3, [pc, #544]	; (80076f4 <tcp_input+0x7e0>)
 80074d2:	881b      	ldrh	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d01d      	beq.n	8007514 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80074d8:	4b86      	ldr	r3, [pc, #536]	; (80076f4 <tcp_input+0x7e0>)
 80074da:	881b      	ldrh	r3, [r3, #0]
 80074dc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d00a      	beq.n	80074fe <tcp_input+0x5ea>
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	6910      	ldr	r0, [r2, #16]
 80074f2:	89fa      	ldrh	r2, [r7, #14]
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	4798      	blx	r3
 80074f8:	4603      	mov	r3, r0
 80074fa:	74fb      	strb	r3, [r7, #19]
 80074fc:	e001      	b.n	8007502 <tcp_input+0x5ee>
 80074fe:	2300      	movs	r3, #0
 8007500:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007502:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007506:	f113 0f0d 	cmn.w	r3, #13
 800750a:	f000 8098 	beq.w	800763e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800750e:	4b79      	ldr	r3, [pc, #484]	; (80076f4 <tcp_input+0x7e0>)
 8007510:	2200      	movs	r2, #0
 8007512:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007514:	69f8      	ldr	r0, [r7, #28]
 8007516:	f000 f905 	bl	8007724 <tcp_input_delayed_close>
 800751a:	4603      	mov	r3, r0
 800751c:	2b00      	cmp	r3, #0
 800751e:	f040 8090 	bne.w	8007642 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007522:	4b75      	ldr	r3, [pc, #468]	; (80076f8 <tcp_input+0x7e4>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d041      	beq.n	80075ae <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800752a:	69fb      	ldr	r3, [r7, #28]
 800752c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752e:	2b00      	cmp	r3, #0
 8007530:	d006      	beq.n	8007540 <tcp_input+0x62c>
 8007532:	4b72      	ldr	r3, [pc, #456]	; (80076fc <tcp_input+0x7e8>)
 8007534:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007538:	4971      	ldr	r1, [pc, #452]	; (8007700 <tcp_input+0x7ec>)
 800753a:	4872      	ldr	r0, [pc, #456]	; (8007704 <tcp_input+0x7f0>)
 800753c:	f008 fb2a 	bl	800fb94 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	8b5b      	ldrh	r3, [r3, #26]
 8007544:	f003 0310 	and.w	r3, r3, #16
 8007548:	2b00      	cmp	r3, #0
 800754a:	d008      	beq.n	800755e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800754c:	4b6a      	ldr	r3, [pc, #424]	; (80076f8 <tcp_input+0x7e4>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4618      	mov	r0, r3
 8007552:	f7fd fd59 	bl	8005008 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007556:	69f8      	ldr	r0, [r7, #28]
 8007558:	f7fe fc40 	bl	8005ddc <tcp_abort>
            goto aborted;
 800755c:	e078      	b.n	8007650 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007564:	2b00      	cmp	r3, #0
 8007566:	d00c      	beq.n	8007582 <tcp_input+0x66e>
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800756e:	69fb      	ldr	r3, [r7, #28]
 8007570:	6918      	ldr	r0, [r3, #16]
 8007572:	4b61      	ldr	r3, [pc, #388]	; (80076f8 <tcp_input+0x7e4>)
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	2300      	movs	r3, #0
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	47a0      	blx	r4
 800757c:	4603      	mov	r3, r0
 800757e:	74fb      	strb	r3, [r7, #19]
 8007580:	e008      	b.n	8007594 <tcp_input+0x680>
 8007582:	4b5d      	ldr	r3, [pc, #372]	; (80076f8 <tcp_input+0x7e4>)
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	2000      	movs	r0, #0
 800758c:	f7ff f952 	bl	8006834 <tcp_recv_null>
 8007590:	4603      	mov	r3, r0
 8007592:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007594:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007598:	f113 0f0d 	cmn.w	r3, #13
 800759c:	d053      	beq.n	8007646 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800759e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d003      	beq.n	80075ae <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80075a6:	4b54      	ldr	r3, [pc, #336]	; (80076f8 <tcp_input+0x7e4>)
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	69fb      	ldr	r3, [r7, #28]
 80075ac:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80075ae:	4b4f      	ldr	r3, [pc, #316]	; (80076ec <tcp_input+0x7d8>)
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d030      	beq.n	800761c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075c6:	7b5a      	ldrb	r2, [r3, #13]
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075cc:	f042 0220 	orr.w	r2, r2, #32
 80075d0:	b2d2      	uxtb	r2, r2
 80075d2:	735a      	strb	r2, [r3, #13]
 80075d4:	e022      	b.n	800761c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075da:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80075de:	d005      	beq.n	80075ec <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e4:	3301      	adds	r3, #1
 80075e6:	b29a      	uxth	r2, r3
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d00b      	beq.n	800760e <tcp_input+0x6fa>
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	6918      	ldr	r0, [r3, #16]
 8007600:	2300      	movs	r3, #0
 8007602:	2200      	movs	r2, #0
 8007604:	69f9      	ldr	r1, [r7, #28]
 8007606:	47a0      	blx	r4
 8007608:	4603      	mov	r3, r0
 800760a:	74fb      	strb	r3, [r7, #19]
 800760c:	e001      	b.n	8007612 <tcp_input+0x6fe>
 800760e:	2300      	movs	r3, #0
 8007610:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007612:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007616:	f113 0f0d 	cmn.w	r3, #13
 800761a:	d016      	beq.n	800764a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800761c:	4b32      	ldr	r3, [pc, #200]	; (80076e8 <tcp_input+0x7d4>)
 800761e:	2200      	movs	r2, #0
 8007620:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007622:	69f8      	ldr	r0, [r7, #28]
 8007624:	f000 f87e 	bl	8007724 <tcp_input_delayed_close>
 8007628:	4603      	mov	r3, r0
 800762a:	2b00      	cmp	r3, #0
 800762c:	d10f      	bne.n	800764e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800762e:	69f8      	ldr	r0, [r7, #28]
 8007630:	f002 fab6 	bl	8009ba0 <tcp_output>
 8007634:	e00c      	b.n	8007650 <tcp_input+0x73c>
        goto aborted;
 8007636:	bf00      	nop
 8007638:	e00a      	b.n	8007650 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800763a:	bf00      	nop
 800763c:	e008      	b.n	8007650 <tcp_input+0x73c>
              goto aborted;
 800763e:	bf00      	nop
 8007640:	e006      	b.n	8007650 <tcp_input+0x73c>
          goto aborted;
 8007642:	bf00      	nop
 8007644:	e004      	b.n	8007650 <tcp_input+0x73c>
            goto aborted;
 8007646:	bf00      	nop
 8007648:	e002      	b.n	8007650 <tcp_input+0x73c>
              goto aborted;
 800764a:	bf00      	nop
 800764c:	e000      	b.n	8007650 <tcp_input+0x73c>
          goto aborted;
 800764e:	bf00      	nop
    tcp_input_pcb = NULL;
 8007650:	4b25      	ldr	r3, [pc, #148]	; (80076e8 <tcp_input+0x7d4>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007656:	4b28      	ldr	r3, [pc, #160]	; (80076f8 <tcp_input+0x7e4>)
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800765c:	4b2a      	ldr	r3, [pc, #168]	; (8007708 <tcp_input+0x7f4>)
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d03d      	beq.n	80076e0 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8007664:	4b28      	ldr	r3, [pc, #160]	; (8007708 <tcp_input+0x7f4>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	f7fd fccd 	bl	8005008 <pbuf_free>
      inseg.p = NULL;
 800766e:	4b26      	ldr	r3, [pc, #152]	; (8007708 <tcp_input+0x7f4>)
 8007670:	2200      	movs	r2, #0
 8007672:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007674:	e034      	b.n	80076e0 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007676:	4b25      	ldr	r3, [pc, #148]	; (800770c <tcp_input+0x7f8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	899b      	ldrh	r3, [r3, #12]
 800767c:	b29b      	uxth	r3, r3
 800767e:	4618      	mov	r0, r3
 8007680:	f7fb feb2 	bl	80033e8 <lwip_htons>
 8007684:	4603      	mov	r3, r0
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 0304 	and.w	r3, r3, #4
 800768c:	2b00      	cmp	r3, #0
 800768e:	d118      	bne.n	80076c2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007690:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <tcp_input+0x7fc>)
 8007692:	6819      	ldr	r1, [r3, #0]
 8007694:	4b1f      	ldr	r3, [pc, #124]	; (8007714 <tcp_input+0x800>)
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <tcp_input+0x804>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a0:	4b1a      	ldr	r3, [pc, #104]	; (800770c <tcp_input+0x7f8>)
 80076a2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076a4:	885b      	ldrh	r3, [r3, #2]
 80076a6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80076a8:	4a18      	ldr	r2, [pc, #96]	; (800770c <tcp_input+0x7f8>)
 80076aa:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80076ac:	8812      	ldrh	r2, [r2, #0]
 80076ae:	b292      	uxth	r2, r2
 80076b0:	9202      	str	r2, [sp, #8]
 80076b2:	9301      	str	r3, [sp, #4]
 80076b4:	4b19      	ldr	r3, [pc, #100]	; (800771c <tcp_input+0x808>)
 80076b6:	9300      	str	r3, [sp, #0]
 80076b8:	4b19      	ldr	r3, [pc, #100]	; (8007720 <tcp_input+0x80c>)
 80076ba:	4602      	mov	r2, r0
 80076bc:	2000      	movs	r0, #0
 80076be:	f003 f833 	bl	800a728 <tcp_rst>
    pbuf_free(p);
 80076c2:	6878      	ldr	r0, [r7, #4]
 80076c4:	f7fd fca0 	bl	8005008 <pbuf_free>
  return;
 80076c8:	e00a      	b.n	80076e0 <tcp_input+0x7cc>
    goto dropped;
 80076ca:	bf00      	nop
 80076cc:	e004      	b.n	80076d8 <tcp_input+0x7c4>
dropped:
 80076ce:	bf00      	nop
 80076d0:	e002      	b.n	80076d8 <tcp_input+0x7c4>
      goto dropped;
 80076d2:	bf00      	nop
 80076d4:	e000      	b.n	80076d8 <tcp_input+0x7c4>
      goto dropped;
 80076d6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f7fd fc95 	bl	8005008 <pbuf_free>
 80076de:	e000      	b.n	80076e2 <tcp_input+0x7ce>
  return;
 80076e0:	bf00      	nop
}
 80076e2:	3724      	adds	r7, #36	; 0x24
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd90      	pop	{r4, r7, pc}
 80076e8:	20006d64 	.word	0x20006d64
 80076ec:	20000589 	.word	0x20000589
 80076f0:	20006d50 	.word	0x20006d50
 80076f4:	20000584 	.word	0x20000584
 80076f8:	2000058c 	.word	0x2000058c
 80076fc:	08011ccc 	.word	0x08011ccc
 8007700:	08011e80 	.word	0x08011e80
 8007704:	08011d18 	.word	0x08011d18
 8007708:	2000055c 	.word	0x2000055c
 800770c:	2000056c 	.word	0x2000056c
 8007710:	20000580 	.word	0x20000580
 8007714:	20000586 	.word	0x20000586
 8007718:	2000057c 	.word	0x2000057c
 800771c:	200037ec 	.word	0x200037ec
 8007720:	200037f0 	.word	0x200037f0

08007724 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d106      	bne.n	8007740 <tcp_input_delayed_close+0x1c>
 8007732:	4b17      	ldr	r3, [pc, #92]	; (8007790 <tcp_input_delayed_close+0x6c>)
 8007734:	f240 225a 	movw	r2, #602	; 0x25a
 8007738:	4916      	ldr	r1, [pc, #88]	; (8007794 <tcp_input_delayed_close+0x70>)
 800773a:	4817      	ldr	r0, [pc, #92]	; (8007798 <tcp_input_delayed_close+0x74>)
 800773c:	f008 fa2a 	bl	800fb94 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007740:	4b16      	ldr	r3, [pc, #88]	; (800779c <tcp_input_delayed_close+0x78>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	f003 0310 	and.w	r3, r3, #16
 8007748:	2b00      	cmp	r3, #0
 800774a:	d01c      	beq.n	8007786 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8b5b      	ldrh	r3, [r3, #26]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10d      	bne.n	8007774 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	2b00      	cmp	r3, #0
 8007760:	d008      	beq.n	8007774 <tcp_input_delayed_close+0x50>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	6912      	ldr	r2, [r2, #16]
 800776c:	f06f 010e 	mvn.w	r1, #14
 8007770:	4610      	mov	r0, r2
 8007772:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007774:	6879      	ldr	r1, [r7, #4]
 8007776:	480a      	ldr	r0, [pc, #40]	; (80077a0 <tcp_input_delayed_close+0x7c>)
 8007778:	f7ff fa54 	bl	8006c24 <tcp_pcb_remove>
    tcp_free(pcb);
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fe f84d 	bl	800581c <tcp_free>
    return 1;
 8007782:	2301      	movs	r3, #1
 8007784:	e000      	b.n	8007788 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007786:	2300      	movs	r3, #0
}
 8007788:	4618      	mov	r0, r3
 800778a:	3708      	adds	r7, #8
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}
 8007790:	08011ccc 	.word	0x08011ccc
 8007794:	08011e9c 	.word	0x08011e9c
 8007798:	08011d18 	.word	0x08011d18
 800779c:	20000589 	.word	0x20000589
 80077a0:	20006d50 	.word	0x20006d50

080077a4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80077a4:	b590      	push	{r4, r7, lr}
 80077a6:	b08b      	sub	sp, #44	; 0x2c
 80077a8:	af04      	add	r7, sp, #16
 80077aa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80077ac:	4b6f      	ldr	r3, [pc, #444]	; (800796c <tcp_listen_input+0x1c8>)
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	f003 0304 	and.w	r3, r3, #4
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f040 80d3 	bne.w	8007960 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d106      	bne.n	80077ce <tcp_listen_input+0x2a>
 80077c0:	4b6b      	ldr	r3, [pc, #428]	; (8007970 <tcp_listen_input+0x1cc>)
 80077c2:	f240 2281 	movw	r2, #641	; 0x281
 80077c6:	496b      	ldr	r1, [pc, #428]	; (8007974 <tcp_listen_input+0x1d0>)
 80077c8:	486b      	ldr	r0, [pc, #428]	; (8007978 <tcp_listen_input+0x1d4>)
 80077ca:	f008 f9e3 	bl	800fb94 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80077ce:	4b67      	ldr	r3, [pc, #412]	; (800796c <tcp_listen_input+0x1c8>)
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	f003 0310 	and.w	r3, r3, #16
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d019      	beq.n	800780e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077da:	4b68      	ldr	r3, [pc, #416]	; (800797c <tcp_listen_input+0x1d8>)
 80077dc:	6819      	ldr	r1, [r3, #0]
 80077de:	4b68      	ldr	r3, [pc, #416]	; (8007980 <tcp_listen_input+0x1dc>)
 80077e0:	881b      	ldrh	r3, [r3, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	4b67      	ldr	r3, [pc, #412]	; (8007984 <tcp_listen_input+0x1e0>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077ea:	4b67      	ldr	r3, [pc, #412]	; (8007988 <tcp_listen_input+0x1e4>)
 80077ec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077ee:	885b      	ldrh	r3, [r3, #2]
 80077f0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80077f2:	4a65      	ldr	r2, [pc, #404]	; (8007988 <tcp_listen_input+0x1e4>)
 80077f4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80077f6:	8812      	ldrh	r2, [r2, #0]
 80077f8:	b292      	uxth	r2, r2
 80077fa:	9202      	str	r2, [sp, #8]
 80077fc:	9301      	str	r3, [sp, #4]
 80077fe:	4b63      	ldr	r3, [pc, #396]	; (800798c <tcp_listen_input+0x1e8>)
 8007800:	9300      	str	r3, [sp, #0]
 8007802:	4b63      	ldr	r3, [pc, #396]	; (8007990 <tcp_listen_input+0x1ec>)
 8007804:	4602      	mov	r2, r0
 8007806:	6878      	ldr	r0, [r7, #4]
 8007808:	f002 ff8e 	bl	800a728 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800780c:	e0aa      	b.n	8007964 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800780e:	4b57      	ldr	r3, [pc, #348]	; (800796c <tcp_listen_input+0x1c8>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 80a4 	beq.w	8007964 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7d5b      	ldrb	r3, [r3, #21]
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f92b 	bl	8006a7c <tcp_alloc>
 8007826:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d111      	bne.n	8007852 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	699b      	ldr	r3, [r3, #24]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d00a      	beq.n	800784c <tcp_listen_input+0xa8>
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	699b      	ldr	r3, [r3, #24]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6910      	ldr	r0, [r2, #16]
 800783e:	f04f 32ff 	mov.w	r2, #4294967295
 8007842:	2100      	movs	r1, #0
 8007844:	4798      	blx	r3
 8007846:	4603      	mov	r3, r0
 8007848:	73bb      	strb	r3, [r7, #14]
      return;
 800784a:	e08c      	b.n	8007966 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800784c:	23f0      	movs	r3, #240	; 0xf0
 800784e:	73bb      	strb	r3, [r7, #14]
      return;
 8007850:	e089      	b.n	8007966 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8007852:	4b50      	ldr	r3, [pc, #320]	; (8007994 <tcp_listen_input+0x1f0>)
 8007854:	695a      	ldr	r2, [r3, #20]
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800785a:	4b4e      	ldr	r3, [pc, #312]	; (8007994 <tcp_listen_input+0x1f0>)
 800785c:	691a      	ldr	r2, [r3, #16]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	8ada      	ldrh	r2, [r3, #22]
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800786a:	4b47      	ldr	r3, [pc, #284]	; (8007988 <tcp_listen_input+0x1e4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	b29a      	uxth	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	2203      	movs	r2, #3
 800787a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800787c:	4b41      	ldr	r3, [pc, #260]	; (8007984 <tcp_listen_input+0x1e0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	1c5a      	adds	r2, r3, #1
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800788e:	6978      	ldr	r0, [r7, #20]
 8007890:	f7ff fa5c 	bl	8006d4c <tcp_next_iss>
 8007894:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	693a      	ldr	r2, [r7, #16]
 800789a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	693a      	ldr	r2, [r7, #16]
 80078a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	693a      	ldr	r2, [r7, #16]
 80078a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80078ae:	4b35      	ldr	r3, [pc, #212]	; (8007984 <tcp_listen_input+0x1e0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	1e5a      	subs	r2, r3, #1
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	691a      	ldr	r2, [r3, #16]
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	7a5b      	ldrb	r3, [r3, #9]
 80078ca:	f003 030c 	and.w	r3, r3, #12
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	7a1a      	ldrb	r2, [r3, #8]
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80078dc:	4b2e      	ldr	r3, [pc, #184]	; (8007998 <tcp_listen_input+0x1f4>)
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	60da      	str	r2, [r3, #12]
 80078e4:	4a2c      	ldr	r2, [pc, #176]	; (8007998 <tcp_listen_input+0x1f4>)
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	f003 f8df 	bl	800aaac <tcp_timer_needed>
 80078ee:	4b2b      	ldr	r3, [pc, #172]	; (800799c <tcp_listen_input+0x1f8>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80078f4:	6978      	ldr	r0, [r7, #20]
 80078f6:	f001 fd8f 	bl	8009418 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80078fa:	4b23      	ldr	r3, [pc, #140]	; (8007988 <tcp_listen_input+0x1e4>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	89db      	ldrh	r3, [r3, #14]
 8007900:	b29a      	uxth	r2, r3
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	3304      	adds	r3, #4
 800791c:	4618      	mov	r0, r3
 800791e:	f006 fef5 	bl	800e70c <ip4_route>
 8007922:	4601      	mov	r1, r0
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3304      	adds	r3, #4
 8007928:	461a      	mov	r2, r3
 800792a:	4620      	mov	r0, r4
 800792c:	f7ff fa34 	bl	8006d98 <tcp_eff_send_mss_netif>
 8007930:	4603      	mov	r3, r0
 8007932:	461a      	mov	r2, r3
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8007938:	2112      	movs	r1, #18
 800793a:	6978      	ldr	r0, [r7, #20]
 800793c:	f002 f842 	bl	80099c4 <tcp_enqueue_flags>
 8007940:	4603      	mov	r3, r0
 8007942:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8007944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d004      	beq.n	8007956 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800794c:	2100      	movs	r1, #0
 800794e:	6978      	ldr	r0, [r7, #20]
 8007950:	f7fe f986 	bl	8005c60 <tcp_abandon>
      return;
 8007954:	e007      	b.n	8007966 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8007956:	6978      	ldr	r0, [r7, #20]
 8007958:	f002 f922 	bl	8009ba0 <tcp_output>
  return;
 800795c:	bf00      	nop
 800795e:	e001      	b.n	8007964 <tcp_listen_input+0x1c0>
    return;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <tcp_listen_input+0x1c2>
  return;
 8007964:	bf00      	nop
}
 8007966:	371c      	adds	r7, #28
 8007968:	46bd      	mov	sp, r7
 800796a:	bd90      	pop	{r4, r7, pc}
 800796c:	20000588 	.word	0x20000588
 8007970:	08011ccc 	.word	0x08011ccc
 8007974:	08011ec4 	.word	0x08011ec4
 8007978:	08011d18 	.word	0x08011d18
 800797c:	20000580 	.word	0x20000580
 8007980:	20000586 	.word	0x20000586
 8007984:	2000057c 	.word	0x2000057c
 8007988:	2000056c 	.word	0x2000056c
 800798c:	200037ec 	.word	0x200037ec
 8007990:	200037f0 	.word	0x200037f0
 8007994:	200037dc 	.word	0x200037dc
 8007998:	20006d50 	.word	0x20006d50
 800799c:	20006d4c 	.word	0x20006d4c

080079a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b086      	sub	sp, #24
 80079a4:	af04      	add	r7, sp, #16
 80079a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80079a8:	4b30      	ldr	r3, [pc, #192]	; (8007a6c <tcp_timewait_input+0xcc>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d154      	bne.n	8007a5e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d106      	bne.n	80079c8 <tcp_timewait_input+0x28>
 80079ba:	4b2d      	ldr	r3, [pc, #180]	; (8007a70 <tcp_timewait_input+0xd0>)
 80079bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80079c0:	492c      	ldr	r1, [pc, #176]	; (8007a74 <tcp_timewait_input+0xd4>)
 80079c2:	482d      	ldr	r0, [pc, #180]	; (8007a78 <tcp_timewait_input+0xd8>)
 80079c4:	f008 f8e6 	bl	800fb94 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80079c8:	4b28      	ldr	r3, [pc, #160]	; (8007a6c <tcp_timewait_input+0xcc>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d02a      	beq.n	8007a2a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80079d4:	4b29      	ldr	r3, [pc, #164]	; (8007a7c <tcp_timewait_input+0xdc>)
 80079d6:	681a      	ldr	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	db2d      	blt.n	8007a3e <tcp_timewait_input+0x9e>
 80079e2:	4b26      	ldr	r3, [pc, #152]	; (8007a7c <tcp_timewait_input+0xdc>)
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079ea:	6879      	ldr	r1, [r7, #4]
 80079ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80079ee:	440b      	add	r3, r1
 80079f0:	1ad3      	subs	r3, r2, r3
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	dc23      	bgt.n	8007a3e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80079f6:	4b22      	ldr	r3, [pc, #136]	; (8007a80 <tcp_timewait_input+0xe0>)
 80079f8:	6819      	ldr	r1, [r3, #0]
 80079fa:	4b22      	ldr	r3, [pc, #136]	; (8007a84 <tcp_timewait_input+0xe4>)
 80079fc:	881b      	ldrh	r3, [r3, #0]
 80079fe:	461a      	mov	r2, r3
 8007a00:	4b1e      	ldr	r3, [pc, #120]	; (8007a7c <tcp_timewait_input+0xdc>)
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a06:	4b20      	ldr	r3, [pc, #128]	; (8007a88 <tcp_timewait_input+0xe8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a0a:	885b      	ldrh	r3, [r3, #2]
 8007a0c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007a0e:	4a1e      	ldr	r2, [pc, #120]	; (8007a88 <tcp_timewait_input+0xe8>)
 8007a10:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007a12:	8812      	ldrh	r2, [r2, #0]
 8007a14:	b292      	uxth	r2, r2
 8007a16:	9202      	str	r2, [sp, #8]
 8007a18:	9301      	str	r3, [sp, #4]
 8007a1a:	4b1c      	ldr	r3, [pc, #112]	; (8007a8c <tcp_timewait_input+0xec>)
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	4b1c      	ldr	r3, [pc, #112]	; (8007a90 <tcp_timewait_input+0xf0>)
 8007a20:	4602      	mov	r2, r0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f002 fe80 	bl	800a728 <tcp_rst>
      return;
 8007a28:	e01c      	b.n	8007a64 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 8007a2a:	4b10      	ldr	r3, [pc, #64]	; (8007a6c <tcp_timewait_input+0xcc>)
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d003      	beq.n	8007a3e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8007a36:	4b17      	ldr	r3, [pc, #92]	; (8007a94 <tcp_timewait_input+0xf4>)
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8007a3e:	4b11      	ldr	r3, [pc, #68]	; (8007a84 <tcp_timewait_input+0xe4>)
 8007a40:	881b      	ldrh	r3, [r3, #0]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d00d      	beq.n	8007a62 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	8b5b      	ldrh	r3, [r3, #26]
 8007a4a:	f043 0302 	orr.w	r3, r3, #2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f002 f8a3 	bl	8009ba0 <tcp_output>
  }
  return;
 8007a5a:	bf00      	nop
 8007a5c:	e001      	b.n	8007a62 <tcp_timewait_input+0xc2>
    return;
 8007a5e:	bf00      	nop
 8007a60:	e000      	b.n	8007a64 <tcp_timewait_input+0xc4>
  return;
 8007a62:	bf00      	nop
}
 8007a64:	3708      	adds	r7, #8
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000588 	.word	0x20000588
 8007a70:	08011ccc 	.word	0x08011ccc
 8007a74:	08011ee4 	.word	0x08011ee4
 8007a78:	08011d18 	.word	0x08011d18
 8007a7c:	2000057c 	.word	0x2000057c
 8007a80:	20000580 	.word	0x20000580
 8007a84:	20000586 	.word	0x20000586
 8007a88:	2000056c 	.word	0x2000056c
 8007a8c:	200037ec 	.word	0x200037ec
 8007a90:	200037f0 	.word	0x200037f0
 8007a94:	20006d54 	.word	0x20006d54

08007a98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8007a98:	b590      	push	{r4, r7, lr}
 8007a9a:	b08d      	sub	sp, #52	; 0x34
 8007a9c:	af04      	add	r7, sp, #16
 8007a9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d106      	bne.n	8007abc <tcp_process+0x24>
 8007aae:	4ba5      	ldr	r3, [pc, #660]	; (8007d44 <tcp_process+0x2ac>)
 8007ab0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8007ab4:	49a4      	ldr	r1, [pc, #656]	; (8007d48 <tcp_process+0x2b0>)
 8007ab6:	48a5      	ldr	r0, [pc, #660]	; (8007d4c <tcp_process+0x2b4>)
 8007ab8:	f008 f86c 	bl	800fb94 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8007abc:	4ba4      	ldr	r3, [pc, #656]	; (8007d50 <tcp_process+0x2b8>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d04e      	beq.n	8007b66 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	7d1b      	ldrb	r3, [r3, #20]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d108      	bne.n	8007ae2 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ad4:	4b9f      	ldr	r3, [pc, #636]	; (8007d54 <tcp_process+0x2bc>)
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d123      	bne.n	8007b24 <tcp_process+0x8c>
        acceptable = 1;
 8007adc:	2301      	movs	r3, #1
 8007ade:	76fb      	strb	r3, [r7, #27]
 8007ae0:	e020      	b.n	8007b24 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ae6:	4b9c      	ldr	r3, [pc, #624]	; (8007d58 <tcp_process+0x2c0>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d102      	bne.n	8007af4 <tcp_process+0x5c>
        acceptable = 1;
 8007aee:	2301      	movs	r3, #1
 8007af0:	76fb      	strb	r3, [r7, #27]
 8007af2:	e017      	b.n	8007b24 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8007af4:	4b98      	ldr	r3, [pc, #608]	; (8007d58 <tcp_process+0x2c0>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afc:	1ad3      	subs	r3, r2, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	db10      	blt.n	8007b24 <tcp_process+0x8c>
 8007b02:	4b95      	ldr	r3, [pc, #596]	; (8007d58 <tcp_process+0x2c0>)
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8007b0e:	440b      	add	r3, r1
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	dc06      	bgt.n	8007b24 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	8b5b      	ldrh	r3, [r3, #26]
 8007b1a:	f043 0302 	orr.w	r3, r3, #2
 8007b1e:	b29a      	uxth	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8007b24:	7efb      	ldrb	r3, [r7, #27]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d01b      	beq.n	8007b62 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	7d1b      	ldrb	r3, [r3, #20]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d106      	bne.n	8007b40 <tcp_process+0xa8>
 8007b32:	4b84      	ldr	r3, [pc, #528]	; (8007d44 <tcp_process+0x2ac>)
 8007b34:	f44f 724e 	mov.w	r2, #824	; 0x338
 8007b38:	4988      	ldr	r1, [pc, #544]	; (8007d5c <tcp_process+0x2c4>)
 8007b3a:	4884      	ldr	r0, [pc, #528]	; (8007d4c <tcp_process+0x2b4>)
 8007b3c:	f008 f82a 	bl	800fb94 <iprintf>
      recv_flags |= TF_RESET;
 8007b40:	4b87      	ldr	r3, [pc, #540]	; (8007d60 <tcp_process+0x2c8>)
 8007b42:	781b      	ldrb	r3, [r3, #0]
 8007b44:	f043 0308 	orr.w	r3, r3, #8
 8007b48:	b2da      	uxtb	r2, r3
 8007b4a:	4b85      	ldr	r3, [pc, #532]	; (8007d60 <tcp_process+0x2c8>)
 8007b4c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8b5b      	ldrh	r3, [r3, #26]
 8007b52:	f023 0301 	bic.w	r3, r3, #1
 8007b56:	b29a      	uxth	r2, r3
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8007b5c:	f06f 030d 	mvn.w	r3, #13
 8007b60:	e37a      	b.n	8008258 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	e378      	b.n	8008258 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8007b66:	4b7a      	ldr	r3, [pc, #488]	; (8007d50 <tcp_process+0x2b8>)
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 0302 	and.w	r3, r3, #2
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d010      	beq.n	8007b94 <tcp_process+0xfc>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7d1b      	ldrb	r3, [r3, #20]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d00c      	beq.n	8007b94 <tcp_process+0xfc>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	7d1b      	ldrb	r3, [r3, #20]
 8007b7e:	2b03      	cmp	r3, #3
 8007b80:	d008      	beq.n	8007b94 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8b5b      	ldrh	r3, [r3, #26]
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8007b90:	2300      	movs	r3, #0
 8007b92:	e361      	b.n	8008258 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	8b5b      	ldrh	r3, [r3, #26]
 8007b98:	f003 0310 	and.w	r3, r3, #16
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d103      	bne.n	8007ba8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8007ba0:	4b70      	ldr	r3, [pc, #448]	; (8007d64 <tcp_process+0x2cc>)
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2200      	movs	r2, #0
 8007bac:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f001 fc2d 	bl	8009418 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	7d1b      	ldrb	r3, [r3, #20]
 8007bc2:	3b02      	subs	r3, #2
 8007bc4:	2b07      	cmp	r3, #7
 8007bc6:	f200 8337 	bhi.w	8008238 <tcp_process+0x7a0>
 8007bca:	a201      	add	r2, pc, #4	; (adr r2, 8007bd0 <tcp_process+0x138>)
 8007bcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd0:	08007bf1 	.word	0x08007bf1
 8007bd4:	08007e21 	.word	0x08007e21
 8007bd8:	08007f99 	.word	0x08007f99
 8007bdc:	08007fc3 	.word	0x08007fc3
 8007be0:	080080e7 	.word	0x080080e7
 8007be4:	08007f99 	.word	0x08007f99
 8007be8:	08008173 	.word	0x08008173
 8007bec:	08008203 	.word	0x08008203
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8007bf0:	4b57      	ldr	r3, [pc, #348]	; (8007d50 <tcp_process+0x2b8>)
 8007bf2:	781b      	ldrb	r3, [r3, #0]
 8007bf4:	f003 0310 	and.w	r3, r3, #16
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	f000 80e4 	beq.w	8007dc6 <tcp_process+0x32e>
 8007bfe:	4b54      	ldr	r3, [pc, #336]	; (8007d50 <tcp_process+0x2b8>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 80dd 	beq.w	8007dc6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c10:	1c5a      	adds	r2, r3, #1
 8007c12:	4b50      	ldr	r3, [pc, #320]	; (8007d54 <tcp_process+0x2bc>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	429a      	cmp	r2, r3
 8007c18:	f040 80d5 	bne.w	8007dc6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8007c1c:	4b4e      	ldr	r3, [pc, #312]	; (8007d58 <tcp_process+0x2c0>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	1c5a      	adds	r2, r3, #1
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8007c2e:	4b49      	ldr	r3, [pc, #292]	; (8007d54 <tcp_process+0x2bc>)
 8007c30:	681a      	ldr	r2, [r3, #0]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8007c36:	4b4c      	ldr	r3, [pc, #304]	; (8007d68 <tcp_process+0x2d0>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	89db      	ldrh	r3, [r3, #14]
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8007c50:	4b41      	ldr	r3, [pc, #260]	; (8007d58 <tcp_process+0x2c0>)
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	1e5a      	subs	r2, r3, #1
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	3304      	adds	r3, #4
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f006 fd4f 	bl	800e70c <ip4_route>
 8007c6e:	4601      	mov	r1, r0
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	3304      	adds	r3, #4
 8007c74:	461a      	mov	r2, r3
 8007c76:	4620      	mov	r0, r4
 8007c78:	f7ff f88e 	bl	8006d98 <tcp_eff_send_mss_netif>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	461a      	mov	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c88:	009a      	lsls	r2, r3, #2
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007c8e:	005b      	lsls	r3, r3, #1
 8007c90:	f241 111c 	movw	r1, #4380	; 0x111c
 8007c94:	428b      	cmp	r3, r1
 8007c96:	bf38      	it	cc
 8007c98:	460b      	movcc	r3, r1
 8007c9a:	429a      	cmp	r2, r3
 8007c9c:	d204      	bcs.n	8007ca8 <tcp_process+0x210>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	e00d      	b.n	8007cc4 <tcp_process+0x22c>
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cac:	005b      	lsls	r3, r3, #1
 8007cae:	f241 121c 	movw	r2, #4380	; 0x111c
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d904      	bls.n	8007cc0 <tcp_process+0x228>
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007cba:	005b      	lsls	r3, r3, #1
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	e001      	b.n	8007cc4 <tcp_process+0x22c>
 8007cc0:	f241 131c 	movw	r3, #4380	; 0x111c
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d106      	bne.n	8007ce2 <tcp_process+0x24a>
 8007cd4:	4b1b      	ldr	r3, [pc, #108]	; (8007d44 <tcp_process+0x2ac>)
 8007cd6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8007cda:	4924      	ldr	r1, [pc, #144]	; (8007d6c <tcp_process+0x2d4>)
 8007cdc:	481b      	ldr	r0, [pc, #108]	; (8007d4c <tcp_process+0x2b4>)
 8007cde:	f007 ff59 	bl	800fb94 <iprintf>
        --pcb->snd_queuelen;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf6:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d111      	bne.n	8007d22 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d106      	bne.n	8007d18 <tcp_process+0x280>
 8007d0a:	4b0e      	ldr	r3, [pc, #56]	; (8007d44 <tcp_process+0x2ac>)
 8007d0c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8007d10:	4917      	ldr	r1, [pc, #92]	; (8007d70 <tcp_process+0x2d8>)
 8007d12:	480e      	ldr	r0, [pc, #56]	; (8007d4c <tcp_process+0x2b4>)
 8007d14:	f007 ff3e 	bl	800fb94 <iprintf>
          pcb->unsent = rseg->next;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	66da      	str	r2, [r3, #108]	; 0x6c
 8007d20:	e003      	b.n	8007d2a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8007d22:	69fb      	ldr	r3, [r7, #28]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8007d2a:	69f8      	ldr	r0, [r7, #28]
 8007d2c:	f7fe fd3e 	bl	80067ac <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d11d      	bne.n	8007d74 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007d3e:	861a      	strh	r2, [r3, #48]	; 0x30
 8007d40:	e01f      	b.n	8007d82 <tcp_process+0x2ea>
 8007d42:	bf00      	nop
 8007d44:	08011ccc 	.word	0x08011ccc
 8007d48:	08011f04 	.word	0x08011f04
 8007d4c:	08011d18 	.word	0x08011d18
 8007d50:	20000588 	.word	0x20000588
 8007d54:	20000580 	.word	0x20000580
 8007d58:	2000057c 	.word	0x2000057c
 8007d5c:	08011f20 	.word	0x08011f20
 8007d60:	20000589 	.word	0x20000589
 8007d64:	20006d54 	.word	0x20006d54
 8007d68:	2000056c 	.word	0x2000056c
 8007d6c:	08011f40 	.word	0x08011f40
 8007d70:	08011f58 	.word	0x08011f58
        } else {
          pcb->rtime = 0;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00a      	beq.n	8007da2 <tcp_process+0x30a>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	6910      	ldr	r0, [r2, #16]
 8007d96:	2200      	movs	r2, #0
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4798      	blx	r3
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	76bb      	strb	r3, [r7, #26]
 8007da0:	e001      	b.n	8007da6 <tcp_process+0x30e>
 8007da2:	2300      	movs	r3, #0
 8007da4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8007da6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007daa:	f113 0f0d 	cmn.w	r3, #13
 8007dae:	d102      	bne.n	8007db6 <tcp_process+0x31e>
          return ERR_ABRT;
 8007db0:	f06f 030c 	mvn.w	r3, #12
 8007db4:	e250      	b.n	8008258 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	8b5b      	ldrh	r3, [r3, #26]
 8007dba:	f043 0302 	orr.w	r3, r3, #2
 8007dbe:	b29a      	uxth	r2, r3
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8007dc4:	e23a      	b.n	800823c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8007dc6:	4b9d      	ldr	r3, [pc, #628]	; (800803c <tcp_process+0x5a4>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	f003 0310 	and.w	r3, r3, #16
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	f000 8234 	beq.w	800823c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007dd4:	4b9a      	ldr	r3, [pc, #616]	; (8008040 <tcp_process+0x5a8>)
 8007dd6:	6819      	ldr	r1, [r3, #0]
 8007dd8:	4b9a      	ldr	r3, [pc, #616]	; (8008044 <tcp_process+0x5ac>)
 8007dda:	881b      	ldrh	r3, [r3, #0]
 8007ddc:	461a      	mov	r2, r3
 8007dde:	4b9a      	ldr	r3, [pc, #616]	; (8008048 <tcp_process+0x5b0>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007de4:	4b99      	ldr	r3, [pc, #612]	; (800804c <tcp_process+0x5b4>)
 8007de6:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007de8:	885b      	ldrh	r3, [r3, #2]
 8007dea:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007dec:	4a97      	ldr	r2, [pc, #604]	; (800804c <tcp_process+0x5b4>)
 8007dee:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007df0:	8812      	ldrh	r2, [r2, #0]
 8007df2:	b292      	uxth	r2, r2
 8007df4:	9202      	str	r2, [sp, #8]
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	4b95      	ldr	r3, [pc, #596]	; (8008050 <tcp_process+0x5b8>)
 8007dfa:	9300      	str	r3, [sp, #0]
 8007dfc:	4b95      	ldr	r3, [pc, #596]	; (8008054 <tcp_process+0x5bc>)
 8007dfe:	4602      	mov	r2, r0
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f002 fc91 	bl	800a728 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007e0c:	2b05      	cmp	r3, #5
 8007e0e:	f200 8215 	bhi.w	800823c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2200      	movs	r2, #0
 8007e16:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f002 fa51 	bl	800a2c0 <tcp_rexmit_rto>
      break;
 8007e1e:	e20d      	b.n	800823c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8007e20:	4b86      	ldr	r3, [pc, #536]	; (800803c <tcp_process+0x5a4>)
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	f003 0310 	and.w	r3, r3, #16
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80a1 	beq.w	8007f70 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8007e2e:	4b84      	ldr	r3, [pc, #528]	; (8008040 <tcp_process+0x5a8>)
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	3b01      	subs	r3, #1
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	db7e      	blt.n	8007f3c <tcp_process+0x4a4>
 8007e3e:	4b80      	ldr	r3, [pc, #512]	; (8008040 <tcp_process+0x5a8>)
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e46:	1ad3      	subs	r3, r2, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc77      	bgt.n	8007f3c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2204      	movs	r2, #4
 8007e50:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d102      	bne.n	8007e60 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8007e5a:	23fa      	movs	r3, #250	; 0xfa
 8007e5c:	76bb      	strb	r3, [r7, #26]
 8007e5e:	e01d      	b.n	8007e9c <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d106      	bne.n	8007e78 <tcp_process+0x3e0>
 8007e6a:	4b7b      	ldr	r3, [pc, #492]	; (8008058 <tcp_process+0x5c0>)
 8007e6c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8007e70:	497a      	ldr	r1, [pc, #488]	; (800805c <tcp_process+0x5c4>)
 8007e72:	487b      	ldr	r0, [pc, #492]	; (8008060 <tcp_process+0x5c8>)
 8007e74:	f007 fe8e 	bl	800fb94 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e7c:	699b      	ldr	r3, [r3, #24]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00a      	beq.n	8007e98 <tcp_process+0x400>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e86:	699b      	ldr	r3, [r3, #24]
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	6910      	ldr	r0, [r2, #16]
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	4798      	blx	r3
 8007e92:	4603      	mov	r3, r0
 8007e94:	76bb      	strb	r3, [r7, #26]
 8007e96:	e001      	b.n	8007e9c <tcp_process+0x404>
 8007e98:	23f0      	movs	r3, #240	; 0xf0
 8007e9a:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8007e9c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d00a      	beq.n	8007eba <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8007ea4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8007ea8:	f113 0f0d 	cmn.w	r3, #13
 8007eac:	d002      	beq.n	8007eb4 <tcp_process+0x41c>
              tcp_abort(pcb);
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fd ff94 	bl	8005ddc <tcp_abort>
            }
            return ERR_ABRT;
 8007eb4:	f06f 030c 	mvn.w	r3, #12
 8007eb8:	e1ce      	b.n	8008258 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 fae0 	bl	8008480 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8007ec0:	4b68      	ldr	r3, [pc, #416]	; (8008064 <tcp_process+0x5cc>)
 8007ec2:	881b      	ldrh	r3, [r3, #0]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d005      	beq.n	8007ed4 <tcp_process+0x43c>
            recv_acked--;
 8007ec8:	4b66      	ldr	r3, [pc, #408]	; (8008064 <tcp_process+0x5cc>)
 8007eca:	881b      	ldrh	r3, [r3, #0]
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	4b64      	ldr	r3, [pc, #400]	; (8008064 <tcp_process+0x5cc>)
 8007ed2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ed8:	009a      	lsls	r2, r3, #2
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ede:	005b      	lsls	r3, r3, #1
 8007ee0:	f241 111c 	movw	r1, #4380	; 0x111c
 8007ee4:	428b      	cmp	r3, r1
 8007ee6:	bf38      	it	cc
 8007ee8:	460b      	movcc	r3, r1
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d204      	bcs.n	8007ef8 <tcp_process+0x460>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	e00d      	b.n	8007f14 <tcp_process+0x47c>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007efc:	005b      	lsls	r3, r3, #1
 8007efe:	f241 121c 	movw	r2, #4380	; 0x111c
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d904      	bls.n	8007f10 <tcp_process+0x478>
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8007f0a:	005b      	lsls	r3, r3, #1
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	e001      	b.n	8007f14 <tcp_process+0x47c>
 8007f10:	f241 131c 	movw	r3, #4380	; 0x111c
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8007f1a:	4b53      	ldr	r3, [pc, #332]	; (8008068 <tcp_process+0x5d0>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 0320 	and.w	r3, r3, #32
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d037      	beq.n	8007f96 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	8b5b      	ldrh	r3, [r3, #26]
 8007f2a:	f043 0302 	orr.w	r3, r3, #2
 8007f2e:	b29a      	uxth	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2207      	movs	r2, #7
 8007f38:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8007f3a:	e02c      	b.n	8007f96 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f3c:	4b40      	ldr	r3, [pc, #256]	; (8008040 <tcp_process+0x5a8>)
 8007f3e:	6819      	ldr	r1, [r3, #0]
 8007f40:	4b40      	ldr	r3, [pc, #256]	; (8008044 <tcp_process+0x5ac>)
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	461a      	mov	r2, r3
 8007f46:	4b40      	ldr	r3, [pc, #256]	; (8008048 <tcp_process+0x5b0>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f4c:	4b3f      	ldr	r3, [pc, #252]	; (800804c <tcp_process+0x5b4>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f50:	885b      	ldrh	r3, [r3, #2]
 8007f52:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007f54:	4a3d      	ldr	r2, [pc, #244]	; (800804c <tcp_process+0x5b4>)
 8007f56:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007f58:	8812      	ldrh	r2, [r2, #0]
 8007f5a:	b292      	uxth	r2, r2
 8007f5c:	9202      	str	r2, [sp, #8]
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	4b3b      	ldr	r3, [pc, #236]	; (8008050 <tcp_process+0x5b8>)
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4b3b      	ldr	r3, [pc, #236]	; (8008054 <tcp_process+0x5bc>)
 8007f66:	4602      	mov	r2, r0
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f002 fbdd 	bl	800a728 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8007f6e:	e167      	b.n	8008240 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8007f70:	4b32      	ldr	r3, [pc, #200]	; (800803c <tcp_process+0x5a4>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	f000 8161 	beq.w	8008240 <tcp_process+0x7a8>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f82:	1e5a      	subs	r2, r3, #1
 8007f84:	4b30      	ldr	r3, [pc, #192]	; (8008048 <tcp_process+0x5b0>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	429a      	cmp	r2, r3
 8007f8a:	f040 8159 	bne.w	8008240 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f002 f9b8 	bl	800a304 <tcp_rexmit>
      break;
 8007f94:	e154      	b.n	8008240 <tcp_process+0x7a8>
 8007f96:	e153      	b.n	8008240 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fa71 	bl	8008480 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8007f9e:	4b32      	ldr	r3, [pc, #200]	; (8008068 <tcp_process+0x5d0>)
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 814c 	beq.w	8008244 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	8b5b      	ldrh	r3, [r3, #26]
 8007fb0:	f043 0302 	orr.w	r3, r3, #2
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2207      	movs	r2, #7
 8007fbe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8007fc0:	e140      	b.n	8008244 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8007fc2:	6878      	ldr	r0, [r7, #4]
 8007fc4:	f000 fa5c 	bl	8008480 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8007fc8:	4b27      	ldr	r3, [pc, #156]	; (8008068 <tcp_process+0x5d0>)
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	f003 0320 	and.w	r3, r3, #32
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d071      	beq.n	80080b8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007fd4:	4b19      	ldr	r3, [pc, #100]	; (800803c <tcp_process+0x5a4>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	f003 0310 	and.w	r3, r3, #16
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d060      	beq.n	80080a2 <tcp_process+0x60a>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007fe4:	4b16      	ldr	r3, [pc, #88]	; (8008040 <tcp_process+0x5a8>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d15a      	bne.n	80080a2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d156      	bne.n	80080a2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8b5b      	ldrh	r3, [r3, #26]
 8007ff8:	f043 0302 	orr.w	r3, r3, #2
 8007ffc:	b29a      	uxth	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fe fdbe 	bl	8006b84 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008008:	4b18      	ldr	r3, [pc, #96]	; (800806c <tcp_process+0x5d4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	429a      	cmp	r2, r3
 8008010:	d105      	bne.n	800801e <tcp_process+0x586>
 8008012:	4b16      	ldr	r3, [pc, #88]	; (800806c <tcp_process+0x5d4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68db      	ldr	r3, [r3, #12]
 8008018:	4a14      	ldr	r2, [pc, #80]	; (800806c <tcp_process+0x5d4>)
 800801a:	6013      	str	r3, [r2, #0]
 800801c:	e02e      	b.n	800807c <tcp_process+0x5e4>
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <tcp_process+0x5d4>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	617b      	str	r3, [r7, #20]
 8008024:	e027      	b.n	8008076 <tcp_process+0x5de>
 8008026:	697b      	ldr	r3, [r7, #20]
 8008028:	68db      	ldr	r3, [r3, #12]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	429a      	cmp	r2, r3
 800802e:	d11f      	bne.n	8008070 <tcp_process+0x5d8>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	68da      	ldr	r2, [r3, #12]
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	60da      	str	r2, [r3, #12]
 8008038:	e020      	b.n	800807c <tcp_process+0x5e4>
 800803a:	bf00      	nop
 800803c:	20000588 	.word	0x20000588
 8008040:	20000580 	.word	0x20000580
 8008044:	20000586 	.word	0x20000586
 8008048:	2000057c 	.word	0x2000057c
 800804c:	2000056c 	.word	0x2000056c
 8008050:	200037ec 	.word	0x200037ec
 8008054:	200037f0 	.word	0x200037f0
 8008058:	08011ccc 	.word	0x08011ccc
 800805c:	08011f6c 	.word	0x08011f6c
 8008060:	08011d18 	.word	0x08011d18
 8008064:	20000584 	.word	0x20000584
 8008068:	20000589 	.word	0x20000589
 800806c:	20006d50 	.word	0x20006d50
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1d4      	bne.n	8008026 <tcp_process+0x58e>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	4b77      	ldr	r3, [pc, #476]	; (8008260 <tcp_process+0x7c8>)
 8008084:	2201      	movs	r2, #1
 8008086:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	220a      	movs	r2, #10
 800808c:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800808e:	4b75      	ldr	r3, [pc, #468]	; (8008264 <tcp_process+0x7cc>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	60da      	str	r2, [r3, #12]
 8008096:	4a73      	ldr	r2, [pc, #460]	; (8008264 <tcp_process+0x7cc>)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	f002 fd06 	bl	800aaac <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80080a0:	e0d2      	b.n	8008248 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	8b5b      	ldrh	r3, [r3, #26]
 80080a6:	f043 0302 	orr.w	r3, r3, #2
 80080aa:	b29a      	uxth	r2, r3
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2208      	movs	r2, #8
 80080b4:	751a      	strb	r2, [r3, #20]
      break;
 80080b6:	e0c7      	b.n	8008248 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080b8:	4b6b      	ldr	r3, [pc, #428]	; (8008268 <tcp_process+0x7d0>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	f000 80c1 	beq.w	8008248 <tcp_process+0x7b0>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ca:	4b68      	ldr	r3, [pc, #416]	; (800826c <tcp_process+0x7d4>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	f040 80ba 	bne.w	8008248 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f040 80b5 	bne.w	8008248 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2206      	movs	r2, #6
 80080e2:	751a      	strb	r2, [r3, #20]
      break;
 80080e4:	e0b0      	b.n	8008248 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f9ca 	bl	8008480 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80080ec:	4b60      	ldr	r3, [pc, #384]	; (8008270 <tcp_process+0x7d8>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f003 0320 	and.w	r3, r3, #32
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	f000 80a9 	beq.w	800824c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	8b5b      	ldrh	r3, [r3, #26]
 80080fe:	f043 0302 	orr.w	r3, r3, #2
 8008102:	b29a      	uxth	r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f7fe fd3b 	bl	8006b84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800810e:	4b59      	ldr	r3, [pc, #356]	; (8008274 <tcp_process+0x7dc>)
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	429a      	cmp	r2, r3
 8008116:	d105      	bne.n	8008124 <tcp_process+0x68c>
 8008118:	4b56      	ldr	r3, [pc, #344]	; (8008274 <tcp_process+0x7dc>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	4a55      	ldr	r2, [pc, #340]	; (8008274 <tcp_process+0x7dc>)
 8008120:	6013      	str	r3, [r2, #0]
 8008122:	e013      	b.n	800814c <tcp_process+0x6b4>
 8008124:	4b53      	ldr	r3, [pc, #332]	; (8008274 <tcp_process+0x7dc>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	613b      	str	r3, [r7, #16]
 800812a:	e00c      	b.n	8008146 <tcp_process+0x6ae>
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	68db      	ldr	r3, [r3, #12]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d104      	bne.n	8008140 <tcp_process+0x6a8>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	68da      	ldr	r2, [r3, #12]
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	60da      	str	r2, [r3, #12]
 800813e:	e005      	b.n	800814c <tcp_process+0x6b4>
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	613b      	str	r3, [r7, #16]
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1ef      	bne.n	800812c <tcp_process+0x694>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	60da      	str	r2, [r3, #12]
 8008152:	4b43      	ldr	r3, [pc, #268]	; (8008260 <tcp_process+0x7c8>)
 8008154:	2201      	movs	r2, #1
 8008156:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	220a      	movs	r2, #10
 800815c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800815e:	4b41      	ldr	r3, [pc, #260]	; (8008264 <tcp_process+0x7cc>)
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60da      	str	r2, [r3, #12]
 8008166:	4a3f      	ldr	r2, [pc, #252]	; (8008264 <tcp_process+0x7cc>)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6013      	str	r3, [r2, #0]
 800816c:	f002 fc9e 	bl	800aaac <tcp_timer_needed>
      }
      break;
 8008170:	e06c      	b.n	800824c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 f984 	bl	8008480 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008178:	4b3b      	ldr	r3, [pc, #236]	; (8008268 <tcp_process+0x7d0>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	f003 0310 	and.w	r3, r3, #16
 8008180:	2b00      	cmp	r3, #0
 8008182:	d065      	beq.n	8008250 <tcp_process+0x7b8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008188:	4b38      	ldr	r3, [pc, #224]	; (800826c <tcp_process+0x7d4>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	429a      	cmp	r2, r3
 800818e:	d15f      	bne.n	8008250 <tcp_process+0x7b8>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d15b      	bne.n	8008250 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7fe fcf3 	bl	8006b84 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800819e:	4b35      	ldr	r3, [pc, #212]	; (8008274 <tcp_process+0x7dc>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	d105      	bne.n	80081b4 <tcp_process+0x71c>
 80081a8:	4b32      	ldr	r3, [pc, #200]	; (8008274 <tcp_process+0x7dc>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	68db      	ldr	r3, [r3, #12]
 80081ae:	4a31      	ldr	r2, [pc, #196]	; (8008274 <tcp_process+0x7dc>)
 80081b0:	6013      	str	r3, [r2, #0]
 80081b2:	e013      	b.n	80081dc <tcp_process+0x744>
 80081b4:	4b2f      	ldr	r3, [pc, #188]	; (8008274 <tcp_process+0x7dc>)
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	e00c      	b.n	80081d6 <tcp_process+0x73e>
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	68db      	ldr	r3, [r3, #12]
 80081c0:	687a      	ldr	r2, [r7, #4]
 80081c2:	429a      	cmp	r2, r3
 80081c4:	d104      	bne.n	80081d0 <tcp_process+0x738>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	68da      	ldr	r2, [r3, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	60da      	str	r2, [r3, #12]
 80081ce:	e005      	b.n	80081dc <tcp_process+0x744>
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d1ef      	bne.n	80081bc <tcp_process+0x724>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	60da      	str	r2, [r3, #12]
 80081e2:	4b1f      	ldr	r3, [pc, #124]	; (8008260 <tcp_process+0x7c8>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	220a      	movs	r2, #10
 80081ec:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80081ee:	4b1d      	ldr	r3, [pc, #116]	; (8008264 <tcp_process+0x7cc>)
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	60da      	str	r2, [r3, #12]
 80081f6:	4a1b      	ldr	r2, [pc, #108]	; (8008264 <tcp_process+0x7cc>)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6013      	str	r3, [r2, #0]
 80081fc:	f002 fc56 	bl	800aaac <tcp_timer_needed>
      }
      break;
 8008200:	e026      	b.n	8008250 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f000 f93c 	bl	8008480 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008208:	4b17      	ldr	r3, [pc, #92]	; (8008268 <tcp_process+0x7d0>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	f003 0310 	and.w	r3, r3, #16
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01f      	beq.n	8008254 <tcp_process+0x7bc>
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008218:	4b14      	ldr	r3, [pc, #80]	; (800826c <tcp_process+0x7d4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	429a      	cmp	r2, r3
 800821e:	d119      	bne.n	8008254 <tcp_process+0x7bc>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008224:	2b00      	cmp	r3, #0
 8008226:	d115      	bne.n	8008254 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008228:	4b11      	ldr	r3, [pc, #68]	; (8008270 <tcp_process+0x7d8>)
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	f043 0310 	orr.w	r3, r3, #16
 8008230:	b2da      	uxtb	r2, r3
 8008232:	4b0f      	ldr	r3, [pc, #60]	; (8008270 <tcp_process+0x7d8>)
 8008234:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008236:	e00d      	b.n	8008254 <tcp_process+0x7bc>
    default:
      break;
 8008238:	bf00      	nop
 800823a:	e00c      	b.n	8008256 <tcp_process+0x7be>
      break;
 800823c:	bf00      	nop
 800823e:	e00a      	b.n	8008256 <tcp_process+0x7be>
      break;
 8008240:	bf00      	nop
 8008242:	e008      	b.n	8008256 <tcp_process+0x7be>
      break;
 8008244:	bf00      	nop
 8008246:	e006      	b.n	8008256 <tcp_process+0x7be>
      break;
 8008248:	bf00      	nop
 800824a:	e004      	b.n	8008256 <tcp_process+0x7be>
      break;
 800824c:	bf00      	nop
 800824e:	e002      	b.n	8008256 <tcp_process+0x7be>
      break;
 8008250:	bf00      	nop
 8008252:	e000      	b.n	8008256 <tcp_process+0x7be>
      break;
 8008254:	bf00      	nop
  }
  return ERR_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	3724      	adds	r7, #36	; 0x24
 800825c:	46bd      	mov	sp, r7
 800825e:	bd90      	pop	{r4, r7, pc}
 8008260:	20006d4c 	.word	0x20006d4c
 8008264:	20006d60 	.word	0x20006d60
 8008268:	20000588 	.word	0x20000588
 800826c:	20000580 	.word	0x20000580
 8008270:	20000589 	.word	0x20000589
 8008274:	20006d50 	.word	0x20006d50

08008278 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008278:	b590      	push	{r4, r7, lr}
 800827a:	b085      	sub	sp, #20
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d106      	bne.n	8008296 <tcp_oos_insert_segment+0x1e>
 8008288:	4b3b      	ldr	r3, [pc, #236]	; (8008378 <tcp_oos_insert_segment+0x100>)
 800828a:	f240 421f 	movw	r2, #1055	; 0x41f
 800828e:	493b      	ldr	r1, [pc, #236]	; (800837c <tcp_oos_insert_segment+0x104>)
 8008290:	483b      	ldr	r0, [pc, #236]	; (8008380 <tcp_oos_insert_segment+0x108>)
 8008292:	f007 fc7f 	bl	800fb94 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	899b      	ldrh	r3, [r3, #12]
 800829c:	b29b      	uxth	r3, r3
 800829e:	4618      	mov	r0, r3
 80082a0:	f7fb f8a2 	bl	80033e8 <lwip_htons>
 80082a4:	4603      	mov	r3, r0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	f003 0301 	and.w	r3, r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d028      	beq.n	8008302 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80082b0:	6838      	ldr	r0, [r7, #0]
 80082b2:	f7fe fa67 	bl	8006784 <tcp_segs_free>
    next = NULL;
 80082b6:	2300      	movs	r3, #0
 80082b8:	603b      	str	r3, [r7, #0]
 80082ba:	e056      	b.n	800836a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	899b      	ldrh	r3, [r3, #12]
 80082c2:	b29b      	uxth	r3, r3
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fb f88f 	bl	80033e8 <lwip_htons>
 80082ca:	4603      	mov	r3, r0
 80082cc:	b2db      	uxtb	r3, r3
 80082ce:	f003 0301 	and.w	r3, r3, #1
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00d      	beq.n	80082f2 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	899b      	ldrh	r3, [r3, #12]
 80082dc:	b29c      	uxth	r4, r3
 80082de:	2001      	movs	r0, #1
 80082e0:	f7fb f882 	bl	80033e8 <lwip_htons>
 80082e4:	4603      	mov	r3, r0
 80082e6:	461a      	mov	r2, r3
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	68db      	ldr	r3, [r3, #12]
 80082ec:	4322      	orrs	r2, r4
 80082ee:	b292      	uxth	r2, r2
 80082f0:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80082fc:	68f8      	ldr	r0, [r7, #12]
 80082fe:	f7fe fa55 	bl	80067ac <tcp_seg_free>
    while (next &&
 8008302:	683b      	ldr	r3, [r7, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	891b      	ldrh	r3, [r3, #8]
 800830c:	461a      	mov	r2, r3
 800830e:	4b1d      	ldr	r3, [pc, #116]	; (8008384 <tcp_oos_insert_segment+0x10c>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	441a      	add	r2, r3
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	685b      	ldr	r3, [r3, #4]
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	8909      	ldrh	r1, [r1, #8]
 800831e:	440b      	add	r3, r1
 8008320:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008322:	2b00      	cmp	r3, #0
 8008324:	daca      	bge.n	80082bc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d01e      	beq.n	800836a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	891b      	ldrh	r3, [r3, #8]
 8008330:	461a      	mov	r2, r3
 8008332:	4b14      	ldr	r3, [pc, #80]	; (8008384 <tcp_oos_insert_segment+0x10c>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	441a      	add	r2, r3
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	68db      	ldr	r3, [r3, #12]
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008340:	2b00      	cmp	r3, #0
 8008342:	dd12      	ble.n	800836a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	68db      	ldr	r3, [r3, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	b29a      	uxth	r2, r3
 800834c:	4b0d      	ldr	r3, [pc, #52]	; (8008384 <tcp_oos_insert_segment+0x10c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	b29b      	uxth	r3, r3
 8008352:	1ad3      	subs	r3, r2, r3
 8008354:	b29a      	uxth	r2, r3
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	685a      	ldr	r2, [r3, #4]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	891b      	ldrh	r3, [r3, #8]
 8008362:	4619      	mov	r1, r3
 8008364:	4610      	mov	r0, r2
 8008366:	f7fc fcc9 	bl	8004cfc <pbuf_realloc>
    }
  }
  cseg->next = next;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	683a      	ldr	r2, [r7, #0]
 800836e:	601a      	str	r2, [r3, #0]
}
 8008370:	bf00      	nop
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	bd90      	pop	{r4, r7, pc}
 8008378:	08011ccc 	.word	0x08011ccc
 800837c:	08011f8c 	.word	0x08011f8c
 8008380:	08011d18 	.word	0x08011d18
 8008384:	2000057c 	.word	0x2000057c

08008388 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008388:	b5b0      	push	{r4, r5, r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	607a      	str	r2, [r7, #4]
 8008394:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008396:	e03e      	b.n	8008416 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80083a2:	697b      	ldr	r3, [r7, #20]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fc feb6 	bl	8005118 <pbuf_clen>
 80083ac:	4603      	mov	r3, r0
 80083ae:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80083b6:	8a7a      	ldrh	r2, [r7, #18]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	d906      	bls.n	80083ca <tcp_free_acked_segments+0x42>
 80083bc:	4b2a      	ldr	r3, [pc, #168]	; (8008468 <tcp_free_acked_segments+0xe0>)
 80083be:	f240 4257 	movw	r2, #1111	; 0x457
 80083c2:	492a      	ldr	r1, [pc, #168]	; (800846c <tcp_free_acked_segments+0xe4>)
 80083c4:	482a      	ldr	r0, [pc, #168]	; (8008470 <tcp_free_acked_segments+0xe8>)
 80083c6:	f007 fbe5 	bl	800fb94 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80083d0:	8a7b      	ldrh	r3, [r7, #18]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	b29a      	uxth	r2, r3
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	891a      	ldrh	r2, [r3, #8]
 80083e0:	4b24      	ldr	r3, [pc, #144]	; (8008474 <tcp_free_acked_segments+0xec>)
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	4413      	add	r3, r2
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	4b22      	ldr	r3, [pc, #136]	; (8008474 <tcp_free_acked_segments+0xec>)
 80083ea:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80083ec:	6978      	ldr	r0, [r7, #20]
 80083ee:	f7fe f9dd 	bl	80067ac <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d00c      	beq.n	8008416 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d109      	bne.n	8008416 <tcp_free_acked_segments+0x8e>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d106      	bne.n	8008416 <tcp_free_acked_segments+0x8e>
 8008408:	4b17      	ldr	r3, [pc, #92]	; (8008468 <tcp_free_acked_segments+0xe0>)
 800840a:	f240 4262 	movw	r2, #1122	; 0x462
 800840e:	491a      	ldr	r1, [pc, #104]	; (8008478 <tcp_free_acked_segments+0xf0>)
 8008410:	4817      	ldr	r0, [pc, #92]	; (8008470 <tcp_free_acked_segments+0xe8>)
 8008412:	f007 fbbf 	bl	800fb94 <iprintf>
  while (seg_list != NULL &&
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d020      	beq.n	800845e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	4618      	mov	r0, r3
 8008424:	f7fa fff5 	bl	8003412 <lwip_htonl>
 8008428:	4604      	mov	r4, r0
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	891b      	ldrh	r3, [r3, #8]
 800842e:	461d      	mov	r5, r3
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	899b      	ldrh	r3, [r3, #12]
 8008436:	b29b      	uxth	r3, r3
 8008438:	4618      	mov	r0, r3
 800843a:	f7fa ffd5 	bl	80033e8 <lwip_htons>
 800843e:	4603      	mov	r3, r0
 8008440:	b2db      	uxtb	r3, r3
 8008442:	f003 0303 	and.w	r3, r3, #3
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <tcp_free_acked_segments+0xc6>
 800844a:	2301      	movs	r3, #1
 800844c:	e000      	b.n	8008450 <tcp_free_acked_segments+0xc8>
 800844e:	2300      	movs	r3, #0
 8008450:	442b      	add	r3, r5
 8008452:	18e2      	adds	r2, r4, r3
 8008454:	4b09      	ldr	r3, [pc, #36]	; (800847c <tcp_free_acked_segments+0xf4>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800845a:	2b00      	cmp	r3, #0
 800845c:	dd9c      	ble.n	8008398 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800845e:	68bb      	ldr	r3, [r7, #8]
}
 8008460:	4618      	mov	r0, r3
 8008462:	3718      	adds	r7, #24
 8008464:	46bd      	mov	sp, r7
 8008466:	bdb0      	pop	{r4, r5, r7, pc}
 8008468:	08011ccc 	.word	0x08011ccc
 800846c:	08011fb4 	.word	0x08011fb4
 8008470:	08011d18 	.word	0x08011d18
 8008474:	20000584 	.word	0x20000584
 8008478:	08011fdc 	.word	0x08011fdc
 800847c:	20000580 	.word	0x20000580

08008480 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008480:	b5b0      	push	{r4, r5, r7, lr}
 8008482:	b094      	sub	sp, #80	; 0x50
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008488:	2300      	movs	r3, #0
 800848a:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d106      	bne.n	80084a0 <tcp_receive+0x20>
 8008492:	4ba6      	ldr	r3, [pc, #664]	; (800872c <tcp_receive+0x2ac>)
 8008494:	f240 427b 	movw	r2, #1147	; 0x47b
 8008498:	49a5      	ldr	r1, [pc, #660]	; (8008730 <tcp_receive+0x2b0>)
 800849a:	48a6      	ldr	r0, [pc, #664]	; (8008734 <tcp_receive+0x2b4>)
 800849c:	f007 fb7a 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	7d1b      	ldrb	r3, [r3, #20]
 80084a4:	2b03      	cmp	r3, #3
 80084a6:	d806      	bhi.n	80084b6 <tcp_receive+0x36>
 80084a8:	4ba0      	ldr	r3, [pc, #640]	; (800872c <tcp_receive+0x2ac>)
 80084aa:	f240 427c 	movw	r2, #1148	; 0x47c
 80084ae:	49a2      	ldr	r1, [pc, #648]	; (8008738 <tcp_receive+0x2b8>)
 80084b0:	48a0      	ldr	r0, [pc, #640]	; (8008734 <tcp_receive+0x2b4>)
 80084b2:	f007 fb6f 	bl	800fb94 <iprintf>

  if (flags & TCP_ACK) {
 80084b6:	4ba1      	ldr	r3, [pc, #644]	; (800873c <tcp_receive+0x2bc>)
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	f003 0310 	and.w	r3, r3, #16
 80084be:	2b00      	cmp	r3, #0
 80084c0:	f000 8263 	beq.w	800898a <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80084ca:	461a      	mov	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d0:	4413      	add	r3, r2
 80084d2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084d8:	4b99      	ldr	r3, [pc, #612]	; (8008740 <tcp_receive+0x2c0>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	2b00      	cmp	r3, #0
 80084e0:	db1b      	blt.n	800851a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80084e6:	4b96      	ldr	r3, [pc, #600]	; (8008740 <tcp_receive+0x2c0>)
 80084e8:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80084ea:	429a      	cmp	r2, r3
 80084ec:	d106      	bne.n	80084fc <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80084f2:	4b94      	ldr	r3, [pc, #592]	; (8008744 <tcp_receive+0x2c4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	1ad3      	subs	r3, r2, r3
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	db0e      	blt.n	800851a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008500:	4b90      	ldr	r3, [pc, #576]	; (8008744 <tcp_receive+0x2c4>)
 8008502:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008504:	429a      	cmp	r2, r3
 8008506:	d125      	bne.n	8008554 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008508:	4b8f      	ldr	r3, [pc, #572]	; (8008748 <tcp_receive+0x2c8>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	89db      	ldrh	r3, [r3, #14]
 800850e:	b29a      	uxth	r2, r3
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008516:	429a      	cmp	r2, r3
 8008518:	d91c      	bls.n	8008554 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800851a:	4b8b      	ldr	r3, [pc, #556]	; (8008748 <tcp_receive+0x2c8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	89db      	ldrh	r3, [r3, #14]
 8008520:	b29a      	uxth	r2, r3
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008534:	429a      	cmp	r2, r3
 8008536:	d205      	bcs.n	8008544 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008544:	4b7e      	ldr	r3, [pc, #504]	; (8008740 <tcp_receive+0x2c0>)
 8008546:	681a      	ldr	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800854c:	4b7d      	ldr	r3, [pc, #500]	; (8008744 <tcp_receive+0x2c4>)
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008554:	4b7b      	ldr	r3, [pc, #492]	; (8008744 <tcp_receive+0x2c4>)
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	2b00      	cmp	r3, #0
 8008560:	dc58      	bgt.n	8008614 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008562:	4b7a      	ldr	r3, [pc, #488]	; (800874c <tcp_receive+0x2cc>)
 8008564:	881b      	ldrh	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d14b      	bne.n	8008602 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008574:	4413      	add	r3, r2
 8008576:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008578:	429a      	cmp	r2, r3
 800857a:	d142      	bne.n	8008602 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008582:	2b00      	cmp	r3, #0
 8008584:	db3d      	blt.n	8008602 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	4b6e      	ldr	r3, [pc, #440]	; (8008744 <tcp_receive+0x2c4>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	429a      	cmp	r2, r3
 8008590:	d137      	bne.n	8008602 <tcp_receive+0x182>
              found_dupack = 1;
 8008592:	2301      	movs	r3, #1
 8008594:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800859c:	2bff      	cmp	r3, #255	; 0xff
 800859e:	d007      	beq.n	80085b0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085a6:	3301      	adds	r3, #1
 80085a8:	b2da      	uxtb	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d91b      	bls.n	80085f2 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085c4:	4413      	add	r3, r2
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d30a      	bcc.n	80085e8 <tcp_receive+0x168>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80085dc:	4413      	add	r3, r2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80085e6:	e004      	b.n	80085f2 <tcp_receive+0x172>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80085ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80085f8:	2b02      	cmp	r3, #2
 80085fa:	d902      	bls.n	8008602 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f001 feed 	bl	800a3dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008604:	2b00      	cmp	r3, #0
 8008606:	f040 8160 	bne.w	80088ca <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008612:	e15a      	b.n	80088ca <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008614:	4b4b      	ldr	r3, [pc, #300]	; (8008744 <tcp_receive+0x2c4>)
 8008616:	681a      	ldr	r2, [r3, #0]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800861c:	1ad3      	subs	r3, r2, r3
 800861e:	3b01      	subs	r3, #1
 8008620:	2b00      	cmp	r3, #0
 8008622:	f2c0 814d 	blt.w	80088c0 <tcp_receive+0x440>
 8008626:	4b47      	ldr	r3, [pc, #284]	; (8008744 <tcp_receive+0x2c4>)
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	2b00      	cmp	r3, #0
 8008632:	f300 8145 	bgt.w	80088c0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	8b5b      	ldrh	r3, [r3, #26]
 800863a:	f003 0304 	and.w	r3, r3, #4
 800863e:	2b00      	cmp	r3, #0
 8008640:	d010      	beq.n	8008664 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	8b5b      	ldrh	r3, [r3, #26]
 8008646:	f023 0304 	bic.w	r3, r3, #4
 800864a:	b29a      	uxth	r2, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008672:	10db      	asrs	r3, r3, #3
 8008674:	b21b      	sxth	r3, r3
 8008676:	b29a      	uxth	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800867e:	b29b      	uxth	r3, r3
 8008680:	4413      	add	r3, r2
 8008682:	b29b      	uxth	r3, r3
 8008684:	b21a      	sxth	r2, r3
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800868c:	4b2d      	ldr	r3, [pc, #180]	; (8008744 <tcp_receive+0x2c4>)
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	b29a      	uxth	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008696:	b29b      	uxth	r3, r3
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80086a4:	4b27      	ldr	r3, [pc, #156]	; (8008744 <tcp_receive+0x2c4>)
 80086a6:	681a      	ldr	r2, [r3, #0]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	7d1b      	ldrb	r3, [r3, #20]
 80086b0:	2b03      	cmp	r3, #3
 80086b2:	f240 8096 	bls.w	80087e2 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80086c2:	429a      	cmp	r2, r3
 80086c4:	d244      	bcs.n	8008750 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	8b5b      	ldrh	r3, [r3, #26]
 80086ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <tcp_receive+0x256>
 80086d2:	2301      	movs	r3, #1
 80086d4:	e000      	b.n	80086d8 <tcp_receive+0x258>
 80086d6:	2302      	movs	r3, #2
 80086d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80086dc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80086e0:	b29a      	uxth	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086e6:	fb12 f303 	smulbb	r3, r2, r3
 80086ea:	b29b      	uxth	r3, r3
 80086ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80086ee:	4293      	cmp	r3, r2
 80086f0:	bf28      	it	cs
 80086f2:	4613      	movcs	r3, r2
 80086f4:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80086fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80086fe:	4413      	add	r3, r2
 8008700:	b29a      	uxth	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008708:	429a      	cmp	r2, r3
 800870a:	d309      	bcc.n	8008720 <tcp_receive+0x2a0>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008712:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008714:	4413      	add	r3, r2
 8008716:	b29a      	uxth	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800871e:	e060      	b.n	80087e2 <tcp_receive+0x362>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800872a:	e05a      	b.n	80087e2 <tcp_receive+0x362>
 800872c:	08011ccc 	.word	0x08011ccc
 8008730:	08011ffc 	.word	0x08011ffc
 8008734:	08011d18 	.word	0x08011d18
 8008738:	08012018 	.word	0x08012018
 800873c:	20000588 	.word	0x20000588
 8008740:	2000057c 	.word	0x2000057c
 8008744:	20000580 	.word	0x20000580
 8008748:	2000056c 	.word	0x2000056c
 800874c:	20000586 	.word	0x20000586
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008756:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008758:	4413      	add	r3, r2
 800875a:	b29a      	uxth	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008762:	429a      	cmp	r2, r3
 8008764:	d309      	bcc.n	800877a <tcp_receive+0x2fa>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800876c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800876e:	4413      	add	r3, r2
 8008770:	b29a      	uxth	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008778:	e004      	b.n	8008784 <tcp_receive+0x304>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008780:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008790:	429a      	cmp	r2, r3
 8008792:	d326      	bcc.n	80087e2 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80087a0:	1ad3      	subs	r3, r2, r3
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087b4:	4413      	add	r3, r2
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80087be:	429a      	cmp	r2, r3
 80087c0:	d30a      	bcc.n	80087d8 <tcp_receive+0x358>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80087cc:	4413      	add	r3, r2
 80087ce:	b29a      	uxth	r2, r3
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80087d6:	e004      	b.n	80087e2 <tcp_receive+0x362>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087de:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80087ea:	4a98      	ldr	r2, [pc, #608]	; (8008a4c <tcp_receive+0x5cc>)
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f7ff fdcb 	bl	8008388 <tcp_free_acked_segments>
 80087f2:	4602      	mov	r2, r0
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008800:	4a93      	ldr	r2, [pc, #588]	; (8008a50 <tcp_receive+0x5d0>)
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f7ff fdc0 	bl	8008388 <tcp_free_acked_segments>
 8008808:	4602      	mov	r2, r0
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008812:	2b00      	cmp	r3, #0
 8008814:	d104      	bne.n	8008820 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800881c:	861a      	strh	r2, [r3, #48]	; 0x30
 800881e:	e002      	b.n	8008826 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2200      	movs	r2, #0
 8008824:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2200      	movs	r2, #0
 800882a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008830:	2b00      	cmp	r3, #0
 8008832:	d103      	bne.n	800883c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8008842:	4b84      	ldr	r3, [pc, #528]	; (8008a54 <tcp_receive+0x5d4>)
 8008844:	881b      	ldrh	r3, [r3, #0]
 8008846:	4413      	add	r3, r2
 8008848:	b29a      	uxth	r2, r3
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	8b5b      	ldrh	r3, [r3, #26]
 8008854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008858:	2b00      	cmp	r3, #0
 800885a:	d035      	beq.n	80088c8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	2b00      	cmp	r3, #0
 8008862:	d118      	bne.n	8008896 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008868:	2b00      	cmp	r3, #0
 800886a:	d00c      	beq.n	8008886 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008874:	68db      	ldr	r3, [r3, #12]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	4618      	mov	r0, r3
 800887a:	f7fa fdca 	bl	8003412 <lwip_htonl>
 800887e:	4603      	mov	r3, r0
 8008880:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8008882:	2b00      	cmp	r3, #0
 8008884:	dc20      	bgt.n	80088c8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	8b5b      	ldrh	r3, [r3, #26]
 800888a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800888e:	b29a      	uxth	r2, r3
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008894:	e018      	b.n	80088c8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7fa fdb5 	bl	8003412 <lwip_htonl>
 80088a8:	4603      	mov	r3, r0
 80088aa:	1ae3      	subs	r3, r4, r3
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	dc0b      	bgt.n	80088c8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	8b5b      	ldrh	r3, [r3, #26]
 80088b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80088b8:	b29a      	uxth	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088be:	e003      	b.n	80088c8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f001 ff83 	bl	800a7cc <tcp_send_empty_ack>
 80088c6:	e000      	b.n	80088ca <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80088c8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d05b      	beq.n	800898a <tcp_receive+0x50a>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088d6:	4b60      	ldr	r3, [pc, #384]	; (8008a58 <tcp_receive+0x5d8>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	1ad3      	subs	r3, r2, r3
 80088dc:	2b00      	cmp	r3, #0
 80088de:	da54      	bge.n	800898a <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80088e0:	4b5e      	ldr	r3, [pc, #376]	; (8008a5c <tcp_receive+0x5dc>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	b29a      	uxth	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	b29b      	uxth	r3, r3
 80088f0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80088f4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80088fe:	10db      	asrs	r3, r3, #3
 8008900:	b21b      	sxth	r3, r3
 8008902:	b29b      	uxth	r3, r3
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	b29b      	uxth	r3, r3
 8008908:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008912:	b29a      	uxth	r2, r3
 8008914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008918:	4413      	add	r3, r2
 800891a:	b29b      	uxth	r3, r3
 800891c:	b21a      	sxth	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8008922:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8008926:	2b00      	cmp	r3, #0
 8008928:	da05      	bge.n	8008936 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800892a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800892e:	425b      	negs	r3, r3
 8008930:	b29b      	uxth	r3, r3
 8008932:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8008936:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008940:	109b      	asrs	r3, r3, #2
 8008942:	b21b      	sxth	r3, r3
 8008944:	b29b      	uxth	r3, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	b29b      	uxth	r3, r3
 800894a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008954:	b29a      	uxth	r2, r3
 8008956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800895a:	4413      	add	r3, r2
 800895c:	b29b      	uxth	r3, r3
 800895e:	b21a      	sxth	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800896a:	10db      	asrs	r3, r3, #3
 800896c:	b21b      	sxth	r3, r3
 800896e:	b29a      	uxth	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008976:	b29b      	uxth	r3, r3
 8008978:	4413      	add	r3, r2
 800897a:	b29b      	uxth	r3, r3
 800897c:	b21a      	sxth	r2, r3
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800898a:	4b35      	ldr	r3, [pc, #212]	; (8008a60 <tcp_receive+0x5e0>)
 800898c:	881b      	ldrh	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 84e1 	beq.w	8009356 <tcp_receive+0xed6>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	7d1b      	ldrb	r3, [r3, #20]
 8008998:	2b06      	cmp	r3, #6
 800899a:	f200 84dc 	bhi.w	8009356 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089a2:	4b30      	ldr	r3, [pc, #192]	; (8008a64 <tcp_receive+0x5e4>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	1ad3      	subs	r3, r2, r3
 80089a8:	3b01      	subs	r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	f2c0 808e 	blt.w	8008acc <tcp_receive+0x64c>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089b4:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <tcp_receive+0x5e0>)
 80089b6:	881b      	ldrh	r3, [r3, #0]
 80089b8:	4619      	mov	r1, r3
 80089ba:	4b2a      	ldr	r3, [pc, #168]	; (8008a64 <tcp_receive+0x5e4>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	440b      	add	r3, r1
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	3301      	adds	r3, #1
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f300 8081 	bgt.w	8008acc <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80089ca:	4b27      	ldr	r3, [pc, #156]	; (8008a68 <tcp_receive+0x5e8>)
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089d4:	4b23      	ldr	r3, [pc, #140]	; (8008a64 <tcp_receive+0x5e4>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80089dc:	4b22      	ldr	r3, [pc, #136]	; (8008a68 <tcp_receive+0x5e8>)
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d106      	bne.n	80089f2 <tcp_receive+0x572>
 80089e4:	4b21      	ldr	r3, [pc, #132]	; (8008a6c <tcp_receive+0x5ec>)
 80089e6:	f240 5294 	movw	r2, #1428	; 0x594
 80089ea:	4921      	ldr	r1, [pc, #132]	; (8008a70 <tcp_receive+0x5f0>)
 80089ec:	4821      	ldr	r0, [pc, #132]	; (8008a74 <tcp_receive+0x5f4>)
 80089ee:	f007 f8d1 	bl	800fb94 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80089f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d906      	bls.n	8008a0a <tcp_receive+0x58a>
 80089fc:	4b1b      	ldr	r3, [pc, #108]	; (8008a6c <tcp_receive+0x5ec>)
 80089fe:	f240 5295 	movw	r2, #1429	; 0x595
 8008a02:	491d      	ldr	r1, [pc, #116]	; (8008a78 <tcp_receive+0x5f8>)
 8008a04:	481b      	ldr	r0, [pc, #108]	; (8008a74 <tcp_receive+0x5f4>)
 8008a06:	f007 f8c5 	bl	800fb94 <iprintf>
      off = (u16_t)off32;
 8008a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a0c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8008a10:	4b15      	ldr	r3, [pc, #84]	; (8008a68 <tcp_receive+0x5e8>)
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	891b      	ldrh	r3, [r3, #8]
 8008a16:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008a1a:	429a      	cmp	r2, r3
 8008a1c:	d906      	bls.n	8008a2c <tcp_receive+0x5ac>
 8008a1e:	4b13      	ldr	r3, [pc, #76]	; (8008a6c <tcp_receive+0x5ec>)
 8008a20:	f240 5297 	movw	r2, #1431	; 0x597
 8008a24:	4915      	ldr	r1, [pc, #84]	; (8008a7c <tcp_receive+0x5fc>)
 8008a26:	4813      	ldr	r0, [pc, #76]	; (8008a74 <tcp_receive+0x5f4>)
 8008a28:	f007 f8b4 	bl	800fb94 <iprintf>
      inseg.len -= off;
 8008a2c:	4b0e      	ldr	r3, [pc, #56]	; (8008a68 <tcp_receive+0x5e8>)
 8008a2e:	891a      	ldrh	r2, [r3, #8]
 8008a30:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	4b0b      	ldr	r3, [pc, #44]	; (8008a68 <tcp_receive+0x5e8>)
 8008a3a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8008a3c:	4b0a      	ldr	r3, [pc, #40]	; (8008a68 <tcp_receive+0x5e8>)
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	891a      	ldrh	r2, [r3, #8]
 8008a42:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008a46:	1ad3      	subs	r3, r2, r3
 8008a48:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8008a4a:	e029      	b.n	8008aa0 <tcp_receive+0x620>
 8008a4c:	08012034 	.word	0x08012034
 8008a50:	0801203c 	.word	0x0801203c
 8008a54:	20000584 	.word	0x20000584
 8008a58:	20000580 	.word	0x20000580
 8008a5c:	20006d54 	.word	0x20006d54
 8008a60:	20000586 	.word	0x20000586
 8008a64:	2000057c 	.word	0x2000057c
 8008a68:	2000055c 	.word	0x2000055c
 8008a6c:	08011ccc 	.word	0x08011ccc
 8008a70:	08012044 	.word	0x08012044
 8008a74:	08011d18 	.word	0x08011d18
 8008a78:	08012054 	.word	0x08012054
 8008a7c:	08012064 	.word	0x08012064
        off -= p->len;
 8008a80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a82:	895b      	ldrh	r3, [r3, #10]
 8008a84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008a88:	1ad3      	subs	r3, r2, r3
 8008a8a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8008a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a90:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8008a92:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8008a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a96:	2200      	movs	r2, #0
 8008a98:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8008a9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8008aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008aa2:	895b      	ldrh	r3, [r3, #10]
 8008aa4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d8e9      	bhi.n	8008a80 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8008aac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8008ab4:	f7fc fa22 	bl	8004efc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008abc:	4a91      	ldr	r2, [pc, #580]	; (8008d04 <tcp_receive+0x884>)
 8008abe:	6013      	str	r3, [r2, #0]
 8008ac0:	4b91      	ldr	r3, [pc, #580]	; (8008d08 <tcp_receive+0x888>)
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	4a8f      	ldr	r2, [pc, #572]	; (8008d04 <tcp_receive+0x884>)
 8008ac6:	6812      	ldr	r2, [r2, #0]
 8008ac8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8008aca:	e00d      	b.n	8008ae8 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8008acc:	4b8d      	ldr	r3, [pc, #564]	; (8008d04 <tcp_receive+0x884>)
 8008ace:	681a      	ldr	r2, [r3, #0]
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	da06      	bge.n	8008ae8 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	8b5b      	ldrh	r3, [r3, #26]
 8008ade:	f043 0302 	orr.w	r3, r3, #2
 8008ae2:	b29a      	uxth	r2, r3
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008ae8:	4b86      	ldr	r3, [pc, #536]	; (8008d04 <tcp_receive+0x884>)
 8008aea:	681a      	ldr	r2, [r3, #0]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	f2c0 842a 	blt.w	800934c <tcp_receive+0xecc>
 8008af8:	4b82      	ldr	r3, [pc, #520]	; (8008d04 <tcp_receive+0x884>)
 8008afa:	681a      	ldr	r2, [r3, #0]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b00:	6879      	ldr	r1, [r7, #4]
 8008b02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008b04:	440b      	add	r3, r1
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f300 841e 	bgt.w	800934c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b14:	4b7b      	ldr	r3, [pc, #492]	; (8008d04 <tcp_receive+0x884>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	f040 829a 	bne.w	8009052 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8008b1e:	4b7a      	ldr	r3, [pc, #488]	; (8008d08 <tcp_receive+0x888>)
 8008b20:	891c      	ldrh	r4, [r3, #8]
 8008b22:	4b79      	ldr	r3, [pc, #484]	; (8008d08 <tcp_receive+0x888>)
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	899b      	ldrh	r3, [r3, #12]
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fa fc5c 	bl	80033e8 <lwip_htons>
 8008b30:	4603      	mov	r3, r0
 8008b32:	b2db      	uxtb	r3, r3
 8008b34:	f003 0303 	and.w	r3, r3, #3
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d001      	beq.n	8008b40 <tcp_receive+0x6c0>
 8008b3c:	2301      	movs	r3, #1
 8008b3e:	e000      	b.n	8008b42 <tcp_receive+0x6c2>
 8008b40:	2300      	movs	r3, #0
 8008b42:	4423      	add	r3, r4
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	4b71      	ldr	r3, [pc, #452]	; (8008d0c <tcp_receive+0x88c>)
 8008b48:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008b4e:	4b6f      	ldr	r3, [pc, #444]	; (8008d0c <tcp_receive+0x88c>)
 8008b50:	881b      	ldrh	r3, [r3, #0]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d275      	bcs.n	8008c42 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008b56:	4b6c      	ldr	r3, [pc, #432]	; (8008d08 <tcp_receive+0x888>)
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	899b      	ldrh	r3, [r3, #12]
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	4618      	mov	r0, r3
 8008b60:	f7fa fc42 	bl	80033e8 <lwip_htons>
 8008b64:	4603      	mov	r3, r0
 8008b66:	b2db      	uxtb	r3, r3
 8008b68:	f003 0301 	and.w	r3, r3, #1
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d01f      	beq.n	8008bb0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8008b70:	4b65      	ldr	r3, [pc, #404]	; (8008d08 <tcp_receive+0x888>)
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	899b      	ldrh	r3, [r3, #12]
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	b21b      	sxth	r3, r3
 8008b7a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b7e:	b21c      	sxth	r4, r3
 8008b80:	4b61      	ldr	r3, [pc, #388]	; (8008d08 <tcp_receive+0x888>)
 8008b82:	68db      	ldr	r3, [r3, #12]
 8008b84:	899b      	ldrh	r3, [r3, #12]
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7fa fc2d 	bl	80033e8 <lwip_htons>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	b2db      	uxtb	r3, r3
 8008b92:	b29b      	uxth	r3, r3
 8008b94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8008b98:	b29b      	uxth	r3, r3
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7fa fc24 	bl	80033e8 <lwip_htons>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	b21b      	sxth	r3, r3
 8008ba4:	4323      	orrs	r3, r4
 8008ba6:	b21a      	sxth	r2, r3
 8008ba8:	4b57      	ldr	r3, [pc, #348]	; (8008d08 <tcp_receive+0x888>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	b292      	uxth	r2, r2
 8008bae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008bb4:	4b54      	ldr	r3, [pc, #336]	; (8008d08 <tcp_receive+0x888>)
 8008bb6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008bb8:	4b53      	ldr	r3, [pc, #332]	; (8008d08 <tcp_receive+0x888>)
 8008bba:	68db      	ldr	r3, [r3, #12]
 8008bbc:	899b      	ldrh	r3, [r3, #12]
 8008bbe:	b29b      	uxth	r3, r3
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f7fa fc11 	bl	80033e8 <lwip_htons>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	b2db      	uxtb	r3, r3
 8008bca:	f003 0302 	and.w	r3, r3, #2
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d005      	beq.n	8008bde <tcp_receive+0x75e>
            inseg.len -= 1;
 8008bd2:	4b4d      	ldr	r3, [pc, #308]	; (8008d08 <tcp_receive+0x888>)
 8008bd4:	891b      	ldrh	r3, [r3, #8]
 8008bd6:	3b01      	subs	r3, #1
 8008bd8:	b29a      	uxth	r2, r3
 8008bda:	4b4b      	ldr	r3, [pc, #300]	; (8008d08 <tcp_receive+0x888>)
 8008bdc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8008bde:	4b4a      	ldr	r3, [pc, #296]	; (8008d08 <tcp_receive+0x888>)
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	4b49      	ldr	r3, [pc, #292]	; (8008d08 <tcp_receive+0x888>)
 8008be4:	891b      	ldrh	r3, [r3, #8]
 8008be6:	4619      	mov	r1, r3
 8008be8:	4610      	mov	r0, r2
 8008bea:	f7fc f887 	bl	8004cfc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8008bee:	4b46      	ldr	r3, [pc, #280]	; (8008d08 <tcp_receive+0x888>)
 8008bf0:	891c      	ldrh	r4, [r3, #8]
 8008bf2:	4b45      	ldr	r3, [pc, #276]	; (8008d08 <tcp_receive+0x888>)
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	899b      	ldrh	r3, [r3, #12]
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7fa fbf4 	bl	80033e8 <lwip_htons>
 8008c00:	4603      	mov	r3, r0
 8008c02:	b2db      	uxtb	r3, r3
 8008c04:	f003 0303 	and.w	r3, r3, #3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d001      	beq.n	8008c10 <tcp_receive+0x790>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	e000      	b.n	8008c12 <tcp_receive+0x792>
 8008c10:	2300      	movs	r3, #0
 8008c12:	4423      	add	r3, r4
 8008c14:	b29a      	uxth	r2, r3
 8008c16:	4b3d      	ldr	r3, [pc, #244]	; (8008d0c <tcp_receive+0x88c>)
 8008c18:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8008c1a:	4b3c      	ldr	r3, [pc, #240]	; (8008d0c <tcp_receive+0x88c>)
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	461a      	mov	r2, r3
 8008c20:	4b38      	ldr	r3, [pc, #224]	; (8008d04 <tcp_receive+0x884>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	441a      	add	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2a:	6879      	ldr	r1, [r7, #4]
 8008c2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8008c2e:	440b      	add	r3, r1
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d006      	beq.n	8008c42 <tcp_receive+0x7c2>
 8008c34:	4b36      	ldr	r3, [pc, #216]	; (8008d10 <tcp_receive+0x890>)
 8008c36:	f240 52cc 	movw	r2, #1484	; 0x5cc
 8008c3a:	4936      	ldr	r1, [pc, #216]	; (8008d14 <tcp_receive+0x894>)
 8008c3c:	4836      	ldr	r0, [pc, #216]	; (8008d18 <tcp_receive+0x898>)
 8008c3e:	f006 ffa9 	bl	800fb94 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	f000 80e7 	beq.w	8008e1a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008c4c:	4b2e      	ldr	r3, [pc, #184]	; (8008d08 <tcp_receive+0x888>)
 8008c4e:	68db      	ldr	r3, [r3, #12]
 8008c50:	899b      	ldrh	r3, [r3, #12]
 8008c52:	b29b      	uxth	r3, r3
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7fa fbc7 	bl	80033e8 <lwip_htons>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	b2db      	uxtb	r3, r3
 8008c5e:	f003 0301 	and.w	r3, r3, #1
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d010      	beq.n	8008c88 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8008c66:	e00a      	b.n	8008c7e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c6c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8008c78:	68f8      	ldr	r0, [r7, #12]
 8008c7a:	f7fd fd97 	bl	80067ac <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d1f0      	bne.n	8008c68 <tcp_receive+0x7e8>
 8008c86:	e0c8      	b.n	8008e1a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c8c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8008c8e:	e052      	b.n	8008d36 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	68db      	ldr	r3, [r3, #12]
 8008c94:	899b      	ldrh	r3, [r3, #12]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f7fa fba5 	bl	80033e8 <lwip_htons>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03d      	beq.n	8008d26 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8008caa:	4b17      	ldr	r3, [pc, #92]	; (8008d08 <tcp_receive+0x888>)
 8008cac:	68db      	ldr	r3, [r3, #12]
 8008cae:	899b      	ldrh	r3, [r3, #12]
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	f7fa fb98 	bl	80033e8 <lwip_htons>
 8008cb8:	4603      	mov	r3, r0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d130      	bne.n	8008d26 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8008cc4:	4b10      	ldr	r3, [pc, #64]	; (8008d08 <tcp_receive+0x888>)
 8008cc6:	68db      	ldr	r3, [r3, #12]
 8008cc8:	899b      	ldrh	r3, [r3, #12]
 8008cca:	b29c      	uxth	r4, r3
 8008ccc:	2001      	movs	r0, #1
 8008cce:	f7fa fb8b 	bl	80033e8 <lwip_htons>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	4b0c      	ldr	r3, [pc, #48]	; (8008d08 <tcp_receive+0x888>)
 8008cd8:	68db      	ldr	r3, [r3, #12]
 8008cda:	4322      	orrs	r2, r4
 8008cdc:	b292      	uxth	r2, r2
 8008cde:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8008ce0:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <tcp_receive+0x888>)
 8008ce2:	891c      	ldrh	r4, [r3, #8]
 8008ce4:	4b08      	ldr	r3, [pc, #32]	; (8008d08 <tcp_receive+0x888>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	899b      	ldrh	r3, [r3, #12]
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	4618      	mov	r0, r3
 8008cee:	f7fa fb7b 	bl	80033e8 <lwip_htons>
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00e      	beq.n	8008d1c <tcp_receive+0x89c>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e00d      	b.n	8008d1e <tcp_receive+0x89e>
 8008d02:	bf00      	nop
 8008d04:	2000057c 	.word	0x2000057c
 8008d08:	2000055c 	.word	0x2000055c
 8008d0c:	20000586 	.word	0x20000586
 8008d10:	08011ccc 	.word	0x08011ccc
 8008d14:	08012074 	.word	0x08012074
 8008d18:	08011d18 	.word	0x08011d18
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4423      	add	r3, r4
 8008d20:	b29a      	uxth	r2, r3
 8008d22:	4b98      	ldr	r3, [pc, #608]	; (8008f84 <tcp_receive+0xb04>)
 8008d24:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8008d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d28:	613b      	str	r3, [r7, #16]
              next = next->next;
 8008d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8008d30:	6938      	ldr	r0, [r7, #16]
 8008d32:	f7fd fd3b 	bl	80067ac <tcp_seg_free>
            while (next &&
 8008d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d00e      	beq.n	8008d5a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8008d3c:	4b91      	ldr	r3, [pc, #580]	; (8008f84 <tcp_receive+0xb04>)
 8008d3e:	881b      	ldrh	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	4b91      	ldr	r3, [pc, #580]	; (8008f88 <tcp_receive+0xb08>)
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	441a      	add	r2, r3
 8008d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4a:	68db      	ldr	r3, [r3, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d50:	8909      	ldrh	r1, [r1, #8]
 8008d52:	440b      	add	r3, r1
 8008d54:	1ad3      	subs	r3, r2, r3
            while (next &&
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	da9a      	bge.n	8008c90 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8008d5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d059      	beq.n	8008e14 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8008d60:	4b88      	ldr	r3, [pc, #544]	; (8008f84 <tcp_receive+0xb04>)
 8008d62:	881b      	ldrh	r3, [r3, #0]
 8008d64:	461a      	mov	r2, r3
 8008d66:	4b88      	ldr	r3, [pc, #544]	; (8008f88 <tcp_receive+0xb08>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	441a      	add	r2, r3
 8008d6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d6e:	68db      	ldr	r3, [r3, #12]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	1ad3      	subs	r3, r2, r3
            if (next &&
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	dd4d      	ble.n	8008e14 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8008d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	685b      	ldr	r3, [r3, #4]
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	4b81      	ldr	r3, [pc, #516]	; (8008f88 <tcp_receive+0xb08>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	1ad3      	subs	r3, r2, r3
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	4b80      	ldr	r3, [pc, #512]	; (8008f8c <tcp_receive+0xb0c>)
 8008d8c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8008d8e:	4b7f      	ldr	r3, [pc, #508]	; (8008f8c <tcp_receive+0xb0c>)
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	899b      	ldrh	r3, [r3, #12]
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fa fb26 	bl	80033e8 <lwip_htons>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 0302 	and.w	r3, r3, #2
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <tcp_receive+0x934>
                inseg.len -= 1;
 8008da8:	4b78      	ldr	r3, [pc, #480]	; (8008f8c <tcp_receive+0xb0c>)
 8008daa:	891b      	ldrh	r3, [r3, #8]
 8008dac:	3b01      	subs	r3, #1
 8008dae:	b29a      	uxth	r2, r3
 8008db0:	4b76      	ldr	r3, [pc, #472]	; (8008f8c <tcp_receive+0xb0c>)
 8008db2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8008db4:	4b75      	ldr	r3, [pc, #468]	; (8008f8c <tcp_receive+0xb0c>)
 8008db6:	685a      	ldr	r2, [r3, #4]
 8008db8:	4b74      	ldr	r3, [pc, #464]	; (8008f8c <tcp_receive+0xb0c>)
 8008dba:	891b      	ldrh	r3, [r3, #8]
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	f7fb ff9c 	bl	8004cfc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8008dc4:	4b71      	ldr	r3, [pc, #452]	; (8008f8c <tcp_receive+0xb0c>)
 8008dc6:	891c      	ldrh	r4, [r3, #8]
 8008dc8:	4b70      	ldr	r3, [pc, #448]	; (8008f8c <tcp_receive+0xb0c>)
 8008dca:	68db      	ldr	r3, [r3, #12]
 8008dcc:	899b      	ldrh	r3, [r3, #12]
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7fa fb09 	bl	80033e8 <lwip_htons>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <tcp_receive+0x966>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <tcp_receive+0x968>
 8008de6:	2300      	movs	r3, #0
 8008de8:	4423      	add	r3, r4
 8008dea:	b29a      	uxth	r2, r3
 8008dec:	4b65      	ldr	r3, [pc, #404]	; (8008f84 <tcp_receive+0xb04>)
 8008dee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8008df0:	4b64      	ldr	r3, [pc, #400]	; (8008f84 <tcp_receive+0xb04>)
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b64      	ldr	r3, [pc, #400]	; (8008f88 <tcp_receive+0xb08>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	441a      	add	r2, r3
 8008dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dfe:	68db      	ldr	r3, [r3, #12]
 8008e00:	685b      	ldr	r3, [r3, #4]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d006      	beq.n	8008e14 <tcp_receive+0x994>
 8008e06:	4b62      	ldr	r3, [pc, #392]	; (8008f90 <tcp_receive+0xb10>)
 8008e08:	f240 52fd 	movw	r2, #1533	; 0x5fd
 8008e0c:	4961      	ldr	r1, [pc, #388]	; (8008f94 <tcp_receive+0xb14>)
 8008e0e:	4862      	ldr	r0, [pc, #392]	; (8008f98 <tcp_receive+0xb18>)
 8008e10:	f006 fec0 	bl	800fb94 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e18:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8008e1a:	4b5a      	ldr	r3, [pc, #360]	; (8008f84 <tcp_receive+0xb04>)
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	461a      	mov	r2, r3
 8008e20:	4b59      	ldr	r3, [pc, #356]	; (8008f88 <tcp_receive+0xb08>)
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	441a      	add	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e2e:	4b55      	ldr	r3, [pc, #340]	; (8008f84 <tcp_receive+0xb04>)
 8008e30:	881b      	ldrh	r3, [r3, #0]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d206      	bcs.n	8008e44 <tcp_receive+0x9c4>
 8008e36:	4b56      	ldr	r3, [pc, #344]	; (8008f90 <tcp_receive+0xb10>)
 8008e38:	f240 6207 	movw	r2, #1543	; 0x607
 8008e3c:	4957      	ldr	r1, [pc, #348]	; (8008f9c <tcp_receive+0xb1c>)
 8008e3e:	4856      	ldr	r0, [pc, #344]	; (8008f98 <tcp_receive+0xb18>)
 8008e40:	f006 fea8 	bl	800fb94 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008e48:	4b4e      	ldr	r3, [pc, #312]	; (8008f84 <tcp_receive+0xb04>)
 8008e4a:	881b      	ldrh	r3, [r3, #0]
 8008e4c:	1ad3      	subs	r3, r2, r3
 8008e4e:	b29a      	uxth	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f7fc ffcd 	bl	8005df4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8008e5a:	4b4c      	ldr	r3, [pc, #304]	; (8008f8c <tcp_receive+0xb0c>)
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	891b      	ldrh	r3, [r3, #8]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d006      	beq.n	8008e72 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8008e64:	4b49      	ldr	r3, [pc, #292]	; (8008f8c <tcp_receive+0xb0c>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	4a4d      	ldr	r2, [pc, #308]	; (8008fa0 <tcp_receive+0xb20>)
 8008e6a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8008e6c:	4b47      	ldr	r3, [pc, #284]	; (8008f8c <tcp_receive+0xb0c>)
 8008e6e:	2200      	movs	r2, #0
 8008e70:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8008e72:	4b46      	ldr	r3, [pc, #280]	; (8008f8c <tcp_receive+0xb0c>)
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	899b      	ldrh	r3, [r3, #12]
 8008e78:	b29b      	uxth	r3, r3
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fa fab4 	bl	80033e8 <lwip_htons>
 8008e80:	4603      	mov	r3, r0
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 0301 	and.w	r3, r3, #1
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f000 80b8 	beq.w	8008ffe <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8008e8e:	4b45      	ldr	r3, [pc, #276]	; (8008fa4 <tcp_receive+0xb24>)
 8008e90:	781b      	ldrb	r3, [r3, #0]
 8008e92:	f043 0320 	orr.w	r3, r3, #32
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	4b42      	ldr	r3, [pc, #264]	; (8008fa4 <tcp_receive+0xb24>)
 8008e9a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8008e9c:	e0af      	b.n	8008ffe <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	4a36      	ldr	r2, [pc, #216]	; (8008f88 <tcp_receive+0xb08>)
 8008eae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	891b      	ldrh	r3, [r3, #8]
 8008eb4:	461c      	mov	r4, r3
 8008eb6:	68bb      	ldr	r3, [r7, #8]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	899b      	ldrh	r3, [r3, #12]
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7fa fa92 	bl	80033e8 <lwip_htons>
 8008ec4:	4603      	mov	r3, r0
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <tcp_receive+0xa54>
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	e000      	b.n	8008ed6 <tcp_receive+0xa56>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	191a      	adds	r2, r3, r4
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008edc:	441a      	add	r2, r3
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee6:	461c      	mov	r4, r3
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	891b      	ldrh	r3, [r3, #8]
 8008eec:	461d      	mov	r5, r3
 8008eee:	68bb      	ldr	r3, [r7, #8]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	899b      	ldrh	r3, [r3, #12]
 8008ef4:	b29b      	uxth	r3, r3
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fa fa76 	bl	80033e8 <lwip_htons>
 8008efc:	4603      	mov	r3, r0
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	f003 0303 	and.w	r3, r3, #3
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d001      	beq.n	8008f0c <tcp_receive+0xa8c>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <tcp_receive+0xa8e>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	442b      	add	r3, r5
 8008f10:	429c      	cmp	r4, r3
 8008f12:	d206      	bcs.n	8008f22 <tcp_receive+0xaa2>
 8008f14:	4b1e      	ldr	r3, [pc, #120]	; (8008f90 <tcp_receive+0xb10>)
 8008f16:	f240 622c 	movw	r2, #1580	; 0x62c
 8008f1a:	4923      	ldr	r1, [pc, #140]	; (8008fa8 <tcp_receive+0xb28>)
 8008f1c:	481e      	ldr	r0, [pc, #120]	; (8008f98 <tcp_receive+0xb18>)
 8008f1e:	f006 fe39 	bl	800fb94 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	891b      	ldrh	r3, [r3, #8]
 8008f26:	461c      	mov	r4, r3
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	68db      	ldr	r3, [r3, #12]
 8008f2c:	899b      	ldrh	r3, [r3, #12]
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	4618      	mov	r0, r3
 8008f32:	f7fa fa59 	bl	80033e8 <lwip_htons>
 8008f36:	4603      	mov	r3, r0
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f003 0303 	and.w	r3, r3, #3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <tcp_receive+0xac6>
 8008f42:	2301      	movs	r3, #1
 8008f44:	e000      	b.n	8008f48 <tcp_receive+0xac8>
 8008f46:	2300      	movs	r3, #0
 8008f48:	1919      	adds	r1, r3, r4
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8008f4e:	b28b      	uxth	r3, r1
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fc ff4b 	bl	8005df4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	891b      	ldrh	r3, [r3, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d028      	beq.n	8008fba <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8008f68:	4b0d      	ldr	r3, [pc, #52]	; (8008fa0 <tcp_receive+0xb20>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d01d      	beq.n	8008fac <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8008f70:	4b0b      	ldr	r3, [pc, #44]	; (8008fa0 <tcp_receive+0xb20>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	4619      	mov	r1, r3
 8008f7a:	4610      	mov	r0, r2
 8008f7c:	f7fc f906 	bl	800518c <pbuf_cat>
 8008f80:	e018      	b.n	8008fb4 <tcp_receive+0xb34>
 8008f82:	bf00      	nop
 8008f84:	20000586 	.word	0x20000586
 8008f88:	2000057c 	.word	0x2000057c
 8008f8c:	2000055c 	.word	0x2000055c
 8008f90:	08011ccc 	.word	0x08011ccc
 8008f94:	080120ac 	.word	0x080120ac
 8008f98:	08011d18 	.word	0x08011d18
 8008f9c:	080120e8 	.word	0x080120e8
 8008fa0:	2000058c 	.word	0x2000058c
 8008fa4:	20000589 	.word	0x20000589
 8008fa8:	08012108 	.word	0x08012108
            } else {
              recv_data = cseg->p;
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	4a70      	ldr	r2, [pc, #448]	; (8009174 <tcp_receive+0xcf4>)
 8008fb2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	68db      	ldr	r3, [r3, #12]
 8008fbe:	899b      	ldrh	r3, [r3, #12]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fa fa10 	bl	80033e8 <lwip_htons>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	f003 0301 	and.w	r3, r3, #1
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00d      	beq.n	8008ff0 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8008fd4:	4b68      	ldr	r3, [pc, #416]	; (8009178 <tcp_receive+0xcf8>)
 8008fd6:	781b      	ldrb	r3, [r3, #0]
 8008fd8:	f043 0320 	orr.w	r3, r3, #32
 8008fdc:	b2da      	uxtb	r2, r3
 8008fde:	4b66      	ldr	r3, [pc, #408]	; (8009178 <tcp_receive+0xcf8>)
 8008fe0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	7d1b      	ldrb	r3, [r3, #20]
 8008fe6:	2b04      	cmp	r3, #4
 8008fe8:	d102      	bne.n	8008ff0 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2207      	movs	r2, #7
 8008fee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8008ff8:	68b8      	ldr	r0, [r7, #8]
 8008ffa:	f7fd fbd7 	bl	80067ac <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009002:	2b00      	cmp	r3, #0
 8009004:	d008      	beq.n	8009018 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800900a:	68db      	ldr	r3, [r3, #12]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009012:	429a      	cmp	r2, r3
 8009014:	f43f af43 	beq.w	8008e9e <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	8b5b      	ldrh	r3, [r3, #26]
 800901c:	f003 0301 	and.w	r3, r3, #1
 8009020:	2b00      	cmp	r3, #0
 8009022:	d00e      	beq.n	8009042 <tcp_receive+0xbc2>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	8b5b      	ldrh	r3, [r3, #26]
 8009028:	f023 0301 	bic.w	r3, r3, #1
 800902c:	b29a      	uxth	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	835a      	strh	r2, [r3, #26]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	8b5b      	ldrh	r3, [r3, #26]
 8009036:	f043 0302 	orr.w	r3, r3, #2
 800903a:	b29a      	uxth	r2, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009040:	e188      	b.n	8009354 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	8b5b      	ldrh	r3, [r3, #26]
 8009046:	f043 0301 	orr.w	r3, r3, #1
 800904a:	b29a      	uxth	r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009050:	e180      	b.n	8009354 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800905a:	4848      	ldr	r0, [pc, #288]	; (800917c <tcp_receive+0xcfc>)
 800905c:	f7fd fbbe 	bl	80067dc <tcp_seg_copy>
 8009060:	4602      	mov	r2, r0
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	675a      	str	r2, [r3, #116]	; 0x74
 8009066:	e16d      	b.n	8009344 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009068:	2300      	movs	r3, #0
 800906a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009070:	63bb      	str	r3, [r7, #56]	; 0x38
 8009072:	e157      	b.n	8009324 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	685a      	ldr	r2, [r3, #4]
 800907a:	4b41      	ldr	r3, [pc, #260]	; (8009180 <tcp_receive+0xd00>)
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d11d      	bne.n	80090be <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8009082:	4b3e      	ldr	r3, [pc, #248]	; (800917c <tcp_receive+0xcfc>)
 8009084:	891a      	ldrh	r2, [r3, #8]
 8009086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009088:	891b      	ldrh	r3, [r3, #8]
 800908a:	429a      	cmp	r2, r3
 800908c:	f240 814f 	bls.w	800932e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009090:	483a      	ldr	r0, [pc, #232]	; (800917c <tcp_receive+0xcfc>)
 8009092:	f7fd fba3 	bl	80067dc <tcp_seg_copy>
 8009096:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	2b00      	cmp	r3, #0
 800909c:	f000 8149 	beq.w	8009332 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80090a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d003      	beq.n	80090ae <tcp_receive+0xc2e>
                    prev->next = cseg;
 80090a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090a8:	697a      	ldr	r2, [r7, #20]
 80090aa:	601a      	str	r2, [r3, #0]
 80090ac:	e002      	b.n	80090b4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80090b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090b6:	6978      	ldr	r0, [r7, #20]
 80090b8:	f7ff f8de 	bl	8008278 <tcp_oos_insert_segment>
                }
                break;
 80090bc:	e139      	b.n	8009332 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80090be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d117      	bne.n	80090f4 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80090c4:	4b2e      	ldr	r3, [pc, #184]	; (8009180 <tcp_receive+0xd00>)
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	68db      	ldr	r3, [r3, #12]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	da57      	bge.n	8009184 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80090d4:	4829      	ldr	r0, [pc, #164]	; (800917c <tcp_receive+0xcfc>)
 80090d6:	f7fd fb81 	bl	80067dc <tcp_seg_copy>
 80090da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f000 8129 	beq.w	8009336 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80090ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80090ec:	69b8      	ldr	r0, [r7, #24]
 80090ee:	f7ff f8c3 	bl	8008278 <tcp_oos_insert_segment>
                  }
                  break;
 80090f2:	e120      	b.n	8009336 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80090f4:	4b22      	ldr	r3, [pc, #136]	; (8009180 <tcp_receive+0xd00>)
 80090f6:	681a      	ldr	r2, [r3, #0]
 80090f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	685b      	ldr	r3, [r3, #4]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	3b01      	subs	r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	db3e      	blt.n	8009184 <tcp_receive+0xd04>
 8009106:	4b1e      	ldr	r3, [pc, #120]	; (8009180 <tcp_receive+0xd00>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800910c:	68db      	ldr	r3, [r3, #12]
 800910e:	685b      	ldr	r3, [r3, #4]
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	3301      	adds	r3, #1
 8009114:	2b00      	cmp	r3, #0
 8009116:	dc35      	bgt.n	8009184 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009118:	4818      	ldr	r0, [pc, #96]	; (800917c <tcp_receive+0xcfc>)
 800911a:	f7fd fb5f 	bl	80067dc <tcp_seg_copy>
 800911e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	2b00      	cmp	r3, #0
 8009124:	f000 8109 	beq.w	800933a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009130:	8912      	ldrh	r2, [r2, #8]
 8009132:	441a      	add	r2, r3
 8009134:	4b12      	ldr	r3, [pc, #72]	; (8009180 <tcp_receive+0xd00>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	2b00      	cmp	r3, #0
 800913c:	dd12      	ble.n	8009164 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800913e:	4b10      	ldr	r3, [pc, #64]	; (8009180 <tcp_receive+0xd00>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	b29a      	uxth	r2, r3
 8009144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009146:	68db      	ldr	r3, [r3, #12]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	b29b      	uxth	r3, r3
 800914c:	1ad3      	subs	r3, r2, r3
 800914e:	b29a      	uxth	r2, r3
 8009150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009152:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009156:	685a      	ldr	r2, [r3, #4]
 8009158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800915a:	891b      	ldrh	r3, [r3, #8]
 800915c:	4619      	mov	r1, r3
 800915e:	4610      	mov	r0, r2
 8009160:	f7fb fdcc 	bl	8004cfc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009166:	69fa      	ldr	r2, [r7, #28]
 8009168:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800916a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800916c:	69f8      	ldr	r0, [r7, #28]
 800916e:	f7ff f883 	bl	8008278 <tcp_oos_insert_segment>
                  }
                  break;
 8009172:	e0e2      	b.n	800933a <tcp_receive+0xeba>
 8009174:	2000058c 	.word	0x2000058c
 8009178:	20000589 	.word	0x20000589
 800917c:	2000055c 	.word	0x2000055c
 8009180:	2000057c 	.word	0x2000057c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8009188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	2b00      	cmp	r3, #0
 800918e:	f040 80c6 	bne.w	800931e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8009192:	4b80      	ldr	r3, [pc, #512]	; (8009394 <tcp_receive+0xf14>)
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800919e:	2b00      	cmp	r3, #0
 80091a0:	f340 80bd 	ble.w	800931e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80091a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	899b      	ldrh	r3, [r3, #12]
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fa f91b 	bl	80033e8 <lwip_htons>
 80091b2:	4603      	mov	r3, r0
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f040 80bf 	bne.w	800933e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80091c0:	4875      	ldr	r0, [pc, #468]	; (8009398 <tcp_receive+0xf18>)
 80091c2:	f7fd fb0b 	bl	80067dc <tcp_seg_copy>
 80091c6:	4602      	mov	r2, r0
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 80b6 	beq.w	8009342 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80091d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d8:	68db      	ldr	r3, [r3, #12]
 80091da:	685b      	ldr	r3, [r3, #4]
 80091dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80091de:	8912      	ldrh	r2, [r2, #8]
 80091e0:	441a      	add	r2, r3
 80091e2:	4b6c      	ldr	r3, [pc, #432]	; (8009394 <tcp_receive+0xf14>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	dd12      	ble.n	8009212 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80091ec:	4b69      	ldr	r3, [pc, #420]	; (8009394 <tcp_receive+0xf14>)
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f4:	68db      	ldr	r3, [r3, #12]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	b29b      	uxth	r3, r3
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009200:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009204:	685a      	ldr	r2, [r3, #4]
 8009206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009208:	891b      	ldrh	r3, [r3, #8]
 800920a:	4619      	mov	r1, r3
 800920c:	4610      	mov	r0, r2
 800920e:	f7fb fd75 	bl	8004cfc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009212:	4b62      	ldr	r3, [pc, #392]	; (800939c <tcp_receive+0xf1c>)
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	461a      	mov	r2, r3
 8009218:	4b5e      	ldr	r3, [pc, #376]	; (8009394 <tcp_receive+0xf14>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	441a      	add	r2, r3
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	6879      	ldr	r1, [r7, #4]
 8009224:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009226:	440b      	add	r3, r1
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	2b00      	cmp	r3, #0
 800922c:	f340 8089 	ble.w	8009342 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	899b      	ldrh	r3, [r3, #12]
 8009238:	b29b      	uxth	r3, r3
 800923a:	4618      	mov	r0, r3
 800923c:	f7fa f8d4 	bl	80033e8 <lwip_htons>
 8009240:	4603      	mov	r3, r0
 8009242:	b2db      	uxtb	r3, r3
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d022      	beq.n	8009292 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800924c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	899b      	ldrh	r3, [r3, #12]
 8009254:	b29b      	uxth	r3, r3
 8009256:	b21b      	sxth	r3, r3
 8009258:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800925c:	b21c      	sxth	r4, r3
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	68db      	ldr	r3, [r3, #12]
 8009264:	899b      	ldrh	r3, [r3, #12]
 8009266:	b29b      	uxth	r3, r3
 8009268:	4618      	mov	r0, r3
 800926a:	f7fa f8bd 	bl	80033e8 <lwip_htons>
 800926e:	4603      	mov	r3, r0
 8009270:	b2db      	uxtb	r3, r3
 8009272:	b29b      	uxth	r3, r3
 8009274:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009278:	b29b      	uxth	r3, r3
 800927a:	4618      	mov	r0, r3
 800927c:	f7fa f8b4 	bl	80033e8 <lwip_htons>
 8009280:	4603      	mov	r3, r0
 8009282:	b21b      	sxth	r3, r3
 8009284:	4323      	orrs	r3, r4
 8009286:	b21a      	sxth	r2, r3
 8009288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	b292      	uxth	r2, r2
 8009290:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009296:	b29a      	uxth	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800929c:	4413      	add	r3, r2
 800929e:	b299      	uxth	r1, r3
 80092a0:	4b3c      	ldr	r3, [pc, #240]	; (8009394 <tcp_receive+0xf14>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	1a8a      	subs	r2, r1, r2
 80092ac:	b292      	uxth	r2, r2
 80092ae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80092b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	891b      	ldrh	r3, [r3, #8]
 80092bc:	4619      	mov	r1, r3
 80092be:	4610      	mov	r0, r2
 80092c0:	f7fb fd1c 	bl	8004cfc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80092c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	891c      	ldrh	r4, [r3, #8]
 80092ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	899b      	ldrh	r3, [r3, #12]
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	4618      	mov	r0, r3
 80092d6:	f7fa f887 	bl	80033e8 <lwip_htons>
 80092da:	4603      	mov	r3, r0
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	f003 0303 	and.w	r3, r3, #3
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d001      	beq.n	80092ea <tcp_receive+0xe6a>
 80092e6:	2301      	movs	r3, #1
 80092e8:	e000      	b.n	80092ec <tcp_receive+0xe6c>
 80092ea:	2300      	movs	r3, #0
 80092ec:	4423      	add	r3, r4
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	4b2a      	ldr	r3, [pc, #168]	; (800939c <tcp_receive+0xf1c>)
 80092f2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80092f4:	4b29      	ldr	r3, [pc, #164]	; (800939c <tcp_receive+0xf1c>)
 80092f6:	881b      	ldrh	r3, [r3, #0]
 80092f8:	461a      	mov	r2, r3
 80092fa:	4b26      	ldr	r3, [pc, #152]	; (8009394 <tcp_receive+0xf14>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	441a      	add	r2, r3
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009304:	6879      	ldr	r1, [r7, #4]
 8009306:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009308:	440b      	add	r3, r1
 800930a:	429a      	cmp	r2, r3
 800930c:	d019      	beq.n	8009342 <tcp_receive+0xec2>
 800930e:	4b24      	ldr	r3, [pc, #144]	; (80093a0 <tcp_receive+0xf20>)
 8009310:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009314:	4923      	ldr	r1, [pc, #140]	; (80093a4 <tcp_receive+0xf24>)
 8009316:	4824      	ldr	r0, [pc, #144]	; (80093a8 <tcp_receive+0xf28>)
 8009318:	f006 fc3c 	bl	800fb94 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800931c:	e011      	b.n	8009342 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	63bb      	str	r3, [r7, #56]	; 0x38
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f aea4 	bne.w	8009074 <tcp_receive+0xbf4>
 800932c:	e00a      	b.n	8009344 <tcp_receive+0xec4>
                break;
 800932e:	bf00      	nop
 8009330:	e008      	b.n	8009344 <tcp_receive+0xec4>
                break;
 8009332:	bf00      	nop
 8009334:	e006      	b.n	8009344 <tcp_receive+0xec4>
                  break;
 8009336:	bf00      	nop
 8009338:	e004      	b.n	8009344 <tcp_receive+0xec4>
                  break;
 800933a:	bf00      	nop
 800933c:	e002      	b.n	8009344 <tcp_receive+0xec4>
                  break;
 800933e:	bf00      	nop
 8009340:	e000      	b.n	8009344 <tcp_receive+0xec4>
                break;
 8009342:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 fa41 	bl	800a7cc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800934a:	e003      	b.n	8009354 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 fa3d 	bl	800a7cc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009352:	e01a      	b.n	800938a <tcp_receive+0xf0a>
 8009354:	e019      	b.n	800938a <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009356:	4b0f      	ldr	r3, [pc, #60]	; (8009394 <tcp_receive+0xf14>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b00      	cmp	r3, #0
 8009362:	db0a      	blt.n	800937a <tcp_receive+0xefa>
 8009364:	4b0b      	ldr	r3, [pc, #44]	; (8009394 <tcp_receive+0xf14>)
 8009366:	681a      	ldr	r2, [r3, #0]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009370:	440b      	add	r3, r1
 8009372:	1ad3      	subs	r3, r2, r3
 8009374:	3301      	adds	r3, #1
 8009376:	2b00      	cmp	r3, #0
 8009378:	dd07      	ble.n	800938a <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8b5b      	ldrh	r3, [r3, #26]
 800937e:	f043 0302 	orr.w	r3, r3, #2
 8009382:	b29a      	uxth	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009388:	e7ff      	b.n	800938a <tcp_receive+0xf0a>
 800938a:	bf00      	nop
 800938c:	3750      	adds	r7, #80	; 0x50
 800938e:	46bd      	mov	sp, r7
 8009390:	bdb0      	pop	{r4, r5, r7, pc}
 8009392:	bf00      	nop
 8009394:	2000057c 	.word	0x2000057c
 8009398:	2000055c 	.word	0x2000055c
 800939c:	20000586 	.word	0x20000586
 80093a0:	08011ccc 	.word	0x08011ccc
 80093a4:	08012074 	.word	0x08012074
 80093a8:	08011d18 	.word	0x08011d18

080093ac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b083      	sub	sp, #12
 80093b0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80093b2:	4b15      	ldr	r3, [pc, #84]	; (8009408 <tcp_get_next_optbyte+0x5c>)
 80093b4:	881b      	ldrh	r3, [r3, #0]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	b291      	uxth	r1, r2
 80093ba:	4a13      	ldr	r2, [pc, #76]	; (8009408 <tcp_get_next_optbyte+0x5c>)
 80093bc:	8011      	strh	r1, [r2, #0]
 80093be:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80093c0:	4b12      	ldr	r3, [pc, #72]	; (800940c <tcp_get_next_optbyte+0x60>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d004      	beq.n	80093d2 <tcp_get_next_optbyte+0x26>
 80093c8:	4b11      	ldr	r3, [pc, #68]	; (8009410 <tcp_get_next_optbyte+0x64>)
 80093ca:	881b      	ldrh	r3, [r3, #0]
 80093cc:	88fa      	ldrh	r2, [r7, #6]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d208      	bcs.n	80093e4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80093d2:	4b10      	ldr	r3, [pc, #64]	; (8009414 <tcp_get_next_optbyte+0x68>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3314      	adds	r3, #20
 80093d8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	683a      	ldr	r2, [r7, #0]
 80093de:	4413      	add	r3, r2
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	e00b      	b.n	80093fc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	b2da      	uxtb	r2, r3
 80093e8:	4b09      	ldr	r3, [pc, #36]	; (8009410 <tcp_get_next_optbyte+0x64>)
 80093ea:	881b      	ldrh	r3, [r3, #0]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80093f2:	4b06      	ldr	r3, [pc, #24]	; (800940c <tcp_get_next_optbyte+0x60>)
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	797b      	ldrb	r3, [r7, #5]
 80093f8:	4413      	add	r3, r2
 80093fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093fc:	4618      	mov	r0, r3
 80093fe:	370c      	adds	r7, #12
 8009400:	46bd      	mov	sp, r7
 8009402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009406:	4770      	bx	lr
 8009408:	20000578 	.word	0x20000578
 800940c:	20000574 	.word	0x20000574
 8009410:	20000572 	.word	0x20000572
 8009414:	2000056c 	.word	0x2000056c

08009418 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d106      	bne.n	8009434 <tcp_parseopt+0x1c>
 8009426:	4b31      	ldr	r3, [pc, #196]	; (80094ec <tcp_parseopt+0xd4>)
 8009428:	f240 727d 	movw	r2, #1917	; 0x77d
 800942c:	4930      	ldr	r1, [pc, #192]	; (80094f0 <tcp_parseopt+0xd8>)
 800942e:	4831      	ldr	r0, [pc, #196]	; (80094f4 <tcp_parseopt+0xdc>)
 8009430:	f006 fbb0 	bl	800fb94 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009434:	4b30      	ldr	r3, [pc, #192]	; (80094f8 <tcp_parseopt+0xe0>)
 8009436:	881b      	ldrh	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d053      	beq.n	80094e4 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800943c:	4b2f      	ldr	r3, [pc, #188]	; (80094fc <tcp_parseopt+0xe4>)
 800943e:	2200      	movs	r2, #0
 8009440:	801a      	strh	r2, [r3, #0]
 8009442:	e043      	b.n	80094cc <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8009444:	f7ff ffb2 	bl	80093ac <tcp_get_next_optbyte>
 8009448:	4603      	mov	r3, r0
 800944a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800944c:	7bfb      	ldrb	r3, [r7, #15]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d03c      	beq.n	80094cc <tcp_parseopt+0xb4>
 8009452:	2b02      	cmp	r3, #2
 8009454:	d002      	beq.n	800945c <tcp_parseopt+0x44>
 8009456:	2b00      	cmp	r3, #0
 8009458:	d03f      	beq.n	80094da <tcp_parseopt+0xc2>
 800945a:	e026      	b.n	80094aa <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800945c:	f7ff ffa6 	bl	80093ac <tcp_get_next_optbyte>
 8009460:	4603      	mov	r3, r0
 8009462:	2b04      	cmp	r3, #4
 8009464:	d13b      	bne.n	80094de <tcp_parseopt+0xc6>
 8009466:	4b25      	ldr	r3, [pc, #148]	; (80094fc <tcp_parseopt+0xe4>)
 8009468:	881b      	ldrh	r3, [r3, #0]
 800946a:	3302      	adds	r3, #2
 800946c:	4a22      	ldr	r2, [pc, #136]	; (80094f8 <tcp_parseopt+0xe0>)
 800946e:	8812      	ldrh	r2, [r2, #0]
 8009470:	4293      	cmp	r3, r2
 8009472:	dc34      	bgt.n	80094de <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009474:	f7ff ff9a 	bl	80093ac <tcp_get_next_optbyte>
 8009478:	4603      	mov	r3, r0
 800947a:	b29b      	uxth	r3, r3
 800947c:	021b      	lsls	r3, r3, #8
 800947e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009480:	f7ff ff94 	bl	80093ac <tcp_get_next_optbyte>
 8009484:	4603      	mov	r3, r0
 8009486:	b29a      	uxth	r2, r3
 8009488:	89bb      	ldrh	r3, [r7, #12]
 800948a:	4313      	orrs	r3, r2
 800948c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800948e:	89bb      	ldrh	r3, [r7, #12]
 8009490:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009494:	d804      	bhi.n	80094a0 <tcp_parseopt+0x88>
 8009496:	89bb      	ldrh	r3, [r7, #12]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d001      	beq.n	80094a0 <tcp_parseopt+0x88>
 800949c:	89ba      	ldrh	r2, [r7, #12]
 800949e:	e001      	b.n	80094a4 <tcp_parseopt+0x8c>
 80094a0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80094a8:	e010      	b.n	80094cc <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80094aa:	f7ff ff7f 	bl	80093ac <tcp_get_next_optbyte>
 80094ae:	4603      	mov	r3, r0
 80094b0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80094b2:	7afb      	ldrb	r3, [r7, #11]
 80094b4:	2b01      	cmp	r3, #1
 80094b6:	d914      	bls.n	80094e2 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80094b8:	7afb      	ldrb	r3, [r7, #11]
 80094ba:	b29a      	uxth	r2, r3
 80094bc:	4b0f      	ldr	r3, [pc, #60]	; (80094fc <tcp_parseopt+0xe4>)
 80094be:	881b      	ldrh	r3, [r3, #0]
 80094c0:	4413      	add	r3, r2
 80094c2:	b29b      	uxth	r3, r3
 80094c4:	3b02      	subs	r3, #2
 80094c6:	b29a      	uxth	r2, r3
 80094c8:	4b0c      	ldr	r3, [pc, #48]	; (80094fc <tcp_parseopt+0xe4>)
 80094ca:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80094cc:	4b0b      	ldr	r3, [pc, #44]	; (80094fc <tcp_parseopt+0xe4>)
 80094ce:	881a      	ldrh	r2, [r3, #0]
 80094d0:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <tcp_parseopt+0xe0>)
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d3b5      	bcc.n	8009444 <tcp_parseopt+0x2c>
 80094d8:	e004      	b.n	80094e4 <tcp_parseopt+0xcc>
          return;
 80094da:	bf00      	nop
 80094dc:	e002      	b.n	80094e4 <tcp_parseopt+0xcc>
            return;
 80094de:	bf00      	nop
 80094e0:	e000      	b.n	80094e4 <tcp_parseopt+0xcc>
            return;
 80094e2:	bf00      	nop
      }
    }
  }
}
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	08011ccc 	.word	0x08011ccc
 80094f0:	08012130 	.word	0x08012130
 80094f4:	08011d18 	.word	0x08011d18
 80094f8:	20000570 	.word	0x20000570
 80094fc:	20000578 	.word	0x20000578

08009500 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009500:	b480      	push	{r7}
 8009502:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009504:	4b05      	ldr	r3, [pc, #20]	; (800951c <tcp_trigger_input_pcb_close+0x1c>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	f043 0310 	orr.w	r3, r3, #16
 800950c:	b2da      	uxtb	r2, r3
 800950e:	4b03      	ldr	r3, [pc, #12]	; (800951c <tcp_trigger_input_pcb_close+0x1c>)
 8009510:	701a      	strb	r2, [r3, #0]
}
 8009512:	bf00      	nop
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr
 800951c:	20000589 	.word	0x20000589

08009520 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b084      	sub	sp, #16
 8009524:	af00      	add	r7, sp, #0
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d00a      	beq.n	8009548 <tcp_route+0x28>
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	7a1b      	ldrb	r3, [r3, #8]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d006      	beq.n	8009548 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	7a1b      	ldrb	r3, [r3, #8]
 800953e:	4618      	mov	r0, r3
 8009540:	f7fb fa06 	bl	8004950 <netif_get_by_index>
 8009544:	4603      	mov	r3, r0
 8009546:	e003      	b.n	8009550 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f005 f8df 	bl	800e70c <ip4_route>
 800954e:	4603      	mov	r3, r0
  }
}
 8009550:	4618      	mov	r0, r3
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009558:	b590      	push	{r4, r7, lr}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	603b      	str	r3, [r7, #0]
 8009564:	4613      	mov	r3, r2
 8009566:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d105      	bne.n	800957a <tcp_create_segment+0x22>
 800956e:	4b44      	ldr	r3, [pc, #272]	; (8009680 <tcp_create_segment+0x128>)
 8009570:	22a3      	movs	r2, #163	; 0xa3
 8009572:	4944      	ldr	r1, [pc, #272]	; (8009684 <tcp_create_segment+0x12c>)
 8009574:	4844      	ldr	r0, [pc, #272]	; (8009688 <tcp_create_segment+0x130>)
 8009576:	f006 fb0d 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d105      	bne.n	800958c <tcp_create_segment+0x34>
 8009580:	4b3f      	ldr	r3, [pc, #252]	; (8009680 <tcp_create_segment+0x128>)
 8009582:	22a4      	movs	r2, #164	; 0xa4
 8009584:	4941      	ldr	r1, [pc, #260]	; (800968c <tcp_create_segment+0x134>)
 8009586:	4840      	ldr	r0, [pc, #256]	; (8009688 <tcp_create_segment+0x130>)
 8009588:	f006 fb04 	bl	800fb94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800958c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	b2db      	uxtb	r3, r3
 8009594:	f003 0304 	and.w	r3, r3, #4
 8009598:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800959a:	2003      	movs	r0, #3
 800959c:	f7fa fe6a 	bl	8004274 <memp_malloc>
 80095a0:	6138      	str	r0, [r7, #16]
 80095a2:	693b      	ldr	r3, [r7, #16]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d104      	bne.n	80095b2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80095a8:	68b8      	ldr	r0, [r7, #8]
 80095aa:	f7fb fd2d 	bl	8005008 <pbuf_free>
    return NULL;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e061      	b.n	8009676 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80095b2:	693b      	ldr	r3, [r7, #16]
 80095b4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80095b8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2200      	movs	r2, #0
 80095be:	601a      	str	r2, [r3, #0]
  seg->p = p;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	68ba      	ldr	r2, [r7, #8]
 80095c4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	891a      	ldrh	r2, [r3, #8]
 80095ca:	7dfb      	ldrb	r3, [r7, #23]
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	429a      	cmp	r2, r3
 80095d0:	d205      	bcs.n	80095de <tcp_create_segment+0x86>
 80095d2:	4b2b      	ldr	r3, [pc, #172]	; (8009680 <tcp_create_segment+0x128>)
 80095d4:	22b0      	movs	r2, #176	; 0xb0
 80095d6:	492e      	ldr	r1, [pc, #184]	; (8009690 <tcp_create_segment+0x138>)
 80095d8:	482b      	ldr	r0, [pc, #172]	; (8009688 <tcp_create_segment+0x130>)
 80095da:	f006 fadb 	bl	800fb94 <iprintf>
  seg->len = p->tot_len - optlen;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	891a      	ldrh	r2, [r3, #8]
 80095e2:	7dfb      	ldrb	r3, [r7, #23]
 80095e4:	b29b      	uxth	r3, r3
 80095e6:	1ad3      	subs	r3, r2, r3
 80095e8:	b29a      	uxth	r2, r3
 80095ea:	693b      	ldr	r3, [r7, #16]
 80095ec:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80095ee:	2114      	movs	r1, #20
 80095f0:	68b8      	ldr	r0, [r7, #8]
 80095f2:	f7fb fc73 	bl	8004edc <pbuf_add_header>
 80095f6:	4603      	mov	r3, r0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d004      	beq.n	8009606 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80095fc:	6938      	ldr	r0, [r7, #16]
 80095fe:	f7fd f8d5 	bl	80067ac <tcp_seg_free>
    return NULL;
 8009602:	2300      	movs	r3, #0
 8009604:	e037      	b.n	8009676 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	685a      	ldr	r2, [r3, #4]
 800960c:	693b      	ldr	r3, [r7, #16]
 800960e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	8ada      	ldrh	r2, [r3, #22]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	68dc      	ldr	r4, [r3, #12]
 8009618:	4610      	mov	r0, r2
 800961a:	f7f9 fee5 	bl	80033e8 <lwip_htons>
 800961e:	4603      	mov	r3, r0
 8009620:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8b1a      	ldrh	r2, [r3, #24]
 8009626:	693b      	ldr	r3, [r7, #16]
 8009628:	68dc      	ldr	r4, [r3, #12]
 800962a:	4610      	mov	r0, r2
 800962c:	f7f9 fedc 	bl	80033e8 <lwip_htons>
 8009630:	4603      	mov	r3, r0
 8009632:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009634:	693b      	ldr	r3, [r7, #16]
 8009636:	68dc      	ldr	r4, [r3, #12]
 8009638:	6838      	ldr	r0, [r7, #0]
 800963a:	f7f9 feea 	bl	8003412 <lwip_htonl>
 800963e:	4603      	mov	r3, r0
 8009640:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009642:	7dfb      	ldrb	r3, [r7, #23]
 8009644:	089b      	lsrs	r3, r3, #2
 8009646:	b2db      	uxtb	r3, r3
 8009648:	b29b      	uxth	r3, r3
 800964a:	3305      	adds	r3, #5
 800964c:	b29b      	uxth	r3, r3
 800964e:	031b      	lsls	r3, r3, #12
 8009650:	b29a      	uxth	r2, r3
 8009652:	79fb      	ldrb	r3, [r7, #7]
 8009654:	b29b      	uxth	r3, r3
 8009656:	4313      	orrs	r3, r2
 8009658:	b29a      	uxth	r2, r3
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	68dc      	ldr	r4, [r3, #12]
 800965e:	4610      	mov	r0, r2
 8009660:	f7f9 fec2 	bl	80033e8 <lwip_htons>
 8009664:	4603      	mov	r3, r0
 8009666:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	68db      	ldr	r3, [r3, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	749a      	strb	r2, [r3, #18]
 8009670:	2200      	movs	r2, #0
 8009672:	74da      	strb	r2, [r3, #19]
  return seg;
 8009674:	693b      	ldr	r3, [r7, #16]
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	bd90      	pop	{r4, r7, pc}
 800967e:	bf00      	nop
 8009680:	0801214c 	.word	0x0801214c
 8009684:	08012180 	.word	0x08012180
 8009688:	080121a0 	.word	0x080121a0
 800968c:	080121c8 	.word	0x080121c8
 8009690:	080121ec 	.word	0x080121ec

08009694 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8009694:	b590      	push	{r4, r7, lr}
 8009696:	b08b      	sub	sp, #44	; 0x2c
 8009698:	af02      	add	r7, sp, #8
 800969a:	6078      	str	r0, [r7, #4]
 800969c:	460b      	mov	r3, r1
 800969e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80096a0:	2300      	movs	r3, #0
 80096a2:	61fb      	str	r3, [r7, #28]
 80096a4:	2300      	movs	r3, #0
 80096a6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80096a8:	2300      	movs	r3, #0
 80096aa:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d106      	bne.n	80096c0 <tcp_split_unsent_seg+0x2c>
 80096b2:	4b95      	ldr	r3, [pc, #596]	; (8009908 <tcp_split_unsent_seg+0x274>)
 80096b4:	f240 324b 	movw	r2, #843	; 0x34b
 80096b8:	4994      	ldr	r1, [pc, #592]	; (800990c <tcp_split_unsent_seg+0x278>)
 80096ba:	4895      	ldr	r0, [pc, #596]	; (8009910 <tcp_split_unsent_seg+0x27c>)
 80096bc:	f006 fa6a 	bl	800fb94 <iprintf>

  useg = pcb->unsent;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80096c4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d102      	bne.n	80096d2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80096cc:	f04f 33ff 	mov.w	r3, #4294967295
 80096d0:	e116      	b.n	8009900 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80096d2:	887b      	ldrh	r3, [r7, #2]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d109      	bne.n	80096ec <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80096d8:	4b8b      	ldr	r3, [pc, #556]	; (8009908 <tcp_split_unsent_seg+0x274>)
 80096da:	f240 3253 	movw	r2, #851	; 0x353
 80096de:	498d      	ldr	r1, [pc, #564]	; (8009914 <tcp_split_unsent_seg+0x280>)
 80096e0:	488b      	ldr	r0, [pc, #556]	; (8009910 <tcp_split_unsent_seg+0x27c>)
 80096e2:	f006 fa57 	bl	800fb94 <iprintf>
    return ERR_VAL;
 80096e6:	f06f 0305 	mvn.w	r3, #5
 80096ea:	e109      	b.n	8009900 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	891b      	ldrh	r3, [r3, #8]
 80096f0:	887a      	ldrh	r2, [r7, #2]
 80096f2:	429a      	cmp	r2, r3
 80096f4:	d301      	bcc.n	80096fa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80096f6:	2300      	movs	r3, #0
 80096f8:	e102      	b.n	8009900 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80096fe:	887a      	ldrh	r2, [r7, #2]
 8009700:	429a      	cmp	r2, r3
 8009702:	d906      	bls.n	8009712 <tcp_split_unsent_seg+0x7e>
 8009704:	4b80      	ldr	r3, [pc, #512]	; (8009908 <tcp_split_unsent_seg+0x274>)
 8009706:	f240 325b 	movw	r2, #859	; 0x35b
 800970a:	4983      	ldr	r1, [pc, #524]	; (8009918 <tcp_split_unsent_seg+0x284>)
 800970c:	4880      	ldr	r0, [pc, #512]	; (8009910 <tcp_split_unsent_seg+0x27c>)
 800970e:	f006 fa41 	bl	800fb94 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8009712:	697b      	ldr	r3, [r7, #20]
 8009714:	891b      	ldrh	r3, [r3, #8]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d106      	bne.n	8009728 <tcp_split_unsent_seg+0x94>
 800971a:	4b7b      	ldr	r3, [pc, #492]	; (8009908 <tcp_split_unsent_seg+0x274>)
 800971c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8009720:	497e      	ldr	r1, [pc, #504]	; (800991c <tcp_split_unsent_seg+0x288>)
 8009722:	487b      	ldr	r0, [pc, #492]	; (8009910 <tcp_split_unsent_seg+0x27c>)
 8009724:	f006 fa36 	bl	800fb94 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8009728:	697b      	ldr	r3, [r7, #20]
 800972a:	7a9b      	ldrb	r3, [r3, #10]
 800972c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	b2db      	uxtb	r3, r3
 8009734:	f003 0304 	and.w	r3, r3, #4
 8009738:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	891a      	ldrh	r2, [r3, #8]
 800973e:	887b      	ldrh	r3, [r7, #2]
 8009740:	1ad3      	subs	r3, r2, r3
 8009742:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8009744:	7bbb      	ldrb	r3, [r7, #14]
 8009746:	b29a      	uxth	r2, r3
 8009748:	89bb      	ldrh	r3, [r7, #12]
 800974a:	4413      	add	r3, r2
 800974c:	b29b      	uxth	r3, r3
 800974e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009752:	4619      	mov	r1, r3
 8009754:	2036      	movs	r0, #54	; 0x36
 8009756:	f7fb f977 	bl	8004a48 <pbuf_alloc>
 800975a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800975c:	693b      	ldr	r3, [r7, #16]
 800975e:	2b00      	cmp	r3, #0
 8009760:	f000 80b7 	beq.w	80098d2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	685b      	ldr	r3, [r3, #4]
 8009768:	891a      	ldrh	r2, [r3, #8]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	891b      	ldrh	r3, [r3, #8]
 800976e:	1ad3      	subs	r3, r2, r3
 8009770:	b29a      	uxth	r2, r3
 8009772:	887b      	ldrh	r3, [r7, #2]
 8009774:	4413      	add	r3, r2
 8009776:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8009778:	697b      	ldr	r3, [r7, #20]
 800977a:	6858      	ldr	r0, [r3, #4]
 800977c:	693b      	ldr	r3, [r7, #16]
 800977e:	685a      	ldr	r2, [r3, #4]
 8009780:	7bbb      	ldrb	r3, [r7, #14]
 8009782:	18d1      	adds	r1, r2, r3
 8009784:	897b      	ldrh	r3, [r7, #10]
 8009786:	89ba      	ldrh	r2, [r7, #12]
 8009788:	f7fb fe38 	bl	80053fc <pbuf_copy_partial>
 800978c:	4603      	mov	r3, r0
 800978e:	461a      	mov	r2, r3
 8009790:	89bb      	ldrh	r3, [r7, #12]
 8009792:	4293      	cmp	r3, r2
 8009794:	f040 809f 	bne.w	80098d6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8009798:	697b      	ldr	r3, [r7, #20]
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	899b      	ldrh	r3, [r3, #12]
 800979e:	b29b      	uxth	r3, r3
 80097a0:	4618      	mov	r0, r3
 80097a2:	f7f9 fe21 	bl	80033e8 <lwip_htons>
 80097a6:	4603      	mov	r3, r0
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ae:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80097b0:	2300      	movs	r3, #0
 80097b2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80097b4:	7efb      	ldrb	r3, [r7, #27]
 80097b6:	f003 0308 	and.w	r3, r3, #8
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d007      	beq.n	80097ce <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80097be:	7efb      	ldrb	r3, [r7, #27]
 80097c0:	f023 0308 	bic.w	r3, r3, #8
 80097c4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80097c6:	7ebb      	ldrb	r3, [r7, #26]
 80097c8:	f043 0308 	orr.w	r3, r3, #8
 80097cc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80097ce:	7efb      	ldrb	r3, [r7, #27]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80097d8:	7efb      	ldrb	r3, [r7, #27]
 80097da:	f023 0301 	bic.w	r3, r3, #1
 80097de:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80097e0:	7ebb      	ldrb	r3, [r7, #26]
 80097e2:	f043 0301 	orr.w	r3, r3, #1
 80097e6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7f9 fe0f 	bl	8003412 <lwip_htonl>
 80097f4:	4602      	mov	r2, r0
 80097f6:	887b      	ldrh	r3, [r7, #2]
 80097f8:	18d1      	adds	r1, r2, r3
 80097fa:	7eba      	ldrb	r2, [r7, #26]
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	9300      	str	r3, [sp, #0]
 8009800:	460b      	mov	r3, r1
 8009802:	6939      	ldr	r1, [r7, #16]
 8009804:	6878      	ldr	r0, [r7, #4]
 8009806:	f7ff fea7 	bl	8009558 <tcp_create_segment>
 800980a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d063      	beq.n	80098da <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	4618      	mov	r0, r3
 8009818:	f7fb fc7e 	bl	8005118 <pbuf_clen>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009826:	1a9b      	subs	r3, r3, r2
 8009828:	b29a      	uxth	r2, r3
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8009830:	697b      	ldr	r3, [r7, #20]
 8009832:	6858      	ldr	r0, [r3, #4]
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	685b      	ldr	r3, [r3, #4]
 8009838:	891a      	ldrh	r2, [r3, #8]
 800983a:	89bb      	ldrh	r3, [r7, #12]
 800983c:	1ad3      	subs	r3, r2, r3
 800983e:	b29b      	uxth	r3, r3
 8009840:	4619      	mov	r1, r3
 8009842:	f7fb fa5b 	bl	8004cfc <pbuf_realloc>
  useg->len -= remainder;
 8009846:	697b      	ldr	r3, [r7, #20]
 8009848:	891a      	ldrh	r2, [r3, #8]
 800984a:	89bb      	ldrh	r3, [r7, #12]
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	b29a      	uxth	r2, r3
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	68db      	ldr	r3, [r3, #12]
 8009858:	899b      	ldrh	r3, [r3, #12]
 800985a:	b29c      	uxth	r4, r3
 800985c:	7efb      	ldrb	r3, [r7, #27]
 800985e:	b29b      	uxth	r3, r3
 8009860:	4618      	mov	r0, r3
 8009862:	f7f9 fdc1 	bl	80033e8 <lwip_htons>
 8009866:	4603      	mov	r3, r0
 8009868:	461a      	mov	r2, r3
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	4322      	orrs	r2, r4
 8009870:	b292      	uxth	r2, r2
 8009872:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8009874:	697b      	ldr	r3, [r7, #20]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	4618      	mov	r0, r3
 800987a:	f7fb fc4d 	bl	8005118 <pbuf_clen>
 800987e:	4603      	mov	r3, r0
 8009880:	461a      	mov	r2, r3
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009888:	4413      	add	r3, r2
 800988a:	b29a      	uxth	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	4618      	mov	r0, r3
 8009898:	f7fb fc3e 	bl	8005118 <pbuf_clen>
 800989c:	4603      	mov	r3, r0
 800989e:	461a      	mov	r2, r3
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80098a6:	4413      	add	r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	681a      	ldr	r2, [r3, #0]
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	69fa      	ldr	r2, [r7, #28]
 80098bc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d103      	bne.n	80098ce <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e016      	b.n	8009900 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80098d2:	bf00      	nop
 80098d4:	e002      	b.n	80098dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80098d6:	bf00      	nop
 80098d8:	e000      	b.n	80098dc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80098da:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d006      	beq.n	80098f0 <tcp_split_unsent_seg+0x25c>
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <tcp_split_unsent_seg+0x274>)
 80098e4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80098e8:	490d      	ldr	r1, [pc, #52]	; (8009920 <tcp_split_unsent_seg+0x28c>)
 80098ea:	4809      	ldr	r0, [pc, #36]	; (8009910 <tcp_split_unsent_seg+0x27c>)
 80098ec:	f006 f952 	bl	800fb94 <iprintf>
  if (p != NULL) {
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80098f6:	6938      	ldr	r0, [r7, #16]
 80098f8:	f7fb fb86 	bl	8005008 <pbuf_free>
  }

  return ERR_MEM;
 80098fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009900:	4618      	mov	r0, r3
 8009902:	3724      	adds	r7, #36	; 0x24
 8009904:	46bd      	mov	sp, r7
 8009906:	bd90      	pop	{r4, r7, pc}
 8009908:	0801214c 	.word	0x0801214c
 800990c:	080124e0 	.word	0x080124e0
 8009910:	080121a0 	.word	0x080121a0
 8009914:	08012504 	.word	0x08012504
 8009918:	08012528 	.word	0x08012528
 800991c:	08012538 	.word	0x08012538
 8009920:	08012548 	.word	0x08012548

08009924 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8009924:	b590      	push	{r4, r7, lr}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d106      	bne.n	8009940 <tcp_send_fin+0x1c>
 8009932:	4b21      	ldr	r3, [pc, #132]	; (80099b8 <tcp_send_fin+0x94>)
 8009934:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8009938:	4920      	ldr	r1, [pc, #128]	; (80099bc <tcp_send_fin+0x98>)
 800993a:	4821      	ldr	r0, [pc, #132]	; (80099c0 <tcp_send_fin+0x9c>)
 800993c:	f006 f92a 	bl	800fb94 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009944:	2b00      	cmp	r3, #0
 8009946:	d02e      	beq.n	80099a6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	e002      	b.n	8009956 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1f8      	bne.n	8009950 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	899b      	ldrh	r3, [r3, #12]
 8009964:	b29b      	uxth	r3, r3
 8009966:	4618      	mov	r0, r3
 8009968:	f7f9 fd3e 	bl	80033e8 <lwip_htons>
 800996c:	4603      	mov	r3, r0
 800996e:	b2db      	uxtb	r3, r3
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	2b00      	cmp	r3, #0
 8009976:	d116      	bne.n	80099a6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	68db      	ldr	r3, [r3, #12]
 800997c:	899b      	ldrh	r3, [r3, #12]
 800997e:	b29c      	uxth	r4, r3
 8009980:	2001      	movs	r0, #1
 8009982:	f7f9 fd31 	bl	80033e8 <lwip_htons>
 8009986:	4603      	mov	r3, r0
 8009988:	461a      	mov	r2, r3
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	4322      	orrs	r2, r4
 8009990:	b292      	uxth	r2, r2
 8009992:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	8b5b      	ldrh	r3, [r3, #26]
 8009998:	f043 0320 	orr.w	r3, r3, #32
 800999c:	b29a      	uxth	r2, r3
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80099a2:	2300      	movs	r3, #0
 80099a4:	e004      	b.n	80099b0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80099a6:	2101      	movs	r1, #1
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 f80b 	bl	80099c4 <tcp_enqueue_flags>
 80099ae:	4603      	mov	r3, r0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	bd90      	pop	{r4, r7, pc}
 80099b8:	0801214c 	.word	0x0801214c
 80099bc:	08012554 	.word	0x08012554
 80099c0:	080121a0 	.word	0x080121a0

080099c4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08a      	sub	sp, #40	; 0x28
 80099c8:	af02      	add	r7, sp, #8
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80099d4:	2300      	movs	r3, #0
 80099d6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80099d8:	78fb      	ldrb	r3, [r7, #3]
 80099da:	f003 0303 	and.w	r3, r3, #3
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d106      	bne.n	80099f0 <tcp_enqueue_flags+0x2c>
 80099e2:	4b67      	ldr	r3, [pc, #412]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 80099e4:	f240 4212 	movw	r2, #1042	; 0x412
 80099e8:	4966      	ldr	r1, [pc, #408]	; (8009b84 <tcp_enqueue_flags+0x1c0>)
 80099ea:	4867      	ldr	r0, [pc, #412]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 80099ec:	f006 f8d2 	bl	800fb94 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d106      	bne.n	8009a04 <tcp_enqueue_flags+0x40>
 80099f6:	4b62      	ldr	r3, [pc, #392]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 80099f8:	f240 4213 	movw	r2, #1043	; 0x413
 80099fc:	4963      	ldr	r1, [pc, #396]	; (8009b8c <tcp_enqueue_flags+0x1c8>)
 80099fe:	4862      	ldr	r0, [pc, #392]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 8009a00:	f006 f8c8 	bl	800fb94 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	f003 0302 	and.w	r3, r3, #2
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d001      	beq.n	8009a12 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8009a0e:	2301      	movs	r3, #1
 8009a10:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009a12:	7ffb      	ldrb	r3, [r7, #31]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	f003 0304 	and.w	r3, r3, #4
 8009a1c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	b29b      	uxth	r3, r3
 8009a22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009a26:	4619      	mov	r1, r3
 8009a28:	2036      	movs	r0, #54	; 0x36
 8009a2a:	f7fb f80d 	bl	8004a48 <pbuf_alloc>
 8009a2e:	6138      	str	r0, [r7, #16]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	8b5b      	ldrh	r3, [r3, #26]
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3e:	b29a      	uxth	r2, r3
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009a44:	f04f 33ff 	mov.w	r3, #4294967295
 8009a48:	e095      	b.n	8009b76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	895a      	ldrh	r2, [r3, #10]
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d206      	bcs.n	8009a64 <tcp_enqueue_flags+0xa0>
 8009a56:	4b4a      	ldr	r3, [pc, #296]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 8009a58:	f240 423a 	movw	r2, #1082	; 0x43a
 8009a5c:	494c      	ldr	r1, [pc, #304]	; (8009b90 <tcp_enqueue_flags+0x1cc>)
 8009a5e:	484a      	ldr	r0, [pc, #296]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 8009a60:	f006 f898 	bl	800fb94 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	7ffb      	ldrb	r3, [r7, #31]
 8009a6c:	9300      	str	r3, [sp, #0]
 8009a6e:	460b      	mov	r3, r1
 8009a70:	6939      	ldr	r1, [r7, #16]
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f7ff fd70 	bl	8009558 <tcp_create_segment>
 8009a78:	60f8      	str	r0, [r7, #12]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d109      	bne.n	8009a94 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	8b5b      	ldrh	r3, [r3, #26]
 8009a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a88:	b29a      	uxth	r2, r3
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8009a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a92:	e070      	b.n	8009b76 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	68db      	ldr	r3, [r3, #12]
 8009a98:	f003 0303 	and.w	r3, r3, #3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d006      	beq.n	8009aae <tcp_enqueue_flags+0xea>
 8009aa0:	4b37      	ldr	r3, [pc, #220]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 8009aa2:	f240 4242 	movw	r2, #1090	; 0x442
 8009aa6:	493b      	ldr	r1, [pc, #236]	; (8009b94 <tcp_enqueue_flags+0x1d0>)
 8009aa8:	4837      	ldr	r0, [pc, #220]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 8009aaa:	f006 f873 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	891b      	ldrh	r3, [r3, #8]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d006      	beq.n	8009ac4 <tcp_enqueue_flags+0x100>
 8009ab6:	4b32      	ldr	r3, [pc, #200]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 8009ab8:	f240 4243 	movw	r2, #1091	; 0x443
 8009abc:	4936      	ldr	r1, [pc, #216]	; (8009b98 <tcp_enqueue_flags+0x1d4>)
 8009abe:	4832      	ldr	r0, [pc, #200]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 8009ac0:	f006 f868 	bl	800fb94 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	68fa      	ldr	r2, [r7, #12]
 8009ad0:	66da      	str	r2, [r3, #108]	; 0x6c
 8009ad2:	e00d      	b.n	8009af0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009ad8:	61bb      	str	r3, [r7, #24]
 8009ada:	e002      	b.n	8009ae2 <tcp_enqueue_flags+0x11e>
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	61bb      	str	r3, [r7, #24]
 8009ae2:	69bb      	ldr	r3, [r7, #24]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d1f8      	bne.n	8009adc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	68fa      	ldr	r2, [r7, #12]
 8009aee:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8009af8:	78fb      	ldrb	r3, [r7, #3]
 8009afa:	f003 0302 	and.w	r3, r3, #2
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <tcp_enqueue_flags+0x148>
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	f003 0301 	and.w	r3, r3, #1
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d004      	beq.n	8009b16 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8009b16:	78fb      	ldrb	r3, [r7, #3]
 8009b18:	f003 0301 	and.w	r3, r3, #1
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d006      	beq.n	8009b2e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	8b5b      	ldrh	r3, [r3, #26]
 8009b24:	f043 0320 	orr.w	r3, r3, #32
 8009b28:	b29a      	uxth	r2, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	685b      	ldr	r3, [r3, #4]
 8009b32:	4618      	mov	r0, r3
 8009b34:	f7fb faf0 	bl	8005118 <pbuf_clen>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b42:	4413      	add	r3, r2
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d00e      	beq.n	8009b74 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d10a      	bne.n	8009b74 <tcp_enqueue_flags+0x1b0>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d106      	bne.n	8009b74 <tcp_enqueue_flags+0x1b0>
 8009b66:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <tcp_enqueue_flags+0x1bc>)
 8009b68:	f240 4266 	movw	r2, #1126	; 0x466
 8009b6c:	490b      	ldr	r1, [pc, #44]	; (8009b9c <tcp_enqueue_flags+0x1d8>)
 8009b6e:	4806      	ldr	r0, [pc, #24]	; (8009b88 <tcp_enqueue_flags+0x1c4>)
 8009b70:	f006 f810 	bl	800fb94 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3720      	adds	r7, #32
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	0801214c 	.word	0x0801214c
 8009b84:	08012570 	.word	0x08012570
 8009b88:	080121a0 	.word	0x080121a0
 8009b8c:	080125c8 	.word	0x080125c8
 8009b90:	080125e8 	.word	0x080125e8
 8009b94:	08012624 	.word	0x08012624
 8009b98:	0801263c 	.word	0x0801263c
 8009b9c:	08012668 	.word	0x08012668

08009ba0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8009ba0:	b5b0      	push	{r4, r5, r7, lr}
 8009ba2:	b08a      	sub	sp, #40	; 0x28
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <tcp_output+0x1c>
 8009bae:	4ba0      	ldr	r3, [pc, #640]	; (8009e30 <tcp_output+0x290>)
 8009bb0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8009bb4:	499f      	ldr	r1, [pc, #636]	; (8009e34 <tcp_output+0x294>)
 8009bb6:	48a0      	ldr	r0, [pc, #640]	; (8009e38 <tcp_output+0x298>)
 8009bb8:	f005 ffec 	bl	800fb94 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	7d1b      	ldrb	r3, [r3, #20]
 8009bc0:	2b01      	cmp	r3, #1
 8009bc2:	d106      	bne.n	8009bd2 <tcp_output+0x32>
 8009bc4:	4b9a      	ldr	r3, [pc, #616]	; (8009e30 <tcp_output+0x290>)
 8009bc6:	f240 42e4 	movw	r2, #1252	; 0x4e4
 8009bca:	499c      	ldr	r1, [pc, #624]	; (8009e3c <tcp_output+0x29c>)
 8009bcc:	489a      	ldr	r0, [pc, #616]	; (8009e38 <tcp_output+0x298>)
 8009bce:	f005 ffe1 	bl	800fb94 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8009bd2:	4b9b      	ldr	r3, [pc, #620]	; (8009e40 <tcp_output+0x2a0>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d101      	bne.n	8009be0 <tcp_output+0x40>
    return ERR_OK;
 8009bdc:	2300      	movs	r3, #0
 8009bde:	e1d2      	b.n	8009f86 <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d203      	bcs.n	8009bf8 <tcp_output+0x58>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009bf6:	e002      	b.n	8009bfe <tcp_output+0x5e>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8009bfe:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d10b      	bne.n	8009c24 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8b5b      	ldrh	r3, [r3, #26]
 8009c10:	f003 0302 	and.w	r3, r3, #2
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	f000 81a9 	beq.w	8009f6c <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f000 fdd6 	bl	800a7cc <tcp_send_empty_ack>
 8009c20:	4603      	mov	r3, r0
 8009c22:	e1b0      	b.n	8009f86 <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8009c24:	6879      	ldr	r1, [r7, #4]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3304      	adds	r3, #4
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f7ff fc77 	bl	8009520 <tcp_route>
 8009c32:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d102      	bne.n	8009c40 <tcp_output+0xa0>
    return ERR_RTE;
 8009c3a:	f06f 0303 	mvn.w	r3, #3
 8009c3e:	e1a2      	b.n	8009f86 <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <tcp_output+0xae>
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d111      	bne.n	8009c72 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d002      	beq.n	8009c5a <tcp_output+0xba>
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	3304      	adds	r3, #4
 8009c58:	e000      	b.n	8009c5c <tcp_output+0xbc>
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d102      	bne.n	8009c6a <tcp_output+0xca>
      return ERR_RTE;
 8009c64:	f06f 0303 	mvn.w	r3, #3
 8009c68:	e18d      	b.n	8009f86 <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8009c6a:	693b      	ldr	r3, [r7, #16]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8009c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c74:	68db      	ldr	r3, [r3, #12]
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f7f9 fbca 	bl	8003412 <lwip_htonl>
 8009c7e:	4602      	mov	r2, r0
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c84:	1ad3      	subs	r3, r2, r3
 8009c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c88:	8912      	ldrh	r2, [r2, #8]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	69ba      	ldr	r2, [r7, #24]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d227      	bcs.n	8009ce2 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009c98:	461a      	mov	r2, r3
 8009c9a:	69bb      	ldr	r3, [r7, #24]
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d114      	bne.n	8009cca <tcp_output+0x12a>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d110      	bne.n	8009cca <tcp_output+0x12a>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d10b      	bne.n	8009cca <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	2201      	movs	r2, #1
 8009cbe:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	8b5b      	ldrh	r3, [r3, #26]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 814c 	beq.w	8009f70 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f000 fd77 	bl	800a7cc <tcp_send_empty_ack>
 8009cde:	4603      	mov	r3, r0
 8009ce0:	e151      	b.n	8009f86 <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cee:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8009cf0:	6a3b      	ldr	r3, [r7, #32]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	f000 811b 	beq.w	8009f2e <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 8009cf8:	e002      	b.n	8009d00 <tcp_output+0x160>
 8009cfa:	6a3b      	ldr	r3, [r7, #32]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	623b      	str	r3, [r7, #32]
 8009d00:	6a3b      	ldr	r3, [r7, #32]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1f8      	bne.n	8009cfa <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8009d08:	e111      	b.n	8009f2e <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	899b      	ldrh	r3, [r3, #12]
 8009d10:	b29b      	uxth	r3, r3
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7f9 fb68 	bl	80033e8 <lwip_htons>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	f003 0304 	and.w	r3, r3, #4
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d006      	beq.n	8009d32 <tcp_output+0x192>
 8009d24:	4b42      	ldr	r3, [pc, #264]	; (8009e30 <tcp_output+0x290>)
 8009d26:	f240 5237 	movw	r2, #1335	; 0x537
 8009d2a:	4946      	ldr	r1, [pc, #280]	; (8009e44 <tcp_output+0x2a4>)
 8009d2c:	4842      	ldr	r0, [pc, #264]	; (8009e38 <tcp_output+0x298>)
 8009d2e:	f005 ff31 	bl	800fb94 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d01f      	beq.n	8009d7a <tcp_output+0x1da>
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	8b5b      	ldrh	r3, [r3, #26]
 8009d3e:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d119      	bne.n	8009d7a <tcp_output+0x1da>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d00b      	beq.n	8009d66 <tcp_output+0x1c6>
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d110      	bne.n	8009d7a <tcp_output+0x1da>
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d5c:	891a      	ldrh	r2, [r3, #8]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d209      	bcs.n	8009d7a <tcp_output+0x1da>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d004      	beq.n	8009d7a <tcp_output+0x1da>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8009d76:	2b08      	cmp	r3, #8
 8009d78:	d901      	bls.n	8009d7e <tcp_output+0x1de>
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e000      	b.n	8009d80 <tcp_output+0x1e0>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8b5b      	ldrh	r3, [r3, #26]
 8009d88:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f000 80e3 	beq.w	8009f58 <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	7d1b      	ldrb	r3, [r3, #20]
 8009d96:	2b02      	cmp	r3, #2
 8009d98:	d00d      	beq.n	8009db6 <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8009d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	899b      	ldrh	r3, [r3, #12]
 8009da0:	b29c      	uxth	r4, r3
 8009da2:	2010      	movs	r0, #16
 8009da4:	f7f9 fb20 	bl	80033e8 <lwip_htons>
 8009da8:	4603      	mov	r3, r0
 8009daa:	461a      	mov	r2, r3
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	68db      	ldr	r3, [r3, #12]
 8009db0:	4322      	orrs	r2, r4
 8009db2:	b292      	uxth	r2, r2
 8009db4:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8009db6:	697a      	ldr	r2, [r7, #20]
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009dbc:	f000 f908 	bl	8009fd0 <tcp_output_segment>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8009dc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	8b5b      	ldrh	r3, [r3, #26]
 8009dd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	835a      	strh	r2, [r3, #26]
      return err;
 8009dda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009dde:	e0d2      	b.n	8009f86 <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	7d1b      	ldrb	r3, [r3, #20]
 8009dec:	2b02      	cmp	r3, #2
 8009dee:	d006      	beq.n	8009dfe <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	8b5b      	ldrh	r3, [r3, #26]
 8009df4:	f023 0303 	bic.w	r3, r3, #3
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8009dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e00:	68db      	ldr	r3, [r3, #12]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4618      	mov	r0, r3
 8009e06:	f7f9 fb04 	bl	8003412 <lwip_htonl>
 8009e0a:	4604      	mov	r4, r0
 8009e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e0e:	891b      	ldrh	r3, [r3, #8]
 8009e10:	461d      	mov	r5, r3
 8009e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	899b      	ldrh	r3, [r3, #12]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f7f9 fae4 	bl	80033e8 <lwip_htons>
 8009e20:	4603      	mov	r3, r0
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	f003 0303 	and.w	r3, r3, #3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d00d      	beq.n	8009e48 <tcp_output+0x2a8>
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	e00c      	b.n	8009e4a <tcp_output+0x2aa>
 8009e30:	0801214c 	.word	0x0801214c
 8009e34:	08012690 	.word	0x08012690
 8009e38:	080121a0 	.word	0x080121a0
 8009e3c:	080126a8 	.word	0x080126a8
 8009e40:	20006d64 	.word	0x20006d64
 8009e44:	080126d0 	.word	0x080126d0
 8009e48:	2300      	movs	r3, #0
 8009e4a:	442b      	add	r3, r5
 8009e4c:	4423      	add	r3, r4
 8009e4e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	da02      	bge.n	8009e62 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	891b      	ldrh	r3, [r3, #8]
 8009e66:	461c      	mov	r4, r3
 8009e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	899b      	ldrh	r3, [r3, #12]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	4618      	mov	r0, r3
 8009e72:	f7f9 fab9 	bl	80033e8 <lwip_htons>
 8009e76:	4603      	mov	r3, r0
 8009e78:	b2db      	uxtb	r3, r3
 8009e7a:	f003 0303 	and.w	r3, r3, #3
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d001      	beq.n	8009e86 <tcp_output+0x2e6>
 8009e82:	2301      	movs	r3, #1
 8009e84:	e000      	b.n	8009e88 <tcp_output+0x2e8>
 8009e86:	2300      	movs	r3, #0
 8009e88:	4423      	add	r3, r4
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d049      	beq.n	8009f22 <tcp_output+0x382>
      seg->next = NULL;
 8009e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e90:	2200      	movs	r2, #0
 8009e92:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d105      	bne.n	8009ea8 <tcp_output+0x308>
        pcb->unacked = seg;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ea0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8009ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea4:	623b      	str	r3, [r7, #32]
 8009ea6:	e03f      	b.n	8009f28 <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8009ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eaa:	68db      	ldr	r3, [r3, #12]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	f7f9 faaf 	bl	8003412 <lwip_htonl>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7f9 faa8 	bl	8003412 <lwip_htonl>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	1ae3      	subs	r3, r4, r3
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	da24      	bge.n	8009f14 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3370      	adds	r3, #112	; 0x70
 8009ece:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ed0:	e002      	b.n	8009ed8 <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8009ed2:	69fb      	ldr	r3, [r7, #28]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d011      	beq.n	8009f04 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8009ee0:	69fb      	ldr	r3, [r7, #28]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	685b      	ldr	r3, [r3, #4]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7f9 fa92 	bl	8003412 <lwip_htonl>
 8009eee:	4604      	mov	r4, r0
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef2:	68db      	ldr	r3, [r3, #12]
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f7f9 fa8b 	bl	8003412 <lwip_htonl>
 8009efc:	4603      	mov	r3, r0
 8009efe:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	dbe6      	blt.n	8009ed2 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f0a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8009f0c:	69fb      	ldr	r3, [r7, #28]
 8009f0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	e009      	b.n	8009f28 <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8009f14:	6a3b      	ldr	r3, [r7, #32]
 8009f16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f18:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8009f1a:	6a3b      	ldr	r3, [r7, #32]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	623b      	str	r3, [r7, #32]
 8009f20:	e002      	b.n	8009f28 <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8009f22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009f24:	f7fc fc42 	bl	80067ac <tcp_seg_free>
    }
    seg = pcb->unsent;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f2c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d012      	beq.n	8009f5a <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8009f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7f9 fa69 	bl	8003412 <lwip_htonl>
 8009f40:	4602      	mov	r2, r0
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009f4a:	8912      	ldrh	r2, [r2, #8]
 8009f4c:	4413      	add	r3, r2
  while (seg != NULL &&
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	f4bf aeda 	bcs.w	8009d0a <tcp_output+0x16a>
 8009f56:	e000      	b.n	8009f5a <tcp_output+0x3ba>
      break;
 8009f58:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d108      	bne.n	8009f74 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8009f6a:	e004      	b.n	8009f76 <tcp_output+0x3d6>
    goto output_done;
 8009f6c:	bf00      	nop
 8009f6e:	e002      	b.n	8009f76 <tcp_output+0x3d6>
    goto output_done;
 8009f70:	bf00      	nop
 8009f72:	e000      	b.n	8009f76 <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8009f74:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	8b5b      	ldrh	r3, [r3, #26]
 8009f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8009f84:	2300      	movs	r3, #0
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3728      	adds	r7, #40	; 0x28
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bdb0      	pop	{r4, r5, r7, pc}
 8009f8e:	bf00      	nop

08009f90 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b082      	sub	sp, #8
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d106      	bne.n	8009fac <tcp_output_segment_busy+0x1c>
 8009f9e:	4b09      	ldr	r3, [pc, #36]	; (8009fc4 <tcp_output_segment_busy+0x34>)
 8009fa0:	f240 529a 	movw	r2, #1434	; 0x59a
 8009fa4:	4908      	ldr	r1, [pc, #32]	; (8009fc8 <tcp_output_segment_busy+0x38>)
 8009fa6:	4809      	ldr	r0, [pc, #36]	; (8009fcc <tcp_output_segment_busy+0x3c>)
 8009fa8:	f005 fdf4 	bl	800fb94 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	7b9b      	ldrb	r3, [r3, #14]
 8009fb2:	2b01      	cmp	r3, #1
 8009fb4:	d001      	beq.n	8009fba <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e000      	b.n	8009fbc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	0801214c 	.word	0x0801214c
 8009fc8:	080126e8 	.word	0x080126e8
 8009fcc:	080121a0 	.word	0x080121a0

08009fd0 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8009fd0:	b5b0      	push	{r4, r5, r7, lr}
 8009fd2:	b08c      	sub	sp, #48	; 0x30
 8009fd4:	af04      	add	r7, sp, #16
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d106      	bne.n	8009ff0 <tcp_output_segment+0x20>
 8009fe2:	4b64      	ldr	r3, [pc, #400]	; (800a174 <tcp_output_segment+0x1a4>)
 8009fe4:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8009fe8:	4963      	ldr	r1, [pc, #396]	; (800a178 <tcp_output_segment+0x1a8>)
 8009fea:	4864      	ldr	r0, [pc, #400]	; (800a17c <tcp_output_segment+0x1ac>)
 8009fec:	f005 fdd2 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d106      	bne.n	800a004 <tcp_output_segment+0x34>
 8009ff6:	4b5f      	ldr	r3, [pc, #380]	; (800a174 <tcp_output_segment+0x1a4>)
 8009ff8:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8009ffc:	4960      	ldr	r1, [pc, #384]	; (800a180 <tcp_output_segment+0x1b0>)
 8009ffe:	485f      	ldr	r0, [pc, #380]	; (800a17c <tcp_output_segment+0x1ac>)
 800a000:	f005 fdc8 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d106      	bne.n	800a018 <tcp_output_segment+0x48>
 800a00a:	4b5a      	ldr	r3, [pc, #360]	; (800a174 <tcp_output_segment+0x1a4>)
 800a00c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800a010:	495c      	ldr	r1, [pc, #368]	; (800a184 <tcp_output_segment+0x1b4>)
 800a012:	485a      	ldr	r0, [pc, #360]	; (800a17c <tcp_output_segment+0x1ac>)
 800a014:	f005 fdbe 	bl	800fb94 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800a018:	68f8      	ldr	r0, [r7, #12]
 800a01a:	f7ff ffb9 	bl	8009f90 <tcp_output_segment_busy>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d001      	beq.n	800a028 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800a024:	2300      	movs	r3, #0
 800a026:	e0a0      	b.n	800a16a <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800a028:	68bb      	ldr	r3, [r7, #8]
 800a02a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	68dc      	ldr	r4, [r3, #12]
 800a030:	4610      	mov	r0, r2
 800a032:	f7f9 f9ee 	bl	8003412 <lwip_htonl>
 800a036:	4603      	mov	r3, r0
 800a038:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	68dc      	ldr	r4, [r3, #12]
 800a042:	4610      	mov	r0, r2
 800a044:	f7f9 f9d0 	bl	80033e8 <lwip_htons>
 800a048:	4603      	mov	r3, r0
 800a04a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a050:	68ba      	ldr	r2, [r7, #8]
 800a052:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a054:	441a      	add	r2, r3
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68db      	ldr	r3, [r3, #12]
 800a05e:	3314      	adds	r3, #20
 800a060:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	7a9b      	ldrb	r3, [r3, #10]
 800a066:	f003 0301 	and.w	r3, r3, #1
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d015      	beq.n	800a09a <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	3304      	adds	r3, #4
 800a072:	461a      	mov	r2, r3
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	f44f 7006 	mov.w	r0, #536	; 0x218
 800a07a:	f7fc fe8d 	bl	8006d98 <tcp_eff_send_mss_netif>
 800a07e:	4603      	mov	r3, r0
 800a080:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800a082:	8b7b      	ldrh	r3, [r7, #26]
 800a084:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800a088:	4618      	mov	r0, r3
 800a08a:	f7f9 f9c2 	bl	8003412 <lwip_htonl>
 800a08e:	4602      	mov	r2, r0
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	601a      	str	r2, [r3, #0]
    opts += 1;
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	3304      	adds	r3, #4
 800a098:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	da02      	bge.n	800a0aa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800a0a4:	68bb      	ldr	r3, [r7, #8]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800a0aa:	68bb      	ldr	r3, [r7, #8]
 800a0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d10c      	bne.n	800a0cc <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800a0b2:	4b35      	ldr	r3, [pc, #212]	; (800a188 <tcp_output_segment+0x1b8>)
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	68bb      	ldr	r3, [r7, #8]
 800a0b8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4618      	mov	r0, r3
 800a0c2:	f7f9 f9a6 	bl	8003412 <lwip_htonl>
 800a0c6:	4602      	mov	r2, r0
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	68db      	ldr	r3, [r3, #12]
 800a0d0:	461a      	mov	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	1ad3      	subs	r3, r2, r3
 800a0da:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	8959      	ldrh	r1, [r3, #10]
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	685b      	ldr	r3, [r3, #4]
 800a0e6:	8b3a      	ldrh	r2, [r7, #24]
 800a0e8:	1a8a      	subs	r2, r1, r2
 800a0ea:	b292      	uxth	r2, r2
 800a0ec:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	8919      	ldrh	r1, [r3, #8]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	8b3a      	ldrh	r2, [r7, #24]
 800a0fa:	1a8a      	subs	r2, r1, r2
 800a0fc:	b292      	uxth	r2, r2
 800a0fe:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	685b      	ldr	r3, [r3, #4]
 800a104:	68fa      	ldr	r2, [r7, #12]
 800a106:	68d2      	ldr	r2, [r2, #12]
 800a108:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	741a      	strb	r2, [r3, #16]
 800a112:	2200      	movs	r2, #0
 800a114:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	68db      	ldr	r3, [r3, #12]
 800a11a:	f103 0214 	add.w	r2, r3, #20
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	7a9b      	ldrb	r3, [r3, #10]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	f003 0304 	and.w	r3, r3, #4
 800a128:	4413      	add	r3, r2
 800a12a:	69fa      	ldr	r2, [r7, #28]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d006      	beq.n	800a13e <tcp_output_segment+0x16e>
 800a130:	4b10      	ldr	r3, [pc, #64]	; (800a174 <tcp_output_segment+0x1a4>)
 800a132:	f240 621c 	movw	r2, #1564	; 0x61c
 800a136:	4915      	ldr	r1, [pc, #84]	; (800a18c <tcp_output_segment+0x1bc>)
 800a138:	4810      	ldr	r0, [pc, #64]	; (800a17c <tcp_output_segment+0x1ac>)
 800a13a:	f005 fd2b 	bl	800fb94 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	6858      	ldr	r0, [r3, #4]
 800a142:	68b9      	ldr	r1, [r7, #8]
 800a144:	68bb      	ldr	r3, [r7, #8]
 800a146:	1d1c      	adds	r4, r3, #4
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	7add      	ldrb	r5, [r3, #11]
 800a14c:	68bb      	ldr	r3, [r7, #8]
 800a14e:	7a9b      	ldrb	r3, [r3, #10]
 800a150:	687a      	ldr	r2, [r7, #4]
 800a152:	9202      	str	r2, [sp, #8]
 800a154:	2206      	movs	r2, #6
 800a156:	9201      	str	r2, [sp, #4]
 800a158:	9300      	str	r3, [sp, #0]
 800a15a:	462b      	mov	r3, r5
 800a15c:	4622      	mov	r2, r4
 800a15e:	f004 fcaf 	bl	800eac0 <ip4_output_if>
 800a162:	4603      	mov	r3, r0
 800a164:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800a166:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3720      	adds	r7, #32
 800a16e:	46bd      	mov	sp, r7
 800a170:	bdb0      	pop	{r4, r5, r7, pc}
 800a172:	bf00      	nop
 800a174:	0801214c 	.word	0x0801214c
 800a178:	08012710 	.word	0x08012710
 800a17c:	080121a0 	.word	0x080121a0
 800a180:	08012730 	.word	0x08012730
 800a184:	08012750 	.word	0x08012750
 800a188:	20006d54 	.word	0x20006d54
 800a18c:	08012774 	.word	0x08012774

0800a190 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800a190:	b5b0      	push	{r4, r5, r7, lr}
 800a192:	b084      	sub	sp, #16
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d106      	bne.n	800a1ac <tcp_rexmit_rto_prepare+0x1c>
 800a19e:	4b31      	ldr	r3, [pc, #196]	; (800a264 <tcp_rexmit_rto_prepare+0xd4>)
 800a1a0:	f240 6263 	movw	r2, #1635	; 0x663
 800a1a4:	4930      	ldr	r1, [pc, #192]	; (800a268 <tcp_rexmit_rto_prepare+0xd8>)
 800a1a6:	4831      	ldr	r0, [pc, #196]	; (800a26c <tcp_rexmit_rto_prepare+0xdc>)
 800a1a8:	f005 fcf4 	bl	800fb94 <iprintf>

  if (pcb->unacked == NULL) {
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d102      	bne.n	800a1ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800a1b4:	f06f 0305 	mvn.w	r3, #5
 800a1b8:	e050      	b.n	800a25c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a1be:	60fb      	str	r3, [r7, #12]
 800a1c0:	e00b      	b.n	800a1da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	f7ff fee4 	bl	8009f90 <tcp_output_segment_busy>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d002      	beq.n	800a1d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800a1ce:	f06f 0305 	mvn.w	r3, #5
 800a1d2:	e043      	b.n	800a25c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	60fb      	str	r3, [r7, #12]
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1ef      	bne.n	800a1c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f7ff fed4 	bl	8009f90 <tcp_output_segment_busy>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d002      	beq.n	800a1f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800a1ee:	f06f 0305 	mvn.w	r3, #5
 800a1f2:	e033      	b.n	800a25c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2200      	movs	r2, #0
 800a208:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	8b5b      	ldrh	r3, [r3, #26]
 800a20e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800a212:	b29a      	uxth	r2, r3
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f9 f8f7 	bl	8003412 <lwip_htonl>
 800a224:	4604      	mov	r4, r0
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	891b      	ldrh	r3, [r3, #8]
 800a22a:	461d      	mov	r5, r3
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	899b      	ldrh	r3, [r3, #12]
 800a232:	b29b      	uxth	r3, r3
 800a234:	4618      	mov	r0, r3
 800a236:	f7f9 f8d7 	bl	80033e8 <lwip_htons>
 800a23a:	4603      	mov	r3, r0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	f003 0303 	and.w	r3, r3, #3
 800a242:	2b00      	cmp	r3, #0
 800a244:	d001      	beq.n	800a24a <tcp_rexmit_rto_prepare+0xba>
 800a246:	2301      	movs	r3, #1
 800a248:	e000      	b.n	800a24c <tcp_rexmit_rto_prepare+0xbc>
 800a24a:	2300      	movs	r3, #0
 800a24c:	442b      	add	r3, r5
 800a24e:	18e2      	adds	r2, r4, r3
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2200      	movs	r2, #0
 800a258:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800a25a:	2300      	movs	r3, #0
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bdb0      	pop	{r4, r5, r7, pc}
 800a264:	0801214c 	.word	0x0801214c
 800a268:	08012788 	.word	0x08012788
 800a26c:	080121a0 	.word	0x080121a0

0800a270 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d106      	bne.n	800a28c <tcp_rexmit_rto_commit+0x1c>
 800a27e:	4b0d      	ldr	r3, [pc, #52]	; (800a2b4 <tcp_rexmit_rto_commit+0x44>)
 800a280:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800a284:	490c      	ldr	r1, [pc, #48]	; (800a2b8 <tcp_rexmit_rto_commit+0x48>)
 800a286:	480d      	ldr	r0, [pc, #52]	; (800a2bc <tcp_rexmit_rto_commit+0x4c>)
 800a288:	f005 fc84 	bl	800fb94 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a292:	2bff      	cmp	r3, #255	; 0xff
 800a294:	d007      	beq.n	800a2a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a29c:	3301      	adds	r3, #1
 800a29e:	b2da      	uxtb	r2, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f7ff fc7a 	bl	8009ba0 <tcp_output>
}
 800a2ac:	bf00      	nop
 800a2ae:	3708      	adds	r7, #8
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	bd80      	pop	{r7, pc}
 800a2b4:	0801214c 	.word	0x0801214c
 800a2b8:	080127ac 	.word	0x080127ac
 800a2bc:	080121a0 	.word	0x080121a0

0800a2c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d106      	bne.n	800a2dc <tcp_rexmit_rto+0x1c>
 800a2ce:	4b0a      	ldr	r3, [pc, #40]	; (800a2f8 <tcp_rexmit_rto+0x38>)
 800a2d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800a2d4:	4909      	ldr	r1, [pc, #36]	; (800a2fc <tcp_rexmit_rto+0x3c>)
 800a2d6:	480a      	ldr	r0, [pc, #40]	; (800a300 <tcp_rexmit_rto+0x40>)
 800a2d8:	f005 fc5c 	bl	800fb94 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800a2dc:	6878      	ldr	r0, [r7, #4]
 800a2de:	f7ff ff57 	bl	800a190 <tcp_rexmit_rto_prepare>
 800a2e2:	4603      	mov	r3, r0
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d102      	bne.n	800a2ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ffc1 	bl	800a270 <tcp_rexmit_rto_commit>
  }
}
 800a2ee:	bf00      	nop
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	0801214c 	.word	0x0801214c
 800a2fc:	080127d0 	.word	0x080127d0
 800a300:	080121a0 	.word	0x080121a0

0800a304 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800a304:	b590      	push	{r4, r7, lr}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d106      	bne.n	800a320 <tcp_rexmit+0x1c>
 800a312:	4b2f      	ldr	r3, [pc, #188]	; (800a3d0 <tcp_rexmit+0xcc>)
 800a314:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800a318:	492e      	ldr	r1, [pc, #184]	; (800a3d4 <tcp_rexmit+0xd0>)
 800a31a:	482f      	ldr	r0, [pc, #188]	; (800a3d8 <tcp_rexmit+0xd4>)
 800a31c:	f005 fc3a 	bl	800fb94 <iprintf>

  if (pcb->unacked == NULL) {
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <tcp_rexmit+0x2a>
    return ERR_VAL;
 800a328:	f06f 0305 	mvn.w	r3, #5
 800a32c:	e04c      	b.n	800a3c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a332:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800a334:	68b8      	ldr	r0, [r7, #8]
 800a336:	f7ff fe2b 	bl	8009f90 <tcp_output_segment_busy>
 800a33a:	4603      	mov	r3, r0
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d002      	beq.n	800a346 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800a340:	f06f 0305 	mvn.w	r3, #5
 800a344:	e040      	b.n	800a3c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800a346:	68bb      	ldr	r3, [r7, #8]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	336c      	adds	r3, #108	; 0x6c
 800a352:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a354:	e002      	b.n	800a35c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d011      	beq.n	800a388 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	68db      	ldr	r3, [r3, #12]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	4618      	mov	r0, r3
 800a36e:	f7f9 f850 	bl	8003412 <lwip_htonl>
 800a372:	4604      	mov	r4, r0
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	68db      	ldr	r3, [r3, #12]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	4618      	mov	r0, r3
 800a37c:	f7f9 f849 	bl	8003412 <lwip_htonl>
 800a380:	4603      	mov	r3, r0
 800a382:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800a384:	2b00      	cmp	r3, #0
 800a386:	dbe6      	blt.n	800a356 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681a      	ldr	r2, [r3, #0]
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	68ba      	ldr	r2, [r7, #8]
 800a394:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d103      	bne.n	800a3a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3ac:	2bff      	cmp	r3, #255	; 0xff
 800a3ae:	d007      	beq.n	800a3c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	b2da      	uxtb	r2, r3
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd90      	pop	{r4, r7, pc}
 800a3d0:	0801214c 	.word	0x0801214c
 800a3d4:	080127ec 	.word	0x080127ec
 800a3d8:	080121a0 	.word	0x080121a0

0800a3dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d106      	bne.n	800a3f8 <tcp_rexmit_fast+0x1c>
 800a3ea:	4b2e      	ldr	r3, [pc, #184]	; (800a4a4 <tcp_rexmit_fast+0xc8>)
 800a3ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800a3f0:	492d      	ldr	r1, [pc, #180]	; (800a4a8 <tcp_rexmit_fast+0xcc>)
 800a3f2:	482e      	ldr	r0, [pc, #184]	; (800a4ac <tcp_rexmit_fast+0xd0>)
 800a3f4:	f005 fbce 	bl	800fb94 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d04d      	beq.n	800a49c <tcp_rexmit_fast+0xc0>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8b5b      	ldrh	r3, [r3, #26]
 800a404:	f003 0304 	and.w	r3, r3, #4
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d147      	bne.n	800a49c <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff ff79 	bl	800a304 <tcp_rexmit>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d141      	bne.n	800a49c <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a424:	429a      	cmp	r2, r3
 800a426:	d207      	bcs.n	800a438 <tcp_rexmit_fast+0x5c>
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800a42e:	0fda      	lsrs	r2, r3, #31
 800a430:	4413      	add	r3, r2
 800a432:	105b      	asrs	r3, r3, #1
 800a434:	b29b      	uxth	r3, r3
 800a436:	e006      	b.n	800a446 <tcp_rexmit_fast+0x6a>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800a43e:	0fda      	lsrs	r2, r3, #31
 800a440:	4413      	add	r3, r2
 800a442:	105b      	asrs	r3, r3, #1
 800a444:	b29b      	uxth	r3, r3
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800a452:	461a      	mov	r2, r3
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a458:	005b      	lsls	r3, r3, #1
 800a45a:	429a      	cmp	r2, r3
 800a45c:	d206      	bcs.n	800a46c <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a462:	005b      	lsls	r3, r3, #1
 800a464:	b29a      	uxth	r2, r3
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a476:	4619      	mov	r1, r3
 800a478:	0049      	lsls	r1, r1, #1
 800a47a:	440b      	add	r3, r1
 800a47c:	b29b      	uxth	r3, r3
 800a47e:	4413      	add	r3, r2
 800a480:	b29a      	uxth	r2, r3
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	8b5b      	ldrh	r3, [r3, #26]
 800a48c:	f043 0304 	orr.w	r3, r3, #4
 800a490:	b29a      	uxth	r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	2200      	movs	r2, #0
 800a49a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	0801214c 	.word	0x0801214c
 800a4a8:	08012804 	.word	0x08012804
 800a4ac:	080121a0 	.word	0x080121a0

0800a4b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b086      	sub	sp, #24
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	60f8      	str	r0, [r7, #12]
 800a4b8:	607b      	str	r3, [r7, #4]
 800a4ba:	460b      	mov	r3, r1
 800a4bc:	817b      	strh	r3, [r7, #10]
 800a4be:	4613      	mov	r3, r2
 800a4c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800a4c2:	897a      	ldrh	r2, [r7, #10]
 800a4c4:	893b      	ldrh	r3, [r7, #8]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	3314      	adds	r3, #20
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a4d2:	4619      	mov	r1, r3
 800a4d4:	2022      	movs	r0, #34	; 0x22
 800a4d6:	f7fa fab7 	bl	8004a48 <pbuf_alloc>
 800a4da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d04e      	beq.n	800a580 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800a4e2:	697b      	ldr	r3, [r7, #20]
 800a4e4:	895b      	ldrh	r3, [r3, #10]
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	897b      	ldrh	r3, [r7, #10]
 800a4ea:	3314      	adds	r3, #20
 800a4ec:	429a      	cmp	r2, r3
 800a4ee:	da06      	bge.n	800a4fe <tcp_output_alloc_header_common+0x4e>
 800a4f0:	4b26      	ldr	r3, [pc, #152]	; (800a58c <tcp_output_alloc_header_common+0xdc>)
 800a4f2:	f240 7224 	movw	r2, #1828	; 0x724
 800a4f6:	4926      	ldr	r1, [pc, #152]	; (800a590 <tcp_output_alloc_header_common+0xe0>)
 800a4f8:	4826      	ldr	r0, [pc, #152]	; (800a594 <tcp_output_alloc_header_common+0xe4>)
 800a4fa:	f005 fb4b 	bl	800fb94 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	685b      	ldr	r3, [r3, #4]
 800a502:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800a504:	8c3b      	ldrh	r3, [r7, #32]
 800a506:	4618      	mov	r0, r3
 800a508:	f7f8 ff6e 	bl	80033e8 <lwip_htons>
 800a50c:	4603      	mov	r3, r0
 800a50e:	461a      	mov	r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800a514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a516:	4618      	mov	r0, r3
 800a518:	f7f8 ff66 	bl	80033e8 <lwip_htons>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800a524:	693b      	ldr	r3, [r7, #16]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800a52a:	68f8      	ldr	r0, [r7, #12]
 800a52c:	f7f8 ff71 	bl	8003412 <lwip_htonl>
 800a530:	4602      	mov	r2, r0
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800a536:	897b      	ldrh	r3, [r7, #10]
 800a538:	089b      	lsrs	r3, r3, #2
 800a53a:	b29b      	uxth	r3, r3
 800a53c:	3305      	adds	r3, #5
 800a53e:	b29b      	uxth	r3, r3
 800a540:	031b      	lsls	r3, r3, #12
 800a542:	b29a      	uxth	r2, r3
 800a544:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a548:	b29b      	uxth	r3, r3
 800a54a:	4313      	orrs	r3, r2
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	4618      	mov	r0, r3
 800a550:	f7f8 ff4a 	bl	80033e8 <lwip_htons>
 800a554:	4603      	mov	r3, r0
 800a556:	461a      	mov	r2, r3
 800a558:	693b      	ldr	r3, [r7, #16]
 800a55a:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800a55c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a55e:	4618      	mov	r0, r3
 800a560:	f7f8 ff42 	bl	80033e8 <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	461a      	mov	r2, r3
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	2200      	movs	r2, #0
 800a570:	741a      	strb	r2, [r3, #16]
 800a572:	2200      	movs	r2, #0
 800a574:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	2200      	movs	r2, #0
 800a57a:	749a      	strb	r2, [r3, #18]
 800a57c:	2200      	movs	r2, #0
 800a57e:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800a580:	697b      	ldr	r3, [r7, #20]
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	0801214c 	.word	0x0801214c
 800a590:	08012824 	.word	0x08012824
 800a594:	080121a0 	.word	0x080121a0

0800a598 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800a598:	b5b0      	push	{r4, r5, r7, lr}
 800a59a:	b08a      	sub	sp, #40	; 0x28
 800a59c:	af04      	add	r7, sp, #16
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	607b      	str	r3, [r7, #4]
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	817b      	strh	r3, [r7, #10]
 800a5a6:	4613      	mov	r3, r2
 800a5a8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d106      	bne.n	800a5be <tcp_output_alloc_header+0x26>
 800a5b0:	4b15      	ldr	r3, [pc, #84]	; (800a608 <tcp_output_alloc_header+0x70>)
 800a5b2:	f240 7242 	movw	r2, #1858	; 0x742
 800a5b6:	4915      	ldr	r1, [pc, #84]	; (800a60c <tcp_output_alloc_header+0x74>)
 800a5b8:	4815      	ldr	r0, [pc, #84]	; (800a610 <tcp_output_alloc_header+0x78>)
 800a5ba:	f005 faeb 	bl	800fb94 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8adb      	ldrh	r3, [r3, #22]
 800a5c6:	68fa      	ldr	r2, [r7, #12]
 800a5c8:	8b12      	ldrh	r2, [r2, #24]
 800a5ca:	68f9      	ldr	r1, [r7, #12]
 800a5cc:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800a5ce:	893d      	ldrh	r5, [r7, #8]
 800a5d0:	897c      	ldrh	r4, [r7, #10]
 800a5d2:	9103      	str	r1, [sp, #12]
 800a5d4:	2110      	movs	r1, #16
 800a5d6:	9102      	str	r1, [sp, #8]
 800a5d8:	9201      	str	r2, [sp, #4]
 800a5da:	9300      	str	r3, [sp, #0]
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	462a      	mov	r2, r5
 800a5e0:	4621      	mov	r1, r4
 800a5e2:	f7ff ff65 	bl	800a4b0 <tcp_output_alloc_header_common>
 800a5e6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d006      	beq.n	800a5fc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5f2:	68fa      	ldr	r2, [r7, #12]
 800a5f4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800a5f6:	441a      	add	r2, r3
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800a5fc:	697b      	ldr	r3, [r7, #20]
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bdb0      	pop	{r4, r5, r7, pc}
 800a606:	bf00      	nop
 800a608:	0801214c 	.word	0x0801214c
 800a60c:	08012854 	.word	0x08012854
 800a610:	080121a0 	.word	0x080121a0

0800a614 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b088      	sub	sp, #32
 800a618:	af00      	add	r7, sp, #0
 800a61a:	60f8      	str	r0, [r7, #12]
 800a61c:	60b9      	str	r1, [r7, #8]
 800a61e:	4611      	mov	r1, r2
 800a620:	461a      	mov	r2, r3
 800a622:	460b      	mov	r3, r1
 800a624:	71fb      	strb	r3, [r7, #7]
 800a626:	4613      	mov	r3, r2
 800a628:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800a62a:	2300      	movs	r3, #0
 800a62c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d106      	bne.n	800a642 <tcp_output_fill_options+0x2e>
 800a634:	4b13      	ldr	r3, [pc, #76]	; (800a684 <tcp_output_fill_options+0x70>)
 800a636:	f240 7256 	movw	r2, #1878	; 0x756
 800a63a:	4913      	ldr	r1, [pc, #76]	; (800a688 <tcp_output_fill_options+0x74>)
 800a63c:	4813      	ldr	r0, [pc, #76]	; (800a68c <tcp_output_fill_options+0x78>)
 800a63e:	f005 faa9 	bl	800fb94 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800a648:	69bb      	ldr	r3, [r7, #24]
 800a64a:	3314      	adds	r3, #20
 800a64c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	f103 0214 	add.w	r2, r3, #20
 800a654:	8bfb      	ldrh	r3, [r7, #30]
 800a656:	009b      	lsls	r3, r3, #2
 800a658:	4619      	mov	r1, r3
 800a65a:	79fb      	ldrb	r3, [r7, #7]
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	f003 0304 	and.w	r3, r3, #4
 800a662:	440b      	add	r3, r1
 800a664:	4413      	add	r3, r2
 800a666:	697a      	ldr	r2, [r7, #20]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d006      	beq.n	800a67a <tcp_output_fill_options+0x66>
 800a66c:	4b05      	ldr	r3, [pc, #20]	; (800a684 <tcp_output_fill_options+0x70>)
 800a66e:	f240 7275 	movw	r2, #1909	; 0x775
 800a672:	4907      	ldr	r1, [pc, #28]	; (800a690 <tcp_output_fill_options+0x7c>)
 800a674:	4805      	ldr	r0, [pc, #20]	; (800a68c <tcp_output_fill_options+0x78>)
 800a676:	f005 fa8d 	bl	800fb94 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800a67a:	bf00      	nop
 800a67c:	3720      	adds	r7, #32
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	0801214c 	.word	0x0801214c
 800a688:	0801287c 	.word	0x0801287c
 800a68c:	080121a0 	.word	0x080121a0
 800a690:	08012774 	.word	0x08012774

0800a694 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af04      	add	r7, sp, #16
 800a69a:	60f8      	str	r0, [r7, #12]
 800a69c:	60b9      	str	r1, [r7, #8]
 800a69e:	607a      	str	r2, [r7, #4]
 800a6a0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <tcp_output_control_segment+0x22>
 800a6a8:	4b1c      	ldr	r3, [pc, #112]	; (800a71c <tcp_output_control_segment+0x88>)
 800a6aa:	f240 7287 	movw	r2, #1927	; 0x787
 800a6ae:	491c      	ldr	r1, [pc, #112]	; (800a720 <tcp_output_control_segment+0x8c>)
 800a6b0:	481c      	ldr	r0, [pc, #112]	; (800a724 <tcp_output_control_segment+0x90>)
 800a6b2:	f005 fa6f 	bl	800fb94 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800a6b6:	683a      	ldr	r2, [r7, #0]
 800a6b8:	6879      	ldr	r1, [r7, #4]
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f7fe ff30 	bl	8009520 <tcp_route>
 800a6c0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d102      	bne.n	800a6ce <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800a6c8:	23fc      	movs	r3, #252	; 0xfc
 800a6ca:	75fb      	strb	r3, [r7, #23]
 800a6cc:	e01c      	b.n	800a708 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d006      	beq.n	800a6e2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	7adb      	ldrb	r3, [r3, #11]
 800a6d8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	7a9b      	ldrb	r3, [r3, #10]
 800a6de:	757b      	strb	r3, [r7, #21]
 800a6e0:	e003      	b.n	800a6ea <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800a6e2:	23ff      	movs	r3, #255	; 0xff
 800a6e4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800a6ea:	7dba      	ldrb	r2, [r7, #22]
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	9302      	str	r3, [sp, #8]
 800a6f0:	2306      	movs	r3, #6
 800a6f2:	9301      	str	r3, [sp, #4]
 800a6f4:	7d7b      	ldrb	r3, [r7, #21]
 800a6f6:	9300      	str	r3, [sp, #0]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	68b8      	ldr	r0, [r7, #8]
 800a700:	f004 f9de 	bl	800eac0 <ip4_output_if>
 800a704:	4603      	mov	r3, r0
 800a706:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800a708:	68b8      	ldr	r0, [r7, #8]
 800a70a:	f7fa fc7d 	bl	8005008 <pbuf_free>
  return err;
 800a70e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	3718      	adds	r7, #24
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	0801214c 	.word	0x0801214c
 800a720:	080128a4 	.word	0x080128a4
 800a724:	080121a0 	.word	0x080121a0

0800a728 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800a728:	b590      	push	{r4, r7, lr}
 800a72a:	b08b      	sub	sp, #44	; 0x2c
 800a72c:	af04      	add	r7, sp, #16
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
 800a734:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d106      	bne.n	800a74a <tcp_rst+0x22>
 800a73c:	4b1f      	ldr	r3, [pc, #124]	; (800a7bc <tcp_rst+0x94>)
 800a73e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800a742:	491f      	ldr	r1, [pc, #124]	; (800a7c0 <tcp_rst+0x98>)
 800a744:	481f      	ldr	r0, [pc, #124]	; (800a7c4 <tcp_rst+0x9c>)
 800a746:	f005 fa25 	bl	800fb94 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800a74a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d106      	bne.n	800a75e <tcp_rst+0x36>
 800a750:	4b1a      	ldr	r3, [pc, #104]	; (800a7bc <tcp_rst+0x94>)
 800a752:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800a756:	491c      	ldr	r1, [pc, #112]	; (800a7c8 <tcp_rst+0xa0>)
 800a758:	481a      	ldr	r0, [pc, #104]	; (800a7c4 <tcp_rst+0x9c>)
 800a75a:	f005 fa1b 	bl	800fb94 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a75e:	2300      	movs	r3, #0
 800a760:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800a762:	f246 0308 	movw	r3, #24584	; 0x6008
 800a766:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800a768:	7dfb      	ldrb	r3, [r7, #23]
 800a76a:	b29c      	uxth	r4, r3
 800a76c:	68b8      	ldr	r0, [r7, #8]
 800a76e:	f7f8 fe50 	bl	8003412 <lwip_htonl>
 800a772:	4602      	mov	r2, r0
 800a774:	8abb      	ldrh	r3, [r7, #20]
 800a776:	9303      	str	r3, [sp, #12]
 800a778:	2314      	movs	r3, #20
 800a77a:	9302      	str	r3, [sp, #8]
 800a77c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a782:	9300      	str	r3, [sp, #0]
 800a784:	4613      	mov	r3, r2
 800a786:	2200      	movs	r2, #0
 800a788:	4621      	mov	r1, r4
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f7ff fe90 	bl	800a4b0 <tcp_output_alloc_header_common>
 800a790:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a798:	7dfb      	ldrb	r3, [r7, #23]
 800a79a:	2200      	movs	r2, #0
 800a79c:	6939      	ldr	r1, [r7, #16]
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	f7ff ff38 	bl	800a614 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800a7a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7a6:	683a      	ldr	r2, [r7, #0]
 800a7a8:	6939      	ldr	r1, [r7, #16]
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f7ff ff72 	bl	800a694 <tcp_output_control_segment>
 800a7b0:	e000      	b.n	800a7b4 <tcp_rst+0x8c>
    return;
 800a7b2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800a7b4:	371c      	adds	r7, #28
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd90      	pop	{r4, r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0801214c 	.word	0x0801214c
 800a7c0:	080128d0 	.word	0x080128d0
 800a7c4:	080121a0 	.word	0x080121a0
 800a7c8:	080128ec 	.word	0x080128ec

0800a7cc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800a7cc:	b590      	push	{r4, r7, lr}
 800a7ce:	b087      	sub	sp, #28
 800a7d0:	af00      	add	r7, sp, #0
 800a7d2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d106      	bne.n	800a7f0 <tcp_send_empty_ack+0x24>
 800a7e2:	4b28      	ldr	r3, [pc, #160]	; (800a884 <tcp_send_empty_ack+0xb8>)
 800a7e4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800a7e8:	4927      	ldr	r1, [pc, #156]	; (800a888 <tcp_send_empty_ack+0xbc>)
 800a7ea:	4828      	ldr	r0, [pc, #160]	; (800a88c <tcp_send_empty_ack+0xc0>)
 800a7ec:	f005 f9d2 	bl	800fb94 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800a7f0:	7dfb      	ldrb	r3, [r7, #23]
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	f003 0304 	and.w	r3, r3, #4
 800a7fa:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800a7fc:	7d7b      	ldrb	r3, [r7, #21]
 800a7fe:	b29c      	uxth	r4, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a804:	4618      	mov	r0, r3
 800a806:	f7f8 fe04 	bl	8003412 <lwip_htonl>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2200      	movs	r2, #0
 800a80e:	4621      	mov	r1, r4
 800a810:	6878      	ldr	r0, [r7, #4]
 800a812:	f7ff fec1 	bl	800a598 <tcp_output_alloc_header>
 800a816:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d109      	bne.n	800a832 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	8b5b      	ldrh	r3, [r3, #26]
 800a822:	f043 0303 	orr.w	r3, r3, #3
 800a826:	b29a      	uxth	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800a82c:	f06f 0301 	mvn.w	r3, #1
 800a830:	e023      	b.n	800a87a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800a832:	7dbb      	ldrb	r3, [r7, #22]
 800a834:	7dfa      	ldrb	r2, [r7, #23]
 800a836:	6939      	ldr	r1, [r7, #16]
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f7ff feeb 	bl	800a614 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	3304      	adds	r3, #4
 800a844:	6939      	ldr	r1, [r7, #16]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff ff24 	bl	800a694 <tcp_output_control_segment>
 800a84c:	4603      	mov	r3, r0
 800a84e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800a850:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d007      	beq.n	800a868 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	8b5b      	ldrh	r3, [r3, #26]
 800a85c:	f043 0303 	orr.w	r3, r3, #3
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	835a      	strh	r2, [r3, #26]
 800a866:	e006      	b.n	800a876 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	8b5b      	ldrh	r3, [r3, #26]
 800a86c:	f023 0303 	bic.w	r3, r3, #3
 800a870:	b29a      	uxth	r2, r3
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800a876:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	371c      	adds	r7, #28
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd90      	pop	{r4, r7, pc}
 800a882:	bf00      	nop
 800a884:	0801214c 	.word	0x0801214c
 800a888:	08012908 	.word	0x08012908
 800a88c:	080121a0 	.word	0x080121a0

0800a890 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800a890:	b590      	push	{r4, r7, lr}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a898:	2300      	movs	r3, #0
 800a89a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d106      	bne.n	800a8b0 <tcp_keepalive+0x20>
 800a8a2:	4b18      	ldr	r3, [pc, #96]	; (800a904 <tcp_keepalive+0x74>)
 800a8a4:	f640 0224 	movw	r2, #2084	; 0x824
 800a8a8:	4917      	ldr	r1, [pc, #92]	; (800a908 <tcp_keepalive+0x78>)
 800a8aa:	4818      	ldr	r0, [pc, #96]	; (800a90c <tcp_keepalive+0x7c>)
 800a8ac:	f005 f972 	bl	800fb94 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	b29c      	uxth	r4, r3
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8b8:	3b01      	subs	r3, #1
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f8 fda9 	bl	8003412 <lwip_htonl>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	4621      	mov	r1, r4
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff fe66 	bl	800a598 <tcp_output_alloc_header>
 800a8cc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d102      	bne.n	800a8da <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800a8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d8:	e010      	b.n	800a8fc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	6939      	ldr	r1, [r7, #16]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f7ff fe97 	bl	800a614 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	6939      	ldr	r1, [r7, #16]
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f7ff fed0 	bl	800a694 <tcp_output_control_segment>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800a8f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	371c      	adds	r7, #28
 800a900:	46bd      	mov	sp, r7
 800a902:	bd90      	pop	{r4, r7, pc}
 800a904:	0801214c 	.word	0x0801214c
 800a908:	08012928 	.word	0x08012928
 800a90c:	080121a0 	.word	0x080121a0

0800a910 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800a910:	b590      	push	{r4, r7, lr}
 800a912:	b08b      	sub	sp, #44	; 0x2c
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d106      	bne.n	800a932 <tcp_zero_window_probe+0x22>
 800a924:	4b4c      	ldr	r3, [pc, #304]	; (800aa58 <tcp_zero_window_probe+0x148>)
 800a926:	f640 024f 	movw	r2, #2127	; 0x84f
 800a92a:	494c      	ldr	r1, [pc, #304]	; (800aa5c <tcp_zero_window_probe+0x14c>)
 800a92c:	484c      	ldr	r0, [pc, #304]	; (800aa60 <tcp_zero_window_probe+0x150>)
 800a92e:	f005 f931 	bl	800fb94 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a936:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800a938:	6a3b      	ldr	r3, [r7, #32]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	e086      	b.n	800aa50 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a948:	2bff      	cmp	r3, #255	; 0xff
 800a94a:	d007      	beq.n	800a95c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800a952:	3301      	adds	r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800a95c:	6a3b      	ldr	r3, [r7, #32]
 800a95e:	68db      	ldr	r3, [r3, #12]
 800a960:	899b      	ldrh	r3, [r3, #12]
 800a962:	b29b      	uxth	r3, r3
 800a964:	4618      	mov	r0, r3
 800a966:	f7f8 fd3f 	bl	80033e8 <lwip_htons>
 800a96a:	4603      	mov	r3, r0
 800a96c:	b2db      	uxtb	r3, r3
 800a96e:	f003 0301 	and.w	r3, r3, #1
 800a972:	2b00      	cmp	r3, #0
 800a974:	d005      	beq.n	800a982 <tcp_zero_window_probe+0x72>
 800a976:	6a3b      	ldr	r3, [r7, #32]
 800a978:	891b      	ldrh	r3, [r3, #8]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <tcp_zero_window_probe+0x72>
 800a97e:	2301      	movs	r3, #1
 800a980:	e000      	b.n	800a984 <tcp_zero_window_probe+0x74>
 800a982:	2300      	movs	r3, #0
 800a984:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800a986:	7ffb      	ldrb	r3, [r7, #31]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	bf0c      	ite	eq
 800a98c:	2301      	moveq	r3, #1
 800a98e:	2300      	movne	r3, #0
 800a990:	b2db      	uxtb	r3, r3
 800a992:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800a994:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a998:	b299      	uxth	r1, r3
 800a99a:	6a3b      	ldr	r3, [r7, #32]
 800a99c:	68db      	ldr	r3, [r3, #12]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	8bba      	ldrh	r2, [r7, #28]
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7ff fdf8 	bl	800a598 <tcp_output_alloc_header>
 800a9a8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800a9aa:	69bb      	ldr	r3, [r7, #24]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d102      	bne.n	800a9b6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800a9b0:	f04f 33ff 	mov.w	r3, #4294967295
 800a9b4:	e04c      	b.n	800aa50 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800a9b6:	69bb      	ldr	r3, [r7, #24]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800a9bc:	7ffb      	ldrb	r3, [r7, #31]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d011      	beq.n	800a9e6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800a9c2:	697b      	ldr	r3, [r7, #20]
 800a9c4:	899b      	ldrh	r3, [r3, #12]
 800a9c6:	b29b      	uxth	r3, r3
 800a9c8:	b21b      	sxth	r3, r3
 800a9ca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a9ce:	b21c      	sxth	r4, r3
 800a9d0:	2011      	movs	r0, #17
 800a9d2:	f7f8 fd09 	bl	80033e8 <lwip_htons>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b21b      	sxth	r3, r3
 800a9da:	4323      	orrs	r3, r4
 800a9dc:	b21b      	sxth	r3, r3
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	819a      	strh	r2, [r3, #12]
 800a9e4:	e010      	b.n	800aa08 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800a9e6:	69bb      	ldr	r3, [r7, #24]
 800a9e8:	685b      	ldr	r3, [r3, #4]
 800a9ea:	3314      	adds	r3, #20
 800a9ec:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800a9ee:	6a3b      	ldr	r3, [r7, #32]
 800a9f0:	6858      	ldr	r0, [r3, #4]
 800a9f2:	6a3b      	ldr	r3, [r7, #32]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	891a      	ldrh	r2, [r3, #8]
 800a9f8:	6a3b      	ldr	r3, [r7, #32]
 800a9fa:	891b      	ldrh	r3, [r3, #8]
 800a9fc:	1ad3      	subs	r3, r2, r3
 800a9fe:	b29b      	uxth	r3, r3
 800aa00:	2201      	movs	r2, #1
 800aa02:	6939      	ldr	r1, [r7, #16]
 800aa04:	f7fa fcfa 	bl	80053fc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800aa08:	6a3b      	ldr	r3, [r7, #32]
 800aa0a:	68db      	ldr	r3, [r3, #12]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	4618      	mov	r0, r3
 800aa10:	f7f8 fcff 	bl	8003412 <lwip_htonl>
 800aa14:	4603      	mov	r3, r0
 800aa16:	3301      	adds	r3, #1
 800aa18:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	da02      	bge.n	800aa2c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	68fa      	ldr	r2, [r7, #12]
 800aa2a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800aa2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aa30:	2200      	movs	r2, #0
 800aa32:	69b9      	ldr	r1, [r7, #24]
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fded 	bl	800a614 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	3304      	adds	r3, #4
 800aa40:	69b9      	ldr	r1, [r7, #24]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7ff fe26 	bl	800a694 <tcp_output_control_segment>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800aa4c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	372c      	adds	r7, #44	; 0x2c
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd90      	pop	{r4, r7, pc}
 800aa58:	0801214c 	.word	0x0801214c
 800aa5c:	08012944 	.word	0x08012944
 800aa60:	080121a0 	.word	0x080121a0

0800aa64 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b082      	sub	sp, #8
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800aa6c:	f7fa ff0e 	bl	800588c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800aa70:	4b0a      	ldr	r3, [pc, #40]	; (800aa9c <tcpip_tcp_timer+0x38>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d103      	bne.n	800aa80 <tcpip_tcp_timer+0x1c>
 800aa78:	4b09      	ldr	r3, [pc, #36]	; (800aaa0 <tcpip_tcp_timer+0x3c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aa80:	2200      	movs	r2, #0
 800aa82:	4908      	ldr	r1, [pc, #32]	; (800aaa4 <tcpip_tcp_timer+0x40>)
 800aa84:	20fa      	movs	r0, #250	; 0xfa
 800aa86:	f000 f8f1 	bl	800ac6c <sys_timeout>
 800aa8a:	e002      	b.n	800aa92 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <tcpip_tcp_timer+0x44>)
 800aa8e:	2200      	movs	r2, #0
 800aa90:	601a      	str	r2, [r3, #0]
  }
}
 800aa92:	bf00      	nop
 800aa94:	3708      	adds	r7, #8
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20006d50 	.word	0x20006d50
 800aaa0:	20006d60 	.word	0x20006d60
 800aaa4:	0800aa65 	.word	0x0800aa65
 800aaa8:	20000598 	.word	0x20000598

0800aaac <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800aab0:	4b0a      	ldr	r3, [pc, #40]	; (800aadc <tcp_timer_needed+0x30>)
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d10f      	bne.n	800aad8 <tcp_timer_needed+0x2c>
 800aab8:	4b09      	ldr	r3, [pc, #36]	; (800aae0 <tcp_timer_needed+0x34>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d103      	bne.n	800aac8 <tcp_timer_needed+0x1c>
 800aac0:	4b08      	ldr	r3, [pc, #32]	; (800aae4 <tcp_timer_needed+0x38>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d007      	beq.n	800aad8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800aac8:	4b04      	ldr	r3, [pc, #16]	; (800aadc <tcp_timer_needed+0x30>)
 800aaca:	2201      	movs	r2, #1
 800aacc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800aace:	2200      	movs	r2, #0
 800aad0:	4905      	ldr	r1, [pc, #20]	; (800aae8 <tcp_timer_needed+0x3c>)
 800aad2:	20fa      	movs	r0, #250	; 0xfa
 800aad4:	f000 f8ca 	bl	800ac6c <sys_timeout>
  }
}
 800aad8:	bf00      	nop
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	20000598 	.word	0x20000598
 800aae0:	20006d50 	.word	0x20006d50
 800aae4:	20006d60 	.word	0x20006d60
 800aae8:	0800aa65 	.word	0x0800aa65

0800aaec <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b086      	sub	sp, #24
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	60f8      	str	r0, [r7, #12]
 800aaf4:	60b9      	str	r1, [r7, #8]
 800aaf6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800aaf8:	2006      	movs	r0, #6
 800aafa:	f7f9 fbbb 	bl	8004274 <memp_malloc>
 800aafe:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d109      	bne.n	800ab1a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d151      	bne.n	800abb0 <sys_timeout_abs+0xc4>
 800ab0c:	4b2a      	ldr	r3, [pc, #168]	; (800abb8 <sys_timeout_abs+0xcc>)
 800ab0e:	22be      	movs	r2, #190	; 0xbe
 800ab10:	492a      	ldr	r1, [pc, #168]	; (800abbc <sys_timeout_abs+0xd0>)
 800ab12:	482b      	ldr	r0, [pc, #172]	; (800abc0 <sys_timeout_abs+0xd4>)
 800ab14:	f005 f83e 	bl	800fb94 <iprintf>
    return;
 800ab18:	e04a      	b.n	800abb0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	687a      	ldr	r2, [r7, #4]
 800ab2a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800ab2c:	693b      	ldr	r3, [r7, #16]
 800ab2e:	68fa      	ldr	r2, [r7, #12]
 800ab30:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800ab32:	4b24      	ldr	r3, [pc, #144]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d103      	bne.n	800ab42 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800ab3a:	4a22      	ldr	r2, [pc, #136]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab3c:	693b      	ldr	r3, [r7, #16]
 800ab3e:	6013      	str	r3, [r2, #0]
    return;
 800ab40:	e037      	b.n	800abb2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800ab42:	693b      	ldr	r3, [r7, #16]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	4b1f      	ldr	r3, [pc, #124]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	685b      	ldr	r3, [r3, #4]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	0fdb      	lsrs	r3, r3, #31
 800ab50:	f003 0301 	and.w	r3, r3, #1
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d007      	beq.n	800ab6a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800ab5a:	4b1a      	ldr	r3, [pc, #104]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800ab62:	4a18      	ldr	r2, [pc, #96]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab64:	693b      	ldr	r3, [r7, #16]
 800ab66:	6013      	str	r3, [r2, #0]
 800ab68:	e023      	b.n	800abb2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800ab6a:	4b16      	ldr	r3, [pc, #88]	; (800abc4 <sys_timeout_abs+0xd8>)
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	617b      	str	r3, [r7, #20]
 800ab70:	e01a      	b.n	800aba8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d00b      	beq.n	800ab92 <sys_timeout_abs+0xa6>
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	685b      	ldr	r3, [r3, #4]
 800ab84:	1ad3      	subs	r3, r2, r3
 800ab86:	0fdb      	lsrs	r3, r3, #31
 800ab88:	f003 0301 	and.w	r3, r3, #1
 800ab8c:	b2db      	uxtb	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d007      	beq.n	800aba2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681a      	ldr	r2, [r3, #0]
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800ab9a:	697b      	ldr	r3, [r7, #20]
 800ab9c:	693a      	ldr	r2, [r7, #16]
 800ab9e:	601a      	str	r2, [r3, #0]
        break;
 800aba0:	e007      	b.n	800abb2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	697b      	ldr	r3, [r7, #20]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d1e1      	bne.n	800ab72 <sys_timeout_abs+0x86>
 800abae:	e000      	b.n	800abb2 <sys_timeout_abs+0xc6>
    return;
 800abb0:	bf00      	nop
      }
    }
  }
}
 800abb2:	3718      	adds	r7, #24
 800abb4:	46bd      	mov	sp, r7
 800abb6:	bd80      	pop	{r7, pc}
 800abb8:	08012968 	.word	0x08012968
 800abbc:	0801299c 	.word	0x0801299c
 800abc0:	080129dc 	.word	0x080129dc
 800abc4:	20000590 	.word	0x20000590

0800abc8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b086      	sub	sp, #24
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800abd4:	697b      	ldr	r3, [r7, #20]
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	4798      	blx	r3

  now = sys_now();
 800abda:	f7f8 fb3d 	bl	8003258 <sys_now>
 800abde:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800abe0:	697b      	ldr	r3, [r7, #20]
 800abe2:	681a      	ldr	r2, [r3, #0]
 800abe4:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <lwip_cyclic_timer+0x5c>)
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4413      	add	r3, r2
 800abea:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	1ad3      	subs	r3, r2, r3
 800abf2:	0fdb      	lsrs	r3, r3, #31
 800abf4:	f003 0301 	and.w	r3, r3, #1
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d009      	beq.n	800ac12 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	681a      	ldr	r2, [r3, #0]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	4413      	add	r3, r2
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	4907      	ldr	r1, [pc, #28]	; (800ac28 <lwip_cyclic_timer+0x60>)
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	f7ff ff6e 	bl	800aaec <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800ac10:	e004      	b.n	800ac1c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	4904      	ldr	r1, [pc, #16]	; (800ac28 <lwip_cyclic_timer+0x60>)
 800ac16:	68f8      	ldr	r0, [r7, #12]
 800ac18:	f7ff ff68 	bl	800aaec <sys_timeout_abs>
}
 800ac1c:	bf00      	nop
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20000594 	.word	0x20000594
 800ac28:	0800abc9 	.word	0x0800abc9

0800ac2c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800ac2c:	b580      	push	{r7, lr}
 800ac2e:	b082      	sub	sp, #8
 800ac30:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ac32:	2301      	movs	r3, #1
 800ac34:	607b      	str	r3, [r7, #4]
 800ac36:	e00e      	b.n	800ac56 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800ac38:	4a0a      	ldr	r2, [pc, #40]	; (800ac64 <sys_timeouts_init+0x38>)
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	00db      	lsls	r3, r3, #3
 800ac44:	4a07      	ldr	r2, [pc, #28]	; (800ac64 <sys_timeouts_init+0x38>)
 800ac46:	4413      	add	r3, r2
 800ac48:	461a      	mov	r2, r3
 800ac4a:	4907      	ldr	r1, [pc, #28]	; (800ac68 <sys_timeouts_init+0x3c>)
 800ac4c:	f000 f80e 	bl	800ac6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	3301      	adds	r3, #1
 800ac54:	607b      	str	r3, [r7, #4]
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2b05      	cmp	r3, #5
 800ac5a:	d9ed      	bls.n	800ac38 <sys_timeouts_init+0xc>
  }
}
 800ac5c:	bf00      	nop
 800ac5e:	3708      	adds	r7, #8
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}
 800ac64:	080138f0 	.word	0x080138f0
 800ac68:	0800abc9 	.word	0x0800abc9

0800ac6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b086      	sub	sp, #24
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	60f8      	str	r0, [r7, #12]
 800ac74:	60b9      	str	r1, [r7, #8]
 800ac76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac7e:	d306      	bcc.n	800ac8e <sys_timeout+0x22>
 800ac80:	4b0a      	ldr	r3, [pc, #40]	; (800acac <sys_timeout+0x40>)
 800ac82:	f240 1229 	movw	r2, #297	; 0x129
 800ac86:	490a      	ldr	r1, [pc, #40]	; (800acb0 <sys_timeout+0x44>)
 800ac88:	480a      	ldr	r0, [pc, #40]	; (800acb4 <sys_timeout+0x48>)
 800ac8a:	f004 ff83 	bl	800fb94 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800ac8e:	f7f8 fae3 	bl	8003258 <sys_now>
 800ac92:	4602      	mov	r2, r0
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4413      	add	r3, r2
 800ac98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800ac9a:	687a      	ldr	r2, [r7, #4]
 800ac9c:	68b9      	ldr	r1, [r7, #8]
 800ac9e:	6978      	ldr	r0, [r7, #20]
 800aca0:	f7ff ff24 	bl	800aaec <sys_timeout_abs>
#endif
}
 800aca4:	bf00      	nop
 800aca6:	3718      	adds	r7, #24
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}
 800acac:	08012968 	.word	0x08012968
 800acb0:	08012a04 	.word	0x08012a04
 800acb4:	080129dc 	.word	0x080129dc

0800acb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800acbe:	f7f8 facb 	bl	8003258 <sys_now>
 800acc2:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800acc4:	4b1a      	ldr	r3, [pc, #104]	; (800ad30 <sys_check_timeouts+0x78>)
 800acc6:	781b      	ldrb	r3, [r3, #0]
 800acc8:	b2db      	uxtb	r3, r3
 800acca:	2b00      	cmp	r3, #0
 800accc:	d001      	beq.n	800acd2 <sys_check_timeouts+0x1a>
 800acce:	f7f9 fe65 	bl	800499c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800acd2:	4b18      	ldr	r3, [pc, #96]	; (800ad34 <sys_check_timeouts+0x7c>)
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d022      	beq.n	800ad24 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	68fa      	ldr	r2, [r7, #12]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	0fdb      	lsrs	r3, r3, #31
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	b2db      	uxtb	r3, r3
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d11a      	bne.n	800ad28 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	4a0f      	ldr	r2, [pc, #60]	; (800ad34 <sys_check_timeouts+0x7c>)
 800acf8:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	685b      	ldr	r3, [r3, #4]
 800ad0a:	4a0b      	ldr	r2, [pc, #44]	; (800ad38 <sys_check_timeouts+0x80>)
 800ad0c:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800ad0e:	68b9      	ldr	r1, [r7, #8]
 800ad10:	2006      	movs	r0, #6
 800ad12:	f7f9 fafb 	bl	800430c <memp_free>
    if (handler != NULL) {
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d0d3      	beq.n	800acc4 <sys_check_timeouts+0xc>
      handler(arg);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6838      	ldr	r0, [r7, #0]
 800ad20:	4798      	blx	r3
  do {
 800ad22:	e7cf      	b.n	800acc4 <sys_check_timeouts+0xc>
      return;
 800ad24:	bf00      	nop
 800ad26:	e000      	b.n	800ad2a <sys_check_timeouts+0x72>
      return;
 800ad28:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800ad2a:	3710      	adds	r7, #16
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}
 800ad30:	20006d48 	.word	0x20006d48
 800ad34:	20000590 	.word	0x20000590
 800ad38:	20000594 	.word	0x20000594

0800ad3c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ad40:	f004 ff40 	bl	800fbc4 <rand>
 800ad44:	4603      	mov	r3, r0
 800ad46:	b29b      	uxth	r3, r3
 800ad48:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ad4c:	b29b      	uxth	r3, r3
 800ad4e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ad52:	b29a      	uxth	r2, r3
 800ad54:	4b01      	ldr	r3, [pc, #4]	; (800ad5c <udp_init+0x20>)
 800ad56:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ad58:	bf00      	nop
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	20000010 	.word	0x20000010

0800ad60 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800ad66:	2300      	movs	r3, #0
 800ad68:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800ad6a:	4b17      	ldr	r3, [pc, #92]	; (800adc8 <udp_new_port+0x68>)
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	b291      	uxth	r1, r2
 800ad72:	4a15      	ldr	r2, [pc, #84]	; (800adc8 <udp_new_port+0x68>)
 800ad74:	8011      	strh	r1, [r2, #0]
 800ad76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d103      	bne.n	800ad86 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800ad7e:	4b12      	ldr	r3, [pc, #72]	; (800adc8 <udp_new_port+0x68>)
 800ad80:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800ad84:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800ad86:	4b11      	ldr	r3, [pc, #68]	; (800adcc <udp_new_port+0x6c>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	603b      	str	r3, [r7, #0]
 800ad8c:	e011      	b.n	800adb2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	8a5a      	ldrh	r2, [r3, #18]
 800ad92:	4b0d      	ldr	r3, [pc, #52]	; (800adc8 <udp_new_port+0x68>)
 800ad94:	881b      	ldrh	r3, [r3, #0]
 800ad96:	429a      	cmp	r2, r3
 800ad98:	d108      	bne.n	800adac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	80fb      	strh	r3, [r7, #6]
 800ada0:	88fb      	ldrh	r3, [r7, #6]
 800ada2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ada6:	d3e0      	bcc.n	800ad6a <udp_new_port+0xa>
        return 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	e007      	b.n	800adbc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	68db      	ldr	r3, [r3, #12]
 800adb0:	603b      	str	r3, [r7, #0]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d1ea      	bne.n	800ad8e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800adb8:	4b03      	ldr	r3, [pc, #12]	; (800adc8 <udp_new_port+0x68>)
 800adba:	881b      	ldrh	r3, [r3, #0]
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	370c      	adds	r7, #12
 800adc0:	46bd      	mov	sp, r7
 800adc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc6:	4770      	bx	lr
 800adc8:	20000010 	.word	0x20000010
 800adcc:	20006d68 	.word	0x20006d68

0800add0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b084      	sub	sp, #16
 800add4:	af00      	add	r7, sp, #0
 800add6:	60f8      	str	r0, [r7, #12]
 800add8:	60b9      	str	r1, [r7, #8]
 800adda:	4613      	mov	r3, r2
 800addc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d105      	bne.n	800adf0 <udp_input_local_match+0x20>
 800ade4:	4b27      	ldr	r3, [pc, #156]	; (800ae84 <udp_input_local_match+0xb4>)
 800ade6:	2287      	movs	r2, #135	; 0x87
 800ade8:	4927      	ldr	r1, [pc, #156]	; (800ae88 <udp_input_local_match+0xb8>)
 800adea:	4828      	ldr	r0, [pc, #160]	; (800ae8c <udp_input_local_match+0xbc>)
 800adec:	f004 fed2 	bl	800fb94 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d105      	bne.n	800ae02 <udp_input_local_match+0x32>
 800adf6:	4b23      	ldr	r3, [pc, #140]	; (800ae84 <udp_input_local_match+0xb4>)
 800adf8:	2288      	movs	r2, #136	; 0x88
 800adfa:	4925      	ldr	r1, [pc, #148]	; (800ae90 <udp_input_local_match+0xc0>)
 800adfc:	4823      	ldr	r0, [pc, #140]	; (800ae8c <udp_input_local_match+0xbc>)
 800adfe:	f004 fec9 	bl	800fb94 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	7a1b      	ldrb	r3, [r3, #8]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00b      	beq.n	800ae22 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	7a1a      	ldrb	r2, [r3, #8]
 800ae0e:	4b21      	ldr	r3, [pc, #132]	; (800ae94 <udp_input_local_match+0xc4>)
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ae16:	3301      	adds	r3, #1
 800ae18:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	d001      	beq.n	800ae22 <udp_input_local_match+0x52>
    return 0;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	e02b      	b.n	800ae7a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800ae22:	79fb      	ldrb	r3, [r7, #7]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d018      	beq.n	800ae5a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d013      	beq.n	800ae56 <udp_input_local_match+0x86>
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00f      	beq.n	800ae56 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ae36:	4b17      	ldr	r3, [pc, #92]	; (800ae94 <udp_input_local_match+0xc4>)
 800ae38:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800ae3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae3e:	d00a      	beq.n	800ae56 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	4b13      	ldr	r3, [pc, #76]	; (800ae94 <udp_input_local_match+0xc4>)
 800ae46:	695b      	ldr	r3, [r3, #20]
 800ae48:	405a      	eors	r2, r3
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	3308      	adds	r3, #8
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d110      	bne.n	800ae78 <udp_input_local_match+0xa8>
          return 1;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e00f      	b.n	800ae7a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <udp_input_local_match+0xa4>
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d005      	beq.n	800ae74 <udp_input_local_match+0xa4>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	681a      	ldr	r2, [r3, #0]
 800ae6c:	4b09      	ldr	r3, [pc, #36]	; (800ae94 <udp_input_local_match+0xc4>)
 800ae6e:	695b      	ldr	r3, [r3, #20]
 800ae70:	429a      	cmp	r2, r3
 800ae72:	d101      	bne.n	800ae78 <udp_input_local_match+0xa8>
        return 1;
 800ae74:	2301      	movs	r3, #1
 800ae76:	e000      	b.n	800ae7a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800ae78:	2300      	movs	r3, #0
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	08012a50 	.word	0x08012a50
 800ae88:	08012a80 	.word	0x08012a80
 800ae8c:	08012aa4 	.word	0x08012aa4
 800ae90:	08012acc 	.word	0x08012acc
 800ae94:	200037dc 	.word	0x200037dc

0800ae98 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800ae98:	b590      	push	{r4, r7, lr}
 800ae9a:	b08d      	sub	sp, #52	; 0x34
 800ae9c:	af02      	add	r7, sp, #8
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d105      	bne.n	800aeb8 <udp_input+0x20>
 800aeac:	4b7c      	ldr	r3, [pc, #496]	; (800b0a0 <udp_input+0x208>)
 800aeae:	22cf      	movs	r2, #207	; 0xcf
 800aeb0:	497c      	ldr	r1, [pc, #496]	; (800b0a4 <udp_input+0x20c>)
 800aeb2:	487d      	ldr	r0, [pc, #500]	; (800b0a8 <udp_input+0x210>)
 800aeb4:	f004 fe6e 	bl	800fb94 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d105      	bne.n	800aeca <udp_input+0x32>
 800aebe:	4b78      	ldr	r3, [pc, #480]	; (800b0a0 <udp_input+0x208>)
 800aec0:	22d0      	movs	r2, #208	; 0xd0
 800aec2:	497a      	ldr	r1, [pc, #488]	; (800b0ac <udp_input+0x214>)
 800aec4:	4878      	ldr	r0, [pc, #480]	; (800b0a8 <udp_input+0x210>)
 800aec6:	f004 fe65 	bl	800fb94 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	895b      	ldrh	r3, [r3, #10]
 800aece:	2b07      	cmp	r3, #7
 800aed0:	d803      	bhi.n	800aeda <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	f7fa f898 	bl	8005008 <pbuf_free>
    goto end;
 800aed8:	e0de      	b.n	800b098 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800aee0:	4b73      	ldr	r3, [pc, #460]	; (800b0b0 <udp_input+0x218>)
 800aee2:	695a      	ldr	r2, [r3, #20]
 800aee4:	4b72      	ldr	r3, [pc, #456]	; (800b0b0 <udp_input+0x218>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	4619      	mov	r1, r3
 800aeea:	4610      	mov	r0, r2
 800aeec:	f003 fec0 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800aef0:	4603      	mov	r3, r0
 800aef2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	881b      	ldrh	r3, [r3, #0]
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7f8 fa74 	bl	80033e8 <lwip_htons>
 800af00:	4603      	mov	r3, r0
 800af02:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	885b      	ldrh	r3, [r3, #2]
 800af08:	b29b      	uxth	r3, r3
 800af0a:	4618      	mov	r0, r3
 800af0c:	f7f8 fa6c 	bl	80033e8 <lwip_htons>
 800af10:	4603      	mov	r3, r0
 800af12:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800af14:	2300      	movs	r3, #0
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800af1c:	2300      	movs	r3, #0
 800af1e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800af20:	4b64      	ldr	r3, [pc, #400]	; (800b0b4 <udp_input+0x21c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	627b      	str	r3, [r7, #36]	; 0x24
 800af26:	e054      	b.n	800afd2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800af28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af2a:	8a5b      	ldrh	r3, [r3, #18]
 800af2c:	89fa      	ldrh	r2, [r7, #14]
 800af2e:	429a      	cmp	r2, r3
 800af30:	d14a      	bne.n	800afc8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800af32:	7cfb      	ldrb	r3, [r7, #19]
 800af34:	461a      	mov	r2, r3
 800af36:	6839      	ldr	r1, [r7, #0]
 800af38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800af3a:	f7ff ff49 	bl	800add0 <udp_input_local_match>
 800af3e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800af40:	2b00      	cmp	r3, #0
 800af42:	d041      	beq.n	800afc8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800af44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af46:	7c1b      	ldrb	r3, [r3, #16]
 800af48:	f003 0304 	and.w	r3, r3, #4
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d11d      	bne.n	800af8c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800af56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af58:	61fb      	str	r3, [r7, #28]
 800af5a:	e017      	b.n	800af8c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800af5c:	7cfb      	ldrb	r3, [r7, #19]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d014      	beq.n	800af8c <udp_input+0xf4>
 800af62:	4b53      	ldr	r3, [pc, #332]	; (800b0b0 <udp_input+0x218>)
 800af64:	695b      	ldr	r3, [r3, #20]
 800af66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af6a:	d10f      	bne.n	800af8c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800af6c:	69fb      	ldr	r3, [r7, #28]
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	683b      	ldr	r3, [r7, #0]
 800af72:	3304      	adds	r3, #4
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	429a      	cmp	r2, r3
 800af78:	d008      	beq.n	800af8c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800af7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7c:	681a      	ldr	r2, [r3, #0]
 800af7e:	683b      	ldr	r3, [r7, #0]
 800af80:	3304      	adds	r3, #4
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	429a      	cmp	r2, r3
 800af86:	d101      	bne.n	800af8c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800af8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8e:	8a9b      	ldrh	r3, [r3, #20]
 800af90:	8a3a      	ldrh	r2, [r7, #16]
 800af92:	429a      	cmp	r2, r3
 800af94:	d118      	bne.n	800afc8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800af96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af98:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d005      	beq.n	800afaa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800af9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa0:	685a      	ldr	r2, [r3, #4]
 800afa2:	4b43      	ldr	r3, [pc, #268]	; (800b0b0 <udp_input+0x218>)
 800afa4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d10e      	bne.n	800afc8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800afaa:	6a3b      	ldr	r3, [r7, #32]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d014      	beq.n	800afda <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800afb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afb2:	68da      	ldr	r2, [r3, #12]
 800afb4:	6a3b      	ldr	r3, [r7, #32]
 800afb6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800afb8:	4b3e      	ldr	r3, [pc, #248]	; (800b0b4 <udp_input+0x21c>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbe:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800afc0:	4a3c      	ldr	r2, [pc, #240]	; (800b0b4 <udp_input+0x21c>)
 800afc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800afc6:	e008      	b.n	800afda <udp_input+0x142>
      }
    }

    prev = pcb;
 800afc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800afcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afce:	68db      	ldr	r3, [r3, #12]
 800afd0:	627b      	str	r3, [r7, #36]	; 0x24
 800afd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d1a7      	bne.n	800af28 <udp_input+0x90>
 800afd8:	e000      	b.n	800afdc <udp_input+0x144>
        break;
 800afda:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d101      	bne.n	800afe6 <udp_input+0x14e>
    pcb = uncon_pcb;
 800afe2:	69fb      	ldr	r3, [r7, #28]
 800afe4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <udp_input+0x15a>
    for_us = 1;
 800afec:	2301      	movs	r3, #1
 800afee:	76fb      	strb	r3, [r7, #27]
 800aff0:	e00a      	b.n	800b008 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800aff2:	683b      	ldr	r3, [r7, #0]
 800aff4:	3304      	adds	r3, #4
 800aff6:	681a      	ldr	r2, [r3, #0]
 800aff8:	4b2d      	ldr	r3, [pc, #180]	; (800b0b0 <udp_input+0x218>)
 800affa:	695b      	ldr	r3, [r3, #20]
 800affc:	429a      	cmp	r2, r3
 800affe:	bf0c      	ite	eq
 800b000:	2301      	moveq	r3, #1
 800b002:	2300      	movne	r3, #0
 800b004:	b2db      	uxtb	r3, r3
 800b006:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800b008:	7efb      	ldrb	r3, [r7, #27]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d041      	beq.n	800b092 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800b00e:	2108      	movs	r1, #8
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f7f9 ff73 	bl	8004efc <pbuf_remove_header>
 800b016:	4603      	mov	r3, r0
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800b01c:	4b20      	ldr	r3, [pc, #128]	; (800b0a0 <udp_input+0x208>)
 800b01e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800b022:	4925      	ldr	r1, [pc, #148]	; (800b0b8 <udp_input+0x220>)
 800b024:	4820      	ldr	r0, [pc, #128]	; (800b0a8 <udp_input+0x210>)
 800b026:	f004 fdb5 	bl	800fb94 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7f9 ffec 	bl	8005008 <pbuf_free>
      goto end;
 800b030:	e032      	b.n	800b098 <udp_input+0x200>
    }

    if (pcb != NULL) {
 800b032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b034:	2b00      	cmp	r3, #0
 800b036:	d012      	beq.n	800b05e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	699b      	ldr	r3, [r3, #24]
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d00a      	beq.n	800b056 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	699c      	ldr	r4, [r3, #24]
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	69d8      	ldr	r0, [r3, #28]
 800b048:	8a3b      	ldrh	r3, [r7, #16]
 800b04a:	9300      	str	r3, [sp, #0]
 800b04c:	4b1b      	ldr	r3, [pc, #108]	; (800b0bc <udp_input+0x224>)
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b052:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800b054:	e021      	b.n	800b09a <udp_input+0x202>
        pbuf_free(p);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7f9 ffd6 	bl	8005008 <pbuf_free>
        goto end;
 800b05c:	e01c      	b.n	800b098 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800b05e:	7cfb      	ldrb	r3, [r7, #19]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d112      	bne.n	800b08a <udp_input+0x1f2>
 800b064:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <udp_input+0x218>)
 800b066:	695b      	ldr	r3, [r3, #20]
 800b068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b06c:	2be0      	cmp	r3, #224	; 0xe0
 800b06e:	d00c      	beq.n	800b08a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800b070:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <udp_input+0x218>)
 800b072:	899b      	ldrh	r3, [r3, #12]
 800b074:	3308      	adds	r3, #8
 800b076:	b29b      	uxth	r3, r3
 800b078:	b21b      	sxth	r3, r3
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7f9 ffb0 	bl	8004fe2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800b082:	2103      	movs	r1, #3
 800b084:	6878      	ldr	r0, [r7, #4]
 800b086:	f003 fab7 	bl	800e5f8 <icmp_dest_unreach>
      pbuf_free(p);
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f7f9 ffbc 	bl	8005008 <pbuf_free>
  return;
 800b090:	e003      	b.n	800b09a <udp_input+0x202>
    pbuf_free(p);
 800b092:	6878      	ldr	r0, [r7, #4]
 800b094:	f7f9 ffb8 	bl	8005008 <pbuf_free>
  return;
 800b098:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800b09a:	372c      	adds	r7, #44	; 0x2c
 800b09c:	46bd      	mov	sp, r7
 800b09e:	bd90      	pop	{r4, r7, pc}
 800b0a0:	08012a50 	.word	0x08012a50
 800b0a4:	08012af4 	.word	0x08012af4
 800b0a8:	08012aa4 	.word	0x08012aa4
 800b0ac:	08012b0c 	.word	0x08012b0c
 800b0b0:	200037dc 	.word	0x200037dc
 800b0b4:	20006d68 	.word	0x20006d68
 800b0b8:	08012b28 	.word	0x08012b28
 800b0bc:	200037ec 	.word	0x200037ec

0800b0c0 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b088      	sub	sp, #32
 800b0c4:	af02      	add	r7, sp, #8
 800b0c6:	60f8      	str	r0, [r7, #12]
 800b0c8:	60b9      	str	r1, [r7, #8]
 800b0ca:	607a      	str	r2, [r7, #4]
 800b0cc:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d109      	bne.n	800b0e8 <udp_sendto+0x28>
 800b0d4:	4b23      	ldr	r3, [pc, #140]	; (800b164 <udp_sendto+0xa4>)
 800b0d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800b0da:	4923      	ldr	r1, [pc, #140]	; (800b168 <udp_sendto+0xa8>)
 800b0dc:	4823      	ldr	r0, [pc, #140]	; (800b16c <udp_sendto+0xac>)
 800b0de:	f004 fd59 	bl	800fb94 <iprintf>
 800b0e2:	f06f 030f 	mvn.w	r3, #15
 800b0e6:	e038      	b.n	800b15a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d109      	bne.n	800b102 <udp_sendto+0x42>
 800b0ee:	4b1d      	ldr	r3, [pc, #116]	; (800b164 <udp_sendto+0xa4>)
 800b0f0:	f240 2219 	movw	r2, #537	; 0x219
 800b0f4:	491e      	ldr	r1, [pc, #120]	; (800b170 <udp_sendto+0xb0>)
 800b0f6:	481d      	ldr	r0, [pc, #116]	; (800b16c <udp_sendto+0xac>)
 800b0f8:	f004 fd4c 	bl	800fb94 <iprintf>
 800b0fc:	f06f 030f 	mvn.w	r3, #15
 800b100:	e02b      	b.n	800b15a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2b00      	cmp	r3, #0
 800b106:	d109      	bne.n	800b11c <udp_sendto+0x5c>
 800b108:	4b16      	ldr	r3, [pc, #88]	; (800b164 <udp_sendto+0xa4>)
 800b10a:	f240 221a 	movw	r2, #538	; 0x21a
 800b10e:	4919      	ldr	r1, [pc, #100]	; (800b174 <udp_sendto+0xb4>)
 800b110:	4816      	ldr	r0, [pc, #88]	; (800b16c <udp_sendto+0xac>)
 800b112:	f004 fd3f 	bl	800fb94 <iprintf>
 800b116:	f06f 030f 	mvn.w	r3, #15
 800b11a:	e01e      	b.n	800b15a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	7a1b      	ldrb	r3, [r3, #8]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d006      	beq.n	800b132 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	7a1b      	ldrb	r3, [r3, #8]
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f9 fc11 	bl	8004950 <netif_get_by_index>
 800b12e:	6178      	str	r0, [r7, #20]
 800b130:	e003      	b.n	800b13a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800b132:	6878      	ldr	r0, [r7, #4]
 800b134:	f003 faea 	bl	800e70c <ip4_route>
 800b138:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800b13a:	697b      	ldr	r3, [r7, #20]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800b140:	f06f 0303 	mvn.w	r3, #3
 800b144:	e009      	b.n	800b15a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800b146:	887a      	ldrh	r2, [r7, #2]
 800b148:	697b      	ldr	r3, [r7, #20]
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	4613      	mov	r3, r2
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	68b9      	ldr	r1, [r7, #8]
 800b152:	68f8      	ldr	r0, [r7, #12]
 800b154:	f000 f810 	bl	800b178 <udp_sendto_if>
 800b158:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3718      	adds	r7, #24
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
 800b162:	bf00      	nop
 800b164:	08012a50 	.word	0x08012a50
 800b168:	08012b74 	.word	0x08012b74
 800b16c:	08012aa4 	.word	0x08012aa4
 800b170:	08012b8c 	.word	0x08012b8c
 800b174:	08012ba8 	.word	0x08012ba8

0800b178 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b088      	sub	sp, #32
 800b17c:	af02      	add	r7, sp, #8
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	607a      	str	r2, [r7, #4]
 800b184:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d109      	bne.n	800b1a0 <udp_sendto_if+0x28>
 800b18c:	4b2e      	ldr	r3, [pc, #184]	; (800b248 <udp_sendto_if+0xd0>)
 800b18e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b192:	492e      	ldr	r1, [pc, #184]	; (800b24c <udp_sendto_if+0xd4>)
 800b194:	482e      	ldr	r0, [pc, #184]	; (800b250 <udp_sendto_if+0xd8>)
 800b196:	f004 fcfd 	bl	800fb94 <iprintf>
 800b19a:	f06f 030f 	mvn.w	r3, #15
 800b19e:	e04f      	b.n	800b240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d109      	bne.n	800b1ba <udp_sendto_if+0x42>
 800b1a6:	4b28      	ldr	r3, [pc, #160]	; (800b248 <udp_sendto_if+0xd0>)
 800b1a8:	f240 2281 	movw	r2, #641	; 0x281
 800b1ac:	4929      	ldr	r1, [pc, #164]	; (800b254 <udp_sendto_if+0xdc>)
 800b1ae:	4828      	ldr	r0, [pc, #160]	; (800b250 <udp_sendto_if+0xd8>)
 800b1b0:	f004 fcf0 	bl	800fb94 <iprintf>
 800b1b4:	f06f 030f 	mvn.w	r3, #15
 800b1b8:	e042      	b.n	800b240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d109      	bne.n	800b1d4 <udp_sendto_if+0x5c>
 800b1c0:	4b21      	ldr	r3, [pc, #132]	; (800b248 <udp_sendto_if+0xd0>)
 800b1c2:	f240 2282 	movw	r2, #642	; 0x282
 800b1c6:	4924      	ldr	r1, [pc, #144]	; (800b258 <udp_sendto_if+0xe0>)
 800b1c8:	4821      	ldr	r0, [pc, #132]	; (800b250 <udp_sendto_if+0xd8>)
 800b1ca:	f004 fce3 	bl	800fb94 <iprintf>
 800b1ce:	f06f 030f 	mvn.w	r3, #15
 800b1d2:	e035      	b.n	800b240 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d109      	bne.n	800b1ee <udp_sendto_if+0x76>
 800b1da:	4b1b      	ldr	r3, [pc, #108]	; (800b248 <udp_sendto_if+0xd0>)
 800b1dc:	f240 2283 	movw	r2, #643	; 0x283
 800b1e0:	491e      	ldr	r1, [pc, #120]	; (800b25c <udp_sendto_if+0xe4>)
 800b1e2:	481b      	ldr	r0, [pc, #108]	; (800b250 <udp_sendto_if+0xd8>)
 800b1e4:	f004 fcd6 	bl	800fb94 <iprintf>
 800b1e8:	f06f 030f 	mvn.w	r3, #15
 800b1ec:	e028      	b.n	800b240 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d009      	beq.n	800b208 <udp_sendto_if+0x90>
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800b204:	2be0      	cmp	r3, #224	; 0xe0
 800b206:	d103      	bne.n	800b210 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	3304      	adds	r3, #4
 800b20c:	617b      	str	r3, [r7, #20]
 800b20e:	e00b      	b.n	800b228 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681a      	ldr	r2, [r3, #0]
 800b214:	6a3b      	ldr	r3, [r7, #32]
 800b216:	3304      	adds	r3, #4
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d002      	beq.n	800b224 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800b21e:	f06f 0303 	mvn.w	r3, #3
 800b222:	e00d      	b.n	800b240 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800b228:	887a      	ldrh	r2, [r7, #2]
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	4613      	mov	r3, r2
 800b234:	687a      	ldr	r2, [r7, #4]
 800b236:	68b9      	ldr	r1, [r7, #8]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 f811 	bl	800b260 <udp_sendto_if_src>
 800b23e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800b240:	4618      	mov	r0, r3
 800b242:	3718      	adds	r7, #24
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	08012a50 	.word	0x08012a50
 800b24c:	08012bc4 	.word	0x08012bc4
 800b250:	08012aa4 	.word	0x08012aa4
 800b254:	08012be0 	.word	0x08012be0
 800b258:	08012bfc 	.word	0x08012bfc
 800b25c:	08012c1c 	.word	0x08012c1c

0800b260 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b08c      	sub	sp, #48	; 0x30
 800b264:	af04      	add	r7, sp, #16
 800b266:	60f8      	str	r0, [r7, #12]
 800b268:	60b9      	str	r1, [r7, #8]
 800b26a:	607a      	str	r2, [r7, #4]
 800b26c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d109      	bne.n	800b288 <udp_sendto_if_src+0x28>
 800b274:	4b65      	ldr	r3, [pc, #404]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b276:	f240 22d1 	movw	r2, #721	; 0x2d1
 800b27a:	4965      	ldr	r1, [pc, #404]	; (800b410 <udp_sendto_if_src+0x1b0>)
 800b27c:	4865      	ldr	r0, [pc, #404]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b27e:	f004 fc89 	bl	800fb94 <iprintf>
 800b282:	f06f 030f 	mvn.w	r3, #15
 800b286:	e0bc      	b.n	800b402 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d109      	bne.n	800b2a2 <udp_sendto_if_src+0x42>
 800b28e:	4b5f      	ldr	r3, [pc, #380]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b290:	f240 22d2 	movw	r2, #722	; 0x2d2
 800b294:	4960      	ldr	r1, [pc, #384]	; (800b418 <udp_sendto_if_src+0x1b8>)
 800b296:	485f      	ldr	r0, [pc, #380]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b298:	f004 fc7c 	bl	800fb94 <iprintf>
 800b29c:	f06f 030f 	mvn.w	r3, #15
 800b2a0:	e0af      	b.n	800b402 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d109      	bne.n	800b2bc <udp_sendto_if_src+0x5c>
 800b2a8:	4b58      	ldr	r3, [pc, #352]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b2aa:	f240 22d3 	movw	r2, #723	; 0x2d3
 800b2ae:	495b      	ldr	r1, [pc, #364]	; (800b41c <udp_sendto_if_src+0x1bc>)
 800b2b0:	4858      	ldr	r0, [pc, #352]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b2b2:	f004 fc6f 	bl	800fb94 <iprintf>
 800b2b6:	f06f 030f 	mvn.w	r3, #15
 800b2ba:	e0a2      	b.n	800b402 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800b2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d109      	bne.n	800b2d6 <udp_sendto_if_src+0x76>
 800b2c2:	4b52      	ldr	r3, [pc, #328]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b2c4:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b2c8:	4955      	ldr	r1, [pc, #340]	; (800b420 <udp_sendto_if_src+0x1c0>)
 800b2ca:	4852      	ldr	r0, [pc, #328]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b2cc:	f004 fc62 	bl	800fb94 <iprintf>
 800b2d0:	f06f 030f 	mvn.w	r3, #15
 800b2d4:	e095      	b.n	800b402 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800b2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d109      	bne.n	800b2f0 <udp_sendto_if_src+0x90>
 800b2dc:	4b4b      	ldr	r3, [pc, #300]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b2de:	f240 22d5 	movw	r2, #725	; 0x2d5
 800b2e2:	4950      	ldr	r1, [pc, #320]	; (800b424 <udp_sendto_if_src+0x1c4>)
 800b2e4:	484b      	ldr	r0, [pc, #300]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b2e6:	f004 fc55 	bl	800fb94 <iprintf>
 800b2ea:	f06f 030f 	mvn.w	r3, #15
 800b2ee:	e088      	b.n	800b402 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	8a5b      	ldrh	r3, [r3, #18]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10f      	bne.n	800b318 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b2f8:	68f9      	ldr	r1, [r7, #12]
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	8a5b      	ldrh	r3, [r3, #18]
 800b2fe:	461a      	mov	r2, r3
 800b300:	68f8      	ldr	r0, [r7, #12]
 800b302:	f000 f893 	bl	800b42c <udp_bind>
 800b306:	4603      	mov	r3, r0
 800b308:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800b30a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d002      	beq.n	800b318 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800b312:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b316:	e074      	b.n	800b402 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	891b      	ldrh	r3, [r3, #8]
 800b31c:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800b320:	4293      	cmp	r3, r2
 800b322:	d902      	bls.n	800b32a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800b324:	f04f 33ff 	mov.w	r3, #4294967295
 800b328:	e06b      	b.n	800b402 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800b32a:	2108      	movs	r1, #8
 800b32c:	68b8      	ldr	r0, [r7, #8]
 800b32e:	f7f9 fdd5 	bl	8004edc <pbuf_add_header>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d015      	beq.n	800b364 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800b338:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b33c:	2108      	movs	r1, #8
 800b33e:	2022      	movs	r0, #34	; 0x22
 800b340:	f7f9 fb82 	bl	8004a48 <pbuf_alloc>
 800b344:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d102      	bne.n	800b352 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800b34c:	f04f 33ff 	mov.w	r3, #4294967295
 800b350:	e057      	b.n	800b402 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	891b      	ldrh	r3, [r3, #8]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d006      	beq.n	800b368 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800b35a:	68b9      	ldr	r1, [r7, #8]
 800b35c:	69f8      	ldr	r0, [r7, #28]
 800b35e:	f7f9 ff6b 	bl	8005238 <pbuf_chain>
 800b362:	e001      	b.n	800b368 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	895b      	ldrh	r3, [r3, #10]
 800b36c:	2b07      	cmp	r3, #7
 800b36e:	d806      	bhi.n	800b37e <udp_sendto_if_src+0x11e>
 800b370:	4b26      	ldr	r3, [pc, #152]	; (800b40c <udp_sendto_if_src+0x1ac>)
 800b372:	f240 320e 	movw	r2, #782	; 0x30e
 800b376:	492c      	ldr	r1, [pc, #176]	; (800b428 <udp_sendto_if_src+0x1c8>)
 800b378:	4826      	ldr	r0, [pc, #152]	; (800b414 <udp_sendto_if_src+0x1b4>)
 800b37a:	f004 fc0b 	bl	800fb94 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	8a5b      	ldrh	r3, [r3, #18]
 800b388:	4618      	mov	r0, r3
 800b38a:	f7f8 f82d 	bl	80033e8 <lwip_htons>
 800b38e:	4603      	mov	r3, r0
 800b390:	461a      	mov	r2, r3
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800b396:	887b      	ldrh	r3, [r7, #2]
 800b398:	4618      	mov	r0, r3
 800b39a:	f7f8 f825 	bl	80033e8 <lwip_htons>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	719a      	strb	r2, [r3, #6]
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	891b      	ldrh	r3, [r3, #8]
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f7f8 f817 	bl	80033e8 <lwip_htons>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461a      	mov	r2, r3
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800b3c2:	2311      	movs	r3, #17
 800b3c4:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	7adb      	ldrb	r3, [r3, #11]
 800b3ca:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	7a9b      	ldrb	r3, [r3, #10]
 800b3d0:	7cb9      	ldrb	r1, [r7, #18]
 800b3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3d4:	9202      	str	r2, [sp, #8]
 800b3d6:	7cfa      	ldrb	r2, [r7, #19]
 800b3d8:	9201      	str	r2, [sp, #4]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	687a      	ldr	r2, [r7, #4]
 800b3e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b3e2:	69f8      	ldr	r0, [r7, #28]
 800b3e4:	f003 fb96 	bl	800eb14 <ip4_output_if_src>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800b3ec:	69fa      	ldr	r2, [r7, #28]
 800b3ee:	68bb      	ldr	r3, [r7, #8]
 800b3f0:	429a      	cmp	r2, r3
 800b3f2:	d004      	beq.n	800b3fe <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800b3f4:	69f8      	ldr	r0, [r7, #28]
 800b3f6:	f7f9 fe07 	bl	8005008 <pbuf_free>
    q = NULL;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800b3fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800b402:	4618      	mov	r0, r3
 800b404:	3720      	adds	r7, #32
 800b406:	46bd      	mov	sp, r7
 800b408:	bd80      	pop	{r7, pc}
 800b40a:	bf00      	nop
 800b40c:	08012a50 	.word	0x08012a50
 800b410:	08012c3c 	.word	0x08012c3c
 800b414:	08012aa4 	.word	0x08012aa4
 800b418:	08012c5c 	.word	0x08012c5c
 800b41c:	08012c7c 	.word	0x08012c7c
 800b420:	08012ca0 	.word	0x08012ca0
 800b424:	08012cc4 	.word	0x08012cc4
 800b428:	08012ce8 	.word	0x08012ce8

0800b42c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b086      	sub	sp, #24
 800b430:	af00      	add	r7, sp, #0
 800b432:	60f8      	str	r0, [r7, #12]
 800b434:	60b9      	str	r1, [r7, #8]
 800b436:	4613      	mov	r3, r2
 800b438:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d101      	bne.n	800b444 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800b440:	4b39      	ldr	r3, [pc, #228]	; (800b528 <udp_bind+0xfc>)
 800b442:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d109      	bne.n	800b45e <udp_bind+0x32>
 800b44a:	4b38      	ldr	r3, [pc, #224]	; (800b52c <udp_bind+0x100>)
 800b44c:	f240 32b7 	movw	r2, #951	; 0x3b7
 800b450:	4937      	ldr	r1, [pc, #220]	; (800b530 <udp_bind+0x104>)
 800b452:	4838      	ldr	r0, [pc, #224]	; (800b534 <udp_bind+0x108>)
 800b454:	f004 fb9e 	bl	800fb94 <iprintf>
 800b458:	f06f 030f 	mvn.w	r3, #15
 800b45c:	e060      	b.n	800b520 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800b45e:	2300      	movs	r3, #0
 800b460:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b462:	4b35      	ldr	r3, [pc, #212]	; (800b538 <udp_bind+0x10c>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	617b      	str	r3, [r7, #20]
 800b468:	e009      	b.n	800b47e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800b46a:	68fa      	ldr	r2, [r7, #12]
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	429a      	cmp	r2, r3
 800b470:	d102      	bne.n	800b478 <udp_bind+0x4c>
      rebind = 1;
 800b472:	2301      	movs	r3, #1
 800b474:	74fb      	strb	r3, [r7, #19]
      break;
 800b476:	e005      	b.n	800b484 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	68db      	ldr	r3, [r3, #12]
 800b47c:	617b      	str	r3, [r7, #20]
 800b47e:	697b      	ldr	r3, [r7, #20]
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1f2      	bne.n	800b46a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800b484:	88fb      	ldrh	r3, [r7, #6]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d109      	bne.n	800b49e <udp_bind+0x72>
    port = udp_new_port();
 800b48a:	f7ff fc69 	bl	800ad60 <udp_new_port>
 800b48e:	4603      	mov	r3, r0
 800b490:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800b492:	88fb      	ldrh	r3, [r7, #6]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d12c      	bne.n	800b4f2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800b498:	f06f 0307 	mvn.w	r3, #7
 800b49c:	e040      	b.n	800b520 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b49e:	4b26      	ldr	r3, [pc, #152]	; (800b538 <udp_bind+0x10c>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	e022      	b.n	800b4ec <udp_bind+0xc0>
      if (pcb != ipcb) {
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	697b      	ldr	r3, [r7, #20]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d01b      	beq.n	800b4e6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800b4ae:	697b      	ldr	r3, [r7, #20]
 800b4b0:	8a5b      	ldrh	r3, [r3, #18]
 800b4b2:	88fa      	ldrh	r2, [r7, #6]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d116      	bne.n	800b4e6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	681a      	ldr	r2, [r3, #0]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800b4c0:	429a      	cmp	r2, r3
 800b4c2:	d00d      	beq.n	800b4e0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b4c4:	68bb      	ldr	r3, [r7, #8]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d00a      	beq.n	800b4e0 <udp_bind+0xb4>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d006      	beq.n	800b4e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b4d2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d003      	beq.n	800b4e0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d102      	bne.n	800b4e6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800b4e0:	f06f 0307 	mvn.w	r3, #7
 800b4e4:	e01c      	b.n	800b520 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	68db      	ldr	r3, [r3, #12]
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	697b      	ldr	r3, [r7, #20]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d1d9      	bne.n	800b4a6 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d002      	beq.n	800b4fe <udp_bind+0xd2>
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	e000      	b.n	800b500 <udp_bind+0xd4>
 800b4fe:	2300      	movs	r3, #0
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	88fa      	ldrh	r2, [r7, #6]
 800b508:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800b50a:	7cfb      	ldrb	r3, [r7, #19]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d106      	bne.n	800b51e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800b510:	4b09      	ldr	r3, [pc, #36]	; (800b538 <udp_bind+0x10c>)
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800b518:	4a07      	ldr	r2, [pc, #28]	; (800b538 <udp_bind+0x10c>)
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800b51e:	2300      	movs	r3, #0
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}
 800b528:	08013920 	.word	0x08013920
 800b52c:	08012a50 	.word	0x08012a50
 800b530:	08012d18 	.word	0x08012d18
 800b534:	08012aa4 	.word	0x08012aa4
 800b538:	20006d68 	.word	0x20006d68

0800b53c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	4613      	mov	r3, r2
 800b548:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d109      	bne.n	800b564 <udp_connect+0x28>
 800b550:	4b2c      	ldr	r3, [pc, #176]	; (800b604 <udp_connect+0xc8>)
 800b552:	f240 4235 	movw	r2, #1077	; 0x435
 800b556:	492c      	ldr	r1, [pc, #176]	; (800b608 <udp_connect+0xcc>)
 800b558:	482c      	ldr	r0, [pc, #176]	; (800b60c <udp_connect+0xd0>)
 800b55a:	f004 fb1b 	bl	800fb94 <iprintf>
 800b55e:	f06f 030f 	mvn.w	r3, #15
 800b562:	e04b      	b.n	800b5fc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d109      	bne.n	800b57e <udp_connect+0x42>
 800b56a:	4b26      	ldr	r3, [pc, #152]	; (800b604 <udp_connect+0xc8>)
 800b56c:	f240 4236 	movw	r2, #1078	; 0x436
 800b570:	4927      	ldr	r1, [pc, #156]	; (800b610 <udp_connect+0xd4>)
 800b572:	4826      	ldr	r0, [pc, #152]	; (800b60c <udp_connect+0xd0>)
 800b574:	f004 fb0e 	bl	800fb94 <iprintf>
 800b578:	f06f 030f 	mvn.w	r3, #15
 800b57c:	e03e      	b.n	800b5fc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	8a5b      	ldrh	r3, [r3, #18]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d10f      	bne.n	800b5a6 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800b586:	68f9      	ldr	r1, [r7, #12]
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	8a5b      	ldrh	r3, [r3, #18]
 800b58c:	461a      	mov	r2, r3
 800b58e:	68f8      	ldr	r0, [r7, #12]
 800b590:	f7ff ff4c 	bl	800b42c <udp_bind>
 800b594:	4603      	mov	r3, r0
 800b596:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800b598:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <udp_connect+0x6a>
      return err;
 800b5a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800b5a4:	e02a      	b.n	800b5fc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800b5a6:	68bb      	ldr	r3, [r7, #8]
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <udp_connect+0x76>
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	e000      	b.n	800b5b4 <udp_connect+0x78>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	88fa      	ldrh	r2, [r7, #6]
 800b5bc:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	7c1b      	ldrb	r3, [r3, #16]
 800b5c2:	f043 0304 	orr.w	r3, r3, #4
 800b5c6:	b2da      	uxtb	r2, r3
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b5cc:	4b11      	ldr	r3, [pc, #68]	; (800b614 <udp_connect+0xd8>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	617b      	str	r3, [r7, #20]
 800b5d2:	e008      	b.n	800b5e6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	429a      	cmp	r2, r3
 800b5da:	d101      	bne.n	800b5e0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	e00d      	b.n	800b5fc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	617b      	str	r3, [r7, #20]
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	d1f3      	bne.n	800b5d4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800b5ec:	4b09      	ldr	r3, [pc, #36]	; (800b614 <udp_connect+0xd8>)
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800b5f4:	4a07      	ldr	r2, [pc, #28]	; (800b614 <udp_connect+0xd8>)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3718      	adds	r7, #24
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}
 800b604:	08012a50 	.word	0x08012a50
 800b608:	08012d30 	.word	0x08012d30
 800b60c:	08012aa4 	.word	0x08012aa4
 800b610:	08012d4c 	.word	0x08012d4c
 800b614:	20006d68 	.word	0x20006d68

0800b618 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b084      	sub	sp, #16
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	60f8      	str	r0, [r7, #12]
 800b620:	60b9      	str	r1, [r7, #8]
 800b622:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d107      	bne.n	800b63a <udp_recv+0x22>
 800b62a:	4b08      	ldr	r3, [pc, #32]	; (800b64c <udp_recv+0x34>)
 800b62c:	f240 428a 	movw	r2, #1162	; 0x48a
 800b630:	4907      	ldr	r1, [pc, #28]	; (800b650 <udp_recv+0x38>)
 800b632:	4808      	ldr	r0, [pc, #32]	; (800b654 <udp_recv+0x3c>)
 800b634:	f004 faae 	bl	800fb94 <iprintf>
 800b638:	e005      	b.n	800b646 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	61da      	str	r2, [r3, #28]
}
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	08012a50 	.word	0x08012a50
 800b650:	08012d84 	.word	0x08012d84
 800b654:	08012aa4 	.word	0x08012aa4

0800b658 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2b00      	cmp	r3, #0
 800b664:	d107      	bne.n	800b676 <udp_remove+0x1e>
 800b666:	4b19      	ldr	r3, [pc, #100]	; (800b6cc <udp_remove+0x74>)
 800b668:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800b66c:	4918      	ldr	r1, [pc, #96]	; (800b6d0 <udp_remove+0x78>)
 800b66e:	4819      	ldr	r0, [pc, #100]	; (800b6d4 <udp_remove+0x7c>)
 800b670:	f004 fa90 	bl	800fb94 <iprintf>
 800b674:	e026      	b.n	800b6c4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800b676:	4b18      	ldr	r3, [pc, #96]	; (800b6d8 <udp_remove+0x80>)
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d105      	bne.n	800b68c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800b680:	4b15      	ldr	r3, [pc, #84]	; (800b6d8 <udp_remove+0x80>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	4a14      	ldr	r2, [pc, #80]	; (800b6d8 <udp_remove+0x80>)
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	e017      	b.n	800b6bc <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b68c:	4b12      	ldr	r3, [pc, #72]	; (800b6d8 <udp_remove+0x80>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	60fb      	str	r3, [r7, #12]
 800b692:	e010      	b.n	800b6b6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <udp_remove+0x58>
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	68db      	ldr	r3, [r3, #12]
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	429a      	cmp	r2, r3
 800b6a4:	d104      	bne.n	800b6b0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	68da      	ldr	r2, [r3, #12]
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	60da      	str	r2, [r3, #12]
        break;
 800b6ae:	e005      	b.n	800b6bc <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	68db      	ldr	r3, [r3, #12]
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d1eb      	bne.n	800b694 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800b6bc:	6879      	ldr	r1, [r7, #4]
 800b6be:	2000      	movs	r0, #0
 800b6c0:	f7f8 fe24 	bl	800430c <memp_free>
}
 800b6c4:	3710      	adds	r7, #16
 800b6c6:	46bd      	mov	sp, r7
 800b6c8:	bd80      	pop	{r7, pc}
 800b6ca:	bf00      	nop
 800b6cc:	08012a50 	.word	0x08012a50
 800b6d0:	08012d9c 	.word	0x08012d9c
 800b6d4:	08012aa4 	.word	0x08012aa4
 800b6d8:	20006d68 	.word	0x20006d68

0800b6dc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800b6dc:	b580      	push	{r7, lr}
 800b6de:	b082      	sub	sp, #8
 800b6e0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800b6e2:	2000      	movs	r0, #0
 800b6e4:	f7f8 fdc6 	bl	8004274 <memp_malloc>
 800b6e8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800b6f0:	2220      	movs	r2, #32
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	6878      	ldr	r0, [r7, #4]
 800b6f6:	f004 fa45 	bl	800fb84 <memset>
    pcb->ttl = UDP_TTL;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	22ff      	movs	r2, #255	; 0xff
 800b6fe:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800b700:	687b      	ldr	r3, [r7, #4]
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
	...

0800b70c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b085      	sub	sp, #20
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
 800b714:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d01e      	beq.n	800b75a <udp_netif_ip_addr_changed+0x4e>
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d01a      	beq.n	800b75a <udp_netif_ip_addr_changed+0x4e>
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d017      	beq.n	800b75a <udp_netif_ip_addr_changed+0x4e>
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d013      	beq.n	800b75a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b732:	4b0d      	ldr	r3, [pc, #52]	; (800b768 <udp_netif_ip_addr_changed+0x5c>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]
 800b738:	e00c      	b.n	800b754 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	429a      	cmp	r2, r3
 800b744:	d103      	bne.n	800b74e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800b746:	683b      	ldr	r3, [r7, #0]
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68db      	ldr	r3, [r3, #12]
 800b752:	60fb      	str	r3, [r7, #12]
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d1ef      	bne.n	800b73a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800b75a:	bf00      	nop
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr
 800b766:	bf00      	nop
 800b768:	20006d68 	.word	0x20006d68

0800b76c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800b76c:	b580      	push	{r7, lr}
 800b76e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800b770:	4b20      	ldr	r3, [pc, #128]	; (800b7f4 <dhcp_inc_pcb_refcount+0x88>)
 800b772:	781b      	ldrb	r3, [r3, #0]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d133      	bne.n	800b7e0 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800b778:	4b1f      	ldr	r3, [pc, #124]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d005      	beq.n	800b78c <dhcp_inc_pcb_refcount+0x20>
 800b780:	4b1e      	ldr	r3, [pc, #120]	; (800b7fc <dhcp_inc_pcb_refcount+0x90>)
 800b782:	22e5      	movs	r2, #229	; 0xe5
 800b784:	491e      	ldr	r1, [pc, #120]	; (800b800 <dhcp_inc_pcb_refcount+0x94>)
 800b786:	481f      	ldr	r0, [pc, #124]	; (800b804 <dhcp_inc_pcb_refcount+0x98>)
 800b788:	f004 fa04 	bl	800fb94 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800b78c:	f7ff ffa6 	bl	800b6dc <udp_new>
 800b790:	4602      	mov	r2, r0
 800b792:	4b19      	ldr	r3, [pc, #100]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b794:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800b796:	4b18      	ldr	r3, [pc, #96]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d102      	bne.n	800b7a4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800b79e:	f04f 33ff 	mov.w	r3, #4294967295
 800b7a2:	e024      	b.n	800b7ee <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800b7a4:	4b14      	ldr	r3, [pc, #80]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	7a5a      	ldrb	r2, [r3, #9]
 800b7aa:	4b13      	ldr	r3, [pc, #76]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f042 0220 	orr.w	r2, r2, #32
 800b7b2:	b2d2      	uxtb	r2, r2
 800b7b4:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800b7b6:	4b10      	ldr	r3, [pc, #64]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2244      	movs	r2, #68	; 0x44
 800b7bc:	4912      	ldr	r1, [pc, #72]	; (800b808 <dhcp_inc_pcb_refcount+0x9c>)
 800b7be:	4618      	mov	r0, r3
 800b7c0:	f7ff fe34 	bl	800b42c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800b7c4:	4b0c      	ldr	r3, [pc, #48]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	2243      	movs	r2, #67	; 0x43
 800b7ca:	490f      	ldr	r1, [pc, #60]	; (800b808 <dhcp_inc_pcb_refcount+0x9c>)
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f7ff feb5 	bl	800b53c <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800b7d2:	4b09      	ldr	r3, [pc, #36]	; (800b7f8 <dhcp_inc_pcb_refcount+0x8c>)
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	490c      	ldr	r1, [pc, #48]	; (800b80c <dhcp_inc_pcb_refcount+0xa0>)
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f7ff ff1c 	bl	800b618 <udp_recv>
  }

  dhcp_pcb_refcount++;
 800b7e0:	4b04      	ldr	r3, [pc, #16]	; (800b7f4 <dhcp_inc_pcb_refcount+0x88>)
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	3301      	adds	r3, #1
 800b7e6:	b2da      	uxtb	r2, r3
 800b7e8:	4b02      	ldr	r3, [pc, #8]	; (800b7f4 <dhcp_inc_pcb_refcount+0x88>)
 800b7ea:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800b7ec:	2300      	movs	r3, #0
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	200005a0 	.word	0x200005a0
 800b7f8:	2000059c 	.word	0x2000059c
 800b7fc:	08012db4 	.word	0x08012db4
 800b800:	08012dec 	.word	0x08012dec
 800b804:	08012e14 	.word	0x08012e14
 800b808:	08013920 	.word	0x08013920
 800b80c:	0800d165 	.word	0x0800d165

0800b810 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800b814:	4b0e      	ldr	r3, [pc, #56]	; (800b850 <dhcp_dec_pcb_refcount+0x40>)
 800b816:	781b      	ldrb	r3, [r3, #0]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d105      	bne.n	800b828 <dhcp_dec_pcb_refcount+0x18>
 800b81c:	4b0d      	ldr	r3, [pc, #52]	; (800b854 <dhcp_dec_pcb_refcount+0x44>)
 800b81e:	22ff      	movs	r2, #255	; 0xff
 800b820:	490d      	ldr	r1, [pc, #52]	; (800b858 <dhcp_dec_pcb_refcount+0x48>)
 800b822:	480e      	ldr	r0, [pc, #56]	; (800b85c <dhcp_dec_pcb_refcount+0x4c>)
 800b824:	f004 f9b6 	bl	800fb94 <iprintf>
  dhcp_pcb_refcount--;
 800b828:	4b09      	ldr	r3, [pc, #36]	; (800b850 <dhcp_dec_pcb_refcount+0x40>)
 800b82a:	781b      	ldrb	r3, [r3, #0]
 800b82c:	3b01      	subs	r3, #1
 800b82e:	b2da      	uxtb	r2, r3
 800b830:	4b07      	ldr	r3, [pc, #28]	; (800b850 <dhcp_dec_pcb_refcount+0x40>)
 800b832:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800b834:	4b06      	ldr	r3, [pc, #24]	; (800b850 <dhcp_dec_pcb_refcount+0x40>)
 800b836:	781b      	ldrb	r3, [r3, #0]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d107      	bne.n	800b84c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800b83c:	4b08      	ldr	r3, [pc, #32]	; (800b860 <dhcp_dec_pcb_refcount+0x50>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	4618      	mov	r0, r3
 800b842:	f7ff ff09 	bl	800b658 <udp_remove>
    dhcp_pcb = NULL;
 800b846:	4b06      	ldr	r3, [pc, #24]	; (800b860 <dhcp_dec_pcb_refcount+0x50>)
 800b848:	2200      	movs	r2, #0
 800b84a:	601a      	str	r2, [r3, #0]
  }
}
 800b84c:	bf00      	nop
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200005a0 	.word	0x200005a0
 800b854:	08012db4 	.word	0x08012db4
 800b858:	08012e3c 	.word	0x08012e3c
 800b85c:	08012e14 	.word	0x08012e14
 800b860:	2000059c 	.word	0x2000059c

0800b864 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b870:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800b872:	210c      	movs	r1, #12
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f001 f887 	bl	800c988 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800b87a:	4b06      	ldr	r3, [pc, #24]	; (800b894 <dhcp_handle_nak+0x30>)
 800b87c:	4a05      	ldr	r2, [pc, #20]	; (800b894 <dhcp_handle_nak+0x30>)
 800b87e:	4905      	ldr	r1, [pc, #20]	; (800b894 <dhcp_handle_nak+0x30>)
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f7f8 fee5 	bl	8004650 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f000 fc7a 	bl	800c180 <dhcp_discover>
}
 800b88c:	bf00      	nop
 800b88e:	3710      	adds	r7, #16
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}
 800b894:	08013920 	.word	0x08013920

0800b898 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b084      	sub	sp, #16
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8a4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800b8a6:	2108      	movs	r1, #8
 800b8a8:	68f8      	ldr	r0, [r7, #12]
 800b8aa:	f001 f86d 	bl	800c988 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	331c      	adds	r3, #28
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	4619      	mov	r1, r3
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f002 fb9c 	bl	800dff4 <etharp_query>
 800b8bc:	4603      	mov	r3, r0
 800b8be:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	799b      	ldrb	r3, [r3, #6]
 800b8c4:	2bff      	cmp	r3, #255	; 0xff
 800b8c6:	d005      	beq.n	800b8d4 <dhcp_check+0x3c>
    dhcp->tries++;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	799b      	ldrb	r3, [r3, #6]
 800b8cc:	3301      	adds	r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800b8d4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800b8d8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800b8da:	893b      	ldrh	r3, [r7, #8]
 800b8dc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800b8e0:	4a06      	ldr	r2, [pc, #24]	; (800b8fc <dhcp_check+0x64>)
 800b8e2:	fb82 1203 	smull	r1, r2, r2, r3
 800b8e6:	1152      	asrs	r2, r2, #5
 800b8e8:	17db      	asrs	r3, r3, #31
 800b8ea:	1ad3      	subs	r3, r2, r3
 800b8ec:	b29a      	uxth	r2, r3
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800b8f2:	bf00      	nop
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}
 800b8fa:	bf00      	nop
 800b8fc:	10624dd3 	.word	0x10624dd3

0800b900 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b084      	sub	sp, #16
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b90e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800b910:	4b0c      	ldr	r3, [pc, #48]	; (800b944 <dhcp_handle_offer+0x44>)
 800b912:	789b      	ldrb	r3, [r3, #2]
 800b914:	2b00      	cmp	r3, #0
 800b916:	d011      	beq.n	800b93c <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2200      	movs	r2, #0
 800b91c:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800b91e:	4b0a      	ldr	r3, [pc, #40]	; (800b948 <dhcp_handle_offer+0x48>)
 800b920:	689b      	ldr	r3, [r3, #8]
 800b922:	4618      	mov	r0, r3
 800b924:	f7f7 fd75 	bl	8003412 <lwip_htonl>
 800b928:	4602      	mov	r2, r0
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800b92e:	683b      	ldr	r3, [r7, #0]
 800b930:	691a      	ldr	r2, [r3, #16]
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f000 f808 	bl	800b94c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800b93c:	bf00      	nop
 800b93e:	3710      	adds	r7, #16
 800b940:	46bd      	mov	sp, r7
 800b942:	bd80      	pop	{r7, pc}
 800b944:	20006d6c 	.word	0x20006d6c
 800b948:	20006d78 	.word	0x20006d78

0800b94c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800b94c:	b5b0      	push	{r4, r5, r7, lr}
 800b94e:	b08a      	sub	sp, #40	; 0x28
 800b950:	af02      	add	r7, sp, #8
 800b952:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d109      	bne.n	800b96e <dhcp_select+0x22>
 800b95a:	4b71      	ldr	r3, [pc, #452]	; (800bb20 <dhcp_select+0x1d4>)
 800b95c:	f240 1277 	movw	r2, #375	; 0x177
 800b960:	4970      	ldr	r1, [pc, #448]	; (800bb24 <dhcp_select+0x1d8>)
 800b962:	4871      	ldr	r0, [pc, #452]	; (800bb28 <dhcp_select+0x1dc>)
 800b964:	f004 f916 	bl	800fb94 <iprintf>
 800b968:	f06f 030f 	mvn.w	r3, #15
 800b96c:	e0d3      	b.n	800bb16 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b972:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800b974:	69bb      	ldr	r3, [r7, #24]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d109      	bne.n	800b98e <dhcp_select+0x42>
 800b97a:	4b69      	ldr	r3, [pc, #420]	; (800bb20 <dhcp_select+0x1d4>)
 800b97c:	f240 1279 	movw	r2, #377	; 0x179
 800b980:	496a      	ldr	r1, [pc, #424]	; (800bb2c <dhcp_select+0x1e0>)
 800b982:	4869      	ldr	r0, [pc, #420]	; (800bb28 <dhcp_select+0x1dc>)
 800b984:	f004 f906 	bl	800fb94 <iprintf>
 800b988:	f06f 0305 	mvn.w	r3, #5
 800b98c:	e0c3      	b.n	800bb16 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800b98e:	2101      	movs	r1, #1
 800b990:	69b8      	ldr	r0, [r7, #24]
 800b992:	f000 fff9 	bl	800c988 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800b996:	f107 030c 	add.w	r3, r7, #12
 800b99a:	2203      	movs	r2, #3
 800b99c:	69b9      	ldr	r1, [r7, #24]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	f001 fcac 	bl	800d2fc <dhcp_create_msg>
 800b9a4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	f000 8085 	beq.w	800bab8 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800b9ae:	697b      	ldr	r3, [r7, #20]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800b9b4:	89b8      	ldrh	r0, [r7, #12]
 800b9b6:	693b      	ldr	r3, [r7, #16]
 800b9b8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b9bc:	2302      	movs	r3, #2
 800b9be:	2239      	movs	r2, #57	; 0x39
 800b9c0:	f000 fffc 	bl	800c9bc <dhcp_option>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800b9c8:	89b8      	ldrh	r0, [r7, #12]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b9d4:	461a      	mov	r2, r3
 800b9d6:	f001 f84b 	bl	800ca70 <dhcp_option_short>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800b9de:	89b8      	ldrh	r0, [r7, #12]
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800b9e6:	2304      	movs	r3, #4
 800b9e8:	2232      	movs	r2, #50	; 0x32
 800b9ea:	f000 ffe7 	bl	800c9bc <dhcp_option>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800b9f2:	89bc      	ldrh	r4, [r7, #12]
 800b9f4:	693b      	ldr	r3, [r7, #16]
 800b9f6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7f7 fd07 	bl	8003412 <lwip_htonl>
 800ba04:	4603      	mov	r3, r0
 800ba06:	461a      	mov	r2, r3
 800ba08:	4629      	mov	r1, r5
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f001 f862 	bl	800cad4 <dhcp_option_long>
 800ba10:	4603      	mov	r3, r0
 800ba12:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800ba14:	89b8      	ldrh	r0, [r7, #12]
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ba1c:	2304      	movs	r3, #4
 800ba1e:	2236      	movs	r2, #54	; 0x36
 800ba20:	f000 ffcc 	bl	800c9bc <dhcp_option>
 800ba24:	4603      	mov	r3, r0
 800ba26:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800ba28:	89bc      	ldrh	r4, [r7, #12]
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	699b      	ldr	r3, [r3, #24]
 800ba34:	4618      	mov	r0, r3
 800ba36:	f7f7 fcec 	bl	8003412 <lwip_htonl>
 800ba3a:	4603      	mov	r3, r0
 800ba3c:	461a      	mov	r2, r3
 800ba3e:	4629      	mov	r1, r5
 800ba40:	4620      	mov	r0, r4
 800ba42:	f001 f847 	bl	800cad4 <dhcp_option_long>
 800ba46:	4603      	mov	r3, r0
 800ba48:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800ba4a:	89b8      	ldrh	r0, [r7, #12]
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ba52:	2304      	movs	r3, #4
 800ba54:	2237      	movs	r2, #55	; 0x37
 800ba56:	f000 ffb1 	bl	800c9bc <dhcp_option>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ba5e:	2300      	movs	r3, #0
 800ba60:	77bb      	strb	r3, [r7, #30]
 800ba62:	e00e      	b.n	800ba82 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800ba64:	89b8      	ldrh	r0, [r7, #12]
 800ba66:	693b      	ldr	r3, [r7, #16]
 800ba68:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ba6c:	7fbb      	ldrb	r3, [r7, #30]
 800ba6e:	4a30      	ldr	r2, [pc, #192]	; (800bb30 <dhcp_select+0x1e4>)
 800ba70:	5cd3      	ldrb	r3, [r2, r3]
 800ba72:	461a      	mov	r2, r3
 800ba74:	f000 ffd6 	bl	800ca24 <dhcp_option_byte>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800ba7c:	7fbb      	ldrb	r3, [r7, #30]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	77bb      	strb	r3, [r7, #30]
 800ba82:	7fbb      	ldrb	r3, [r7, #30]
 800ba84:	2b03      	cmp	r3, #3
 800ba86:	d9ed      	bls.n	800ba64 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800ba88:	89b8      	ldrh	r0, [r7, #12]
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	33f0      	adds	r3, #240	; 0xf0
 800ba8e:	697a      	ldr	r2, [r7, #20]
 800ba90:	4619      	mov	r1, r3
 800ba92:	f001 fd09 	bl	800d4a8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800ba96:	4b27      	ldr	r3, [pc, #156]	; (800bb34 <dhcp_select+0x1e8>)
 800ba98:	6818      	ldr	r0, [r3, #0]
 800ba9a:	4b27      	ldr	r3, [pc, #156]	; (800bb38 <dhcp_select+0x1ec>)
 800ba9c:	9301      	str	r3, [sp, #4]
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	9300      	str	r3, [sp, #0]
 800baa2:	2343      	movs	r3, #67	; 0x43
 800baa4:	4a25      	ldr	r2, [pc, #148]	; (800bb3c <dhcp_select+0x1f0>)
 800baa6:	6979      	ldr	r1, [r7, #20]
 800baa8:	f7ff fbda 	bl	800b260 <udp_sendto_if_src>
 800baac:	4603      	mov	r3, r0
 800baae:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800bab0:	6978      	ldr	r0, [r7, #20]
 800bab2:	f7f9 faa9 	bl	8005008 <pbuf_free>
 800bab6:	e001      	b.n	800babc <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800bab8:	23ff      	movs	r3, #255	; 0xff
 800baba:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800babc:	69bb      	ldr	r3, [r7, #24]
 800babe:	799b      	ldrb	r3, [r3, #6]
 800bac0:	2bff      	cmp	r3, #255	; 0xff
 800bac2:	d005      	beq.n	800bad0 <dhcp_select+0x184>
    dhcp->tries++;
 800bac4:	69bb      	ldr	r3, [r7, #24]
 800bac6:	799b      	ldrb	r3, [r3, #6]
 800bac8:	3301      	adds	r3, #1
 800baca:	b2da      	uxtb	r2, r3
 800bacc:	69bb      	ldr	r3, [r7, #24]
 800bace:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800bad0:	69bb      	ldr	r3, [r7, #24]
 800bad2:	799b      	ldrb	r3, [r3, #6]
 800bad4:	2b05      	cmp	r3, #5
 800bad6:	d80d      	bhi.n	800baf4 <dhcp_select+0x1a8>
 800bad8:	69bb      	ldr	r3, [r7, #24]
 800bada:	799b      	ldrb	r3, [r3, #6]
 800badc:	461a      	mov	r2, r3
 800bade:	2301      	movs	r3, #1
 800bae0:	4093      	lsls	r3, r2
 800bae2:	b29b      	uxth	r3, r3
 800bae4:	461a      	mov	r2, r3
 800bae6:	0152      	lsls	r2, r2, #5
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	0092      	lsls	r2, r2, #2
 800baec:	4413      	add	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	e001      	b.n	800baf8 <dhcp_select+0x1ac>
 800baf4:	f64e 2360 	movw	r3, #60000	; 0xea60
 800baf8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800bafa:	89fb      	ldrh	r3, [r7, #14]
 800bafc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800bb00:	4a0f      	ldr	r2, [pc, #60]	; (800bb40 <dhcp_select+0x1f4>)
 800bb02:	fb82 1203 	smull	r1, r2, r2, r3
 800bb06:	1152      	asrs	r2, r2, #5
 800bb08:	17db      	asrs	r3, r3, #31
 800bb0a:	1ad3      	subs	r3, r2, r3
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	69bb      	ldr	r3, [r7, #24]
 800bb10:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800bb12:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb16:	4618      	mov	r0, r3
 800bb18:	3720      	adds	r7, #32
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bdb0      	pop	{r4, r5, r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	08012db4 	.word	0x08012db4
 800bb24:	08012e60 	.word	0x08012e60
 800bb28:	08012e14 	.word	0x08012e14
 800bb2c:	08012e7c 	.word	0x08012e7c
 800bb30:	20000014 	.word	0x20000014
 800bb34:	2000059c 	.word	0x2000059c
 800bb38:	08013920 	.word	0x08013920
 800bb3c:	08013924 	.word	0x08013924
 800bb40:	10624dd3 	.word	0x10624dd3

0800bb44 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b082      	sub	sp, #8
 800bb48:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800bb4a:	4b27      	ldr	r3, [pc, #156]	; (800bbe8 <dhcp_coarse_tmr+0xa4>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	607b      	str	r3, [r7, #4]
 800bb50:	e042      	b.n	800bbd8 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb56:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d039      	beq.n	800bbd2 <dhcp_coarse_tmr+0x8e>
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	795b      	ldrb	r3, [r3, #5]
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d035      	beq.n	800bbd2 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	8a9b      	ldrh	r3, [r3, #20]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d012      	beq.n	800bb94 <dhcp_coarse_tmr+0x50>
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	8a5b      	ldrh	r3, [r3, #18]
 800bb72:	3301      	adds	r3, #1
 800bb74:	b29a      	uxth	r2, r3
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	825a      	strh	r2, [r3, #18]
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	8a5a      	ldrh	r2, [r3, #18]
 800bb7e:	683b      	ldr	r3, [r7, #0]
 800bb80:	8a9b      	ldrh	r3, [r3, #20]
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d106      	bne.n	800bb94 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f000 fe64 	bl	800c854 <dhcp_release_and_stop>
        dhcp_start(netif);
 800bb8c:	6878      	ldr	r0, [r7, #4]
 800bb8e:	f000 f989 	bl	800bea4 <dhcp_start>
 800bb92:	e01e      	b.n	800bbd2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	8a1b      	ldrh	r3, [r3, #16]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d00b      	beq.n	800bbb4 <dhcp_coarse_tmr+0x70>
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	8a1b      	ldrh	r3, [r3, #16]
 800bba0:	1e5a      	subs	r2, r3, #1
 800bba2:	b291      	uxth	r1, r2
 800bba4:	683a      	ldr	r2, [r7, #0]
 800bba6:	8211      	strh	r1, [r2, #16]
 800bba8:	2b01      	cmp	r3, #1
 800bbaa:	d103      	bne.n	800bbb4 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800bbac:	6878      	ldr	r0, [r7, #4]
 800bbae:	f000 f8c6 	bl	800bd3e <dhcp_t2_timeout>
 800bbb2:	e00e      	b.n	800bbd2 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	89db      	ldrh	r3, [r3, #14]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d00a      	beq.n	800bbd2 <dhcp_coarse_tmr+0x8e>
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	89db      	ldrh	r3, [r3, #14]
 800bbc0:	1e5a      	subs	r2, r3, #1
 800bbc2:	b291      	uxth	r1, r2
 800bbc4:	683a      	ldr	r2, [r7, #0]
 800bbc6:	81d1      	strh	r1, [r2, #14]
 800bbc8:	2b01      	cmp	r3, #1
 800bbca:	d102      	bne.n	800bbd2 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f888 	bl	800bce2 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	607b      	str	r3, [r7, #4]
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d1b9      	bne.n	800bb52 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800bbde:	bf00      	nop
 800bbe0:	3708      	adds	r7, #8
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20006d40 	.word	0x20006d40

0800bbec <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800bbf2:	4b16      	ldr	r3, [pc, #88]	; (800bc4c <dhcp_fine_tmr+0x60>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	607b      	str	r3, [r7, #4]
 800bbf8:	e020      	b.n	800bc3c <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfe:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800bc00:	683b      	ldr	r3, [r7, #0]
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d017      	beq.n	800bc36 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	891b      	ldrh	r3, [r3, #8]
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d906      	bls.n	800bc1c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	891b      	ldrh	r3, [r3, #8]
 800bc12:	3b01      	subs	r3, #1
 800bc14:	b29a      	uxth	r2, r3
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	811a      	strh	r2, [r3, #8]
 800bc1a:	e00c      	b.n	800bc36 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	891b      	ldrh	r3, [r3, #8]
 800bc20:	2b01      	cmp	r3, #1
 800bc22:	d108      	bne.n	800bc36 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800bc24:	683b      	ldr	r3, [r7, #0]
 800bc26:	891b      	ldrh	r3, [r3, #8]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	b29a      	uxth	r2, r3
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 f80d 	bl	800bc50 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	607b      	str	r3, [r7, #4]
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d1db      	bne.n	800bbfa <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800bc42:	bf00      	nop
 800bc44:	3708      	adds	r7, #8
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	20006d40 	.word	0x20006d40

0800bc50 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b084      	sub	sp, #16
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	795b      	ldrb	r3, [r3, #5]
 800bc62:	2b0c      	cmp	r3, #12
 800bc64:	d003      	beq.n	800bc6e <dhcp_timeout+0x1e>
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	795b      	ldrb	r3, [r3, #5]
 800bc6a:	2b06      	cmp	r3, #6
 800bc6c:	d103      	bne.n	800bc76 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fa86 	bl	800c180 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800bc74:	e031      	b.n	800bcda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	795b      	ldrb	r3, [r3, #5]
 800bc7a:	2b01      	cmp	r3, #1
 800bc7c:	d10e      	bne.n	800bc9c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	799b      	ldrb	r3, [r3, #6]
 800bc82:	2b05      	cmp	r3, #5
 800bc84:	d803      	bhi.n	800bc8e <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f7ff fe60 	bl	800b94c <dhcp_select>
}
 800bc8c:	e025      	b.n	800bcda <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f000 fde0 	bl	800c854 <dhcp_release_and_stop>
      dhcp_start(netif);
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 f905 	bl	800bea4 <dhcp_start>
}
 800bc9a:	e01e      	b.n	800bcda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	795b      	ldrb	r3, [r3, #5]
 800bca0:	2b08      	cmp	r3, #8
 800bca2:	d10b      	bne.n	800bcbc <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	799b      	ldrb	r3, [r3, #6]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d803      	bhi.n	800bcb4 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f7ff fdf3 	bl	800b898 <dhcp_check>
}
 800bcb2:	e012      	b.n	800bcda <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800bcb4:	6878      	ldr	r0, [r7, #4]
 800bcb6:	f000 fb05 	bl	800c2c4 <dhcp_bind>
}
 800bcba:	e00e      	b.n	800bcda <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800bcbc:	68fb      	ldr	r3, [r7, #12]
 800bcbe:	795b      	ldrb	r3, [r3, #5]
 800bcc0:	2b03      	cmp	r3, #3
 800bcc2:	d10a      	bne.n	800bcda <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	799b      	ldrb	r3, [r3, #6]
 800bcc8:	2b01      	cmp	r3, #1
 800bcca:	d803      	bhi.n	800bcd4 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800bccc:	6878      	ldr	r0, [r7, #4]
 800bcce:	f000 fd0b 	bl	800c6e8 <dhcp_reboot>
}
 800bcd2:	e002      	b.n	800bcda <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 fa53 	bl	800c180 <dhcp_discover>
}
 800bcda:	bf00      	nop
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bcee:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	795b      	ldrb	r3, [r3, #5]
 800bcf4:	2b01      	cmp	r3, #1
 800bcf6:	d007      	beq.n	800bd08 <dhcp_t1_timeout+0x26>
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	795b      	ldrb	r3, [r3, #5]
 800bcfc:	2b0a      	cmp	r3, #10
 800bcfe:	d003      	beq.n	800bd08 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bd04:	2b05      	cmp	r3, #5
 800bd06:	d116      	bne.n	800bd36 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800bd08:	6878      	ldr	r0, [r7, #4]
 800bd0a:	f000 fbb5 	bl	800c478 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	899b      	ldrh	r3, [r3, #12]
 800bd12:	461a      	mov	r2, r3
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	8a5b      	ldrh	r3, [r3, #18]
 800bd18:	1ad3      	subs	r3, r2, r3
 800bd1a:	2b01      	cmp	r3, #1
 800bd1c:	dd0b      	ble.n	800bd36 <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	899b      	ldrh	r3, [r3, #12]
 800bd22:	461a      	mov	r2, r3
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	8a5b      	ldrh	r3, [r3, #18]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	0fda      	lsrs	r2, r3, #31
 800bd2c:	4413      	add	r3, r2
 800bd2e:	105b      	asrs	r3, r3, #1
 800bd30:	b29a      	uxth	r2, r3
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800bd36:	bf00      	nop
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}

0800bd3e <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800bd3e:	b580      	push	{r7, lr}
 800bd40:	b084      	sub	sp, #16
 800bd42:	af00      	add	r7, sp, #0
 800bd44:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd4a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	795b      	ldrb	r3, [r3, #5]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d00b      	beq.n	800bd6c <dhcp_t2_timeout+0x2e>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	795b      	ldrb	r3, [r3, #5]
 800bd58:	2b0a      	cmp	r3, #10
 800bd5a:	d007      	beq.n	800bd6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800bd60:	2b05      	cmp	r3, #5
 800bd62:	d003      	beq.n	800bd6c <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	795b      	ldrb	r3, [r3, #5]
 800bd68:	2b04      	cmp	r3, #4
 800bd6a:	d116      	bne.n	800bd9a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 fc1f 	bl	800c5b0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	8a9b      	ldrh	r3, [r3, #20]
 800bd76:	461a      	mov	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	8a5b      	ldrh	r3, [r3, #18]
 800bd7c:	1ad3      	subs	r3, r2, r3
 800bd7e:	2b01      	cmp	r3, #1
 800bd80:	dd0b      	ble.n	800bd9a <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	8a9b      	ldrh	r3, [r3, #20]
 800bd86:	461a      	mov	r2, r3
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	8a5b      	ldrh	r3, [r3, #18]
 800bd8c:	1ad3      	subs	r3, r2, r3
 800bd8e:	0fda      	lsrs	r2, r3, #31
 800bd90:	4413      	add	r3, r2
 800bd92:	105b      	asrs	r3, r3, #1
 800bd94:	b29a      	uxth	r2, r3
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800bd9a:	bf00      	nop
 800bd9c:	3710      	adds	r7, #16
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
	...

0800bda4 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb2:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800bdb4:	693b      	ldr	r3, [r7, #16]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800bdc0:	4b36      	ldr	r3, [pc, #216]	; (800be9c <dhcp_handle_ack+0xf8>)
 800bdc2:	78db      	ldrb	r3, [r3, #3]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d003      	beq.n	800bdd0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800bdc8:	4b35      	ldr	r3, [pc, #212]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800bdca:	68da      	ldr	r2, [r3, #12]
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800bdd0:	4b32      	ldr	r3, [pc, #200]	; (800be9c <dhcp_handle_ack+0xf8>)
 800bdd2:	791b      	ldrb	r3, [r3, #4]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d004      	beq.n	800bde2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800bdd8:	4b31      	ldr	r3, [pc, #196]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800bdda:	691a      	ldr	r2, [r3, #16]
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	62da      	str	r2, [r3, #44]	; 0x2c
 800bde0:	e004      	b.n	800bdec <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bde6:	085a      	lsrs	r2, r3, #1
 800bde8:	693b      	ldr	r3, [r7, #16]
 800bdea:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800bdec:	4b2b      	ldr	r3, [pc, #172]	; (800be9c <dhcp_handle_ack+0xf8>)
 800bdee:	795b      	ldrb	r3, [r3, #5]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d004      	beq.n	800bdfe <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800bdf4:	4b2a      	ldr	r3, [pc, #168]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800bdf6:	695a      	ldr	r2, [r3, #20]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	631a      	str	r2, [r3, #48]	; 0x30
 800bdfc:	e007      	b.n	800be0e <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800bdfe:	693b      	ldr	r3, [r7, #16]
 800be00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800be02:	4613      	mov	r3, r2
 800be04:	00db      	lsls	r3, r3, #3
 800be06:	1a9b      	subs	r3, r3, r2
 800be08:	08da      	lsrs	r2, r3, #3
 800be0a:	693b      	ldr	r3, [r7, #16]
 800be0c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	691a      	ldr	r2, [r3, #16]
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800be16:	4b21      	ldr	r3, [pc, #132]	; (800be9c <dhcp_handle_ack+0xf8>)
 800be18:	799b      	ldrb	r3, [r3, #6]
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d00b      	beq.n	800be36 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800be1e:	4b20      	ldr	r3, [pc, #128]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	4618      	mov	r0, r3
 800be24:	f7f7 faf5 	bl	8003412 <lwip_htonl>
 800be28:	4602      	mov	r2, r0
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2201      	movs	r2, #1
 800be32:	71da      	strb	r2, [r3, #7]
 800be34:	e002      	b.n	800be3c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2200      	movs	r2, #0
 800be3a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800be3c:	4b17      	ldr	r3, [pc, #92]	; (800be9c <dhcp_handle_ack+0xf8>)
 800be3e:	79db      	ldrb	r3, [r3, #7]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d007      	beq.n	800be54 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800be44:	4b16      	ldr	r3, [pc, #88]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800be46:	69db      	ldr	r3, [r3, #28]
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f7 fae2 	bl	8003412 <lwip_htonl>
 800be4e:	4602      	mov	r2, r0
 800be50:	693b      	ldr	r3, [r7, #16]
 800be52:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800be54:	2300      	movs	r3, #0
 800be56:	75fb      	strb	r3, [r7, #23]
 800be58:	e013      	b.n	800be82 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800be5a:	7dfb      	ldrb	r3, [r7, #23]
 800be5c:	3308      	adds	r3, #8
 800be5e:	4a10      	ldr	r2, [pc, #64]	; (800bea0 <dhcp_handle_ack+0xfc>)
 800be60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be64:	4618      	mov	r0, r3
 800be66:	f7f7 fad4 	bl	8003412 <lwip_htonl>
 800be6a:	4603      	mov	r3, r0
 800be6c:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800be6e:	f107 020c 	add.w	r2, r7, #12
 800be72:	7dfb      	ldrb	r3, [r7, #23]
 800be74:	4611      	mov	r1, r2
 800be76:	4618      	mov	r0, r3
 800be78:	f7f7 faec 	bl	8003454 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800be7c:	7dfb      	ldrb	r3, [r7, #23]
 800be7e:	3301      	adds	r3, #1
 800be80:	75fb      	strb	r3, [r7, #23]
 800be82:	7dfb      	ldrb	r3, [r7, #23]
 800be84:	2b01      	cmp	r3, #1
 800be86:	d805      	bhi.n	800be94 <dhcp_handle_ack+0xf0>
 800be88:	7dfb      	ldrb	r3, [r7, #23]
 800be8a:	3308      	adds	r3, #8
 800be8c:	4a03      	ldr	r2, [pc, #12]	; (800be9c <dhcp_handle_ack+0xf8>)
 800be8e:	5cd3      	ldrb	r3, [r2, r3]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d1e2      	bne.n	800be5a <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800be94:	bf00      	nop
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}
 800be9c:	20006d6c 	.word	0x20006d6c
 800bea0:	20006d78 	.word	0x20006d78

0800bea4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d109      	bne.n	800bec6 <dhcp_start+0x22>
 800beb2:	4b37      	ldr	r3, [pc, #220]	; (800bf90 <dhcp_start+0xec>)
 800beb4:	f240 22e7 	movw	r2, #743	; 0x2e7
 800beb8:	4936      	ldr	r1, [pc, #216]	; (800bf94 <dhcp_start+0xf0>)
 800beba:	4837      	ldr	r0, [pc, #220]	; (800bf98 <dhcp_start+0xf4>)
 800bebc:	f003 fe6a 	bl	800fb94 <iprintf>
 800bec0:	f06f 030f 	mvn.w	r3, #15
 800bec4:	e060      	b.n	800bf88 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800becc:	f003 0301 	and.w	r3, r3, #1
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d109      	bne.n	800bee8 <dhcp_start+0x44>
 800bed4:	4b2e      	ldr	r3, [pc, #184]	; (800bf90 <dhcp_start+0xec>)
 800bed6:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800beda:	4930      	ldr	r1, [pc, #192]	; (800bf9c <dhcp_start+0xf8>)
 800bedc:	482e      	ldr	r0, [pc, #184]	; (800bf98 <dhcp_start+0xf4>)
 800bede:	f003 fe59 	bl	800fb94 <iprintf>
 800bee2:	f06f 030f 	mvn.w	r3, #15
 800bee6:	e04f      	b.n	800bf88 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800beec:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bef2:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800bef6:	d202      	bcs.n	800befe <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800bef8:	f04f 33ff 	mov.w	r3, #4294967295
 800befc:	e044      	b.n	800bf88 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10d      	bne.n	800bf20 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800bf04:	2034      	movs	r0, #52	; 0x34
 800bf06:	f7f8 f847 	bl	8003f98 <mem_malloc>
 800bf0a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d102      	bne.n	800bf18 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800bf12:	f04f 33ff 	mov.w	r3, #4294967295
 800bf16:	e037      	b.n	800bf88 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	68fa      	ldr	r2, [r7, #12]
 800bf1c:	625a      	str	r2, [r3, #36]	; 0x24
 800bf1e:	e005      	b.n	800bf2c <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	791b      	ldrb	r3, [r3, #4]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d001      	beq.n	800bf2c <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800bf28:	f7ff fc72 	bl	800b810 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800bf2c:	2234      	movs	r2, #52	; 0x34
 800bf2e:	2100      	movs	r1, #0
 800bf30:	68f8      	ldr	r0, [r7, #12]
 800bf32:	f003 fe27 	bl	800fb84 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800bf36:	f7ff fc19 	bl	800b76c <dhcp_inc_pcb_refcount>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d002      	beq.n	800bf46 <dhcp_start+0xa2>
    return ERR_MEM;
 800bf40:	f04f 33ff 	mov.w	r3, #4294967295
 800bf44:	e020      	b.n	800bf88 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2201      	movs	r2, #1
 800bf4a:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800bf52:	f003 0304 	and.w	r3, r3, #4
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d105      	bne.n	800bf66 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800bf5a:	2102      	movs	r1, #2
 800bf5c:	68f8      	ldr	r0, [r7, #12]
 800bf5e:	f000 fd13 	bl	800c988 <dhcp_set_state>
    return ERR_OK;
 800bf62:	2300      	movs	r3, #0
 800bf64:	e010      	b.n	800bf88 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f90a 	bl	800c180 <dhcp_discover>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800bf70:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d005      	beq.n	800bf84 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800bf78:	6878      	ldr	r0, [r7, #4]
 800bf7a:	f000 fc6b 	bl	800c854 <dhcp_release_and_stop>
    return ERR_MEM;
 800bf7e:	f04f 33ff 	mov.w	r3, #4294967295
 800bf82:	e001      	b.n	800bf88 <dhcp_start+0xe4>
  }
  return result;
 800bf84:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bf88:	4618      	mov	r0, r3
 800bf8a:	3710      	adds	r7, #16
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	08012db4 	.word	0x08012db4
 800bf94:	08012e98 	.word	0x08012e98
 800bf98:	08012e14 	.word	0x08012e14
 800bf9c:	08012edc 	.word	0x08012edc

0800bfa0 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b084      	sub	sp, #16
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfac:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d037      	beq.n	800c024 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	795b      	ldrb	r3, [r3, #5]
 800bfb8:	2b0a      	cmp	r3, #10
 800bfba:	d820      	bhi.n	800bffe <dhcp_network_changed+0x5e>
 800bfbc:	a201      	add	r2, pc, #4	; (adr r2, 800bfc4 <dhcp_network_changed+0x24>)
 800bfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfc2:	bf00      	nop
 800bfc4:	0800c029 	.word	0x0800c029
 800bfc8:	0800bfff 	.word	0x0800bfff
 800bfcc:	0800bfff 	.word	0x0800bfff
 800bfd0:	0800bff1 	.word	0x0800bff1
 800bfd4:	0800bff1 	.word	0x0800bff1
 800bfd8:	0800bff1 	.word	0x0800bff1
 800bfdc:	0800bfff 	.word	0x0800bfff
 800bfe0:	0800bfff 	.word	0x0800bfff
 800bfe4:	0800bfff 	.word	0x0800bfff
 800bfe8:	0800bfff 	.word	0x0800bfff
 800bfec:	0800bff1 	.word	0x0800bff1
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f000 fb76 	bl	800c6e8 <dhcp_reboot>
      break;
 800bffc:	e015      	b.n	800c02a <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	795b      	ldrb	r3, [r3, #5]
 800c002:	2b0c      	cmp	r3, #12
 800c004:	d906      	bls.n	800c014 <dhcp_network_changed+0x74>
 800c006:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <dhcp_network_changed+0x90>)
 800c008:	f240 326d 	movw	r2, #877	; 0x36d
 800c00c:	4909      	ldr	r1, [pc, #36]	; (800c034 <dhcp_network_changed+0x94>)
 800c00e:	480a      	ldr	r0, [pc, #40]	; (800c038 <dhcp_network_changed+0x98>)
 800c010:	f003 fdc0 	bl	800fb94 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f000 f8b0 	bl	800c180 <dhcp_discover>
      break;
 800c020:	bf00      	nop
 800c022:	e002      	b.n	800c02a <dhcp_network_changed+0x8a>
    return;
 800c024:	bf00      	nop
 800c026:	e000      	b.n	800c02a <dhcp_network_changed+0x8a>
      break;
 800c028:	bf00      	nop
  }
}
 800c02a:	3710      	adds	r7, #16
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	08012db4 	.word	0x08012db4
 800c034:	08012f00 	.word	0x08012f00
 800c038:	08012e14 	.word	0x08012e14

0800c03c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b084      	sub	sp, #16
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
 800c044:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d107      	bne.n	800c05c <dhcp_arp_reply+0x20>
 800c04c:	4b0e      	ldr	r3, [pc, #56]	; (800c088 <dhcp_arp_reply+0x4c>)
 800c04e:	f240 328b 	movw	r2, #907	; 0x38b
 800c052:	490e      	ldr	r1, [pc, #56]	; (800c08c <dhcp_arp_reply+0x50>)
 800c054:	480e      	ldr	r0, [pc, #56]	; (800c090 <dhcp_arp_reply+0x54>)
 800c056:	f003 fd9d 	bl	800fb94 <iprintf>
 800c05a:	e012      	b.n	800c082 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c060:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d00c      	beq.n	800c082 <dhcp_arp_reply+0x46>
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	795b      	ldrb	r3, [r3, #5]
 800c06c:	2b08      	cmp	r3, #8
 800c06e:	d108      	bne.n	800c082 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	681a      	ldr	r2, [r3, #0]
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	69db      	ldr	r3, [r3, #28]
 800c078:	429a      	cmp	r2, r3
 800c07a:	d102      	bne.n	800c082 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f809 	bl	800c094 <dhcp_decline>
    }
  }
}
 800c082:	3710      	adds	r7, #16
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	08012db4 	.word	0x08012db4
 800c08c:	08012e98 	.word	0x08012e98
 800c090:	08012e14 	.word	0x08012e14

0800c094 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800c094:	b5b0      	push	{r4, r5, r7, lr}
 800c096:	b08a      	sub	sp, #40	; 0x28
 800c098:	af02      	add	r7, sp, #8
 800c09a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0a0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c0a2:	210c      	movs	r1, #12
 800c0a4:	69b8      	ldr	r0, [r7, #24]
 800c0a6:	f000 fc6f 	bl	800c988 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800c0aa:	f107 030c 	add.w	r3, r7, #12
 800c0ae:	2204      	movs	r2, #4
 800c0b0:	69b9      	ldr	r1, [r7, #24]
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f001 f922 	bl	800d2fc <dhcp_create_msg>
 800c0b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d035      	beq.n	800c12c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c0c0:	697b      	ldr	r3, [r7, #20]
 800c0c2:	685b      	ldr	r3, [r3, #4]
 800c0c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c0c6:	89b8      	ldrh	r0, [r7, #12]
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c0ce:	2304      	movs	r3, #4
 800c0d0:	2232      	movs	r2, #50	; 0x32
 800c0d2:	f000 fc73 	bl	800c9bc <dhcp_option>
 800c0d6:	4603      	mov	r3, r0
 800c0d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c0da:	89bc      	ldrh	r4, [r7, #12]
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	69db      	ldr	r3, [r3, #28]
 800c0e6:	4618      	mov	r0, r3
 800c0e8:	f7f7 f993 	bl	8003412 <lwip_htonl>
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4629      	mov	r1, r5
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	f000 fcee 	bl	800cad4 <dhcp_option_long>
 800c0f8:	4603      	mov	r3, r0
 800c0fa:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c0fc:	89b8      	ldrh	r0, [r7, #12]
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	33f0      	adds	r3, #240	; 0xf0
 800c102:	697a      	ldr	r2, [r7, #20]
 800c104:	4619      	mov	r1, r3
 800c106:	f001 f9cf 	bl	800d4a8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c10a:	4b19      	ldr	r3, [pc, #100]	; (800c170 <dhcp_decline+0xdc>)
 800c10c:	6818      	ldr	r0, [r3, #0]
 800c10e:	4b19      	ldr	r3, [pc, #100]	; (800c174 <dhcp_decline+0xe0>)
 800c110:	9301      	str	r3, [sp, #4]
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	9300      	str	r3, [sp, #0]
 800c116:	2343      	movs	r3, #67	; 0x43
 800c118:	4a17      	ldr	r2, [pc, #92]	; (800c178 <dhcp_decline+0xe4>)
 800c11a:	6979      	ldr	r1, [r7, #20]
 800c11c:	f7ff f8a0 	bl	800b260 <udp_sendto_if_src>
 800c120:	4603      	mov	r3, r0
 800c122:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c124:	6978      	ldr	r0, [r7, #20]
 800c126:	f7f8 ff6f 	bl	8005008 <pbuf_free>
 800c12a:	e001      	b.n	800c130 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c12c:	23ff      	movs	r3, #255	; 0xff
 800c12e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c130:	69bb      	ldr	r3, [r7, #24]
 800c132:	799b      	ldrb	r3, [r3, #6]
 800c134:	2bff      	cmp	r3, #255	; 0xff
 800c136:	d005      	beq.n	800c144 <dhcp_decline+0xb0>
    dhcp->tries++;
 800c138:	69bb      	ldr	r3, [r7, #24]
 800c13a:	799b      	ldrb	r3, [r3, #6]
 800c13c:	3301      	adds	r3, #1
 800c13e:	b2da      	uxtb	r2, r3
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800c144:	f242 7310 	movw	r3, #10000	; 0x2710
 800c148:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c14a:	89fb      	ldrh	r3, [r7, #14]
 800c14c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c150:	4a0a      	ldr	r2, [pc, #40]	; (800c17c <dhcp_decline+0xe8>)
 800c152:	fb82 1203 	smull	r1, r2, r2, r3
 800c156:	1152      	asrs	r2, r2, #5
 800c158:	17db      	asrs	r3, r3, #31
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	b29a      	uxth	r2, r3
 800c15e:	69bb      	ldr	r3, [r7, #24]
 800c160:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c162:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c166:	4618      	mov	r0, r3
 800c168:	3720      	adds	r7, #32
 800c16a:	46bd      	mov	sp, r7
 800c16c:	bdb0      	pop	{r4, r5, r7, pc}
 800c16e:	bf00      	nop
 800c170:	2000059c 	.word	0x2000059c
 800c174:	08013920 	.word	0x08013920
 800c178:	08013924 	.word	0x08013924
 800c17c:	10624dd3 	.word	0x10624dd3

0800c180 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b08a      	sub	sp, #40	; 0x28
 800c184:	af02      	add	r7, sp, #8
 800c186:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800c18e:	2300      	movs	r3, #0
 800c190:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800c192:	69bb      	ldr	r3, [r7, #24]
 800c194:	2200      	movs	r2, #0
 800c196:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800c198:	2106      	movs	r1, #6
 800c19a:	69b8      	ldr	r0, [r7, #24]
 800c19c:	f000 fbf4 	bl	800c988 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800c1a0:	f107 0308 	add.w	r3, r7, #8
 800c1a4:	2201      	movs	r2, #1
 800c1a6:	69b9      	ldr	r1, [r7, #24]
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f001 f8a7 	bl	800d2fc <dhcp_create_msg>
 800c1ae:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d04b      	beq.n	800c24e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c1b6:	693b      	ldr	r3, [r7, #16]
 800c1b8:	685b      	ldr	r3, [r3, #4]
 800c1ba:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c1bc:	8938      	ldrh	r0, [r7, #8]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1c4:	2302      	movs	r3, #2
 800c1c6:	2239      	movs	r2, #57	; 0x39
 800c1c8:	f000 fbf8 	bl	800c9bc <dhcp_option>
 800c1cc:	4603      	mov	r3, r0
 800c1ce:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c1d0:	8938      	ldrh	r0, [r7, #8]
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c1dc:	461a      	mov	r2, r3
 800c1de:	f000 fc47 	bl	800ca70 <dhcp_option_short>
 800c1e2:	4603      	mov	r3, r0
 800c1e4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c1e6:	8938      	ldrh	r0, [r7, #8]
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c1ee:	2304      	movs	r3, #4
 800c1f0:	2237      	movs	r2, #55	; 0x37
 800c1f2:	f000 fbe3 	bl	800c9bc <dhcp_option>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	77fb      	strb	r3, [r7, #31]
 800c1fe:	e00e      	b.n	800c21e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c200:	8938      	ldrh	r0, [r7, #8]
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c208:	7ffb      	ldrb	r3, [r7, #31]
 800c20a:	4a29      	ldr	r2, [pc, #164]	; (800c2b0 <dhcp_discover+0x130>)
 800c20c:	5cd3      	ldrb	r3, [r2, r3]
 800c20e:	461a      	mov	r2, r3
 800c210:	f000 fc08 	bl	800ca24 <dhcp_option_byte>
 800c214:	4603      	mov	r3, r0
 800c216:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c218:	7ffb      	ldrb	r3, [r7, #31]
 800c21a:	3301      	adds	r3, #1
 800c21c:	77fb      	strb	r3, [r7, #31]
 800c21e:	7ffb      	ldrb	r3, [r7, #31]
 800c220:	2b03      	cmp	r3, #3
 800c222:	d9ed      	bls.n	800c200 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c224:	8938      	ldrh	r0, [r7, #8]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	33f0      	adds	r3, #240	; 0xf0
 800c22a:	693a      	ldr	r2, [r7, #16]
 800c22c:	4619      	mov	r1, r3
 800c22e:	f001 f93b 	bl	800d4a8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800c232:	4b20      	ldr	r3, [pc, #128]	; (800c2b4 <dhcp_discover+0x134>)
 800c234:	6818      	ldr	r0, [r3, #0]
 800c236:	4b20      	ldr	r3, [pc, #128]	; (800c2b8 <dhcp_discover+0x138>)
 800c238:	9301      	str	r3, [sp, #4]
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	9300      	str	r3, [sp, #0]
 800c23e:	2343      	movs	r3, #67	; 0x43
 800c240:	4a1e      	ldr	r2, [pc, #120]	; (800c2bc <dhcp_discover+0x13c>)
 800c242:	6939      	ldr	r1, [r7, #16]
 800c244:	f7ff f80c 	bl	800b260 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800c248:	6938      	ldr	r0, [r7, #16]
 800c24a:	f7f8 fedd 	bl	8005008 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	799b      	ldrb	r3, [r3, #6]
 800c252:	2bff      	cmp	r3, #255	; 0xff
 800c254:	d005      	beq.n	800c262 <dhcp_discover+0xe2>
    dhcp->tries++;
 800c256:	69bb      	ldr	r3, [r7, #24]
 800c258:	799b      	ldrb	r3, [r3, #6]
 800c25a:	3301      	adds	r3, #1
 800c25c:	b2da      	uxtb	r2, r3
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800c262:	69bb      	ldr	r3, [r7, #24]
 800c264:	799b      	ldrb	r3, [r3, #6]
 800c266:	2b05      	cmp	r3, #5
 800c268:	d80d      	bhi.n	800c286 <dhcp_discover+0x106>
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	799b      	ldrb	r3, [r3, #6]
 800c26e:	461a      	mov	r2, r3
 800c270:	2301      	movs	r3, #1
 800c272:	4093      	lsls	r3, r2
 800c274:	b29b      	uxth	r3, r3
 800c276:	461a      	mov	r2, r3
 800c278:	0152      	lsls	r2, r2, #5
 800c27a:	1ad2      	subs	r2, r2, r3
 800c27c:	0092      	lsls	r2, r2, #2
 800c27e:	4413      	add	r3, r2
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	b29b      	uxth	r3, r3
 800c284:	e001      	b.n	800c28a <dhcp_discover+0x10a>
 800c286:	f64e 2360 	movw	r3, #60000	; 0xea60
 800c28a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c28c:	897b      	ldrh	r3, [r7, #10]
 800c28e:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c292:	4a0b      	ldr	r2, [pc, #44]	; (800c2c0 <dhcp_discover+0x140>)
 800c294:	fb82 1203 	smull	r1, r2, r2, r3
 800c298:	1152      	asrs	r2, r2, #5
 800c29a:	17db      	asrs	r3, r3, #31
 800c29c:	1ad3      	subs	r3, r2, r3
 800c29e:	b29a      	uxth	r2, r3
 800c2a0:	69bb      	ldr	r3, [r7, #24]
 800c2a2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c2a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c2a8:	4618      	mov	r0, r3
 800c2aa:	3720      	adds	r7, #32
 800c2ac:	46bd      	mov	sp, r7
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	20000014 	.word	0x20000014
 800c2b4:	2000059c 	.word	0x2000059c
 800c2b8:	08013920 	.word	0x08013920
 800c2bc:	08013924 	.word	0x08013924
 800c2c0:	10624dd3 	.word	0x10624dd3

0800c2c4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b088      	sub	sp, #32
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d107      	bne.n	800c2e2 <dhcp_bind+0x1e>
 800c2d2:	4b64      	ldr	r3, [pc, #400]	; (800c464 <dhcp_bind+0x1a0>)
 800c2d4:	f240 4215 	movw	r2, #1045	; 0x415
 800c2d8:	4963      	ldr	r1, [pc, #396]	; (800c468 <dhcp_bind+0x1a4>)
 800c2da:	4864      	ldr	r0, [pc, #400]	; (800c46c <dhcp_bind+0x1a8>)
 800c2dc:	f003 fc5a 	bl	800fb94 <iprintf>
 800c2e0:	e0bc      	b.n	800c45c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800c2e8:	69bb      	ldr	r3, [r7, #24]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d107      	bne.n	800c2fe <dhcp_bind+0x3a>
 800c2ee:	4b5d      	ldr	r3, [pc, #372]	; (800c464 <dhcp_bind+0x1a0>)
 800c2f0:	f240 4217 	movw	r2, #1047	; 0x417
 800c2f4:	495e      	ldr	r1, [pc, #376]	; (800c470 <dhcp_bind+0x1ac>)
 800c2f6:	485d      	ldr	r0, [pc, #372]	; (800c46c <dhcp_bind+0x1a8>)
 800c2f8:	f003 fc4c 	bl	800fb94 <iprintf>
 800c2fc:	e0ae      	b.n	800c45c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800c2fe:	69bb      	ldr	r3, [r7, #24]
 800c300:	2200      	movs	r2, #0
 800c302:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800c304:	69bb      	ldr	r3, [r7, #24]
 800c306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c30c:	d019      	beq.n	800c342 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c30e:	69bb      	ldr	r3, [r7, #24]
 800c310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c312:	331e      	adds	r3, #30
 800c314:	4a57      	ldr	r2, [pc, #348]	; (800c474 <dhcp_bind+0x1b0>)
 800c316:	fba2 2303 	umull	r2, r3, r2, r3
 800c31a:	095b      	lsrs	r3, r3, #5
 800c31c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c324:	d302      	bcc.n	800c32c <dhcp_bind+0x68>
      timeout = 0xffff;
 800c326:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c32a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	b29a      	uxth	r2, r3
 800c330:	69bb      	ldr	r3, [r7, #24]
 800c332:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800c334:	69bb      	ldr	r3, [r7, #24]
 800c336:	8a9b      	ldrh	r3, [r3, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d102      	bne.n	800c342 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800c33c:	69bb      	ldr	r3, [r7, #24]
 800c33e:	2201      	movs	r2, #1
 800c340:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800c342:	69bb      	ldr	r3, [r7, #24]
 800c344:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c34a:	d01d      	beq.n	800c388 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c34c:	69bb      	ldr	r3, [r7, #24]
 800c34e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c350:	331e      	adds	r3, #30
 800c352:	4a48      	ldr	r2, [pc, #288]	; (800c474 <dhcp_bind+0x1b0>)
 800c354:	fba2 2303 	umull	r2, r3, r2, r3
 800c358:	095b      	lsrs	r3, r3, #5
 800c35a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c362:	d302      	bcc.n	800c36a <dhcp_bind+0xa6>
      timeout = 0xffff;
 800c364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c368:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800c36a:	69fb      	ldr	r3, [r7, #28]
 800c36c:	b29a      	uxth	r2, r3
 800c36e:	69bb      	ldr	r3, [r7, #24]
 800c370:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800c372:	69bb      	ldr	r3, [r7, #24]
 800c374:	895b      	ldrh	r3, [r3, #10]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d102      	bne.n	800c380 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800c37a:	69bb      	ldr	r3, [r7, #24]
 800c37c:	2201      	movs	r2, #1
 800c37e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800c380:	69bb      	ldr	r3, [r7, #24]
 800c382:	895a      	ldrh	r2, [r3, #10]
 800c384:	69bb      	ldr	r3, [r7, #24]
 800c386:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800c388:	69bb      	ldr	r3, [r7, #24]
 800c38a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c390:	d01d      	beq.n	800c3ce <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800c392:	69bb      	ldr	r3, [r7, #24]
 800c394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c396:	331e      	adds	r3, #30
 800c398:	4a36      	ldr	r2, [pc, #216]	; (800c474 <dhcp_bind+0x1b0>)
 800c39a:	fba2 2303 	umull	r2, r3, r2, r3
 800c39e:	095b      	lsrs	r3, r3, #5
 800c3a0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c3a8:	d302      	bcc.n	800c3b0 <dhcp_bind+0xec>
      timeout = 0xffff;
 800c3aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c3ae:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	b29a      	uxth	r2, r3
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	899b      	ldrh	r3, [r3, #12]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d102      	bne.n	800c3c6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800c3c0:	69bb      	ldr	r3, [r7, #24]
 800c3c2:	2201      	movs	r2, #1
 800c3c4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800c3c6:	69bb      	ldr	r3, [r7, #24]
 800c3c8:	899a      	ldrh	r2, [r3, #12]
 800c3ca:	69bb      	ldr	r3, [r7, #24]
 800c3cc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800c3ce:	69bb      	ldr	r3, [r7, #24]
 800c3d0:	895a      	ldrh	r2, [r3, #10]
 800c3d2:	69bb      	ldr	r3, [r7, #24]
 800c3d4:	899b      	ldrh	r3, [r3, #12]
 800c3d6:	429a      	cmp	r2, r3
 800c3d8:	d306      	bcc.n	800c3e8 <dhcp_bind+0x124>
 800c3da:	69bb      	ldr	r3, [r7, #24]
 800c3dc:	899b      	ldrh	r3, [r3, #12]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d002      	beq.n	800c3e8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800c3e2:	69bb      	ldr	r3, [r7, #24]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800c3e8:	69bb      	ldr	r3, [r7, #24]
 800c3ea:	79db      	ldrb	r3, [r3, #7]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d003      	beq.n	800c3f8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	6a1b      	ldr	r3, [r3, #32]
 800c3f4:	613b      	str	r3, [r7, #16]
 800c3f6:	e014      	b.n	800c422 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	331c      	adds	r3, #28
 800c3fc:	781b      	ldrb	r3, [r3, #0]
 800c3fe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800c400:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c404:	2b00      	cmp	r3, #0
 800c406:	db02      	blt.n	800c40e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800c408:	23ff      	movs	r3, #255	; 0xff
 800c40a:	613b      	str	r3, [r7, #16]
 800c40c:	e009      	b.n	800c422 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800c40e:	7dfb      	ldrb	r3, [r7, #23]
 800c410:	2bbf      	cmp	r3, #191	; 0xbf
 800c412:	d903      	bls.n	800c41c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800c414:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800c418:	613b      	str	r3, [r7, #16]
 800c41a:	e002      	b.n	800c422 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800c41c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c420:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800c422:	69bb      	ldr	r3, [r7, #24]
 800c424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c426:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d108      	bne.n	800c440 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	69da      	ldr	r2, [r3, #28]
 800c432:	693b      	ldr	r3, [r7, #16]
 800c434:	4013      	ands	r3, r2
 800c436:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c43e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800c440:	210a      	movs	r1, #10
 800c442:	69b8      	ldr	r0, [r7, #24]
 800c444:	f000 faa0 	bl	800c988 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800c448:	69bb      	ldr	r3, [r7, #24]
 800c44a:	f103 011c 	add.w	r1, r3, #28
 800c44e:	f107 030c 	add.w	r3, r7, #12
 800c452:	f107 0210 	add.w	r2, r7, #16
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7f8 f8fa 	bl	8004650 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800c45c:	3720      	adds	r7, #32
 800c45e:	46bd      	mov	sp, r7
 800c460:	bd80      	pop	{r7, pc}
 800c462:	bf00      	nop
 800c464:	08012db4 	.word	0x08012db4
 800c468:	08012f14 	.word	0x08012f14
 800c46c:	08012e14 	.word	0x08012e14
 800c470:	08012f30 	.word	0x08012f30
 800c474:	88888889 	.word	0x88888889

0800c478 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08a      	sub	sp, #40	; 0x28
 800c47c:	af02      	add	r7, sp, #8
 800c47e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c484:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800c486:	2105      	movs	r1, #5
 800c488:	69b8      	ldr	r0, [r7, #24]
 800c48a:	f000 fa7d 	bl	800c988 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c48e:	f107 030c 	add.w	r3, r7, #12
 800c492:	2203      	movs	r2, #3
 800c494:	69b9      	ldr	r1, [r7, #24]
 800c496:	6878      	ldr	r0, [r7, #4]
 800c498:	f000 ff30 	bl	800d2fc <dhcp_create_msg>
 800c49c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d04e      	beq.n	800c542 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	685b      	ldr	r3, [r3, #4]
 800c4a8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c4aa:	89b8      	ldrh	r0, [r7, #12]
 800c4ac:	693b      	ldr	r3, [r7, #16]
 800c4ae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	2239      	movs	r2, #57	; 0x39
 800c4b6:	f000 fa81 	bl	800c9bc <dhcp_option>
 800c4ba:	4603      	mov	r3, r0
 800c4bc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c4be:	89b8      	ldrh	r0, [r7, #12]
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c4ca:	461a      	mov	r2, r3
 800c4cc:	f000 fad0 	bl	800ca70 <dhcp_option_short>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c4d4:	89b8      	ldrh	r0, [r7, #12]
 800c4d6:	693b      	ldr	r3, [r7, #16]
 800c4d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4dc:	2304      	movs	r3, #4
 800c4de:	2237      	movs	r2, #55	; 0x37
 800c4e0:	f000 fa6c 	bl	800c9bc <dhcp_option>
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	77bb      	strb	r3, [r7, #30]
 800c4ec:	e00e      	b.n	800c50c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c4ee:	89b8      	ldrh	r0, [r7, #12]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c4f6:	7fbb      	ldrb	r3, [r7, #30]
 800c4f8:	4a2a      	ldr	r2, [pc, #168]	; (800c5a4 <dhcp_renew+0x12c>)
 800c4fa:	5cd3      	ldrb	r3, [r2, r3]
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	f000 fa91 	bl	800ca24 <dhcp_option_byte>
 800c502:	4603      	mov	r3, r0
 800c504:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c506:	7fbb      	ldrb	r3, [r7, #30]
 800c508:	3301      	adds	r3, #1
 800c50a:	77bb      	strb	r3, [r7, #30]
 800c50c:	7fbb      	ldrb	r3, [r7, #30]
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d9ed      	bls.n	800c4ee <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c512:	89b8      	ldrh	r0, [r7, #12]
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	33f0      	adds	r3, #240	; 0xf0
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	4619      	mov	r1, r3
 800c51c:	f000 ffc4 	bl	800d4a8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c520:	4b21      	ldr	r3, [pc, #132]	; (800c5a8 <dhcp_renew+0x130>)
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	69bb      	ldr	r3, [r7, #24]
 800c526:	f103 0218 	add.w	r2, r3, #24
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	9300      	str	r3, [sp, #0]
 800c52e:	2343      	movs	r3, #67	; 0x43
 800c530:	6979      	ldr	r1, [r7, #20]
 800c532:	f7fe fe21 	bl	800b178 <udp_sendto_if>
 800c536:	4603      	mov	r3, r0
 800c538:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c53a:	6978      	ldr	r0, [r7, #20]
 800c53c:	f7f8 fd64 	bl	8005008 <pbuf_free>
 800c540:	e001      	b.n	800c546 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c542:	23ff      	movs	r3, #255	; 0xff
 800c544:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c546:	69bb      	ldr	r3, [r7, #24]
 800c548:	799b      	ldrb	r3, [r3, #6]
 800c54a:	2bff      	cmp	r3, #255	; 0xff
 800c54c:	d005      	beq.n	800c55a <dhcp_renew+0xe2>
    dhcp->tries++;
 800c54e:	69bb      	ldr	r3, [r7, #24]
 800c550:	799b      	ldrb	r3, [r3, #6]
 800c552:	3301      	adds	r3, #1
 800c554:	b2da      	uxtb	r2, r3
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	799b      	ldrb	r3, [r3, #6]
 800c55e:	2b09      	cmp	r3, #9
 800c560:	d80a      	bhi.n	800c578 <dhcp_renew+0x100>
 800c562:	69bb      	ldr	r3, [r7, #24]
 800c564:	799b      	ldrb	r3, [r3, #6]
 800c566:	b29b      	uxth	r3, r3
 800c568:	461a      	mov	r2, r3
 800c56a:	0152      	lsls	r2, r2, #5
 800c56c:	1ad2      	subs	r2, r2, r3
 800c56e:	0092      	lsls	r2, r2, #2
 800c570:	4413      	add	r3, r2
 800c572:	011b      	lsls	r3, r3, #4
 800c574:	b29b      	uxth	r3, r3
 800c576:	e001      	b.n	800c57c <dhcp_renew+0x104>
 800c578:	f644 6320 	movw	r3, #20000	; 0x4e20
 800c57c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c57e:	89fb      	ldrh	r3, [r7, #14]
 800c580:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c584:	4a09      	ldr	r2, [pc, #36]	; (800c5ac <dhcp_renew+0x134>)
 800c586:	fb82 1203 	smull	r1, r2, r2, r3
 800c58a:	1152      	asrs	r2, r2, #5
 800c58c:	17db      	asrs	r3, r3, #31
 800c58e:	1ad3      	subs	r3, r2, r3
 800c590:	b29a      	uxth	r2, r3
 800c592:	69bb      	ldr	r3, [r7, #24]
 800c594:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c596:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c59a:	4618      	mov	r0, r3
 800c59c:	3720      	adds	r7, #32
 800c59e:	46bd      	mov	sp, r7
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	bf00      	nop
 800c5a4:	20000014 	.word	0x20000014
 800c5a8:	2000059c 	.word	0x2000059c
 800c5ac:	10624dd3 	.word	0x10624dd3

0800c5b0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b08a      	sub	sp, #40	; 0x28
 800c5b4:	af02      	add	r7, sp, #8
 800c5b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5bc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800c5be:	2104      	movs	r1, #4
 800c5c0:	69b8      	ldr	r0, [r7, #24]
 800c5c2:	f000 f9e1 	bl	800c988 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c5c6:	f107 030c 	add.w	r3, r7, #12
 800c5ca:	2203      	movs	r2, #3
 800c5cc:	69b9      	ldr	r1, [r7, #24]
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fe94 	bl	800d2fc <dhcp_create_msg>
 800c5d4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d04c      	beq.n	800c676 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c5e2:	89b8      	ldrh	r0, [r7, #12]
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5ea:	2302      	movs	r3, #2
 800c5ec:	2239      	movs	r2, #57	; 0x39
 800c5ee:	f000 f9e5 	bl	800c9bc <dhcp_option>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800c5f6:	89b8      	ldrh	r0, [r7, #12]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c602:	461a      	mov	r2, r3
 800c604:	f000 fa34 	bl	800ca70 <dhcp_option_short>
 800c608:	4603      	mov	r3, r0
 800c60a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c60c:	89b8      	ldrh	r0, [r7, #12]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c614:	2304      	movs	r3, #4
 800c616:	2237      	movs	r2, #55	; 0x37
 800c618:	f000 f9d0 	bl	800c9bc <dhcp_option>
 800c61c:	4603      	mov	r3, r0
 800c61e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c620:	2300      	movs	r3, #0
 800c622:	77bb      	strb	r3, [r7, #30]
 800c624:	e00e      	b.n	800c644 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c626:	89b8      	ldrh	r0, [r7, #12]
 800c628:	693b      	ldr	r3, [r7, #16]
 800c62a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c62e:	7fbb      	ldrb	r3, [r7, #30]
 800c630:	4a29      	ldr	r2, [pc, #164]	; (800c6d8 <dhcp_rebind+0x128>)
 800c632:	5cd3      	ldrb	r3, [r2, r3]
 800c634:	461a      	mov	r2, r3
 800c636:	f000 f9f5 	bl	800ca24 <dhcp_option_byte>
 800c63a:	4603      	mov	r3, r0
 800c63c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c63e:	7fbb      	ldrb	r3, [r7, #30]
 800c640:	3301      	adds	r3, #1
 800c642:	77bb      	strb	r3, [r7, #30]
 800c644:	7fbb      	ldrb	r3, [r7, #30]
 800c646:	2b03      	cmp	r3, #3
 800c648:	d9ed      	bls.n	800c626 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c64a:	89b8      	ldrh	r0, [r7, #12]
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	33f0      	adds	r3, #240	; 0xf0
 800c650:	697a      	ldr	r2, [r7, #20]
 800c652:	4619      	mov	r1, r3
 800c654:	f000 ff28 	bl	800d4a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c658:	4b20      	ldr	r3, [pc, #128]	; (800c6dc <dhcp_rebind+0x12c>)
 800c65a:	6818      	ldr	r0, [r3, #0]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	9300      	str	r3, [sp, #0]
 800c660:	2343      	movs	r3, #67	; 0x43
 800c662:	4a1f      	ldr	r2, [pc, #124]	; (800c6e0 <dhcp_rebind+0x130>)
 800c664:	6979      	ldr	r1, [r7, #20]
 800c666:	f7fe fd87 	bl	800b178 <udp_sendto_if>
 800c66a:	4603      	mov	r3, r0
 800c66c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c66e:	6978      	ldr	r0, [r7, #20]
 800c670:	f7f8 fcca 	bl	8005008 <pbuf_free>
 800c674:	e001      	b.n	800c67a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c676:	23ff      	movs	r3, #255	; 0xff
 800c678:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	799b      	ldrb	r3, [r3, #6]
 800c67e:	2bff      	cmp	r3, #255	; 0xff
 800c680:	d005      	beq.n	800c68e <dhcp_rebind+0xde>
    dhcp->tries++;
 800c682:	69bb      	ldr	r3, [r7, #24]
 800c684:	799b      	ldrb	r3, [r3, #6]
 800c686:	3301      	adds	r3, #1
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	69bb      	ldr	r3, [r7, #24]
 800c68c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c68e:	69bb      	ldr	r3, [r7, #24]
 800c690:	799b      	ldrb	r3, [r3, #6]
 800c692:	2b09      	cmp	r3, #9
 800c694:	d80a      	bhi.n	800c6ac <dhcp_rebind+0xfc>
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	799b      	ldrb	r3, [r3, #6]
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	461a      	mov	r2, r3
 800c69e:	0152      	lsls	r2, r2, #5
 800c6a0:	1ad2      	subs	r2, r2, r3
 800c6a2:	0092      	lsls	r2, r2, #2
 800c6a4:	4413      	add	r3, r2
 800c6a6:	00db      	lsls	r3, r3, #3
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	e001      	b.n	800c6b0 <dhcp_rebind+0x100>
 800c6ac:	f242 7310 	movw	r3, #10000	; 0x2710
 800c6b0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c6b2:	89fb      	ldrh	r3, [r7, #14]
 800c6b4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c6b8:	4a0a      	ldr	r2, [pc, #40]	; (800c6e4 <dhcp_rebind+0x134>)
 800c6ba:	fb82 1203 	smull	r1, r2, r2, r3
 800c6be:	1152      	asrs	r2, r2, #5
 800c6c0:	17db      	asrs	r3, r3, #31
 800c6c2:	1ad3      	subs	r3, r2, r3
 800c6c4:	b29a      	uxth	r2, r3
 800c6c6:	69bb      	ldr	r3, [r7, #24]
 800c6c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c6ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	20000014 	.word	0x20000014
 800c6dc:	2000059c 	.word	0x2000059c
 800c6e0:	08013924 	.word	0x08013924
 800c6e4:	10624dd3 	.word	0x10624dd3

0800c6e8 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800c6e8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ea:	b08a      	sub	sp, #40	; 0x28
 800c6ec:	af02      	add	r7, sp, #8
 800c6ee:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6f4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800c6f6:	2103      	movs	r1, #3
 800c6f8:	69b8      	ldr	r0, [r7, #24]
 800c6fa:	f000 f945 	bl	800c988 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800c6fe:	f107 030c 	add.w	r3, r7, #12
 800c702:	2203      	movs	r2, #3
 800c704:	69b9      	ldr	r1, [r7, #24]
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f000 fdf8 	bl	800d2fc <dhcp_create_msg>
 800c70c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d066      	beq.n	800c7e2 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c714:	697b      	ldr	r3, [r7, #20]
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800c71a:	89b8      	ldrh	r0, [r7, #12]
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c722:	2302      	movs	r3, #2
 800c724:	2239      	movs	r2, #57	; 0x39
 800c726:	f000 f949 	bl	800c9bc <dhcp_option>
 800c72a:	4603      	mov	r3, r0
 800c72c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800c72e:	89b8      	ldrh	r0, [r7, #12]
 800c730:	693b      	ldr	r3, [r7, #16]
 800c732:	33f0      	adds	r3, #240	; 0xf0
 800c734:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c738:	4619      	mov	r1, r3
 800c73a:	f000 f999 	bl	800ca70 <dhcp_option_short>
 800c73e:	4603      	mov	r3, r0
 800c740:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800c742:	89b8      	ldrh	r0, [r7, #12]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c74a:	2304      	movs	r3, #4
 800c74c:	2232      	movs	r2, #50	; 0x32
 800c74e:	f000 f935 	bl	800c9bc <dhcp_option>
 800c752:	4603      	mov	r3, r0
 800c754:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800c756:	89bc      	ldrh	r4, [r7, #12]
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	69db      	ldr	r3, [r3, #28]
 800c762:	4618      	mov	r0, r3
 800c764:	f7f6 fe55 	bl	8003412 <lwip_htonl>
 800c768:	4603      	mov	r3, r0
 800c76a:	461a      	mov	r2, r3
 800c76c:	4629      	mov	r1, r5
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 f9b0 	bl	800cad4 <dhcp_option_long>
 800c774:	4603      	mov	r3, r0
 800c776:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800c778:	89b8      	ldrh	r0, [r7, #12]
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c780:	2304      	movs	r3, #4
 800c782:	2237      	movs	r2, #55	; 0x37
 800c784:	f000 f91a 	bl	800c9bc <dhcp_option>
 800c788:	4603      	mov	r3, r0
 800c78a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c78c:	2300      	movs	r3, #0
 800c78e:	77bb      	strb	r3, [r7, #30]
 800c790:	e00e      	b.n	800c7b0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800c792:	89b8      	ldrh	r0, [r7, #12]
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c79a:	7fbb      	ldrb	r3, [r7, #30]
 800c79c:	4a29      	ldr	r2, [pc, #164]	; (800c844 <dhcp_reboot+0x15c>)
 800c79e:	5cd3      	ldrb	r3, [r2, r3]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f000 f93f 	bl	800ca24 <dhcp_option_byte>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800c7aa:	7fbb      	ldrb	r3, [r7, #30]
 800c7ac:	3301      	adds	r3, #1
 800c7ae:	77bb      	strb	r3, [r7, #30]
 800c7b0:	7fbb      	ldrb	r3, [r7, #30]
 800c7b2:	2b03      	cmp	r3, #3
 800c7b4:	d9ed      	bls.n	800c792 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c7b6:	89b8      	ldrh	r0, [r7, #12]
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	33f0      	adds	r3, #240	; 0xf0
 800c7bc:	697a      	ldr	r2, [r7, #20]
 800c7be:	4619      	mov	r1, r3
 800c7c0:	f000 fe72 	bl	800d4a8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c7c4:	4b20      	ldr	r3, [pc, #128]	; (800c848 <dhcp_reboot+0x160>)
 800c7c6:	6818      	ldr	r0, [r3, #0]
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	2343      	movs	r3, #67	; 0x43
 800c7ce:	4a1f      	ldr	r2, [pc, #124]	; (800c84c <dhcp_reboot+0x164>)
 800c7d0:	6979      	ldr	r1, [r7, #20]
 800c7d2:	f7fe fcd1 	bl	800b178 <udp_sendto_if>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800c7da:	6978      	ldr	r0, [r7, #20]
 800c7dc:	f7f8 fc14 	bl	8005008 <pbuf_free>
 800c7e0:	e001      	b.n	800c7e6 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800c7e2:	23ff      	movs	r3, #255	; 0xff
 800c7e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800c7e6:	69bb      	ldr	r3, [r7, #24]
 800c7e8:	799b      	ldrb	r3, [r3, #6]
 800c7ea:	2bff      	cmp	r3, #255	; 0xff
 800c7ec:	d005      	beq.n	800c7fa <dhcp_reboot+0x112>
    dhcp->tries++;
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	799b      	ldrb	r3, [r3, #6]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	b2da      	uxtb	r2, r3
 800c7f6:	69bb      	ldr	r3, [r7, #24]
 800c7f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800c7fa:	69bb      	ldr	r3, [r7, #24]
 800c7fc:	799b      	ldrb	r3, [r3, #6]
 800c7fe:	2b09      	cmp	r3, #9
 800c800:	d80a      	bhi.n	800c818 <dhcp_reboot+0x130>
 800c802:	69bb      	ldr	r3, [r7, #24]
 800c804:	799b      	ldrb	r3, [r3, #6]
 800c806:	b29b      	uxth	r3, r3
 800c808:	461a      	mov	r2, r3
 800c80a:	0152      	lsls	r2, r2, #5
 800c80c:	1ad2      	subs	r2, r2, r3
 800c80e:	0092      	lsls	r2, r2, #2
 800c810:	4413      	add	r3, r2
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	b29b      	uxth	r3, r3
 800c816:	e001      	b.n	800c81c <dhcp_reboot+0x134>
 800c818:	f242 7310 	movw	r3, #10000	; 0x2710
 800c81c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c81e:	89fb      	ldrh	r3, [r7, #14]
 800c820:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c824:	4a0a      	ldr	r2, [pc, #40]	; (800c850 <dhcp_reboot+0x168>)
 800c826:	fb82 1203 	smull	r1, r2, r2, r3
 800c82a:	1152      	asrs	r2, r2, #5
 800c82c:	17db      	asrs	r3, r3, #31
 800c82e:	1ad3      	subs	r3, r2, r3
 800c830:	b29a      	uxth	r2, r3
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800c836:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3720      	adds	r7, #32
 800c83e:	46bd      	mov	sp, r7
 800c840:	bdb0      	pop	{r4, r5, r7, pc}
 800c842:	bf00      	nop
 800c844:	20000014 	.word	0x20000014
 800c848:	2000059c 	.word	0x2000059c
 800c84c:	08013924 	.word	0x08013924
 800c850:	10624dd3 	.word	0x10624dd3

0800c854 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800c854:	b5b0      	push	{r4, r5, r7, lr}
 800c856:	b08a      	sub	sp, #40	; 0x28
 800c858:	af02      	add	r7, sp, #8
 800c85a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c860:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	2b00      	cmp	r3, #0
 800c866:	f000 8084 	beq.w	800c972 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	795b      	ldrb	r3, [r3, #5]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	f000 8081 	beq.w	800c976 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800c874:	69fb      	ldr	r3, [r7, #28]
 800c876:	699b      	ldr	r3, [r3, #24]
 800c878:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	2200      	movs	r2, #0
 800c87e:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	2200      	movs	r2, #0
 800c884:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	2200      	movs	r2, #0
 800c88a:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	2200      	movs	r2, #0
 800c890:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	2200      	movs	r2, #0
 800c896:	631a      	str	r2, [r3, #48]	; 0x30
 800c898:	69fb      	ldr	r3, [r7, #28]
 800c89a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	62da      	str	r2, [r3, #44]	; 0x2c
 800c8a0:	69fb      	ldr	r3, [r7, #28]
 800c8a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800c8a8:	69fb      	ldr	r3, [r7, #28]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	829a      	strh	r2, [r3, #20]
 800c8ae:	69fb      	ldr	r3, [r7, #28]
 800c8b0:	8a9a      	ldrh	r2, [r3, #20]
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	825a      	strh	r2, [r3, #18]
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	8a5a      	ldrh	r2, [r3, #18]
 800c8ba:	69fb      	ldr	r3, [r7, #28]
 800c8bc:	821a      	strh	r2, [r3, #16]
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	8a1a      	ldrh	r2, [r3, #16]
 800c8c2:	69fb      	ldr	r3, [r7, #28]
 800c8c4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800c8c6:	6878      	ldr	r0, [r7, #4]
 800c8c8:	f000 fe1c 	bl	800d504 <dhcp_supplied_address>
 800c8cc:	4603      	mov	r3, r0
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d03b      	beq.n	800c94a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800c8d2:	f107 030e 	add.w	r3, r7, #14
 800c8d6:	2207      	movs	r2, #7
 800c8d8:	69f9      	ldr	r1, [r7, #28]
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f000 fd0e 	bl	800d2fc <dhcp_create_msg>
 800c8e0:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d030      	beq.n	800c94a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800c8ee:	89f8      	ldrh	r0, [r7, #14]
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	2236      	movs	r2, #54	; 0x36
 800c8fa:	f000 f85f 	bl	800c9bc <dhcp_option>
 800c8fe:	4603      	mov	r3, r0
 800c900:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800c902:	89fc      	ldrh	r4, [r7, #14]
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	4618      	mov	r0, r3
 800c90e:	f7f6 fd80 	bl	8003412 <lwip_htonl>
 800c912:	4603      	mov	r3, r0
 800c914:	461a      	mov	r2, r3
 800c916:	4629      	mov	r1, r5
 800c918:	4620      	mov	r0, r4
 800c91a:	f000 f8db 	bl	800cad4 <dhcp_option_long>
 800c91e:	4603      	mov	r3, r0
 800c920:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800c922:	89f8      	ldrh	r0, [r7, #14]
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	33f0      	adds	r3, #240	; 0xf0
 800c928:	69ba      	ldr	r2, [r7, #24]
 800c92a:	4619      	mov	r1, r3
 800c92c:	f000 fdbc 	bl	800d4a8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800c930:	4b13      	ldr	r3, [pc, #76]	; (800c980 <dhcp_release_and_stop+0x12c>)
 800c932:	6818      	ldr	r0, [r3, #0]
 800c934:	f107 0210 	add.w	r2, r7, #16
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	9300      	str	r3, [sp, #0]
 800c93c:	2343      	movs	r3, #67	; 0x43
 800c93e:	69b9      	ldr	r1, [r7, #24]
 800c940:	f7fe fc1a 	bl	800b178 <udp_sendto_if>
      pbuf_free(p_out);
 800c944:	69b8      	ldr	r0, [r7, #24]
 800c946:	f7f8 fb5f 	bl	8005008 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c94a:	4b0e      	ldr	r3, [pc, #56]	; (800c984 <dhcp_release_and_stop+0x130>)
 800c94c:	4a0d      	ldr	r2, [pc, #52]	; (800c984 <dhcp_release_and_stop+0x130>)
 800c94e:	490d      	ldr	r1, [pc, #52]	; (800c984 <dhcp_release_and_stop+0x130>)
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7f7 fe7d 	bl	8004650 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800c956:	2100      	movs	r1, #0
 800c958:	69f8      	ldr	r0, [r7, #28]
 800c95a:	f000 f815 	bl	800c988 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800c95e:	69fb      	ldr	r3, [r7, #28]
 800c960:	791b      	ldrb	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d008      	beq.n	800c978 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800c966:	f7fe ff53 	bl	800b810 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	2200      	movs	r2, #0
 800c96e:	711a      	strb	r2, [r3, #4]
 800c970:	e002      	b.n	800c978 <dhcp_release_and_stop+0x124>
    return;
 800c972:	bf00      	nop
 800c974:	e000      	b.n	800c978 <dhcp_release_and_stop+0x124>
    return;
 800c976:	bf00      	nop
  }
}
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bdb0      	pop	{r4, r5, r7, pc}
 800c97e:	bf00      	nop
 800c980:	2000059c 	.word	0x2000059c
 800c984:	08013920 	.word	0x08013920

0800c988 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800c988:	b480      	push	{r7}
 800c98a:	b083      	sub	sp, #12
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
 800c990:	460b      	mov	r3, r1
 800c992:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	795b      	ldrb	r3, [r3, #5]
 800c998:	78fa      	ldrb	r2, [r7, #3]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d008      	beq.n	800c9b0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	78fa      	ldrb	r2, [r7, #3]
 800c9a2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2200      	movs	r2, #0
 800c9a8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	2200      	movs	r2, #0
 800c9ae:	811a      	strh	r2, [r3, #8]
  }
}
 800c9b0:	bf00      	nop
 800c9b2:	370c      	adds	r7, #12
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ba:	4770      	bx	lr

0800c9bc <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b082      	sub	sp, #8
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6039      	str	r1, [r7, #0]
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	80fb      	strh	r3, [r7, #6]
 800c9cc:	460b      	mov	r3, r1
 800c9ce:	717b      	strb	r3, [r7, #5]
 800c9d0:	4613      	mov	r3, r2
 800c9d2:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800c9d4:	88fa      	ldrh	r2, [r7, #6]
 800c9d6:	793b      	ldrb	r3, [r7, #4]
 800c9d8:	4413      	add	r3, r2
 800c9da:	3302      	adds	r3, #2
 800c9dc:	2b44      	cmp	r3, #68	; 0x44
 800c9de:	d906      	bls.n	800c9ee <dhcp_option+0x32>
 800c9e0:	4b0d      	ldr	r3, [pc, #52]	; (800ca18 <dhcp_option+0x5c>)
 800c9e2:	f240 529a 	movw	r2, #1434	; 0x59a
 800c9e6:	490d      	ldr	r1, [pc, #52]	; (800ca1c <dhcp_option+0x60>)
 800c9e8:	480d      	ldr	r0, [pc, #52]	; (800ca20 <dhcp_option+0x64>)
 800c9ea:	f003 f8d3 	bl	800fb94 <iprintf>
  options[options_out_len++] = option_type;
 800c9ee:	88fb      	ldrh	r3, [r7, #6]
 800c9f0:	1c5a      	adds	r2, r3, #1
 800c9f2:	80fa      	strh	r2, [r7, #6]
 800c9f4:	461a      	mov	r2, r3
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	797a      	ldrb	r2, [r7, #5]
 800c9fc:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800c9fe:	88fb      	ldrh	r3, [r7, #6]
 800ca00:	1c5a      	adds	r2, r3, #1
 800ca02:	80fa      	strh	r2, [r7, #6]
 800ca04:	461a      	mov	r2, r3
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	4413      	add	r3, r2
 800ca0a:	793a      	ldrb	r2, [r7, #4]
 800ca0c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ca0e:	88fb      	ldrh	r3, [r7, #6]
}
 800ca10:	4618      	mov	r0, r3
 800ca12:	3708      	adds	r7, #8
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	08012db4 	.word	0x08012db4
 800ca1c:	08012f48 	.word	0x08012f48
 800ca20:	08012e14 	.word	0x08012e14

0800ca24 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b082      	sub	sp, #8
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	4603      	mov	r3, r0
 800ca2c:	6039      	str	r1, [r7, #0]
 800ca2e:	80fb      	strh	r3, [r7, #6]
 800ca30:	4613      	mov	r3, r2
 800ca32:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800ca34:	88fb      	ldrh	r3, [r7, #6]
 800ca36:	2b43      	cmp	r3, #67	; 0x43
 800ca38:	d906      	bls.n	800ca48 <dhcp_option_byte+0x24>
 800ca3a:	4b0a      	ldr	r3, [pc, #40]	; (800ca64 <dhcp_option_byte+0x40>)
 800ca3c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800ca40:	4909      	ldr	r1, [pc, #36]	; (800ca68 <dhcp_option_byte+0x44>)
 800ca42:	480a      	ldr	r0, [pc, #40]	; (800ca6c <dhcp_option_byte+0x48>)
 800ca44:	f003 f8a6 	bl	800fb94 <iprintf>
  options[options_out_len++] = value;
 800ca48:	88fb      	ldrh	r3, [r7, #6]
 800ca4a:	1c5a      	adds	r2, r3, #1
 800ca4c:	80fa      	strh	r2, [r7, #6]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	4413      	add	r3, r2
 800ca54:	797a      	ldrb	r2, [r7, #5]
 800ca56:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800ca58:	88fb      	ldrh	r3, [r7, #6]
}
 800ca5a:	4618      	mov	r0, r3
 800ca5c:	3708      	adds	r7, #8
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	08012db4 	.word	0x08012db4
 800ca68:	08012f8c 	.word	0x08012f8c
 800ca6c:	08012e14 	.word	0x08012e14

0800ca70 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800ca70:	b580      	push	{r7, lr}
 800ca72:	b082      	sub	sp, #8
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	4603      	mov	r3, r0
 800ca78:	6039      	str	r1, [r7, #0]
 800ca7a:	80fb      	strh	r3, [r7, #6]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800ca80:	88fb      	ldrh	r3, [r7, #6]
 800ca82:	3302      	adds	r3, #2
 800ca84:	2b44      	cmp	r3, #68	; 0x44
 800ca86:	d906      	bls.n	800ca96 <dhcp_option_short+0x26>
 800ca88:	4b0f      	ldr	r3, [pc, #60]	; (800cac8 <dhcp_option_short+0x58>)
 800ca8a:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800ca8e:	490f      	ldr	r1, [pc, #60]	; (800cacc <dhcp_option_short+0x5c>)
 800ca90:	480f      	ldr	r0, [pc, #60]	; (800cad0 <dhcp_option_short+0x60>)
 800ca92:	f003 f87f 	bl	800fb94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800ca96:	88bb      	ldrh	r3, [r7, #4]
 800ca98:	0a1b      	lsrs	r3, r3, #8
 800ca9a:	b29a      	uxth	r2, r3
 800ca9c:	88fb      	ldrh	r3, [r7, #6]
 800ca9e:	1c59      	adds	r1, r3, #1
 800caa0:	80f9      	strh	r1, [r7, #6]
 800caa2:	4619      	mov	r1, r3
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	440b      	add	r3, r1
 800caa8:	b2d2      	uxtb	r2, r2
 800caaa:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800caac:	88fb      	ldrh	r3, [r7, #6]
 800caae:	1c5a      	adds	r2, r3, #1
 800cab0:	80fa      	strh	r2, [r7, #6]
 800cab2:	461a      	mov	r2, r3
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	4413      	add	r3, r2
 800cab8:	88ba      	ldrh	r2, [r7, #4]
 800caba:	b2d2      	uxtb	r2, r2
 800cabc:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800cabe:	88fb      	ldrh	r3, [r7, #6]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3708      	adds	r7, #8
 800cac4:	46bd      	mov	sp, r7
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	08012db4 	.word	0x08012db4
 800cacc:	08012fc4 	.word	0x08012fc4
 800cad0:	08012e14 	.word	0x08012e14

0800cad4 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	4603      	mov	r3, r0
 800cadc:	60b9      	str	r1, [r7, #8]
 800cade:	607a      	str	r2, [r7, #4]
 800cae0:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800cae2:	89fb      	ldrh	r3, [r7, #14]
 800cae4:	3304      	adds	r3, #4
 800cae6:	2b44      	cmp	r3, #68	; 0x44
 800cae8:	d906      	bls.n	800caf8 <dhcp_option_long+0x24>
 800caea:	4b19      	ldr	r3, [pc, #100]	; (800cb50 <dhcp_option_long+0x7c>)
 800caec:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800caf0:	4918      	ldr	r1, [pc, #96]	; (800cb54 <dhcp_option_long+0x80>)
 800caf2:	4819      	ldr	r0, [pc, #100]	; (800cb58 <dhcp_option_long+0x84>)
 800caf4:	f003 f84e 	bl	800fb94 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	0e1a      	lsrs	r2, r3, #24
 800cafc:	89fb      	ldrh	r3, [r7, #14]
 800cafe:	1c59      	adds	r1, r3, #1
 800cb00:	81f9      	strh	r1, [r7, #14]
 800cb02:	4619      	mov	r1, r3
 800cb04:	68bb      	ldr	r3, [r7, #8]
 800cb06:	440b      	add	r3, r1
 800cb08:	b2d2      	uxtb	r2, r2
 800cb0a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	0c1a      	lsrs	r2, r3, #16
 800cb10:	89fb      	ldrh	r3, [r7, #14]
 800cb12:	1c59      	adds	r1, r3, #1
 800cb14:	81f9      	strh	r1, [r7, #14]
 800cb16:	4619      	mov	r1, r3
 800cb18:	68bb      	ldr	r3, [r7, #8]
 800cb1a:	440b      	add	r3, r1
 800cb1c:	b2d2      	uxtb	r2, r2
 800cb1e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	0a1a      	lsrs	r2, r3, #8
 800cb24:	89fb      	ldrh	r3, [r7, #14]
 800cb26:	1c59      	adds	r1, r3, #1
 800cb28:	81f9      	strh	r1, [r7, #14]
 800cb2a:	4619      	mov	r1, r3
 800cb2c:	68bb      	ldr	r3, [r7, #8]
 800cb2e:	440b      	add	r3, r1
 800cb30:	b2d2      	uxtb	r2, r2
 800cb32:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800cb34:	89fb      	ldrh	r3, [r7, #14]
 800cb36:	1c5a      	adds	r2, r3, #1
 800cb38:	81fa      	strh	r2, [r7, #14]
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	4413      	add	r3, r2
 800cb40:	687a      	ldr	r2, [r7, #4]
 800cb42:	b2d2      	uxtb	r2, r2
 800cb44:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800cb46:	89fb      	ldrh	r3, [r7, #14]
}
 800cb48:	4618      	mov	r0, r3
 800cb4a:	3710      	adds	r7, #16
 800cb4c:	46bd      	mov	sp, r7
 800cb4e:	bd80      	pop	{r7, pc}
 800cb50:	08012db4 	.word	0x08012db4
 800cb54:	08013000 	.word	0x08013000
 800cb58:	08012e14 	.word	0x08012e14

0800cb5c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800cb5c:	b580      	push	{r7, lr}
 800cb5e:	b090      	sub	sp, #64	; 0x40
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800cb66:	2300      	movs	r3, #0
 800cb68:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800cb6e:	220a      	movs	r2, #10
 800cb70:	2100      	movs	r1, #0
 800cb72:	48ba      	ldr	r0, [pc, #744]	; (800ce5c <dhcp_parse_reply+0x300>)
 800cb74:	f003 f806 	bl	800fb84 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	895b      	ldrh	r3, [r3, #10]
 800cb7c:	2b2b      	cmp	r3, #43	; 0x2b
 800cb7e:	d802      	bhi.n	800cb86 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800cb80:	f06f 0301 	mvn.w	r3, #1
 800cb84:	e2e9      	b.n	800d15a <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800cb8c:	23f0      	movs	r3, #240	; 0xf0
 800cb8e:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	891b      	ldrh	r3, [r3, #8]
 800cb94:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800cb9a:	e00c      	b.n	800cbb6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800cb9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9e:	895b      	ldrh	r3, [r3, #10]
 800cba0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800cba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba8:	895b      	ldrh	r3, [r3, #10]
 800cbaa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800cbac:	1ad3      	subs	r3, r2, r3
 800cbae:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800cbb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800cbb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d004      	beq.n	800cbc6 <dhcp_parse_reply+0x6a>
 800cbbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbbe:	895b      	ldrh	r3, [r3, #10]
 800cbc0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d2ea      	bcs.n	800cb9c <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800cbc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d102      	bne.n	800cbd2 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800cbcc:	f06f 0301 	mvn.w	r3, #1
 800cbd0:	e2c3      	b.n	800d15a <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 800cbd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800cbd4:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800cbd6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800cbd8:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800cbda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800cbe0:	e267      	b.n	800d0b2 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 800cbe2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbe4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cbe6:	4413      	add	r3, r2
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800cbec:	2300      	movs	r3, #0
 800cbee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800cbf2:	f04f 33ff 	mov.w	r3, #4294967295
 800cbf6:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800cbf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cbfa:	3302      	adds	r3, #2
 800cbfc:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800cbfe:	8bfa      	ldrh	r2, [r7, #30]
 800cc00:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d202      	bcs.n	800cc0c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800cc06:	f06f 0301 	mvn.w	r3, #1
 800cc0a:	e2a6      	b.n	800d15a <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800cc0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc0e:	3301      	adds	r3, #1
 800cc10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc12:	8952      	ldrh	r2, [r2, #10]
 800cc14:	4293      	cmp	r3, r2
 800cc16:	da07      	bge.n	800cc28 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800cc18:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cc1e:	4413      	add	r3, r2
 800cc20:	781b      	ldrb	r3, [r3, #0]
 800cc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cc26:	e00b      	b.n	800cc40 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800cc28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d004      	beq.n	800cc3a <dhcp_parse_reply+0xde>
 800cc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	685b      	ldr	r3, [r3, #4]
 800cc36:	781b      	ldrb	r3, [r3, #0]
 800cc38:	e000      	b.n	800cc3c <dhcp_parse_reply+0xe0>
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800cc40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800cc48:	7dfb      	ldrb	r3, [r7, #23]
 800cc4a:	2b3b      	cmp	r3, #59	; 0x3b
 800cc4c:	f200 815a 	bhi.w	800cf04 <dhcp_parse_reply+0x3a8>
 800cc50:	a201      	add	r2, pc, #4	; (adr r2, 800cc58 <dhcp_parse_reply+0xfc>)
 800cc52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc56:	bf00      	nop
 800cc58:	0800cd49 	.word	0x0800cd49
 800cc5c:	0800cd59 	.word	0x0800cd59
 800cc60:	0800cf05 	.word	0x0800cf05
 800cc64:	0800cd7b 	.word	0x0800cd7b
 800cc68:	0800cf05 	.word	0x0800cf05
 800cc6c:	0800cf05 	.word	0x0800cf05
 800cc70:	0800cda7 	.word	0x0800cda7
 800cc74:	0800cf05 	.word	0x0800cf05
 800cc78:	0800cf05 	.word	0x0800cf05
 800cc7c:	0800cf05 	.word	0x0800cf05
 800cc80:	0800cf05 	.word	0x0800cf05
 800cc84:	0800cf05 	.word	0x0800cf05
 800cc88:	0800cf05 	.word	0x0800cf05
 800cc8c:	0800cf05 	.word	0x0800cf05
 800cc90:	0800cf05 	.word	0x0800cf05
 800cc94:	0800cf05 	.word	0x0800cf05
 800cc98:	0800cf05 	.word	0x0800cf05
 800cc9c:	0800cf05 	.word	0x0800cf05
 800cca0:	0800cf05 	.word	0x0800cf05
 800cca4:	0800cf05 	.word	0x0800cf05
 800cca8:	0800cf05 	.word	0x0800cf05
 800ccac:	0800cf05 	.word	0x0800cf05
 800ccb0:	0800cf05 	.word	0x0800cf05
 800ccb4:	0800cf05 	.word	0x0800cf05
 800ccb8:	0800cf05 	.word	0x0800cf05
 800ccbc:	0800cf05 	.word	0x0800cf05
 800ccc0:	0800cf05 	.word	0x0800cf05
 800ccc4:	0800cf05 	.word	0x0800cf05
 800ccc8:	0800cf05 	.word	0x0800cf05
 800cccc:	0800cf05 	.word	0x0800cf05
 800ccd0:	0800cf05 	.word	0x0800cf05
 800ccd4:	0800cf05 	.word	0x0800cf05
 800ccd8:	0800cf05 	.word	0x0800cf05
 800ccdc:	0800cf05 	.word	0x0800cf05
 800cce0:	0800cf05 	.word	0x0800cf05
 800cce4:	0800cf05 	.word	0x0800cf05
 800cce8:	0800cf05 	.word	0x0800cf05
 800ccec:	0800cf05 	.word	0x0800cf05
 800ccf0:	0800cf05 	.word	0x0800cf05
 800ccf4:	0800cf05 	.word	0x0800cf05
 800ccf8:	0800cf05 	.word	0x0800cf05
 800ccfc:	0800cf05 	.word	0x0800cf05
 800cd00:	0800cf05 	.word	0x0800cf05
 800cd04:	0800cf05 	.word	0x0800cf05
 800cd08:	0800cf05 	.word	0x0800cf05
 800cd0c:	0800cf05 	.word	0x0800cf05
 800cd10:	0800cf05 	.word	0x0800cf05
 800cd14:	0800cf05 	.word	0x0800cf05
 800cd18:	0800cf05 	.word	0x0800cf05
 800cd1c:	0800cf05 	.word	0x0800cf05
 800cd20:	0800cf05 	.word	0x0800cf05
 800cd24:	0800cdfd 	.word	0x0800cdfd
 800cd28:	0800ce1f 	.word	0x0800ce1f
 800cd2c:	0800ce7d 	.word	0x0800ce7d
 800cd30:	0800ce9f 	.word	0x0800ce9f
 800cd34:	0800cf05 	.word	0x0800cf05
 800cd38:	0800cf05 	.word	0x0800cf05
 800cd3c:	0800cf05 	.word	0x0800cf05
 800cd40:	0800cec1 	.word	0x0800cec1
 800cd44:	0800cee3 	.word	0x0800cee3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cd4e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800cd56:	e0d9      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cd58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cd5c:	2b04      	cmp	r3, #4
 800cd5e:	d009      	beq.n	800cd74 <dhcp_parse_reply+0x218>
 800cd60:	4b3f      	ldr	r3, [pc, #252]	; (800ce60 <dhcp_parse_reply+0x304>)
 800cd62:	f240 622e 	movw	r2, #1582	; 0x62e
 800cd66:	493f      	ldr	r1, [pc, #252]	; (800ce64 <dhcp_parse_reply+0x308>)
 800cd68:	483f      	ldr	r0, [pc, #252]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800cd6a:	f002 ff13 	bl	800fb94 <iprintf>
 800cd6e:	f06f 0305 	mvn.w	r3, #5
 800cd72:	e1f2      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800cd74:	2306      	movs	r3, #6
 800cd76:	623b      	str	r3, [r7, #32]
        break;
 800cd78:	e0c8      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800cd7a:	2304      	movs	r3, #4
 800cd7c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800cd80:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cd84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d209      	bcs.n	800cda0 <dhcp_parse_reply+0x244>
 800cd8c:	4b34      	ldr	r3, [pc, #208]	; (800ce60 <dhcp_parse_reply+0x304>)
 800cd8e:	f240 6233 	movw	r2, #1587	; 0x633
 800cd92:	4936      	ldr	r1, [pc, #216]	; (800ce6c <dhcp_parse_reply+0x310>)
 800cd94:	4834      	ldr	r0, [pc, #208]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800cd96:	f002 fefd 	bl	800fb94 <iprintf>
 800cd9a:	f06f 0305 	mvn.w	r3, #5
 800cd9e:	e1dc      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800cda0:	2307      	movs	r3, #7
 800cda2:	623b      	str	r3, [r7, #32]
        break;
 800cda4:	e0b2      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800cda6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdaa:	f003 0303 	and.w	r3, r3, #3
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d009      	beq.n	800cdc8 <dhcp_parse_reply+0x26c>
 800cdb4:	4b2a      	ldr	r3, [pc, #168]	; (800ce60 <dhcp_parse_reply+0x304>)
 800cdb6:	f240 6239 	movw	r2, #1593	; 0x639
 800cdba:	492d      	ldr	r1, [pc, #180]	; (800ce70 <dhcp_parse_reply+0x314>)
 800cdbc:	482a      	ldr	r0, [pc, #168]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800cdbe:	f002 fee9 	bl	800fb94 <iprintf>
 800cdc2:	f06f 0305 	mvn.w	r3, #5
 800cdc6:	e1c8      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800cdc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdcc:	2b08      	cmp	r3, #8
 800cdce:	bf28      	it	cs
 800cdd0:	2308      	movcs	r3, #8
 800cdd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800cdd6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800cdda:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cdde:	429a      	cmp	r2, r3
 800cde0:	d209      	bcs.n	800cdf6 <dhcp_parse_reply+0x29a>
 800cde2:	4b1f      	ldr	r3, [pc, #124]	; (800ce60 <dhcp_parse_reply+0x304>)
 800cde4:	f240 623c 	movw	r2, #1596	; 0x63c
 800cde8:	4920      	ldr	r1, [pc, #128]	; (800ce6c <dhcp_parse_reply+0x310>)
 800cdea:	481f      	ldr	r0, [pc, #124]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800cdec:	f002 fed2 	bl	800fb94 <iprintf>
 800cdf0:	f06f 0305 	mvn.w	r3, #5
 800cdf4:	e1b1      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800cdf6:	2308      	movs	r3, #8
 800cdf8:	623b      	str	r3, [r7, #32]
        break;
 800cdfa:	e087      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cdfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d009      	beq.n	800ce18 <dhcp_parse_reply+0x2bc>
 800ce04:	4b16      	ldr	r3, [pc, #88]	; (800ce60 <dhcp_parse_reply+0x304>)
 800ce06:	f240 6241 	movw	r2, #1601	; 0x641
 800ce0a:	4916      	ldr	r1, [pc, #88]	; (800ce64 <dhcp_parse_reply+0x308>)
 800ce0c:	4816      	ldr	r0, [pc, #88]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800ce0e:	f002 fec1 	bl	800fb94 <iprintf>
 800ce12:	f06f 0305 	mvn.w	r3, #5
 800ce16:	e1a0      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800ce18:	2303      	movs	r3, #3
 800ce1a:	623b      	str	r3, [r7, #32]
        break;
 800ce1c:	e076      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ce1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce22:	2b01      	cmp	r3, #1
 800ce24:	d009      	beq.n	800ce3a <dhcp_parse_reply+0x2de>
 800ce26:	4b0e      	ldr	r3, [pc, #56]	; (800ce60 <dhcp_parse_reply+0x304>)
 800ce28:	f240 624f 	movw	r2, #1615	; 0x64f
 800ce2c:	4911      	ldr	r1, [pc, #68]	; (800ce74 <dhcp_parse_reply+0x318>)
 800ce2e:	480e      	ldr	r0, [pc, #56]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800ce30:	f002 feb0 	bl	800fb94 <iprintf>
 800ce34:	f06f 0305 	mvn.w	r3, #5
 800ce38:	e18f      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800ce3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ce3c:	2bf0      	cmp	r3, #240	; 0xf0
 800ce3e:	d009      	beq.n	800ce54 <dhcp_parse_reply+0x2f8>
 800ce40:	4b07      	ldr	r3, [pc, #28]	; (800ce60 <dhcp_parse_reply+0x304>)
 800ce42:	f240 6251 	movw	r2, #1617	; 0x651
 800ce46:	490c      	ldr	r1, [pc, #48]	; (800ce78 <dhcp_parse_reply+0x31c>)
 800ce48:	4807      	ldr	r0, [pc, #28]	; (800ce68 <dhcp_parse_reply+0x30c>)
 800ce4a:	f002 fea3 	bl	800fb94 <iprintf>
 800ce4e:	f06f 0305 	mvn.w	r3, #5
 800ce52:	e182      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800ce54:	2300      	movs	r3, #0
 800ce56:	623b      	str	r3, [r7, #32]
        break;
 800ce58:	e058      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
 800ce5a:	bf00      	nop
 800ce5c:	20006d6c 	.word	0x20006d6c
 800ce60:	08012db4 	.word	0x08012db4
 800ce64:	0801303c 	.word	0x0801303c
 800ce68:	08012e14 	.word	0x08012e14
 800ce6c:	08013048 	.word	0x08013048
 800ce70:	0801305c 	.word	0x0801305c
 800ce74:	0801306c 	.word	0x0801306c
 800ce78:	08013078 	.word	0x08013078
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800ce7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ce80:	2b01      	cmp	r3, #1
 800ce82:	d009      	beq.n	800ce98 <dhcp_parse_reply+0x33c>
 800ce84:	4ba5      	ldr	r3, [pc, #660]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800ce86:	f240 6255 	movw	r2, #1621	; 0x655
 800ce8a:	49a5      	ldr	r1, [pc, #660]	; (800d120 <dhcp_parse_reply+0x5c4>)
 800ce8c:	48a5      	ldr	r0, [pc, #660]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800ce8e:	f002 fe81 	bl	800fb94 <iprintf>
 800ce92:	f06f 0305 	mvn.w	r3, #5
 800ce96:	e160      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	623b      	str	r3, [r7, #32]
        break;
 800ce9c:	e036      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ce9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cea2:	2b04      	cmp	r3, #4
 800cea4:	d009      	beq.n	800ceba <dhcp_parse_reply+0x35e>
 800cea6:	4b9d      	ldr	r3, [pc, #628]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800cea8:	f240 6259 	movw	r2, #1625	; 0x659
 800ceac:	499e      	ldr	r1, [pc, #632]	; (800d128 <dhcp_parse_reply+0x5cc>)
 800ceae:	489d      	ldr	r0, [pc, #628]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800ceb0:	f002 fe70 	bl	800fb94 <iprintf>
 800ceb4:	f06f 0305 	mvn.w	r3, #5
 800ceb8:	e14f      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800ceba:	2302      	movs	r3, #2
 800cebc:	623b      	str	r3, [r7, #32]
        break;
 800cebe:	e025      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cec0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cec4:	2b04      	cmp	r3, #4
 800cec6:	d009      	beq.n	800cedc <dhcp_parse_reply+0x380>
 800cec8:	4b94      	ldr	r3, [pc, #592]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800ceca:	f240 625d 	movw	r2, #1629	; 0x65d
 800cece:	4996      	ldr	r1, [pc, #600]	; (800d128 <dhcp_parse_reply+0x5cc>)
 800ced0:	4894      	ldr	r0, [pc, #592]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800ced2:	f002 fe5f 	bl	800fb94 <iprintf>
 800ced6:	f06f 0305 	mvn.w	r3, #5
 800ceda:	e13e      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 800cedc:	2304      	movs	r3, #4
 800cede:	623b      	str	r3, [r7, #32]
        break;
 800cee0:	e014      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800cee2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	d009      	beq.n	800cefe <dhcp_parse_reply+0x3a2>
 800ceea:	4b8c      	ldr	r3, [pc, #560]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800ceec:	f240 6261 	movw	r2, #1633	; 0x661
 800cef0:	498d      	ldr	r1, [pc, #564]	; (800d128 <dhcp_parse_reply+0x5cc>)
 800cef2:	488c      	ldr	r0, [pc, #560]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800cef4:	f002 fe4e 	bl	800fb94 <iprintf>
 800cef8:	f06f 0305 	mvn.w	r3, #5
 800cefc:	e12d      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 800cefe:	2305      	movs	r3, #5
 800cf00:	623b      	str	r3, [r7, #32]
        break;
 800cf02:	e003      	b.n	800cf0c <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 800cf04:	2300      	movs	r3, #0
 800cf06:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800cf0a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800cf0c:	7dfb      	ldrb	r3, [r7, #23]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d103      	bne.n	800cf1a <dhcp_parse_reply+0x3be>
      offset++;
 800cf12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cf14:	3301      	adds	r3, #1
 800cf16:	877b      	strh	r3, [r7, #58]	; 0x3a
 800cf18:	e0a1      	b.n	800d05e <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800cf1a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800cf1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf20:	4413      	add	r3, r2
 800cf22:	3302      	adds	r3, #2
 800cf24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf28:	db02      	blt.n	800cf30 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 800cf2a:	f06f 0301 	mvn.w	r3, #1
 800cf2e:	e114      	b.n	800d15a <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 800cf30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf34:	b29a      	uxth	r2, r3
 800cf36:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800cf38:	4413      	add	r3, r2
 800cf3a:	b29b      	uxth	r3, r3
 800cf3c:	3302      	adds	r3, #2
 800cf3e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800cf40:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	f000 808a 	beq.w	800d05e <dhcp_parse_reply+0x502>
        u32_t value = 0;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800cf4e:	6a3b      	ldr	r3, [r7, #32]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	db02      	blt.n	800cf5a <dhcp_parse_reply+0x3fe>
 800cf54:	6a3b      	ldr	r3, [r7, #32]
 800cf56:	2b09      	cmp	r3, #9
 800cf58:	dd06      	ble.n	800cf68 <dhcp_parse_reply+0x40c>
 800cf5a:	4b70      	ldr	r3, [pc, #448]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800cf5c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800cf60:	4972      	ldr	r1, [pc, #456]	; (800d12c <dhcp_parse_reply+0x5d0>)
 800cf62:	4870      	ldr	r0, [pc, #448]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800cf64:	f002 fe16 	bl	800fb94 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800cf68:	4a71      	ldr	r2, [pc, #452]	; (800d130 <dhcp_parse_reply+0x5d4>)
 800cf6a:	6a3b      	ldr	r3, [r7, #32]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	781b      	ldrb	r3, [r3, #0]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d174      	bne.n	800d05e <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 800cf74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cf78:	2b04      	cmp	r3, #4
 800cf7a:	bf28      	it	cs
 800cf7c:	2304      	movcs	r3, #4
 800cf7e:	b2db      	uxtb	r3, r3
 800cf80:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800cf82:	8bfb      	ldrh	r3, [r7, #30]
 800cf84:	8aba      	ldrh	r2, [r7, #20]
 800cf86:	f107 0108 	add.w	r1, r7, #8
 800cf8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf8c:	f7f8 fa36 	bl	80053fc <pbuf_copy_partial>
 800cf90:	4603      	mov	r3, r0
 800cf92:	461a      	mov	r2, r3
 800cf94:	8abb      	ldrh	r3, [r7, #20]
 800cf96:	4293      	cmp	r3, r2
 800cf98:	d002      	beq.n	800cfa0 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 800cf9a:	f06f 0301 	mvn.w	r3, #1
 800cf9e:	e0dc      	b.n	800d15a <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 800cfa0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfa4:	2b04      	cmp	r3, #4
 800cfa6:	d933      	bls.n	800d010 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800cfa8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfac:	f003 0303 	and.w	r3, r3, #3
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d009      	beq.n	800cfca <dhcp_parse_reply+0x46e>
 800cfb6:	4b59      	ldr	r3, [pc, #356]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800cfb8:	f240 6281 	movw	r2, #1665	; 0x681
 800cfbc:	495d      	ldr	r1, [pc, #372]	; (800d134 <dhcp_parse_reply+0x5d8>)
 800cfbe:	4859      	ldr	r0, [pc, #356]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800cfc0:	f002 fde8 	bl	800fb94 <iprintf>
 800cfc4:	f06f 0305 	mvn.w	r3, #5
 800cfc8:	e0c7      	b.n	800d15a <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 800cfca:	4a59      	ldr	r2, [pc, #356]	; (800d130 <dhcp_parse_reply+0x5d4>)
 800cfcc:	6a3b      	ldr	r3, [r7, #32]
 800cfce:	4413      	add	r3, r2
 800cfd0:	2201      	movs	r2, #1
 800cfd2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	4618      	mov	r0, r3
 800cfd8:	f7f6 fa1b 	bl	8003412 <lwip_htonl>
 800cfdc:	4601      	mov	r1, r0
 800cfde:	4a56      	ldr	r2, [pc, #344]	; (800d138 <dhcp_parse_reply+0x5dc>)
 800cfe0:	6a3b      	ldr	r3, [r7, #32]
 800cfe2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800cfe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cfea:	3b04      	subs	r3, #4
 800cfec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800cff0:	8bfb      	ldrh	r3, [r7, #30]
 800cff2:	3304      	adds	r3, #4
 800cff4:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800cff6:	8a7a      	ldrh	r2, [r7, #18]
 800cff8:	8bfb      	ldrh	r3, [r7, #30]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d202      	bcs.n	800d004 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 800cffe:	f06f 0301 	mvn.w	r3, #1
 800d002:	e0aa      	b.n	800d15a <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 800d004:	8a7b      	ldrh	r3, [r7, #18]
 800d006:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800d008:	6a3b      	ldr	r3, [r7, #32]
 800d00a:	3301      	adds	r3, #1
 800d00c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800d00e:	e79e      	b.n	800cf4e <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 800d010:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d014:	2b04      	cmp	r3, #4
 800d016:	d106      	bne.n	800d026 <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 800d018:	68bb      	ldr	r3, [r7, #8]
 800d01a:	4618      	mov	r0, r3
 800d01c:	f7f6 f9f9 	bl	8003412 <lwip_htonl>
 800d020:	4603      	mov	r3, r0
 800d022:	60bb      	str	r3, [r7, #8]
 800d024:	e011      	b.n	800d04a <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800d026:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d02a:	2b01      	cmp	r3, #1
 800d02c:	d009      	beq.n	800d042 <dhcp_parse_reply+0x4e6>
 800d02e:	4b3b      	ldr	r3, [pc, #236]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800d030:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800d034:	4941      	ldr	r1, [pc, #260]	; (800d13c <dhcp_parse_reply+0x5e0>)
 800d036:	483b      	ldr	r0, [pc, #236]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800d038:	f002 fdac 	bl	800fb94 <iprintf>
 800d03c:	f06f 0305 	mvn.w	r3, #5
 800d040:	e08b      	b.n	800d15a <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 800d042:	f107 0308 	add.w	r3, r7, #8
 800d046:	781b      	ldrb	r3, [r3, #0]
 800d048:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800d04a:	4a39      	ldr	r2, [pc, #228]	; (800d130 <dhcp_parse_reply+0x5d4>)
 800d04c:	6a3b      	ldr	r3, [r7, #32]
 800d04e:	4413      	add	r3, r2
 800d050:	2201      	movs	r2, #1
 800d052:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	4938      	ldr	r1, [pc, #224]	; (800d138 <dhcp_parse_reply+0x5dc>)
 800d058:	6a3b      	ldr	r3, [r7, #32]
 800d05a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800d05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d060:	895b      	ldrh	r3, [r3, #10]
 800d062:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d064:	429a      	cmp	r2, r3
 800d066:	d324      	bcc.n	800d0b2 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 800d068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d06a:	895b      	ldrh	r3, [r3, #10]
 800d06c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d06e:	1ad3      	subs	r3, r2, r3
 800d070:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800d072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d074:	895b      	ldrh	r3, [r3, #10]
 800d076:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800d07c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d07e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d080:	429a      	cmp	r2, r3
 800d082:	d213      	bcs.n	800d0ac <dhcp_parse_reply+0x550>
        q = q->next;
 800d084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800d08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d109      	bne.n	800d0a4 <dhcp_parse_reply+0x548>
 800d090:	4b22      	ldr	r3, [pc, #136]	; (800d11c <dhcp_parse_reply+0x5c0>)
 800d092:	f240 629d 	movw	r2, #1693	; 0x69d
 800d096:	492a      	ldr	r1, [pc, #168]	; (800d140 <dhcp_parse_reply+0x5e4>)
 800d098:	4822      	ldr	r0, [pc, #136]	; (800d124 <dhcp_parse_reply+0x5c8>)
 800d09a:	f002 fd7b 	bl	800fb94 <iprintf>
 800d09e:	f06f 0305 	mvn.w	r3, #5
 800d0a2:	e05a      	b.n	800d15a <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 800d0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d0aa:	e002      	b.n	800d0b2 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800d0ac:	f06f 0301 	mvn.w	r3, #1
 800d0b0:	e053      	b.n	800d15a <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800d0b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00a      	beq.n	800d0ce <dhcp_parse_reply+0x572>
 800d0b8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800d0ba:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d206      	bcs.n	800d0ce <dhcp_parse_reply+0x572>
 800d0c0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800d0c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800d0c4:	4413      	add	r3, r2
 800d0c6:	781b      	ldrb	r3, [r3, #0]
 800d0c8:	2bff      	cmp	r3, #255	; 0xff
 800d0ca:	f47f ad8a 	bne.w	800cbe2 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800d0ce:	4b18      	ldr	r3, [pc, #96]	; (800d130 <dhcp_parse_reply+0x5d4>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d018      	beq.n	800d108 <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d0d6:	4b18      	ldr	r3, [pc, #96]	; (800d138 <dhcp_parse_reply+0x5dc>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800d0dc:	4b14      	ldr	r3, [pc, #80]	; (800d130 <dhcp_parse_reply+0x5d4>)
 800d0de:	2200      	movs	r2, #0
 800d0e0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d102      	bne.n	800d0ee <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d0ec:	e00c      	b.n	800d108 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b02      	cmp	r3, #2
 800d0f2:	d102      	bne.n	800d0fa <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d0f8:	e006      	b.n	800d108 <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	2b03      	cmp	r3, #3
 800d0fe:	d103      	bne.n	800d108 <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 800d100:	2301      	movs	r3, #1
 800d102:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800d104:	2301      	movs	r3, #1
 800d106:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800d108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d01a      	beq.n	800d144 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800d10e:	2300      	movs	r3, #0
 800d110:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800d112:	236c      	movs	r3, #108	; 0x6c
 800d114:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800d116:	23ec      	movs	r3, #236	; 0xec
 800d118:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800d11a:	e53c      	b.n	800cb96 <dhcp_parse_reply+0x3a>
 800d11c:	08012db4 	.word	0x08012db4
 800d120:	0801306c 	.word	0x0801306c
 800d124:	08012e14 	.word	0x08012e14
 800d128:	0801303c 	.word	0x0801303c
 800d12c:	08013090 	.word	0x08013090
 800d130:	20006d6c 	.word	0x20006d6c
 800d134:	080130a4 	.word	0x080130a4
 800d138:	20006d78 	.word	0x20006d78
 800d13c:	080130bc 	.word	0x080130bc
 800d140:	080130d0 	.word	0x080130d0
  } else if (parse_sname_as_options) {
 800d144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d146:	2b00      	cmp	r3, #0
 800d148:	d006      	beq.n	800d158 <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 800d14a:	2300      	movs	r3, #0
 800d14c:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800d14e:	232c      	movs	r3, #44	; 0x2c
 800d150:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800d152:	236c      	movs	r3, #108	; 0x6c
 800d154:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800d156:	e51e      	b.n	800cb96 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800d158:	2300      	movs	r3, #0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3740      	adds	r7, #64	; 0x40
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop

0800d164 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b08a      	sub	sp, #40	; 0x28
 800d168:	af00      	add	r7, sp, #0
 800d16a:	60f8      	str	r0, [r7, #12]
 800d16c:	60b9      	str	r1, [r7, #8]
 800d16e:	607a      	str	r2, [r7, #4]
 800d170:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800d172:	4b5f      	ldr	r3, [pc, #380]	; (800d2f0 <dhcp_recv+0x18c>)
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d178:	6a3b      	ldr	r3, [r7, #32]
 800d17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d17c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	685b      	ldr	r3, [r3, #4]
 800d182:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 809d 	beq.w	800d2c6 <dhcp_recv+0x162>
 800d18c:	69fb      	ldr	r3, [r7, #28]
 800d18e:	791b      	ldrb	r3, [r3, #4]
 800d190:	2b00      	cmp	r3, #0
 800d192:	f000 8098 	beq.w	800d2c6 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	895b      	ldrh	r3, [r3, #10]
 800d19a:	2b2b      	cmp	r3, #43	; 0x2b
 800d19c:	f240 8095 	bls.w	800d2ca <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	781b      	ldrb	r3, [r3, #0]
 800d1a4:	2b02      	cmp	r3, #2
 800d1a6:	f040 8092 	bne.w	800d2ce <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1b0:	e012      	b.n	800d1d8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800d1b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1b6:	6a3a      	ldr	r2, [r7, #32]
 800d1b8:	4413      	add	r3, r2
 800d1ba:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800d1be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1c2:	69b9      	ldr	r1, [r7, #24]
 800d1c4:	440b      	add	r3, r1
 800d1c6:	7f1b      	ldrb	r3, [r3, #28]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	f040 8082 	bne.w	800d2d2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d1ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d2:	3301      	adds	r3, #1
 800d1d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d1d8:	6a3b      	ldr	r3, [r7, #32]
 800d1da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d203      	bcs.n	800d1ee <dhcp_recv+0x8a>
 800d1e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1ea:	2b05      	cmp	r3, #5
 800d1ec:	d9e1      	bls.n	800d1b2 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800d1ee:	69bb      	ldr	r3, [r7, #24]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7f6 f90d 	bl	8003412 <lwip_htonl>
 800d1f8:	4602      	mov	r2, r0
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	429a      	cmp	r2, r3
 800d200:	d169      	bne.n	800d2d6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800d202:	69f9      	ldr	r1, [r7, #28]
 800d204:	6878      	ldr	r0, [r7, #4]
 800d206:	f7ff fca9 	bl	800cb5c <dhcp_parse_reply>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d164      	bne.n	800d2da <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800d210:	4b38      	ldr	r3, [pc, #224]	; (800d2f4 <dhcp_recv+0x190>)
 800d212:	785b      	ldrb	r3, [r3, #1]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d062      	beq.n	800d2de <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800d21e:	4b36      	ldr	r3, [pc, #216]	; (800d2f8 <dhcp_recv+0x194>)
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800d224:	7cfb      	ldrb	r3, [r7, #19]
 800d226:	2b05      	cmp	r3, #5
 800d228:	d12a      	bne.n	800d280 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	795b      	ldrb	r3, [r3, #5]
 800d22e:	2b01      	cmp	r3, #1
 800d230:	d112      	bne.n	800d258 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800d232:	6979      	ldr	r1, [r7, #20]
 800d234:	6a38      	ldr	r0, [r7, #32]
 800d236:	f7fe fdb5 	bl	800bda4 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d240:	f003 0308 	and.w	r3, r3, #8
 800d244:	2b00      	cmp	r3, #0
 800d246:	d003      	beq.n	800d250 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800d248:	6a38      	ldr	r0, [r7, #32]
 800d24a:	f7fe fb25 	bl	800b898 <dhcp_check>
 800d24e:	e047      	b.n	800d2e0 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800d250:	6a38      	ldr	r0, [r7, #32]
 800d252:	f7ff f837 	bl	800c2c4 <dhcp_bind>
 800d256:	e043      	b.n	800d2e0 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	795b      	ldrb	r3, [r3, #5]
 800d25c:	2b03      	cmp	r3, #3
 800d25e:	d007      	beq.n	800d270 <dhcp_recv+0x10c>
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	795b      	ldrb	r3, [r3, #5]
 800d264:	2b04      	cmp	r3, #4
 800d266:	d003      	beq.n	800d270 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800d268:	69fb      	ldr	r3, [r7, #28]
 800d26a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800d26c:	2b05      	cmp	r3, #5
 800d26e:	d137      	bne.n	800d2e0 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800d270:	6979      	ldr	r1, [r7, #20]
 800d272:	6a38      	ldr	r0, [r7, #32]
 800d274:	f7fe fd96 	bl	800bda4 <dhcp_handle_ack>
      dhcp_bind(netif);
 800d278:	6a38      	ldr	r0, [r7, #32]
 800d27a:	f7ff f823 	bl	800c2c4 <dhcp_bind>
 800d27e:	e02f      	b.n	800d2e0 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800d280:	7cfb      	ldrb	r3, [r7, #19]
 800d282:	2b06      	cmp	r3, #6
 800d284:	d113      	bne.n	800d2ae <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d286:	69fb      	ldr	r3, [r7, #28]
 800d288:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800d28a:	2b03      	cmp	r3, #3
 800d28c:	d00b      	beq.n	800d2a6 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d28e:	69fb      	ldr	r3, [r7, #28]
 800d290:	795b      	ldrb	r3, [r3, #5]
 800d292:	2b01      	cmp	r3, #1
 800d294:	d007      	beq.n	800d2a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d296:	69fb      	ldr	r3, [r7, #28]
 800d298:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800d29a:	2b04      	cmp	r3, #4
 800d29c:	d003      	beq.n	800d2a6 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800d29e:	69fb      	ldr	r3, [r7, #28]
 800d2a0:	795b      	ldrb	r3, [r3, #5]
 800d2a2:	2b05      	cmp	r3, #5
 800d2a4:	d103      	bne.n	800d2ae <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800d2a6:	6a38      	ldr	r0, [r7, #32]
 800d2a8:	f7fe fadc 	bl	800b864 <dhcp_handle_nak>
 800d2ac:	e018      	b.n	800d2e0 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800d2ae:	7cfb      	ldrb	r3, [r7, #19]
 800d2b0:	2b02      	cmp	r3, #2
 800d2b2:	d108      	bne.n	800d2c6 <dhcp_recv+0x162>
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	795b      	ldrb	r3, [r3, #5]
 800d2b8:	2b06      	cmp	r3, #6
 800d2ba:	d104      	bne.n	800d2c6 <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800d2bc:	6979      	ldr	r1, [r7, #20]
 800d2be:	6a38      	ldr	r0, [r7, #32]
 800d2c0:	f7fe fb1e 	bl	800b900 <dhcp_handle_offer>
 800d2c4:	e00c      	b.n	800d2e0 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800d2c6:	bf00      	nop
 800d2c8:	e00a      	b.n	800d2e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800d2ca:	bf00      	nop
 800d2cc:	e008      	b.n	800d2e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800d2ce:	bf00      	nop
 800d2d0:	e006      	b.n	800d2e0 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800d2d2:	bf00      	nop
 800d2d4:	e004      	b.n	800d2e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800d2d6:	bf00      	nop
 800d2d8:	e002      	b.n	800d2e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800d2da:	bf00      	nop
 800d2dc:	e000      	b.n	800d2e0 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800d2de:	bf00      	nop
  pbuf_free(p);
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7f7 fe91 	bl	8005008 <pbuf_free>
}
 800d2e6:	bf00      	nop
 800d2e8:	3728      	adds	r7, #40	; 0x28
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	200037dc 	.word	0x200037dc
 800d2f4:	20006d6c 	.word	0x20006d6c
 800d2f8:	20006d78 	.word	0x20006d78

0800d2fc <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b088      	sub	sp, #32
 800d300:	af00      	add	r7, sp, #0
 800d302:	60f8      	str	r0, [r7, #12]
 800d304:	60b9      	str	r1, [r7, #8]
 800d306:	603b      	str	r3, [r7, #0]
 800d308:	4613      	mov	r3, r2
 800d30a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d108      	bne.n	800d324 <dhcp_create_msg+0x28>
 800d312:	4b5f      	ldr	r3, [pc, #380]	; (800d490 <dhcp_create_msg+0x194>)
 800d314:	f240 7269 	movw	r2, #1897	; 0x769
 800d318:	495e      	ldr	r1, [pc, #376]	; (800d494 <dhcp_create_msg+0x198>)
 800d31a:	485f      	ldr	r0, [pc, #380]	; (800d498 <dhcp_create_msg+0x19c>)
 800d31c:	f002 fc3a 	bl	800fb94 <iprintf>
 800d320:	2300      	movs	r3, #0
 800d322:	e0b1      	b.n	800d488 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800d324:	68bb      	ldr	r3, [r7, #8]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d108      	bne.n	800d33c <dhcp_create_msg+0x40>
 800d32a:	4b59      	ldr	r3, [pc, #356]	; (800d490 <dhcp_create_msg+0x194>)
 800d32c:	f240 726a 	movw	r2, #1898	; 0x76a
 800d330:	495a      	ldr	r1, [pc, #360]	; (800d49c <dhcp_create_msg+0x1a0>)
 800d332:	4859      	ldr	r0, [pc, #356]	; (800d498 <dhcp_create_msg+0x19c>)
 800d334:	f002 fc2e 	bl	800fb94 <iprintf>
 800d338:	2300      	movs	r3, #0
 800d33a:	e0a5      	b.n	800d488 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800d33c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800d340:	f44f 719a 	mov.w	r1, #308	; 0x134
 800d344:	2036      	movs	r0, #54	; 0x36
 800d346:	f7f7 fb7f 	bl	8004a48 <pbuf_alloc>
 800d34a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800d34c:	69bb      	ldr	r3, [r7, #24]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d101      	bne.n	800d356 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800d352:	2300      	movs	r3, #0
 800d354:	e098      	b.n	800d488 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800d356:	69bb      	ldr	r3, [r7, #24]
 800d358:	895b      	ldrh	r3, [r3, #10]
 800d35a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800d35e:	d206      	bcs.n	800d36e <dhcp_create_msg+0x72>
 800d360:	4b4b      	ldr	r3, [pc, #300]	; (800d490 <dhcp_create_msg+0x194>)
 800d362:	f240 7272 	movw	r2, #1906	; 0x772
 800d366:	494e      	ldr	r1, [pc, #312]	; (800d4a0 <dhcp_create_msg+0x1a4>)
 800d368:	484b      	ldr	r0, [pc, #300]	; (800d498 <dhcp_create_msg+0x19c>)
 800d36a:	f002 fc13 	bl	800fb94 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800d36e:	79fb      	ldrb	r3, [r7, #7]
 800d370:	2b03      	cmp	r3, #3
 800d372:	d103      	bne.n	800d37c <dhcp_create_msg+0x80>
 800d374:	68bb      	ldr	r3, [r7, #8]
 800d376:	795b      	ldrb	r3, [r3, #5]
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d10d      	bne.n	800d398 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	799b      	ldrb	r3, [r3, #6]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d105      	bne.n	800d390 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800d384:	f002 fc1e 	bl	800fbc4 <rand>
 800d388:	4603      	mov	r3, r0
 800d38a:	461a      	mov	r2, r3
 800d38c:	4b45      	ldr	r3, [pc, #276]	; (800d4a4 <dhcp_create_msg+0x1a8>)
 800d38e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800d390:	4b44      	ldr	r3, [pc, #272]	; (800d4a4 <dhcp_create_msg+0x1a8>)
 800d392:	681a      	ldr	r2, [r3, #0]
 800d394:	68bb      	ldr	r3, [r7, #8]
 800d396:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800d398:	69bb      	ldr	r3, [r7, #24]
 800d39a:	685b      	ldr	r3, [r3, #4]
 800d39c:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800d39e:	f44f 729a 	mov.w	r2, #308	; 0x134
 800d3a2:	2100      	movs	r1, #0
 800d3a4:	6978      	ldr	r0, [r7, #20]
 800d3a6:	f002 fbed 	bl	800fb84 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800d3aa:	697b      	ldr	r3, [r7, #20]
 800d3ac:	2201      	movs	r2, #1
 800d3ae:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2201      	movs	r2, #1
 800d3b4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	4618      	mov	r0, r3
 800d3c6:	f7f6 f824 	bl	8003412 <lwip_htonl>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	697b      	ldr	r3, [r7, #20]
 800d3ce:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800d3d0:	79fb      	ldrb	r3, [r7, #7]
 800d3d2:	2b08      	cmp	r3, #8
 800d3d4:	d010      	beq.n	800d3f8 <dhcp_create_msg+0xfc>
 800d3d6:	79fb      	ldrb	r3, [r7, #7]
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d00d      	beq.n	800d3f8 <dhcp_create_msg+0xfc>
 800d3dc:	79fb      	ldrb	r3, [r7, #7]
 800d3de:	2b07      	cmp	r3, #7
 800d3e0:	d00a      	beq.n	800d3f8 <dhcp_create_msg+0xfc>
 800d3e2:	79fb      	ldrb	r3, [r7, #7]
 800d3e4:	2b03      	cmp	r3, #3
 800d3e6:	d10c      	bne.n	800d402 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d3e8:	68bb      	ldr	r3, [r7, #8]
 800d3ea:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800d3ec:	2b05      	cmp	r3, #5
 800d3ee:	d003      	beq.n	800d3f8 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800d3f0:	68bb      	ldr	r3, [r7, #8]
 800d3f2:	795b      	ldrb	r3, [r3, #5]
 800d3f4:	2b04      	cmp	r3, #4
 800d3f6:	d104      	bne.n	800d402 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	3304      	adds	r3, #4
 800d3fc:	681a      	ldr	r2, [r3, #0]
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d402:	2300      	movs	r3, #0
 800d404:	83fb      	strh	r3, [r7, #30]
 800d406:	e00c      	b.n	800d422 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800d408:	8bfa      	ldrh	r2, [r7, #30]
 800d40a:	8bfb      	ldrh	r3, [r7, #30]
 800d40c:	68f9      	ldr	r1, [r7, #12]
 800d40e:	440a      	add	r2, r1
 800d410:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800d414:	697a      	ldr	r2, [r7, #20]
 800d416:	4413      	add	r3, r2
 800d418:	460a      	mov	r2, r1
 800d41a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800d41c:	8bfb      	ldrh	r3, [r7, #30]
 800d41e:	3301      	adds	r3, #1
 800d420:	83fb      	strh	r3, [r7, #30]
 800d422:	8bfb      	ldrh	r3, [r7, #30]
 800d424:	2b05      	cmp	r3, #5
 800d426:	d9ef      	bls.n	800d408 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	2200      	movs	r2, #0
 800d42c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d430:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800d434:	2200      	movs	r2, #0
 800d436:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800d43a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800d43e:	2200      	movs	r2, #0
 800d440:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800d444:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800d448:	2200      	movs	r2, #0
 800d44a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800d44e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d458:	2301      	movs	r3, #1
 800d45a:	2235      	movs	r2, #53	; 0x35
 800d45c:	2000      	movs	r0, #0
 800d45e:	f7ff faad 	bl	800c9bc <dhcp_option>
 800d462:	4603      	mov	r3, r0
 800d464:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d46c:	79fa      	ldrb	r2, [r7, #7]
 800d46e:	8a7b      	ldrh	r3, [r7, #18]
 800d470:	4618      	mov	r0, r3
 800d472:	f7ff fad7 	bl	800ca24 <dhcp_option_byte>
 800d476:	4603      	mov	r3, r0
 800d478:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d002      	beq.n	800d486 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	8a7a      	ldrh	r2, [r7, #18]
 800d484:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800d486:	69bb      	ldr	r3, [r7, #24]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3720      	adds	r7, #32
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	08012db4 	.word	0x08012db4
 800d494:	080130e4 	.word	0x080130e4
 800d498:	08012e14 	.word	0x08012e14
 800d49c:	08013104 	.word	0x08013104
 800d4a0:	08013124 	.word	0x08013124
 800d4a4:	200005a4 	.word	0x200005a4

0800d4a8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b084      	sub	sp, #16
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	4603      	mov	r3, r0
 800d4b0:	60b9      	str	r1, [r7, #8]
 800d4b2:	607a      	str	r2, [r7, #4]
 800d4b4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800d4b6:	89fb      	ldrh	r3, [r7, #14]
 800d4b8:	1c5a      	adds	r2, r3, #1
 800d4ba:	81fa      	strh	r2, [r7, #14]
 800d4bc:	461a      	mov	r2, r3
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	4413      	add	r3, r2
 800d4c2:	22ff      	movs	r2, #255	; 0xff
 800d4c4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d4c6:	e007      	b.n	800d4d8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800d4c8:	89fb      	ldrh	r3, [r7, #14]
 800d4ca:	1c5a      	adds	r2, r3, #1
 800d4cc:	81fa      	strh	r2, [r7, #14]
 800d4ce:	461a      	mov	r2, r3
 800d4d0:	68bb      	ldr	r3, [r7, #8]
 800d4d2:	4413      	add	r3, r2
 800d4d4:	2200      	movs	r2, #0
 800d4d6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800d4d8:	89fb      	ldrh	r3, [r7, #14]
 800d4da:	2b43      	cmp	r3, #67	; 0x43
 800d4dc:	d904      	bls.n	800d4e8 <dhcp_option_trailer+0x40>
 800d4de:	89fb      	ldrh	r3, [r7, #14]
 800d4e0:	f003 0303 	and.w	r3, r3, #3
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <dhcp_option_trailer+0x46>
 800d4e8:	89fb      	ldrh	r3, [r7, #14]
 800d4ea:	2b43      	cmp	r3, #67	; 0x43
 800d4ec:	d9ec      	bls.n	800d4c8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800d4ee:	89fb      	ldrh	r3, [r7, #14]
 800d4f0:	33f0      	adds	r3, #240	; 0xf0
 800d4f2:	b29b      	uxth	r3, r3
 800d4f4:	4619      	mov	r1, r3
 800d4f6:	6878      	ldr	r0, [r7, #4]
 800d4f8:	f7f7 fc00 	bl	8004cfc <pbuf_realloc>
}
 800d4fc:	bf00      	nop
 800d4fe:	3710      	adds	r7, #16
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800d504:	b480      	push	{r7}
 800d506:	b085      	sub	sp, #20
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d017      	beq.n	800d542 <dhcp_supplied_address+0x3e>
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	2b00      	cmp	r3, #0
 800d518:	d013      	beq.n	800d542 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	795b      	ldrb	r3, [r3, #5]
 800d524:	2b0a      	cmp	r3, #10
 800d526:	d007      	beq.n	800d538 <dhcp_supplied_address+0x34>
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	795b      	ldrb	r3, [r3, #5]
 800d52c:	2b05      	cmp	r3, #5
 800d52e:	d003      	beq.n	800d538 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800d534:	2b04      	cmp	r3, #4
 800d536:	d101      	bne.n	800d53c <dhcp_supplied_address+0x38>
 800d538:	2301      	movs	r3, #1
 800d53a:	e000      	b.n	800d53e <dhcp_supplied_address+0x3a>
 800d53c:	2300      	movs	r3, #0
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	e000      	b.n	800d544 <dhcp_supplied_address+0x40>
  }
  return 0;
 800d542:	2300      	movs	r3, #0
}
 800d544:	4618      	mov	r0, r3
 800d546:	3714      	adds	r7, #20
 800d548:	46bd      	mov	sp, r7
 800d54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d54e:	4770      	bx	lr

0800d550 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800d550:	b580      	push	{r7, lr}
 800d552:	b082      	sub	sp, #8
 800d554:	af00      	add	r7, sp, #0
 800d556:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800d558:	4915      	ldr	r1, [pc, #84]	; (800d5b0 <etharp_free_entry+0x60>)
 800d55a:	687a      	ldr	r2, [r7, #4]
 800d55c:	4613      	mov	r3, r2
 800d55e:	005b      	lsls	r3, r3, #1
 800d560:	4413      	add	r3, r2
 800d562:	00db      	lsls	r3, r3, #3
 800d564:	440b      	add	r3, r1
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d013      	beq.n	800d594 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800d56c:	4910      	ldr	r1, [pc, #64]	; (800d5b0 <etharp_free_entry+0x60>)
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	4613      	mov	r3, r2
 800d572:	005b      	lsls	r3, r3, #1
 800d574:	4413      	add	r3, r2
 800d576:	00db      	lsls	r3, r3, #3
 800d578:	440b      	add	r3, r1
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7f7 fd43 	bl	8005008 <pbuf_free>
    arp_table[i].q = NULL;
 800d582:	490b      	ldr	r1, [pc, #44]	; (800d5b0 <etharp_free_entry+0x60>)
 800d584:	687a      	ldr	r2, [r7, #4]
 800d586:	4613      	mov	r3, r2
 800d588:	005b      	lsls	r3, r3, #1
 800d58a:	4413      	add	r3, r2
 800d58c:	00db      	lsls	r3, r3, #3
 800d58e:	440b      	add	r3, r1
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800d594:	4906      	ldr	r1, [pc, #24]	; (800d5b0 <etharp_free_entry+0x60>)
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4613      	mov	r3, r2
 800d59a:	005b      	lsls	r3, r3, #1
 800d59c:	4413      	add	r3, r2
 800d59e:	00db      	lsls	r3, r3, #3
 800d5a0:	440b      	add	r3, r1
 800d5a2:	3314      	adds	r3, #20
 800d5a4:	2200      	movs	r2, #0
 800d5a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800d5a8:	bf00      	nop
 800d5aa:	3708      	adds	r7, #8
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	bd80      	pop	{r7, pc}
 800d5b0:	200005a8 	.word	0x200005a8

0800d5b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	607b      	str	r3, [r7, #4]
 800d5be:	e096      	b.n	800d6ee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800d5c0:	494f      	ldr	r1, [pc, #316]	; (800d700 <etharp_tmr+0x14c>)
 800d5c2:	687a      	ldr	r2, [r7, #4]
 800d5c4:	4613      	mov	r3, r2
 800d5c6:	005b      	lsls	r3, r3, #1
 800d5c8:	4413      	add	r3, r2
 800d5ca:	00db      	lsls	r3, r3, #3
 800d5cc:	440b      	add	r3, r1
 800d5ce:	3314      	adds	r3, #20
 800d5d0:	781b      	ldrb	r3, [r3, #0]
 800d5d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800d5d4:	78fb      	ldrb	r3, [r7, #3]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	f000 8086 	beq.w	800d6e8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800d5dc:	4948      	ldr	r1, [pc, #288]	; (800d700 <etharp_tmr+0x14c>)
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	4613      	mov	r3, r2
 800d5e2:	005b      	lsls	r3, r3, #1
 800d5e4:	4413      	add	r3, r2
 800d5e6:	00db      	lsls	r3, r3, #3
 800d5e8:	440b      	add	r3, r1
 800d5ea:	3312      	adds	r3, #18
 800d5ec:	881b      	ldrh	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b298      	uxth	r0, r3
 800d5f2:	4943      	ldr	r1, [pc, #268]	; (800d700 <etharp_tmr+0x14c>)
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	4613      	mov	r3, r2
 800d5f8:	005b      	lsls	r3, r3, #1
 800d5fa:	4413      	add	r3, r2
 800d5fc:	00db      	lsls	r3, r3, #3
 800d5fe:	440b      	add	r3, r1
 800d600:	3312      	adds	r3, #18
 800d602:	4602      	mov	r2, r0
 800d604:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d606:	493e      	ldr	r1, [pc, #248]	; (800d700 <etharp_tmr+0x14c>)
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	4613      	mov	r3, r2
 800d60c:	005b      	lsls	r3, r3, #1
 800d60e:	4413      	add	r3, r2
 800d610:	00db      	lsls	r3, r3, #3
 800d612:	440b      	add	r3, r1
 800d614:	3312      	adds	r3, #18
 800d616:	881b      	ldrh	r3, [r3, #0]
 800d618:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800d61c:	d215      	bcs.n	800d64a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d61e:	4938      	ldr	r1, [pc, #224]	; (800d700 <etharp_tmr+0x14c>)
 800d620:	687a      	ldr	r2, [r7, #4]
 800d622:	4613      	mov	r3, r2
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	4413      	add	r3, r2
 800d628:	00db      	lsls	r3, r3, #3
 800d62a:	440b      	add	r3, r1
 800d62c:	3314      	adds	r3, #20
 800d62e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800d630:	2b01      	cmp	r3, #1
 800d632:	d10e      	bne.n	800d652 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800d634:	4932      	ldr	r1, [pc, #200]	; (800d700 <etharp_tmr+0x14c>)
 800d636:	687a      	ldr	r2, [r7, #4]
 800d638:	4613      	mov	r3, r2
 800d63a:	005b      	lsls	r3, r3, #1
 800d63c:	4413      	add	r3, r2
 800d63e:	00db      	lsls	r3, r3, #3
 800d640:	440b      	add	r3, r1
 800d642:	3312      	adds	r3, #18
 800d644:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800d646:	2b04      	cmp	r3, #4
 800d648:	d903      	bls.n	800d652 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f7ff ff80 	bl	800d550 <etharp_free_entry>
 800d650:	e04a      	b.n	800d6e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800d652:	492b      	ldr	r1, [pc, #172]	; (800d700 <etharp_tmr+0x14c>)
 800d654:	687a      	ldr	r2, [r7, #4]
 800d656:	4613      	mov	r3, r2
 800d658:	005b      	lsls	r3, r3, #1
 800d65a:	4413      	add	r3, r2
 800d65c:	00db      	lsls	r3, r3, #3
 800d65e:	440b      	add	r3, r1
 800d660:	3314      	adds	r3, #20
 800d662:	781b      	ldrb	r3, [r3, #0]
 800d664:	2b03      	cmp	r3, #3
 800d666:	d10a      	bne.n	800d67e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800d668:	4925      	ldr	r1, [pc, #148]	; (800d700 <etharp_tmr+0x14c>)
 800d66a:	687a      	ldr	r2, [r7, #4]
 800d66c:	4613      	mov	r3, r2
 800d66e:	005b      	lsls	r3, r3, #1
 800d670:	4413      	add	r3, r2
 800d672:	00db      	lsls	r3, r3, #3
 800d674:	440b      	add	r3, r1
 800d676:	3314      	adds	r3, #20
 800d678:	2204      	movs	r2, #4
 800d67a:	701a      	strb	r2, [r3, #0]
 800d67c:	e034      	b.n	800d6e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800d67e:	4920      	ldr	r1, [pc, #128]	; (800d700 <etharp_tmr+0x14c>)
 800d680:	687a      	ldr	r2, [r7, #4]
 800d682:	4613      	mov	r3, r2
 800d684:	005b      	lsls	r3, r3, #1
 800d686:	4413      	add	r3, r2
 800d688:	00db      	lsls	r3, r3, #3
 800d68a:	440b      	add	r3, r1
 800d68c:	3314      	adds	r3, #20
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	2b04      	cmp	r3, #4
 800d692:	d10a      	bne.n	800d6aa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800d694:	491a      	ldr	r1, [pc, #104]	; (800d700 <etharp_tmr+0x14c>)
 800d696:	687a      	ldr	r2, [r7, #4]
 800d698:	4613      	mov	r3, r2
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	4413      	add	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	440b      	add	r3, r1
 800d6a2:	3314      	adds	r3, #20
 800d6a4:	2202      	movs	r2, #2
 800d6a6:	701a      	strb	r2, [r3, #0]
 800d6a8:	e01e      	b.n	800d6e8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800d6aa:	4915      	ldr	r1, [pc, #84]	; (800d700 <etharp_tmr+0x14c>)
 800d6ac:	687a      	ldr	r2, [r7, #4]
 800d6ae:	4613      	mov	r3, r2
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	4413      	add	r3, r2
 800d6b4:	00db      	lsls	r3, r3, #3
 800d6b6:	440b      	add	r3, r1
 800d6b8:	3314      	adds	r3, #20
 800d6ba:	781b      	ldrb	r3, [r3, #0]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d113      	bne.n	800d6e8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800d6c0:	490f      	ldr	r1, [pc, #60]	; (800d700 <etharp_tmr+0x14c>)
 800d6c2:	687a      	ldr	r2, [r7, #4]
 800d6c4:	4613      	mov	r3, r2
 800d6c6:	005b      	lsls	r3, r3, #1
 800d6c8:	4413      	add	r3, r2
 800d6ca:	00db      	lsls	r3, r3, #3
 800d6cc:	440b      	add	r3, r1
 800d6ce:	3308      	adds	r3, #8
 800d6d0:	6818      	ldr	r0, [r3, #0]
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	4613      	mov	r3, r2
 800d6d6:	005b      	lsls	r3, r3, #1
 800d6d8:	4413      	add	r3, r2
 800d6da:	00db      	lsls	r3, r3, #3
 800d6dc:	4a08      	ldr	r2, [pc, #32]	; (800d700 <etharp_tmr+0x14c>)
 800d6de:	4413      	add	r3, r2
 800d6e0:	3304      	adds	r3, #4
 800d6e2:	4619      	mov	r1, r3
 800d6e4:	f000 fe72 	bl	800e3cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	3301      	adds	r3, #1
 800d6ec:	607b      	str	r3, [r7, #4]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b09      	cmp	r3, #9
 800d6f2:	f77f af65 	ble.w	800d5c0 <etharp_tmr+0xc>
      }
    }
  }
}
 800d6f6:	bf00      	nop
 800d6f8:	3708      	adds	r7, #8
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}
 800d6fe:	bf00      	nop
 800d700:	200005a8 	.word	0x200005a8

0800d704 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b08a      	sub	sp, #40	; 0x28
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	460b      	mov	r3, r1
 800d70e:	607a      	str	r2, [r7, #4]
 800d710:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800d712:	230a      	movs	r3, #10
 800d714:	84fb      	strh	r3, [r7, #38]	; 0x26
 800d716:	230a      	movs	r3, #10
 800d718:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800d71a:	230a      	movs	r3, #10
 800d71c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800d71e:	2300      	movs	r3, #0
 800d720:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800d722:	230a      	movs	r3, #10
 800d724:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800d726:	2300      	movs	r3, #0
 800d728:	83bb      	strh	r3, [r7, #28]
 800d72a:	2300      	movs	r3, #0
 800d72c:	837b      	strh	r3, [r7, #26]
 800d72e:	2300      	movs	r3, #0
 800d730:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d732:	2300      	movs	r3, #0
 800d734:	843b      	strh	r3, [r7, #32]
 800d736:	e0ae      	b.n	800d896 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800d738:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d73c:	49a6      	ldr	r1, [pc, #664]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d73e:	4613      	mov	r3, r2
 800d740:	005b      	lsls	r3, r3, #1
 800d742:	4413      	add	r3, r2
 800d744:	00db      	lsls	r3, r3, #3
 800d746:	440b      	add	r3, r1
 800d748:	3314      	adds	r3, #20
 800d74a:	781b      	ldrb	r3, [r3, #0]
 800d74c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800d74e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d752:	2b0a      	cmp	r3, #10
 800d754:	d105      	bne.n	800d762 <etharp_find_entry+0x5e>
 800d756:	7dfb      	ldrb	r3, [r7, #23]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d102      	bne.n	800d762 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800d75c:	8c3b      	ldrh	r3, [r7, #32]
 800d75e:	847b      	strh	r3, [r7, #34]	; 0x22
 800d760:	e095      	b.n	800d88e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800d762:	7dfb      	ldrb	r3, [r7, #23]
 800d764:	2b00      	cmp	r3, #0
 800d766:	f000 8092 	beq.w	800d88e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800d76a:	7dfb      	ldrb	r3, [r7, #23]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d009      	beq.n	800d784 <etharp_find_entry+0x80>
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	2b01      	cmp	r3, #1
 800d774:	d806      	bhi.n	800d784 <etharp_find_entry+0x80>
 800d776:	4b99      	ldr	r3, [pc, #612]	; (800d9dc <etharp_find_entry+0x2d8>)
 800d778:	f44f 7292 	mov.w	r2, #292	; 0x124
 800d77c:	4998      	ldr	r1, [pc, #608]	; (800d9e0 <etharp_find_entry+0x2dc>)
 800d77e:	4899      	ldr	r0, [pc, #612]	; (800d9e4 <etharp_find_entry+0x2e0>)
 800d780:	f002 fa08 	bl	800fb94 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d020      	beq.n	800d7cc <etharp_find_entry+0xc8>
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	6819      	ldr	r1, [r3, #0]
 800d78e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d792:	4891      	ldr	r0, [pc, #580]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d794:	4613      	mov	r3, r2
 800d796:	005b      	lsls	r3, r3, #1
 800d798:	4413      	add	r3, r2
 800d79a:	00db      	lsls	r3, r3, #3
 800d79c:	4403      	add	r3, r0
 800d79e:	3304      	adds	r3, #4
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	4299      	cmp	r1, r3
 800d7a4:	d112      	bne.n	800d7cc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d00c      	beq.n	800d7c6 <etharp_find_entry+0xc2>
 800d7ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7b0:	4989      	ldr	r1, [pc, #548]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d7b2:	4613      	mov	r3, r2
 800d7b4:	005b      	lsls	r3, r3, #1
 800d7b6:	4413      	add	r3, r2
 800d7b8:	00db      	lsls	r3, r3, #3
 800d7ba:	440b      	add	r3, r1
 800d7bc:	3308      	adds	r3, #8
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	687a      	ldr	r2, [r7, #4]
 800d7c2:	429a      	cmp	r2, r3
 800d7c4:	d102      	bne.n	800d7cc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800d7c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d7ca:	e100      	b.n	800d9ce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b01      	cmp	r3, #1
 800d7d0:	d140      	bne.n	800d854 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800d7d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7d6:	4980      	ldr	r1, [pc, #512]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d7d8:	4613      	mov	r3, r2
 800d7da:	005b      	lsls	r3, r3, #1
 800d7dc:	4413      	add	r3, r2
 800d7de:	00db      	lsls	r3, r3, #3
 800d7e0:	440b      	add	r3, r1
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d01a      	beq.n	800d81e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800d7e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d7ec:	497a      	ldr	r1, [pc, #488]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d7ee:	4613      	mov	r3, r2
 800d7f0:	005b      	lsls	r3, r3, #1
 800d7f2:	4413      	add	r3, r2
 800d7f4:	00db      	lsls	r3, r3, #3
 800d7f6:	440b      	add	r3, r1
 800d7f8:	3312      	adds	r3, #18
 800d7fa:	881b      	ldrh	r3, [r3, #0]
 800d7fc:	8bba      	ldrh	r2, [r7, #28]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d845      	bhi.n	800d88e <etharp_find_entry+0x18a>
            old_queue = i;
 800d802:	8c3b      	ldrh	r3, [r7, #32]
 800d804:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800d806:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d80a:	4973      	ldr	r1, [pc, #460]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d80c:	4613      	mov	r3, r2
 800d80e:	005b      	lsls	r3, r3, #1
 800d810:	4413      	add	r3, r2
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	440b      	add	r3, r1
 800d816:	3312      	adds	r3, #18
 800d818:	881b      	ldrh	r3, [r3, #0]
 800d81a:	83bb      	strh	r3, [r7, #28]
 800d81c:	e037      	b.n	800d88e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800d81e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d822:	496d      	ldr	r1, [pc, #436]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d824:	4613      	mov	r3, r2
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	4413      	add	r3, r2
 800d82a:	00db      	lsls	r3, r3, #3
 800d82c:	440b      	add	r3, r1
 800d82e:	3312      	adds	r3, #18
 800d830:	881b      	ldrh	r3, [r3, #0]
 800d832:	8b7a      	ldrh	r2, [r7, #26]
 800d834:	429a      	cmp	r2, r3
 800d836:	d82a      	bhi.n	800d88e <etharp_find_entry+0x18a>
            old_pending = i;
 800d838:	8c3b      	ldrh	r3, [r7, #32]
 800d83a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800d83c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d840:	4965      	ldr	r1, [pc, #404]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d842:	4613      	mov	r3, r2
 800d844:	005b      	lsls	r3, r3, #1
 800d846:	4413      	add	r3, r2
 800d848:	00db      	lsls	r3, r3, #3
 800d84a:	440b      	add	r3, r1
 800d84c:	3312      	adds	r3, #18
 800d84e:	881b      	ldrh	r3, [r3, #0]
 800d850:	837b      	strh	r3, [r7, #26]
 800d852:	e01c      	b.n	800d88e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800d854:	7dfb      	ldrb	r3, [r7, #23]
 800d856:	2b01      	cmp	r3, #1
 800d858:	d919      	bls.n	800d88e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800d85a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d85e:	495e      	ldr	r1, [pc, #376]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d860:	4613      	mov	r3, r2
 800d862:	005b      	lsls	r3, r3, #1
 800d864:	4413      	add	r3, r2
 800d866:	00db      	lsls	r3, r3, #3
 800d868:	440b      	add	r3, r1
 800d86a:	3312      	adds	r3, #18
 800d86c:	881b      	ldrh	r3, [r3, #0]
 800d86e:	8b3a      	ldrh	r2, [r7, #24]
 800d870:	429a      	cmp	r2, r3
 800d872:	d80c      	bhi.n	800d88e <etharp_find_entry+0x18a>
            old_stable = i;
 800d874:	8c3b      	ldrh	r3, [r7, #32]
 800d876:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800d878:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d87c:	4956      	ldr	r1, [pc, #344]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d87e:	4613      	mov	r3, r2
 800d880:	005b      	lsls	r3, r3, #1
 800d882:	4413      	add	r3, r2
 800d884:	00db      	lsls	r3, r3, #3
 800d886:	440b      	add	r3, r1
 800d888:	3312      	adds	r3, #18
 800d88a:	881b      	ldrh	r3, [r3, #0]
 800d88c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800d88e:	8c3b      	ldrh	r3, [r7, #32]
 800d890:	3301      	adds	r3, #1
 800d892:	b29b      	uxth	r3, r3
 800d894:	843b      	strh	r3, [r7, #32]
 800d896:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d89a:	2b09      	cmp	r3, #9
 800d89c:	f77f af4c 	ble.w	800d738 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800d8a0:	7afb      	ldrb	r3, [r7, #11]
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d108      	bne.n	800d8bc <etharp_find_entry+0x1b8>
 800d8aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d8ae:	2b0a      	cmp	r3, #10
 800d8b0:	d107      	bne.n	800d8c2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800d8b2:	7afb      	ldrb	r3, [r7, #11]
 800d8b4:	f003 0301 	and.w	r3, r3, #1
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d102      	bne.n	800d8c2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800d8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c0:	e085      	b.n	800d9ce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800d8c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800d8c6:	2b09      	cmp	r3, #9
 800d8c8:	dc02      	bgt.n	800d8d0 <etharp_find_entry+0x1cc>
    i = empty;
 800d8ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800d8cc:	843b      	strh	r3, [r7, #32]
 800d8ce:	e039      	b.n	800d944 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800d8d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	dc14      	bgt.n	800d902 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800d8d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d8da:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800d8dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d8e0:	493d      	ldr	r1, [pc, #244]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d8e2:	4613      	mov	r3, r2
 800d8e4:	005b      	lsls	r3, r3, #1
 800d8e6:	4413      	add	r3, r2
 800d8e8:	00db      	lsls	r3, r3, #3
 800d8ea:	440b      	add	r3, r1
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d018      	beq.n	800d924 <etharp_find_entry+0x220>
 800d8f2:	4b3a      	ldr	r3, [pc, #232]	; (800d9dc <etharp_find_entry+0x2d8>)
 800d8f4:	f240 126d 	movw	r2, #365	; 0x16d
 800d8f8:	493b      	ldr	r1, [pc, #236]	; (800d9e8 <etharp_find_entry+0x2e4>)
 800d8fa:	483a      	ldr	r0, [pc, #232]	; (800d9e4 <etharp_find_entry+0x2e0>)
 800d8fc:	f002 f94a 	bl	800fb94 <iprintf>
 800d900:	e010      	b.n	800d924 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800d902:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d906:	2b09      	cmp	r3, #9
 800d908:	dc02      	bgt.n	800d910 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800d90a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d90c:	843b      	strh	r3, [r7, #32]
 800d90e:	e009      	b.n	800d924 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800d910:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800d914:	2b09      	cmp	r3, #9
 800d916:	dc02      	bgt.n	800d91e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800d918:	8bfb      	ldrh	r3, [r7, #30]
 800d91a:	843b      	strh	r3, [r7, #32]
 800d91c:	e002      	b.n	800d924 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800d91e:	f04f 33ff 	mov.w	r3, #4294967295
 800d922:	e054      	b.n	800d9ce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d924:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d928:	2b09      	cmp	r3, #9
 800d92a:	dd06      	ble.n	800d93a <etharp_find_entry+0x236>
 800d92c:	4b2b      	ldr	r3, [pc, #172]	; (800d9dc <etharp_find_entry+0x2d8>)
 800d92e:	f240 127f 	movw	r2, #383	; 0x17f
 800d932:	492e      	ldr	r1, [pc, #184]	; (800d9ec <etharp_find_entry+0x2e8>)
 800d934:	482b      	ldr	r0, [pc, #172]	; (800d9e4 <etharp_find_entry+0x2e0>)
 800d936:	f002 f92d 	bl	800fb94 <iprintf>
    etharp_free_entry(i);
 800d93a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d93e:	4618      	mov	r0, r3
 800d940:	f7ff fe06 	bl	800d550 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800d944:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800d948:	2b09      	cmp	r3, #9
 800d94a:	dd06      	ble.n	800d95a <etharp_find_entry+0x256>
 800d94c:	4b23      	ldr	r3, [pc, #140]	; (800d9dc <etharp_find_entry+0x2d8>)
 800d94e:	f240 1283 	movw	r2, #387	; 0x183
 800d952:	4926      	ldr	r1, [pc, #152]	; (800d9ec <etharp_find_entry+0x2e8>)
 800d954:	4823      	ldr	r0, [pc, #140]	; (800d9e4 <etharp_find_entry+0x2e0>)
 800d956:	f002 f91d 	bl	800fb94 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800d95a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d95e:	491e      	ldr	r1, [pc, #120]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d960:	4613      	mov	r3, r2
 800d962:	005b      	lsls	r3, r3, #1
 800d964:	4413      	add	r3, r2
 800d966:	00db      	lsls	r3, r3, #3
 800d968:	440b      	add	r3, r1
 800d96a:	3314      	adds	r3, #20
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d006      	beq.n	800d980 <etharp_find_entry+0x27c>
 800d972:	4b1a      	ldr	r3, [pc, #104]	; (800d9dc <etharp_find_entry+0x2d8>)
 800d974:	f240 1285 	movw	r2, #389	; 0x185
 800d978:	491d      	ldr	r1, [pc, #116]	; (800d9f0 <etharp_find_entry+0x2ec>)
 800d97a:	481a      	ldr	r0, [pc, #104]	; (800d9e4 <etharp_find_entry+0x2e0>)
 800d97c:	f002 f90a 	bl	800fb94 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00b      	beq.n	800d99e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800d986:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	6819      	ldr	r1, [r3, #0]
 800d98e:	4812      	ldr	r0, [pc, #72]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d990:	4613      	mov	r3, r2
 800d992:	005b      	lsls	r3, r3, #1
 800d994:	4413      	add	r3, r2
 800d996:	00db      	lsls	r3, r3, #3
 800d998:	4403      	add	r3, r0
 800d99a:	3304      	adds	r3, #4
 800d99c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800d99e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9a2:	490d      	ldr	r1, [pc, #52]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d9a4:	4613      	mov	r3, r2
 800d9a6:	005b      	lsls	r3, r3, #1
 800d9a8:	4413      	add	r3, r2
 800d9aa:	00db      	lsls	r3, r3, #3
 800d9ac:	440b      	add	r3, r1
 800d9ae:	3312      	adds	r3, #18
 800d9b0:	2200      	movs	r2, #0
 800d9b2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800d9b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800d9b8:	4907      	ldr	r1, [pc, #28]	; (800d9d8 <etharp_find_entry+0x2d4>)
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	005b      	lsls	r3, r3, #1
 800d9be:	4413      	add	r3, r2
 800d9c0:	00db      	lsls	r3, r3, #3
 800d9c2:	440b      	add	r3, r1
 800d9c4:	3308      	adds	r3, #8
 800d9c6:	687a      	ldr	r2, [r7, #4]
 800d9c8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800d9ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	3728      	adds	r7, #40	; 0x28
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	bd80      	pop	{r7, pc}
 800d9d6:	bf00      	nop
 800d9d8:	200005a8 	.word	0x200005a8
 800d9dc:	08013164 	.word	0x08013164
 800d9e0:	0801319c 	.word	0x0801319c
 800d9e4:	080131dc 	.word	0x080131dc
 800d9e8:	08013204 	.word	0x08013204
 800d9ec:	0801321c 	.word	0x0801321c
 800d9f0:	08013230 	.word	0x08013230

0800d9f4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b088      	sub	sp, #32
 800d9f8:	af02      	add	r7, sp, #8
 800d9fa:	60f8      	str	r0, [r7, #12]
 800d9fc:	60b9      	str	r1, [r7, #8]
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800da08:	2b06      	cmp	r3, #6
 800da0a:	d006      	beq.n	800da1a <etharp_update_arp_entry+0x26>
 800da0c:	4b48      	ldr	r3, [pc, #288]	; (800db30 <etharp_update_arp_entry+0x13c>)
 800da0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 800da12:	4948      	ldr	r1, [pc, #288]	; (800db34 <etharp_update_arp_entry+0x140>)
 800da14:	4848      	ldr	r0, [pc, #288]	; (800db38 <etharp_update_arp_entry+0x144>)
 800da16:	f002 f8bd 	bl	800fb94 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800da1a:	68bb      	ldr	r3, [r7, #8]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d012      	beq.n	800da46 <etharp_update_arp_entry+0x52>
 800da20:	68bb      	ldr	r3, [r7, #8]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d00e      	beq.n	800da46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	68f9      	ldr	r1, [r7, #12]
 800da2e:	4618      	mov	r0, r3
 800da30:	f001 f91e 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800da34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800da36:	2b00      	cmp	r3, #0
 800da38:	d105      	bne.n	800da46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800da3a:	68bb      	ldr	r3, [r7, #8]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800da42:	2be0      	cmp	r3, #224	; 0xe0
 800da44:	d102      	bne.n	800da4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800da46:	f06f 030f 	mvn.w	r3, #15
 800da4a:	e06c      	b.n	800db26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800da4c:	78fb      	ldrb	r3, [r7, #3]
 800da4e:	68fa      	ldr	r2, [r7, #12]
 800da50:	4619      	mov	r1, r3
 800da52:	68b8      	ldr	r0, [r7, #8]
 800da54:	f7ff fe56 	bl	800d704 <etharp_find_entry>
 800da58:	4603      	mov	r3, r0
 800da5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800da5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800da60:	2b00      	cmp	r3, #0
 800da62:	da02      	bge.n	800da6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800da64:	8afb      	ldrh	r3, [r7, #22]
 800da66:	b25b      	sxtb	r3, r3
 800da68:	e05d      	b.n	800db26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800da6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da6e:	4933      	ldr	r1, [pc, #204]	; (800db3c <etharp_update_arp_entry+0x148>)
 800da70:	4613      	mov	r3, r2
 800da72:	005b      	lsls	r3, r3, #1
 800da74:	4413      	add	r3, r2
 800da76:	00db      	lsls	r3, r3, #3
 800da78:	440b      	add	r3, r1
 800da7a:	3314      	adds	r3, #20
 800da7c:	2202      	movs	r2, #2
 800da7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800da80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da84:	492d      	ldr	r1, [pc, #180]	; (800db3c <etharp_update_arp_entry+0x148>)
 800da86:	4613      	mov	r3, r2
 800da88:	005b      	lsls	r3, r3, #1
 800da8a:	4413      	add	r3, r2
 800da8c:	00db      	lsls	r3, r3, #3
 800da8e:	440b      	add	r3, r1
 800da90:	3308      	adds	r3, #8
 800da92:	68fa      	ldr	r2, [r7, #12]
 800da94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800da96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800da9a:	4613      	mov	r3, r2
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	4413      	add	r3, r2
 800daa0:	00db      	lsls	r3, r3, #3
 800daa2:	3308      	adds	r3, #8
 800daa4:	4a25      	ldr	r2, [pc, #148]	; (800db3c <etharp_update_arp_entry+0x148>)
 800daa6:	4413      	add	r3, r2
 800daa8:	3304      	adds	r3, #4
 800daaa:	2206      	movs	r2, #6
 800daac:	6879      	ldr	r1, [r7, #4]
 800daae:	4618      	mov	r0, r3
 800dab0:	f002 f85d 	bl	800fb6e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800dab4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dab8:	4920      	ldr	r1, [pc, #128]	; (800db3c <etharp_update_arp_entry+0x148>)
 800daba:	4613      	mov	r3, r2
 800dabc:	005b      	lsls	r3, r3, #1
 800dabe:	4413      	add	r3, r2
 800dac0:	00db      	lsls	r3, r3, #3
 800dac2:	440b      	add	r3, r1
 800dac4:	3312      	adds	r3, #18
 800dac6:	2200      	movs	r2, #0
 800dac8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800daca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dace:	491b      	ldr	r1, [pc, #108]	; (800db3c <etharp_update_arp_entry+0x148>)
 800dad0:	4613      	mov	r3, r2
 800dad2:	005b      	lsls	r3, r3, #1
 800dad4:	4413      	add	r3, r2
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	440b      	add	r3, r1
 800dada:	681b      	ldr	r3, [r3, #0]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d021      	beq.n	800db24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800dae0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800dae4:	4915      	ldr	r1, [pc, #84]	; (800db3c <etharp_update_arp_entry+0x148>)
 800dae6:	4613      	mov	r3, r2
 800dae8:	005b      	lsls	r3, r3, #1
 800daea:	4413      	add	r3, r2
 800daec:	00db      	lsls	r3, r3, #3
 800daee:	440b      	add	r3, r1
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800daf4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800daf8:	4910      	ldr	r1, [pc, #64]	; (800db3c <etharp_update_arp_entry+0x148>)
 800dafa:	4613      	mov	r3, r2
 800dafc:	005b      	lsls	r3, r3, #1
 800dafe:	4413      	add	r3, r2
 800db00:	00db      	lsls	r3, r3, #3
 800db02:	440b      	add	r3, r1
 800db04:	2200      	movs	r2, #0
 800db06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800db0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800db12:	9300      	str	r3, [sp, #0]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6939      	ldr	r1, [r7, #16]
 800db18:	68f8      	ldr	r0, [r7, #12]
 800db1a:	f001 ffad 	bl	800fa78 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800db1e:	6938      	ldr	r0, [r7, #16]
 800db20:	f7f7 fa72 	bl	8005008 <pbuf_free>
  }
  return ERR_OK;
 800db24:	2300      	movs	r3, #0
}
 800db26:	4618      	mov	r0, r3
 800db28:	3718      	adds	r7, #24
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	08013164 	.word	0x08013164
 800db34:	0801325c 	.word	0x0801325c
 800db38:	080131dc 	.word	0x080131dc
 800db3c:	200005a8 	.word	0x200005a8

0800db40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b084      	sub	sp, #16
 800db44:	af00      	add	r7, sp, #0
 800db46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db48:	2300      	movs	r3, #0
 800db4a:	60fb      	str	r3, [r7, #12]
 800db4c:	e01e      	b.n	800db8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800db4e:	4913      	ldr	r1, [pc, #76]	; (800db9c <etharp_cleanup_netif+0x5c>)
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	4613      	mov	r3, r2
 800db54:	005b      	lsls	r3, r3, #1
 800db56:	4413      	add	r3, r2
 800db58:	00db      	lsls	r3, r3, #3
 800db5a:	440b      	add	r3, r1
 800db5c:	3314      	adds	r3, #20
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800db62:	7afb      	ldrb	r3, [r7, #11]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00e      	beq.n	800db86 <etharp_cleanup_netif+0x46>
 800db68:	490c      	ldr	r1, [pc, #48]	; (800db9c <etharp_cleanup_netif+0x5c>)
 800db6a:	68fa      	ldr	r2, [r7, #12]
 800db6c:	4613      	mov	r3, r2
 800db6e:	005b      	lsls	r3, r3, #1
 800db70:	4413      	add	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	440b      	add	r3, r1
 800db76:	3308      	adds	r3, #8
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	687a      	ldr	r2, [r7, #4]
 800db7c:	429a      	cmp	r2, r3
 800db7e:	d102      	bne.n	800db86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800db80:	68f8      	ldr	r0, [r7, #12]
 800db82:	f7ff fce5 	bl	800d550 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	3301      	adds	r3, #1
 800db8a:	60fb      	str	r3, [r7, #12]
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b09      	cmp	r3, #9
 800db90:	dddd      	ble.n	800db4e <etharp_cleanup_netif+0xe>
    }
  }
}
 800db92:	bf00      	nop
 800db94:	3710      	adds	r7, #16
 800db96:	46bd      	mov	sp, r7
 800db98:	bd80      	pop	{r7, pc}
 800db9a:	bf00      	nop
 800db9c:	200005a8 	.word	0x200005a8

0800dba0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800dba0:	b5b0      	push	{r4, r5, r7, lr}
 800dba2:	b08a      	sub	sp, #40	; 0x28
 800dba4:	af04      	add	r7, sp, #16
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800dbaa:	683b      	ldr	r3, [r7, #0]
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d107      	bne.n	800dbc0 <etharp_input+0x20>
 800dbb0:	4b3f      	ldr	r3, [pc, #252]	; (800dcb0 <etharp_input+0x110>)
 800dbb2:	f240 228a 	movw	r2, #650	; 0x28a
 800dbb6:	493f      	ldr	r1, [pc, #252]	; (800dcb4 <etharp_input+0x114>)
 800dbb8:	483f      	ldr	r0, [pc, #252]	; (800dcb8 <etharp_input+0x118>)
 800dbba:	f001 ffeb 	bl	800fb94 <iprintf>
 800dbbe:	e074      	b.n	800dcaa <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	685b      	ldr	r3, [r3, #4]
 800dbc4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dbc6:	693b      	ldr	r3, [r7, #16]
 800dbc8:	881b      	ldrh	r3, [r3, #0]
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dbd0:	d10c      	bne.n	800dbec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dbd2:	693b      	ldr	r3, [r7, #16]
 800dbd4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800dbd6:	2b06      	cmp	r3, #6
 800dbd8:	d108      	bne.n	800dbec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dbda:	693b      	ldr	r3, [r7, #16]
 800dbdc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800dbde:	2b04      	cmp	r3, #4
 800dbe0:	d104      	bne.n	800dbec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800dbe2:	693b      	ldr	r3, [r7, #16]
 800dbe4:	885b      	ldrh	r3, [r3, #2]
 800dbe6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800dbe8:	2b08      	cmp	r3, #8
 800dbea:	d003      	beq.n	800dbf4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f7f7 fa0b 	bl	8005008 <pbuf_free>
    return;
 800dbf2:	e05a      	b.n	800dcaa <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800dbf4:	693b      	ldr	r3, [r7, #16]
 800dbf6:	330e      	adds	r3, #14
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	3318      	adds	r3, #24
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	3304      	adds	r3, #4
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d102      	bne.n	800dc14 <etharp_input+0x74>
    for_us = 0;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	75fb      	strb	r3, [r7, #23]
 800dc12:	e009      	b.n	800dc28 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800dc14:	68ba      	ldr	r2, [r7, #8]
 800dc16:	683b      	ldr	r3, [r7, #0]
 800dc18:	3304      	adds	r3, #4
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	bf0c      	ite	eq
 800dc20:	2301      	moveq	r3, #1
 800dc22:	2300      	movne	r3, #0
 800dc24:	b2db      	uxtb	r3, r3
 800dc26:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	f103 0208 	add.w	r2, r3, #8
 800dc2e:	7dfb      	ldrb	r3, [r7, #23]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d001      	beq.n	800dc38 <etharp_input+0x98>
 800dc34:	2301      	movs	r3, #1
 800dc36:	e000      	b.n	800dc3a <etharp_input+0x9a>
 800dc38:	2302      	movs	r3, #2
 800dc3a:	f107 010c 	add.w	r1, r7, #12
 800dc3e:	6838      	ldr	r0, [r7, #0]
 800dc40:	f7ff fed8 	bl	800d9f4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800dc44:	693b      	ldr	r3, [r7, #16]
 800dc46:	88db      	ldrh	r3, [r3, #6]
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc4e:	d003      	beq.n	800dc58 <etharp_input+0xb8>
 800dc50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc54:	d01e      	beq.n	800dc94 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800dc56:	e025      	b.n	800dca4 <etharp_input+0x104>
      if (for_us) {
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d021      	beq.n	800dca2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800dc64:	693b      	ldr	r3, [r7, #16]
 800dc66:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800dc70:	683b      	ldr	r3, [r7, #0]
 800dc72:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800dc74:	693a      	ldr	r2, [r7, #16]
 800dc76:	3208      	adds	r2, #8
        etharp_raw(netif,
 800dc78:	2102      	movs	r1, #2
 800dc7a:	9103      	str	r1, [sp, #12]
 800dc7c:	f107 010c 	add.w	r1, r7, #12
 800dc80:	9102      	str	r1, [sp, #8]
 800dc82:	9201      	str	r2, [sp, #4]
 800dc84:	9300      	str	r3, [sp, #0]
 800dc86:	462b      	mov	r3, r5
 800dc88:	4622      	mov	r2, r4
 800dc8a:	4601      	mov	r1, r0
 800dc8c:	6838      	ldr	r0, [r7, #0]
 800dc8e:	f000 faef 	bl	800e270 <etharp_raw>
      break;
 800dc92:	e006      	b.n	800dca2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800dc94:	f107 030c 	add.w	r3, r7, #12
 800dc98:	4619      	mov	r1, r3
 800dc9a:	6838      	ldr	r0, [r7, #0]
 800dc9c:	f7fe f9ce 	bl	800c03c <dhcp_arp_reply>
      break;
 800dca0:	e000      	b.n	800dca4 <etharp_input+0x104>
      break;
 800dca2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f7 f9af 	bl	8005008 <pbuf_free>
}
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bdb0      	pop	{r4, r5, r7, pc}
 800dcb0:	08013164 	.word	0x08013164
 800dcb4:	080132b4 	.word	0x080132b4
 800dcb8:	080131dc 	.word	0x080131dc

0800dcbc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800dcbc:	b580      	push	{r7, lr}
 800dcbe:	b086      	sub	sp, #24
 800dcc0:	af02      	add	r7, sp, #8
 800dcc2:	60f8      	str	r0, [r7, #12]
 800dcc4:	60b9      	str	r1, [r7, #8]
 800dcc6:	4613      	mov	r3, r2
 800dcc8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800dcca:	79fa      	ldrb	r2, [r7, #7]
 800dccc:	4944      	ldr	r1, [pc, #272]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dcce:	4613      	mov	r3, r2
 800dcd0:	005b      	lsls	r3, r3, #1
 800dcd2:	4413      	add	r3, r2
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	440b      	add	r3, r1
 800dcd8:	3314      	adds	r3, #20
 800dcda:	781b      	ldrb	r3, [r3, #0]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d806      	bhi.n	800dcee <etharp_output_to_arp_index+0x32>
 800dce0:	4b40      	ldr	r3, [pc, #256]	; (800dde4 <etharp_output_to_arp_index+0x128>)
 800dce2:	f240 22ef 	movw	r2, #751	; 0x2ef
 800dce6:	4940      	ldr	r1, [pc, #256]	; (800dde8 <etharp_output_to_arp_index+0x12c>)
 800dce8:	4840      	ldr	r0, [pc, #256]	; (800ddec <etharp_output_to_arp_index+0x130>)
 800dcea:	f001 ff53 	bl	800fb94 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800dcee:	79fa      	ldrb	r2, [r7, #7]
 800dcf0:	493b      	ldr	r1, [pc, #236]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dcf2:	4613      	mov	r3, r2
 800dcf4:	005b      	lsls	r3, r3, #1
 800dcf6:	4413      	add	r3, r2
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	440b      	add	r3, r1
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	781b      	ldrb	r3, [r3, #0]
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d153      	bne.n	800ddac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800dd04:	79fa      	ldrb	r2, [r7, #7]
 800dd06:	4936      	ldr	r1, [pc, #216]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd08:	4613      	mov	r3, r2
 800dd0a:	005b      	lsls	r3, r3, #1
 800dd0c:	4413      	add	r3, r2
 800dd0e:	00db      	lsls	r3, r3, #3
 800dd10:	440b      	add	r3, r1
 800dd12:	3312      	adds	r3, #18
 800dd14:	881b      	ldrh	r3, [r3, #0]
 800dd16:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800dd1a:	d919      	bls.n	800dd50 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800dd1c:	79fa      	ldrb	r2, [r7, #7]
 800dd1e:	4613      	mov	r3, r2
 800dd20:	005b      	lsls	r3, r3, #1
 800dd22:	4413      	add	r3, r2
 800dd24:	00db      	lsls	r3, r3, #3
 800dd26:	4a2e      	ldr	r2, [pc, #184]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd28:	4413      	add	r3, r2
 800dd2a:	3304      	adds	r3, #4
 800dd2c:	4619      	mov	r1, r3
 800dd2e:	68f8      	ldr	r0, [r7, #12]
 800dd30:	f000 fb4c 	bl	800e3cc <etharp_request>
 800dd34:	4603      	mov	r3, r0
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d138      	bne.n	800ddac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dd3a:	79fa      	ldrb	r2, [r7, #7]
 800dd3c:	4928      	ldr	r1, [pc, #160]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd3e:	4613      	mov	r3, r2
 800dd40:	005b      	lsls	r3, r3, #1
 800dd42:	4413      	add	r3, r2
 800dd44:	00db      	lsls	r3, r3, #3
 800dd46:	440b      	add	r3, r1
 800dd48:	3314      	adds	r3, #20
 800dd4a:	2203      	movs	r2, #3
 800dd4c:	701a      	strb	r2, [r3, #0]
 800dd4e:	e02d      	b.n	800ddac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800dd50:	79fa      	ldrb	r2, [r7, #7]
 800dd52:	4923      	ldr	r1, [pc, #140]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd54:	4613      	mov	r3, r2
 800dd56:	005b      	lsls	r3, r3, #1
 800dd58:	4413      	add	r3, r2
 800dd5a:	00db      	lsls	r3, r3, #3
 800dd5c:	440b      	add	r3, r1
 800dd5e:	3312      	adds	r3, #18
 800dd60:	881b      	ldrh	r3, [r3, #0]
 800dd62:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800dd66:	d321      	bcc.n	800ddac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800dd68:	79fa      	ldrb	r2, [r7, #7]
 800dd6a:	4613      	mov	r3, r2
 800dd6c:	005b      	lsls	r3, r3, #1
 800dd6e:	4413      	add	r3, r2
 800dd70:	00db      	lsls	r3, r3, #3
 800dd72:	4a1b      	ldr	r2, [pc, #108]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd74:	4413      	add	r3, r2
 800dd76:	1d19      	adds	r1, r3, #4
 800dd78:	79fa      	ldrb	r2, [r7, #7]
 800dd7a:	4613      	mov	r3, r2
 800dd7c:	005b      	lsls	r3, r3, #1
 800dd7e:	4413      	add	r3, r2
 800dd80:	00db      	lsls	r3, r3, #3
 800dd82:	3308      	adds	r3, #8
 800dd84:	4a16      	ldr	r2, [pc, #88]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd86:	4413      	add	r3, r2
 800dd88:	3304      	adds	r3, #4
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	68f8      	ldr	r0, [r7, #12]
 800dd8e:	f000 fafb 	bl	800e388 <etharp_request_dst>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d109      	bne.n	800ddac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800dd98:	79fa      	ldrb	r2, [r7, #7]
 800dd9a:	4911      	ldr	r1, [pc, #68]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800dd9c:	4613      	mov	r3, r2
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	4413      	add	r3, r2
 800dda2:	00db      	lsls	r3, r3, #3
 800dda4:	440b      	add	r3, r1
 800dda6:	3314      	adds	r3, #20
 800dda8:	2203      	movs	r2, #3
 800ddaa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800ddb2:	79fa      	ldrb	r2, [r7, #7]
 800ddb4:	4613      	mov	r3, r2
 800ddb6:	005b      	lsls	r3, r3, #1
 800ddb8:	4413      	add	r3, r2
 800ddba:	00db      	lsls	r3, r3, #3
 800ddbc:	3308      	adds	r3, #8
 800ddbe:	4a08      	ldr	r2, [pc, #32]	; (800dde0 <etharp_output_to_arp_index+0x124>)
 800ddc0:	4413      	add	r3, r2
 800ddc2:	1d1a      	adds	r2, r3, #4
 800ddc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ddc8:	9300      	str	r3, [sp, #0]
 800ddca:	4613      	mov	r3, r2
 800ddcc:	460a      	mov	r2, r1
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	68f8      	ldr	r0, [r7, #12]
 800ddd2:	f001 fe51 	bl	800fa78 <ethernet_output>
 800ddd6:	4603      	mov	r3, r0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	200005a8 	.word	0x200005a8
 800dde4:	08013164 	.word	0x08013164
 800dde8:	080132d4 	.word	0x080132d4
 800ddec:	080131dc 	.word	0x080131dc

0800ddf0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800ddf0:	b580      	push	{r7, lr}
 800ddf2:	b08a      	sub	sp, #40	; 0x28
 800ddf4:	af02      	add	r7, sp, #8
 800ddf6:	60f8      	str	r0, [r7, #12]
 800ddf8:	60b9      	str	r1, [r7, #8]
 800ddfa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d106      	bne.n	800de14 <etharp_output+0x24>
 800de06:	4b73      	ldr	r3, [pc, #460]	; (800dfd4 <etharp_output+0x1e4>)
 800de08:	f240 321e 	movw	r2, #798	; 0x31e
 800de0c:	4972      	ldr	r1, [pc, #456]	; (800dfd8 <etharp_output+0x1e8>)
 800de0e:	4873      	ldr	r0, [pc, #460]	; (800dfdc <etharp_output+0x1ec>)
 800de10:	f001 fec0 	bl	800fb94 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d106      	bne.n	800de28 <etharp_output+0x38>
 800de1a:	4b6e      	ldr	r3, [pc, #440]	; (800dfd4 <etharp_output+0x1e4>)
 800de1c:	f240 321f 	movw	r2, #799	; 0x31f
 800de20:	496f      	ldr	r1, [pc, #444]	; (800dfe0 <etharp_output+0x1f0>)
 800de22:	486e      	ldr	r0, [pc, #440]	; (800dfdc <etharp_output+0x1ec>)
 800de24:	f001 feb6 	bl	800fb94 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d106      	bne.n	800de3c <etharp_output+0x4c>
 800de2e:	4b69      	ldr	r3, [pc, #420]	; (800dfd4 <etharp_output+0x1e4>)
 800de30:	f44f 7248 	mov.w	r2, #800	; 0x320
 800de34:	496b      	ldr	r1, [pc, #428]	; (800dfe4 <etharp_output+0x1f4>)
 800de36:	4869      	ldr	r0, [pc, #420]	; (800dfdc <etharp_output+0x1ec>)
 800de38:	f001 feac 	bl	800fb94 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68f9      	ldr	r1, [r7, #12]
 800de42:	4618      	mov	r0, r3
 800de44:	f000 ff14 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800de48:	4603      	mov	r3, r0
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d002      	beq.n	800de54 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800de4e:	4b66      	ldr	r3, [pc, #408]	; (800dfe8 <etharp_output+0x1f8>)
 800de50:	61fb      	str	r3, [r7, #28]
 800de52:	e0af      	b.n	800dfb4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de5c:	2be0      	cmp	r3, #224	; 0xe0
 800de5e:	d118      	bne.n	800de92 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800de60:	2301      	movs	r3, #1
 800de62:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800de64:	2300      	movs	r3, #0
 800de66:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800de68:	235e      	movs	r3, #94	; 0x5e
 800de6a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	3301      	adds	r3, #1
 800de70:	781b      	ldrb	r3, [r3, #0]
 800de72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800de76:	b2db      	uxtb	r3, r3
 800de78:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	3302      	adds	r3, #2
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	3303      	adds	r3, #3
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800de8a:	f107 0310 	add.w	r3, r7, #16
 800de8e:	61fb      	str	r3, [r7, #28]
 800de90:	e090      	b.n	800dfb4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681a      	ldr	r2, [r3, #0]
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	3304      	adds	r3, #4
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	405a      	eors	r2, r3
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3308      	adds	r3, #8
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4013      	ands	r3, r2
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d012      	beq.n	800ded0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800deb0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d00b      	beq.n	800ded0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	330c      	adds	r3, #12
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d003      	beq.n	800deca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	330c      	adds	r3, #12
 800dec6:	61bb      	str	r3, [r7, #24]
 800dec8:	e002      	b.n	800ded0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800deca:	f06f 0303 	mvn.w	r3, #3
 800dece:	e07d      	b.n	800dfcc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800ded0:	4b46      	ldr	r3, [pc, #280]	; (800dfec <etharp_output+0x1fc>)
 800ded2:	781b      	ldrb	r3, [r3, #0]
 800ded4:	4619      	mov	r1, r3
 800ded6:	4a46      	ldr	r2, [pc, #280]	; (800dff0 <etharp_output+0x200>)
 800ded8:	460b      	mov	r3, r1
 800deda:	005b      	lsls	r3, r3, #1
 800dedc:	440b      	add	r3, r1
 800dede:	00db      	lsls	r3, r3, #3
 800dee0:	4413      	add	r3, r2
 800dee2:	3314      	adds	r3, #20
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	2b01      	cmp	r3, #1
 800dee8:	d925      	bls.n	800df36 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800deea:	4b40      	ldr	r3, [pc, #256]	; (800dfec <etharp_output+0x1fc>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	4619      	mov	r1, r3
 800def0:	4a3f      	ldr	r2, [pc, #252]	; (800dff0 <etharp_output+0x200>)
 800def2:	460b      	mov	r3, r1
 800def4:	005b      	lsls	r3, r3, #1
 800def6:	440b      	add	r3, r1
 800def8:	00db      	lsls	r3, r3, #3
 800defa:	4413      	add	r3, r2
 800defc:	3308      	adds	r3, #8
 800defe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800df00:	68fa      	ldr	r2, [r7, #12]
 800df02:	429a      	cmp	r2, r3
 800df04:	d117      	bne.n	800df36 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800df06:	69bb      	ldr	r3, [r7, #24]
 800df08:	681a      	ldr	r2, [r3, #0]
 800df0a:	4b38      	ldr	r3, [pc, #224]	; (800dfec <etharp_output+0x1fc>)
 800df0c:	781b      	ldrb	r3, [r3, #0]
 800df0e:	4618      	mov	r0, r3
 800df10:	4937      	ldr	r1, [pc, #220]	; (800dff0 <etharp_output+0x200>)
 800df12:	4603      	mov	r3, r0
 800df14:	005b      	lsls	r3, r3, #1
 800df16:	4403      	add	r3, r0
 800df18:	00db      	lsls	r3, r3, #3
 800df1a:	440b      	add	r3, r1
 800df1c:	3304      	adds	r3, #4
 800df1e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800df20:	429a      	cmp	r2, r3
 800df22:	d108      	bne.n	800df36 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800df24:	4b31      	ldr	r3, [pc, #196]	; (800dfec <etharp_output+0x1fc>)
 800df26:	781b      	ldrb	r3, [r3, #0]
 800df28:	461a      	mov	r2, r3
 800df2a:	68b9      	ldr	r1, [r7, #8]
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f7ff fec5 	bl	800dcbc <etharp_output_to_arp_index>
 800df32:	4603      	mov	r3, r0
 800df34:	e04a      	b.n	800dfcc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800df36:	2300      	movs	r3, #0
 800df38:	75fb      	strb	r3, [r7, #23]
 800df3a:	e031      	b.n	800dfa0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800df3c:	7dfa      	ldrb	r2, [r7, #23]
 800df3e:	492c      	ldr	r1, [pc, #176]	; (800dff0 <etharp_output+0x200>)
 800df40:	4613      	mov	r3, r2
 800df42:	005b      	lsls	r3, r3, #1
 800df44:	4413      	add	r3, r2
 800df46:	00db      	lsls	r3, r3, #3
 800df48:	440b      	add	r3, r1
 800df4a:	3314      	adds	r3, #20
 800df4c:	781b      	ldrb	r3, [r3, #0]
 800df4e:	2b01      	cmp	r3, #1
 800df50:	d923      	bls.n	800df9a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800df52:	7dfa      	ldrb	r2, [r7, #23]
 800df54:	4926      	ldr	r1, [pc, #152]	; (800dff0 <etharp_output+0x200>)
 800df56:	4613      	mov	r3, r2
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	4413      	add	r3, r2
 800df5c:	00db      	lsls	r3, r3, #3
 800df5e:	440b      	add	r3, r1
 800df60:	3308      	adds	r3, #8
 800df62:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800df64:	68fa      	ldr	r2, [r7, #12]
 800df66:	429a      	cmp	r2, r3
 800df68:	d117      	bne.n	800df9a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800df6a:	69bb      	ldr	r3, [r7, #24]
 800df6c:	6819      	ldr	r1, [r3, #0]
 800df6e:	7dfa      	ldrb	r2, [r7, #23]
 800df70:	481f      	ldr	r0, [pc, #124]	; (800dff0 <etharp_output+0x200>)
 800df72:	4613      	mov	r3, r2
 800df74:	005b      	lsls	r3, r3, #1
 800df76:	4413      	add	r3, r2
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	4403      	add	r3, r0
 800df7c:	3304      	adds	r3, #4
 800df7e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800df80:	4299      	cmp	r1, r3
 800df82:	d10a      	bne.n	800df9a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800df84:	4a19      	ldr	r2, [pc, #100]	; (800dfec <etharp_output+0x1fc>)
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800df8a:	7dfb      	ldrb	r3, [r7, #23]
 800df8c:	461a      	mov	r2, r3
 800df8e:	68b9      	ldr	r1, [r7, #8]
 800df90:	68f8      	ldr	r0, [r7, #12]
 800df92:	f7ff fe93 	bl	800dcbc <etharp_output_to_arp_index>
 800df96:	4603      	mov	r3, r0
 800df98:	e018      	b.n	800dfcc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800df9a:	7dfb      	ldrb	r3, [r7, #23]
 800df9c:	3301      	adds	r3, #1
 800df9e:	75fb      	strb	r3, [r7, #23]
 800dfa0:	7dfb      	ldrb	r3, [r7, #23]
 800dfa2:	2b09      	cmp	r3, #9
 800dfa4:	d9ca      	bls.n	800df3c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800dfa6:	68ba      	ldr	r2, [r7, #8]
 800dfa8:	69b9      	ldr	r1, [r7, #24]
 800dfaa:	68f8      	ldr	r0, [r7, #12]
 800dfac:	f000 f822 	bl	800dff4 <etharp_query>
 800dfb0:	4603      	mov	r3, r0
 800dfb2:	e00b      	b.n	800dfcc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800dfba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800dfbe:	9300      	str	r3, [sp, #0]
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	68b9      	ldr	r1, [r7, #8]
 800dfc4:	68f8      	ldr	r0, [r7, #12]
 800dfc6:	f001 fd57 	bl	800fa78 <ethernet_output>
 800dfca:	4603      	mov	r3, r0
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	3720      	adds	r7, #32
 800dfd0:	46bd      	mov	sp, r7
 800dfd2:	bd80      	pop	{r7, pc}
 800dfd4:	08013164 	.word	0x08013164
 800dfd8:	080132b4 	.word	0x080132b4
 800dfdc:	080131dc 	.word	0x080131dc
 800dfe0:	08013304 	.word	0x08013304
 800dfe4:	080132a4 	.word	0x080132a4
 800dfe8:	08013928 	.word	0x08013928
 800dfec:	20000698 	.word	0x20000698
 800dff0:	200005a8 	.word	0x200005a8

0800dff4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b08c      	sub	sp, #48	; 0x30
 800dff8:	af02      	add	r7, sp, #8
 800dffa:	60f8      	str	r0, [r7, #12]
 800dffc:	60b9      	str	r1, [r7, #8]
 800dffe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	332a      	adds	r3, #42	; 0x2a
 800e004:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800e006:	23ff      	movs	r3, #255	; 0xff
 800e008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800e00c:	2300      	movs	r3, #0
 800e00e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68f9      	ldr	r1, [r7, #12]
 800e016:	4618      	mov	r0, r3
 800e018:	f000 fe2a 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800e01c:	4603      	mov	r3, r0
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d10c      	bne.n	800e03c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e022:	68bb      	ldr	r3, [r7, #8]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800e02a:	2be0      	cmp	r3, #224	; 0xe0
 800e02c:	d006      	beq.n	800e03c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800e02e:	68bb      	ldr	r3, [r7, #8]
 800e030:	2b00      	cmp	r3, #0
 800e032:	d003      	beq.n	800e03c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d102      	bne.n	800e042 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800e03c:	f06f 030f 	mvn.w	r3, #15
 800e040:	e102      	b.n	800e248 <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800e042:	68fa      	ldr	r2, [r7, #12]
 800e044:	2101      	movs	r1, #1
 800e046:	68b8      	ldr	r0, [r7, #8]
 800e048:	f7ff fb5c 	bl	800d704 <etharp_find_entry>
 800e04c:	4603      	mov	r3, r0
 800e04e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800e050:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e054:	2b00      	cmp	r3, #0
 800e056:	da02      	bge.n	800e05e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800e058:	8a7b      	ldrh	r3, [r7, #18]
 800e05a:	b25b      	sxtb	r3, r3
 800e05c:	e0f4      	b.n	800e248 <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800e05e:	8a7b      	ldrh	r3, [r7, #18]
 800e060:	2b7e      	cmp	r3, #126	; 0x7e
 800e062:	d906      	bls.n	800e072 <etharp_query+0x7e>
 800e064:	4b7a      	ldr	r3, [pc, #488]	; (800e250 <etharp_query+0x25c>)
 800e066:	f240 32c1 	movw	r2, #961	; 0x3c1
 800e06a:	497a      	ldr	r1, [pc, #488]	; (800e254 <etharp_query+0x260>)
 800e06c:	487a      	ldr	r0, [pc, #488]	; (800e258 <etharp_query+0x264>)
 800e06e:	f001 fd91 	bl	800fb94 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800e072:	8a7b      	ldrh	r3, [r7, #18]
 800e074:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800e076:	7c7a      	ldrb	r2, [r7, #17]
 800e078:	4978      	ldr	r1, [pc, #480]	; (800e25c <etharp_query+0x268>)
 800e07a:	4613      	mov	r3, r2
 800e07c:	005b      	lsls	r3, r3, #1
 800e07e:	4413      	add	r3, r2
 800e080:	00db      	lsls	r3, r3, #3
 800e082:	440b      	add	r3, r1
 800e084:	3314      	adds	r3, #20
 800e086:	781b      	ldrb	r3, [r3, #0]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d115      	bne.n	800e0b8 <etharp_query+0xc4>
    is_new_entry = 1;
 800e08c:	2301      	movs	r3, #1
 800e08e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800e090:	7c7a      	ldrb	r2, [r7, #17]
 800e092:	4972      	ldr	r1, [pc, #456]	; (800e25c <etharp_query+0x268>)
 800e094:	4613      	mov	r3, r2
 800e096:	005b      	lsls	r3, r3, #1
 800e098:	4413      	add	r3, r2
 800e09a:	00db      	lsls	r3, r3, #3
 800e09c:	440b      	add	r3, r1
 800e09e:	3314      	adds	r3, #20
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800e0a4:	7c7a      	ldrb	r2, [r7, #17]
 800e0a6:	496d      	ldr	r1, [pc, #436]	; (800e25c <etharp_query+0x268>)
 800e0a8:	4613      	mov	r3, r2
 800e0aa:	005b      	lsls	r3, r3, #1
 800e0ac:	4413      	add	r3, r2
 800e0ae:	00db      	lsls	r3, r3, #3
 800e0b0:	440b      	add	r3, r1
 800e0b2:	3308      	adds	r3, #8
 800e0b4:	68fa      	ldr	r2, [r7, #12]
 800e0b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800e0b8:	7c7a      	ldrb	r2, [r7, #17]
 800e0ba:	4968      	ldr	r1, [pc, #416]	; (800e25c <etharp_query+0x268>)
 800e0bc:	4613      	mov	r3, r2
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	4413      	add	r3, r2
 800e0c2:	00db      	lsls	r3, r3, #3
 800e0c4:	440b      	add	r3, r1
 800e0c6:	3314      	adds	r3, #20
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	2b01      	cmp	r3, #1
 800e0cc:	d011      	beq.n	800e0f2 <etharp_query+0xfe>
 800e0ce:	7c7a      	ldrb	r2, [r7, #17]
 800e0d0:	4962      	ldr	r1, [pc, #392]	; (800e25c <etharp_query+0x268>)
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	4413      	add	r3, r2
 800e0d8:	00db      	lsls	r3, r3, #3
 800e0da:	440b      	add	r3, r1
 800e0dc:	3314      	adds	r3, #20
 800e0de:	781b      	ldrb	r3, [r3, #0]
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	d806      	bhi.n	800e0f2 <etharp_query+0xfe>
 800e0e4:	4b5a      	ldr	r3, [pc, #360]	; (800e250 <etharp_query+0x25c>)
 800e0e6:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e0ea:	495d      	ldr	r1, [pc, #372]	; (800e260 <etharp_query+0x26c>)
 800e0ec:	485a      	ldr	r0, [pc, #360]	; (800e258 <etharp_query+0x264>)
 800e0ee:	f001 fd51 	bl	800fb94 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800e0f2:	6a3b      	ldr	r3, [r7, #32]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d102      	bne.n	800e0fe <etharp_query+0x10a>
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10c      	bne.n	800e118 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800e0fe:	68b9      	ldr	r1, [r7, #8]
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f000 f963 	bl	800e3cc <etharp_request>
 800e106:	4603      	mov	r3, r0
 800e108:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d102      	bne.n	800e118 <etharp_query+0x124>
      return result;
 800e112:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e116:	e097      	b.n	800e248 <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d106      	bne.n	800e12c <etharp_query+0x138>
 800e11e:	4b4c      	ldr	r3, [pc, #304]	; (800e250 <etharp_query+0x25c>)
 800e120:	f240 32e1 	movw	r2, #993	; 0x3e1
 800e124:	494f      	ldr	r1, [pc, #316]	; (800e264 <etharp_query+0x270>)
 800e126:	484c      	ldr	r0, [pc, #304]	; (800e258 <etharp_query+0x264>)
 800e128:	f001 fd34 	bl	800fb94 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800e12c:	7c7a      	ldrb	r2, [r7, #17]
 800e12e:	494b      	ldr	r1, [pc, #300]	; (800e25c <etharp_query+0x268>)
 800e130:	4613      	mov	r3, r2
 800e132:	005b      	lsls	r3, r3, #1
 800e134:	4413      	add	r3, r2
 800e136:	00db      	lsls	r3, r3, #3
 800e138:	440b      	add	r3, r1
 800e13a:	3314      	adds	r3, #20
 800e13c:	781b      	ldrb	r3, [r3, #0]
 800e13e:	2b01      	cmp	r3, #1
 800e140:	d918      	bls.n	800e174 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800e142:	4a49      	ldr	r2, [pc, #292]	; (800e268 <etharp_query+0x274>)
 800e144:	7c7b      	ldrb	r3, [r7, #17]
 800e146:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800e148:	7c7a      	ldrb	r2, [r7, #17]
 800e14a:	4613      	mov	r3, r2
 800e14c:	005b      	lsls	r3, r3, #1
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	3308      	adds	r3, #8
 800e154:	4a41      	ldr	r2, [pc, #260]	; (800e25c <etharp_query+0x268>)
 800e156:	4413      	add	r3, r2
 800e158:	1d1a      	adds	r2, r3, #4
 800e15a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e15e:	9300      	str	r3, [sp, #0]
 800e160:	4613      	mov	r3, r2
 800e162:	697a      	ldr	r2, [r7, #20]
 800e164:	6879      	ldr	r1, [r7, #4]
 800e166:	68f8      	ldr	r0, [r7, #12]
 800e168:	f001 fc86 	bl	800fa78 <ethernet_output>
 800e16c:	4603      	mov	r3, r0
 800e16e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e172:	e067      	b.n	800e244 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e174:	7c7a      	ldrb	r2, [r7, #17]
 800e176:	4939      	ldr	r1, [pc, #228]	; (800e25c <etharp_query+0x268>)
 800e178:	4613      	mov	r3, r2
 800e17a:	005b      	lsls	r3, r3, #1
 800e17c:	4413      	add	r3, r2
 800e17e:	00db      	lsls	r3, r3, #3
 800e180:	440b      	add	r3, r1
 800e182:	3314      	adds	r3, #20
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	2b01      	cmp	r3, #1
 800e188:	d15c      	bne.n	800e244 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800e18a:	2300      	movs	r3, #0
 800e18c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e192:	e01c      	b.n	800e1ce <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800e194:	69fb      	ldr	r3, [r7, #28]
 800e196:	895a      	ldrh	r2, [r3, #10]
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	891b      	ldrh	r3, [r3, #8]
 800e19c:	429a      	cmp	r2, r3
 800e19e:	d10a      	bne.n	800e1b6 <etharp_query+0x1c2>
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d006      	beq.n	800e1b6 <etharp_query+0x1c2>
 800e1a8:	4b29      	ldr	r3, [pc, #164]	; (800e250 <etharp_query+0x25c>)
 800e1aa:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e1ae:	492f      	ldr	r1, [pc, #188]	; (800e26c <etharp_query+0x278>)
 800e1b0:	4829      	ldr	r0, [pc, #164]	; (800e258 <etharp_query+0x264>)
 800e1b2:	f001 fcef 	bl	800fb94 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800e1b6:	69fb      	ldr	r3, [r7, #28]
 800e1b8:	7b1b      	ldrb	r3, [r3, #12]
 800e1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d002      	beq.n	800e1c8 <etharp_query+0x1d4>
        copy_needed = 1;
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	61bb      	str	r3, [r7, #24]
        break;
 800e1c6:	e005      	b.n	800e1d4 <etharp_query+0x1e0>
      }
      p = p->next;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	61fb      	str	r3, [r7, #28]
    while (p) {
 800e1ce:	69fb      	ldr	r3, [r7, #28]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d1df      	bne.n	800e194 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d007      	beq.n	800e1ea <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800e1da:	687a      	ldr	r2, [r7, #4]
 800e1dc:	f44f 7120 	mov.w	r1, #640	; 0x280
 800e1e0:	200e      	movs	r0, #14
 800e1e2:	f7f7 fab5 	bl	8005750 <pbuf_clone>
 800e1e6:	61f8      	str	r0, [r7, #28]
 800e1e8:	e004      	b.n	800e1f4 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800e1ee:	69f8      	ldr	r0, [r7, #28]
 800e1f0:	f7f6 ffaa 	bl	8005148 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800e1f4:	69fb      	ldr	r3, [r7, #28]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d021      	beq.n	800e23e <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800e1fa:	7c7a      	ldrb	r2, [r7, #17]
 800e1fc:	4917      	ldr	r1, [pc, #92]	; (800e25c <etharp_query+0x268>)
 800e1fe:	4613      	mov	r3, r2
 800e200:	005b      	lsls	r3, r3, #1
 800e202:	4413      	add	r3, r2
 800e204:	00db      	lsls	r3, r3, #3
 800e206:	440b      	add	r3, r1
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d00a      	beq.n	800e224 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800e20e:	7c7a      	ldrb	r2, [r7, #17]
 800e210:	4912      	ldr	r1, [pc, #72]	; (800e25c <etharp_query+0x268>)
 800e212:	4613      	mov	r3, r2
 800e214:	005b      	lsls	r3, r3, #1
 800e216:	4413      	add	r3, r2
 800e218:	00db      	lsls	r3, r3, #3
 800e21a:	440b      	add	r3, r1
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4618      	mov	r0, r3
 800e220:	f7f6 fef2 	bl	8005008 <pbuf_free>
      }
      arp_table[i].q = p;
 800e224:	7c7a      	ldrb	r2, [r7, #17]
 800e226:	490d      	ldr	r1, [pc, #52]	; (800e25c <etharp_query+0x268>)
 800e228:	4613      	mov	r3, r2
 800e22a:	005b      	lsls	r3, r3, #1
 800e22c:	4413      	add	r3, r2
 800e22e:	00db      	lsls	r3, r3, #3
 800e230:	440b      	add	r3, r1
 800e232:	69fa      	ldr	r2, [r7, #28]
 800e234:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800e236:	2300      	movs	r3, #0
 800e238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e23c:	e002      	b.n	800e244 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800e23e:	23ff      	movs	r3, #255	; 0xff
 800e240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800e244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3728      	adds	r7, #40	; 0x28
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}
 800e250:	08013164 	.word	0x08013164
 800e254:	08013310 	.word	0x08013310
 800e258:	080131dc 	.word	0x080131dc
 800e25c:	200005a8 	.word	0x200005a8
 800e260:	08013320 	.word	0x08013320
 800e264:	08013304 	.word	0x08013304
 800e268:	20000698 	.word	0x20000698
 800e26c:	08013348 	.word	0x08013348

0800e270 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b08a      	sub	sp, #40	; 0x28
 800e274:	af02      	add	r7, sp, #8
 800e276:	60f8      	str	r0, [r7, #12]
 800e278:	60b9      	str	r1, [r7, #8]
 800e27a:	607a      	str	r2, [r7, #4]
 800e27c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800e27e:	2300      	movs	r3, #0
 800e280:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d106      	bne.n	800e296 <etharp_raw+0x26>
 800e288:	4b3a      	ldr	r3, [pc, #232]	; (800e374 <etharp_raw+0x104>)
 800e28a:	f240 4257 	movw	r2, #1111	; 0x457
 800e28e:	493a      	ldr	r1, [pc, #232]	; (800e378 <etharp_raw+0x108>)
 800e290:	483a      	ldr	r0, [pc, #232]	; (800e37c <etharp_raw+0x10c>)
 800e292:	f001 fc7f 	bl	800fb94 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800e296:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e29a:	211c      	movs	r1, #28
 800e29c:	200e      	movs	r0, #14
 800e29e:	f7f6 fbd3 	bl	8004a48 <pbuf_alloc>
 800e2a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800e2a4:	69bb      	ldr	r3, [r7, #24]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d102      	bne.n	800e2b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800e2aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ae:	e05d      	b.n	800e36c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800e2b0:	69bb      	ldr	r3, [r7, #24]
 800e2b2:	895b      	ldrh	r3, [r3, #10]
 800e2b4:	2b1b      	cmp	r3, #27
 800e2b6:	d806      	bhi.n	800e2c6 <etharp_raw+0x56>
 800e2b8:	4b2e      	ldr	r3, [pc, #184]	; (800e374 <etharp_raw+0x104>)
 800e2ba:	f240 4263 	movw	r2, #1123	; 0x463
 800e2be:	4930      	ldr	r1, [pc, #192]	; (800e380 <etharp_raw+0x110>)
 800e2c0:	482e      	ldr	r0, [pc, #184]	; (800e37c <etharp_raw+0x10c>)
 800e2c2:	f001 fc67 	bl	800fb94 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800e2c6:	69bb      	ldr	r3, [r7, #24]
 800e2c8:	685b      	ldr	r3, [r3, #4]
 800e2ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800e2cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7f5 f88a 	bl	80033e8 <lwip_htons>
 800e2d4:	4603      	mov	r3, r0
 800e2d6:	461a      	mov	r2, r3
 800e2d8:	697b      	ldr	r3, [r7, #20]
 800e2da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2e2:	2b06      	cmp	r3, #6
 800e2e4:	d006      	beq.n	800e2f4 <etharp_raw+0x84>
 800e2e6:	4b23      	ldr	r3, [pc, #140]	; (800e374 <etharp_raw+0x104>)
 800e2e8:	f240 426a 	movw	r2, #1130	; 0x46a
 800e2ec:	4925      	ldr	r1, [pc, #148]	; (800e384 <etharp_raw+0x114>)
 800e2ee:	4823      	ldr	r0, [pc, #140]	; (800e37c <etharp_raw+0x10c>)
 800e2f0:	f001 fc50 	bl	800fb94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3308      	adds	r3, #8
 800e2f8:	2206      	movs	r2, #6
 800e2fa:	6839      	ldr	r1, [r7, #0]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f001 fc36 	bl	800fb6e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	3312      	adds	r3, #18
 800e306:	2206      	movs	r2, #6
 800e308:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e30a:	4618      	mov	r0, r3
 800e30c:	f001 fc2f 	bl	800fb6e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	330e      	adds	r3, #14
 800e314:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e316:	6812      	ldr	r2, [r2, #0]
 800e318:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800e31a:	697b      	ldr	r3, [r7, #20]
 800e31c:	3318      	adds	r3, #24
 800e31e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e320:	6812      	ldr	r2, [r2, #0]
 800e322:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800e324:	697b      	ldr	r3, [r7, #20]
 800e326:	2200      	movs	r2, #0
 800e328:	701a      	strb	r2, [r3, #0]
 800e32a:	2200      	movs	r2, #0
 800e32c:	f042 0201 	orr.w	r2, r2, #1
 800e330:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800e332:	697b      	ldr	r3, [r7, #20]
 800e334:	2200      	movs	r2, #0
 800e336:	f042 0208 	orr.w	r2, r2, #8
 800e33a:	709a      	strb	r2, [r3, #2]
 800e33c:	2200      	movs	r2, #0
 800e33e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	2206      	movs	r2, #6
 800e344:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	2204      	movs	r2, #4
 800e34a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800e34c:	f640 0306 	movw	r3, #2054	; 0x806
 800e350:	9300      	str	r3, [sp, #0]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	68ba      	ldr	r2, [r7, #8]
 800e356:	69b9      	ldr	r1, [r7, #24]
 800e358:	68f8      	ldr	r0, [r7, #12]
 800e35a:	f001 fb8d 	bl	800fa78 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800e35e:	69b8      	ldr	r0, [r7, #24]
 800e360:	f7f6 fe52 	bl	8005008 <pbuf_free>
  p = NULL;
 800e364:	2300      	movs	r3, #0
 800e366:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800e368:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3720      	adds	r7, #32
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}
 800e374:	08013164 	.word	0x08013164
 800e378:	080132b4 	.word	0x080132b4
 800e37c:	080131dc 	.word	0x080131dc
 800e380:	08013364 	.word	0x08013364
 800e384:	08013398 	.word	0x08013398

0800e388 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b088      	sub	sp, #32
 800e38c:	af04      	add	r7, sp, #16
 800e38e:	60f8      	str	r0, [r7, #12]
 800e390:	60b9      	str	r1, [r7, #8]
 800e392:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800e3a4:	2201      	movs	r2, #1
 800e3a6:	9203      	str	r2, [sp, #12]
 800e3a8:	68ba      	ldr	r2, [r7, #8]
 800e3aa:	9202      	str	r2, [sp, #8]
 800e3ac:	4a06      	ldr	r2, [pc, #24]	; (800e3c8 <etharp_request_dst+0x40>)
 800e3ae:	9201      	str	r2, [sp, #4]
 800e3b0:	9300      	str	r3, [sp, #0]
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	68f8      	ldr	r0, [r7, #12]
 800e3b8:	f7ff ff5a 	bl	800e270 <etharp_raw>
 800e3bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800e3be:	4618      	mov	r0, r3
 800e3c0:	3710      	adds	r7, #16
 800e3c2:	46bd      	mov	sp, r7
 800e3c4:	bd80      	pop	{r7, pc}
 800e3c6:	bf00      	nop
 800e3c8:	08013930 	.word	0x08013930

0800e3cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800e3d6:	4a05      	ldr	r2, [pc, #20]	; (800e3ec <etharp_request+0x20>)
 800e3d8:	6839      	ldr	r1, [r7, #0]
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f7ff ffd4 	bl	800e388 <etharp_request_dst>
 800e3e0:	4603      	mov	r3, r0
}
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3708      	adds	r7, #8
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	08013928 	.word	0x08013928

0800e3f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800e3f0:	b580      	push	{r7, lr}
 800e3f2:	b08e      	sub	sp, #56	; 0x38
 800e3f4:	af04      	add	r7, sp, #16
 800e3f6:	6078      	str	r0, [r7, #4]
 800e3f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800e3fa:	4b79      	ldr	r3, [pc, #484]	; (800e5e0 <icmp_input+0x1f0>)
 800e3fc:	689b      	ldr	r3, [r3, #8]
 800e3fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	781b      	ldrb	r3, [r3, #0]
 800e404:	f003 030f 	and.w	r3, r3, #15
 800e408:	b2db      	uxtb	r3, r3
 800e40a:	009b      	lsls	r3, r3, #2
 800e40c:	b2db      	uxtb	r3, r3
 800e40e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800e410:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e412:	2b13      	cmp	r3, #19
 800e414:	f240 80cd 	bls.w	800e5b2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	895b      	ldrh	r3, [r3, #10]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	f240 80ca 	bls.w	800e5b6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	685b      	ldr	r3, [r3, #4]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800e42c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e430:	2b00      	cmp	r3, #0
 800e432:	f000 80b7 	beq.w	800e5a4 <icmp_input+0x1b4>
 800e436:	2b08      	cmp	r3, #8
 800e438:	f040 80b7 	bne.w	800e5aa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800e43c:	4b69      	ldr	r3, [pc, #420]	; (800e5e4 <icmp_input+0x1f4>)
 800e43e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e440:	4b67      	ldr	r3, [pc, #412]	; (800e5e0 <icmp_input+0x1f0>)
 800e442:	695b      	ldr	r3, [r3, #20]
 800e444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e448:	2be0      	cmp	r3, #224	; 0xe0
 800e44a:	f000 80bb 	beq.w	800e5c4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800e44e:	4b64      	ldr	r3, [pc, #400]	; (800e5e0 <icmp_input+0x1f0>)
 800e450:	695a      	ldr	r2, [r3, #20]
 800e452:	4b63      	ldr	r3, [pc, #396]	; (800e5e0 <icmp_input+0x1f0>)
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	4619      	mov	r1, r3
 800e458:	4610      	mov	r0, r2
 800e45a:	f000 fc09 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	f040 80b1 	bne.w	800e5c8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	891b      	ldrh	r3, [r3, #8]
 800e46a:	2b07      	cmp	r3, #7
 800e46c:	f240 80a5 	bls.w	800e5ba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e470:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e472:	330e      	adds	r3, #14
 800e474:	4619      	mov	r1, r3
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7f6 fd30 	bl	8004edc <pbuf_add_header>
 800e47c:	4603      	mov	r3, r0
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d04b      	beq.n	800e51a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	891a      	ldrh	r2, [r3, #8]
 800e486:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e488:	4413      	add	r3, r2
 800e48a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	891b      	ldrh	r3, [r3, #8]
 800e490:	8b7a      	ldrh	r2, [r7, #26]
 800e492:	429a      	cmp	r2, r3
 800e494:	f0c0 809a 	bcc.w	800e5cc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800e498:	8b7b      	ldrh	r3, [r7, #26]
 800e49a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e49e:	4619      	mov	r1, r3
 800e4a0:	200e      	movs	r0, #14
 800e4a2:	f7f6 fad1 	bl	8004a48 <pbuf_alloc>
 800e4a6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	f000 8090 	beq.w	800e5d0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	895b      	ldrh	r3, [r3, #10]
 800e4b4:	461a      	mov	r2, r3
 800e4b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4b8:	3308      	adds	r3, #8
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d203      	bcs.n	800e4c6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800e4be:	6978      	ldr	r0, [r7, #20]
 800e4c0:	f7f6 fda2 	bl	8005008 <pbuf_free>
          goto icmperr;
 800e4c4:	e085      	b.n	800e5d2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	685b      	ldr	r3, [r3, #4]
 800e4ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800e4cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	f001 fb4d 	bl	800fb6e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800e4d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e4d6:	4619      	mov	r1, r3
 800e4d8:	6978      	ldr	r0, [r7, #20]
 800e4da:	f7f6 fd0f 	bl	8004efc <pbuf_remove_header>
 800e4de:	4603      	mov	r3, r0
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d009      	beq.n	800e4f8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800e4e4:	4b40      	ldr	r3, [pc, #256]	; (800e5e8 <icmp_input+0x1f8>)
 800e4e6:	22b6      	movs	r2, #182	; 0xb6
 800e4e8:	4940      	ldr	r1, [pc, #256]	; (800e5ec <icmp_input+0x1fc>)
 800e4ea:	4841      	ldr	r0, [pc, #260]	; (800e5f0 <icmp_input+0x200>)
 800e4ec:	f001 fb52 	bl	800fb94 <iprintf>
          pbuf_free(r);
 800e4f0:	6978      	ldr	r0, [r7, #20]
 800e4f2:	f7f6 fd89 	bl	8005008 <pbuf_free>
          goto icmperr;
 800e4f6:	e06c      	b.n	800e5d2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800e4f8:	6879      	ldr	r1, [r7, #4]
 800e4fa:	6978      	ldr	r0, [r7, #20]
 800e4fc:	f7f6 feac 	bl	8005258 <pbuf_copy>
 800e500:	4603      	mov	r3, r0
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800e506:	6978      	ldr	r0, [r7, #20]
 800e508:	f7f6 fd7e 	bl	8005008 <pbuf_free>
          goto icmperr;
 800e50c:	e061      	b.n	800e5d2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	f7f6 fd7a 	bl	8005008 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	607b      	str	r3, [r7, #4]
 800e518:	e00f      	b.n	800e53a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800e51a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e51c:	330e      	adds	r3, #14
 800e51e:	4619      	mov	r1, r3
 800e520:	6878      	ldr	r0, [r7, #4]
 800e522:	f7f6 fceb 	bl	8004efc <pbuf_remove_header>
 800e526:	4603      	mov	r3, r0
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d006      	beq.n	800e53a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800e52c:	4b2e      	ldr	r3, [pc, #184]	; (800e5e8 <icmp_input+0x1f8>)
 800e52e:	22c7      	movs	r2, #199	; 0xc7
 800e530:	4930      	ldr	r1, [pc, #192]	; (800e5f4 <icmp_input+0x204>)
 800e532:	482f      	ldr	r0, [pc, #188]	; (800e5f0 <icmp_input+0x200>)
 800e534:	f001 fb2e 	bl	800fb94 <iprintf>
          goto icmperr;
 800e538:	e04b      	b.n	800e5d2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	685b      	ldr	r3, [r3, #4]
 800e53e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800e540:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e542:	4619      	mov	r1, r3
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7f6 fcc9 	bl	8004edc <pbuf_add_header>
 800e54a:	4603      	mov	r3, r0
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d12b      	bne.n	800e5a8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	685b      	ldr	r3, [r3, #4]
 800e554:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800e556:	69fb      	ldr	r3, [r7, #28]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800e55e:	4b20      	ldr	r3, [pc, #128]	; (800e5e0 <icmp_input+0x1f0>)
 800e560:	691a      	ldr	r2, [r3, #16]
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	2200      	movs	r2, #0
 800e56a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2200      	movs	r2, #0
 800e570:	709a      	strb	r2, [r3, #2]
 800e572:	2200      	movs	r2, #0
 800e574:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	22ff      	movs	r2, #255	; 0xff
 800e57a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	2200      	movs	r2, #0
 800e580:	729a      	strb	r2, [r3, #10]
 800e582:	2200      	movs	r2, #0
 800e584:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800e586:	683b      	ldr	r3, [r7, #0]
 800e588:	9302      	str	r3, [sp, #8]
 800e58a:	2301      	movs	r3, #1
 800e58c:	9301      	str	r3, [sp, #4]
 800e58e:	2300      	movs	r3, #0
 800e590:	9300      	str	r3, [sp, #0]
 800e592:	23ff      	movs	r3, #255	; 0xff
 800e594:	2200      	movs	r2, #0
 800e596:	69f9      	ldr	r1, [r7, #28]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fa91 	bl	800eac0 <ip4_output_if>
 800e59e:	4603      	mov	r3, r0
 800e5a0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800e5a2:	e001      	b.n	800e5a8 <icmp_input+0x1b8>
      break;
 800e5a4:	bf00      	nop
 800e5a6:	e000      	b.n	800e5aa <icmp_input+0x1ba>
      break;
 800e5a8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f7f6 fd2c 	bl	8005008 <pbuf_free>
  return;
 800e5b0:	e013      	b.n	800e5da <icmp_input+0x1ea>
    goto lenerr;
 800e5b2:	bf00      	nop
 800e5b4:	e002      	b.n	800e5bc <icmp_input+0x1cc>
    goto lenerr;
 800e5b6:	bf00      	nop
 800e5b8:	e000      	b.n	800e5bc <icmp_input+0x1cc>
        goto lenerr;
 800e5ba:	bf00      	nop
lenerr:
  pbuf_free(p);
 800e5bc:	6878      	ldr	r0, [r7, #4]
 800e5be:	f7f6 fd23 	bl	8005008 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e5c2:	e00a      	b.n	800e5da <icmp_input+0x1ea>
        goto icmperr;
 800e5c4:	bf00      	nop
 800e5c6:	e004      	b.n	800e5d2 <icmp_input+0x1e2>
        goto icmperr;
 800e5c8:	bf00      	nop
 800e5ca:	e002      	b.n	800e5d2 <icmp_input+0x1e2>
          goto icmperr;
 800e5cc:	bf00      	nop
 800e5ce:	e000      	b.n	800e5d2 <icmp_input+0x1e2>
          goto icmperr;
 800e5d0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7f6 fd18 	bl	8005008 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800e5d8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800e5da:	3728      	adds	r7, #40	; 0x28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}
 800e5e0:	200037dc 	.word	0x200037dc
 800e5e4:	200037f0 	.word	0x200037f0
 800e5e8:	080133dc 	.word	0x080133dc
 800e5ec:	08013414 	.word	0x08013414
 800e5f0:	0801344c 	.word	0x0801344c
 800e5f4:	08013474 	.word	0x08013474

0800e5f8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	b082      	sub	sp, #8
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	460b      	mov	r3, r1
 800e602:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800e604:	78fb      	ldrb	r3, [r7, #3]
 800e606:	461a      	mov	r2, r3
 800e608:	2103      	movs	r1, #3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f814 	bl	800e638 <icmp_send_response>
}
 800e610:	bf00      	nop
 800e612:	3708      	adds	r7, #8
 800e614:	46bd      	mov	sp, r7
 800e616:	bd80      	pop	{r7, pc}

0800e618 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b082      	sub	sp, #8
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	6078      	str	r0, [r7, #4]
 800e620:	460b      	mov	r3, r1
 800e622:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	461a      	mov	r2, r3
 800e628:	210b      	movs	r1, #11
 800e62a:	6878      	ldr	r0, [r7, #4]
 800e62c:	f000 f804 	bl	800e638 <icmp_send_response>
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b08c      	sub	sp, #48	; 0x30
 800e63c:	af04      	add	r7, sp, #16
 800e63e:	6078      	str	r0, [r7, #4]
 800e640:	460b      	mov	r3, r1
 800e642:	70fb      	strb	r3, [r7, #3]
 800e644:	4613      	mov	r3, r2
 800e646:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800e648:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e64c:	2124      	movs	r1, #36	; 0x24
 800e64e:	2022      	movs	r0, #34	; 0x22
 800e650:	f7f6 f9fa 	bl	8004a48 <pbuf_alloc>
 800e654:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d04c      	beq.n	800e6f6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	895b      	ldrh	r3, [r3, #10]
 800e660:	2b23      	cmp	r3, #35	; 0x23
 800e662:	d806      	bhi.n	800e672 <icmp_send_response+0x3a>
 800e664:	4b26      	ldr	r3, [pc, #152]	; (800e700 <icmp_send_response+0xc8>)
 800e666:	f240 1269 	movw	r2, #361	; 0x169
 800e66a:	4926      	ldr	r1, [pc, #152]	; (800e704 <icmp_send_response+0xcc>)
 800e66c:	4826      	ldr	r0, [pc, #152]	; (800e708 <icmp_send_response+0xd0>)
 800e66e:	f001 fa91 	bl	800fb94 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	685b      	ldr	r3, [r3, #4]
 800e676:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800e678:	69fb      	ldr	r3, [r7, #28]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800e67e:	697b      	ldr	r3, [r7, #20]
 800e680:	78fa      	ldrb	r2, [r7, #3]
 800e682:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	78ba      	ldrb	r2, [r7, #2]
 800e688:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800e68a:	697b      	ldr	r3, [r7, #20]
 800e68c:	2200      	movs	r2, #0
 800e68e:	711a      	strb	r2, [r3, #4]
 800e690:	2200      	movs	r2, #0
 800e692:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	2200      	movs	r2, #0
 800e698:	719a      	strb	r2, [r3, #6]
 800e69a:	2200      	movs	r2, #0
 800e69c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800e69e:	69fb      	ldr	r3, [r7, #28]
 800e6a0:	685b      	ldr	r3, [r3, #4]
 800e6a2:	f103 0008 	add.w	r0, r3, #8
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	685b      	ldr	r3, [r3, #4]
 800e6aa:	221c      	movs	r2, #28
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	f001 fa5e 	bl	800fb6e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800e6b2:	69bb      	ldr	r3, [r7, #24]
 800e6b4:	68db      	ldr	r3, [r3, #12]
 800e6b6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800e6b8:	f107 030c 	add.w	r3, r7, #12
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f000 f825 	bl	800e70c <ip4_route>
 800e6c2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d011      	beq.n	800e6ee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2200      	movs	r2, #0
 800e6ce:	709a      	strb	r2, [r3, #2]
 800e6d0:	2200      	movs	r2, #0
 800e6d2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800e6d4:	f107 020c 	add.w	r2, r7, #12
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	9302      	str	r3, [sp, #8]
 800e6dc:	2301      	movs	r3, #1
 800e6de:	9301      	str	r3, [sp, #4]
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	9300      	str	r3, [sp, #0]
 800e6e4:	23ff      	movs	r3, #255	; 0xff
 800e6e6:	2100      	movs	r1, #0
 800e6e8:	69f8      	ldr	r0, [r7, #28]
 800e6ea:	f000 f9e9 	bl	800eac0 <ip4_output_if>
  }
  pbuf_free(q);
 800e6ee:	69f8      	ldr	r0, [r7, #28]
 800e6f0:	f7f6 fc8a 	bl	8005008 <pbuf_free>
 800e6f4:	e000      	b.n	800e6f8 <icmp_send_response+0xc0>
    return;
 800e6f6:	bf00      	nop
}
 800e6f8:	3720      	adds	r7, #32
 800e6fa:	46bd      	mov	sp, r7
 800e6fc:	bd80      	pop	{r7, pc}
 800e6fe:	bf00      	nop
 800e700:	080133dc 	.word	0x080133dc
 800e704:	080134a8 	.word	0x080134a8
 800e708:	0801344c 	.word	0x0801344c

0800e70c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b085      	sub	sp, #20
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800e714:	4b33      	ldr	r3, [pc, #204]	; (800e7e4 <ip4_route+0xd8>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	60fb      	str	r3, [r7, #12]
 800e71a:	e036      	b.n	800e78a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e722:	f003 0301 	and.w	r3, r3, #1
 800e726:	b2db      	uxtb	r3, r3
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d02b      	beq.n	800e784 <ip4_route+0x78>
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e732:	089b      	lsrs	r3, r3, #2
 800e734:	f003 0301 	and.w	r3, r3, #1
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d022      	beq.n	800e784 <ip4_route+0x78>
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	3304      	adds	r3, #4
 800e742:	681b      	ldr	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d01d      	beq.n	800e784 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	681a      	ldr	r2, [r3, #0]
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	3304      	adds	r3, #4
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	405a      	eors	r2, r3
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	3308      	adds	r3, #8
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	4013      	ands	r3, r2
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d101      	bne.n	800e764 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	e038      	b.n	800e7d6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e76a:	f003 0302 	and.w	r3, r3, #2
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d108      	bne.n	800e784 <ip4_route+0x78>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681a      	ldr	r2, [r3, #0]
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	330c      	adds	r3, #12
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d101      	bne.n	800e784 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	e028      	b.n	800e7d6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	60fb      	str	r3, [r7, #12]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d1c5      	bne.n	800e71c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e790:	4b15      	ldr	r3, [pc, #84]	; (800e7e8 <ip4_route+0xdc>)
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d01a      	beq.n	800e7ce <ip4_route+0xc2>
 800e798:	4b13      	ldr	r3, [pc, #76]	; (800e7e8 <ip4_route+0xdc>)
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7a0:	f003 0301 	and.w	r3, r3, #1
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d012      	beq.n	800e7ce <ip4_route+0xc2>
 800e7a8:	4b0f      	ldr	r3, [pc, #60]	; (800e7e8 <ip4_route+0xdc>)
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7b0:	f003 0304 	and.w	r3, r3, #4
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d00a      	beq.n	800e7ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e7b8:	4b0b      	ldr	r3, [pc, #44]	; (800e7e8 <ip4_route+0xdc>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	3304      	adds	r3, #4
 800e7be:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d004      	beq.n	800e7ce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b7f      	cmp	r3, #127	; 0x7f
 800e7cc:	d101      	bne.n	800e7d2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800e7ce:	2300      	movs	r3, #0
 800e7d0:	e001      	b.n	800e7d6 <ip4_route+0xca>
  }

  return netif_default;
 800e7d2:	4b05      	ldr	r3, [pc, #20]	; (800e7e8 <ip4_route+0xdc>)
 800e7d4:	681b      	ldr	r3, [r3, #0]
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3714      	adds	r7, #20
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e0:	4770      	bx	lr
 800e7e2:	bf00      	nop
 800e7e4:	20006d40 	.word	0x20006d40
 800e7e8:	20006d44 	.word	0x20006d44

0800e7ec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800e7ec:	b580      	push	{r7, lr}
 800e7ee:	b082      	sub	sp, #8
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e7fa:	f003 0301 	and.w	r3, r3, #1
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	2b00      	cmp	r3, #0
 800e802:	d016      	beq.n	800e832 <ip4_input_accept+0x46>
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	3304      	adds	r3, #4
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d011      	beq.n	800e832 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e80e:	4b0b      	ldr	r3, [pc, #44]	; (800e83c <ip4_input_accept+0x50>)
 800e810:	695a      	ldr	r2, [r3, #20]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	3304      	adds	r3, #4
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	429a      	cmp	r2, r3
 800e81a:	d008      	beq.n	800e82e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800e81c:	4b07      	ldr	r3, [pc, #28]	; (800e83c <ip4_input_accept+0x50>)
 800e81e:	695b      	ldr	r3, [r3, #20]
 800e820:	6879      	ldr	r1, [r7, #4]
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fa24 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800e828:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d001      	beq.n	800e832 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800e82e:	2301      	movs	r3, #1
 800e830:	e000      	b.n	800e834 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800e832:	2300      	movs	r3, #0
}
 800e834:	4618      	mov	r0, r3
 800e836:	3708      	adds	r7, #8
 800e838:	46bd      	mov	sp, r7
 800e83a:	bd80      	pop	{r7, pc}
 800e83c:	200037dc 	.word	0x200037dc

0800e840 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b088      	sub	sp, #32
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800e84a:	2301      	movs	r3, #1
 800e84c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	685b      	ldr	r3, [r3, #4]
 800e852:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800e854:	69fb      	ldr	r3, [r7, #28]
 800e856:	781b      	ldrb	r3, [r3, #0]
 800e858:	091b      	lsrs	r3, r3, #4
 800e85a:	b2db      	uxtb	r3, r3
 800e85c:	2b04      	cmp	r3, #4
 800e85e:	d004      	beq.n	800e86a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800e860:	6878      	ldr	r0, [r7, #4]
 800e862:	f7f6 fbd1 	bl	8005008 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800e866:	2300      	movs	r3, #0
 800e868:	e121      	b.n	800eaae <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	781b      	ldrb	r3, [r3, #0]
 800e86e:	f003 030f 	and.w	r3, r3, #15
 800e872:	b2db      	uxtb	r3, r3
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	b2db      	uxtb	r3, r3
 800e878:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	885b      	ldrh	r3, [r3, #2]
 800e87e:	b29b      	uxth	r3, r3
 800e880:	4618      	mov	r0, r3
 800e882:	f7f4 fdb1 	bl	80033e8 <lwip_htons>
 800e886:	4603      	mov	r3, r0
 800e888:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	891b      	ldrh	r3, [r3, #8]
 800e88e:	8a3a      	ldrh	r2, [r7, #16]
 800e890:	429a      	cmp	r2, r3
 800e892:	d204      	bcs.n	800e89e <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800e894:	8a3b      	ldrh	r3, [r7, #16]
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f7f6 fa2f 	bl	8004cfc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	895b      	ldrh	r3, [r3, #10]
 800e8a2:	8a7a      	ldrh	r2, [r7, #18]
 800e8a4:	429a      	cmp	r2, r3
 800e8a6:	d807      	bhi.n	800e8b8 <ip4_input+0x78>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	891b      	ldrh	r3, [r3, #8]
 800e8ac:	8a3a      	ldrh	r2, [r7, #16]
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d802      	bhi.n	800e8b8 <ip4_input+0x78>
 800e8b2:	8a7b      	ldrh	r3, [r7, #18]
 800e8b4:	2b13      	cmp	r3, #19
 800e8b6:	d804      	bhi.n	800e8c2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7f6 fba5 	bl	8005008 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800e8be:	2300      	movs	r3, #0
 800e8c0:	e0f5      	b.n	800eaae <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800e8c2:	69fb      	ldr	r3, [r7, #28]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	4a7c      	ldr	r2, [pc, #496]	; (800eab8 <ip4_input+0x278>)
 800e8c8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800e8ca:	69fb      	ldr	r3, [r7, #28]
 800e8cc:	68db      	ldr	r3, [r3, #12]
 800e8ce:	4a7a      	ldr	r2, [pc, #488]	; (800eab8 <ip4_input+0x278>)
 800e8d0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800e8d2:	4b79      	ldr	r3, [pc, #484]	; (800eab8 <ip4_input+0x278>)
 800e8d4:	695b      	ldr	r3, [r3, #20]
 800e8d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e8da:	2be0      	cmp	r3, #224	; 0xe0
 800e8dc:	d112      	bne.n	800e904 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800e8de:	683b      	ldr	r3, [r7, #0]
 800e8e0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e8e4:	f003 0301 	and.w	r3, r3, #1
 800e8e8:	b2db      	uxtb	r3, r3
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d007      	beq.n	800e8fe <ip4_input+0xbe>
 800e8ee:	683b      	ldr	r3, [r7, #0]
 800e8f0:	3304      	adds	r3, #4
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d002      	beq.n	800e8fe <ip4_input+0xbe>
      netif = inp;
 800e8f8:	683b      	ldr	r3, [r7, #0]
 800e8fa:	61bb      	str	r3, [r7, #24]
 800e8fc:	e02a      	b.n	800e954 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e8fe:	2300      	movs	r3, #0
 800e900:	61bb      	str	r3, [r7, #24]
 800e902:	e027      	b.n	800e954 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800e904:	6838      	ldr	r0, [r7, #0]
 800e906:	f7ff ff71 	bl	800e7ec <ip4_input_accept>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d002      	beq.n	800e916 <ip4_input+0xd6>
      netif = inp;
 800e910:	683b      	ldr	r3, [r7, #0]
 800e912:	61bb      	str	r3, [r7, #24]
 800e914:	e01e      	b.n	800e954 <ip4_input+0x114>
    } else {
      netif = NULL;
 800e916:	2300      	movs	r3, #0
 800e918:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800e91a:	4b67      	ldr	r3, [pc, #412]	; (800eab8 <ip4_input+0x278>)
 800e91c:	695b      	ldr	r3, [r3, #20]
 800e91e:	b2db      	uxtb	r3, r3
 800e920:	2b7f      	cmp	r3, #127	; 0x7f
 800e922:	d017      	beq.n	800e954 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800e924:	4b65      	ldr	r3, [pc, #404]	; (800eabc <ip4_input+0x27c>)
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	61bb      	str	r3, [r7, #24]
 800e92a:	e00e      	b.n	800e94a <ip4_input+0x10a>
          if (netif == inp) {
 800e92c:	69ba      	ldr	r2, [r7, #24]
 800e92e:	683b      	ldr	r3, [r7, #0]
 800e930:	429a      	cmp	r2, r3
 800e932:	d006      	beq.n	800e942 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800e934:	69b8      	ldr	r0, [r7, #24]
 800e936:	f7ff ff59 	bl	800e7ec <ip4_input_accept>
 800e93a:	4603      	mov	r3, r0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d108      	bne.n	800e952 <ip4_input+0x112>
 800e940:	e000      	b.n	800e944 <ip4_input+0x104>
            continue;
 800e942:	bf00      	nop
        NETIF_FOREACH(netif) {
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	61bb      	str	r3, [r7, #24]
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1ed      	bne.n	800e92c <ip4_input+0xec>
 800e950:	e000      	b.n	800e954 <ip4_input+0x114>
            break;
 800e952:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800e954:	69bb      	ldr	r3, [r7, #24]
 800e956:	2b00      	cmp	r3, #0
 800e958:	d111      	bne.n	800e97e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	7a5b      	ldrb	r3, [r3, #9]
 800e95e:	2b11      	cmp	r3, #17
 800e960:	d10d      	bne.n	800e97e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800e962:	8a7b      	ldrh	r3, [r7, #18]
 800e964:	69fa      	ldr	r2, [r7, #28]
 800e966:	4413      	add	r3, r2
 800e968:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	885b      	ldrh	r3, [r3, #2]
 800e96e:	b29b      	uxth	r3, r3
 800e970:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800e974:	d103      	bne.n	800e97e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800e97a:	2300      	movs	r3, #0
 800e97c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800e97e:	697b      	ldr	r3, [r7, #20]
 800e980:	2b00      	cmp	r3, #0
 800e982:	d017      	beq.n	800e9b4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800e984:	4b4c      	ldr	r3, [pc, #304]	; (800eab8 <ip4_input+0x278>)
 800e986:	691b      	ldr	r3, [r3, #16]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d013      	beq.n	800e9b4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e98c:	4b4a      	ldr	r3, [pc, #296]	; (800eab8 <ip4_input+0x278>)
 800e98e:	691b      	ldr	r3, [r3, #16]
 800e990:	6839      	ldr	r1, [r7, #0]
 800e992:	4618      	mov	r0, r3
 800e994:	f000 f96c 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800e998:	4603      	mov	r3, r0
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d105      	bne.n	800e9aa <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800e99e:	4b46      	ldr	r3, [pc, #280]	; (800eab8 <ip4_input+0x278>)
 800e9a0:	691b      	ldr	r3, [r3, #16]
 800e9a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800e9a6:	2be0      	cmp	r3, #224	; 0xe0
 800e9a8:	d104      	bne.n	800e9b4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f7f6 fb2c 	bl	8005008 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	e07c      	b.n	800eaae <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800e9b4:	69bb      	ldr	r3, [r7, #24]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d104      	bne.n	800e9c4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800e9ba:	6878      	ldr	r0, [r7, #4]
 800e9bc:	f7f6 fb24 	bl	8005008 <pbuf_free>
    return ERR_OK;
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e074      	b.n	800eaae <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800e9c4:	69fb      	ldr	r3, [r7, #28]
 800e9c6:	88db      	ldrh	r3, [r3, #6]
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	461a      	mov	r2, r3
 800e9cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800e9d0:	4013      	ands	r3, r2
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00b      	beq.n	800e9ee <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 fc90 	bl	800f2fc <ip4_reass>
 800e9dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d101      	bne.n	800e9e8 <ip4_input+0x1a8>
      return ERR_OK;
 800e9e4:	2300      	movs	r3, #0
 800e9e6:	e062      	b.n	800eaae <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	685b      	ldr	r3, [r3, #4]
 800e9ec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800e9ee:	4a32      	ldr	r2, [pc, #200]	; (800eab8 <ip4_input+0x278>)
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800e9f4:	4a30      	ldr	r2, [pc, #192]	; (800eab8 <ip4_input+0x278>)
 800e9f6:	683b      	ldr	r3, [r7, #0]
 800e9f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800e9fa:	4a2f      	ldr	r2, [pc, #188]	; (800eab8 <ip4_input+0x278>)
 800e9fc:	69fb      	ldr	r3, [r7, #28]
 800e9fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	781b      	ldrb	r3, [r3, #0]
 800ea04:	f003 030f 	and.w	r3, r3, #15
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	009b      	lsls	r3, r3, #2
 800ea0c:	b2db      	uxtb	r3, r3
 800ea0e:	b29a      	uxth	r2, r3
 800ea10:	4b29      	ldr	r3, [pc, #164]	; (800eab8 <ip4_input+0x278>)
 800ea12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800ea14:	8a7b      	ldrh	r3, [r7, #18]
 800ea16:	4619      	mov	r1, r3
 800ea18:	6878      	ldr	r0, [r7, #4]
 800ea1a:	f7f6 fa6f 	bl	8004efc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800ea1e:	69fb      	ldr	r3, [r7, #28]
 800ea20:	7a5b      	ldrb	r3, [r3, #9]
 800ea22:	2b06      	cmp	r3, #6
 800ea24:	d009      	beq.n	800ea3a <ip4_input+0x1fa>
 800ea26:	2b11      	cmp	r3, #17
 800ea28:	d002      	beq.n	800ea30 <ip4_input+0x1f0>
 800ea2a:	2b01      	cmp	r3, #1
 800ea2c:	d00a      	beq.n	800ea44 <ip4_input+0x204>
 800ea2e:	e00e      	b.n	800ea4e <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800ea30:	6839      	ldr	r1, [r7, #0]
 800ea32:	6878      	ldr	r0, [r7, #4]
 800ea34:	f7fc fa30 	bl	800ae98 <udp_input>
        break;
 800ea38:	e026      	b.n	800ea88 <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800ea3a:	6839      	ldr	r1, [r7, #0]
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7f8 fa69 	bl	8006f14 <tcp_input>
        break;
 800ea42:	e021      	b.n	800ea88 <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800ea44:	6839      	ldr	r1, [r7, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	f7ff fcd2 	bl	800e3f0 <icmp_input>
        break;
 800ea4c:	e01c      	b.n	800ea88 <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea4e:	4b1a      	ldr	r3, [pc, #104]	; (800eab8 <ip4_input+0x278>)
 800ea50:	695b      	ldr	r3, [r3, #20]
 800ea52:	69b9      	ldr	r1, [r7, #24]
 800ea54:	4618      	mov	r0, r3
 800ea56:	f000 f90b 	bl	800ec70 <ip4_addr_isbroadcast_u32>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d10f      	bne.n	800ea80 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800ea60:	4b15      	ldr	r3, [pc, #84]	; (800eab8 <ip4_input+0x278>)
 800ea62:	695b      	ldr	r3, [r3, #20]
 800ea64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800ea68:	2be0      	cmp	r3, #224	; 0xe0
 800ea6a:	d009      	beq.n	800ea80 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800ea6c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea70:	4619      	mov	r1, r3
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	f7f6 fab5 	bl	8004fe2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800ea78:	2102      	movs	r1, #2
 800ea7a:	6878      	ldr	r0, [r7, #4]
 800ea7c:	f7ff fdbc 	bl	800e5f8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7f6 fac1 	bl	8005008 <pbuf_free>
        break;
 800ea86:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800ea88:	4b0b      	ldr	r3, [pc, #44]	; (800eab8 <ip4_input+0x278>)
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800ea8e:	4b0a      	ldr	r3, [pc, #40]	; (800eab8 <ip4_input+0x278>)
 800ea90:	2200      	movs	r2, #0
 800ea92:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800ea94:	4b08      	ldr	r3, [pc, #32]	; (800eab8 <ip4_input+0x278>)
 800ea96:	2200      	movs	r2, #0
 800ea98:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800ea9a:	4b07      	ldr	r3, [pc, #28]	; (800eab8 <ip4_input+0x278>)
 800ea9c:	2200      	movs	r2, #0
 800ea9e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800eaa0:	4b05      	ldr	r3, [pc, #20]	; (800eab8 <ip4_input+0x278>)
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800eaa6:	4b04      	ldr	r3, [pc, #16]	; (800eab8 <ip4_input+0x278>)
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800eaac:	2300      	movs	r3, #0
}
 800eaae:	4618      	mov	r0, r3
 800eab0:	3720      	adds	r7, #32
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}
 800eab6:	bf00      	nop
 800eab8:	200037dc 	.word	0x200037dc
 800eabc:	20006d40 	.word	0x20006d40

0800eac0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b08a      	sub	sp, #40	; 0x28
 800eac4:	af04      	add	r7, sp, #16
 800eac6:	60f8      	str	r0, [r7, #12]
 800eac8:	60b9      	str	r1, [r7, #8]
 800eaca:	607a      	str	r2, [r7, #4]
 800eacc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800eace:	68bb      	ldr	r3, [r7, #8]
 800ead0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d009      	beq.n	800eaec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d003      	beq.n	800eae6 <ip4_output_if+0x26>
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d102      	bne.n	800eaec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800eae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eae8:	3304      	adds	r3, #4
 800eaea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800eaec:	78fa      	ldrb	r2, [r7, #3]
 800eaee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaf0:	9302      	str	r3, [sp, #8]
 800eaf2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800eaf6:	9301      	str	r3, [sp, #4]
 800eaf8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800eafc:	9300      	str	r3, [sp, #0]
 800eafe:	4613      	mov	r3, r2
 800eb00:	687a      	ldr	r2, [r7, #4]
 800eb02:	6979      	ldr	r1, [r7, #20]
 800eb04:	68f8      	ldr	r0, [r7, #12]
 800eb06:	f000 f805 	bl	800eb14 <ip4_output_if_src>
 800eb0a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3718      	adds	r7, #24
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}

0800eb14 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b088      	sub	sp, #32
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	60f8      	str	r0, [r7, #12]
 800eb1c:	60b9      	str	r1, [r7, #8]
 800eb1e:	607a      	str	r2, [r7, #4]
 800eb20:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	7b9b      	ldrb	r3, [r3, #14]
 800eb26:	2b01      	cmp	r3, #1
 800eb28:	d006      	beq.n	800eb38 <ip4_output_if_src+0x24>
 800eb2a:	4b4b      	ldr	r3, [pc, #300]	; (800ec58 <ip4_output_if_src+0x144>)
 800eb2c:	f44f 7255 	mov.w	r2, #852	; 0x354
 800eb30:	494a      	ldr	r1, [pc, #296]	; (800ec5c <ip4_output_if_src+0x148>)
 800eb32:	484b      	ldr	r0, [pc, #300]	; (800ec60 <ip4_output_if_src+0x14c>)
 800eb34:	f001 f82e 	bl	800fb94 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d060      	beq.n	800ec00 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800eb3e:	2314      	movs	r3, #20
 800eb40:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800eb42:	2114      	movs	r1, #20
 800eb44:	68f8      	ldr	r0, [r7, #12]
 800eb46:	f7f6 f9c9 	bl	8004edc <pbuf_add_header>
 800eb4a:	4603      	mov	r3, r0
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800eb50:	f06f 0301 	mvn.w	r3, #1
 800eb54:	e07c      	b.n	800ec50 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	685b      	ldr	r3, [r3, #4]
 800eb5a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	2b13      	cmp	r3, #19
 800eb62:	d806      	bhi.n	800eb72 <ip4_output_if_src+0x5e>
 800eb64:	4b3c      	ldr	r3, [pc, #240]	; (800ec58 <ip4_output_if_src+0x144>)
 800eb66:	f240 3289 	movw	r2, #905	; 0x389
 800eb6a:	493e      	ldr	r1, [pc, #248]	; (800ec64 <ip4_output_if_src+0x150>)
 800eb6c:	483c      	ldr	r0, [pc, #240]	; (800ec60 <ip4_output_if_src+0x14c>)
 800eb6e:	f001 f811 	bl	800fb94 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	78fa      	ldrb	r2, [r7, #3]
 800eb76:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800eb7e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	69fb      	ldr	r3, [r7, #28]
 800eb86:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800eb88:	8b7b      	ldrh	r3, [r7, #26]
 800eb8a:	089b      	lsrs	r3, r3, #2
 800eb8c:	b29b      	uxth	r3, r3
 800eb8e:	b2db      	uxtb	r3, r3
 800eb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb94:	b2da      	uxtb	r2, r3
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800eb9a:	69fb      	ldr	r3, [r7, #28]
 800eb9c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800eba0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	891b      	ldrh	r3, [r3, #8]
 800eba6:	4618      	mov	r0, r3
 800eba8:	f7f4 fc1e 	bl	80033e8 <lwip_htons>
 800ebac:	4603      	mov	r3, r0
 800ebae:	461a      	mov	r2, r3
 800ebb0:	69fb      	ldr	r3, [r7, #28]
 800ebb2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800ebb4:	69fb      	ldr	r3, [r7, #28]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	719a      	strb	r2, [r3, #6]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800ebbe:	4b2a      	ldr	r3, [pc, #168]	; (800ec68 <ip4_output_if_src+0x154>)
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7f4 fc10 	bl	80033e8 <lwip_htons>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	461a      	mov	r2, r3
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800ebd0:	4b25      	ldr	r3, [pc, #148]	; (800ec68 <ip4_output_if_src+0x154>)
 800ebd2:	881b      	ldrh	r3, [r3, #0]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	b29a      	uxth	r2, r3
 800ebd8:	4b23      	ldr	r3, [pc, #140]	; (800ec68 <ip4_output_if_src+0x154>)
 800ebda:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800ebdc:	68bb      	ldr	r3, [r7, #8]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d104      	bne.n	800ebec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800ebe2:	4b22      	ldr	r3, [pc, #136]	; (800ec6c <ip4_output_if_src+0x158>)
 800ebe4:	681a      	ldr	r2, [r3, #0]
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	60da      	str	r2, [r3, #12]
 800ebea:	e003      	b.n	800ebf4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800ebec:	68bb      	ldr	r3, [r7, #8]
 800ebee:	681a      	ldr	r2, [r3, #0]
 800ebf0:	69fb      	ldr	r3, [r7, #28]
 800ebf2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800ebf4:	69fb      	ldr	r3, [r7, #28]
 800ebf6:	2200      	movs	r2, #0
 800ebf8:	729a      	strb	r2, [r3, #10]
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	72da      	strb	r2, [r3, #11]
 800ebfe:	e00f      	b.n	800ec20 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	895b      	ldrh	r3, [r3, #10]
 800ec04:	2b13      	cmp	r3, #19
 800ec06:	d802      	bhi.n	800ec0e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800ec08:	f06f 0301 	mvn.w	r3, #1
 800ec0c:	e020      	b.n	800ec50 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	685b      	ldr	r3, [r3, #4]
 800ec12:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800ec14:	69fb      	ldr	r3, [r7, #28]
 800ec16:	691b      	ldr	r3, [r3, #16]
 800ec18:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800ec1a:	f107 0314 	add.w	r3, r7, #20
 800ec1e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800ec20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d00c      	beq.n	800ec42 <ip4_output_if_src+0x12e>
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	891a      	ldrh	r2, [r3, #8]
 800ec2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ec30:	429a      	cmp	r2, r3
 800ec32:	d906      	bls.n	800ec42 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f000 fd4b 	bl	800f6d4 <ip4_frag>
 800ec3e:	4603      	mov	r3, r0
 800ec40:	e006      	b.n	800ec50 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800ec42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec44:	695b      	ldr	r3, [r3, #20]
 800ec46:	687a      	ldr	r2, [r7, #4]
 800ec48:	68f9      	ldr	r1, [r7, #12]
 800ec4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec4c:	4798      	blx	r3
 800ec4e:	4603      	mov	r3, r0
}
 800ec50:	4618      	mov	r0, r3
 800ec52:	3720      	adds	r7, #32
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	080134d4 	.word	0x080134d4
 800ec5c:	08013508 	.word	0x08013508
 800ec60:	08013514 	.word	0x08013514
 800ec64:	0801353c 	.word	0x0801353c
 800ec68:	2000069a 	.word	0x2000069a
 800ec6c:	08013920 	.word	0x08013920

0800ec70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b085      	sub	sp, #20
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
 800ec78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec84:	d002      	beq.n	800ec8c <ip4_addr_isbroadcast_u32+0x1c>
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d101      	bne.n	800ec90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800ec8c:	2301      	movs	r3, #1
 800ec8e:	e02a      	b.n	800ece6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800ec90:	683b      	ldr	r3, [r7, #0]
 800ec92:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ec96:	f003 0302 	and.w	r3, r3, #2
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	d101      	bne.n	800eca2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800ec9e:	2300      	movs	r3, #0
 800eca0:	e021      	b.n	800ece6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	3304      	adds	r3, #4
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	687a      	ldr	r2, [r7, #4]
 800ecaa:	429a      	cmp	r2, r3
 800ecac:	d101      	bne.n	800ecb2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e019      	b.n	800ece6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800ecb2:	68fa      	ldr	r2, [r7, #12]
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	3304      	adds	r3, #4
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	405a      	eors	r2, r3
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	3308      	adds	r3, #8
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	4013      	ands	r3, r2
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d10d      	bne.n	800ece4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	3308      	adds	r3, #8
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	43da      	mvns	r2, r3
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800ecd4:	683b      	ldr	r3, [r7, #0]
 800ecd6:	3308      	adds	r3, #8
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	d101      	bne.n	800ece4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800ece0:	2301      	movs	r3, #1
 800ece2:	e000      	b.n	800ece6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800ece4:	2300      	movs	r3, #0
  }
}
 800ece6:	4618      	mov	r0, r3
 800ece8:	3714      	adds	r7, #20
 800ecea:	46bd      	mov	sp, r7
 800ecec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecf0:	4770      	bx	lr
	...

0800ecf4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b084      	sub	sp, #16
 800ecf8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800ecfe:	4b12      	ldr	r3, [pc, #72]	; (800ed48 <ip_reass_tmr+0x54>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800ed04:	e018      	b.n	800ed38 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	7fdb      	ldrb	r3, [r3, #31]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d00b      	beq.n	800ed26 <ip_reass_tmr+0x32>
      r->timer--;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	7fdb      	ldrb	r3, [r3, #31]
 800ed12:	3b01      	subs	r3, #1
 800ed14:	b2da      	uxtb	r2, r3
 800ed16:	68fb      	ldr	r3, [r7, #12]
 800ed18:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	60fb      	str	r3, [r7, #12]
 800ed24:	e008      	b.n	800ed38 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800ed30:	68b9      	ldr	r1, [r7, #8]
 800ed32:	6878      	ldr	r0, [r7, #4]
 800ed34:	f000 f80a 	bl	800ed4c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d1e3      	bne.n	800ed06 <ip_reass_tmr+0x12>
    }
  }
}
 800ed3e:	bf00      	nop
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	2000069c 	.word	0x2000069c

0800ed4c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b088      	sub	sp, #32
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800ed56:	2300      	movs	r3, #0
 800ed58:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d105      	bne.n	800ed6e <ip_reass_free_complete_datagram+0x22>
 800ed62:	4b45      	ldr	r3, [pc, #276]	; (800ee78 <ip_reass_free_complete_datagram+0x12c>)
 800ed64:	22ab      	movs	r2, #171	; 0xab
 800ed66:	4945      	ldr	r1, [pc, #276]	; (800ee7c <ip_reass_free_complete_datagram+0x130>)
 800ed68:	4845      	ldr	r0, [pc, #276]	; (800ee80 <ip_reass_free_complete_datagram+0x134>)
 800ed6a:	f000 ff13 	bl	800fb94 <iprintf>
  if (prev != NULL) {
 800ed6e:	683b      	ldr	r3, [r7, #0]
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d00a      	beq.n	800ed8a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800ed74:	683b      	ldr	r3, [r7, #0]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d005      	beq.n	800ed8a <ip_reass_free_complete_datagram+0x3e>
 800ed7e:	4b3e      	ldr	r3, [pc, #248]	; (800ee78 <ip_reass_free_complete_datagram+0x12c>)
 800ed80:	22ad      	movs	r2, #173	; 0xad
 800ed82:	4940      	ldr	r1, [pc, #256]	; (800ee84 <ip_reass_free_complete_datagram+0x138>)
 800ed84:	483e      	ldr	r0, [pc, #248]	; (800ee80 <ip_reass_free_complete_datagram+0x134>)
 800ed86:	f000 ff05 	bl	800fb94 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	685b      	ldr	r3, [r3, #4]
 800ed8e:	685b      	ldr	r3, [r3, #4]
 800ed90:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	889b      	ldrh	r3, [r3, #4]
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d12a      	bne.n	800edf2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	685b      	ldr	r3, [r3, #4]
 800eda0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800eda2:	697b      	ldr	r3, [r7, #20]
 800eda4:	681a      	ldr	r2, [r3, #0]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800edaa:	69bb      	ldr	r3, [r7, #24]
 800edac:	6858      	ldr	r0, [r3, #4]
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	3308      	adds	r3, #8
 800edb2:	2214      	movs	r2, #20
 800edb4:	4619      	mov	r1, r3
 800edb6:	f000 feda 	bl	800fb6e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800edba:	2101      	movs	r1, #1
 800edbc:	69b8      	ldr	r0, [r7, #24]
 800edbe:	f7ff fc2b 	bl	800e618 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800edc2:	69b8      	ldr	r0, [r7, #24]
 800edc4:	f7f6 f9a8 	bl	8005118 <pbuf_clen>
 800edc8:	4603      	mov	r3, r0
 800edca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800edcc:	8bfa      	ldrh	r2, [r7, #30]
 800edce:	8a7b      	ldrh	r3, [r7, #18]
 800edd0:	4413      	add	r3, r2
 800edd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800edd6:	db05      	blt.n	800ede4 <ip_reass_free_complete_datagram+0x98>
 800edd8:	4b27      	ldr	r3, [pc, #156]	; (800ee78 <ip_reass_free_complete_datagram+0x12c>)
 800edda:	22bc      	movs	r2, #188	; 0xbc
 800eddc:	492a      	ldr	r1, [pc, #168]	; (800ee88 <ip_reass_free_complete_datagram+0x13c>)
 800edde:	4828      	ldr	r0, [pc, #160]	; (800ee80 <ip_reass_free_complete_datagram+0x134>)
 800ede0:	f000 fed8 	bl	800fb94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ede4:	8bfa      	ldrh	r2, [r7, #30]
 800ede6:	8a7b      	ldrh	r3, [r7, #18]
 800ede8:	4413      	add	r3, r2
 800edea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800edec:	69b8      	ldr	r0, [r7, #24]
 800edee:	f7f6 f90b 	bl	8005008 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	685b      	ldr	r3, [r3, #4]
 800edf6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800edf8:	e01f      	b.n	800ee3a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800edfa:	69bb      	ldr	r3, [r7, #24]
 800edfc:	685b      	ldr	r3, [r3, #4]
 800edfe:	617b      	str	r3, [r7, #20]
    pcur = p;
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800ee0a:	68f8      	ldr	r0, [r7, #12]
 800ee0c:	f7f6 f984 	bl	8005118 <pbuf_clen>
 800ee10:	4603      	mov	r3, r0
 800ee12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800ee14:	8bfa      	ldrh	r2, [r7, #30]
 800ee16:	8a7b      	ldrh	r3, [r7, #18]
 800ee18:	4413      	add	r3, r2
 800ee1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ee1e:	db05      	blt.n	800ee2c <ip_reass_free_complete_datagram+0xe0>
 800ee20:	4b15      	ldr	r3, [pc, #84]	; (800ee78 <ip_reass_free_complete_datagram+0x12c>)
 800ee22:	22cc      	movs	r2, #204	; 0xcc
 800ee24:	4918      	ldr	r1, [pc, #96]	; (800ee88 <ip_reass_free_complete_datagram+0x13c>)
 800ee26:	4816      	ldr	r0, [pc, #88]	; (800ee80 <ip_reass_free_complete_datagram+0x134>)
 800ee28:	f000 feb4 	bl	800fb94 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ee2c:	8bfa      	ldrh	r2, [r7, #30]
 800ee2e:	8a7b      	ldrh	r3, [r7, #18]
 800ee30:	4413      	add	r3, r2
 800ee32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7f6 f8e7 	bl	8005008 <pbuf_free>
  while (p != NULL) {
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d1dc      	bne.n	800edfa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ee40:	6839      	ldr	r1, [r7, #0]
 800ee42:	6878      	ldr	r0, [r7, #4]
 800ee44:	f000 f8c2 	bl	800efcc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ee48:	4b10      	ldr	r3, [pc, #64]	; (800ee8c <ip_reass_free_complete_datagram+0x140>)
 800ee4a:	881b      	ldrh	r3, [r3, #0]
 800ee4c:	8bfa      	ldrh	r2, [r7, #30]
 800ee4e:	429a      	cmp	r2, r3
 800ee50:	d905      	bls.n	800ee5e <ip_reass_free_complete_datagram+0x112>
 800ee52:	4b09      	ldr	r3, [pc, #36]	; (800ee78 <ip_reass_free_complete_datagram+0x12c>)
 800ee54:	22d2      	movs	r2, #210	; 0xd2
 800ee56:	490e      	ldr	r1, [pc, #56]	; (800ee90 <ip_reass_free_complete_datagram+0x144>)
 800ee58:	4809      	ldr	r0, [pc, #36]	; (800ee80 <ip_reass_free_complete_datagram+0x134>)
 800ee5a:	f000 fe9b 	bl	800fb94 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ee5e:	4b0b      	ldr	r3, [pc, #44]	; (800ee8c <ip_reass_free_complete_datagram+0x140>)
 800ee60:	881a      	ldrh	r2, [r3, #0]
 800ee62:	8bfb      	ldrh	r3, [r7, #30]
 800ee64:	1ad3      	subs	r3, r2, r3
 800ee66:	b29a      	uxth	r2, r3
 800ee68:	4b08      	ldr	r3, [pc, #32]	; (800ee8c <ip_reass_free_complete_datagram+0x140>)
 800ee6a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ee6c:	8bfb      	ldrh	r3, [r7, #30]
}
 800ee6e:	4618      	mov	r0, r3
 800ee70:	3720      	adds	r7, #32
 800ee72:	46bd      	mov	sp, r7
 800ee74:	bd80      	pop	{r7, pc}
 800ee76:	bf00      	nop
 800ee78:	0801356c 	.word	0x0801356c
 800ee7c:	080135a8 	.word	0x080135a8
 800ee80:	080135b4 	.word	0x080135b4
 800ee84:	080135dc 	.word	0x080135dc
 800ee88:	080135f0 	.word	0x080135f0
 800ee8c:	200006a0 	.word	0x200006a0
 800ee90:	08013610 	.word	0x08013610

0800ee94 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ee94:	b580      	push	{r7, lr}
 800ee96:	b08a      	sub	sp, #40	; 0x28
 800ee98:	af00      	add	r7, sp, #0
 800ee9a:	6078      	str	r0, [r7, #4]
 800ee9c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ee9e:	2300      	movs	r3, #0
 800eea0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800eea2:	2300      	movs	r3, #0
 800eea4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800eea6:	2300      	movs	r3, #0
 800eea8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800eeaa:	2300      	movs	r3, #0
 800eeac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800eeb2:	4b28      	ldr	r3, [pc, #160]	; (800ef54 <ip_reass_remove_oldest_datagram+0xc0>)
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800eeb8:	e030      	b.n	800ef1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800eeba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eebc:	695a      	ldr	r2, [r3, #20]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	68db      	ldr	r3, [r3, #12]
 800eec2:	429a      	cmp	r2, r3
 800eec4:	d10c      	bne.n	800eee0 <ip_reass_remove_oldest_datagram+0x4c>
 800eec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec8:	699a      	ldr	r2, [r3, #24]
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	691b      	ldr	r3, [r3, #16]
 800eece:	429a      	cmp	r2, r3
 800eed0:	d106      	bne.n	800eee0 <ip_reass_remove_oldest_datagram+0x4c>
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	899a      	ldrh	r2, [r3, #12]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	889b      	ldrh	r3, [r3, #4]
 800eeda:	b29b      	uxth	r3, r3
 800eedc:	429a      	cmp	r2, r3
 800eede:	d014      	beq.n	800ef0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800eee0:	693b      	ldr	r3, [r7, #16]
 800eee2:	3301      	adds	r3, #1
 800eee4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800eee6:	6a3b      	ldr	r3, [r7, #32]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d104      	bne.n	800eef6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800eeec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800eef0:	69fb      	ldr	r3, [r7, #28]
 800eef2:	61bb      	str	r3, [r7, #24]
 800eef4:	e009      	b.n	800ef0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800eef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef8:	7fda      	ldrb	r2, [r3, #31]
 800eefa:	6a3b      	ldr	r3, [r7, #32]
 800eefc:	7fdb      	ldrb	r3, [r3, #31]
 800eefe:	429a      	cmp	r2, r3
 800ef00:	d803      	bhi.n	800ef0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ef02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ef06:	69fb      	ldr	r3, [r7, #28]
 800ef08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ef0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d001      	beq.n	800ef16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ef12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ef16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ef1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d1cb      	bne.n	800eeba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800ef22:	6a3b      	ldr	r3, [r7, #32]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d008      	beq.n	800ef3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800ef28:	69b9      	ldr	r1, [r7, #24]
 800ef2a:	6a38      	ldr	r0, [r7, #32]
 800ef2c:	f7ff ff0e 	bl	800ed4c <ip_reass_free_complete_datagram>
 800ef30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800ef32:	697a      	ldr	r2, [r7, #20]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800ef3a:	697a      	ldr	r2, [r7, #20]
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	429a      	cmp	r2, r3
 800ef40:	da02      	bge.n	800ef48 <ip_reass_remove_oldest_datagram+0xb4>
 800ef42:	693b      	ldr	r3, [r7, #16]
 800ef44:	2b01      	cmp	r3, #1
 800ef46:	dcac      	bgt.n	800eea2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800ef48:	697b      	ldr	r3, [r7, #20]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3728      	adds	r7, #40	; 0x28
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	2000069c 	.word	0x2000069c

0800ef58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800ef58:	b580      	push	{r7, lr}
 800ef5a:	b084      	sub	sp, #16
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
 800ef60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef62:	2004      	movs	r0, #4
 800ef64:	f7f5 f986 	bl	8004274 <memp_malloc>
 800ef68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d110      	bne.n	800ef92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800ef70:	6839      	ldr	r1, [r7, #0]
 800ef72:	6878      	ldr	r0, [r7, #4]
 800ef74:	f7ff ff8e 	bl	800ee94 <ip_reass_remove_oldest_datagram>
 800ef78:	4602      	mov	r2, r0
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	dc03      	bgt.n	800ef88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800ef80:	2004      	movs	r0, #4
 800ef82:	f7f5 f977 	bl	8004274 <memp_malloc>
 800ef86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d101      	bne.n	800ef92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 800ef8e:	2300      	movs	r3, #0
 800ef90:	e016      	b.n	800efc0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800ef92:	2220      	movs	r2, #32
 800ef94:	2100      	movs	r1, #0
 800ef96:	68f8      	ldr	r0, [r7, #12]
 800ef98:	f000 fdf4 	bl	800fb84 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800ef9c:	68fb      	ldr	r3, [r7, #12]
 800ef9e:	220f      	movs	r2, #15
 800efa0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800efa2:	4b09      	ldr	r3, [pc, #36]	; (800efc8 <ip_reass_enqueue_new_datagram+0x70>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	68fb      	ldr	r3, [r7, #12]
 800efa8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800efaa:	4a07      	ldr	r2, [pc, #28]	; (800efc8 <ip_reass_enqueue_new_datagram+0x70>)
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	3308      	adds	r3, #8
 800efb4:	2214      	movs	r2, #20
 800efb6:	6879      	ldr	r1, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	f000 fdd8 	bl	800fb6e <memcpy>
  return ipr;
 800efbe:	68fb      	ldr	r3, [r7, #12]
}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3710      	adds	r7, #16
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	2000069c 	.word	0x2000069c

0800efcc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800efd6:	4b10      	ldr	r3, [pc, #64]	; (800f018 <ip_reass_dequeue_datagram+0x4c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	687a      	ldr	r2, [r7, #4]
 800efdc:	429a      	cmp	r2, r3
 800efde:	d104      	bne.n	800efea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	4a0c      	ldr	r2, [pc, #48]	; (800f018 <ip_reass_dequeue_datagram+0x4c>)
 800efe6:	6013      	str	r3, [r2, #0]
 800efe8:	e00d      	b.n	800f006 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d106      	bne.n	800effe <ip_reass_dequeue_datagram+0x32>
 800eff0:	4b0a      	ldr	r3, [pc, #40]	; (800f01c <ip_reass_dequeue_datagram+0x50>)
 800eff2:	f240 1245 	movw	r2, #325	; 0x145
 800eff6:	490a      	ldr	r1, [pc, #40]	; (800f020 <ip_reass_dequeue_datagram+0x54>)
 800eff8:	480a      	ldr	r0, [pc, #40]	; (800f024 <ip_reass_dequeue_datagram+0x58>)
 800effa:	f000 fdcb 	bl	800fb94 <iprintf>
    prev->next = ipr->next;
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	681a      	ldr	r2, [r3, #0]
 800f002:	683b      	ldr	r3, [r7, #0]
 800f004:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800f006:	6879      	ldr	r1, [r7, #4]
 800f008:	2004      	movs	r0, #4
 800f00a:	f7f5 f97f 	bl	800430c <memp_free>
}
 800f00e:	bf00      	nop
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	2000069c 	.word	0x2000069c
 800f01c:	0801356c 	.word	0x0801356c
 800f020:	08013634 	.word	0x08013634
 800f024:	080135b4 	.word	0x080135b4

0800f028 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b08c      	sub	sp, #48	; 0x30
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	60f8      	str	r0, [r7, #12]
 800f030:	60b9      	str	r1, [r7, #8]
 800f032:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 800f034:	2300      	movs	r3, #0
 800f036:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800f038:	2301      	movs	r3, #1
 800f03a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	685b      	ldr	r3, [r3, #4]
 800f040:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f042:	69fb      	ldr	r3, [r7, #28]
 800f044:	885b      	ldrh	r3, [r3, #2]
 800f046:	b29b      	uxth	r3, r3
 800f048:	4618      	mov	r0, r3
 800f04a:	f7f4 f9cd 	bl	80033e8 <lwip_htons>
 800f04e:	4603      	mov	r3, r0
 800f050:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	f003 030f 	and.w	r3, r3, #15
 800f05a:	b2db      	uxtb	r3, r3
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 800f060:	7e7b      	ldrb	r3, [r7, #25]
 800f062:	b29b      	uxth	r3, r3
 800f064:	8b7a      	ldrh	r2, [r7, #26]
 800f066:	429a      	cmp	r2, r3
 800f068:	d202      	bcs.n	800f070 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f06a:	f04f 33ff 	mov.w	r3, #4294967295
 800f06e:	e135      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 800f070:	7e7b      	ldrb	r3, [r7, #25]
 800f072:	b29b      	uxth	r3, r3
 800f074:	8b7a      	ldrh	r2, [r7, #26]
 800f076:	1ad3      	subs	r3, r2, r3
 800f078:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 800f07a:	69fb      	ldr	r3, [r7, #28]
 800f07c:	88db      	ldrh	r3, [r3, #6]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	4618      	mov	r0, r3
 800f082:	f7f4 f9b1 	bl	80033e8 <lwip_htons>
 800f086:	4603      	mov	r3, r0
 800f088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	00db      	lsls	r3, r3, #3
 800f090:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	685b      	ldr	r3, [r3, #4]
 800f096:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800f098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09a:	2200      	movs	r2, #0
 800f09c:	701a      	strb	r2, [r3, #0]
 800f09e:	2200      	movs	r2, #0
 800f0a0:	705a      	strb	r2, [r3, #1]
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	709a      	strb	r2, [r3, #2]
 800f0a6:	2200      	movs	r2, #0
 800f0a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800f0aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ac:	8afa      	ldrh	r2, [r7, #22]
 800f0ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 800f0b0:	8afa      	ldrh	r2, [r7, #22]
 800f0b2:	8b7b      	ldrh	r3, [r7, #26]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 800f0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0be:	88db      	ldrh	r3, [r3, #6]
 800f0c0:	b29b      	uxth	r3, r3
 800f0c2:	8afa      	ldrh	r2, [r7, #22]
 800f0c4:	429a      	cmp	r2, r3
 800f0c6:	d902      	bls.n	800f0ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f0c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f0cc:	e106      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	685b      	ldr	r3, [r3, #4]
 800f0d2:	627b      	str	r3, [r7, #36]	; 0x24
 800f0d4:	e068      	b.n	800f1a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 800f0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0d8:	685b      	ldr	r3, [r3, #4]
 800f0da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 800f0dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0de:	889b      	ldrh	r3, [r3, #4]
 800f0e0:	b29a      	uxth	r2, r3
 800f0e2:	693b      	ldr	r3, [r7, #16]
 800f0e4:	889b      	ldrh	r3, [r3, #4]
 800f0e6:	b29b      	uxth	r3, r3
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d235      	bcs.n	800f158 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800f0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f0f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800f0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d020      	beq.n	800f13a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800f0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0fa:	889b      	ldrh	r3, [r3, #4]
 800f0fc:	b29a      	uxth	r2, r3
 800f0fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f100:	88db      	ldrh	r3, [r3, #6]
 800f102:	b29b      	uxth	r3, r3
 800f104:	429a      	cmp	r2, r3
 800f106:	d307      	bcc.n	800f118 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	88db      	ldrh	r3, [r3, #6]
 800f10c:	b29a      	uxth	r2, r3
 800f10e:	693b      	ldr	r3, [r7, #16]
 800f110:	889b      	ldrh	r3, [r3, #4]
 800f112:	b29b      	uxth	r3, r3
 800f114:	429a      	cmp	r2, r3
 800f116:	d902      	bls.n	800f11e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f118:	f04f 33ff 	mov.w	r3, #4294967295
 800f11c:	e0de      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800f11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f120:	68ba      	ldr	r2, [r7, #8]
 800f122:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800f124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f126:	88db      	ldrh	r3, [r3, #6]
 800f128:	b29a      	uxth	r2, r3
 800f12a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12c:	889b      	ldrh	r3, [r3, #4]
 800f12e:	b29b      	uxth	r3, r3
 800f130:	429a      	cmp	r2, r3
 800f132:	d03d      	beq.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f134:	2300      	movs	r3, #0
 800f136:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800f138:	e03a      	b.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 800f13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f13c:	88db      	ldrh	r3, [r3, #6]
 800f13e:	b29a      	uxth	r2, r3
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	889b      	ldrh	r3, [r3, #4]
 800f144:	b29b      	uxth	r3, r3
 800f146:	429a      	cmp	r2, r3
 800f148:	d902      	bls.n	800f150 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f14a:	f04f 33ff 	mov.w	r3, #4294967295
 800f14e:	e0c5      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	68ba      	ldr	r2, [r7, #8]
 800f154:	605a      	str	r2, [r3, #4]
      break;
 800f156:	e02b      	b.n	800f1b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 800f158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f15a:	889b      	ldrh	r3, [r3, #4]
 800f15c:	b29a      	uxth	r2, r3
 800f15e:	693b      	ldr	r3, [r7, #16]
 800f160:	889b      	ldrh	r3, [r3, #4]
 800f162:	b29b      	uxth	r3, r3
 800f164:	429a      	cmp	r2, r3
 800f166:	d102      	bne.n	800f16e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f168:	f04f 33ff 	mov.w	r3, #4294967295
 800f16c:	e0b6      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800f16e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f170:	889b      	ldrh	r3, [r3, #4]
 800f172:	b29a      	uxth	r2, r3
 800f174:	693b      	ldr	r3, [r7, #16]
 800f176:	88db      	ldrh	r3, [r3, #6]
 800f178:	b29b      	uxth	r3, r3
 800f17a:	429a      	cmp	r2, r3
 800f17c:	d202      	bcs.n	800f184 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 800f17e:	f04f 33ff 	mov.w	r3, #4294967295
 800f182:	e0ab      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800f184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f186:	2b00      	cmp	r3, #0
 800f188:	d009      	beq.n	800f19e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 800f18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f18c:	88db      	ldrh	r3, [r3, #6]
 800f18e:	b29a      	uxth	r2, r3
 800f190:	693b      	ldr	r3, [r7, #16]
 800f192:	889b      	ldrh	r3, [r3, #4]
 800f194:	b29b      	uxth	r3, r3
 800f196:	429a      	cmp	r2, r3
 800f198:	d001      	beq.n	800f19e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800f19a:	2300      	movs	r3, #0
 800f19c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800f1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d193      	bne.n	800f0d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 800f1ae:	e000      	b.n	800f1b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 800f1b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800f1b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d12d      	bne.n	800f214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 800f1b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d01c      	beq.n	800f1f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800f1be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1c0:	88db      	ldrh	r3, [r3, #6]
 800f1c2:	b29a      	uxth	r2, r3
 800f1c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1c6:	889b      	ldrh	r3, [r3, #4]
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	429a      	cmp	r2, r3
 800f1cc:	d906      	bls.n	800f1dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 800f1ce:	4b45      	ldr	r3, [pc, #276]	; (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f1d0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800f1d4:	4944      	ldr	r1, [pc, #272]	; (800f2e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800f1d6:	4845      	ldr	r0, [pc, #276]	; (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f1d8:	f000 fcdc 	bl	800fb94 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800f1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1de:	68ba      	ldr	r2, [r7, #8]
 800f1e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	88db      	ldrh	r3, [r3, #6]
 800f1e6:	b29a      	uxth	r2, r3
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	889b      	ldrh	r3, [r3, #4]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d010      	beq.n	800f214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	623b      	str	r3, [r7, #32]
 800f1f6:	e00d      	b.n	800f214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	685b      	ldr	r3, [r3, #4]
 800f1fc:	2b00      	cmp	r3, #0
 800f1fe:	d006      	beq.n	800f20e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800f200:	4b38      	ldr	r3, [pc, #224]	; (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f202:	f240 12bf 	movw	r2, #447	; 0x1bf
 800f206:	493a      	ldr	r1, [pc, #232]	; (800f2f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800f208:	4838      	ldr	r0, [pc, #224]	; (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f20a:	f000 fcc3 	bl	800fb94 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	68ba      	ldr	r2, [r7, #8]
 800f212:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d105      	bne.n	800f226 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	7f9b      	ldrb	r3, [r3, #30]
 800f21e:	f003 0301 	and.w	r3, r3, #1
 800f222:	2b00      	cmp	r3, #0
 800f224:	d059      	beq.n	800f2da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 800f226:	6a3b      	ldr	r3, [r7, #32]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d04f      	beq.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 800f22c:	68fb      	ldr	r3, [r7, #12]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d006      	beq.n	800f242 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	685b      	ldr	r3, [r3, #4]
 800f238:	685b      	ldr	r3, [r3, #4]
 800f23a:	889b      	ldrh	r3, [r3, #4]
 800f23c:	b29b      	uxth	r3, r3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d002      	beq.n	800f248 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 800f242:	2300      	movs	r3, #0
 800f244:	623b      	str	r3, [r7, #32]
 800f246:	e041      	b.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800f248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800f24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f252:	e012      	b.n	800f27a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 800f254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f256:	685b      	ldr	r3, [r3, #4]
 800f258:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800f25a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f25c:	88db      	ldrh	r3, [r3, #6]
 800f25e:	b29a      	uxth	r2, r3
 800f260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f262:	889b      	ldrh	r3, [r3, #4]
 800f264:	b29b      	uxth	r3, r3
 800f266:	429a      	cmp	r2, r3
 800f268:	d002      	beq.n	800f270 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 800f26a:	2300      	movs	r3, #0
 800f26c:	623b      	str	r3, [r7, #32]
            break;
 800f26e:	e007      	b.n	800f280 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 800f270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f272:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800f274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800f27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d1e9      	bne.n	800f254 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800f280:	6a3b      	ldr	r3, [r7, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d022      	beq.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	685b      	ldr	r3, [r3, #4]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 800f28e:	4b15      	ldr	r3, [pc, #84]	; (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f290:	f240 12df 	movw	r2, #479	; 0x1df
 800f294:	4917      	ldr	r1, [pc, #92]	; (800f2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f296:	4815      	ldr	r0, [pc, #84]	; (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f298:	f000 fc7c 	bl	800fb94 <iprintf>
          LWIP_ASSERT("sanity check",
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	685b      	ldr	r3, [r3, #4]
 800f2a0:	685b      	ldr	r3, [r3, #4]
 800f2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	d106      	bne.n	800f2b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 800f2a8:	4b0e      	ldr	r3, [pc, #56]	; (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2aa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f2ae:	4911      	ldr	r1, [pc, #68]	; (800f2f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800f2b0:	480e      	ldr	r0, [pc, #56]	; (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2b2:	f000 fc6f 	bl	800fb94 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800f2b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d006      	beq.n	800f2cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 800f2be:	4b09      	ldr	r3, [pc, #36]	; (800f2e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800f2c0:	f240 12e3 	movw	r2, #483	; 0x1e3
 800f2c4:	490c      	ldr	r1, [pc, #48]	; (800f2f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 800f2c6:	4809      	ldr	r0, [pc, #36]	; (800f2ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800f2c8:	f000 fc64 	bl	800fb94 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800f2cc:	6a3b      	ldr	r3, [r7, #32]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	bf14      	ite	ne
 800f2d2:	2301      	movne	r3, #1
 800f2d4:	2300      	moveq	r3, #0
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	e000      	b.n	800f2dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800f2da:	2300      	movs	r3, #0
}
 800f2dc:	4618      	mov	r0, r3
 800f2de:	3730      	adds	r7, #48	; 0x30
 800f2e0:	46bd      	mov	sp, r7
 800f2e2:	bd80      	pop	{r7, pc}
 800f2e4:	0801356c 	.word	0x0801356c
 800f2e8:	08013650 	.word	0x08013650
 800f2ec:	080135b4 	.word	0x080135b4
 800f2f0:	08013670 	.word	0x08013670
 800f2f4:	080136a8 	.word	0x080136a8
 800f2f8:	080136b8 	.word	0x080136b8

0800f2fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b08e      	sub	sp, #56	; 0x38
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	685b      	ldr	r3, [r3, #4]
 800f308:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 800f30a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	f003 030f 	and.w	r3, r3, #15
 800f312:	b2db      	uxtb	r3, r3
 800f314:	009b      	lsls	r3, r3, #2
 800f316:	b2db      	uxtb	r3, r3
 800f318:	2b14      	cmp	r3, #20
 800f31a:	f040 8167 	bne.w	800f5ec <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 800f31e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f320:	88db      	ldrh	r3, [r3, #6]
 800f322:	b29b      	uxth	r3, r3
 800f324:	4618      	mov	r0, r3
 800f326:	f7f4 f85f 	bl	80033e8 <lwip_htons>
 800f32a:	4603      	mov	r3, r0
 800f32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f330:	b29b      	uxth	r3, r3
 800f332:	00db      	lsls	r3, r3, #3
 800f334:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 800f336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f338:	885b      	ldrh	r3, [r3, #2]
 800f33a:	b29b      	uxth	r3, r3
 800f33c:	4618      	mov	r0, r3
 800f33e:	f7f4 f853 	bl	80033e8 <lwip_htons>
 800f342:	4603      	mov	r3, r0
 800f344:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 800f346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f348:	781b      	ldrb	r3, [r3, #0]
 800f34a:	f003 030f 	and.w	r3, r3, #15
 800f34e:	b2db      	uxtb	r3, r3
 800f350:	009b      	lsls	r3, r3, #2
 800f352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 800f356:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f35e:	429a      	cmp	r2, r3
 800f360:	f0c0 8146 	bcc.w	800f5f0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 800f364:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800f368:	b29b      	uxth	r3, r3
 800f36a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f7f5 fed1 	bl	8005118 <pbuf_clen>
 800f376:	4603      	mov	r3, r0
 800f378:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800f37a:	4ba3      	ldr	r3, [pc, #652]	; (800f608 <ip4_reass+0x30c>)
 800f37c:	881b      	ldrh	r3, [r3, #0]
 800f37e:	461a      	mov	r2, r3
 800f380:	8c3b      	ldrh	r3, [r7, #32]
 800f382:	4413      	add	r3, r2
 800f384:	2b0a      	cmp	r3, #10
 800f386:	dd10      	ble.n	800f3aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f388:	8c3b      	ldrh	r3, [r7, #32]
 800f38a:	4619      	mov	r1, r3
 800f38c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f38e:	f7ff fd81 	bl	800ee94 <ip_reass_remove_oldest_datagram>
 800f392:	4603      	mov	r3, r0
 800f394:	2b00      	cmp	r3, #0
 800f396:	f000 812d 	beq.w	800f5f4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800f39a:	4b9b      	ldr	r3, [pc, #620]	; (800f608 <ip4_reass+0x30c>)
 800f39c:	881b      	ldrh	r3, [r3, #0]
 800f39e:	461a      	mov	r2, r3
 800f3a0:	8c3b      	ldrh	r3, [r7, #32]
 800f3a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800f3a4:	2b0a      	cmp	r3, #10
 800f3a6:	f300 8125 	bgt.w	800f5f4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3aa:	4b98      	ldr	r3, [pc, #608]	; (800f60c <ip4_reass+0x310>)
 800f3ac:	681b      	ldr	r3, [r3, #0]
 800f3ae:	633b      	str	r3, [r7, #48]	; 0x30
 800f3b0:	e015      	b.n	800f3de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800f3b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b4:	695a      	ldr	r2, [r3, #20]
 800f3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d10c      	bne.n	800f3d8 <ip4_reass+0xdc>
 800f3be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c0:	699a      	ldr	r2, [r3, #24]
 800f3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3c4:	691b      	ldr	r3, [r3, #16]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d106      	bne.n	800f3d8 <ip4_reass+0xdc>
 800f3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3cc:	899a      	ldrh	r2, [r3, #12]
 800f3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3d0:	889b      	ldrh	r3, [r3, #4]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d006      	beq.n	800f3e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800f3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	633b      	str	r3, [r7, #48]	; 0x30
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d1e6      	bne.n	800f3b2 <ip4_reass+0xb6>
 800f3e4:	e000      	b.n	800f3e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800f3e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800f3e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d109      	bne.n	800f402 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800f3ee:	8c3b      	ldrh	r3, [r7, #32]
 800f3f0:	4619      	mov	r1, r3
 800f3f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f3f4:	f7ff fdb0 	bl	800ef58 <ip_reass_enqueue_new_datagram>
 800f3f8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800f3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d11c      	bne.n	800f43a <ip4_reass+0x13e>
      goto nullreturn;
 800f400:	e0f9      	b.n	800f5f6 <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f404:	88db      	ldrh	r3, [r3, #6]
 800f406:	b29b      	uxth	r3, r3
 800f408:	4618      	mov	r0, r3
 800f40a:	f7f3 ffed 	bl	80033e8 <lwip_htons>
 800f40e:	4603      	mov	r3, r0
 800f410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f414:	2b00      	cmp	r3, #0
 800f416:	d110      	bne.n	800f43a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800f418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f41a:	89db      	ldrh	r3, [r3, #14]
 800f41c:	4618      	mov	r0, r3
 800f41e:	f7f3 ffe3 	bl	80033e8 <lwip_htons>
 800f422:	4603      	mov	r3, r0
 800f424:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d006      	beq.n	800f43a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800f42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f42e:	3308      	adds	r3, #8
 800f430:	2214      	movs	r2, #20
 800f432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f434:	4618      	mov	r0, r3
 800f436:	f000 fb9a 	bl	800fb6e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800f43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f43c:	88db      	ldrh	r3, [r3, #6]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	f003 0320 	and.w	r3, r3, #32
 800f444:	2b00      	cmp	r3, #0
 800f446:	bf0c      	ite	eq
 800f448:	2301      	moveq	r3, #1
 800f44a:	2300      	movne	r3, #0
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800f450:	69fb      	ldr	r3, [r7, #28]
 800f452:	2b00      	cmp	r3, #0
 800f454:	d00e      	beq.n	800f474 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 800f456:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f45a:	4413      	add	r3, r2
 800f45c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800f45e:	8b7a      	ldrh	r2, [r7, #26]
 800f460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800f462:	429a      	cmp	r2, r3
 800f464:	f0c0 80a0 	bcc.w	800f5a8 <ip4_reass+0x2ac>
 800f468:	8b7b      	ldrh	r3, [r7, #26]
 800f46a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800f46e:	4293      	cmp	r3, r2
 800f470:	f200 809a 	bhi.w	800f5a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800f474:	69fa      	ldr	r2, [r7, #28]
 800f476:	6879      	ldr	r1, [r7, #4]
 800f478:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f47a:	f7ff fdd5 	bl	800f028 <ip_reass_chain_frag_into_datagram_and_validate>
 800f47e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800f480:	697b      	ldr	r3, [r7, #20]
 800f482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f486:	f000 8091 	beq.w	800f5ac <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800f48a:	4b5f      	ldr	r3, [pc, #380]	; (800f608 <ip4_reass+0x30c>)
 800f48c:	881a      	ldrh	r2, [r3, #0]
 800f48e:	8c3b      	ldrh	r3, [r7, #32]
 800f490:	4413      	add	r3, r2
 800f492:	b29a      	uxth	r2, r3
 800f494:	4b5c      	ldr	r3, [pc, #368]	; (800f608 <ip4_reass+0x30c>)
 800f496:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800f498:	69fb      	ldr	r3, [r7, #28]
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d00d      	beq.n	800f4ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 800f49e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800f4a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f4a2:	4413      	add	r3, r2
 800f4a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800f4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4a8:	8a7a      	ldrh	r2, [r7, #18]
 800f4aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800f4ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ae:	7f9b      	ldrb	r3, [r3, #30]
 800f4b0:	f043 0301 	orr.w	r3, r3, #1
 800f4b4:	b2da      	uxtb	r2, r3
 800f4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800f4ba:	697b      	ldr	r3, [r7, #20]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d171      	bne.n	800f5a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 800f4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4c2:	8b9b      	ldrh	r3, [r3, #28]
 800f4c4:	3314      	adds	r3, #20
 800f4c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 800f4c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ca:	685b      	ldr	r3, [r3, #4]
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 800f4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d4:	685b      	ldr	r3, [r3, #4]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800f4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4dc:	3308      	adds	r3, #8
 800f4de:	2214      	movs	r2, #20
 800f4e0:	4619      	mov	r1, r3
 800f4e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f4e4:	f000 fb43 	bl	800fb6e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 800f4e8:	8a3b      	ldrh	r3, [r7, #16]
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f7f3 ff7c 	bl	80033e8 <lwip_htons>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800f4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	719a      	strb	r2, [r3, #6]
 800f4fe:	2200      	movs	r2, #0
 800f500:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800f502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f504:	2200      	movs	r2, #0
 800f506:	729a      	strb	r2, [r3, #10]
 800f508:	2200      	movs	r2, #0
 800f50a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800f50c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f50e:	685b      	ldr	r3, [r3, #4]
 800f510:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800f512:	e00d      	b.n	800f530 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 800f514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f516:	685b      	ldr	r3, [r3, #4]
 800f518:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 800f51a:	2114      	movs	r1, #20
 800f51c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800f51e:	f7f5 fced 	bl	8004efc <pbuf_remove_header>
      pbuf_cat(p, r);
 800f522:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f7f5 fe31 	bl	800518c <pbuf_cat>
      r = iprh->next_pbuf;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	681b      	ldr	r3, [r3, #0]
 800f52e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800f530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f532:	2b00      	cmp	r3, #0
 800f534:	d1ee      	bne.n	800f514 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800f536:	4b35      	ldr	r3, [pc, #212]	; (800f60c <ip4_reass+0x310>)
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d102      	bne.n	800f546 <ip4_reass+0x24a>
      ipr_prev = NULL;
 800f540:	2300      	movs	r3, #0
 800f542:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f544:	e010      	b.n	800f568 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f546:	4b31      	ldr	r3, [pc, #196]	; (800f60c <ip4_reass+0x310>)
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f54c:	e007      	b.n	800f55e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 800f54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f554:	429a      	cmp	r2, r3
 800f556:	d006      	beq.n	800f566 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800f558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f560:	2b00      	cmp	r3, #0
 800f562:	d1f4      	bne.n	800f54e <ip4_reass+0x252>
 800f564:	e000      	b.n	800f568 <ip4_reass+0x26c>
          break;
 800f566:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800f568:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f56a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f56c:	f7ff fd2e 	bl	800efcc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 800f570:	6878      	ldr	r0, [r7, #4]
 800f572:	f7f5 fdd1 	bl	8005118 <pbuf_clen>
 800f576:	4603      	mov	r3, r0
 800f578:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 800f57a:	4b23      	ldr	r3, [pc, #140]	; (800f608 <ip4_reass+0x30c>)
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	8c3a      	ldrh	r2, [r7, #32]
 800f580:	429a      	cmp	r2, r3
 800f582:	d906      	bls.n	800f592 <ip4_reass+0x296>
 800f584:	4b22      	ldr	r3, [pc, #136]	; (800f610 <ip4_reass+0x314>)
 800f586:	f240 229b 	movw	r2, #667	; 0x29b
 800f58a:	4922      	ldr	r1, [pc, #136]	; (800f614 <ip4_reass+0x318>)
 800f58c:	4822      	ldr	r0, [pc, #136]	; (800f618 <ip4_reass+0x31c>)
 800f58e:	f000 fb01 	bl	800fb94 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 800f592:	4b1d      	ldr	r3, [pc, #116]	; (800f608 <ip4_reass+0x30c>)
 800f594:	881a      	ldrh	r2, [r3, #0]
 800f596:	8c3b      	ldrh	r3, [r7, #32]
 800f598:	1ad3      	subs	r3, r2, r3
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	4b1a      	ldr	r3, [pc, #104]	; (800f608 <ip4_reass+0x30c>)
 800f59e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	e02c      	b.n	800f5fe <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	e02a      	b.n	800f5fe <ip4_reass+0x302>

nullreturn_ipr:
 800f5a8:	bf00      	nop
 800f5aa:	e000      	b.n	800f5ae <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 800f5ac:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 800f5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d106      	bne.n	800f5c2 <ip4_reass+0x2c6>
 800f5b4:	4b16      	ldr	r3, [pc, #88]	; (800f610 <ip4_reass+0x314>)
 800f5b6:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f5ba:	4918      	ldr	r1, [pc, #96]	; (800f61c <ip4_reass+0x320>)
 800f5bc:	4816      	ldr	r0, [pc, #88]	; (800f618 <ip4_reass+0x31c>)
 800f5be:	f000 fae9 	bl	800fb94 <iprintf>
  if (ipr->p == NULL) {
 800f5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d114      	bne.n	800f5f4 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 800f5ca:	4b10      	ldr	r3, [pc, #64]	; (800f60c <ip4_reass+0x310>)
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d006      	beq.n	800f5e2 <ip4_reass+0x2e6>
 800f5d4:	4b0e      	ldr	r3, [pc, #56]	; (800f610 <ip4_reass+0x314>)
 800f5d6:	f240 22ab 	movw	r2, #683	; 0x2ab
 800f5da:	4911      	ldr	r1, [pc, #68]	; (800f620 <ip4_reass+0x324>)
 800f5dc:	480e      	ldr	r0, [pc, #56]	; (800f618 <ip4_reass+0x31c>)
 800f5de:	f000 fad9 	bl	800fb94 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 800f5e2:	2100      	movs	r1, #0
 800f5e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f5e6:	f7ff fcf1 	bl	800efcc <ip_reass_dequeue_datagram>
 800f5ea:	e004      	b.n	800f5f6 <ip4_reass+0x2fa>
    goto nullreturn;
 800f5ec:	bf00      	nop
 800f5ee:	e002      	b.n	800f5f6 <ip4_reass+0x2fa>
    goto nullreturn;
 800f5f0:	bf00      	nop
 800f5f2:	e000      	b.n	800f5f6 <ip4_reass+0x2fa>
  }

nullreturn:
 800f5f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f7f5 fd06 	bl	8005008 <pbuf_free>
  return NULL;
 800f5fc:	2300      	movs	r3, #0
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3738      	adds	r7, #56	; 0x38
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	200006a0 	.word	0x200006a0
 800f60c:	2000069c 	.word	0x2000069c
 800f610:	0801356c 	.word	0x0801356c
 800f614:	080136dc 	.word	0x080136dc
 800f618:	080135b4 	.word	0x080135b4
 800f61c:	080136f8 	.word	0x080136f8
 800f620:	08013704 	.word	0x08013704

0800f624 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 800f624:	b580      	push	{r7, lr}
 800f626:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 800f628:	2005      	movs	r0, #5
 800f62a:	f7f4 fe23 	bl	8004274 <memp_malloc>
 800f62e:	4603      	mov	r3, r0
}
 800f630:	4618      	mov	r0, r3
 800f632:	bd80      	pop	{r7, pc}

0800f634 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 800f634:	b580      	push	{r7, lr}
 800f636:	b082      	sub	sp, #8
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2b00      	cmp	r3, #0
 800f640:	d106      	bne.n	800f650 <ip_frag_free_pbuf_custom_ref+0x1c>
 800f642:	4b07      	ldr	r3, [pc, #28]	; (800f660 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800f644:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 800f648:	4906      	ldr	r1, [pc, #24]	; (800f664 <ip_frag_free_pbuf_custom_ref+0x30>)
 800f64a:	4807      	ldr	r0, [pc, #28]	; (800f668 <ip_frag_free_pbuf_custom_ref+0x34>)
 800f64c:	f000 faa2 	bl	800fb94 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800f650:	6879      	ldr	r1, [r7, #4]
 800f652:	2005      	movs	r0, #5
 800f654:	f7f4 fe5a 	bl	800430c <memp_free>
}
 800f658:	bf00      	nop
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}
 800f660:	0801356c 	.word	0x0801356c
 800f664:	08013724 	.word	0x08013724
 800f668:	080135b4 	.word	0x080135b4

0800f66c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b084      	sub	sp, #16
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d106      	bne.n	800f68c <ipfrag_free_pbuf_custom+0x20>
 800f67e:	4b11      	ldr	r3, [pc, #68]	; (800f6c4 <ipfrag_free_pbuf_custom+0x58>)
 800f680:	f240 22ce 	movw	r2, #718	; 0x2ce
 800f684:	4910      	ldr	r1, [pc, #64]	; (800f6c8 <ipfrag_free_pbuf_custom+0x5c>)
 800f686:	4811      	ldr	r0, [pc, #68]	; (800f6cc <ipfrag_free_pbuf_custom+0x60>)
 800f688:	f000 fa84 	bl	800fb94 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 800f68c:	68fa      	ldr	r2, [r7, #12]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	429a      	cmp	r2, r3
 800f692:	d006      	beq.n	800f6a2 <ipfrag_free_pbuf_custom+0x36>
 800f694:	4b0b      	ldr	r3, [pc, #44]	; (800f6c4 <ipfrag_free_pbuf_custom+0x58>)
 800f696:	f240 22cf 	movw	r2, #719	; 0x2cf
 800f69a:	490d      	ldr	r1, [pc, #52]	; (800f6d0 <ipfrag_free_pbuf_custom+0x64>)
 800f69c:	480b      	ldr	r0, [pc, #44]	; (800f6cc <ipfrag_free_pbuf_custom+0x60>)
 800f69e:	f000 fa79 	bl	800fb94 <iprintf>
  if (pcr->original != NULL) {
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	695b      	ldr	r3, [r3, #20]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d004      	beq.n	800f6b4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	695b      	ldr	r3, [r3, #20]
 800f6ae:	4618      	mov	r0, r3
 800f6b0:	f7f5 fcaa 	bl	8005008 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff ffbd 	bl	800f634 <ip_frag_free_pbuf_custom_ref>
}
 800f6ba:	bf00      	nop
 800f6bc:	3710      	adds	r7, #16
 800f6be:	46bd      	mov	sp, r7
 800f6c0:	bd80      	pop	{r7, pc}
 800f6c2:	bf00      	nop
 800f6c4:	0801356c 	.word	0x0801356c
 800f6c8:	08013730 	.word	0x08013730
 800f6cc:	080135b4 	.word	0x080135b4
 800f6d0:	0801373c 	.word	0x0801373c

0800f6d4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b094      	sub	sp, #80	; 0x50
 800f6d8:	af02      	add	r7, sp, #8
 800f6da:	60f8      	str	r0, [r7, #12]
 800f6dc:	60b9      	str	r1, [r7, #8]
 800f6de:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800f6e0:	2300      	movs	r3, #0
 800f6e2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 800f6e6:	68bb      	ldr	r3, [r7, #8]
 800f6e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6ea:	3b14      	subs	r3, #20
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	da00      	bge.n	800f6f2 <ip4_frag+0x1e>
 800f6f0:	3307      	adds	r3, #7
 800f6f2:	10db      	asrs	r3, r3, #3
 800f6f4:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800f6f6:	2314      	movs	r3, #20
 800f6f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	685b      	ldr	r3, [r3, #4]
 800f6fe:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 800f700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f702:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 800f704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f706:	781b      	ldrb	r3, [r3, #0]
 800f708:	f003 030f 	and.w	r3, r3, #15
 800f70c:	b2db      	uxtb	r3, r3
 800f70e:	009b      	lsls	r3, r3, #2
 800f710:	b2db      	uxtb	r3, r3
 800f712:	2b14      	cmp	r3, #20
 800f714:	d002      	beq.n	800f71c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 800f716:	f06f 0305 	mvn.w	r3, #5
 800f71a:	e10f      	b.n	800f93c <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	895b      	ldrh	r3, [r3, #10]
 800f720:	2b13      	cmp	r3, #19
 800f722:	d809      	bhi.n	800f738 <ip4_frag+0x64>
 800f724:	4b87      	ldr	r3, [pc, #540]	; (800f944 <ip4_frag+0x270>)
 800f726:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 800f72a:	4987      	ldr	r1, [pc, #540]	; (800f948 <ip4_frag+0x274>)
 800f72c:	4887      	ldr	r0, [pc, #540]	; (800f94c <ip4_frag+0x278>)
 800f72e:	f000 fa31 	bl	800fb94 <iprintf>
 800f732:	f06f 0305 	mvn.w	r3, #5
 800f736:	e101      	b.n	800f93c <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800f738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f73a:	88db      	ldrh	r3, [r3, #6]
 800f73c:	b29b      	uxth	r3, r3
 800f73e:	4618      	mov	r0, r3
 800f740:	f7f3 fe52 	bl	80033e8 <lwip_htons>
 800f744:	4603      	mov	r3, r0
 800f746:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 800f748:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f74a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f74e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 800f752:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f754:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f758:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	891b      	ldrh	r3, [r3, #8]
 800f75e:	3b14      	subs	r3, #20
 800f760:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 800f764:	e0e0      	b.n	800f928 <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 800f766:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f768:	00db      	lsls	r3, r3, #3
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f770:	4293      	cmp	r3, r2
 800f772:	bf28      	it	cs
 800f774:	4613      	movcs	r3, r2
 800f776:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800f778:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f77c:	2114      	movs	r1, #20
 800f77e:	200e      	movs	r0, #14
 800f780:	f7f5 f962 	bl	8004a48 <pbuf_alloc>
 800f784:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f788:	2b00      	cmp	r3, #0
 800f78a:	f000 80d4 	beq.w	800f936 <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800f78e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f790:	895b      	ldrh	r3, [r3, #10]
 800f792:	2b13      	cmp	r3, #19
 800f794:	d806      	bhi.n	800f7a4 <ip4_frag+0xd0>
 800f796:	4b6b      	ldr	r3, [pc, #428]	; (800f944 <ip4_frag+0x270>)
 800f798:	f240 3225 	movw	r2, #805	; 0x325
 800f79c:	496c      	ldr	r1, [pc, #432]	; (800f950 <ip4_frag+0x27c>)
 800f79e:	486b      	ldr	r0, [pc, #428]	; (800f94c <ip4_frag+0x278>)
 800f7a0:	f000 f9f8 	bl	800fb94 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800f7a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	2214      	movs	r2, #20
 800f7aa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f7ac:	4618      	mov	r0, r3
 800f7ae:	f000 f9de 	bl	800fb6e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	685b      	ldr	r3, [r3, #4]
 800f7b6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 800f7b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f7ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 800f7be:	e064      	b.n	800f88a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	895a      	ldrh	r2, [r3, #10]
 800f7c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f7c6:	1ad3      	subs	r3, r2, r3
 800f7c8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	895b      	ldrh	r3, [r3, #10]
 800f7ce:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d906      	bls.n	800f7e2 <ip4_frag+0x10e>
 800f7d4:	4b5b      	ldr	r3, [pc, #364]	; (800f944 <ip4_frag+0x270>)
 800f7d6:	f240 322d 	movw	r2, #813	; 0x32d
 800f7da:	495e      	ldr	r1, [pc, #376]	; (800f954 <ip4_frag+0x280>)
 800f7dc:	485b      	ldr	r0, [pc, #364]	; (800f94c <ip4_frag+0x278>)
 800f7de:	f000 f9d9 	bl	800fb94 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800f7e2:	8bfa      	ldrh	r2, [r7, #30]
 800f7e4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f7e8:	4293      	cmp	r3, r2
 800f7ea:	bf28      	it	cs
 800f7ec:	4613      	movcs	r3, r2
 800f7ee:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800f7f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d105      	bne.n	800f806 <ip4_frag+0x132>
        poff = 0;
 800f7fa:	2300      	movs	r3, #0
 800f7fc:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f7fe:	68fb      	ldr	r3, [r7, #12]
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	60fb      	str	r3, [r7, #12]
        continue;
 800f804:	e041      	b.n	800f88a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800f806:	f7ff ff0d 	bl	800f624 <ip_frag_alloc_pbuf_custom_ref>
 800f80a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800f80c:	69bb      	ldr	r3, [r7, #24]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d103      	bne.n	800f81a <ip4_frag+0x146>
        pbuf_free(rambuf);
 800f812:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f814:	f7f5 fbf8 	bl	8005008 <pbuf_free>
        goto memerr;
 800f818:	e08e      	b.n	800f938 <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f81a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800f820:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800f822:	4413      	add	r3, r2
 800f824:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 800f828:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f82c:	9201      	str	r2, [sp, #4]
 800f82e:	9300      	str	r3, [sp, #0]
 800f830:	4603      	mov	r3, r0
 800f832:	2241      	movs	r2, #65	; 0x41
 800f834:	2000      	movs	r0, #0
 800f836:	f7f5 fa2d 	bl	8004c94 <pbuf_alloced_custom>
 800f83a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800f83c:	697b      	ldr	r3, [r7, #20]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d106      	bne.n	800f850 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 800f842:	69b8      	ldr	r0, [r7, #24]
 800f844:	f7ff fef6 	bl	800f634 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800f848:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f84a:	f7f5 fbdd 	bl	8005008 <pbuf_free>
        goto memerr;
 800f84e:	e073      	b.n	800f938 <ip4_frag+0x264>
      }
      pbuf_ref(p);
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f7f5 fc79 	bl	8005148 <pbuf_ref>
      pcr->original = p;
 800f856:	69bb      	ldr	r3, [r7, #24]
 800f858:	68fa      	ldr	r2, [r7, #12]
 800f85a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800f85c:	69bb      	ldr	r3, [r7, #24]
 800f85e:	4a3e      	ldr	r2, [pc, #248]	; (800f958 <ip4_frag+0x284>)
 800f860:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800f862:	6979      	ldr	r1, [r7, #20]
 800f864:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f866:	f7f5 fc91 	bl	800518c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 800f86a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800f86e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f872:	1ad3      	subs	r3, r2, r3
 800f874:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 800f878:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d004      	beq.n	800f88a <ip4_frag+0x1b6>
        poff = 0;
 800f880:	2300      	movs	r3, #0
 800f882:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 800f884:	68fb      	ldr	r3, [r7, #12]
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800f88a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d196      	bne.n	800f7c0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 800f892:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800f894:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f898:	4413      	add	r3, r2
 800f89a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800f89c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f8a4:	3b14      	subs	r3, #20
 800f8a6:	429a      	cmp	r2, r3
 800f8a8:	bfd4      	ite	le
 800f8aa:	2301      	movle	r3, #1
 800f8ac:	2300      	movgt	r3, #0
 800f8ae:	b2db      	uxtb	r3, r3
 800f8b0:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800f8b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800f8b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f8ba:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 800f8bc:	6a3b      	ldr	r3, [r7, #32]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d002      	beq.n	800f8c8 <ip4_frag+0x1f4>
 800f8c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d003      	beq.n	800f8d0 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 800f8c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f8ce:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800f8d0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	f7f3 fd88 	bl	80033e8 <lwip_htons>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	461a      	mov	r2, r3
 800f8dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8de:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 800f8e0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f8e2:	3314      	adds	r3, #20
 800f8e4:	b29b      	uxth	r3, r3
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	f7f3 fd7e 	bl	80033e8 <lwip_htons>
 800f8ec:	4603      	mov	r3, r0
 800f8ee:	461a      	mov	r2, r3
 800f8f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f2:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800f8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f6:	2200      	movs	r2, #0
 800f8f8:	729a      	strb	r2, [r3, #10]
 800f8fa:	2200      	movs	r2, #0
 800f8fc:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	695b      	ldr	r3, [r3, #20]
 800f902:	687a      	ldr	r2, [r7, #4]
 800f904:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f906:	68b8      	ldr	r0, [r7, #8]
 800f908:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800f90a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f90c:	f7f5 fb7c 	bl	8005008 <pbuf_free>
    left = (u16_t)(left - fragsize);
 800f910:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f914:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f916:	1ad3      	subs	r3, r2, r3
 800f918:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 800f91c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800f920:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800f922:	4413      	add	r3, r2
 800f924:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 800f928:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	f47f af1a 	bne.w	800f766 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800f932:	2300      	movs	r3, #0
 800f934:	e002      	b.n	800f93c <ip4_frag+0x268>
      goto memerr;
 800f936:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800f938:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3748      	adds	r7, #72	; 0x48
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}
 800f944:	0801356c 	.word	0x0801356c
 800f948:	08013748 	.word	0x08013748
 800f94c:	080135b4 	.word	0x080135b4
 800f950:	08013764 	.word	0x08013764
 800f954:	08013784 	.word	0x08013784
 800f958:	0800f66d 	.word	0x0800f66d

0800f95c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 800f95c:	b580      	push	{r7, lr}
 800f95e:	b086      	sub	sp, #24
 800f960:	af00      	add	r7, sp, #0
 800f962:	6078      	str	r0, [r7, #4]
 800f964:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 800f966:	230e      	movs	r3, #14
 800f968:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	895b      	ldrh	r3, [r3, #10]
 800f96e:	2b0e      	cmp	r3, #14
 800f970:	d96e      	bls.n	800fa50 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	7bdb      	ldrb	r3, [r3, #15]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d106      	bne.n	800f988 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800f980:	3301      	adds	r3, #1
 800f982:	b2da      	uxtb	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	685b      	ldr	r3, [r3, #4]
 800f98c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 800f98e:	693b      	ldr	r3, [r7, #16]
 800f990:	7b1a      	ldrb	r2, [r3, #12]
 800f992:	7b5b      	ldrb	r3, [r3, #13]
 800f994:	021b      	lsls	r3, r3, #8
 800f996:	4313      	orrs	r3, r2
 800f998:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 800f99a:	693b      	ldr	r3, [r7, #16]
 800f99c:	781b      	ldrb	r3, [r3, #0]
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d023      	beq.n	800f9ee <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	781b      	ldrb	r3, [r3, #0]
 800f9aa:	2b01      	cmp	r3, #1
 800f9ac:	d10f      	bne.n	800f9ce <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	785b      	ldrb	r3, [r3, #1]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d11b      	bne.n	800f9ee <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 800f9b6:	693b      	ldr	r3, [r7, #16]
 800f9b8:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 800f9ba:	2b5e      	cmp	r3, #94	; 0x5e
 800f9bc:	d117      	bne.n	800f9ee <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	7b5b      	ldrb	r3, [r3, #13]
 800f9c2:	f043 0310 	orr.w	r3, r3, #16
 800f9c6:	b2da      	uxtb	r2, r3
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	735a      	strb	r2, [r3, #13]
 800f9cc:	e00f      	b.n	800f9ee <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 800f9ce:	693b      	ldr	r3, [r7, #16]
 800f9d0:	2206      	movs	r2, #6
 800f9d2:	4928      	ldr	r1, [pc, #160]	; (800fa74 <ethernet_input+0x118>)
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 f8bb 	bl	800fb50 <memcmp>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d106      	bne.n	800f9ee <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	7b5b      	ldrb	r3, [r3, #13]
 800f9e4:	f043 0308 	orr.w	r3, r3, #8
 800f9e8:	b2da      	uxtb	r2, r3
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 800f9ee:	89fb      	ldrh	r3, [r7, #14]
 800f9f0:	2b08      	cmp	r3, #8
 800f9f2:	d003      	beq.n	800f9fc <ethernet_input+0xa0>
 800f9f4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 800f9f8:	d014      	beq.n	800fa24 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 800f9fa:	e032      	b.n	800fa62 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800f9fc:	683b      	ldr	r3, [r7, #0]
 800f9fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa02:	f003 0308 	and.w	r3, r3, #8
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d024      	beq.n	800fa54 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa0a:	8afb      	ldrh	r3, [r7, #22]
 800fa0c:	4619      	mov	r1, r3
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f7f5 fa74 	bl	8004efc <pbuf_remove_header>
 800fa14:	4603      	mov	r3, r0
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d11e      	bne.n	800fa58 <ethernet_input+0xfc>
        ip4_input(p, netif);
 800fa1a:	6839      	ldr	r1, [r7, #0]
 800fa1c:	6878      	ldr	r0, [r7, #4]
 800fa1e:	f7fe ff0f 	bl	800e840 <ip4_input>
      break;
 800fa22:	e013      	b.n	800fa4c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fa2a:	f003 0308 	and.w	r3, r3, #8
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d014      	beq.n	800fa5c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 800fa32:	8afb      	ldrh	r3, [r7, #22]
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7f5 fa60 	bl	8004efc <pbuf_remove_header>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d10e      	bne.n	800fa60 <ethernet_input+0x104>
        etharp_input(p, netif);
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	6878      	ldr	r0, [r7, #4]
 800fa46:	f7fe f8ab 	bl	800dba0 <etharp_input>
      break;
 800fa4a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 800fa4c:	2300      	movs	r3, #0
 800fa4e:	e00c      	b.n	800fa6a <ethernet_input+0x10e>
    goto free_and_return;
 800fa50:	bf00      	nop
 800fa52:	e006      	b.n	800fa62 <ethernet_input+0x106>
        goto free_and_return;
 800fa54:	bf00      	nop
 800fa56:	e004      	b.n	800fa62 <ethernet_input+0x106>
        goto free_and_return;
 800fa58:	bf00      	nop
 800fa5a:	e002      	b.n	800fa62 <ethernet_input+0x106>
        goto free_and_return;
 800fa5c:	bf00      	nop
 800fa5e:	e000      	b.n	800fa62 <ethernet_input+0x106>
        goto free_and_return;
 800fa60:	bf00      	nop

free_and_return:
  pbuf_free(p);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f7f5 fad0 	bl	8005008 <pbuf_free>
  return ERR_OK;
 800fa68:	2300      	movs	r3, #0
}
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	3718      	adds	r7, #24
 800fa6e:	46bd      	mov	sp, r7
 800fa70:	bd80      	pop	{r7, pc}
 800fa72:	bf00      	nop
 800fa74:	08013928 	.word	0x08013928

0800fa78 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b086      	sub	sp, #24
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
 800fa84:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 800fa86:	8c3b      	ldrh	r3, [r7, #32]
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f7f3 fcad 	bl	80033e8 <lwip_htons>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 800fa92:	210e      	movs	r1, #14
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f7f5 fa21 	bl	8004edc <pbuf_add_header>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d125      	bne.n	800faec <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	685b      	ldr	r3, [r3, #4]
 800faa4:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 800faa6:	693b      	ldr	r3, [r7, #16]
 800faa8:	8afa      	ldrh	r2, [r7, #22]
 800faaa:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 800faac:	693b      	ldr	r3, [r7, #16]
 800faae:	2206      	movs	r2, #6
 800fab0:	6839      	ldr	r1, [r7, #0]
 800fab2:	4618      	mov	r0, r3
 800fab4:	f000 f85b 	bl	800fb6e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 800fab8:	693b      	ldr	r3, [r7, #16]
 800faba:	3306      	adds	r3, #6
 800fabc:	2206      	movs	r2, #6
 800fabe:	6879      	ldr	r1, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	f000 f854 	bl	800fb6e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 800fac6:	68fb      	ldr	r3, [r7, #12]
 800fac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800facc:	2b06      	cmp	r3, #6
 800face:	d006      	beq.n	800fade <ethernet_output+0x66>
 800fad0:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <ethernet_output+0x84>)
 800fad2:	f240 1233 	movw	r2, #307	; 0x133
 800fad6:	490a      	ldr	r1, [pc, #40]	; (800fb00 <ethernet_output+0x88>)
 800fad8:	480a      	ldr	r0, [pc, #40]	; (800fb04 <ethernet_output+0x8c>)
 800fada:	f000 f85b 	bl	800fb94 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 800fade:	68fb      	ldr	r3, [r7, #12]
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	68b9      	ldr	r1, [r7, #8]
 800fae4:	68f8      	ldr	r0, [r7, #12]
 800fae6:	4798      	blx	r3
 800fae8:	4603      	mov	r3, r0
 800faea:	e002      	b.n	800faf2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 800faec:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 800faee:	f06f 0301 	mvn.w	r3, #1
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3718      	adds	r7, #24
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}
 800fafa:	bf00      	nop
 800fafc:	08013794 	.word	0x08013794
 800fb00:	080137cc 	.word	0x080137cc
 800fb04:	08013800 	.word	0x08013800

0800fb08 <__libc_init_array>:
 800fb08:	b570      	push	{r4, r5, r6, lr}
 800fb0a:	4e0d      	ldr	r6, [pc, #52]	; (800fb40 <__libc_init_array+0x38>)
 800fb0c:	4c0d      	ldr	r4, [pc, #52]	; (800fb44 <__libc_init_array+0x3c>)
 800fb0e:	1ba4      	subs	r4, r4, r6
 800fb10:	10a4      	asrs	r4, r4, #2
 800fb12:	2500      	movs	r5, #0
 800fb14:	42a5      	cmp	r5, r4
 800fb16:	d109      	bne.n	800fb2c <__libc_init_array+0x24>
 800fb18:	4e0b      	ldr	r6, [pc, #44]	; (800fb48 <__libc_init_array+0x40>)
 800fb1a:	4c0c      	ldr	r4, [pc, #48]	; (800fb4c <__libc_init_array+0x44>)
 800fb1c:	f000 ff5a 	bl	80109d4 <_init>
 800fb20:	1ba4      	subs	r4, r4, r6
 800fb22:	10a4      	asrs	r4, r4, #2
 800fb24:	2500      	movs	r5, #0
 800fb26:	42a5      	cmp	r5, r4
 800fb28:	d105      	bne.n	800fb36 <__libc_init_array+0x2e>
 800fb2a:	bd70      	pop	{r4, r5, r6, pc}
 800fb2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb30:	4798      	blx	r3
 800fb32:	3501      	adds	r5, #1
 800fb34:	e7ee      	b.n	800fb14 <__libc_init_array+0xc>
 800fb36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800fb3a:	4798      	blx	r3
 800fb3c:	3501      	adds	r5, #1
 800fb3e:	e7f2      	b.n	800fb26 <__libc_init_array+0x1e>
 800fb40:	080139d8 	.word	0x080139d8
 800fb44:	080139d8 	.word	0x080139d8
 800fb48:	080139d8 	.word	0x080139d8
 800fb4c:	080139dc 	.word	0x080139dc

0800fb50 <memcmp>:
 800fb50:	b530      	push	{r4, r5, lr}
 800fb52:	2400      	movs	r4, #0
 800fb54:	42a2      	cmp	r2, r4
 800fb56:	d101      	bne.n	800fb5c <memcmp+0xc>
 800fb58:	2000      	movs	r0, #0
 800fb5a:	e007      	b.n	800fb6c <memcmp+0x1c>
 800fb5c:	5d03      	ldrb	r3, [r0, r4]
 800fb5e:	3401      	adds	r4, #1
 800fb60:	190d      	adds	r5, r1, r4
 800fb62:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800fb66:	42ab      	cmp	r3, r5
 800fb68:	d0f4      	beq.n	800fb54 <memcmp+0x4>
 800fb6a:	1b58      	subs	r0, r3, r5
 800fb6c:	bd30      	pop	{r4, r5, pc}

0800fb6e <memcpy>:
 800fb6e:	b510      	push	{r4, lr}
 800fb70:	1e43      	subs	r3, r0, #1
 800fb72:	440a      	add	r2, r1
 800fb74:	4291      	cmp	r1, r2
 800fb76:	d100      	bne.n	800fb7a <memcpy+0xc>
 800fb78:	bd10      	pop	{r4, pc}
 800fb7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb82:	e7f7      	b.n	800fb74 <memcpy+0x6>

0800fb84 <memset>:
 800fb84:	4402      	add	r2, r0
 800fb86:	4603      	mov	r3, r0
 800fb88:	4293      	cmp	r3, r2
 800fb8a:	d100      	bne.n	800fb8e <memset+0xa>
 800fb8c:	4770      	bx	lr
 800fb8e:	f803 1b01 	strb.w	r1, [r3], #1
 800fb92:	e7f9      	b.n	800fb88 <memset+0x4>

0800fb94 <iprintf>:
 800fb94:	b40f      	push	{r0, r1, r2, r3}
 800fb96:	4b0a      	ldr	r3, [pc, #40]	; (800fbc0 <iprintf+0x2c>)
 800fb98:	b513      	push	{r0, r1, r4, lr}
 800fb9a:	681c      	ldr	r4, [r3, #0]
 800fb9c:	b124      	cbz	r4, 800fba8 <iprintf+0x14>
 800fb9e:	69a3      	ldr	r3, [r4, #24]
 800fba0:	b913      	cbnz	r3, 800fba8 <iprintf+0x14>
 800fba2:	4620      	mov	r0, r4
 800fba4:	f000 f882 	bl	800fcac <__sinit>
 800fba8:	ab05      	add	r3, sp, #20
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	68a1      	ldr	r1, [r4, #8]
 800fbae:	9301      	str	r3, [sp, #4]
 800fbb0:	4620      	mov	r0, r4
 800fbb2:	f000 f9df 	bl	800ff74 <_vfiprintf_r>
 800fbb6:	b002      	add	sp, #8
 800fbb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fbbc:	b004      	add	sp, #16
 800fbbe:	4770      	bx	lr
 800fbc0:	20000018 	.word	0x20000018

0800fbc4 <rand>:
 800fbc4:	b538      	push	{r3, r4, r5, lr}
 800fbc6:	4b13      	ldr	r3, [pc, #76]	; (800fc14 <rand+0x50>)
 800fbc8:	681c      	ldr	r4, [r3, #0]
 800fbca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800fbcc:	b97b      	cbnz	r3, 800fbee <rand+0x2a>
 800fbce:	2018      	movs	r0, #24
 800fbd0:	f000 f8f6 	bl	800fdc0 <malloc>
 800fbd4:	4a10      	ldr	r2, [pc, #64]	; (800fc18 <rand+0x54>)
 800fbd6:	4b11      	ldr	r3, [pc, #68]	; (800fc1c <rand+0x58>)
 800fbd8:	63a0      	str	r0, [r4, #56]	; 0x38
 800fbda:	e9c0 2300 	strd	r2, r3, [r0]
 800fbde:	4b10      	ldr	r3, [pc, #64]	; (800fc20 <rand+0x5c>)
 800fbe0:	6083      	str	r3, [r0, #8]
 800fbe2:	230b      	movs	r3, #11
 800fbe4:	8183      	strh	r3, [r0, #12]
 800fbe6:	2201      	movs	r2, #1
 800fbe8:	2300      	movs	r3, #0
 800fbea:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800fbee:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800fbf0:	480c      	ldr	r0, [pc, #48]	; (800fc24 <rand+0x60>)
 800fbf2:	690a      	ldr	r2, [r1, #16]
 800fbf4:	694b      	ldr	r3, [r1, #20]
 800fbf6:	4c0c      	ldr	r4, [pc, #48]	; (800fc28 <rand+0x64>)
 800fbf8:	4350      	muls	r0, r2
 800fbfa:	fb04 0003 	mla	r0, r4, r3, r0
 800fbfe:	fba2 2304 	umull	r2, r3, r2, r4
 800fc02:	4403      	add	r3, r0
 800fc04:	1c54      	adds	r4, r2, #1
 800fc06:	f143 0500 	adc.w	r5, r3, #0
 800fc0a:	e9c1 4504 	strd	r4, r5, [r1, #16]
 800fc0e:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20000018 	.word	0x20000018
 800fc18:	abcd330e 	.word	0xabcd330e
 800fc1c:	e66d1234 	.word	0xe66d1234
 800fc20:	0005deec 	.word	0x0005deec
 800fc24:	5851f42d 	.word	0x5851f42d
 800fc28:	4c957f2d 	.word	0x4c957f2d

0800fc2c <std>:
 800fc2c:	2300      	movs	r3, #0
 800fc2e:	b510      	push	{r4, lr}
 800fc30:	4604      	mov	r4, r0
 800fc32:	e9c0 3300 	strd	r3, r3, [r0]
 800fc36:	6083      	str	r3, [r0, #8]
 800fc38:	8181      	strh	r1, [r0, #12]
 800fc3a:	6643      	str	r3, [r0, #100]	; 0x64
 800fc3c:	81c2      	strh	r2, [r0, #14]
 800fc3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fc42:	6183      	str	r3, [r0, #24]
 800fc44:	4619      	mov	r1, r3
 800fc46:	2208      	movs	r2, #8
 800fc48:	305c      	adds	r0, #92	; 0x5c
 800fc4a:	f7ff ff9b 	bl	800fb84 <memset>
 800fc4e:	4b05      	ldr	r3, [pc, #20]	; (800fc64 <std+0x38>)
 800fc50:	6263      	str	r3, [r4, #36]	; 0x24
 800fc52:	4b05      	ldr	r3, [pc, #20]	; (800fc68 <std+0x3c>)
 800fc54:	62a3      	str	r3, [r4, #40]	; 0x28
 800fc56:	4b05      	ldr	r3, [pc, #20]	; (800fc6c <std+0x40>)
 800fc58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fc5a:	4b05      	ldr	r3, [pc, #20]	; (800fc70 <std+0x44>)
 800fc5c:	6224      	str	r4, [r4, #32]
 800fc5e:	6323      	str	r3, [r4, #48]	; 0x30
 800fc60:	bd10      	pop	{r4, pc}
 800fc62:	bf00      	nop
 800fc64:	080104d1 	.word	0x080104d1
 800fc68:	080104f3 	.word	0x080104f3
 800fc6c:	0801052b 	.word	0x0801052b
 800fc70:	0801054f 	.word	0x0801054f

0800fc74 <_cleanup_r>:
 800fc74:	4901      	ldr	r1, [pc, #4]	; (800fc7c <_cleanup_r+0x8>)
 800fc76:	f000 b885 	b.w	800fd84 <_fwalk_reent>
 800fc7a:	bf00      	nop
 800fc7c:	08010829 	.word	0x08010829

0800fc80 <__sfmoreglue>:
 800fc80:	b570      	push	{r4, r5, r6, lr}
 800fc82:	1e4a      	subs	r2, r1, #1
 800fc84:	2568      	movs	r5, #104	; 0x68
 800fc86:	4355      	muls	r5, r2
 800fc88:	460e      	mov	r6, r1
 800fc8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fc8e:	f000 f8ed 	bl	800fe6c <_malloc_r>
 800fc92:	4604      	mov	r4, r0
 800fc94:	b140      	cbz	r0, 800fca8 <__sfmoreglue+0x28>
 800fc96:	2100      	movs	r1, #0
 800fc98:	e9c0 1600 	strd	r1, r6, [r0]
 800fc9c:	300c      	adds	r0, #12
 800fc9e:	60a0      	str	r0, [r4, #8]
 800fca0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fca4:	f7ff ff6e 	bl	800fb84 <memset>
 800fca8:	4620      	mov	r0, r4
 800fcaa:	bd70      	pop	{r4, r5, r6, pc}

0800fcac <__sinit>:
 800fcac:	6983      	ldr	r3, [r0, #24]
 800fcae:	b510      	push	{r4, lr}
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	bb33      	cbnz	r3, 800fd02 <__sinit+0x56>
 800fcb4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800fcb8:	6503      	str	r3, [r0, #80]	; 0x50
 800fcba:	4b12      	ldr	r3, [pc, #72]	; (800fd04 <__sinit+0x58>)
 800fcbc:	4a12      	ldr	r2, [pc, #72]	; (800fd08 <__sinit+0x5c>)
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	6282      	str	r2, [r0, #40]	; 0x28
 800fcc2:	4298      	cmp	r0, r3
 800fcc4:	bf04      	itt	eq
 800fcc6:	2301      	moveq	r3, #1
 800fcc8:	6183      	streq	r3, [r0, #24]
 800fcca:	f000 f81f 	bl	800fd0c <__sfp>
 800fcce:	6060      	str	r0, [r4, #4]
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	f000 f81b 	bl	800fd0c <__sfp>
 800fcd6:	60a0      	str	r0, [r4, #8]
 800fcd8:	4620      	mov	r0, r4
 800fcda:	f000 f817 	bl	800fd0c <__sfp>
 800fcde:	2200      	movs	r2, #0
 800fce0:	60e0      	str	r0, [r4, #12]
 800fce2:	2104      	movs	r1, #4
 800fce4:	6860      	ldr	r0, [r4, #4]
 800fce6:	f7ff ffa1 	bl	800fc2c <std>
 800fcea:	2201      	movs	r2, #1
 800fcec:	2109      	movs	r1, #9
 800fcee:	68a0      	ldr	r0, [r4, #8]
 800fcf0:	f7ff ff9c 	bl	800fc2c <std>
 800fcf4:	2202      	movs	r2, #2
 800fcf6:	2112      	movs	r1, #18
 800fcf8:	68e0      	ldr	r0, [r4, #12]
 800fcfa:	f7ff ff97 	bl	800fc2c <std>
 800fcfe:	2301      	movs	r3, #1
 800fd00:	61a3      	str	r3, [r4, #24]
 800fd02:	bd10      	pop	{r4, pc}
 800fd04:	08013938 	.word	0x08013938
 800fd08:	0800fc75 	.word	0x0800fc75

0800fd0c <__sfp>:
 800fd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd0e:	4b1b      	ldr	r3, [pc, #108]	; (800fd7c <__sfp+0x70>)
 800fd10:	681e      	ldr	r6, [r3, #0]
 800fd12:	69b3      	ldr	r3, [r6, #24]
 800fd14:	4607      	mov	r7, r0
 800fd16:	b913      	cbnz	r3, 800fd1e <__sfp+0x12>
 800fd18:	4630      	mov	r0, r6
 800fd1a:	f7ff ffc7 	bl	800fcac <__sinit>
 800fd1e:	3648      	adds	r6, #72	; 0x48
 800fd20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fd24:	3b01      	subs	r3, #1
 800fd26:	d503      	bpl.n	800fd30 <__sfp+0x24>
 800fd28:	6833      	ldr	r3, [r6, #0]
 800fd2a:	b133      	cbz	r3, 800fd3a <__sfp+0x2e>
 800fd2c:	6836      	ldr	r6, [r6, #0]
 800fd2e:	e7f7      	b.n	800fd20 <__sfp+0x14>
 800fd30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fd34:	b16d      	cbz	r5, 800fd52 <__sfp+0x46>
 800fd36:	3468      	adds	r4, #104	; 0x68
 800fd38:	e7f4      	b.n	800fd24 <__sfp+0x18>
 800fd3a:	2104      	movs	r1, #4
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f7ff ff9f 	bl	800fc80 <__sfmoreglue>
 800fd42:	6030      	str	r0, [r6, #0]
 800fd44:	2800      	cmp	r0, #0
 800fd46:	d1f1      	bne.n	800fd2c <__sfp+0x20>
 800fd48:	230c      	movs	r3, #12
 800fd4a:	603b      	str	r3, [r7, #0]
 800fd4c:	4604      	mov	r4, r0
 800fd4e:	4620      	mov	r0, r4
 800fd50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd52:	4b0b      	ldr	r3, [pc, #44]	; (800fd80 <__sfp+0x74>)
 800fd54:	6665      	str	r5, [r4, #100]	; 0x64
 800fd56:	e9c4 5500 	strd	r5, r5, [r4]
 800fd5a:	60a5      	str	r5, [r4, #8]
 800fd5c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800fd60:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800fd64:	2208      	movs	r2, #8
 800fd66:	4629      	mov	r1, r5
 800fd68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fd6c:	f7ff ff0a 	bl	800fb84 <memset>
 800fd70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fd74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fd78:	e7e9      	b.n	800fd4e <__sfp+0x42>
 800fd7a:	bf00      	nop
 800fd7c:	08013938 	.word	0x08013938
 800fd80:	ffff0001 	.word	0xffff0001

0800fd84 <_fwalk_reent>:
 800fd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd88:	4680      	mov	r8, r0
 800fd8a:	4689      	mov	r9, r1
 800fd8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800fd90:	2600      	movs	r6, #0
 800fd92:	b914      	cbnz	r4, 800fd9a <_fwalk_reent+0x16>
 800fd94:	4630      	mov	r0, r6
 800fd96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd9a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800fd9e:	3f01      	subs	r7, #1
 800fda0:	d501      	bpl.n	800fda6 <_fwalk_reent+0x22>
 800fda2:	6824      	ldr	r4, [r4, #0]
 800fda4:	e7f5      	b.n	800fd92 <_fwalk_reent+0xe>
 800fda6:	89ab      	ldrh	r3, [r5, #12]
 800fda8:	2b01      	cmp	r3, #1
 800fdaa:	d907      	bls.n	800fdbc <_fwalk_reent+0x38>
 800fdac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fdb0:	3301      	adds	r3, #1
 800fdb2:	d003      	beq.n	800fdbc <_fwalk_reent+0x38>
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4640      	mov	r0, r8
 800fdb8:	47c8      	blx	r9
 800fdba:	4306      	orrs	r6, r0
 800fdbc:	3568      	adds	r5, #104	; 0x68
 800fdbe:	e7ee      	b.n	800fd9e <_fwalk_reent+0x1a>

0800fdc0 <malloc>:
 800fdc0:	4b02      	ldr	r3, [pc, #8]	; (800fdcc <malloc+0xc>)
 800fdc2:	4601      	mov	r1, r0
 800fdc4:	6818      	ldr	r0, [r3, #0]
 800fdc6:	f000 b851 	b.w	800fe6c <_malloc_r>
 800fdca:	bf00      	nop
 800fdcc:	20000018 	.word	0x20000018

0800fdd0 <_free_r>:
 800fdd0:	b538      	push	{r3, r4, r5, lr}
 800fdd2:	4605      	mov	r5, r0
 800fdd4:	2900      	cmp	r1, #0
 800fdd6:	d045      	beq.n	800fe64 <_free_r+0x94>
 800fdd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fddc:	1f0c      	subs	r4, r1, #4
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	bfb8      	it	lt
 800fde2:	18e4      	addlt	r4, r4, r3
 800fde4:	f000 fdc0 	bl	8010968 <__malloc_lock>
 800fde8:	4a1f      	ldr	r2, [pc, #124]	; (800fe68 <_free_r+0x98>)
 800fdea:	6813      	ldr	r3, [r2, #0]
 800fdec:	4610      	mov	r0, r2
 800fdee:	b933      	cbnz	r3, 800fdfe <_free_r+0x2e>
 800fdf0:	6063      	str	r3, [r4, #4]
 800fdf2:	6014      	str	r4, [r2, #0]
 800fdf4:	4628      	mov	r0, r5
 800fdf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fdfa:	f000 bdb6 	b.w	801096a <__malloc_unlock>
 800fdfe:	42a3      	cmp	r3, r4
 800fe00:	d90c      	bls.n	800fe1c <_free_r+0x4c>
 800fe02:	6821      	ldr	r1, [r4, #0]
 800fe04:	1862      	adds	r2, r4, r1
 800fe06:	4293      	cmp	r3, r2
 800fe08:	bf04      	itt	eq
 800fe0a:	681a      	ldreq	r2, [r3, #0]
 800fe0c:	685b      	ldreq	r3, [r3, #4]
 800fe0e:	6063      	str	r3, [r4, #4]
 800fe10:	bf04      	itt	eq
 800fe12:	1852      	addeq	r2, r2, r1
 800fe14:	6022      	streq	r2, [r4, #0]
 800fe16:	6004      	str	r4, [r0, #0]
 800fe18:	e7ec      	b.n	800fdf4 <_free_r+0x24>
 800fe1a:	4613      	mov	r3, r2
 800fe1c:	685a      	ldr	r2, [r3, #4]
 800fe1e:	b10a      	cbz	r2, 800fe24 <_free_r+0x54>
 800fe20:	42a2      	cmp	r2, r4
 800fe22:	d9fa      	bls.n	800fe1a <_free_r+0x4a>
 800fe24:	6819      	ldr	r1, [r3, #0]
 800fe26:	1858      	adds	r0, r3, r1
 800fe28:	42a0      	cmp	r0, r4
 800fe2a:	d10b      	bne.n	800fe44 <_free_r+0x74>
 800fe2c:	6820      	ldr	r0, [r4, #0]
 800fe2e:	4401      	add	r1, r0
 800fe30:	1858      	adds	r0, r3, r1
 800fe32:	4282      	cmp	r2, r0
 800fe34:	6019      	str	r1, [r3, #0]
 800fe36:	d1dd      	bne.n	800fdf4 <_free_r+0x24>
 800fe38:	6810      	ldr	r0, [r2, #0]
 800fe3a:	6852      	ldr	r2, [r2, #4]
 800fe3c:	605a      	str	r2, [r3, #4]
 800fe3e:	4401      	add	r1, r0
 800fe40:	6019      	str	r1, [r3, #0]
 800fe42:	e7d7      	b.n	800fdf4 <_free_r+0x24>
 800fe44:	d902      	bls.n	800fe4c <_free_r+0x7c>
 800fe46:	230c      	movs	r3, #12
 800fe48:	602b      	str	r3, [r5, #0]
 800fe4a:	e7d3      	b.n	800fdf4 <_free_r+0x24>
 800fe4c:	6820      	ldr	r0, [r4, #0]
 800fe4e:	1821      	adds	r1, r4, r0
 800fe50:	428a      	cmp	r2, r1
 800fe52:	bf04      	itt	eq
 800fe54:	6811      	ldreq	r1, [r2, #0]
 800fe56:	6852      	ldreq	r2, [r2, #4]
 800fe58:	6062      	str	r2, [r4, #4]
 800fe5a:	bf04      	itt	eq
 800fe5c:	1809      	addeq	r1, r1, r0
 800fe5e:	6021      	streq	r1, [r4, #0]
 800fe60:	605c      	str	r4, [r3, #4]
 800fe62:	e7c7      	b.n	800fdf4 <_free_r+0x24>
 800fe64:	bd38      	pop	{r3, r4, r5, pc}
 800fe66:	bf00      	nop
 800fe68:	200006a4 	.word	0x200006a4

0800fe6c <_malloc_r>:
 800fe6c:	b570      	push	{r4, r5, r6, lr}
 800fe6e:	1ccd      	adds	r5, r1, #3
 800fe70:	f025 0503 	bic.w	r5, r5, #3
 800fe74:	3508      	adds	r5, #8
 800fe76:	2d0c      	cmp	r5, #12
 800fe78:	bf38      	it	cc
 800fe7a:	250c      	movcc	r5, #12
 800fe7c:	2d00      	cmp	r5, #0
 800fe7e:	4606      	mov	r6, r0
 800fe80:	db01      	blt.n	800fe86 <_malloc_r+0x1a>
 800fe82:	42a9      	cmp	r1, r5
 800fe84:	d903      	bls.n	800fe8e <_malloc_r+0x22>
 800fe86:	230c      	movs	r3, #12
 800fe88:	6033      	str	r3, [r6, #0]
 800fe8a:	2000      	movs	r0, #0
 800fe8c:	bd70      	pop	{r4, r5, r6, pc}
 800fe8e:	f000 fd6b 	bl	8010968 <__malloc_lock>
 800fe92:	4a21      	ldr	r2, [pc, #132]	; (800ff18 <_malloc_r+0xac>)
 800fe94:	6814      	ldr	r4, [r2, #0]
 800fe96:	4621      	mov	r1, r4
 800fe98:	b991      	cbnz	r1, 800fec0 <_malloc_r+0x54>
 800fe9a:	4c20      	ldr	r4, [pc, #128]	; (800ff1c <_malloc_r+0xb0>)
 800fe9c:	6823      	ldr	r3, [r4, #0]
 800fe9e:	b91b      	cbnz	r3, 800fea8 <_malloc_r+0x3c>
 800fea0:	4630      	mov	r0, r6
 800fea2:	f000 fb05 	bl	80104b0 <_sbrk_r>
 800fea6:	6020      	str	r0, [r4, #0]
 800fea8:	4629      	mov	r1, r5
 800feaa:	4630      	mov	r0, r6
 800feac:	f000 fb00 	bl	80104b0 <_sbrk_r>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d124      	bne.n	800fefe <_malloc_r+0x92>
 800feb4:	230c      	movs	r3, #12
 800feb6:	6033      	str	r3, [r6, #0]
 800feb8:	4630      	mov	r0, r6
 800feba:	f000 fd56 	bl	801096a <__malloc_unlock>
 800febe:	e7e4      	b.n	800fe8a <_malloc_r+0x1e>
 800fec0:	680b      	ldr	r3, [r1, #0]
 800fec2:	1b5b      	subs	r3, r3, r5
 800fec4:	d418      	bmi.n	800fef8 <_malloc_r+0x8c>
 800fec6:	2b0b      	cmp	r3, #11
 800fec8:	d90f      	bls.n	800feea <_malloc_r+0x7e>
 800feca:	600b      	str	r3, [r1, #0]
 800fecc:	50cd      	str	r5, [r1, r3]
 800fece:	18cc      	adds	r4, r1, r3
 800fed0:	4630      	mov	r0, r6
 800fed2:	f000 fd4a 	bl	801096a <__malloc_unlock>
 800fed6:	f104 000b 	add.w	r0, r4, #11
 800feda:	1d23      	adds	r3, r4, #4
 800fedc:	f020 0007 	bic.w	r0, r0, #7
 800fee0:	1ac3      	subs	r3, r0, r3
 800fee2:	d0d3      	beq.n	800fe8c <_malloc_r+0x20>
 800fee4:	425a      	negs	r2, r3
 800fee6:	50e2      	str	r2, [r4, r3]
 800fee8:	e7d0      	b.n	800fe8c <_malloc_r+0x20>
 800feea:	428c      	cmp	r4, r1
 800feec:	684b      	ldr	r3, [r1, #4]
 800feee:	bf16      	itet	ne
 800fef0:	6063      	strne	r3, [r4, #4]
 800fef2:	6013      	streq	r3, [r2, #0]
 800fef4:	460c      	movne	r4, r1
 800fef6:	e7eb      	b.n	800fed0 <_malloc_r+0x64>
 800fef8:	460c      	mov	r4, r1
 800fefa:	6849      	ldr	r1, [r1, #4]
 800fefc:	e7cc      	b.n	800fe98 <_malloc_r+0x2c>
 800fefe:	1cc4      	adds	r4, r0, #3
 800ff00:	f024 0403 	bic.w	r4, r4, #3
 800ff04:	42a0      	cmp	r0, r4
 800ff06:	d005      	beq.n	800ff14 <_malloc_r+0xa8>
 800ff08:	1a21      	subs	r1, r4, r0
 800ff0a:	4630      	mov	r0, r6
 800ff0c:	f000 fad0 	bl	80104b0 <_sbrk_r>
 800ff10:	3001      	adds	r0, #1
 800ff12:	d0cf      	beq.n	800feb4 <_malloc_r+0x48>
 800ff14:	6025      	str	r5, [r4, #0]
 800ff16:	e7db      	b.n	800fed0 <_malloc_r+0x64>
 800ff18:	200006a4 	.word	0x200006a4
 800ff1c:	200006a8 	.word	0x200006a8

0800ff20 <__sfputc_r>:
 800ff20:	6893      	ldr	r3, [r2, #8]
 800ff22:	3b01      	subs	r3, #1
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	b410      	push	{r4}
 800ff28:	6093      	str	r3, [r2, #8]
 800ff2a:	da08      	bge.n	800ff3e <__sfputc_r+0x1e>
 800ff2c:	6994      	ldr	r4, [r2, #24]
 800ff2e:	42a3      	cmp	r3, r4
 800ff30:	db01      	blt.n	800ff36 <__sfputc_r+0x16>
 800ff32:	290a      	cmp	r1, #10
 800ff34:	d103      	bne.n	800ff3e <__sfputc_r+0x1e>
 800ff36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff3a:	f000 bb0d 	b.w	8010558 <__swbuf_r>
 800ff3e:	6813      	ldr	r3, [r2, #0]
 800ff40:	1c58      	adds	r0, r3, #1
 800ff42:	6010      	str	r0, [r2, #0]
 800ff44:	7019      	strb	r1, [r3, #0]
 800ff46:	4608      	mov	r0, r1
 800ff48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff4c:	4770      	bx	lr

0800ff4e <__sfputs_r>:
 800ff4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff50:	4606      	mov	r6, r0
 800ff52:	460f      	mov	r7, r1
 800ff54:	4614      	mov	r4, r2
 800ff56:	18d5      	adds	r5, r2, r3
 800ff58:	42ac      	cmp	r4, r5
 800ff5a:	d101      	bne.n	800ff60 <__sfputs_r+0x12>
 800ff5c:	2000      	movs	r0, #0
 800ff5e:	e007      	b.n	800ff70 <__sfputs_r+0x22>
 800ff60:	463a      	mov	r2, r7
 800ff62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff66:	4630      	mov	r0, r6
 800ff68:	f7ff ffda 	bl	800ff20 <__sfputc_r>
 800ff6c:	1c43      	adds	r3, r0, #1
 800ff6e:	d1f3      	bne.n	800ff58 <__sfputs_r+0xa>
 800ff70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ff74 <_vfiprintf_r>:
 800ff74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff78:	460c      	mov	r4, r1
 800ff7a:	b09d      	sub	sp, #116	; 0x74
 800ff7c:	4617      	mov	r7, r2
 800ff7e:	461d      	mov	r5, r3
 800ff80:	4606      	mov	r6, r0
 800ff82:	b118      	cbz	r0, 800ff8c <_vfiprintf_r+0x18>
 800ff84:	6983      	ldr	r3, [r0, #24]
 800ff86:	b90b      	cbnz	r3, 800ff8c <_vfiprintf_r+0x18>
 800ff88:	f7ff fe90 	bl	800fcac <__sinit>
 800ff8c:	4b7c      	ldr	r3, [pc, #496]	; (8010180 <_vfiprintf_r+0x20c>)
 800ff8e:	429c      	cmp	r4, r3
 800ff90:	d158      	bne.n	8010044 <_vfiprintf_r+0xd0>
 800ff92:	6874      	ldr	r4, [r6, #4]
 800ff94:	89a3      	ldrh	r3, [r4, #12]
 800ff96:	0718      	lsls	r0, r3, #28
 800ff98:	d55e      	bpl.n	8010058 <_vfiprintf_r+0xe4>
 800ff9a:	6923      	ldr	r3, [r4, #16]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d05b      	beq.n	8010058 <_vfiprintf_r+0xe4>
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	9309      	str	r3, [sp, #36]	; 0x24
 800ffa4:	2320      	movs	r3, #32
 800ffa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ffaa:	2330      	movs	r3, #48	; 0x30
 800ffac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ffb0:	9503      	str	r5, [sp, #12]
 800ffb2:	f04f 0b01 	mov.w	fp, #1
 800ffb6:	46b8      	mov	r8, r7
 800ffb8:	4645      	mov	r5, r8
 800ffba:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ffbe:	b10b      	cbz	r3, 800ffc4 <_vfiprintf_r+0x50>
 800ffc0:	2b25      	cmp	r3, #37	; 0x25
 800ffc2:	d154      	bne.n	801006e <_vfiprintf_r+0xfa>
 800ffc4:	ebb8 0a07 	subs.w	sl, r8, r7
 800ffc8:	d00b      	beq.n	800ffe2 <_vfiprintf_r+0x6e>
 800ffca:	4653      	mov	r3, sl
 800ffcc:	463a      	mov	r2, r7
 800ffce:	4621      	mov	r1, r4
 800ffd0:	4630      	mov	r0, r6
 800ffd2:	f7ff ffbc 	bl	800ff4e <__sfputs_r>
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	f000 80c2 	beq.w	8010160 <_vfiprintf_r+0x1ec>
 800ffdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ffde:	4453      	add	r3, sl
 800ffe0:	9309      	str	r3, [sp, #36]	; 0x24
 800ffe2:	f898 3000 	ldrb.w	r3, [r8]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	f000 80ba 	beq.w	8010160 <_vfiprintf_r+0x1ec>
 800ffec:	2300      	movs	r3, #0
 800ffee:	f04f 32ff 	mov.w	r2, #4294967295
 800fff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fff6:	9304      	str	r3, [sp, #16]
 800fff8:	9307      	str	r3, [sp, #28]
 800fffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fffe:	931a      	str	r3, [sp, #104]	; 0x68
 8010000:	46a8      	mov	r8, r5
 8010002:	2205      	movs	r2, #5
 8010004:	f818 1b01 	ldrb.w	r1, [r8], #1
 8010008:	485e      	ldr	r0, [pc, #376]	; (8010184 <_vfiprintf_r+0x210>)
 801000a:	f7f0 f8f9 	bl	8000200 <memchr>
 801000e:	9b04      	ldr	r3, [sp, #16]
 8010010:	bb78      	cbnz	r0, 8010072 <_vfiprintf_r+0xfe>
 8010012:	06d9      	lsls	r1, r3, #27
 8010014:	bf44      	itt	mi
 8010016:	2220      	movmi	r2, #32
 8010018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801001c:	071a      	lsls	r2, r3, #28
 801001e:	bf44      	itt	mi
 8010020:	222b      	movmi	r2, #43	; 0x2b
 8010022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010026:	782a      	ldrb	r2, [r5, #0]
 8010028:	2a2a      	cmp	r2, #42	; 0x2a
 801002a:	d02a      	beq.n	8010082 <_vfiprintf_r+0x10e>
 801002c:	9a07      	ldr	r2, [sp, #28]
 801002e:	46a8      	mov	r8, r5
 8010030:	2000      	movs	r0, #0
 8010032:	250a      	movs	r5, #10
 8010034:	4641      	mov	r1, r8
 8010036:	f811 3b01 	ldrb.w	r3, [r1], #1
 801003a:	3b30      	subs	r3, #48	; 0x30
 801003c:	2b09      	cmp	r3, #9
 801003e:	d969      	bls.n	8010114 <_vfiprintf_r+0x1a0>
 8010040:	b360      	cbz	r0, 801009c <_vfiprintf_r+0x128>
 8010042:	e024      	b.n	801008e <_vfiprintf_r+0x11a>
 8010044:	4b50      	ldr	r3, [pc, #320]	; (8010188 <_vfiprintf_r+0x214>)
 8010046:	429c      	cmp	r4, r3
 8010048:	d101      	bne.n	801004e <_vfiprintf_r+0xda>
 801004a:	68b4      	ldr	r4, [r6, #8]
 801004c:	e7a2      	b.n	800ff94 <_vfiprintf_r+0x20>
 801004e:	4b4f      	ldr	r3, [pc, #316]	; (801018c <_vfiprintf_r+0x218>)
 8010050:	429c      	cmp	r4, r3
 8010052:	bf08      	it	eq
 8010054:	68f4      	ldreq	r4, [r6, #12]
 8010056:	e79d      	b.n	800ff94 <_vfiprintf_r+0x20>
 8010058:	4621      	mov	r1, r4
 801005a:	4630      	mov	r0, r6
 801005c:	f000 fae0 	bl	8010620 <__swsetup_r>
 8010060:	2800      	cmp	r0, #0
 8010062:	d09d      	beq.n	800ffa0 <_vfiprintf_r+0x2c>
 8010064:	f04f 30ff 	mov.w	r0, #4294967295
 8010068:	b01d      	add	sp, #116	; 0x74
 801006a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801006e:	46a8      	mov	r8, r5
 8010070:	e7a2      	b.n	800ffb8 <_vfiprintf_r+0x44>
 8010072:	4a44      	ldr	r2, [pc, #272]	; (8010184 <_vfiprintf_r+0x210>)
 8010074:	1a80      	subs	r0, r0, r2
 8010076:	fa0b f000 	lsl.w	r0, fp, r0
 801007a:	4318      	orrs	r0, r3
 801007c:	9004      	str	r0, [sp, #16]
 801007e:	4645      	mov	r5, r8
 8010080:	e7be      	b.n	8010000 <_vfiprintf_r+0x8c>
 8010082:	9a03      	ldr	r2, [sp, #12]
 8010084:	1d11      	adds	r1, r2, #4
 8010086:	6812      	ldr	r2, [r2, #0]
 8010088:	9103      	str	r1, [sp, #12]
 801008a:	2a00      	cmp	r2, #0
 801008c:	db01      	blt.n	8010092 <_vfiprintf_r+0x11e>
 801008e:	9207      	str	r2, [sp, #28]
 8010090:	e004      	b.n	801009c <_vfiprintf_r+0x128>
 8010092:	4252      	negs	r2, r2
 8010094:	f043 0302 	orr.w	r3, r3, #2
 8010098:	9207      	str	r2, [sp, #28]
 801009a:	9304      	str	r3, [sp, #16]
 801009c:	f898 3000 	ldrb.w	r3, [r8]
 80100a0:	2b2e      	cmp	r3, #46	; 0x2e
 80100a2:	d10e      	bne.n	80100c2 <_vfiprintf_r+0x14e>
 80100a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80100a8:	2b2a      	cmp	r3, #42	; 0x2a
 80100aa:	d138      	bne.n	801011e <_vfiprintf_r+0x1aa>
 80100ac:	9b03      	ldr	r3, [sp, #12]
 80100ae:	1d1a      	adds	r2, r3, #4
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	9203      	str	r2, [sp, #12]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	bfb8      	it	lt
 80100b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80100bc:	f108 0802 	add.w	r8, r8, #2
 80100c0:	9305      	str	r3, [sp, #20]
 80100c2:	4d33      	ldr	r5, [pc, #204]	; (8010190 <_vfiprintf_r+0x21c>)
 80100c4:	f898 1000 	ldrb.w	r1, [r8]
 80100c8:	2203      	movs	r2, #3
 80100ca:	4628      	mov	r0, r5
 80100cc:	f7f0 f898 	bl	8000200 <memchr>
 80100d0:	b140      	cbz	r0, 80100e4 <_vfiprintf_r+0x170>
 80100d2:	2340      	movs	r3, #64	; 0x40
 80100d4:	1b40      	subs	r0, r0, r5
 80100d6:	fa03 f000 	lsl.w	r0, r3, r0
 80100da:	9b04      	ldr	r3, [sp, #16]
 80100dc:	4303      	orrs	r3, r0
 80100de:	f108 0801 	add.w	r8, r8, #1
 80100e2:	9304      	str	r3, [sp, #16]
 80100e4:	f898 1000 	ldrb.w	r1, [r8]
 80100e8:	482a      	ldr	r0, [pc, #168]	; (8010194 <_vfiprintf_r+0x220>)
 80100ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80100ee:	2206      	movs	r2, #6
 80100f0:	f108 0701 	add.w	r7, r8, #1
 80100f4:	f7f0 f884 	bl	8000200 <memchr>
 80100f8:	2800      	cmp	r0, #0
 80100fa:	d037      	beq.n	801016c <_vfiprintf_r+0x1f8>
 80100fc:	4b26      	ldr	r3, [pc, #152]	; (8010198 <_vfiprintf_r+0x224>)
 80100fe:	bb1b      	cbnz	r3, 8010148 <_vfiprintf_r+0x1d4>
 8010100:	9b03      	ldr	r3, [sp, #12]
 8010102:	3307      	adds	r3, #7
 8010104:	f023 0307 	bic.w	r3, r3, #7
 8010108:	3308      	adds	r3, #8
 801010a:	9303      	str	r3, [sp, #12]
 801010c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801010e:	444b      	add	r3, r9
 8010110:	9309      	str	r3, [sp, #36]	; 0x24
 8010112:	e750      	b.n	800ffb6 <_vfiprintf_r+0x42>
 8010114:	fb05 3202 	mla	r2, r5, r2, r3
 8010118:	2001      	movs	r0, #1
 801011a:	4688      	mov	r8, r1
 801011c:	e78a      	b.n	8010034 <_vfiprintf_r+0xc0>
 801011e:	2300      	movs	r3, #0
 8010120:	f108 0801 	add.w	r8, r8, #1
 8010124:	9305      	str	r3, [sp, #20]
 8010126:	4619      	mov	r1, r3
 8010128:	250a      	movs	r5, #10
 801012a:	4640      	mov	r0, r8
 801012c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010130:	3a30      	subs	r2, #48	; 0x30
 8010132:	2a09      	cmp	r2, #9
 8010134:	d903      	bls.n	801013e <_vfiprintf_r+0x1ca>
 8010136:	2b00      	cmp	r3, #0
 8010138:	d0c3      	beq.n	80100c2 <_vfiprintf_r+0x14e>
 801013a:	9105      	str	r1, [sp, #20]
 801013c:	e7c1      	b.n	80100c2 <_vfiprintf_r+0x14e>
 801013e:	fb05 2101 	mla	r1, r5, r1, r2
 8010142:	2301      	movs	r3, #1
 8010144:	4680      	mov	r8, r0
 8010146:	e7f0      	b.n	801012a <_vfiprintf_r+0x1b6>
 8010148:	ab03      	add	r3, sp, #12
 801014a:	9300      	str	r3, [sp, #0]
 801014c:	4622      	mov	r2, r4
 801014e:	4b13      	ldr	r3, [pc, #76]	; (801019c <_vfiprintf_r+0x228>)
 8010150:	a904      	add	r1, sp, #16
 8010152:	4630      	mov	r0, r6
 8010154:	f3af 8000 	nop.w
 8010158:	f1b0 3fff 	cmp.w	r0, #4294967295
 801015c:	4681      	mov	r9, r0
 801015e:	d1d5      	bne.n	801010c <_vfiprintf_r+0x198>
 8010160:	89a3      	ldrh	r3, [r4, #12]
 8010162:	065b      	lsls	r3, r3, #25
 8010164:	f53f af7e 	bmi.w	8010064 <_vfiprintf_r+0xf0>
 8010168:	9809      	ldr	r0, [sp, #36]	; 0x24
 801016a:	e77d      	b.n	8010068 <_vfiprintf_r+0xf4>
 801016c:	ab03      	add	r3, sp, #12
 801016e:	9300      	str	r3, [sp, #0]
 8010170:	4622      	mov	r2, r4
 8010172:	4b0a      	ldr	r3, [pc, #40]	; (801019c <_vfiprintf_r+0x228>)
 8010174:	a904      	add	r1, sp, #16
 8010176:	4630      	mov	r0, r6
 8010178:	f000 f888 	bl	801028c <_printf_i>
 801017c:	e7ec      	b.n	8010158 <_vfiprintf_r+0x1e4>
 801017e:	bf00      	nop
 8010180:	0801395c 	.word	0x0801395c
 8010184:	0801399c 	.word	0x0801399c
 8010188:	0801397c 	.word	0x0801397c
 801018c:	0801393c 	.word	0x0801393c
 8010190:	080139a2 	.word	0x080139a2
 8010194:	080139a6 	.word	0x080139a6
 8010198:	00000000 	.word	0x00000000
 801019c:	0800ff4f 	.word	0x0800ff4f

080101a0 <_printf_common>:
 80101a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80101a4:	4691      	mov	r9, r2
 80101a6:	461f      	mov	r7, r3
 80101a8:	688a      	ldr	r2, [r1, #8]
 80101aa:	690b      	ldr	r3, [r1, #16]
 80101ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80101b0:	4293      	cmp	r3, r2
 80101b2:	bfb8      	it	lt
 80101b4:	4613      	movlt	r3, r2
 80101b6:	f8c9 3000 	str.w	r3, [r9]
 80101ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80101be:	4606      	mov	r6, r0
 80101c0:	460c      	mov	r4, r1
 80101c2:	b112      	cbz	r2, 80101ca <_printf_common+0x2a>
 80101c4:	3301      	adds	r3, #1
 80101c6:	f8c9 3000 	str.w	r3, [r9]
 80101ca:	6823      	ldr	r3, [r4, #0]
 80101cc:	0699      	lsls	r1, r3, #26
 80101ce:	bf42      	ittt	mi
 80101d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80101d4:	3302      	addmi	r3, #2
 80101d6:	f8c9 3000 	strmi.w	r3, [r9]
 80101da:	6825      	ldr	r5, [r4, #0]
 80101dc:	f015 0506 	ands.w	r5, r5, #6
 80101e0:	d107      	bne.n	80101f2 <_printf_common+0x52>
 80101e2:	f104 0a19 	add.w	sl, r4, #25
 80101e6:	68e3      	ldr	r3, [r4, #12]
 80101e8:	f8d9 2000 	ldr.w	r2, [r9]
 80101ec:	1a9b      	subs	r3, r3, r2
 80101ee:	42ab      	cmp	r3, r5
 80101f0:	dc28      	bgt.n	8010244 <_printf_common+0xa4>
 80101f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80101f6:	6822      	ldr	r2, [r4, #0]
 80101f8:	3300      	adds	r3, #0
 80101fa:	bf18      	it	ne
 80101fc:	2301      	movne	r3, #1
 80101fe:	0692      	lsls	r2, r2, #26
 8010200:	d42d      	bmi.n	801025e <_printf_common+0xbe>
 8010202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010206:	4639      	mov	r1, r7
 8010208:	4630      	mov	r0, r6
 801020a:	47c0      	blx	r8
 801020c:	3001      	adds	r0, #1
 801020e:	d020      	beq.n	8010252 <_printf_common+0xb2>
 8010210:	6823      	ldr	r3, [r4, #0]
 8010212:	68e5      	ldr	r5, [r4, #12]
 8010214:	f8d9 2000 	ldr.w	r2, [r9]
 8010218:	f003 0306 	and.w	r3, r3, #6
 801021c:	2b04      	cmp	r3, #4
 801021e:	bf08      	it	eq
 8010220:	1aad      	subeq	r5, r5, r2
 8010222:	68a3      	ldr	r3, [r4, #8]
 8010224:	6922      	ldr	r2, [r4, #16]
 8010226:	bf0c      	ite	eq
 8010228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801022c:	2500      	movne	r5, #0
 801022e:	4293      	cmp	r3, r2
 8010230:	bfc4      	itt	gt
 8010232:	1a9b      	subgt	r3, r3, r2
 8010234:	18ed      	addgt	r5, r5, r3
 8010236:	f04f 0900 	mov.w	r9, #0
 801023a:	341a      	adds	r4, #26
 801023c:	454d      	cmp	r5, r9
 801023e:	d11a      	bne.n	8010276 <_printf_common+0xd6>
 8010240:	2000      	movs	r0, #0
 8010242:	e008      	b.n	8010256 <_printf_common+0xb6>
 8010244:	2301      	movs	r3, #1
 8010246:	4652      	mov	r2, sl
 8010248:	4639      	mov	r1, r7
 801024a:	4630      	mov	r0, r6
 801024c:	47c0      	blx	r8
 801024e:	3001      	adds	r0, #1
 8010250:	d103      	bne.n	801025a <_printf_common+0xba>
 8010252:	f04f 30ff 	mov.w	r0, #4294967295
 8010256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801025a:	3501      	adds	r5, #1
 801025c:	e7c3      	b.n	80101e6 <_printf_common+0x46>
 801025e:	18e1      	adds	r1, r4, r3
 8010260:	1c5a      	adds	r2, r3, #1
 8010262:	2030      	movs	r0, #48	; 0x30
 8010264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8010268:	4422      	add	r2, r4
 801026a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801026e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010272:	3302      	adds	r3, #2
 8010274:	e7c5      	b.n	8010202 <_printf_common+0x62>
 8010276:	2301      	movs	r3, #1
 8010278:	4622      	mov	r2, r4
 801027a:	4639      	mov	r1, r7
 801027c:	4630      	mov	r0, r6
 801027e:	47c0      	blx	r8
 8010280:	3001      	adds	r0, #1
 8010282:	d0e6      	beq.n	8010252 <_printf_common+0xb2>
 8010284:	f109 0901 	add.w	r9, r9, #1
 8010288:	e7d8      	b.n	801023c <_printf_common+0x9c>
	...

0801028c <_printf_i>:
 801028c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010290:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8010294:	460c      	mov	r4, r1
 8010296:	7e09      	ldrb	r1, [r1, #24]
 8010298:	b085      	sub	sp, #20
 801029a:	296e      	cmp	r1, #110	; 0x6e
 801029c:	4617      	mov	r7, r2
 801029e:	4606      	mov	r6, r0
 80102a0:	4698      	mov	r8, r3
 80102a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80102a4:	f000 80b3 	beq.w	801040e <_printf_i+0x182>
 80102a8:	d822      	bhi.n	80102f0 <_printf_i+0x64>
 80102aa:	2963      	cmp	r1, #99	; 0x63
 80102ac:	d036      	beq.n	801031c <_printf_i+0x90>
 80102ae:	d80a      	bhi.n	80102c6 <_printf_i+0x3a>
 80102b0:	2900      	cmp	r1, #0
 80102b2:	f000 80b9 	beq.w	8010428 <_printf_i+0x19c>
 80102b6:	2958      	cmp	r1, #88	; 0x58
 80102b8:	f000 8083 	beq.w	80103c2 <_printf_i+0x136>
 80102bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80102c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80102c4:	e032      	b.n	801032c <_printf_i+0xa0>
 80102c6:	2964      	cmp	r1, #100	; 0x64
 80102c8:	d001      	beq.n	80102ce <_printf_i+0x42>
 80102ca:	2969      	cmp	r1, #105	; 0x69
 80102cc:	d1f6      	bne.n	80102bc <_printf_i+0x30>
 80102ce:	6820      	ldr	r0, [r4, #0]
 80102d0:	6813      	ldr	r3, [r2, #0]
 80102d2:	0605      	lsls	r5, r0, #24
 80102d4:	f103 0104 	add.w	r1, r3, #4
 80102d8:	d52a      	bpl.n	8010330 <_printf_i+0xa4>
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	6011      	str	r1, [r2, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	da03      	bge.n	80102ea <_printf_i+0x5e>
 80102e2:	222d      	movs	r2, #45	; 0x2d
 80102e4:	425b      	negs	r3, r3
 80102e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80102ea:	486f      	ldr	r0, [pc, #444]	; (80104a8 <_printf_i+0x21c>)
 80102ec:	220a      	movs	r2, #10
 80102ee:	e039      	b.n	8010364 <_printf_i+0xd8>
 80102f0:	2973      	cmp	r1, #115	; 0x73
 80102f2:	f000 809d 	beq.w	8010430 <_printf_i+0x1a4>
 80102f6:	d808      	bhi.n	801030a <_printf_i+0x7e>
 80102f8:	296f      	cmp	r1, #111	; 0x6f
 80102fa:	d020      	beq.n	801033e <_printf_i+0xb2>
 80102fc:	2970      	cmp	r1, #112	; 0x70
 80102fe:	d1dd      	bne.n	80102bc <_printf_i+0x30>
 8010300:	6823      	ldr	r3, [r4, #0]
 8010302:	f043 0320 	orr.w	r3, r3, #32
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	e003      	b.n	8010312 <_printf_i+0x86>
 801030a:	2975      	cmp	r1, #117	; 0x75
 801030c:	d017      	beq.n	801033e <_printf_i+0xb2>
 801030e:	2978      	cmp	r1, #120	; 0x78
 8010310:	d1d4      	bne.n	80102bc <_printf_i+0x30>
 8010312:	2378      	movs	r3, #120	; 0x78
 8010314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010318:	4864      	ldr	r0, [pc, #400]	; (80104ac <_printf_i+0x220>)
 801031a:	e055      	b.n	80103c8 <_printf_i+0x13c>
 801031c:	6813      	ldr	r3, [r2, #0]
 801031e:	1d19      	adds	r1, r3, #4
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	6011      	str	r1, [r2, #0]
 8010324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801032c:	2301      	movs	r3, #1
 801032e:	e08c      	b.n	801044a <_printf_i+0x1be>
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	6011      	str	r1, [r2, #0]
 8010334:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010338:	bf18      	it	ne
 801033a:	b21b      	sxthne	r3, r3
 801033c:	e7cf      	b.n	80102de <_printf_i+0x52>
 801033e:	6813      	ldr	r3, [r2, #0]
 8010340:	6825      	ldr	r5, [r4, #0]
 8010342:	1d18      	adds	r0, r3, #4
 8010344:	6010      	str	r0, [r2, #0]
 8010346:	0628      	lsls	r0, r5, #24
 8010348:	d501      	bpl.n	801034e <_printf_i+0xc2>
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	e002      	b.n	8010354 <_printf_i+0xc8>
 801034e:	0668      	lsls	r0, r5, #25
 8010350:	d5fb      	bpl.n	801034a <_printf_i+0xbe>
 8010352:	881b      	ldrh	r3, [r3, #0]
 8010354:	4854      	ldr	r0, [pc, #336]	; (80104a8 <_printf_i+0x21c>)
 8010356:	296f      	cmp	r1, #111	; 0x6f
 8010358:	bf14      	ite	ne
 801035a:	220a      	movne	r2, #10
 801035c:	2208      	moveq	r2, #8
 801035e:	2100      	movs	r1, #0
 8010360:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010364:	6865      	ldr	r5, [r4, #4]
 8010366:	60a5      	str	r5, [r4, #8]
 8010368:	2d00      	cmp	r5, #0
 801036a:	f2c0 8095 	blt.w	8010498 <_printf_i+0x20c>
 801036e:	6821      	ldr	r1, [r4, #0]
 8010370:	f021 0104 	bic.w	r1, r1, #4
 8010374:	6021      	str	r1, [r4, #0]
 8010376:	2b00      	cmp	r3, #0
 8010378:	d13d      	bne.n	80103f6 <_printf_i+0x16a>
 801037a:	2d00      	cmp	r5, #0
 801037c:	f040 808e 	bne.w	801049c <_printf_i+0x210>
 8010380:	4665      	mov	r5, ip
 8010382:	2a08      	cmp	r2, #8
 8010384:	d10b      	bne.n	801039e <_printf_i+0x112>
 8010386:	6823      	ldr	r3, [r4, #0]
 8010388:	07db      	lsls	r3, r3, #31
 801038a:	d508      	bpl.n	801039e <_printf_i+0x112>
 801038c:	6923      	ldr	r3, [r4, #16]
 801038e:	6862      	ldr	r2, [r4, #4]
 8010390:	429a      	cmp	r2, r3
 8010392:	bfde      	ittt	le
 8010394:	2330      	movle	r3, #48	; 0x30
 8010396:	f805 3c01 	strble.w	r3, [r5, #-1]
 801039a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801039e:	ebac 0305 	sub.w	r3, ip, r5
 80103a2:	6123      	str	r3, [r4, #16]
 80103a4:	f8cd 8000 	str.w	r8, [sp]
 80103a8:	463b      	mov	r3, r7
 80103aa:	aa03      	add	r2, sp, #12
 80103ac:	4621      	mov	r1, r4
 80103ae:	4630      	mov	r0, r6
 80103b0:	f7ff fef6 	bl	80101a0 <_printf_common>
 80103b4:	3001      	adds	r0, #1
 80103b6:	d14d      	bne.n	8010454 <_printf_i+0x1c8>
 80103b8:	f04f 30ff 	mov.w	r0, #4294967295
 80103bc:	b005      	add	sp, #20
 80103be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103c2:	4839      	ldr	r0, [pc, #228]	; (80104a8 <_printf_i+0x21c>)
 80103c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80103c8:	6813      	ldr	r3, [r2, #0]
 80103ca:	6821      	ldr	r1, [r4, #0]
 80103cc:	1d1d      	adds	r5, r3, #4
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	6015      	str	r5, [r2, #0]
 80103d2:	060a      	lsls	r2, r1, #24
 80103d4:	d50b      	bpl.n	80103ee <_printf_i+0x162>
 80103d6:	07ca      	lsls	r2, r1, #31
 80103d8:	bf44      	itt	mi
 80103da:	f041 0120 	orrmi.w	r1, r1, #32
 80103de:	6021      	strmi	r1, [r4, #0]
 80103e0:	b91b      	cbnz	r3, 80103ea <_printf_i+0x15e>
 80103e2:	6822      	ldr	r2, [r4, #0]
 80103e4:	f022 0220 	bic.w	r2, r2, #32
 80103e8:	6022      	str	r2, [r4, #0]
 80103ea:	2210      	movs	r2, #16
 80103ec:	e7b7      	b.n	801035e <_printf_i+0xd2>
 80103ee:	064d      	lsls	r5, r1, #25
 80103f0:	bf48      	it	mi
 80103f2:	b29b      	uxthmi	r3, r3
 80103f4:	e7ef      	b.n	80103d6 <_printf_i+0x14a>
 80103f6:	4665      	mov	r5, ip
 80103f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80103fc:	fb02 3311 	mls	r3, r2, r1, r3
 8010400:	5cc3      	ldrb	r3, [r0, r3]
 8010402:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8010406:	460b      	mov	r3, r1
 8010408:	2900      	cmp	r1, #0
 801040a:	d1f5      	bne.n	80103f8 <_printf_i+0x16c>
 801040c:	e7b9      	b.n	8010382 <_printf_i+0xf6>
 801040e:	6813      	ldr	r3, [r2, #0]
 8010410:	6825      	ldr	r5, [r4, #0]
 8010412:	6961      	ldr	r1, [r4, #20]
 8010414:	1d18      	adds	r0, r3, #4
 8010416:	6010      	str	r0, [r2, #0]
 8010418:	0628      	lsls	r0, r5, #24
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	d501      	bpl.n	8010422 <_printf_i+0x196>
 801041e:	6019      	str	r1, [r3, #0]
 8010420:	e002      	b.n	8010428 <_printf_i+0x19c>
 8010422:	066a      	lsls	r2, r5, #25
 8010424:	d5fb      	bpl.n	801041e <_printf_i+0x192>
 8010426:	8019      	strh	r1, [r3, #0]
 8010428:	2300      	movs	r3, #0
 801042a:	6123      	str	r3, [r4, #16]
 801042c:	4665      	mov	r5, ip
 801042e:	e7b9      	b.n	80103a4 <_printf_i+0x118>
 8010430:	6813      	ldr	r3, [r2, #0]
 8010432:	1d19      	adds	r1, r3, #4
 8010434:	6011      	str	r1, [r2, #0]
 8010436:	681d      	ldr	r5, [r3, #0]
 8010438:	6862      	ldr	r2, [r4, #4]
 801043a:	2100      	movs	r1, #0
 801043c:	4628      	mov	r0, r5
 801043e:	f7ef fedf 	bl	8000200 <memchr>
 8010442:	b108      	cbz	r0, 8010448 <_printf_i+0x1bc>
 8010444:	1b40      	subs	r0, r0, r5
 8010446:	6060      	str	r0, [r4, #4]
 8010448:	6863      	ldr	r3, [r4, #4]
 801044a:	6123      	str	r3, [r4, #16]
 801044c:	2300      	movs	r3, #0
 801044e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010452:	e7a7      	b.n	80103a4 <_printf_i+0x118>
 8010454:	6923      	ldr	r3, [r4, #16]
 8010456:	462a      	mov	r2, r5
 8010458:	4639      	mov	r1, r7
 801045a:	4630      	mov	r0, r6
 801045c:	47c0      	blx	r8
 801045e:	3001      	adds	r0, #1
 8010460:	d0aa      	beq.n	80103b8 <_printf_i+0x12c>
 8010462:	6823      	ldr	r3, [r4, #0]
 8010464:	079b      	lsls	r3, r3, #30
 8010466:	d413      	bmi.n	8010490 <_printf_i+0x204>
 8010468:	68e0      	ldr	r0, [r4, #12]
 801046a:	9b03      	ldr	r3, [sp, #12]
 801046c:	4298      	cmp	r0, r3
 801046e:	bfb8      	it	lt
 8010470:	4618      	movlt	r0, r3
 8010472:	e7a3      	b.n	80103bc <_printf_i+0x130>
 8010474:	2301      	movs	r3, #1
 8010476:	464a      	mov	r2, r9
 8010478:	4639      	mov	r1, r7
 801047a:	4630      	mov	r0, r6
 801047c:	47c0      	blx	r8
 801047e:	3001      	adds	r0, #1
 8010480:	d09a      	beq.n	80103b8 <_printf_i+0x12c>
 8010482:	3501      	adds	r5, #1
 8010484:	68e3      	ldr	r3, [r4, #12]
 8010486:	9a03      	ldr	r2, [sp, #12]
 8010488:	1a9b      	subs	r3, r3, r2
 801048a:	42ab      	cmp	r3, r5
 801048c:	dcf2      	bgt.n	8010474 <_printf_i+0x1e8>
 801048e:	e7eb      	b.n	8010468 <_printf_i+0x1dc>
 8010490:	2500      	movs	r5, #0
 8010492:	f104 0919 	add.w	r9, r4, #25
 8010496:	e7f5      	b.n	8010484 <_printf_i+0x1f8>
 8010498:	2b00      	cmp	r3, #0
 801049a:	d1ac      	bne.n	80103f6 <_printf_i+0x16a>
 801049c:	7803      	ldrb	r3, [r0, #0]
 801049e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80104a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80104a6:	e76c      	b.n	8010382 <_printf_i+0xf6>
 80104a8:	080139ad 	.word	0x080139ad
 80104ac:	080139be 	.word	0x080139be

080104b0 <_sbrk_r>:
 80104b0:	b538      	push	{r3, r4, r5, lr}
 80104b2:	4c06      	ldr	r4, [pc, #24]	; (80104cc <_sbrk_r+0x1c>)
 80104b4:	2300      	movs	r3, #0
 80104b6:	4605      	mov	r5, r0
 80104b8:	4608      	mov	r0, r1
 80104ba:	6023      	str	r3, [r4, #0]
 80104bc:	f7f0 fa60 	bl	8000980 <_sbrk>
 80104c0:	1c43      	adds	r3, r0, #1
 80104c2:	d102      	bne.n	80104ca <_sbrk_r+0x1a>
 80104c4:	6823      	ldr	r3, [r4, #0]
 80104c6:	b103      	cbz	r3, 80104ca <_sbrk_r+0x1a>
 80104c8:	602b      	str	r3, [r5, #0]
 80104ca:	bd38      	pop	{r3, r4, r5, pc}
 80104cc:	20006da0 	.word	0x20006da0

080104d0 <__sread>:
 80104d0:	b510      	push	{r4, lr}
 80104d2:	460c      	mov	r4, r1
 80104d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80104d8:	f000 fa48 	bl	801096c <_read_r>
 80104dc:	2800      	cmp	r0, #0
 80104de:	bfab      	itete	ge
 80104e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80104e2:	89a3      	ldrhlt	r3, [r4, #12]
 80104e4:	181b      	addge	r3, r3, r0
 80104e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80104ea:	bfac      	ite	ge
 80104ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80104ee:	81a3      	strhlt	r3, [r4, #12]
 80104f0:	bd10      	pop	{r4, pc}

080104f2 <__swrite>:
 80104f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104f6:	461f      	mov	r7, r3
 80104f8:	898b      	ldrh	r3, [r1, #12]
 80104fa:	05db      	lsls	r3, r3, #23
 80104fc:	4605      	mov	r5, r0
 80104fe:	460c      	mov	r4, r1
 8010500:	4616      	mov	r6, r2
 8010502:	d505      	bpl.n	8010510 <__swrite+0x1e>
 8010504:	2302      	movs	r3, #2
 8010506:	2200      	movs	r2, #0
 8010508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801050c:	f000 f9b6 	bl	801087c <_lseek_r>
 8010510:	89a3      	ldrh	r3, [r4, #12]
 8010512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801051a:	81a3      	strh	r3, [r4, #12]
 801051c:	4632      	mov	r2, r6
 801051e:	463b      	mov	r3, r7
 8010520:	4628      	mov	r0, r5
 8010522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010526:	f000 b869 	b.w	80105fc <_write_r>

0801052a <__sseek>:
 801052a:	b510      	push	{r4, lr}
 801052c:	460c      	mov	r4, r1
 801052e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010532:	f000 f9a3 	bl	801087c <_lseek_r>
 8010536:	1c43      	adds	r3, r0, #1
 8010538:	89a3      	ldrh	r3, [r4, #12]
 801053a:	bf15      	itete	ne
 801053c:	6560      	strne	r0, [r4, #84]	; 0x54
 801053e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010546:	81a3      	strheq	r3, [r4, #12]
 8010548:	bf18      	it	ne
 801054a:	81a3      	strhne	r3, [r4, #12]
 801054c:	bd10      	pop	{r4, pc}

0801054e <__sclose>:
 801054e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010552:	f000 b8d3 	b.w	80106fc <_close_r>
	...

08010558 <__swbuf_r>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	460e      	mov	r6, r1
 801055c:	4614      	mov	r4, r2
 801055e:	4605      	mov	r5, r0
 8010560:	b118      	cbz	r0, 801056a <__swbuf_r+0x12>
 8010562:	6983      	ldr	r3, [r0, #24]
 8010564:	b90b      	cbnz	r3, 801056a <__swbuf_r+0x12>
 8010566:	f7ff fba1 	bl	800fcac <__sinit>
 801056a:	4b21      	ldr	r3, [pc, #132]	; (80105f0 <__swbuf_r+0x98>)
 801056c:	429c      	cmp	r4, r3
 801056e:	d12a      	bne.n	80105c6 <__swbuf_r+0x6e>
 8010570:	686c      	ldr	r4, [r5, #4]
 8010572:	69a3      	ldr	r3, [r4, #24]
 8010574:	60a3      	str	r3, [r4, #8]
 8010576:	89a3      	ldrh	r3, [r4, #12]
 8010578:	071a      	lsls	r2, r3, #28
 801057a:	d52e      	bpl.n	80105da <__swbuf_r+0x82>
 801057c:	6923      	ldr	r3, [r4, #16]
 801057e:	b363      	cbz	r3, 80105da <__swbuf_r+0x82>
 8010580:	6923      	ldr	r3, [r4, #16]
 8010582:	6820      	ldr	r0, [r4, #0]
 8010584:	1ac0      	subs	r0, r0, r3
 8010586:	6963      	ldr	r3, [r4, #20]
 8010588:	b2f6      	uxtb	r6, r6
 801058a:	4283      	cmp	r3, r0
 801058c:	4637      	mov	r7, r6
 801058e:	dc04      	bgt.n	801059a <__swbuf_r+0x42>
 8010590:	4621      	mov	r1, r4
 8010592:	4628      	mov	r0, r5
 8010594:	f000 f948 	bl	8010828 <_fflush_r>
 8010598:	bb28      	cbnz	r0, 80105e6 <__swbuf_r+0x8e>
 801059a:	68a3      	ldr	r3, [r4, #8]
 801059c:	3b01      	subs	r3, #1
 801059e:	60a3      	str	r3, [r4, #8]
 80105a0:	6823      	ldr	r3, [r4, #0]
 80105a2:	1c5a      	adds	r2, r3, #1
 80105a4:	6022      	str	r2, [r4, #0]
 80105a6:	701e      	strb	r6, [r3, #0]
 80105a8:	6963      	ldr	r3, [r4, #20]
 80105aa:	3001      	adds	r0, #1
 80105ac:	4283      	cmp	r3, r0
 80105ae:	d004      	beq.n	80105ba <__swbuf_r+0x62>
 80105b0:	89a3      	ldrh	r3, [r4, #12]
 80105b2:	07db      	lsls	r3, r3, #31
 80105b4:	d519      	bpl.n	80105ea <__swbuf_r+0x92>
 80105b6:	2e0a      	cmp	r6, #10
 80105b8:	d117      	bne.n	80105ea <__swbuf_r+0x92>
 80105ba:	4621      	mov	r1, r4
 80105bc:	4628      	mov	r0, r5
 80105be:	f000 f933 	bl	8010828 <_fflush_r>
 80105c2:	b190      	cbz	r0, 80105ea <__swbuf_r+0x92>
 80105c4:	e00f      	b.n	80105e6 <__swbuf_r+0x8e>
 80105c6:	4b0b      	ldr	r3, [pc, #44]	; (80105f4 <__swbuf_r+0x9c>)
 80105c8:	429c      	cmp	r4, r3
 80105ca:	d101      	bne.n	80105d0 <__swbuf_r+0x78>
 80105cc:	68ac      	ldr	r4, [r5, #8]
 80105ce:	e7d0      	b.n	8010572 <__swbuf_r+0x1a>
 80105d0:	4b09      	ldr	r3, [pc, #36]	; (80105f8 <__swbuf_r+0xa0>)
 80105d2:	429c      	cmp	r4, r3
 80105d4:	bf08      	it	eq
 80105d6:	68ec      	ldreq	r4, [r5, #12]
 80105d8:	e7cb      	b.n	8010572 <__swbuf_r+0x1a>
 80105da:	4621      	mov	r1, r4
 80105dc:	4628      	mov	r0, r5
 80105de:	f000 f81f 	bl	8010620 <__swsetup_r>
 80105e2:	2800      	cmp	r0, #0
 80105e4:	d0cc      	beq.n	8010580 <__swbuf_r+0x28>
 80105e6:	f04f 37ff 	mov.w	r7, #4294967295
 80105ea:	4638      	mov	r0, r7
 80105ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80105ee:	bf00      	nop
 80105f0:	0801395c 	.word	0x0801395c
 80105f4:	0801397c 	.word	0x0801397c
 80105f8:	0801393c 	.word	0x0801393c

080105fc <_write_r>:
 80105fc:	b538      	push	{r3, r4, r5, lr}
 80105fe:	4c07      	ldr	r4, [pc, #28]	; (801061c <_write_r+0x20>)
 8010600:	4605      	mov	r5, r0
 8010602:	4608      	mov	r0, r1
 8010604:	4611      	mov	r1, r2
 8010606:	2200      	movs	r2, #0
 8010608:	6022      	str	r2, [r4, #0]
 801060a:	461a      	mov	r2, r3
 801060c:	f7f0 f967 	bl	80008de <_write>
 8010610:	1c43      	adds	r3, r0, #1
 8010612:	d102      	bne.n	801061a <_write_r+0x1e>
 8010614:	6823      	ldr	r3, [r4, #0]
 8010616:	b103      	cbz	r3, 801061a <_write_r+0x1e>
 8010618:	602b      	str	r3, [r5, #0]
 801061a:	bd38      	pop	{r3, r4, r5, pc}
 801061c:	20006da0 	.word	0x20006da0

08010620 <__swsetup_r>:
 8010620:	4b32      	ldr	r3, [pc, #200]	; (80106ec <__swsetup_r+0xcc>)
 8010622:	b570      	push	{r4, r5, r6, lr}
 8010624:	681d      	ldr	r5, [r3, #0]
 8010626:	4606      	mov	r6, r0
 8010628:	460c      	mov	r4, r1
 801062a:	b125      	cbz	r5, 8010636 <__swsetup_r+0x16>
 801062c:	69ab      	ldr	r3, [r5, #24]
 801062e:	b913      	cbnz	r3, 8010636 <__swsetup_r+0x16>
 8010630:	4628      	mov	r0, r5
 8010632:	f7ff fb3b 	bl	800fcac <__sinit>
 8010636:	4b2e      	ldr	r3, [pc, #184]	; (80106f0 <__swsetup_r+0xd0>)
 8010638:	429c      	cmp	r4, r3
 801063a:	d10f      	bne.n	801065c <__swsetup_r+0x3c>
 801063c:	686c      	ldr	r4, [r5, #4]
 801063e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010642:	b29a      	uxth	r2, r3
 8010644:	0715      	lsls	r5, r2, #28
 8010646:	d42c      	bmi.n	80106a2 <__swsetup_r+0x82>
 8010648:	06d0      	lsls	r0, r2, #27
 801064a:	d411      	bmi.n	8010670 <__swsetup_r+0x50>
 801064c:	2209      	movs	r2, #9
 801064e:	6032      	str	r2, [r6, #0]
 8010650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010654:	81a3      	strh	r3, [r4, #12]
 8010656:	f04f 30ff 	mov.w	r0, #4294967295
 801065a:	e03e      	b.n	80106da <__swsetup_r+0xba>
 801065c:	4b25      	ldr	r3, [pc, #148]	; (80106f4 <__swsetup_r+0xd4>)
 801065e:	429c      	cmp	r4, r3
 8010660:	d101      	bne.n	8010666 <__swsetup_r+0x46>
 8010662:	68ac      	ldr	r4, [r5, #8]
 8010664:	e7eb      	b.n	801063e <__swsetup_r+0x1e>
 8010666:	4b24      	ldr	r3, [pc, #144]	; (80106f8 <__swsetup_r+0xd8>)
 8010668:	429c      	cmp	r4, r3
 801066a:	bf08      	it	eq
 801066c:	68ec      	ldreq	r4, [r5, #12]
 801066e:	e7e6      	b.n	801063e <__swsetup_r+0x1e>
 8010670:	0751      	lsls	r1, r2, #29
 8010672:	d512      	bpl.n	801069a <__swsetup_r+0x7a>
 8010674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010676:	b141      	cbz	r1, 801068a <__swsetup_r+0x6a>
 8010678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801067c:	4299      	cmp	r1, r3
 801067e:	d002      	beq.n	8010686 <__swsetup_r+0x66>
 8010680:	4630      	mov	r0, r6
 8010682:	f7ff fba5 	bl	800fdd0 <_free_r>
 8010686:	2300      	movs	r3, #0
 8010688:	6363      	str	r3, [r4, #52]	; 0x34
 801068a:	89a3      	ldrh	r3, [r4, #12]
 801068c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010690:	81a3      	strh	r3, [r4, #12]
 8010692:	2300      	movs	r3, #0
 8010694:	6063      	str	r3, [r4, #4]
 8010696:	6923      	ldr	r3, [r4, #16]
 8010698:	6023      	str	r3, [r4, #0]
 801069a:	89a3      	ldrh	r3, [r4, #12]
 801069c:	f043 0308 	orr.w	r3, r3, #8
 80106a0:	81a3      	strh	r3, [r4, #12]
 80106a2:	6923      	ldr	r3, [r4, #16]
 80106a4:	b94b      	cbnz	r3, 80106ba <__swsetup_r+0x9a>
 80106a6:	89a3      	ldrh	r3, [r4, #12]
 80106a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80106ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80106b0:	d003      	beq.n	80106ba <__swsetup_r+0x9a>
 80106b2:	4621      	mov	r1, r4
 80106b4:	4630      	mov	r0, r6
 80106b6:	f000 f917 	bl	80108e8 <__smakebuf_r>
 80106ba:	89a2      	ldrh	r2, [r4, #12]
 80106bc:	f012 0301 	ands.w	r3, r2, #1
 80106c0:	d00c      	beq.n	80106dc <__swsetup_r+0xbc>
 80106c2:	2300      	movs	r3, #0
 80106c4:	60a3      	str	r3, [r4, #8]
 80106c6:	6963      	ldr	r3, [r4, #20]
 80106c8:	425b      	negs	r3, r3
 80106ca:	61a3      	str	r3, [r4, #24]
 80106cc:	6923      	ldr	r3, [r4, #16]
 80106ce:	b953      	cbnz	r3, 80106e6 <__swsetup_r+0xc6>
 80106d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80106d8:	d1ba      	bne.n	8010650 <__swsetup_r+0x30>
 80106da:	bd70      	pop	{r4, r5, r6, pc}
 80106dc:	0792      	lsls	r2, r2, #30
 80106de:	bf58      	it	pl
 80106e0:	6963      	ldrpl	r3, [r4, #20]
 80106e2:	60a3      	str	r3, [r4, #8]
 80106e4:	e7f2      	b.n	80106cc <__swsetup_r+0xac>
 80106e6:	2000      	movs	r0, #0
 80106e8:	e7f7      	b.n	80106da <__swsetup_r+0xba>
 80106ea:	bf00      	nop
 80106ec:	20000018 	.word	0x20000018
 80106f0:	0801395c 	.word	0x0801395c
 80106f4:	0801397c 	.word	0x0801397c
 80106f8:	0801393c 	.word	0x0801393c

080106fc <_close_r>:
 80106fc:	b538      	push	{r3, r4, r5, lr}
 80106fe:	4c06      	ldr	r4, [pc, #24]	; (8010718 <_close_r+0x1c>)
 8010700:	2300      	movs	r3, #0
 8010702:	4605      	mov	r5, r0
 8010704:	4608      	mov	r0, r1
 8010706:	6023      	str	r3, [r4, #0]
 8010708:	f7f0 f905 	bl	8000916 <_close>
 801070c:	1c43      	adds	r3, r0, #1
 801070e:	d102      	bne.n	8010716 <_close_r+0x1a>
 8010710:	6823      	ldr	r3, [r4, #0]
 8010712:	b103      	cbz	r3, 8010716 <_close_r+0x1a>
 8010714:	602b      	str	r3, [r5, #0]
 8010716:	bd38      	pop	{r3, r4, r5, pc}
 8010718:	20006da0 	.word	0x20006da0

0801071c <__sflush_r>:
 801071c:	898a      	ldrh	r2, [r1, #12]
 801071e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010722:	4605      	mov	r5, r0
 8010724:	0710      	lsls	r0, r2, #28
 8010726:	460c      	mov	r4, r1
 8010728:	d458      	bmi.n	80107dc <__sflush_r+0xc0>
 801072a:	684b      	ldr	r3, [r1, #4]
 801072c:	2b00      	cmp	r3, #0
 801072e:	dc05      	bgt.n	801073c <__sflush_r+0x20>
 8010730:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010732:	2b00      	cmp	r3, #0
 8010734:	dc02      	bgt.n	801073c <__sflush_r+0x20>
 8010736:	2000      	movs	r0, #0
 8010738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801073c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801073e:	2e00      	cmp	r6, #0
 8010740:	d0f9      	beq.n	8010736 <__sflush_r+0x1a>
 8010742:	2300      	movs	r3, #0
 8010744:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010748:	682f      	ldr	r7, [r5, #0]
 801074a:	6a21      	ldr	r1, [r4, #32]
 801074c:	602b      	str	r3, [r5, #0]
 801074e:	d032      	beq.n	80107b6 <__sflush_r+0x9a>
 8010750:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010752:	89a3      	ldrh	r3, [r4, #12]
 8010754:	075a      	lsls	r2, r3, #29
 8010756:	d505      	bpl.n	8010764 <__sflush_r+0x48>
 8010758:	6863      	ldr	r3, [r4, #4]
 801075a:	1ac0      	subs	r0, r0, r3
 801075c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801075e:	b10b      	cbz	r3, 8010764 <__sflush_r+0x48>
 8010760:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010762:	1ac0      	subs	r0, r0, r3
 8010764:	2300      	movs	r3, #0
 8010766:	4602      	mov	r2, r0
 8010768:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801076a:	6a21      	ldr	r1, [r4, #32]
 801076c:	4628      	mov	r0, r5
 801076e:	47b0      	blx	r6
 8010770:	1c43      	adds	r3, r0, #1
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	d106      	bne.n	8010784 <__sflush_r+0x68>
 8010776:	6829      	ldr	r1, [r5, #0]
 8010778:	291d      	cmp	r1, #29
 801077a:	d848      	bhi.n	801080e <__sflush_r+0xf2>
 801077c:	4a29      	ldr	r2, [pc, #164]	; (8010824 <__sflush_r+0x108>)
 801077e:	40ca      	lsrs	r2, r1
 8010780:	07d6      	lsls	r6, r2, #31
 8010782:	d544      	bpl.n	801080e <__sflush_r+0xf2>
 8010784:	2200      	movs	r2, #0
 8010786:	6062      	str	r2, [r4, #4]
 8010788:	04d9      	lsls	r1, r3, #19
 801078a:	6922      	ldr	r2, [r4, #16]
 801078c:	6022      	str	r2, [r4, #0]
 801078e:	d504      	bpl.n	801079a <__sflush_r+0x7e>
 8010790:	1c42      	adds	r2, r0, #1
 8010792:	d101      	bne.n	8010798 <__sflush_r+0x7c>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b903      	cbnz	r3, 801079a <__sflush_r+0x7e>
 8010798:	6560      	str	r0, [r4, #84]	; 0x54
 801079a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801079c:	602f      	str	r7, [r5, #0]
 801079e:	2900      	cmp	r1, #0
 80107a0:	d0c9      	beq.n	8010736 <__sflush_r+0x1a>
 80107a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107a6:	4299      	cmp	r1, r3
 80107a8:	d002      	beq.n	80107b0 <__sflush_r+0x94>
 80107aa:	4628      	mov	r0, r5
 80107ac:	f7ff fb10 	bl	800fdd0 <_free_r>
 80107b0:	2000      	movs	r0, #0
 80107b2:	6360      	str	r0, [r4, #52]	; 0x34
 80107b4:	e7c0      	b.n	8010738 <__sflush_r+0x1c>
 80107b6:	2301      	movs	r3, #1
 80107b8:	4628      	mov	r0, r5
 80107ba:	47b0      	blx	r6
 80107bc:	1c41      	adds	r1, r0, #1
 80107be:	d1c8      	bne.n	8010752 <__sflush_r+0x36>
 80107c0:	682b      	ldr	r3, [r5, #0]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	d0c5      	beq.n	8010752 <__sflush_r+0x36>
 80107c6:	2b1d      	cmp	r3, #29
 80107c8:	d001      	beq.n	80107ce <__sflush_r+0xb2>
 80107ca:	2b16      	cmp	r3, #22
 80107cc:	d101      	bne.n	80107d2 <__sflush_r+0xb6>
 80107ce:	602f      	str	r7, [r5, #0]
 80107d0:	e7b1      	b.n	8010736 <__sflush_r+0x1a>
 80107d2:	89a3      	ldrh	r3, [r4, #12]
 80107d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107d8:	81a3      	strh	r3, [r4, #12]
 80107da:	e7ad      	b.n	8010738 <__sflush_r+0x1c>
 80107dc:	690f      	ldr	r7, [r1, #16]
 80107de:	2f00      	cmp	r7, #0
 80107e0:	d0a9      	beq.n	8010736 <__sflush_r+0x1a>
 80107e2:	0793      	lsls	r3, r2, #30
 80107e4:	680e      	ldr	r6, [r1, #0]
 80107e6:	bf08      	it	eq
 80107e8:	694b      	ldreq	r3, [r1, #20]
 80107ea:	600f      	str	r7, [r1, #0]
 80107ec:	bf18      	it	ne
 80107ee:	2300      	movne	r3, #0
 80107f0:	eba6 0807 	sub.w	r8, r6, r7
 80107f4:	608b      	str	r3, [r1, #8]
 80107f6:	f1b8 0f00 	cmp.w	r8, #0
 80107fa:	dd9c      	ble.n	8010736 <__sflush_r+0x1a>
 80107fc:	4643      	mov	r3, r8
 80107fe:	463a      	mov	r2, r7
 8010800:	6a21      	ldr	r1, [r4, #32]
 8010802:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010804:	4628      	mov	r0, r5
 8010806:	47b0      	blx	r6
 8010808:	2800      	cmp	r0, #0
 801080a:	dc06      	bgt.n	801081a <__sflush_r+0xfe>
 801080c:	89a3      	ldrh	r3, [r4, #12]
 801080e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010812:	81a3      	strh	r3, [r4, #12]
 8010814:	f04f 30ff 	mov.w	r0, #4294967295
 8010818:	e78e      	b.n	8010738 <__sflush_r+0x1c>
 801081a:	4407      	add	r7, r0
 801081c:	eba8 0800 	sub.w	r8, r8, r0
 8010820:	e7e9      	b.n	80107f6 <__sflush_r+0xda>
 8010822:	bf00      	nop
 8010824:	20400001 	.word	0x20400001

08010828 <_fflush_r>:
 8010828:	b538      	push	{r3, r4, r5, lr}
 801082a:	690b      	ldr	r3, [r1, #16]
 801082c:	4605      	mov	r5, r0
 801082e:	460c      	mov	r4, r1
 8010830:	b1db      	cbz	r3, 801086a <_fflush_r+0x42>
 8010832:	b118      	cbz	r0, 801083c <_fflush_r+0x14>
 8010834:	6983      	ldr	r3, [r0, #24]
 8010836:	b90b      	cbnz	r3, 801083c <_fflush_r+0x14>
 8010838:	f7ff fa38 	bl	800fcac <__sinit>
 801083c:	4b0c      	ldr	r3, [pc, #48]	; (8010870 <_fflush_r+0x48>)
 801083e:	429c      	cmp	r4, r3
 8010840:	d109      	bne.n	8010856 <_fflush_r+0x2e>
 8010842:	686c      	ldr	r4, [r5, #4]
 8010844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010848:	b17b      	cbz	r3, 801086a <_fflush_r+0x42>
 801084a:	4621      	mov	r1, r4
 801084c:	4628      	mov	r0, r5
 801084e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010852:	f7ff bf63 	b.w	801071c <__sflush_r>
 8010856:	4b07      	ldr	r3, [pc, #28]	; (8010874 <_fflush_r+0x4c>)
 8010858:	429c      	cmp	r4, r3
 801085a:	d101      	bne.n	8010860 <_fflush_r+0x38>
 801085c:	68ac      	ldr	r4, [r5, #8]
 801085e:	e7f1      	b.n	8010844 <_fflush_r+0x1c>
 8010860:	4b05      	ldr	r3, [pc, #20]	; (8010878 <_fflush_r+0x50>)
 8010862:	429c      	cmp	r4, r3
 8010864:	bf08      	it	eq
 8010866:	68ec      	ldreq	r4, [r5, #12]
 8010868:	e7ec      	b.n	8010844 <_fflush_r+0x1c>
 801086a:	2000      	movs	r0, #0
 801086c:	bd38      	pop	{r3, r4, r5, pc}
 801086e:	bf00      	nop
 8010870:	0801395c 	.word	0x0801395c
 8010874:	0801397c 	.word	0x0801397c
 8010878:	0801393c 	.word	0x0801393c

0801087c <_lseek_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	4c07      	ldr	r4, [pc, #28]	; (801089c <_lseek_r+0x20>)
 8010880:	4605      	mov	r5, r0
 8010882:	4608      	mov	r0, r1
 8010884:	4611      	mov	r1, r2
 8010886:	2200      	movs	r2, #0
 8010888:	6022      	str	r2, [r4, #0]
 801088a:	461a      	mov	r2, r3
 801088c:	f7f0 f86a 	bl	8000964 <_lseek>
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	d102      	bne.n	801089a <_lseek_r+0x1e>
 8010894:	6823      	ldr	r3, [r4, #0]
 8010896:	b103      	cbz	r3, 801089a <_lseek_r+0x1e>
 8010898:	602b      	str	r3, [r5, #0]
 801089a:	bd38      	pop	{r3, r4, r5, pc}
 801089c:	20006da0 	.word	0x20006da0

080108a0 <__swhatbuf_r>:
 80108a0:	b570      	push	{r4, r5, r6, lr}
 80108a2:	460e      	mov	r6, r1
 80108a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108a8:	2900      	cmp	r1, #0
 80108aa:	b096      	sub	sp, #88	; 0x58
 80108ac:	4614      	mov	r4, r2
 80108ae:	461d      	mov	r5, r3
 80108b0:	da07      	bge.n	80108c2 <__swhatbuf_r+0x22>
 80108b2:	2300      	movs	r3, #0
 80108b4:	602b      	str	r3, [r5, #0]
 80108b6:	89b3      	ldrh	r3, [r6, #12]
 80108b8:	061a      	lsls	r2, r3, #24
 80108ba:	d410      	bmi.n	80108de <__swhatbuf_r+0x3e>
 80108bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80108c0:	e00e      	b.n	80108e0 <__swhatbuf_r+0x40>
 80108c2:	466a      	mov	r2, sp
 80108c4:	f000 f864 	bl	8010990 <_fstat_r>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	dbf2      	blt.n	80108b2 <__swhatbuf_r+0x12>
 80108cc:	9a01      	ldr	r2, [sp, #4]
 80108ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80108d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80108d6:	425a      	negs	r2, r3
 80108d8:	415a      	adcs	r2, r3
 80108da:	602a      	str	r2, [r5, #0]
 80108dc:	e7ee      	b.n	80108bc <__swhatbuf_r+0x1c>
 80108de:	2340      	movs	r3, #64	; 0x40
 80108e0:	2000      	movs	r0, #0
 80108e2:	6023      	str	r3, [r4, #0]
 80108e4:	b016      	add	sp, #88	; 0x58
 80108e6:	bd70      	pop	{r4, r5, r6, pc}

080108e8 <__smakebuf_r>:
 80108e8:	898b      	ldrh	r3, [r1, #12]
 80108ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80108ec:	079d      	lsls	r5, r3, #30
 80108ee:	4606      	mov	r6, r0
 80108f0:	460c      	mov	r4, r1
 80108f2:	d507      	bpl.n	8010904 <__smakebuf_r+0x1c>
 80108f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80108f8:	6023      	str	r3, [r4, #0]
 80108fa:	6123      	str	r3, [r4, #16]
 80108fc:	2301      	movs	r3, #1
 80108fe:	6163      	str	r3, [r4, #20]
 8010900:	b002      	add	sp, #8
 8010902:	bd70      	pop	{r4, r5, r6, pc}
 8010904:	ab01      	add	r3, sp, #4
 8010906:	466a      	mov	r2, sp
 8010908:	f7ff ffca 	bl	80108a0 <__swhatbuf_r>
 801090c:	9900      	ldr	r1, [sp, #0]
 801090e:	4605      	mov	r5, r0
 8010910:	4630      	mov	r0, r6
 8010912:	f7ff faab 	bl	800fe6c <_malloc_r>
 8010916:	b948      	cbnz	r0, 801092c <__smakebuf_r+0x44>
 8010918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801091c:	059a      	lsls	r2, r3, #22
 801091e:	d4ef      	bmi.n	8010900 <__smakebuf_r+0x18>
 8010920:	f023 0303 	bic.w	r3, r3, #3
 8010924:	f043 0302 	orr.w	r3, r3, #2
 8010928:	81a3      	strh	r3, [r4, #12]
 801092a:	e7e3      	b.n	80108f4 <__smakebuf_r+0xc>
 801092c:	4b0d      	ldr	r3, [pc, #52]	; (8010964 <__smakebuf_r+0x7c>)
 801092e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010930:	89a3      	ldrh	r3, [r4, #12]
 8010932:	6020      	str	r0, [r4, #0]
 8010934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010938:	81a3      	strh	r3, [r4, #12]
 801093a:	9b00      	ldr	r3, [sp, #0]
 801093c:	6163      	str	r3, [r4, #20]
 801093e:	9b01      	ldr	r3, [sp, #4]
 8010940:	6120      	str	r0, [r4, #16]
 8010942:	b15b      	cbz	r3, 801095c <__smakebuf_r+0x74>
 8010944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010948:	4630      	mov	r0, r6
 801094a:	f000 f833 	bl	80109b4 <_isatty_r>
 801094e:	b128      	cbz	r0, 801095c <__smakebuf_r+0x74>
 8010950:	89a3      	ldrh	r3, [r4, #12]
 8010952:	f023 0303 	bic.w	r3, r3, #3
 8010956:	f043 0301 	orr.w	r3, r3, #1
 801095a:	81a3      	strh	r3, [r4, #12]
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	431d      	orrs	r5, r3
 8010960:	81a5      	strh	r5, [r4, #12]
 8010962:	e7cd      	b.n	8010900 <__smakebuf_r+0x18>
 8010964:	0800fc75 	.word	0x0800fc75

08010968 <__malloc_lock>:
 8010968:	4770      	bx	lr

0801096a <__malloc_unlock>:
 801096a:	4770      	bx	lr

0801096c <_read_r>:
 801096c:	b538      	push	{r3, r4, r5, lr}
 801096e:	4c07      	ldr	r4, [pc, #28]	; (801098c <_read_r+0x20>)
 8010970:	4605      	mov	r5, r0
 8010972:	4608      	mov	r0, r1
 8010974:	4611      	mov	r1, r2
 8010976:	2200      	movs	r2, #0
 8010978:	6022      	str	r2, [r4, #0]
 801097a:	461a      	mov	r2, r3
 801097c:	f7ef ff92 	bl	80008a4 <_read>
 8010980:	1c43      	adds	r3, r0, #1
 8010982:	d102      	bne.n	801098a <_read_r+0x1e>
 8010984:	6823      	ldr	r3, [r4, #0]
 8010986:	b103      	cbz	r3, 801098a <_read_r+0x1e>
 8010988:	602b      	str	r3, [r5, #0]
 801098a:	bd38      	pop	{r3, r4, r5, pc}
 801098c:	20006da0 	.word	0x20006da0

08010990 <_fstat_r>:
 8010990:	b538      	push	{r3, r4, r5, lr}
 8010992:	4c07      	ldr	r4, [pc, #28]	; (80109b0 <_fstat_r+0x20>)
 8010994:	2300      	movs	r3, #0
 8010996:	4605      	mov	r5, r0
 8010998:	4608      	mov	r0, r1
 801099a:	4611      	mov	r1, r2
 801099c:	6023      	str	r3, [r4, #0]
 801099e:	f7ef ffc6 	bl	800092e <_fstat>
 80109a2:	1c43      	adds	r3, r0, #1
 80109a4:	d102      	bne.n	80109ac <_fstat_r+0x1c>
 80109a6:	6823      	ldr	r3, [r4, #0]
 80109a8:	b103      	cbz	r3, 80109ac <_fstat_r+0x1c>
 80109aa:	602b      	str	r3, [r5, #0]
 80109ac:	bd38      	pop	{r3, r4, r5, pc}
 80109ae:	bf00      	nop
 80109b0:	20006da0 	.word	0x20006da0

080109b4 <_isatty_r>:
 80109b4:	b538      	push	{r3, r4, r5, lr}
 80109b6:	4c06      	ldr	r4, [pc, #24]	; (80109d0 <_isatty_r+0x1c>)
 80109b8:	2300      	movs	r3, #0
 80109ba:	4605      	mov	r5, r0
 80109bc:	4608      	mov	r0, r1
 80109be:	6023      	str	r3, [r4, #0]
 80109c0:	f7ef ffc5 	bl	800094e <_isatty>
 80109c4:	1c43      	adds	r3, r0, #1
 80109c6:	d102      	bne.n	80109ce <_isatty_r+0x1a>
 80109c8:	6823      	ldr	r3, [r4, #0]
 80109ca:	b103      	cbz	r3, 80109ce <_isatty_r+0x1a>
 80109cc:	602b      	str	r3, [r5, #0]
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	20006da0 	.word	0x20006da0

080109d4 <_init>:
 80109d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109d6:	bf00      	nop
 80109d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109da:	bc08      	pop	{r3}
 80109dc:	469e      	mov	lr, r3
 80109de:	4770      	bx	lr

080109e0 <_fini>:
 80109e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109e2:	bf00      	nop
 80109e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109e6:	bc08      	pop	{r3}
 80109e8:	469e      	mov	lr, r3
 80109ea:	4770      	bx	lr
