
STM32F4_HAL_ETH_TCPCLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011910  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003004  08011ac0  08011ac0  00021ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014ac4  08014ac4  0003007c  2**0
                  CONTENTS
  4 .ARM          00000008  08014ac4  08014ac4  00024ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014acc  08014acc  0003007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014acc  08014acc  00024acc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014ad0  08014ad0  00024ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08014ad4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006e3c  2000007c  08014b50  0003007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20006eb8  08014b50  00036eb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c258  00000000  00000000  000300ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005414  00000000  00000000  0005c304  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001248  00000000  00000000  00061718  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000011b8  00000000  00000000  00062960  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f87f  00000000  00000000  00063b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001d0d3  00000000  00000000  00093397  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8a26  00000000  00000000  000b046a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00198e90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e24  00000000  00000000  00198f0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08011aa8 	.word	0x08011aa8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	08011aa8 	.word	0x08011aa8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08a      	sub	sp, #40	; 0x28
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	613b      	str	r3, [r7, #16]
 80005ba:	4b35      	ldr	r3, [pc, #212]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a34      	ldr	r2, [pc, #208]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005c0:	f043 0304 	orr.w	r3, r3, #4
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b32      	ldr	r3, [pc, #200]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0304 	and.w	r3, r3, #4
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a2d      	ldr	r2, [pc, #180]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a26      	ldr	r2, [pc, #152]	; (8000690 <MX_GPIO_Init+0xf0>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b24      	ldr	r3, [pc, #144]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a1f      	ldr	r2, [pc, #124]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b1d      	ldr	r3, [pc, #116]	; (8000690 <MX_GPIO_Init+0xf0>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_GPIO_Init+0xf0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a18      	ldr	r2, [pc, #96]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_GPIO_Init+0xf0>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800063e:	603b      	str	r3, [r7, #0]
 8000640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f244 0181 	movw	r1, #16513	; 0x4081
 8000648:	4812      	ldr	r0, [pc, #72]	; (8000694 <MX_GPIO_Init+0xf4>)
 800064a:	f002 f81b 	bl	8002684 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 800064e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 800065c:	f107 0314 	add.w	r3, r7, #20
 8000660:	4619      	mov	r1, r3
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_GPIO_Init+0xf8>)
 8000664:	f001 fe64 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 8000668:	f244 0381 	movw	r3, #16513	; 0x4081
 800066c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066e:	2301      	movs	r3, #1
 8000670:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000676:	2300      	movs	r3, #0
 8000678:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800067a:	f107 0314 	add.w	r3, r7, #20
 800067e:	4619      	mov	r1, r3
 8000680:	4804      	ldr	r0, [pc, #16]	; (8000694 <MX_GPIO_Init+0xf4>)
 8000682:	f001 fe55 	bl	8002330 <HAL_GPIO_Init>

}
 8000686:	bf00      	nop
 8000688:	3728      	adds	r7, #40	; 0x28
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40020400 	.word	0x40020400
 8000698:	40020800 	.word	0x40020800

0800069c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006a4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006a8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d013      	beq.n	80006dc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80006b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006b8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80006bc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d00b      	beq.n	80006dc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80006c4:	e000      	b.n	80006c8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80006c6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80006c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d0f9      	beq.n	80006c6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80006d2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80006d6:	687a      	ldr	r2, [r7, #4]
 80006d8:	b2d2      	uxtb	r2, r2
 80006da:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80006dc:	687b      	ldr	r3, [r7, #4]
}
 80006de:	4618      	mov	r0, r3
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr

080006ea <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b086      	sub	sp, #24
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	60f8      	str	r0, [r7, #12]
 80006f2:	60b9      	str	r1, [r7, #8]
 80006f4:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
 80006fa:	e009      	b.n	8000710 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	1c5a      	adds	r2, r3, #1
 8000700:	60ba      	str	r2, [r7, #8]
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffc9 	bl	800069c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf1      	blt.n	80006fc <_write+0x12>
  }
  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <ethernetif_notify_conn_changed>:


void ethernetif_notify_conn_changed(struct netif *netif)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
   when the callback is needed,
   */
  if (netif_is_link_up(netif))
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8000732:	089b      	lsrs	r3, r3, #2
 8000734:	f003 0301 	and.w	r3, r3, #1
 8000738:	b2db      	uxtb	r3, r3
 800073a:	2b00      	cmp	r3, #0
 800073c:	d00b      	beq.n	8000756 <ethernetif_notify_conn_changed+0x32>
  {
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2101      	movs	r1, #1
 8000742:	480c      	ldr	r0, [pc, #48]	; (8000774 <ethernetif_notify_conn_changed+0x50>)
 8000744:	f001 ff9e 	bl	8002684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8000748:	2200      	movs	r2, #0
 800074a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074e:	4809      	ldr	r0, [pc, #36]	; (8000774 <ethernetif_notify_conn_changed+0x50>)
 8000750:	f001 ff98 	bl	8002684 <HAL_GPIO_WritePin>
  else
  {
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
  }
}
 8000754:	e00a      	b.n	800076c <ethernetif_notify_conn_changed+0x48>
    HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	2101      	movs	r1, #1
 800075a:	4806      	ldr	r0, [pc, #24]	; (8000774 <ethernetif_notify_conn_changed+0x50>)
 800075c:	f001 ff92 	bl	8002684 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 8000760:	2201      	movs	r2, #1
 8000762:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000766:	4803      	ldr	r0, [pc, #12]	; (8000774 <ethernetif_notify_conn_changed+0x50>)
 8000768:	f001 ff8c 	bl	8002684 <HAL_GPIO_WritePin>
}
 800076c:	bf00      	nop
 800076e:	3708      	adds	r7, #8
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40020400 	.word	0x40020400

08000778 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800077c:	f000 fb38 	bl	8000df0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000780:	f000 f818 	bl	80007b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000784:	f7ff ff0c 	bl	80005a0 <MX_GPIO_Init>
  MX_LWIP_Init();
 8000788:	f002 fbea 	bl	8002f60 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  ethernetif_notify_conn_changed(&gnetif);
 800078c:	4807      	ldr	r0, [pc, #28]	; (80007ac <main+0x34>)
 800078e:	f7ff ffc9 	bl	8000724 <ethernetif_notify_conn_changed>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    MX_LWIP_Process();
 8000792:	f002 fc2b 	bl	8002fec <MX_LWIP_Process>

    if(ntpFlag)
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <main+0x38>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d0f9      	beq.n	8000792 <main+0x1a>
    {
      ntpFlag = false;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <main+0x38>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	701a      	strb	r2, [r3, #0]
      app_start_get_time();
 80007a4:	f000 f978 	bl	8000a98 <app_start_get_time>
    MX_LWIP_Process();
 80007a8:	e7f3      	b.n	8000792 <main+0x1a>
 80007aa:	bf00      	nop
 80007ac:	200007c4 	.word	0x200007c4
 80007b0:	20000098 	.word	0x20000098

080007b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b094      	sub	sp, #80	; 0x50
 80007b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	2230      	movs	r2, #48	; 0x30
 80007c0:	2100      	movs	r1, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f010 fa48 	bl	8010c58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007c8:	f107 030c 	add.w	r3, r7, #12
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
 80007d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d8:	2300      	movs	r3, #0
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	4b28      	ldr	r3, [pc, #160]	; (8000880 <SystemClock_Config+0xcc>)
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	4a27      	ldr	r2, [pc, #156]	; (8000880 <SystemClock_Config+0xcc>)
 80007e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e6:	6413      	str	r3, [r2, #64]	; 0x40
 80007e8:	4b25      	ldr	r3, [pc, #148]	; (8000880 <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007f0:	60bb      	str	r3, [r7, #8]
 80007f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f4:	2300      	movs	r3, #0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <SystemClock_Config+0xd0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a21      	ldr	r2, [pc, #132]	; (8000884 <SystemClock_Config+0xd0>)
 80007fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000802:	6013      	str	r3, [r2, #0]
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000810:	2301      	movs	r3, #1
 8000812:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000814:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000818:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081a:	2302      	movs	r3, #2
 800081c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000822:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000824:	2304      	movs	r3, #4
 8000826:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000828:	23a8      	movs	r3, #168	; 0xa8
 800082a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000830:	2307      	movs	r3, #7
 8000832:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0320 	add.w	r3, r7, #32
 8000838:	4618      	mov	r0, r3
 800083a:	f001 ff57 	bl	80026ec <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000844:	f000 f820 	bl	8000888 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2302      	movs	r3, #2
 800084e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000854:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000858:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800085a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800085e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	2105      	movs	r1, #5
 8000866:	4618      	mov	r0, r3
 8000868:	f002 f9b0 	bl	8002bcc <HAL_RCC_ClockConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000872:	f000 f809 	bl	8000888 <Error_Handler>
  }
}
 8000876:	bf00      	nop
 8000878:	3750      	adds	r7, #80	; 0x50
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40007000 	.word	0x40007000

08000888 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	607b      	str	r3, [r7, #4]
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008a6:	4a0f      	ldr	r2, [pc, #60]	; (80008e4 <HAL_MspInit+0x4c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6453      	str	r3, [r2, #68]	; 0x44
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <HAL_MspInit+0x4c>)
 80008b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	607b      	str	r3, [r7, #4]
 80008b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	603b      	str	r3, [r7, #0]
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a08      	ldr	r2, [pc, #32]	; (80008e4 <HAL_MspInit+0x4c>)
 80008c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ca:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d2:	603b      	str	r3, [r7, #0]
 80008d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008d6:	bf00      	nop
 80008d8:	370c      	adds	r7, #12
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr
 80008e2:	bf00      	nop
 80008e4:	40023800 	.word	0x40023800

080008e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e8:	b480      	push	{r7}
 80008ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ec:	bf00      	nop
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008fa:	e7fe      	b.n	80008fa <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <MemManage_Handler+0x4>

08000902 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <BusFault_Handler+0x4>

08000908 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <UsageFault_Handler+0x4>

0800090e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000912:	bf00      	nop
 8000914:	46bd      	mov	sp, r7
 8000916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091a:	4770      	bx	lr

0800091c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000920:	bf00      	nop
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800093c:	f000 faaa 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  ntpCounter++;
 8000940:	4b08      	ldr	r3, [pc, #32]	; (8000964 <SysTick_Handler+0x2c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	4a07      	ldr	r2, [pc, #28]	; (8000964 <SysTick_Handler+0x2c>)
 8000948:	6013      	str	r3, [r2, #0]

  if(ntpCounter > 500)
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <SysTick_Handler+0x2c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8000952:	d905      	bls.n	8000960 <SysTick_Handler+0x28>
  {
    ntpFlag = true;
 8000954:	4b04      	ldr	r3, [pc, #16]	; (8000968 <SysTick_Handler+0x30>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
    ntpCounter = 0;
 800095a:	4b02      	ldr	r3, [pc, #8]	; (8000964 <SysTick_Handler+0x2c>)
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END SysTick_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000009c 	.word	0x2000009c
 8000968:	20000098 	.word	0x20000098

0800096c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	60f8      	str	r0, [r7, #12]
 8000974:	60b9      	str	r1, [r7, #8]
 8000976:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000978:	2300      	movs	r3, #0
 800097a:	617b      	str	r3, [r7, #20]
 800097c:	e00a      	b.n	8000994 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800097e:	f3af 8000 	nop.w
 8000982:	4601      	mov	r1, r0
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	1c5a      	adds	r2, r3, #1
 8000988:	60ba      	str	r2, [r7, #8]
 800098a:	b2ca      	uxtb	r2, r1
 800098c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	3301      	adds	r3, #1
 8000992:	617b      	str	r3, [r7, #20]
 8000994:	697a      	ldr	r2, [r7, #20]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	429a      	cmp	r2, r3
 800099a:	dbf0      	blt.n	800097e <_read+0x12>
	}

return len;
 800099c:	687b      	ldr	r3, [r7, #4]
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3718      	adds	r7, #24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80009a6:	b480      	push	{r7}
 80009a8:	b083      	sub	sp, #12
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	6078      	str	r0, [r7, #4]
	return -1;
 80009ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009ce:	605a      	str	r2, [r3, #4]
	return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	370c      	adds	r7, #12
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <_isatty>:

int _isatty(int file)
{
 80009de:	b480      	push	{r7}
 80009e0:	b083      	sub	sp, #12
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
	return 1;
 80009e6:	2301      	movs	r3, #1
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b085      	sub	sp, #20
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
	return 0;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3714      	adds	r7, #20
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
	...

08000a10 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <_sbrk+0x50>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x16>
		heap_end = &end;
 8000a20:	4b0f      	ldr	r3, [pc, #60]	; (8000a60 <_sbrk+0x50>)
 8000a22:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <_sbrk+0x54>)
 8000a24:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000a26:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <_sbrk+0x50>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <_sbrk+0x50>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4413      	add	r3, r2
 8000a34:	466a      	mov	r2, sp
 8000a36:	4293      	cmp	r3, r2
 8000a38:	d905      	bls.n	8000a46 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000a3a:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <_sbrk+0x58>)
 8000a3c:	220c      	movs	r2, #12
 8000a3e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000a40:	f04f 33ff 	mov.w	r3, #4294967295
 8000a44:	e006      	b.n	8000a54 <_sbrk+0x44>
	}

	heap_end += incr;
 8000a46:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <_sbrk+0x50>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <_sbrk+0x50>)
 8000a50:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000a52:	68fb      	ldr	r3, [r7, #12]
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	200000a0 	.word	0x200000a0
 8000a64:	20006eb8 	.word	0x20006eb8
 8000a68:	20006eb4 	.word	0x20006eb4

08000a6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a70:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <SystemInit+0x28>)
 8000a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a76:	4a07      	ldr	r2, [pc, #28]	; (8000a94 <SystemInit+0x28>)
 8000a78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <SystemInit+0x28>)
 8000a82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a86:	609a      	str	r2, [r3, #8]
#endif
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <app_start_get_time>:
static void app_close_conn(void); //close function
static void app_send_data(void); //send function

/* start get time */
void app_start_get_time(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  //tcp_connect => tcp_callback_connected => tcp_write => tcp_callback_received => tcp_close
  app_open_conn();
 8000a9c:	f000 f802 	bl	8000aa4 <app_open_conn>
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <app_open_conn>:

/*
 * app_open_connection 에서는 pcb 생성 후 tcp_connect 를 호출하여 서버에 연결한다.
 */
static err_t app_open_conn(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  err_t err;

  if (pcb_client == NULL)
 8000aaa:	4b1c      	ldr	r3, [pc, #112]	; (8000b1c <app_open_conn+0x78>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d119      	bne.n	8000ae6 <app_open_conn+0x42>
  {
    pcb_client = tcp_new(); //allocate pcb memory
 8000ab2:	f006 fbc7 	bl	8007244 <tcp_new>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b18      	ldr	r3, [pc, #96]	; (8000b1c <app_open_conn+0x78>)
 8000aba:	601a      	str	r2, [r3, #0]
    if (pcb_client == NULL)
 8000abc:	4b17      	ldr	r3, [pc, #92]	; (8000b1c <app_open_conn+0x78>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d110      	bne.n	8000ae6 <app_open_conn+0x42>
    {
      memp_free(MEMP_TCP_PCB, pcb_client); //lack of memory
 8000ac4:	4b15      	ldr	r3, [pc, #84]	; (8000b1c <app_open_conn+0x78>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	f003 fe02 	bl	80046d4 <memp_free>
      pcb_client = NULL;
 8000ad0:	4b12      	ldr	r3, [pc, #72]	; (8000b1c <app_open_conn+0x78>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	601a      	str	r2, [r3, #0]
      HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //error led
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	4811      	ldr	r0, [pc, #68]	; (8000b20 <app_open_conn+0x7c>)
 8000adc:	f001 fdd2 	bl	8002684 <HAL_GPIO_WritePin>
      return ERR_MEM;
 8000ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae4:	e015      	b.n	8000b12 <app_open_conn+0x6e>
    }
  }

  IP4_ADDR(&server_addr, SERVER_IP1, SERVER_IP2, SERVER_IP3, SERVER_IP4);
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <app_open_conn+0x80>)
 8000ae8:	4a0f      	ldr	r2, [pc, #60]	; (8000b28 <app_open_conn+0x84>)
 8000aea:	601a      	str	r2, [r3, #0]
  err = tcp_connect(pcb_client, &server_addr, SERVER_PORT, tcp_callback_connected); //connect
 8000aec:	4b0b      	ldr	r3, [pc, #44]	; (8000b1c <app_open_conn+0x78>)
 8000aee:	6818      	ldr	r0, [r3, #0]
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <app_open_conn+0x88>)
 8000af2:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000af6:	490b      	ldr	r1, [pc, #44]	; (8000b24 <app_open_conn+0x80>)
 8000af8:	f005 fc50 	bl	800639c <tcp_connect>
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]

  if(err == ERR_ISCONN) //not closed yet
 8000b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b04:	f113 0f0a 	cmn.w	r3, #10
 8000b08:	d101      	bne.n	8000b0e <app_open_conn+0x6a>
  {
    app_close_conn();
 8000b0a:	f000 f8fb 	bl	8000d04 <app_close_conn>
  }

  return err;
 8000b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3708      	adds	r7, #8
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000a4 	.word	0x200000a4
 8000b20:	40020400 	.word	0x40020400
 8000b24:	200000a8 	.word	0x200000a8
 8000b28:	e301a8c0 	.word	0xe301a8c0
 8000b2c:	08000b31 	.word	0x08000b31

08000b30 <tcp_callback_connected>:

/*
 * tcp_callback_connected 에서는 연결 성공 시 리퀘스트를 전송한다.
 */
static err_t tcp_callback_connected(void *arg, struct tcp_pcb *pcb_new, err_t err)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b084      	sub	sp, #16
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	4613      	mov	r3, r2
 8000b3c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);

  if (err != ERR_OK) //error when connected
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <tcp_callback_connected+0x1c>
  {
    return err;
 8000b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b4a:	e01b      	b.n	8000b84 <tcp_callback_connected+0x54>
  }

  tcp_setprio(pcb_new, TCP_PRIO_NORMAL); //set priority for new pcb
 8000b4c:	2140      	movs	r1, #64	; 0x40
 8000b4e:	68b8      	ldr	r0, [r7, #8]
 8000b50:	f006 f986 	bl	8006e60 <tcp_setprio>

  tcp_arg(pcb_new, 0); //no arg
 8000b54:	2100      	movs	r1, #0
 8000b56:	68b8      	ldr	r0, [r7, #8]
 8000b58:	f006 fb7c 	bl	8007254 <tcp_arg>
  tcp_sent(pcb_new, tcp_callback_sent); //register send callback
 8000b5c:	490b      	ldr	r1, [pc, #44]	; (8000b8c <tcp_callback_connected+0x5c>)
 8000b5e:	68b8      	ldr	r0, [r7, #8]
 8000b60:	f006 fbac 	bl	80072bc <tcp_sent>
  tcp_recv(pcb_new, tcp_callback_received);  //register receive callback
 8000b64:	490a      	ldr	r1, [pc, #40]	; (8000b90 <tcp_callback_connected+0x60>)
 8000b66:	68b8      	ldr	r0, [r7, #8]
 8000b68:	f006 fb86 	bl	8007278 <tcp_recv>
  tcp_err(pcb_new, tcp_callback_error); //register error callback
 8000b6c:	4909      	ldr	r1, [pc, #36]	; (8000b94 <tcp_callback_connected+0x64>)
 8000b6e:	68b8      	ldr	r0, [r7, #8]
 8000b70:	f006 fbc6 	bl	8007300 <tcp_err>
  tcp_poll(pcb_new, tcp_callback_poll, 0); //register poll callback
 8000b74:	2200      	movs	r2, #0
 8000b76:	4908      	ldr	r1, [pc, #32]	; (8000b98 <tcp_callback_connected+0x68>)
 8000b78:	68b8      	ldr	r0, [r7, #8]
 8000b7a:	f006 fbe3 	bl	8007344 <tcp_poll>

  app_send_data(); //send request
 8000b7e:	f000 f80d 	bl	8000b9c <app_send_data>

  return ERR_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	4618      	mov	r0, r3
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08000be9 	.word	0x08000be9
 8000b90:	08000c21 	.word	0x08000c21
 8000b94:	08000d61 	.word	0x08000d61
 8000b98:	08000d85 	.word	0x08000d85

08000b9c <app_send_data>:

/*
 * app_send_data 에서는 time 리퀘스트를 전송한다.
 */
static void app_send_data(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  memset(&packet, 0, sizeof(struct time_packet));
 8000ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <app_send_data+0x44>)
 8000ba8:	f010 f856 	bl	8010c58 <memset>
  packet.head = 0xAE;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <app_send_data+0x44>)
 8000bae:	22ae      	movs	r2, #174	; 0xae
 8000bb0:	701a      	strb	r2, [r3, #0]
  packet.type = REQ;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <app_send_data+0x44>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	705a      	strb	r2, [r3, #1]
  packet.tail = 0xEA;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <app_send_data+0x44>)
 8000bba:	22ea      	movs	r2, #234	; 0xea
 8000bbc:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

  tcp_write(pcb_client, &packet,sizeof(struct time_packet), TCP_WRITE_FLAG_COPY);
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <app_send_data+0x48>)
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bca:	4905      	ldr	r1, [pc, #20]	; (8000be0 <app_send_data+0x44>)
 8000bcc:	f009 fa66 	bl	800a09c <tcp_write>
  tcp_output(pcb_client); //flush
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <app_send_data+0x48>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00a f84d 	bl	800ac74 <tcp_output>
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200006c0 	.word	0x200006c0
 8000be4:	200000a4 	.word	0x200000a4

08000be8 <tcp_callback_sent>:

/*
 * tcp_callback_sent 은 전송 완료 시 호출된다.
 */
static err_t tcp_callback_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	80fb      	strh	r3, [r7, #6]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if(len != sizeof(struct time_packet))
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000bfc:	d005      	beq.n	8000c0a <tcp_callback_sent+0x22>
  {
    HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //error led
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2180      	movs	r1, #128	; 0x80
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <tcp_callback_sent+0x34>)
 8000c04:	f001 fd3e 	bl	8002684 <HAL_GPIO_WritePin>
 8000c08:	e003      	b.n	8000c12 <tcp_callback_sent+0x2a>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin); //blink green when sent O.K
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4803      	ldr	r0, [pc, #12]	; (8000c1c <tcp_callback_sent+0x34>)
 8000c0e:	f001 fd52 	bl	80026b6 <HAL_GPIO_TogglePin>
  }

  return ERR_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	40020400 	.word	0x40020400

08000c20 <tcp_callback_received>:

/*
 * tcp_callback_received 은 데이터 수신 시 호출된다.
 */
static err_t tcp_callback_received(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 8000c20:	b5b0      	push	{r4, r5, r7, lr}
 8000c22:	b08a      	sub	sp, #40	; 0x28
 8000c24:	af04      	add	r7, sp, #16
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
 8000c2c:	70fb      	strb	r3, [r7, #3]
  err_t ret_err;

  if (p == NULL) //연결이 close 되었을 때 호출된다.
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d104      	bne.n	8000c3e <tcp_callback_received+0x1e>
  {
    app_close_conn();
 8000c34:	f000 f866 	bl	8000d04 <app_close_conn>
    ret_err = ERR_OK;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	75fb      	strb	r3, [r7, #23]
 8000c3c:	e056      	b.n	8000cec <tcp_callback_received+0xcc>
  }
  else if (err != ERR_OK) //tcp_abort 를 호출하였을 때 ERR_ABRT 가 들어온다.
 8000c3e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d00b      	beq.n	8000c5e <tcp_callback_received+0x3e>
  {
    tcp_recved(tpcb, p->tot_len); //advertise window size
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	891b      	ldrh	r3, [r3, #8]
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	68b8      	ldr	r0, [r7, #8]
 8000c4e:	f005 fb0f 	bl	8006270 <tcp_recved>

    pbuf_free(p); //clear buffer
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f004 fbbc 	bl	80053d0 <pbuf_free>
    ret_err = err;
 8000c58:	78fb      	ldrb	r3, [r7, #3]
 8000c5a:	75fb      	strb	r3, [r7, #23]
 8000c5c:	e046      	b.n	8000cec <tcp_callback_received+0xcc>
  }
  else //receiving data
  {
    tcp_recved(tpcb, p->tot_len);
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	891b      	ldrh	r3, [r3, #8]
 8000c62:	4619      	mov	r1, r3
 8000c64:	68b8      	ldr	r0, [r7, #8]
 8000c66:	f005 fb03 	bl	8006270 <tcp_recved>

    memcpy(&packet + written, p->payload, p->len);
 8000c6a:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <tcp_callback_received+0xd8>)
 8000c6c:	881b      	ldrh	r3, [r3, #0]
 8000c6e:	021b      	lsls	r3, r3, #8
 8000c70:	4a22      	ldr	r2, [pc, #136]	; (8000cfc <tcp_callback_received+0xdc>)
 8000c72:	1898      	adds	r0, r3, r2
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6859      	ldr	r1, [r3, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	895b      	ldrh	r3, [r3, #10]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	f00f ffe0 	bl	8010c42 <memcpy>
    written += p->len;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	895a      	ldrh	r2, [r3, #10]
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <tcp_callback_received+0xd8>)
 8000c88:	881b      	ldrh	r3, [r3, #0]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	4b1a      	ldr	r3, [pc, #104]	; (8000cf8 <tcp_callback_received+0xd8>)
 8000c90:	801a      	strh	r2, [r3, #0]

    if(written == sizeof(struct time_packet) && packet.type == RESP)
 8000c92:	4b19      	ldr	r3, [pc, #100]	; (8000cf8 <tcp_callback_received+0xd8>)
 8000c94:	881b      	ldrh	r3, [r3, #0]
 8000c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000c9a:	d122      	bne.n	8000ce2 <tcp_callback_received+0xc2>
 8000c9c:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <tcp_callback_received+0xdc>)
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d11e      	bne.n	8000ce2 <tcp_callback_received+0xc2>
    {
      written = 0;
 8000ca4:	4b14      	ldr	r3, [pc, #80]	; (8000cf8 <tcp_callback_received+0xd8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	801a      	strh	r2, [r3, #0]

      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
             packet.year + 2000,
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <tcp_callback_received+0xdc>)
 8000cac:	789b      	ldrb	r3, [r3, #2]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cae:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
             packet.month, packet.day, packet.hour, packet.minute, packet.second);
 8000cb2:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <tcp_callback_received+0xdc>)
 8000cb4:	78db      	ldrb	r3, [r3, #3]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cb6:	461c      	mov	r4, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second);
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <tcp_callback_received+0xdc>)
 8000cba:	791b      	ldrb	r3, [r3, #4]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cbc:	461d      	mov	r5, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second);
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <tcp_callback_received+0xdc>)
 8000cc0:	795b      	ldrb	r3, [r3, #5]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cc2:	461a      	mov	r2, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second);
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <tcp_callback_received+0xdc>)
 8000cc6:	799b      	ldrb	r3, [r3, #6]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cc8:	4618      	mov	r0, r3
             packet.month, packet.day, packet.hour, packet.minute, packet.second);
 8000cca:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <tcp_callback_received+0xdc>)
 8000ccc:	79db      	ldrb	r3, [r3, #7]
      printf("%04d-%02d-%02d %02d:%02d:%02d\n",
 8000cce:	9302      	str	r3, [sp, #8]
 8000cd0:	9001      	str	r0, [sp, #4]
 8000cd2:	9200      	str	r2, [sp, #0]
 8000cd4:	462b      	mov	r3, r5
 8000cd6:	4622      	mov	r2, r4
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <tcp_callback_received+0xe0>)
 8000cda:	f00f ffc5 	bl	8010c68 <iprintf>

      app_close_conn();
 8000cde:	f000 f811 	bl	8000d04 <app_close_conn>
    }

    pbuf_free(p);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f004 fb74 	bl	80053d0 <pbuf_free>
    ret_err = ERR_OK;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	75fb      	strb	r3, [r7, #23]
  }

  return ret_err;
 8000cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3718      	adds	r7, #24
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8000cf8:	200000ac 	.word	0x200000ac
 8000cfc:	200006c0 	.word	0x200006c0
 8000d00:	08011ac0 	.word	0x08011ac0

08000d04 <app_close_conn>:

/* close connection */
static void app_close_conn(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* clear callback functions */
  tcp_arg(pcb_client, NULL);
 8000d08:	4b14      	ldr	r3, [pc, #80]	; (8000d5c <app_close_conn+0x58>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f006 faa0 	bl	8007254 <tcp_arg>
  tcp_sent(pcb_client, NULL);
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <app_close_conn+0x58>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f006 face 	bl	80072bc <tcp_sent>
  tcp_recv(pcb_client, NULL);
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <app_close_conn+0x58>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 faa6 	bl	8007278 <tcp_recv>
  tcp_err(pcb_client, NULL);
 8000d2c:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <app_close_conn+0x58>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f006 fae4 	bl	8007300 <tcp_err>
  tcp_poll(pcb_client, NULL, 0);
 8000d38:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <app_close_conn+0x58>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f006 faff 	bl	8007344 <tcp_poll>

  tcp_close(pcb_client);    //close connection
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <app_close_conn+0x58>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f005 f940 	bl	8005fd0 <tcp_close>
  pcb_client = NULL;
 8000d50:	4b02      	ldr	r3, [pc, #8]	; (8000d5c <app_close_conn+0x58>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	601a      	str	r2, [r3, #0]
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000a4 	.word	0x200000a4

08000d60 <tcp_callback_error>:

/* error callback */
static void tcp_callback_error(void *arg, err_t err)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET); //error loed
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2180      	movs	r1, #128	; 0x80
 8000d70:	4803      	ldr	r0, [pc, #12]	; (8000d80 <tcp_callback_error+0x20>)
 8000d72:	f001 fc87 	bl	8002684 <HAL_GPIO_WritePin>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	40020400 	.word	0x40020400

08000d84 <tcp_callback_poll>:

/* poll callback */
static err_t tcp_callback_poll(void *arg, struct tcp_pcb *tpcb)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	6039      	str	r1, [r7, #0]
  return ERR_OK;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000d9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd4 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000da0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000da2:	e003      	b.n	8000dac <LoopCopyDataInit>

08000da4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000da6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000daa:	3104      	adds	r1, #4

08000dac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000dac:	480b      	ldr	r0, [pc, #44]	; (8000ddc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000db0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000db2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db4:	d3f6      	bcc.n	8000da4 <CopyDataInit>
  ldr  r2, =_sbss
 8000db6:	4a0b      	ldr	r2, [pc, #44]	; (8000de4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db8:	e002      	b.n	8000dc0 <LoopFillZerobss>

08000dba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000dba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000dbc:	f842 3b04 	str.w	r3, [r2], #4

08000dc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc4:	d3f9      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc6:	f7ff fe51 	bl	8000a6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dca:	f00f ff07 	bl	8010bdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dce:	f7ff fcd3 	bl	8000778 <main>
  bx  lr    
 8000dd2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dd4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000dd8:	08014ad4 	.word	0x08014ad4
  ldr  r0, =_sdata
 8000ddc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000de0:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8000de4:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8000de8:	20006eb8 	.word	0x20006eb8

08000dec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dec:	e7fe      	b.n	8000dec <ADC_IRQHandler>
	...

08000df0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df4:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <HAL_Init+0x40>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0d      	ldr	r2, [pc, #52]	; (8000e30 <HAL_Init+0x40>)
 8000dfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0a      	ldr	r2, [pc, #40]	; (8000e30 <HAL_Init+0x40>)
 8000e06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <HAL_Init+0x40>)
 8000e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e18:	2003      	movs	r0, #3
 8000e1a:	f000 f92f 	bl	800107c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1e:	2000      	movs	r0, #0
 8000e20:	f000 f808 	bl	8000e34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e24:	f7ff fd38 	bl	8000898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023c00 	.word	0x40023c00

08000e34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e3c:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_InitTick+0x54>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b12      	ldr	r3, [pc, #72]	; (8000e8c <HAL_InitTick+0x58>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f939 	bl	80010ca <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e00e      	b.n	8000e80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	d80a      	bhi.n	8000e7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e68:	2200      	movs	r2, #0
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	f000 f90f 	bl	8001092 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4a06      	ldr	r2, [pc, #24]	; (8000e90 <HAL_InitTick+0x5c>)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	20000000 	.word	0x20000000
 8000e8c:	20000008 	.word	0x20000008
 8000e90:	20000004 	.word	0x20000004

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_IncTick+0x20>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	4a04      	ldr	r2, [pc, #16]	; (8000eb8 <HAL_IncTick+0x24>)
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	20000008 	.word	0x20000008
 8000eb8:	200007c0 	.word	0x200007c0

08000ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8000ec0:	4b03      	ldr	r3, [pc, #12]	; (8000ed0 <HAL_GetTick+0x14>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	200007c0 	.word	0x200007c0

08000ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000edc:	f7ff ffee 	bl	8000ebc <HAL_GetTick>
 8000ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eec:	d005      	beq.n	8000efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eee:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <HAL_Delay+0x40>)
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	461a      	mov	r2, r3
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000efa:	bf00      	nop
 8000efc:	f7ff ffde 	bl	8000ebc <HAL_GetTick>
 8000f00:	4602      	mov	r2, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	429a      	cmp	r2, r3
 8000f0a:	d8f7      	bhi.n	8000efc <HAL_Delay+0x28>
  {
  }
}
 8000f0c:	bf00      	nop
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000008 	.word	0x20000008

08000f18 <__NVIC_SetPriorityGrouping>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b085      	sub	sp, #20
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	f003 0307 	and.w	r3, r3, #7
 8000f26:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f28:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2e:	68ba      	ldr	r2, [r7, #8]
 8000f30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f4a:	4a04      	ldr	r2, [pc, #16]	; (8000f5c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	60d3      	str	r3, [r2, #12]
}
 8000f50:	bf00      	nop
 8000f52:	3714      	adds	r7, #20
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_GetPriorityGrouping>:
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f64:	4b04      	ldr	r3, [pc, #16]	; (8000f78 <__NVIC_GetPriorityGrouping+0x18>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	0a1b      	lsrs	r3, r3, #8
 8000f6a:	f003 0307 	and.w	r3, r3, #7
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_SetPriority>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	6039      	str	r1, [r7, #0]
 8000f86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	db0a      	blt.n	8000fa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	490c      	ldr	r1, [pc, #48]	; (8000fc8 <__NVIC_SetPriority+0x4c>)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	0112      	lsls	r2, r2, #4
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000fa4:	e00a      	b.n	8000fbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4908      	ldr	r1, [pc, #32]	; (8000fcc <__NVIC_SetPriority+0x50>)
 8000fac:	79fb      	ldrb	r3, [r7, #7]
 8000fae:	f003 030f 	and.w	r3, r3, #15
 8000fb2:	3b04      	subs	r3, #4
 8000fb4:	0112      	lsls	r2, r2, #4
 8000fb6:	b2d2      	uxtb	r2, r2
 8000fb8:	440b      	add	r3, r1
 8000fba:	761a      	strb	r2, [r3, #24]
}
 8000fbc:	bf00      	nop
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr
 8000fc8:	e000e100 	.word	0xe000e100
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <NVIC_EncodePriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b089      	sub	sp, #36	; 0x24
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	60f8      	str	r0, [r7, #12]
 8000fd8:	60b9      	str	r1, [r7, #8]
 8000fda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	f1c3 0307 	rsb	r3, r3, #7
 8000fea:	2b04      	cmp	r3, #4
 8000fec:	bf28      	it	cs
 8000fee:	2304      	movcs	r3, #4
 8000ff0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3304      	adds	r3, #4
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	d902      	bls.n	8001000 <NVIC_EncodePriority+0x30>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3b03      	subs	r3, #3
 8000ffe:	e000      	b.n	8001002 <NVIC_EncodePriority+0x32>
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	f04f 32ff 	mov.w	r2, #4294967295
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	43da      	mvns	r2, r3
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	401a      	ands	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001018:	f04f 31ff 	mov.w	r1, #4294967295
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	fa01 f303 	lsl.w	r3, r1, r3
 8001022:	43d9      	mvns	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001028:	4313      	orrs	r3, r2
}
 800102a:	4618      	mov	r0, r3
 800102c:	3724      	adds	r7, #36	; 0x24
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <SysTick_Config>:
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3b01      	subs	r3, #1
 8001044:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001048:	d301      	bcc.n	800104e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800104a:	2301      	movs	r3, #1
 800104c:	e00f      	b.n	800106e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104e:	4a0a      	ldr	r2, [pc, #40]	; (8001078 <SysTick_Config+0x40>)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3b01      	subs	r3, #1
 8001054:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001056:	210f      	movs	r1, #15
 8001058:	f04f 30ff 	mov.w	r0, #4294967295
 800105c:	f7ff ff8e 	bl	8000f7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	4b05      	ldr	r3, [pc, #20]	; (8001078 <SysTick_Config+0x40>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <SysTick_Config+0x40>)
 8001068:	2207      	movs	r2, #7
 800106a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3708      	adds	r7, #8
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	e000e010 	.word	0xe000e010

0800107c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f7ff ff47 	bl	8000f18 <__NVIC_SetPriorityGrouping>
}
 800108a:	bf00      	nop
 800108c:	3708      	adds	r7, #8
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}

08001092 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001092:	b580      	push	{r7, lr}
 8001094:	b086      	sub	sp, #24
 8001096:	af00      	add	r7, sp, #0
 8001098:	4603      	mov	r3, r0
 800109a:	60b9      	str	r1, [r7, #8]
 800109c:	607a      	str	r2, [r7, #4]
 800109e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010a0:	2300      	movs	r3, #0
 80010a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a4:	f7ff ff5c 	bl	8000f60 <__NVIC_GetPriorityGrouping>
 80010a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	68b9      	ldr	r1, [r7, #8]
 80010ae:	6978      	ldr	r0, [r7, #20]
 80010b0:	f7ff ff8e 	bl	8000fd0 <NVIC_EncodePriority>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ba:	4611      	mov	r1, r2
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff5d 	bl	8000f7c <__NVIC_SetPriority>
}
 80010c2:	bf00      	nop
 80010c4:	3718      	adds	r7, #24
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffb0 	bl	8001038 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	2300      	movs	r3, #0
 80010f2:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80010f4:	4baa      	ldr	r3, [pc, #680]	; (80013a0 <HAL_ETH_Init+0x2bc>)
 80010f6:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80010fc:	2300      	movs	r3, #0
 80010fe:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e185      	b.n	8001416 <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001110:	b2db      	uxtb	r3, r3
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2200      	movs	r2, #0
 800111a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f001 ff72 	bl	8003008 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001124:	2300      	movs	r3, #0
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	4b9e      	ldr	r3, [pc, #632]	; (80013a4 <HAL_ETH_Init+0x2c0>)
 800112a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112c:	4a9d      	ldr	r2, [pc, #628]	; (80013a4 <HAL_ETH_Init+0x2c0>)
 800112e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001132:	6453      	str	r3, [r2, #68]	; 0x44
 8001134:	4b9b      	ldr	r3, [pc, #620]	; (80013a4 <HAL_ETH_Init+0x2c0>)
 8001136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001138:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001140:	4b99      	ldr	r3, [pc, #612]	; (80013a8 <HAL_ETH_Init+0x2c4>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	4a98      	ldr	r2, [pc, #608]	; (80013a8 <HAL_ETH_Init+0x2c4>)
 8001146:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800114a:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800114c:	4b96      	ldr	r3, [pc, #600]	; (80013a8 <HAL_ETH_Init+0x2c4>)
 800114e:	685a      	ldr	r2, [r3, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6a1b      	ldr	r3, [r3, #32]
 8001154:	4994      	ldr	r1, [pc, #592]	; (80013a8 <HAL_ETH_Init+0x2c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001170:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001172:	f7ff fea3 	bl	8000ebc <HAL_GetTick>
 8001176:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001178:	e011      	b.n	800119e <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 800117a:	f7ff fe9f 	bl	8000ebc <HAL_GetTick>
 800117e:	4602      	mov	r2, r0
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001188:	d909      	bls.n	800119e <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2203      	movs	r2, #3
 800118e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2200      	movs	r2, #0
 8001196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e13b      	b.n	8001416 <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d1e4      	bne.n	800117a <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	691b      	ldr	r3, [r3, #16]
 80011b6:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80011b8:	69fb      	ldr	r3, [r7, #28]
 80011ba:	f023 031c 	bic.w	r3, r3, #28
 80011be:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80011c0:	f001 fec2 	bl	8002f48 <HAL_RCC_GetHCLKFreq>
 80011c4:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	4a78      	ldr	r2, [pc, #480]	; (80013ac <HAL_ETH_Init+0x2c8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d908      	bls.n	80011e0 <HAL_ETH_Init+0xfc>
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	4a77      	ldr	r2, [pc, #476]	; (80013b0 <HAL_ETH_Init+0x2cc>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d804      	bhi.n	80011e0 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e027      	b.n	8001230 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80011e0:	69bb      	ldr	r3, [r7, #24]
 80011e2:	4a73      	ldr	r2, [pc, #460]	; (80013b0 <HAL_ETH_Init+0x2cc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d908      	bls.n	80011fa <HAL_ETH_Init+0x116>
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	4a72      	ldr	r2, [pc, #456]	; (80013b4 <HAL_ETH_Init+0x2d0>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d804      	bhi.n	80011fa <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f043 030c 	orr.w	r3, r3, #12
 80011f6:	61fb      	str	r3, [r7, #28]
 80011f8:	e01a      	b.n	8001230 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4a6d      	ldr	r2, [pc, #436]	; (80013b4 <HAL_ETH_Init+0x2d0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d903      	bls.n	800120a <HAL_ETH_Init+0x126>
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4a6c      	ldr	r2, [pc, #432]	; (80013b8 <HAL_ETH_Init+0x2d4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d911      	bls.n	800122e <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	4a6a      	ldr	r2, [pc, #424]	; (80013b8 <HAL_ETH_Init+0x2d4>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d908      	bls.n	8001224 <HAL_ETH_Init+0x140>
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	4a69      	ldr	r2, [pc, #420]	; (80013bc <HAL_ETH_Init+0x2d8>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d804      	bhi.n	8001224 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	f043 0304 	orr.w	r3, r3, #4
 8001220:	61fb      	str	r3, [r7, #28]
 8001222:	e005      	b.n	8001230 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f043 0310 	orr.w	r3, r3, #16
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	e000      	b.n	8001230 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800122e:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	69fa      	ldr	r2, [r7, #28]
 8001236:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001238:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800123c:	2100      	movs	r1, #0
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 fb9a 	bl	8001978 <HAL_ETH_WritePHYRegister>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 800124e:	6939      	ldr	r1, [r7, #16]
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 fd4f 	bl	8001cf4 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2201      	movs	r2, #1
 800125a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	e0d9      	b.n	8001416 <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001262:	20ff      	movs	r0, #255	; 0xff
 8001264:	f7ff fe36 	bl	8000ed4 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	f000 80a7 	beq.w	80013c0 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001272:	f7ff fe23 	bl	8000ebc <HAL_GetTick>
 8001276:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	461a      	mov	r2, r3
 800127e:	2101      	movs	r1, #1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f000 fb11 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001286:	f7ff fe19 	bl	8000ebc <HAL_GetTick>
 800128a:	4602      	mov	r2, r0
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	f241 3288 	movw	r2, #5000	; 0x1388
 8001294:	4293      	cmp	r3, r2
 8001296:	d90f      	bls.n	80012b8 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800129c:	6939      	ldr	r1, [r7, #16]
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f000 fd28 	bl	8001cf4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2201      	movs	r2, #1
 80012a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e0ae      	b.n	8001416 <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f003 0304 	and.w	r3, r3, #4
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d0da      	beq.n	8001278 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80012c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80012c6:	2100      	movs	r1, #0
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 fb55 	bl	8001978 <HAL_ETH_WritePHYRegister>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d00b      	beq.n	80012ec <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f000 fd0a 	bl	8001cf4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2201      	movs	r2, #1
 80012e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80012e8:	2301      	movs	r3, #1
 80012ea:	e094      	b.n	8001416 <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff fde6 	bl	8000ebc <HAL_GetTick>
 80012f0:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	461a      	mov	r2, r3
 80012f8:	2101      	movs	r1, #1
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f000 fad4 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001300:	f7ff fddc 	bl	8000ebc <HAL_GetTick>
 8001304:	4602      	mov	r2, r0
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	1ad3      	subs	r3, r2, r3
 800130a:	f241 3288 	movw	r2, #5000	; 0x1388
 800130e:	4293      	cmp	r3, r2
 8001310:	d90f      	bls.n	8001332 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001316:	6939      	ldr	r1, [r7, #16]
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f000 fceb 	bl	8001cf4 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2201      	movs	r2, #1
 8001322:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2200      	movs	r2, #0
 800132a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e071      	b.n	8001416 <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d0da      	beq.n	80012f2 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	461a      	mov	r2, r3
 8001342:	211f      	movs	r1, #31
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f000 faaf 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d00b      	beq.n	8001368 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001354:	6939      	ldr	r1, [r7, #16]
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 fccc 	bl	8001cf4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001364:	2301      	movs	r3, #1
 8001366:	e056      	b.n	8001416 <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	2b00      	cmp	r3, #0
 8001370:	d004      	beq.n	800137c <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	e002      	b.n	8001382 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2200      	movs	r2, #0
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	e037      	b.n	8001404 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	e032      	b.n	8001404 <HAL_ETH_Init+0x320>
 800139e:	bf00      	nop
 80013a0:	03938700 	.word	0x03938700
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40013800 	.word	0x40013800
 80013ac:	01312cff 	.word	0x01312cff
 80013b0:	02160ebf 	.word	0x02160ebf
 80013b4:	039386ff 	.word	0x039386ff
 80013b8:	05f5e0ff 	.word	0x05f5e0ff
 80013bc:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	08db      	lsrs	r3, r3, #3
 80013c6:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	085b      	lsrs	r3, r3, #1
 80013ce:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80013d0:	4313      	orrs	r3, r2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	2100      	movs	r1, #0
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 facd 	bl	8001978 <HAL_ETH_WritePHYRegister>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d00b      	beq.n	80013fc <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80013e8:	6939      	ldr	r1, [r7, #16]
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f000 fc82 	bl	8001cf4 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2201      	movs	r2, #1
 80013f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80013f8:	2301      	movs	r3, #1
 80013fa:	e00c      	b.n	8001416 <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80013fc:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001400:	f7ff fd68 	bl	8000ed4 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001404:	6939      	ldr	r1, [r7, #16]
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fc74 	bl	8001cf4 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2201      	movs	r2, #1
 8001410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3720      	adds	r7, #32
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop

08001420 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001420:	b480      	push	{r7}
 8001422:	b087      	sub	sp, #28
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800142e:	2300      	movs	r3, #0
 8001430:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_ETH_DMATxDescListInit+0x20>
 800143c:	2302      	movs	r3, #2
 800143e:	e052      	b.n	80014e6 <HAL_ETH_DMATxDescListInit+0xc6>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2202      	movs	r2, #2
 800144c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	68ba      	ldr	r2, [r7, #8]
 8001454:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
 800145a:	e030      	b.n	80014be <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	015b      	lsls	r3, r3, #5
 8001460:	68ba      	ldr	r2, [r7, #8]
 8001462:	4413      	add	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800146c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	4413      	add	r3, r2
 800147c:	461a      	mov	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	69db      	ldr	r3, [r3, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d105      	bne.n	8001496 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	3b01      	subs	r3, #1
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	429a      	cmp	r2, r3
 800149e:	d208      	bcs.n	80014b2 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	3301      	adds	r3, #1
 80014a4:	015b      	lsls	r3, r3, #5
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	4413      	add	r3, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	60da      	str	r2, [r3, #12]
 80014b0:	e002      	b.n	80014b8 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697a      	ldr	r2, [r7, #20]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d3ca      	bcc.n	800145c <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68ba      	ldr	r2, [r7, #8]
 80014cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d0:	3310      	adds	r3, #16
 80014d2:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b087      	sub	sp, #28
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
 80014fe:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800150a:	2b01      	cmp	r3, #1
 800150c:	d101      	bne.n	8001512 <HAL_ETH_DMARxDescListInit+0x20>
 800150e:	2302      	movs	r3, #2
 8001510:	e056      	b.n	80015c0 <HAL_ETH_DMARxDescListInit+0xce>
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	2201      	movs	r2, #1
 8001516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	68ba      	ldr	r2, [r7, #8]
 8001526:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e034      	b.n	8001598 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	015b      	lsls	r3, r3, #5
 8001532:	68ba      	ldr	r2, [r7, #8]
 8001534:	4413      	add	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800153e:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001546:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800154e:	fb02 f303 	mul.w	r3, r2, r3
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	461a      	mov	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b01      	cmp	r3, #1
 8001562:	d105      	bne.n	8001570 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3b01      	subs	r3, #1
 8001574:	697a      	ldr	r2, [r7, #20]
 8001576:	429a      	cmp	r2, r3
 8001578:	d208      	bcs.n	800158c <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	3301      	adds	r3, #1
 800157e:	015b      	lsls	r3, r3, #5
 8001580:	68ba      	ldr	r2, [r7, #8]
 8001582:	4413      	add	r3, r2
 8001584:	461a      	mov	r2, r3
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	e002      	b.n	8001592 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 800158c:	68ba      	ldr	r2, [r7, #8]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3301      	adds	r3, #1
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d3c6      	bcc.n	800152e <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015aa:	330c      	adds	r3, #12
 80015ac:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	371c      	adds	r7, #28
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
 80015d4:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d101      	bne.n	80015f0 <HAL_ETH_TransmitFrame+0x24>
 80015ec:	2302      	movs	r3, #2
 80015ee:	e0cd      	b.n	800178c <HAL_ETH_TransmitFrame+0x1c0>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2202      	movs	r2, #2
 80015fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d109      	bne.n	800161a <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2201      	movs	r2, #1
 800160a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2200      	movs	r2, #0
 8001612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001616:	2301      	movs	r3, #1
 8001618:	e0b8      	b.n	800178c <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2b00      	cmp	r3, #0
 8001622:	da09      	bge.n	8001638 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2212      	movs	r2, #18
 8001628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2200      	movs	r2, #0
 8001630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0a9      	b.n	800178c <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800163e:	4293      	cmp	r3, r2
 8001640:	d915      	bls.n	800166e <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	4a54      	ldr	r2, [pc, #336]	; (8001798 <HAL_ETH_TransmitFrame+0x1cc>)
 8001646:	fba2 2303 	umull	r2, r3, r2, r3
 800164a:	0a9b      	lsrs	r3, r3, #10
 800164c:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	4b51      	ldr	r3, [pc, #324]	; (8001798 <HAL_ETH_TransmitFrame+0x1cc>)
 8001652:	fba3 1302 	umull	r1, r3, r3, r2
 8001656:	0a9b      	lsrs	r3, r3, #10
 8001658:	f240 51f4 	movw	r1, #1524	; 0x5f4
 800165c:	fb01 f303 	mul.w	r3, r1, r3
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b00      	cmp	r3, #0
 8001664:	d005      	beq.n	8001672 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	3301      	adds	r3, #1
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e001      	b.n	8001672 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 800166e:	2301      	movs	r3, #1
 8001670:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d11c      	bne.n	80016b2 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001682:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001686:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001692:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016a2:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a8:	68db      	ldr	r3, [r3, #12]
 80016aa:	461a      	mov	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b0:	e04b      	b.n	800174a <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	613b      	str	r3, [r7, #16]
 80016b6:	e044      	b.n	8001742 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016c6:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d107      	bne.n	80016de <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016dc:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016e6:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3b01      	subs	r3, #1
 80016ec:	693a      	ldr	r2, [r7, #16]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d116      	bne.n	8001720 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001700:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	4a25      	ldr	r2, [pc, #148]	; (800179c <HAL_ETH_TransmitFrame+0x1d0>)
 8001706:	fb02 f203 	mul.w	r2, r2, r3
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	4413      	add	r3, r2
 800170e:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001712:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800171e:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800172e:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	461a      	mov	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	3301      	adds	r3, #1
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	429a      	cmp	r2, r3
 8001748:	d3b6      	bcc.n	80016b8 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001752:	3314      	adds	r3, #20
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	d00d      	beq.n	800177a <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001766:	3314      	adds	r3, #20
 8001768:	2204      	movs	r2, #4
 800176a:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	3304      	adds	r3, #4
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2201      	movs	r2, #1
 800177e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	371c      	adds	r7, #28
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr
 8001798:	ac02b00b 	.word	0xac02b00b
 800179c:	fffffa0c 	.word	0xfffffa0c

080017a0 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 80017a8:	2300      	movs	r3, #0
 80017aa:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d101      	bne.n	80017ba <HAL_ETH_GetReceivedFrame+0x1a>
 80017b6:	2302      	movs	r3, #2
 80017b8:	e070      	b.n	800189c <HAL_ETH_GetReceivedFrame+0xfc>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	db5a      	blt.n	800188a <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d030      	beq.n	8001844 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	1c5a      	adds	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f0:	2b01      	cmp	r3, #1
 80017f2:	d103      	bne.n	80017fc <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	0c1b      	lsrs	r3, r3, #16
 800180c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001810:	3b04      	subs	r3, #4
 8001812:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	68fa      	ldr	r2, [r7, #12]
 8001818:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	689a      	ldr	r2, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	461a      	mov	r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8001840:	2300      	movs	r3, #0
 8001842:	e02b      	b.n	800189c <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800184e:	2b00      	cmp	r3, #0
 8001850:	d010      	beq.n	8001874 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2200      	movs	r2, #0
 800185e:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	461a      	mov	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	629a      	str	r2, [r3, #40]	; 0x28
 8001872:	e00a      	b.n	800188a <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001878:	1c5a      	adds	r2, r3, #1
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	461a      	mov	r2, r3
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2201      	movs	r2, #1
 800188e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
}
 800189c:	4618      	mov	r0, r3
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	460b      	mov	r3, r1
 80018b2:	607a      	str	r2, [r7, #4]
 80018b4:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80018b6:	2300      	movs	r3, #0
 80018b8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b82      	cmp	r3, #130	; 0x82
 80018c8:	d101      	bne.n	80018ce <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80018ca:	2302      	movs	r3, #2
 80018cc:	e050      	b.n	8001970 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2282      	movs	r2, #130	; 0x82
 80018d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	691b      	ldr	r3, [r3, #16]
 80018dc:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f003 031c 	and.w	r3, r3, #28
 80018e4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	8a1b      	ldrh	r3, [r3, #16]
 80018ea:	02db      	lsls	r3, r3, #11
 80018ec:	b29b      	uxth	r3, r3
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80018f4:	897b      	ldrh	r3, [r7, #10]
 80018f6:	019b      	lsls	r3, r3, #6
 80018f8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	4313      	orrs	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	f023 0302 	bic.w	r3, r3, #2
 8001908:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800191a:	f7ff facf 	bl	8000ebc <HAL_GetTick>
 800191e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001920:	e015      	b.n	800194e <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001922:	f7ff facb 	bl	8000ebc <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001930:	d309      	bcc.n	8001946 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e014      	b.n	8001970 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	691b      	ldr	r3, [r3, #16]
 800194c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1e4      	bne.n	8001922 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	b29b      	uxth	r3, r3
 8001960:	461a      	mov	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	460b      	mov	r3, r1
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b42      	cmp	r3, #66	; 0x42
 8001998:	d101      	bne.n	800199e <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800199a:	2302      	movs	r3, #2
 800199c:	e04e      	b.n	8001a3c <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2242      	movs	r2, #66	; 0x42
 80019a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	f003 031c 	and.w	r3, r3, #28
 80019b4:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8a1b      	ldrh	r3, [r3, #16]
 80019ba:	02db      	lsls	r3, r3, #11
 80019bc:	b29b      	uxth	r3, r3
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80019c4:	897b      	ldrh	r3, [r7, #10]
 80019c6:	019b      	lsls	r3, r3, #6
 80019c8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80019cc:	697a      	ldr	r2, [r7, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80019f4:	f7ff fa62 	bl	8000ebc <HAL_GetTick>
 80019f8:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80019fa:	e015      	b.n	8001a28 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80019fc:	f7ff fa5e 	bl	8000ebc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a0a:	d309      	bcc.n	8001a20 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e00d      	b.n	8001a3c <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	691b      	ldr	r3, [r3, #16]
 8001a26:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1e4      	bne.n	80019fc <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ETH_Start+0x16>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e01f      	b.n	8001a9a <HAL_ETH_Start+0x56>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2202      	movs	r2, #2
 8001a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fb44 	bl	80020f8 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 fb7b 	bl	800216c <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fc12 	bl	80022a0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f000 fbaf 	bl	80021e0 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 fbdc 	bl	8002240 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b082      	sub	sp, #8
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d101      	bne.n	8001ab8 <HAL_ETH_Stop+0x16>
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	e01f      	b.n	8001af8 <HAL_ETH_Stop+0x56>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2202      	movs	r2, #2
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001ac8:	6878      	ldr	r0, [r7, #4]
 8001aca:	f000 fba1 	bl	8002210 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f000 fbce 	bl	8002270 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f000 fb66 	bl	80021a6 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ada:	6878      	ldr	r0, [r7, #4]
 8001adc:	f000 fbe0 	bl	80022a0 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ae0:	6878      	ldr	r0, [r7, #4]
 8001ae2:	f000 fb26 	bl	8002132 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_ETH_ConfigMAC+0x1c>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e0e4      	b.n	8001ce6 <HAL_ETH_ConfigMAC+0x1e6>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2202      	movs	r2, #2
 8001b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80b1 	beq.w	8001c96 <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	4b6c      	ldr	r3, [pc, #432]	; (8001cf0 <HAL_ETH_ConfigMAC+0x1f0>)
 8001b40:	4013      	ands	r3, r2
 8001b42:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b4c:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001b52:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001b58:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001b5e:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001b64:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001b6a:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001b70:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001b76:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001b7c:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001b82:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001b88:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001b8e:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001b90:	68fa      	ldr	r2, [r7, #12]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	68fa      	ldr	r2, [r7, #12]
 8001b9c:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7ff f994 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001bbc:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001bc2:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001bc8:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001bce:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001bd4:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001bda:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001be6:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001be8:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff f96e 	bl	8000ed4 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	68fa      	ldr	r2, [r7, #12]
 8001bfe:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c08:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c12:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001c22:	4013      	ands	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c2a:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c30:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8001c36:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8001c3c:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8001c42:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8001c48:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c60:	2001      	movs	r0, #1
 8001c62:	f7ff f937 	bl	8000ed4 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c86:	2001      	movs	r0, #1
 8001c88:	f7ff f924 	bl	8000ed4 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	68fa      	ldr	r2, [r7, #12]
 8001c92:	61da      	str	r2, [r3, #28]
 8001c94:	e01e      	b.n	8001cd4 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001ca4:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	68fa      	ldr	r2, [r7, #12]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cc6:	2001      	movs	r0, #1
 8001cc8:	f7ff f904 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8001ce4:	2300      	movs	r3, #0
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	ff20810f 	.word	0xff20810f

08001cf4 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0b0      	sub	sp, #192	; 0xc0
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d007      	beq.n	8001d1a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d10:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d18:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d22:	2300      	movs	r3, #0
 8001d24:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d103      	bne.n	8001d42 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d3e:	663b      	str	r3, [r7, #96]	; 0x60
 8001d40:	e001      	b.n	8001d46 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d50:	2300      	movs	r3, #0
 8001d52:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d54:	2300      	movs	r3, #0
 8001d56:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d60:	2340      	movs	r3, #64	; 0x40
 8001d62:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d70:	2300      	movs	r3, #0
 8001d72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d76:	2300      	movs	r3, #0
 8001d78:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d82:	2300      	movs	r3, #0
 8001d84:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001db2:	2300      	movs	r3, #0
 8001db4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dcc:	4bac      	ldr	r3, [pc, #688]	; (8002080 <ETH_MACDMAConfig+0x38c>)
 8001dce:	4013      	ands	r3, r2
 8001dd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dd4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dd8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001dda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001ddc:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001de0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001de6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001de8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001dea:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001dec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001dee:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001df4:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001df8:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001dfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001dfc:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001dfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e00:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e04:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e08:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e0a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e1c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e28:	2001      	movs	r0, #1
 8001e2a:	f7ff f853 	bl	8000ed4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e36:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e38:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e3c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e3e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e40:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e46:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e48:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e4c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e52:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e5c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e64:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e66:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e72:	2001      	movs	r0, #1
 8001e74:	f7ff f82e 	bl	8000ed4 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e80:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e8a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e94:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	699b      	ldr	r3, [r3, #24]
 8001e9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ea0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001eb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eb8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001eba:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ebe:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ec0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ec4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001ec6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001eca:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ecc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ed0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ed2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef0:	2001      	movs	r0, #1
 8001ef2:	f7fe ffef 	bl	8000ed4 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001efe:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f00:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f04:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1a:	2001      	movs	r0, #1
 8001f1c:	f7fe ffda 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f28:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f32:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f34:	2300      	movs	r3, #0
 8001f36:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f3c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f4e:	2304      	movs	r3, #4
 8001f50:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f58:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f5c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f62:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f68:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f72:	2300      	movs	r3, #0
 8001f74:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f7e:	3318      	adds	r3, #24
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8a:	4b3e      	ldr	r3, [pc, #248]	; (8002084 <ETH_MACDMAConfig+0x390>)
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f92:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f94:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f96:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f98:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f9a:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001f9c:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001f9e:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fa0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fa2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fa4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001fa6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fa8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001faa:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fae:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fb2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fb4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fc6:	3318      	adds	r3, #24
 8001fc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fcc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	3318      	adds	r3, #24
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fde:	2001      	movs	r0, #1
 8001fe0:	f7fe ff78 	bl	8000ed4 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fec:	3318      	adds	r3, #24
 8001fee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff2:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ff4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ff8:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8001ffc:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8001ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002000:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002004:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002008:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800200a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800200c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800200e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002018:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800202c:	2001      	movs	r0, #1
 800202e:	f7fe ff51 	bl	8000ed4 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	699b      	ldr	r3, [r3, #24]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d10f      	bne.n	8002068 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002050:	331c      	adds	r3, #28
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800205c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002064:	331c      	adds	r3, #28
 8002066:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	695b      	ldr	r3, [r3, #20]
 800206c:	461a      	mov	r2, r3
 800206e:	2100      	movs	r1, #0
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f809 	bl	8002088 <ETH_MACAddressConfig>
}
 8002076:	bf00      	nop
 8002078:	37c0      	adds	r7, #192	; 0xc0
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	ff20810f 	.word	0xff20810f
 8002084:	f8de3f23 	.word	0xf8de3f23

08002088 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	3305      	adds	r3, #5
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	021b      	lsls	r3, r3, #8
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	3204      	adds	r2, #4
 80020a0:	7812      	ldrb	r2, [r2, #0]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020a6:	68ba      	ldr	r2, [r7, #8]
 80020a8:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <ETH_MACAddressConfig+0x68>)
 80020aa:	4413      	add	r3, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	3303      	adds	r3, #3
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	061a      	lsls	r2, r3, #24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3302      	adds	r3, #2
 80020be:	781b      	ldrb	r3, [r3, #0]
 80020c0:	041b      	lsls	r3, r3, #16
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	3301      	adds	r3, #1
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	4313      	orrs	r3, r2
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	7812      	ldrb	r2, [r2, #0]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020d6:	68ba      	ldr	r2, [r7, #8]
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <ETH_MACAddressConfig+0x6c>)
 80020da:	4413      	add	r3, r2
 80020dc:	461a      	mov	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	6013      	str	r3, [r2, #0]
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	40028040 	.word	0x40028040
 80020f4:	40028044 	.word	0x40028044

080020f8 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002100:	2300      	movs	r3, #0
 8002102:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 0208 	orr.w	r2, r2, #8
 8002112:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800211c:	2001      	movs	r0, #1
 800211e:	f000 f8e9 	bl	80022f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	601a      	str	r2, [r3, #0]
}
 800212a:	bf00      	nop
 800212c:	3710      	adds	r7, #16
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}

08002132 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002132:	b580      	push	{r7, lr}
 8002134:	b084      	sub	sp, #16
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0208 	bic.w	r2, r2, #8
 800214c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 f8cc 	bl	80022f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68fa      	ldr	r2, [r7, #12]
 8002162:	601a      	str	r2, [r3, #0]
}
 8002164:	bf00      	nop
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f042 0204 	orr.w	r2, r2, #4
 8002186:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002190:	2001      	movs	r0, #1
 8002192:	f000 f8af 	bl	80022f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	601a      	str	r2, [r3, #0]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 0204 	bic.w	r2, r2, #4
 80021c0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80021ca:	2001      	movs	r0, #1
 80021cc:	f000 f892 	bl	80022f4 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	601a      	str	r2, [r3, #0]
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021f0:	3318      	adds	r3, #24
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80021fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002200:	3318      	adds	r3, #24
 8002202:	601a      	str	r2, [r3, #0]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002220:	3318      	adds	r3, #24
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800222c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002230:	3318      	adds	r3, #24
 8002232:	601a      	str	r2, [r3, #0]
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002250:	3318      	adds	r3, #24
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0202 	orr.w	r2, r2, #2
 800225c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002260:	3318      	adds	r3, #24
 8002262:	601a      	str	r2, [r3, #0]
}
 8002264:	bf00      	nop
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	3318      	adds	r3, #24
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f022 0202 	bic.w	r2, r2, #2
 800228c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002290:	3318      	adds	r3, #24
 8002292:	601a      	str	r2, [r3, #0]
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022b4:	3318      	adds	r3, #24
 80022b6:	681a      	ldr	r2, [r3, #0]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022c4:	3318      	adds	r3, #24
 80022c6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022d0:	3318      	adds	r3, #24
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80022d6:	2001      	movs	r0, #1
 80022d8:	f000 f80c 	bl	80022f4 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022e6:	3318      	adds	r3, #24
 80022e8:	601a      	str	r2, [r3, #0]
}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
	...

080022f4 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022fc:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <ETH_Delay+0x34>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a0a      	ldr	r2, [pc, #40]	; (800232c <ETH_Delay+0x38>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	0a5b      	lsrs	r3, r3, #9
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002310:	bf00      	nop
  } 
  while (Delay --);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	1e5a      	subs	r2, r3, #1
 8002316:	60fa      	str	r2, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f9      	bne.n	8002310 <ETH_Delay+0x1c>
}
 800231c:	bf00      	nop
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr
 8002328:	20000000 	.word	0x20000000
 800232c:	10624dd3 	.word	0x10624dd3

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e177      	b.n	800263c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 8166 	bne.w	8002636 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d00b      	beq.n	800238a <HAL_GPIO_Init+0x5a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237e:	2b11      	cmp	r3, #17
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b12      	cmp	r3, #18
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0xfc>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80c0 	beq.w	8002636 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b65      	ldr	r3, [pc, #404]	; (8002650 <HAL_GPIO_Init+0x320>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a64      	ldr	r2, [pc, #400]	; (8002650 <HAL_GPIO_Init+0x320>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b62      	ldr	r3, [pc, #392]	; (8002650 <HAL_GPIO_Init+0x320>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a60      	ldr	r2, [pc, #384]	; (8002654 <HAL_GPIO_Init+0x324>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a57      	ldr	r2, [pc, #348]	; (8002658 <HAL_GPIO_Init+0x328>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d037      	beq.n	800256e <HAL_GPIO_Init+0x23e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a56      	ldr	r2, [pc, #344]	; (800265c <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d031      	beq.n	800256a <HAL_GPIO_Init+0x23a>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a55      	ldr	r2, [pc, #340]	; (8002660 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d02b      	beq.n	8002566 <HAL_GPIO_Init+0x236>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a54      	ldr	r2, [pc, #336]	; (8002664 <HAL_GPIO_Init+0x334>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d025      	beq.n	8002562 <HAL_GPIO_Init+0x232>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a53      	ldr	r2, [pc, #332]	; (8002668 <HAL_GPIO_Init+0x338>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d01f      	beq.n	800255e <HAL_GPIO_Init+0x22e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a52      	ldr	r2, [pc, #328]	; (800266c <HAL_GPIO_Init+0x33c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d019      	beq.n	800255a <HAL_GPIO_Init+0x22a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a51      	ldr	r2, [pc, #324]	; (8002670 <HAL_GPIO_Init+0x340>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d013      	beq.n	8002556 <HAL_GPIO_Init+0x226>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a50      	ldr	r2, [pc, #320]	; (8002674 <HAL_GPIO_Init+0x344>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d00d      	beq.n	8002552 <HAL_GPIO_Init+0x222>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a4f      	ldr	r2, [pc, #316]	; (8002678 <HAL_GPIO_Init+0x348>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d007      	beq.n	800254e <HAL_GPIO_Init+0x21e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a4e      	ldr	r2, [pc, #312]	; (800267c <HAL_GPIO_Init+0x34c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d101      	bne.n	800254a <HAL_GPIO_Init+0x21a>
 8002546:	2309      	movs	r3, #9
 8002548:	e012      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800254a:	230a      	movs	r3, #10
 800254c:	e010      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800254e:	2308      	movs	r3, #8
 8002550:	e00e      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002552:	2307      	movs	r3, #7
 8002554:	e00c      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002556:	2306      	movs	r3, #6
 8002558:	e00a      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800255a:	2305      	movs	r3, #5
 800255c:	e008      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800255e:	2304      	movs	r3, #4
 8002560:	e006      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002562:	2303      	movs	r3, #3
 8002564:	e004      	b.n	8002570 <HAL_GPIO_Init+0x240>
 8002566:	2302      	movs	r3, #2
 8002568:	e002      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800256a:	2301      	movs	r3, #1
 800256c:	e000      	b.n	8002570 <HAL_GPIO_Init+0x240>
 800256e:	2300      	movs	r3, #0
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	f002 0203 	and.w	r2, r2, #3
 8002576:	0092      	lsls	r2, r2, #2
 8002578:	4093      	lsls	r3, r2
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4313      	orrs	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002580:	4934      	ldr	r1, [pc, #208]	; (8002654 <HAL_GPIO_Init+0x324>)
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	089b      	lsrs	r3, r3, #2
 8002586:	3302      	adds	r3, #2
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800258e:	4b3c      	ldr	r3, [pc, #240]	; (8002680 <HAL_GPIO_Init+0x350>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	43db      	mvns	r3, r3
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	4013      	ands	r3, r2
 800259c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025b2:	4a33      	ldr	r2, [pc, #204]	; (8002680 <HAL_GPIO_Init+0x350>)
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025b8:	4b31      	ldr	r3, [pc, #196]	; (8002680 <HAL_GPIO_Init+0x350>)
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	43db      	mvns	r3, r3
 80025c2:	69ba      	ldr	r2, [r7, #24]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025dc:	4a28      	ldr	r2, [pc, #160]	; (8002680 <HAL_GPIO_Init+0x350>)
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025e2:	4b27      	ldr	r3, [pc, #156]	; (8002680 <HAL_GPIO_Init+0x350>)
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	4013      	ands	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002606:	4a1e      	ldr	r2, [pc, #120]	; (8002680 <HAL_GPIO_Init+0x350>)
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800260c:	4b1c      	ldr	r3, [pc, #112]	; (8002680 <HAL_GPIO_Init+0x350>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	4313      	orrs	r3, r2
 800262e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002630:	4a13      	ldr	r2, [pc, #76]	; (8002680 <HAL_GPIO_Init+0x350>)
 8002632:	69bb      	ldr	r3, [r7, #24]
 8002634:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3301      	adds	r3, #1
 800263a:	61fb      	str	r3, [r7, #28]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	2b0f      	cmp	r3, #15
 8002640:	f67f ae84 	bls.w	800234c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002644:	bf00      	nop
 8002646:	3724      	adds	r7, #36	; 0x24
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr
 8002650:	40023800 	.word	0x40023800
 8002654:	40013800 	.word	0x40013800
 8002658:	40020000 	.word	0x40020000
 800265c:	40020400 	.word	0x40020400
 8002660:	40020800 	.word	0x40020800
 8002664:	40020c00 	.word	0x40020c00
 8002668:	40021000 	.word	0x40021000
 800266c:	40021400 	.word	0x40021400
 8002670:	40021800 	.word	0x40021800
 8002674:	40021c00 	.word	0x40021c00
 8002678:	40022000 	.word	0x40022000
 800267c:	40022400 	.word	0x40022400
 8002680:	40013c00 	.word	0x40013c00

08002684 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	460b      	mov	r3, r1
 800268e:	807b      	strh	r3, [r7, #2]
 8002690:	4613      	mov	r3, r2
 8002692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002694:	787b      	ldrb	r3, [r7, #1]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d003      	beq.n	80026a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800269a:	887a      	ldrh	r2, [r7, #2]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026a0:	e003      	b.n	80026aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026a2:	887b      	ldrh	r3, [r7, #2]
 80026a4:	041a      	lsls	r2, r3, #16
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	619a      	str	r2, [r3, #24]
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr

080026b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026b6:	b480      	push	{r7}
 80026b8:	b083      	sub	sp, #12
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	6078      	str	r0, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695a      	ldr	r2, [r3, #20]
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	401a      	ands	r2, r3
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d104      	bne.n	80026da <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80026d0:	887b      	ldrh	r3, [r7, #2]
 80026d2:	041a      	lsls	r2, r3, #16
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80026d8:	e002      	b.n	80026e0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80026da:	887a      	ldrh	r2, [r7, #2]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	619a      	str	r2, [r3, #24]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e25b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0301 	and.w	r3, r3, #1
 8002706:	2b00      	cmp	r3, #0
 8002708:	d075      	beq.n	80027f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800270a:	4ba3      	ldr	r3, [pc, #652]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b04      	cmp	r3, #4
 8002714:	d00c      	beq.n	8002730 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002716:	4ba0      	ldr	r3, [pc, #640]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800271e:	2b08      	cmp	r3, #8
 8002720:	d112      	bne.n	8002748 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002722:	4b9d      	ldr	r3, [pc, #628]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800272e:	d10b      	bne.n	8002748 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	4b99      	ldr	r3, [pc, #612]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d05b      	beq.n	80027f4 <HAL_RCC_OscConfig+0x108>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d157      	bne.n	80027f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e236      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x74>
 8002752:	4b91      	ldr	r3, [pc, #580]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a90      	ldr	r2, [pc, #576]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e01d      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002768:	d10c      	bne.n	8002784 <HAL_RCC_OscConfig+0x98>
 800276a:	4b8b      	ldr	r3, [pc, #556]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a8a      	ldr	r2, [pc, #552]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002770:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	4b88      	ldr	r3, [pc, #544]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a87      	ldr	r2, [pc, #540]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800277c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0xb0>
 8002784:	4b84      	ldr	r3, [pc, #528]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a83      	ldr	r2, [pc, #524]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800278a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	4b81      	ldr	r3, [pc, #516]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a80      	ldr	r2, [pc, #512]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800279a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a4:	f7fe fb8a 	bl	8000ebc <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fb86 	bl	8000ebc <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e1fb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027be:	4b76      	ldr	r3, [pc, #472]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0xc0>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027cc:	f7fe fb76 	bl	8000ebc <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027d2:	e008      	b.n	80027e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027d4:	f7fe fb72 	bl	8000ebc <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	2b64      	cmp	r3, #100	; 0x64
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e1e7      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027e6:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1f0      	bne.n	80027d4 <HAL_RCC_OscConfig+0xe8>
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f003 0302 	and.w	r3, r3, #2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d063      	beq.n	80028ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002802:	4b65      	ldr	r3, [pc, #404]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800280e:	4b62      	ldr	r3, [pc, #392]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002816:	2b08      	cmp	r3, #8
 8002818:	d11c      	bne.n	8002854 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800281a:	4b5f      	ldr	r3, [pc, #380]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d116      	bne.n	8002854 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002826:	4b5c      	ldr	r3, [pc, #368]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d005      	beq.n	800283e <HAL_RCC_OscConfig+0x152>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68db      	ldr	r3, [r3, #12]
 8002836:	2b01      	cmp	r3, #1
 8002838:	d001      	beq.n	800283e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e1bb      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283e:	4b56      	ldr	r3, [pc, #344]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	4952      	ldr	r1, [pc, #328]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800284e:	4313      	orrs	r3, r2
 8002850:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002852:	e03a      	b.n	80028ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d020      	beq.n	800289e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800285c:	4b4f      	ldr	r3, [pc, #316]	; (800299c <HAL_RCC_OscConfig+0x2b0>)
 800285e:	2201      	movs	r2, #1
 8002860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002862:	f7fe fb2b 	bl	8000ebc <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286a:	f7fe fb27 	bl	8000ebc <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e19c      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287c:	4b46      	ldr	r3, [pc, #280]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0302 	and.w	r3, r3, #2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0f0      	beq.n	800286a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002888:	4b43      	ldr	r3, [pc, #268]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	4940      	ldr	r1, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
 800289c:	e015      	b.n	80028ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <HAL_RCC_OscConfig+0x2b0>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a4:	f7fe fb0a 	bl	8000ebc <HAL_GetTick>
 80028a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028aa:	e008      	b.n	80028be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ac:	f7fe fb06 	bl	8000ebc <HAL_GetTick>
 80028b0:	4602      	mov	r2, r0
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	2b02      	cmp	r3, #2
 80028b8:	d901      	bls.n	80028be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80028ba:	2303      	movs	r3, #3
 80028bc:	e17b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028be:	4b36      	ldr	r3, [pc, #216]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0302 	and.w	r3, r3, #2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d1f0      	bne.n	80028ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0308 	and.w	r3, r3, #8
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d030      	beq.n	8002938 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d016      	beq.n	800290c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x2b4>)
 80028e0:	2201      	movs	r2, #1
 80028e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe faea 	bl	8000ebc <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe fae6 	bl	8000ebc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e15b      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x200>
 800290a:	e015      	b.n	8002938 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800290c:	4b24      	ldr	r3, [pc, #144]	; (80029a0 <HAL_RCC_OscConfig+0x2b4>)
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002912:	f7fe fad3 	bl	8000ebc <HAL_GetTick>
 8002916:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002918:	e008      	b.n	800292c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800291a:	f7fe facf 	bl	8000ebc <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	2b02      	cmp	r3, #2
 8002926:	d901      	bls.n	800292c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002928:	2303      	movs	r3, #3
 800292a:	e144      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292c:	4b1a      	ldr	r3, [pc, #104]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800292e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f0      	bne.n	800291a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 80a0 	beq.w	8002a86 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002946:	2300      	movs	r3, #0
 8002948:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d10f      	bne.n	8002976 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	2300      	movs	r3, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	4b0f      	ldr	r3, [pc, #60]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	4a0e      	ldr	r2, [pc, #56]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002964:	6413      	str	r3, [r2, #64]	; 0x40
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296e:	60bb      	str	r3, [r7, #8]
 8002970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002972:	2301      	movs	r3, #1
 8002974:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d121      	bne.n	80029c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002982:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_RCC_OscConfig+0x2b8>)
 8002988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298e:	f7fe fa95 	bl	8000ebc <HAL_GetTick>
 8002992:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	e011      	b.n	80029ba <HAL_RCC_OscConfig+0x2ce>
 8002996:	bf00      	nop
 8002998:	40023800 	.word	0x40023800
 800299c:	42470000 	.word	0x42470000
 80029a0:	42470e80 	.word	0x42470e80
 80029a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029a8:	f7fe fa88 	bl	8000ebc <HAL_GetTick>
 80029ac:	4602      	mov	r2, r0
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	1ad3      	subs	r3, r2, r3
 80029b2:	2b02      	cmp	r3, #2
 80029b4:	d901      	bls.n	80029ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e0fd      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ba:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x4d4>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0f0      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d106      	bne.n	80029dc <HAL_RCC_OscConfig+0x2f0>
 80029ce:	4b7d      	ldr	r3, [pc, #500]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029d2:	4a7c      	ldr	r2, [pc, #496]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029d4:	f043 0301 	orr.w	r3, r3, #1
 80029d8:	6713      	str	r3, [r2, #112]	; 0x70
 80029da:	e01c      	b.n	8002a16 <HAL_RCC_OscConfig+0x32a>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	d10c      	bne.n	80029fe <HAL_RCC_OscConfig+0x312>
 80029e4:	4b77      	ldr	r3, [pc, #476]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e8:	4a76      	ldr	r2, [pc, #472]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6713      	str	r3, [r2, #112]	; 0x70
 80029f0:	4b74      	ldr	r3, [pc, #464]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f4:	4a73      	ldr	r2, [pc, #460]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 80029f6:	f043 0301 	orr.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	; 0x70
 80029fc:	e00b      	b.n	8002a16 <HAL_RCC_OscConfig+0x32a>
 80029fe:	4b71      	ldr	r3, [pc, #452]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	4a70      	ldr	r2, [pc, #448]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a04:	f023 0301 	bic.w	r3, r3, #1
 8002a08:	6713      	str	r3, [r2, #112]	; 0x70
 8002a0a:	4b6e      	ldr	r3, [pc, #440]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a0e:	4a6d      	ldr	r2, [pc, #436]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a10:	f023 0304 	bic.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d015      	beq.n	8002a4a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a1e:	f7fe fa4d 	bl	8000ebc <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a24:	e00a      	b.n	8002a3c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a26:	f7fe fa49 	bl	8000ebc <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d901      	bls.n	8002a3c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0bc      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a3c:	4b61      	ldr	r3, [pc, #388]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ee      	beq.n	8002a26 <HAL_RCC_OscConfig+0x33a>
 8002a48:	e014      	b.n	8002a74 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fa37 	bl	8000ebc <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe fa33 	bl	8000ebc <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0a6      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a68:	4b56      	ldr	r3, [pc, #344]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1ee      	bne.n	8002a52 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a74:	7dfb      	ldrb	r3, [r7, #23]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d105      	bne.n	8002a86 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7a:	4b52      	ldr	r3, [pc, #328]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7e:	4a51      	ldr	r2, [pc, #324]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	699b      	ldr	r3, [r3, #24]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	f000 8092 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a90:	4b4c      	ldr	r3, [pc, #304]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 030c 	and.w	r3, r3, #12
 8002a98:	2b08      	cmp	r3, #8
 8002a9a:	d05c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	699b      	ldr	r3, [r3, #24]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d141      	bne.n	8002b28 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa4:	4b48      	ldr	r3, [pc, #288]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aaa:	f7fe fa07 	bl	8000ebc <HAL_GetTick>
 8002aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ab2:	f7fe fa03 	bl	8000ebc <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	693b      	ldr	r3, [r7, #16]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e078      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac4:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a1b      	ldr	r3, [r3, #32]
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	019b      	lsls	r3, r3, #6
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	085b      	lsrs	r3, r3, #1
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	431a      	orrs	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af2:	061b      	lsls	r3, r3, #24
 8002af4:	4933      	ldr	r1, [pc, #204]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002afa:	4b33      	ldr	r3, [pc, #204]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002afc:	2201      	movs	r2, #1
 8002afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe f9dc 	bl	8000ebc <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b08:	f7fe f9d8 	bl	8000ebc <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e04d      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b1a:	4b2a      	ldr	r3, [pc, #168]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0x41c>
 8002b26:	e045      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b28:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <HAL_RCC_OscConfig+0x4dc>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7fe f9c5 	bl	8000ebc <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b36:	f7fe f9c1 	bl	8000ebc <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e036      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d1f0      	bne.n	8002b36 <HAL_RCC_OscConfig+0x44a>
 8002b54:	e02e      	b.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d101      	bne.n	8002b62 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e029      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b62:	4b18      	ldr	r3, [pc, #96]	; (8002bc4 <HAL_RCC_OscConfig+0x4d8>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d115      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d10d      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d106      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e000      	b.n	8002bb6 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	42470060 	.word	0x42470060

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0cc      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b68      	ldr	r3, [pc, #416]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d90c      	bls.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b65      	ldr	r3, [pc, #404]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf6:	4b63      	ldr	r3, [pc, #396]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 030f 	and.w	r3, r3, #15
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d001      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e0b8      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d020      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d005      	beq.n	8002c2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c20:	4b59      	ldr	r3, [pc, #356]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	4a58      	ldr	r2, [pc, #352]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f003 0308 	and.w	r3, r3, #8
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d005      	beq.n	8002c44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c38:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	4a52      	ldr	r2, [pc, #328]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c44:	4b50      	ldr	r3, [pc, #320]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	494d      	ldr	r1, [pc, #308]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d044      	beq.n	8002cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d119      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e07f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d003      	beq.n	8002c8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c8a:	4b3f      	ldr	r3, [pc, #252]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e06f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9a:	4b3b      	ldr	r3, [pc, #236]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e067      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002caa:	4b37      	ldr	r3, [pc, #220]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	4934      	ldr	r1, [pc, #208]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cbc:	f7fe f8fe 	bl	8000ebc <HAL_GetTick>
 8002cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cc2:	e00a      	b.n	8002cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc4:	f7fe f8fa 	bl	8000ebc <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d901      	bls.n	8002cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002cd6:	2303      	movs	r3, #3
 8002cd8:	e04f      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cda:	4b2b      	ldr	r3, [pc, #172]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 020c 	and.w	r2, r3, #12
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d1eb      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cec:	4b25      	ldr	r3, [pc, #148]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 030f 	and.w	r3, r3, #15
 8002cf4:	683a      	ldr	r2, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d20c      	bcs.n	8002d14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cfa:	4b22      	ldr	r3, [pc, #136]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002cfc:	683a      	ldr	r2, [r7, #0]
 8002cfe:	b2d2      	uxtb	r2, r2
 8002d00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d02:	4b20      	ldr	r3, [pc, #128]	; (8002d84 <HAL_RCC_ClockConfig+0x1b8>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	683a      	ldr	r2, [r7, #0]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d001      	beq.n	8002d14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e032      	b.n	8002d7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d008      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d20:	4b19      	ldr	r3, [pc, #100]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	4916      	ldr	r1, [pc, #88]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0308 	and.w	r3, r3, #8
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d009      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d3e:	4b12      	ldr	r3, [pc, #72]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	691b      	ldr	r3, [r3, #16]
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	490e      	ldr	r1, [pc, #56]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d52:	f000 f821 	bl	8002d98 <HAL_RCC_GetSysClockFreq>
 8002d56:	4601      	mov	r1, r0
 8002d58:	4b0b      	ldr	r3, [pc, #44]	; (8002d88 <HAL_RCC_ClockConfig+0x1bc>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	091b      	lsrs	r3, r3, #4
 8002d5e:	f003 030f 	and.w	r3, r3, #15
 8002d62:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x1c0>)
 8002d64:	5cd3      	ldrb	r3, [r2, r3]
 8002d66:	fa21 f303 	lsr.w	r3, r1, r3
 8002d6a:	4a09      	ldr	r2, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x1c4>)
 8002d6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <HAL_RCC_ClockConfig+0x1c8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe f85e 	bl	8000e34 <HAL_InitTick>

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00
 8002d88:	40023800 	.word	0x40023800
 8002d8c:	0801491c 	.word	0x0801491c
 8002d90:	20000000 	.word	0x20000000
 8002d94:	20000004 	.word	0x20000004

08002d98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
 8002da6:	2300      	movs	r3, #0
 8002da8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002dae:	4b63      	ldr	r3, [pc, #396]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	d007      	beq.n	8002dca <HAL_RCC_GetSysClockFreq+0x32>
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d008      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x38>
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f040 80b4 	bne.w	8002f2c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002dc4:	4b5e      	ldr	r3, [pc, #376]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dc6:	60bb      	str	r3, [r7, #8]
       break;
 8002dc8:	e0b3      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002dca:	4b5e      	ldr	r3, [pc, #376]	; (8002f44 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002dcc:	60bb      	str	r3, [r7, #8]
      break;
 8002dce:	e0b0      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002dd0:	4b5a      	ldr	r3, [pc, #360]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dd8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dda:	4b58      	ldr	r3, [pc, #352]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d04a      	beq.n	8002e7c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	099b      	lsrs	r3, r3, #6
 8002dec:	f04f 0400 	mov.w	r4, #0
 8002df0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002df4:	f04f 0200 	mov.w	r2, #0
 8002df8:	ea03 0501 	and.w	r5, r3, r1
 8002dfc:	ea04 0602 	and.w	r6, r4, r2
 8002e00:	4629      	mov	r1, r5
 8002e02:	4632      	mov	r2, r6
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	f04f 0400 	mov.w	r4, #0
 8002e0c:	0154      	lsls	r4, r2, #5
 8002e0e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e12:	014b      	lsls	r3, r1, #5
 8002e14:	4619      	mov	r1, r3
 8002e16:	4622      	mov	r2, r4
 8002e18:	1b49      	subs	r1, r1, r5
 8002e1a:	eb62 0206 	sbc.w	r2, r2, r6
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	f04f 0400 	mov.w	r4, #0
 8002e26:	0194      	lsls	r4, r2, #6
 8002e28:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e2c:	018b      	lsls	r3, r1, #6
 8002e2e:	1a5b      	subs	r3, r3, r1
 8002e30:	eb64 0402 	sbc.w	r4, r4, r2
 8002e34:	f04f 0100 	mov.w	r1, #0
 8002e38:	f04f 0200 	mov.w	r2, #0
 8002e3c:	00e2      	lsls	r2, r4, #3
 8002e3e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002e42:	00d9      	lsls	r1, r3, #3
 8002e44:	460b      	mov	r3, r1
 8002e46:	4614      	mov	r4, r2
 8002e48:	195b      	adds	r3, r3, r5
 8002e4a:	eb44 0406 	adc.w	r4, r4, r6
 8002e4e:	f04f 0100 	mov.w	r1, #0
 8002e52:	f04f 0200 	mov.w	r2, #0
 8002e56:	0262      	lsls	r2, r4, #9
 8002e58:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002e5c:	0259      	lsls	r1, r3, #9
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4614      	mov	r4, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	4621      	mov	r1, r4
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f04f 0400 	mov.w	r4, #0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	f7fd fa16 	bl	80002a0 <__aeabi_uldivmod>
 8002e74:	4603      	mov	r3, r0
 8002e76:	460c      	mov	r4, r1
 8002e78:	60fb      	str	r3, [r7, #12]
 8002e7a:	e049      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	099b      	lsrs	r3, r3, #6
 8002e82:	f04f 0400 	mov.w	r4, #0
 8002e86:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e8a:	f04f 0200 	mov.w	r2, #0
 8002e8e:	ea03 0501 	and.w	r5, r3, r1
 8002e92:	ea04 0602 	and.w	r6, r4, r2
 8002e96:	4629      	mov	r1, r5
 8002e98:	4632      	mov	r2, r6
 8002e9a:	f04f 0300 	mov.w	r3, #0
 8002e9e:	f04f 0400 	mov.w	r4, #0
 8002ea2:	0154      	lsls	r4, r2, #5
 8002ea4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ea8:	014b      	lsls	r3, r1, #5
 8002eaa:	4619      	mov	r1, r3
 8002eac:	4622      	mov	r2, r4
 8002eae:	1b49      	subs	r1, r1, r5
 8002eb0:	eb62 0206 	sbc.w	r2, r2, r6
 8002eb4:	f04f 0300 	mov.w	r3, #0
 8002eb8:	f04f 0400 	mov.w	r4, #0
 8002ebc:	0194      	lsls	r4, r2, #6
 8002ebe:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ec2:	018b      	lsls	r3, r1, #6
 8002ec4:	1a5b      	subs	r3, r3, r1
 8002ec6:	eb64 0402 	sbc.w	r4, r4, r2
 8002eca:	f04f 0100 	mov.w	r1, #0
 8002ece:	f04f 0200 	mov.w	r2, #0
 8002ed2:	00e2      	lsls	r2, r4, #3
 8002ed4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ed8:	00d9      	lsls	r1, r3, #3
 8002eda:	460b      	mov	r3, r1
 8002edc:	4614      	mov	r4, r2
 8002ede:	195b      	adds	r3, r3, r5
 8002ee0:	eb44 0406 	adc.w	r4, r4, r6
 8002ee4:	f04f 0100 	mov.w	r1, #0
 8002ee8:	f04f 0200 	mov.w	r2, #0
 8002eec:	02a2      	lsls	r2, r4, #10
 8002eee:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002ef2:	0299      	lsls	r1, r3, #10
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4614      	mov	r4, r2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	4621      	mov	r1, r4
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f04f 0400 	mov.w	r4, #0
 8002f02:	461a      	mov	r2, r3
 8002f04:	4623      	mov	r3, r4
 8002f06:	f7fd f9cb 	bl	80002a0 <__aeabi_uldivmod>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	460c      	mov	r4, r1
 8002f0e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f10:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f20:	68fa      	ldr	r2, [r7, #12]
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	60bb      	str	r3, [r7, #8]
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f2e:	60bb      	str	r3, [r7, #8]
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	68bb      	ldr	r3, [r7, #8]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3714      	adds	r7, #20
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	00f42400 	.word	0x00f42400
 8002f44:	007a1200 	.word	0x007a1200

08002f48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f4c:	4b03      	ldr	r3, [pc, #12]	; (8002f5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	20000000 	.word	0x20000000

08002f60 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b084      	sub	sp, #16
 8002f64:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 8002f66:	f000 ff3f 	bl	8003de8 <lwip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8002f6a:	4b19      	ldr	r3, [pc, #100]	; (8002fd0 <MX_LWIP_Init+0x70>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8002f70:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <MX_LWIP_Init+0x74>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8002f76:	4b18      	ldr	r3, [pc, #96]	; (8002fd8 <MX_LWIP_Init+0x78>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 8002f7c:	4b17      	ldr	r3, [pc, #92]	; (8002fdc <MX_LWIP_Init+0x7c>)
 8002f7e:	9302      	str	r3, [sp, #8]
 8002f80:	4b17      	ldr	r3, [pc, #92]	; (8002fe0 <MX_LWIP_Init+0x80>)
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2300      	movs	r3, #0
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <MX_LWIP_Init+0x78>)
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <MX_LWIP_Init+0x74>)
 8002f8c:	4910      	ldr	r1, [pc, #64]	; (8002fd0 <MX_LWIP_Init+0x70>)
 8002f8e:	4815      	ldr	r0, [pc, #84]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002f90:	f001 fbd2 	bl	8004738 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8002f94:	4813      	ldr	r0, [pc, #76]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002f96:	f001 fd89 	bl	8004aac <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8002f9a:	4b12      	ldr	r3, [pc, #72]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002f9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8002fa0:	089b      	lsrs	r3, r3, #2
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d003      	beq.n	8002fb4 <MX_LWIP_Init+0x54>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8002fac:	480d      	ldr	r0, [pc, #52]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002fae:	f001 fd8d 	bl	8004acc <netif_set_up>
 8002fb2:	e002      	b.n	8002fba <MX_LWIP_Init+0x5a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8002fb4:	480b      	ldr	r0, [pc, #44]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002fb6:	f001 fdf5 	bl	8004ba4 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8002fba:	490b      	ldr	r1, [pc, #44]	; (8002fe8 <MX_LWIP_Init+0x88>)
 8002fbc:	4809      	ldr	r0, [pc, #36]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002fbe:	f001 fe8b 	bl	8004cd8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8002fc2:	4808      	ldr	r0, [pc, #32]	; (8002fe4 <MX_LWIP_Init+0x84>)
 8002fc4:	f009 ffd8 	bl	800cf78 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	200007fc 	.word	0x200007fc
 8002fd4:	20000800 	.word	0x20000800
 8002fd8:	20000804 	.word	0x20000804
 8002fdc:	08010a31 	.word	0x08010a31
 8002fe0:	080035c5 	.word	0x080035c5
 8002fe4:	200007c4 	.word	0x200007c4
 8002fe8:	080036b9 	.word	0x080036b9

08002fec <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS 
 */
void MX_LWIP_Process(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 8002ff0:	4804      	ldr	r0, [pc, #16]	; (8003004 <MX_LWIP_Process+0x18>)
 8002ff2:	f000 fac7 	bl	8003584 <ethernetif_input>
  
/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */  
  /* Handle timeouts */
  sys_check_timeouts();
 8002ff6:	f008 fec9 	bl	800bd8c <sys_check_timeouts>

/* USER CODE BEGIN 4_3 */
  ethernetif_set_link(&gnetif);
 8002ffa:	4802      	ldr	r0, [pc, #8]	; (8003004 <MX_LWIP_Process+0x18>)
 8002ffc:	f000 fb18 	bl	8003630 <ethernetif_set_link>
/* USER CODE END 4_3 */
}
 8003000:	bf00      	nop
 8003002:	bd80      	pop	{r7, pc}
 8003004:	200007c4 	.word	0x200007c4

08003008 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b08e      	sub	sp, #56	; 0x38
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a55      	ldr	r2, [pc, #340]	; (800317c <HAL_ETH_MspInit+0x174>)
 8003026:	4293      	cmp	r3, r2
 8003028:	f040 80a4 	bne.w	8003174 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800302c:	2300      	movs	r3, #0
 800302e:	623b      	str	r3, [r7, #32]
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003036:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800303a:	6313      	str	r3, [r2, #48]	; 0x30
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	6a3b      	ldr	r3, [r7, #32]
 8003048:	2300      	movs	r3, #0
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800304e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003050:	4a4b      	ldr	r2, [pc, #300]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003056:	6313      	str	r3, [r2, #48]	; 0x30
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	2300      	movs	r3, #0
 8003066:	61bb      	str	r3, [r7, #24]
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800306a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306c:	4a44      	ldr	r2, [pc, #272]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800306e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003072:	6313      	str	r3, [r2, #48]	; 0x30
 8003074:	4b42      	ldr	r3, [pc, #264]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003078:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800307c:	61bb      	str	r3, [r7, #24]
 800307e:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]
 8003084:	4b3e      	ldr	r3, [pc, #248]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	4a3d      	ldr	r2, [pc, #244]	; (8003180 <HAL_ETH_MspInit+0x178>)
 800308a:	f043 0304 	orr.w	r3, r3, #4
 800308e:	6313      	str	r3, [r2, #48]	; 0x30
 8003090:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_ETH_MspInit+0x178>)
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	617b      	str	r3, [r7, #20]
 800309a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800309c:	2300      	movs	r3, #0
 800309e:	613b      	str	r3, [r7, #16]
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a4:	4a36      	ldr	r2, [pc, #216]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030a6:	f043 0301 	orr.w	r3, r3, #1
 80030aa:	6313      	str	r3, [r2, #48]	; 0x30
 80030ac:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80030b8:	2300      	movs	r3, #0
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	4b30      	ldr	r3, [pc, #192]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c0:	4a2f      	ldr	r2, [pc, #188]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	6313      	str	r3, [r2, #48]	; 0x30
 80030c8:	4b2d      	ldr	r3, [pc, #180]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	4a28      	ldr	r2, [pc, #160]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030e2:	6313      	str	r3, [r2, #48]	; 0x30
 80030e4:	4b26      	ldr	r3, [pc, #152]	; (8003180 <HAL_ETH_MspInit+0x178>)
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80030f0:	2332      	movs	r3, #50	; 0x32
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030f4:	2302      	movs	r3, #2
 80030f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030f8:	2300      	movs	r3, #0
 80030fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030fc:	2303      	movs	r3, #3
 80030fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003100:	230b      	movs	r3, #11
 8003102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003108:	4619      	mov	r1, r3
 800310a:	481e      	ldr	r0, [pc, #120]	; (8003184 <HAL_ETH_MspInit+0x17c>)
 800310c:	f7ff f910 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003110:	2386      	movs	r3, #134	; 0x86
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003114:	2302      	movs	r3, #2
 8003116:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003118:	2300      	movs	r3, #0
 800311a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800311c:	2303      	movs	r3, #3
 800311e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003120:	230b      	movs	r3, #11
 8003122:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003124:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003128:	4619      	mov	r1, r3
 800312a:	4817      	ldr	r0, [pc, #92]	; (8003188 <HAL_ETH_MspInit+0x180>)
 800312c:	f7ff f900 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003130:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003134:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	2300      	movs	r3, #0
 800313c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800313e:	2303      	movs	r3, #3
 8003140:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003142:	230b      	movs	r3, #11
 8003144:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003146:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800314a:	4619      	mov	r1, r3
 800314c:	480f      	ldr	r0, [pc, #60]	; (800318c <HAL_ETH_MspInit+0x184>)
 800314e:	f7ff f8ef 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003152:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003158:	2302      	movs	r3, #2
 800315a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800315c:	2300      	movs	r3, #0
 800315e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003160:	2303      	movs	r3, #3
 8003162:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003164:	230b      	movs	r3, #11
 8003166:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003168:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316c:	4619      	mov	r1, r3
 800316e:	4808      	ldr	r0, [pc, #32]	; (8003190 <HAL_ETH_MspInit+0x188>)
 8003170:	f7ff f8de 	bl	8002330 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8003174:	bf00      	nop
 8003176:	3738      	adds	r7, #56	; 0x38
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40028000 	.word	0x40028000
 8003180:	40023800 	.word	0x40023800
 8003184:	40020800 	.word	0x40020800
 8003188:	40020000 	.word	0x40020000
 800318c:	40020400 	.word	0x40020400
 8003190:	40021800 	.word	0x40021800

08003194 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8003194:	b580      	push	{r7, lr}
 8003196:	b086      	sub	sp, #24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800319c:	2300      	movs	r3, #0
 800319e:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80031a0:	4b49      	ldr	r3, [pc, #292]	; (80032c8 <low_level_init+0x134>)
 80031a2:	4a4a      	ldr	r2, [pc, #296]	; (80032cc <low_level_init+0x138>)
 80031a4:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80031a6:	4b48      	ldr	r3, [pc, #288]	; (80032c8 <low_level_init+0x134>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80031ac:	4b46      	ldr	r3, [pc, #280]	; (80032c8 <low_level_init+0x134>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80031b2:	2300      	movs	r3, #0
 80031b4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80031ba:	23e1      	movs	r3, #225	; 0xe1
 80031bc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80031be:	2300      	movs	r3, #0
 80031c0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80031c2:	2300      	movs	r3, #0
 80031c4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80031c6:	2300      	movs	r3, #0
 80031c8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80031ca:	4a3f      	ldr	r2, [pc, #252]	; (80032c8 <low_level_init+0x134>)
 80031cc:	f107 0308 	add.w	r3, r7, #8
 80031d0:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80031d2:	4b3d      	ldr	r3, [pc, #244]	; (80032c8 <low_level_init+0x134>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80031d8:	4b3b      	ldr	r3, [pc, #236]	; (80032c8 <low_level_init+0x134>)
 80031da:	2200      	movs	r2, #0
 80031dc:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80031de:	4b3a      	ldr	r3, [pc, #232]	; (80032c8 <low_level_init+0x134>)
 80031e0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80031e4:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80031e6:	4838      	ldr	r0, [pc, #224]	; (80032c8 <low_level_init+0x134>)
 80031e8:	f7fd ff7c 	bl	80010e4 <HAL_ETH_Init>
 80031ec:	4603      	mov	r3, r0
 80031ee:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80031f0:	7dfb      	ldrb	r3, [r7, #23]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <low_level_init+0x74>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80031fc:	f043 0304 	orr.w	r3, r3, #4
 8003200:	b2da      	uxtb	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8003208:	2304      	movs	r3, #4
 800320a:	4a31      	ldr	r2, [pc, #196]	; (80032d0 <low_level_init+0x13c>)
 800320c:	4931      	ldr	r1, [pc, #196]	; (80032d4 <low_level_init+0x140>)
 800320e:	482e      	ldr	r0, [pc, #184]	; (80032c8 <low_level_init+0x134>)
 8003210:	f7fe f906 	bl	8001420 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8003214:	2304      	movs	r3, #4
 8003216:	4a30      	ldr	r2, [pc, #192]	; (80032d8 <low_level_init+0x144>)
 8003218:	4930      	ldr	r1, [pc, #192]	; (80032dc <low_level_init+0x148>)
 800321a:	482b      	ldr	r0, [pc, #172]	; (80032c8 <low_level_init+0x134>)
 800321c:	f7fe f969 	bl	80014f2 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2206      	movs	r2, #6
 8003224:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8003228:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <low_level_init+0x134>)
 800322a:	695b      	ldr	r3, [r3, #20]
 800322c:	781a      	ldrb	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8003234:	4b24      	ldr	r3, [pc, #144]	; (80032c8 <low_level_init+0x134>)
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	785a      	ldrb	r2, [r3, #1]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8003240:	4b21      	ldr	r3, [pc, #132]	; (80032c8 <low_level_init+0x134>)
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	789a      	ldrb	r2, [r3, #2]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800324c:	4b1e      	ldr	r3, [pc, #120]	; (80032c8 <low_level_init+0x134>)
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	78da      	ldrb	r2, [r3, #3]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <low_level_init+0x134>)
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	791a      	ldrb	r2, [r3, #4]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8003264:	4b18      	ldr	r3, [pc, #96]	; (80032c8 <low_level_init+0x134>)
 8003266:	695b      	ldr	r3, [r3, #20]
 8003268:	795a      	ldrb	r2, [r3, #5]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8003276:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800327e:	f043 030a 	orr.w	r3, r3, #10
 8003282:	b2da      	uxtb	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800328a:	480f      	ldr	r0, [pc, #60]	; (80032c8 <low_level_init+0x134>)
 800328c:	f7fe fbda 	bl	8001a44 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8003290:	f107 0310 	add.w	r3, r7, #16
 8003294:	461a      	mov	r2, r3
 8003296:	211d      	movs	r1, #29
 8003298:	480b      	ldr	r0, [pc, #44]	; (80032c8 <low_level_init+0x134>)
 800329a:	f7fe fb05 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f043 030b 	orr.w	r3, r3, #11
 80032a4:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	461a      	mov	r2, r3
 80032aa:	211d      	movs	r1, #29
 80032ac:	4806      	ldr	r0, [pc, #24]	; (80032c8 <low_level_init+0x134>)
 80032ae:	f7fe fb63 	bl	8001978 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80032b2:	f107 0310 	add.w	r3, r7, #16
 80032b6:	461a      	mov	r2, r3
 80032b8:	211d      	movs	r1, #29
 80032ba:	4803      	ldr	r0, [pc, #12]	; (80032c8 <low_level_init+0x134>)
 80032bc:	f7fe faf4 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80032c0:	bf00      	nop
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	200020d8 	.word	0x200020d8
 80032cc:	40028000 	.word	0x40028000
 80032d0:	20002120 	.word	0x20002120
 80032d4:	20000808 	.word	0x20000808
 80032d8:	20000888 	.word	0x20000888
 80032dc:	20002058 	.word	0x20002058

080032e0 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b08a      	sub	sp, #40	; 0x28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80032ea:	4b4b      	ldr	r3, [pc, #300]	; (8003418 <low_level_output+0x138>)
 80032ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80032f2:	2300      	movs	r3, #0
 80032f4:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80032fa:	2300      	movs	r3, #0
 80032fc:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80032fe:	2300      	movs	r3, #0
 8003300:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8003302:	4b45      	ldr	r3, [pc, #276]	; (8003418 <low_level_output+0x138>)
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	623b      	str	r3, [r7, #32]
 8003310:	e05a      	b.n	80033c8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	da03      	bge.n	8003322 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800331a:	23f8      	movs	r3, #248	; 0xf8
 800331c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8003320:	e05c      	b.n	80033dc <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	895b      	ldrh	r3, [r3, #10]
 8003326:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800332c:	e02f      	b.n	800338e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	18d0      	adds	r0, r2, r3
 8003334:	6a3b      	ldr	r3, [r7, #32]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	18d1      	adds	r1, r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8003342:	3304      	adds	r3, #4
 8003344:	461a      	mov	r2, r3
 8003346:	f00d fc7c 	bl	8010c42 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	68db      	ldr	r3, [r3, #12]
 800334e:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003350:	69bb      	ldr	r3, [r7, #24]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	da03      	bge.n	8003360 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8003358:	23f8      	movs	r3, #248	; 0xf8
 800335a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800335e:	e03d      	b.n	80033dc <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	4413      	add	r3, r2
 800336c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8003370:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800337c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8003388:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	4413      	add	r3, r2
 8003394:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003398:	4293      	cmp	r3, r2
 800339a:	d8c8      	bhi.n	800332e <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	18d0      	adds	r0, r2, r3
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	685a      	ldr	r2, [r3, #4]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4619      	mov	r1, r3
 80033ae:	f00d fc48 	bl	8010c42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4413      	add	r3, r2
 80033c0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	623b      	str	r3, [r7, #32]
 80033c8:	6a3b      	ldr	r3, [r7, #32]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1a1      	bne.n	8003312 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80033ce:	6979      	ldr	r1, [r7, #20]
 80033d0:	4811      	ldr	r0, [pc, #68]	; (8003418 <low_level_output+0x138>)
 80033d2:	f7fe f8fb 	bl	80015cc <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80033d6:	2300      	movs	r3, #0
 80033d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80033dc:	4b0e      	ldr	r3, [pc, #56]	; (8003418 <low_level_output+0x138>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033e4:	3314      	adds	r3, #20
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0320 	and.w	r3, r3, #32
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d00d      	beq.n	800340c <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80033f0:	4b09      	ldr	r3, [pc, #36]	; (8003418 <low_level_output+0x138>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033f8:	3314      	adds	r3, #20
 80033fa:	2220      	movs	r2, #32
 80033fc:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80033fe:	4b06      	ldr	r3, [pc, #24]	; (8003418 <low_level_output+0x138>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003406:	3304      	adds	r3, #4
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800340c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003410:	4618      	mov	r0, r3
 8003412:	3728      	adds	r7, #40	; 0x28
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	200020d8 	.word	0x200020d8

0800341c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b08c      	sub	sp, #48	; 0x30
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8003424:	2300      	movs	r3, #0
 8003426:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8003428:	2300      	movs	r3, #0
 800342a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800342c:	2300      	movs	r3, #0
 800342e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8003430:	2300      	movs	r3, #0
 8003432:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8003438:	2300      	movs	r3, #0
 800343a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800343c:	2300      	movs	r3, #0
 800343e:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8003440:	484f      	ldr	r0, [pc, #316]	; (8003580 <low_level_input+0x164>)
 8003442:	f7fe f9ad 	bl	80017a0 <HAL_ETH_GetReceivedFrame>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <low_level_input+0x34>
  
    return NULL;
 800344c:	2300      	movs	r3, #0
 800344e:	e092      	b.n	8003576 <low_level_input+0x15a>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8003450:	4b4b      	ldr	r3, [pc, #300]	; (8003580 <low_level_input+0x164>)
 8003452:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003454:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8003456:	4b4a      	ldr	r3, [pc, #296]	; (8003580 <low_level_input+0x164>)
 8003458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 800345c:	89fb      	ldrh	r3, [r7, #14]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d007      	beq.n	8003472 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8003462:	89fb      	ldrh	r3, [r7, #14]
 8003464:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8003468:	4619      	mov	r1, r3
 800346a:	2000      	movs	r0, #0
 800346c:	f001 fcd0 	bl	8004e10 <pbuf_alloc>
 8003470:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8003472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003474:	2b00      	cmp	r3, #0
 8003476:	d04b      	beq.n	8003510 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003478:	4b41      	ldr	r3, [pc, #260]	; (8003580 <low_level_input+0x164>)
 800347a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800347c:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 8003486:	e040      	b.n	800350a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8003488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800348a:	895b      	ldrh	r3, [r3, #10]
 800348c:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800348e:	2300      	movs	r3, #0
 8003490:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8003492:	e021      	b.n	80034d8 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8003494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003496:	685a      	ldr	r2, [r3, #4]
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	18d0      	adds	r0, r2, r3
 800349c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	18d1      	adds	r1, r2, r3
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80034a8:	3304      	adds	r3, #4
 80034aa:	461a      	mov	r2, r3
 80034ac:	f00d fbc9 	bl	8010c42 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80034b0:	6a3b      	ldr	r3, [r7, #32]
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80034b6:	6a3b      	ldr	r3, [r7, #32]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	4413      	add	r3, r2
 80034c2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80034c6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034d2:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80034d4:	2300      	movs	r3, #0
 80034d6:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	4413      	add	r3, r2
 80034de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d8d6      	bhi.n	8003494 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	69bb      	ldr	r3, [r7, #24]
 80034ec:	18d0      	adds	r0, r2, r3
 80034ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034f0:	69fb      	ldr	r3, [r7, #28]
 80034f2:	4413      	add	r3, r2
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4619      	mov	r1, r3
 80034f8:	f00d fba3 	bl	8010c42 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80034fc:	69fa      	ldr	r2, [r7, #28]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	4413      	add	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1bb      	bne.n	8003488 <low_level_input+0x6c>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8003510:	4b1b      	ldr	r3, [pc, #108]	; (8003580 <low_level_input+0x164>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e00b      	b.n	8003534 <low_level_input+0x118>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003524:	6a3b      	ldr	r3, [r7, #32]
 8003526:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8003528:	6a3b      	ldr	r3, [r7, #32]
 800352a:	68db      	ldr	r3, [r3, #12]
 800352c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	3301      	adds	r3, #1
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	4b12      	ldr	r3, [pc, #72]	; (8003580 <low_level_input+0x164>)
 8003536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003538:	693a      	ldr	r2, [r7, #16]
 800353a:	429a      	cmp	r2, r3
 800353c:	d3ee      	bcc.n	800351c <low_level_input+0x100>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <low_level_input+0x164>)
 8003540:	2200      	movs	r2, #0
 8003542:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8003544:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <low_level_input+0x164>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354c:	3314      	adds	r3, #20
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00d      	beq.n	8003574 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <low_level_input+0x164>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003560:	3314      	adds	r3, #20
 8003562:	2280      	movs	r2, #128	; 0x80
 8003564:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8003566:	4b06      	ldr	r3, [pc, #24]	; (8003580 <low_level_input+0x164>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800356e:	3308      	adds	r3, #8
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
  }
  return p;
 8003574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003576:	4618      	mov	r0, r3
 8003578:	3730      	adds	r7, #48	; 0x30
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	200020d8 	.word	0x200020d8

08003584 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b084      	sub	sp, #16
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f7ff ff45 	bl	800341c <low_level_input>
 8003592:	60f8      	str	r0, [r7, #12]
    
  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d010      	beq.n	80035bc <ethernetif_input+0x38>
    
  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	6879      	ldr	r1, [r7, #4]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	4798      	blx	r3
 80035a4:	4603      	mov	r3, r0
 80035a6:	72fb      	strb	r3, [r7, #11]
    
  if (err != ERR_OK)
 80035a8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d006      	beq.n	80035be <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f001 ff0d 	bl	80053d0 <pbuf_free>
    p = NULL;    
 80035b6:	2300      	movs	r3, #0
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	e000      	b.n	80035be <ethernetif_input+0x3a>
  if (p == NULL) return;
 80035bc:	bf00      	nop
  }
}
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d106      	bne.n	80035e0 <ethernetif_init+0x1c>
 80035d2:	4b0e      	ldr	r3, [pc, #56]	; (800360c <ethernetif_init+0x48>)
 80035d4:	f240 2211 	movw	r2, #529	; 0x211
 80035d8:	490d      	ldr	r1, [pc, #52]	; (8003610 <ethernetif_init+0x4c>)
 80035da:	480e      	ldr	r0, [pc, #56]	; (8003614 <ethernetif_init+0x50>)
 80035dc:	f00d fb44 	bl	8010c68 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2273      	movs	r2, #115	; 0x73
 80035e4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2274      	movs	r2, #116	; 0x74
 80035ec:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a09      	ldr	r2, [pc, #36]	; (8003618 <ethernetif_init+0x54>)
 80035f4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a08      	ldr	r2, [pc, #32]	; (800361c <ethernetif_init+0x58>)
 80035fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fdc9 	bl	8003194 <low_level_init>

  return ERR_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3708      	adds	r7, #8
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	08011ae0 	.word	0x08011ae0
 8003610:	08011afc 	.word	0x08011afc
 8003614:	08011b0c 	.word	0x08011b0c
 8003618:	0800eec5 	.word	0x0800eec5
 800361c:	080032e1 	.word	0x080032e1

08003620 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8003624:	f7fd fc4a 	bl	8000ebc <HAL_GetTick>
 8003628:	4603      	mov	r3, r0
}
 800362a:	4618      	mov	r0, r3
 800362c:	bd80      	pop	{r7, pc}
	...

08003630 <ethernetif_set_link>:
  * @retval None
  */
uint32_t EthernetLinkTimer=0; 
  
void ethernetif_set_link(struct netif *netif)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
  /* Ethernet Link every 200ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 200)
 800363c:	f7fd fc3e 	bl	8000ebc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <ethernetif_set_link+0x80>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2bc7      	cmp	r3, #199	; 0xc7
 800364a:	d92c      	bls.n	80036a6 <ethernetif_set_link+0x76>
  {
    EthernetLinkTimer = HAL_GetTick(); 
 800364c:	f7fd fc36 	bl	8000ebc <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	4b17      	ldr	r3, [pc, #92]	; (80036b0 <ethernetif_set_link+0x80>)
 8003654:	601a      	str	r2, [r3, #0]
    
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8003656:	f107 030c 	add.w	r3, r7, #12
 800365a:	461a      	mov	r2, r3
 800365c:	2101      	movs	r1, #1
 800365e:	4815      	ldr	r0, [pc, #84]	; (80036b4 <ethernetif_set_link+0x84>)
 8003660:	f7fe f922 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
    
    regvalue &= PHY_LINKED_STATUS;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 0304 	and.w	r3, r3, #4
 800366a:	60fb      	str	r3, [r7, #12]
    
    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(netif) && (regvalue))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003672:	f003 0304 	and.w	r3, r3, #4
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <ethernetif_set_link+0x58>
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d003      	beq.n	8003688 <ethernetif_set_link+0x58>
    {
      /* network cable is connected */ 
      netif_set_link_up(netif);        
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f001 fac1 	bl	8004c08 <netif_set_link_up>
    {
      /* network cable is disconnected */
      netif_set_link_down(netif);
    }
  }
}
 8003686:	e00e      	b.n	80036a6 <ethernetif_set_link+0x76>
    else if(netif_is_link_up(netif) && (!regvalue))
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800368e:	089b      	lsrs	r3, r3, #2
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <ethernetif_set_link+0x76>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d102      	bne.n	80036a6 <ethernetif_set_link+0x76>
      netif_set_link_down(netif);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f001 fae9 	bl	8004c78 <netif_set_link_down>
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	200000b0 	.word	0x200000b0
 80036b4:	200020d8 	.word	0x200020d8

080036b8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  
  if(netif_is_link_up(netif))
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80036ce:	089b      	lsrs	r3, r3, #2
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d05d      	beq.n	8003796 <ethernetif_update_config+0xde>
  { 
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80036da:	4b34      	ldr	r3, [pc, #208]	; (80037ac <ethernetif_update_config+0xf4>)
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03f      	beq.n	8003762 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 80036e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036e6:	2100      	movs	r1, #0
 80036e8:	4830      	ldr	r0, [pc, #192]	; (80037ac <ethernetif_update_config+0xf4>)
 80036ea:	f7fe f945 	bl	8001978 <HAL_ETH_WritePHYRegister>
      
      /* Get tick */
      tickstart = HAL_GetTick();
 80036ee:	f7fd fbe5 	bl	8000ebc <HAL_GetTick>
 80036f2:	4603      	mov	r3, r0
 80036f4:	60fb      	str	r3, [r7, #12]
      
      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	461a      	mov	r2, r3
 80036fc:	2101      	movs	r1, #1
 80036fe:	482b      	ldr	r0, [pc, #172]	; (80037ac <ethernetif_update_config+0xf4>)
 8003700:	f7fe f8d2 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
        
        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8003704:	f7fd fbda 	bl	8000ebc <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003712:	d828      	bhi.n	8003766 <ethernetif_update_config+0xae>
        {     
          /* In case of timeout */ 
          goto error;
        }   
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0eb      	beq.n	80036f6 <ethernetif_update_config+0x3e>
      
      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800371e:	f107 0308 	add.w	r3, r7, #8
 8003722:	461a      	mov	r2, r3
 8003724:	211f      	movs	r1, #31
 8003726:	4821      	ldr	r0, [pc, #132]	; (80037ac <ethernetif_update_config+0xf4>)
 8003728:	f7fe f8be 	bl	80018a8 <HAL_ETH_ReadPHYRegister>
      
      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b00      	cmp	r3, #0
 8003734:	d004      	beq.n	8003740 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;  
 8003736:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <ethernetif_update_config+0xf4>)
 8003738:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800373c:	60da      	str	r2, [r3, #12]
 800373e:	e002      	b.n	8003746 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003740:	4b1a      	ldr	r3, [pc, #104]	; (80037ac <ethernetif_update_config+0xf4>)
 8003742:	2200      	movs	r2, #0
 8003744:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d003      	beq.n	8003758 <ethernetif_update_config+0xa0>
      {  
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M; 
 8003750:	4b16      	ldr	r3, [pc, #88]	; (80037ac <ethernetif_update_config+0xf4>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	e016      	b.n	8003786 <ethernetif_update_config+0xce>
      }
      else
      {   
        /* Set Ethernet speed to 100M following the auto-negotiation */ 
        heth.Init.Speed = ETH_SPEED_100M;
 8003758:	4b14      	ldr	r3, [pc, #80]	; (80037ac <ethernetif_update_config+0xf4>)
 800375a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e011      	b.n	8003786 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8003762:	bf00      	nop
 8003764:	e000      	b.n	8003768 <ethernetif_update_config+0xb0>
          goto error;
 8003766:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));
      
      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003768:	4b10      	ldr	r3, [pc, #64]	; (80037ac <ethernetif_update_config+0xf4>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	08db      	lsrs	r3, r3, #3
 800376e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1))); 
 8003770:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <ethernetif_update_config+0xf4>)
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8003778:	4313      	orrs	r3, r2
 800377a:	b29b      	uxth	r3, r3
 800377c:	461a      	mov	r2, r3
 800377e:	2100      	movs	r1, #0
 8003780:	480a      	ldr	r0, [pc, #40]	; (80037ac <ethernetif_update_config+0xf4>)
 8003782:	f7fe f8f9 	bl	8001978 <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8003786:	2100      	movs	r1, #0
 8003788:	4808      	ldr	r0, [pc, #32]	; (80037ac <ethernetif_update_config+0xf4>)
 800378a:	f7fe f9b9 	bl	8001b00 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);   
 800378e:	4807      	ldr	r0, [pc, #28]	; (80037ac <ethernetif_update_config+0xf4>)
 8003790:	f7fe f958 	bl	8001a44 <HAL_ETH_Start>
 8003794:	e002      	b.n	800379c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8003796:	4805      	ldr	r0, [pc, #20]	; (80037ac <ethernetif_update_config+0xf4>)
 8003798:	f7fe f983 	bl	8001aa2 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7fc ffc1 	bl	8000724 <ethernetif_notify_conn_changed>
}
 80037a2:	bf00      	nop
 80037a4:	3710      	adds	r7, #16
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200020d8 	.word	0x200020d8

080037b0 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	021b      	lsls	r3, r3, #8
 80037be:	b21a      	sxth	r2, r3
 80037c0:	88fb      	ldrh	r3, [r7, #6]
 80037c2:	0a1b      	lsrs	r3, r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	4313      	orrs	r3, r2
 80037ca:	b21b      	sxth	r3, r3
 80037cc:	b29b      	uxth	r3, r3
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80037da:	b480      	push	{r7}
 80037dc:	b083      	sub	sp, #12
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	061a      	lsls	r2, r3, #24
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	021b      	lsls	r3, r3, #8
 80037ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	0a1b      	lsrs	r3, r3, #8
 80037f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0e1b      	lsrs	r3, r3, #24
 80037fe:	4313      	orrs	r3, r2
}
 8003800:	4618      	mov	r0, r3
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 8003810:	bf00      	nop
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
	...

0800381c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	4603      	mov	r3, r0
 8003824:	6039      	str	r1, [r7, #0]
 8003826:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d80f      	bhi.n	800384e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d006      	beq.n	8003842 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8003834:	79fb      	ldrb	r3, [r7, #7]
 8003836:	4909      	ldr	r1, [pc, #36]	; (800385c <dns_setserver+0x40>)
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	6812      	ldr	r2, [r2, #0]
 800383c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 8003840:	e005      	b.n	800384e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	4905      	ldr	r1, [pc, #20]	; (800385c <dns_setserver+0x40>)
 8003846:	4a06      	ldr	r2, [pc, #24]	; (8003860 <dns_setserver+0x44>)
 8003848:	6812      	ldr	r2, [r2, #0]
 800384a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800384e:	bf00      	nop
 8003850:	370c      	adds	r7, #12
 8003852:	46bd      	mov	sp, r7
 8003854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003858:	4770      	bx	lr
 800385a:	bf00      	nop
 800385c:	20000534 	.word	0x20000534
 8003860:	08014a14 	.word	0x08014a14

08003864 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8003868:	f000 faaa 	bl	8003dc0 <dns_check_entries>
}
 800386c:	bf00      	nop
 800386e:	bd80      	pop	{r7, pc}

08003870 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b090      	sub	sp, #64	; 0x40
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800387a:	79fa      	ldrb	r2, [r7, #7]
 800387c:	4613      	mov	r3, r2
 800387e:	011b      	lsls	r3, r3, #4
 8003880:	4413      	add	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	4a6c      	ldr	r2, [pc, #432]	; (8003a38 <dns_send+0x1c8>)
 8003886:	4413      	add	r3, r2
 8003888:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800388a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800388c:	7adb      	ldrb	r3, [r3, #11]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d906      	bls.n	80038a0 <dns_send+0x30>
 8003892:	4b6a      	ldr	r3, [pc, #424]	; (8003a3c <dns_send+0x1cc>)
 8003894:	f240 22fa 	movw	r2, #762	; 0x2fa
 8003898:	4969      	ldr	r1, [pc, #420]	; (8003a40 <dns_send+0x1d0>)
 800389a:	486a      	ldr	r0, [pc, #424]	; (8003a44 <dns_send+0x1d4>)
 800389c:	f00d f9e4 	bl	8010c68 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 80038a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a2:	7adb      	ldrb	r3, [r3, #11]
 80038a4:	461a      	mov	r2, r3
 80038a6:	4b68      	ldr	r3, [pc, #416]	; (8003a48 <dns_send+0x1d8>)
 80038a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d109      	bne.n	80038c4 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 80038b0:	79fb      	ldrb	r3, [r7, #7]
 80038b2:	2100      	movs	r1, #0
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f8cb 	bl	8003a50 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80038c0:	2300      	movs	r3, #0
 80038c2:	e0b4      	b.n	8003a2e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80038c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038c6:	3310      	adds	r3, #16
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fc fc91 	bl	80001f0 <strlen>
 80038ce:	4603      	mov	r3, r0
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3312      	adds	r3, #18
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80038da:	4619      	mov	r1, r3
 80038dc:	2036      	movs	r0, #54	; 0x36
 80038de:	f001 fa97 	bl	8004e10 <pbuf_alloc>
 80038e2:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80038e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8095 	beq.w	8003a16 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80038ec:	f107 0310 	add.w	r3, r7, #16
 80038f0:	220c      	movs	r2, #12
 80038f2:	2100      	movs	r1, #0
 80038f4:	4618      	mov	r0, r3
 80038f6:	f00d f9af 	bl	8010c58 <memset>
    hdr.id = lwip_htons(entry->txid);
 80038fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038fc:	891b      	ldrh	r3, [r3, #8]
 80038fe:	4618      	mov	r0, r3
 8003900:	f7ff ff56 	bl	80037b0 <lwip_htons>
 8003904:	4603      	mov	r3, r0
 8003906:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 8003908:	2301      	movs	r3, #1
 800390a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800390c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003910:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 8003912:	f107 0310 	add.w	r3, r7, #16
 8003916:	220c      	movs	r2, #12
 8003918:	4619      	mov	r1, r3
 800391a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800391c:	f002 f800 	bl	8005920 <pbuf_take>
    hostname = entry->name;
 8003920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003922:	3310      	adds	r3, #16
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	3b01      	subs	r3, #1
 800392a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800392c:	230c      	movs	r3, #12
 800392e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 8003930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003932:	3301      	adds	r3, #1
 8003934:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 8003936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003938:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800393a:	2300      	movs	r3, #0
 800393c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003940:	e007      	b.n	8003952 <dns_send+0xe2>
        ++n;
 8003942:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003946:	3301      	adds	r3, #1
 8003948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800394c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394e:	3301      	adds	r3, #1
 8003950:	63bb      	str	r3, [r7, #56]	; 0x38
 8003952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b2e      	cmp	r3, #46	; 0x2e
 8003958:	d003      	beq.n	8003962 <dns_send+0xf2>
 800395a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ef      	bne.n	8003942 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8003962:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800396a:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800396c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003970:	4413      	add	r3, r2
 8003972:	3301      	adds	r3, #1
 8003974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003978:	da53      	bge.n	8003a22 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800397a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800397e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003980:	4619      	mov	r1, r3
 8003982:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003984:	f002 f8fa 	bl	8005b7c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8003988:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800398a:	3301      	adds	r3, #1
 800398c:	b29b      	uxth	r3, r3
 800398e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003992:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003994:	f002 f856 	bl	8005a44 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8003998:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800399c:	b29a      	uxth	r2, r3
 800399e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039a0:	4413      	add	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	3301      	adds	r3, #1
 80039a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 80039a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d1bf      	bne.n	8003930 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 80039b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039b2:	2200      	movs	r2, #0
 80039b4:	4619      	mov	r1, r3
 80039b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039b8:	f002 f8e0 	bl	8005b7c <pbuf_put_at>
    query_idx++;
 80039bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039be:	3301      	adds	r3, #1
 80039c0:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 80039c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039c6:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 80039c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039cc:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 80039ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039d0:	f107 010c 	add.w	r1, r7, #12
 80039d4:	2204      	movs	r2, #4
 80039d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80039d8:	f002 f834 	bl	8005a44 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 80039dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039de:	7bdb      	ldrb	r3, [r3, #15]
 80039e0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 80039e4:	2335      	movs	r3, #53	; 0x35
 80039e6:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	7adb      	ldrb	r3, [r3, #11]
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	4a16      	ldr	r2, [pc, #88]	; (8003a48 <dns_send+0x1d8>)
 80039f0:	4413      	add	r3, r2
 80039f2:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 80039f4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <dns_send+0x1dc>)
 80039fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80039fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003a00:	69fa      	ldr	r2, [r7, #28]
 8003a02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a04:	f008 fbc6 	bl	800c194 <udp_sendto>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 8003a0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a10:	f001 fcde 	bl	80053d0 <pbuf_free>
 8003a14:	e002      	b.n	8003a1c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8003a16:	23ff      	movs	r3, #255	; 0xff
 8003a18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 8003a1c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8003a20:	e005      	b.n	8003a2e <dns_send+0x1be>
        goto overflow_return;
 8003a22:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8003a24:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a26:	f001 fcd3 	bl	80053d0 <pbuf_free>
  return ERR_VAL;
 8003a2a:	f06f 0305 	mvn.w	r3, #5
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3740      	adds	r7, #64	; 0x40
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	200000c4 	.word	0x200000c4
 8003a3c:	08011b34 	.word	0x08011b34
 8003a40:	08011b64 	.word	0x08011b64
 8003a44:	08011b7c 	.word	0x08011b7c
 8003a48:	20000534 	.word	0x20000534
 8003a4c:	200000b4 	.word	0x200000b4

08003a50 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8003a50:	b590      	push	{r4, r7, lr}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	4603      	mov	r3, r0
 8003a58:	6039      	str	r1, [r7, #0]
 8003a5a:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	73fb      	strb	r3, [r7, #15]
 8003a60:	e03d      	b.n	8003ade <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8003a62:	7bfa      	ldrb	r2, [r7, #15]
 8003a64:	4957      	ldr	r1, [pc, #348]	; (8003bc4 <dns_call_found+0x174>)
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d030      	beq.n	8003ad8 <dns_call_found+0x88>
 8003a76:	7bfa      	ldrb	r2, [r7, #15]
 8003a78:	4952      	ldr	r1, [pc, #328]	; (8003bc4 <dns_call_found+0x174>)
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3308      	adds	r3, #8
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	79fa      	ldrb	r2, [r7, #7]
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d124      	bne.n	8003ad8 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8003a8e:	7bfa      	ldrb	r2, [r7, #15]
 8003a90:	494c      	ldr	r1, [pc, #304]	; (8003bc4 <dns_call_found+0x174>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	005b      	lsls	r3, r3, #1
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	681c      	ldr	r4, [r3, #0]
 8003a9e:	79fa      	ldrb	r2, [r7, #7]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	011b      	lsls	r3, r3, #4
 8003aa4:	4413      	add	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	3310      	adds	r3, #16
 8003aaa:	4a47      	ldr	r2, [pc, #284]	; (8003bc8 <dns_call_found+0x178>)
 8003aac:	1898      	adds	r0, r3, r2
 8003aae:	7bfa      	ldrb	r2, [r7, #15]
 8003ab0:	4944      	ldr	r1, [pc, #272]	; (8003bc4 <dns_call_found+0x174>)
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	440b      	add	r3, r1
 8003abc:	3304      	adds	r3, #4
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	461a      	mov	r2, r3
 8003ac2:	6839      	ldr	r1, [r7, #0]
 8003ac4:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	493e      	ldr	r1, [pc, #248]	; (8003bc4 <dns_call_found+0x174>)
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003ad8:	7bfb      	ldrb	r3, [r7, #15]
 8003ada:	3301      	adds	r3, #1
 8003adc:	73fb      	strb	r3, [r7, #15]
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b03      	cmp	r3, #3
 8003ae2:	d9be      	bls.n	8003a62 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e031      	b.n	8003b4e <dns_call_found+0xfe>
    if (i == idx) {
 8003aea:	7bfa      	ldrb	r2, [r7, #15]
 8003aec:	79fb      	ldrb	r3, [r7, #7]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d029      	beq.n	8003b46 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8003af2:	7bfa      	ldrb	r2, [r7, #15]
 8003af4:	4934      	ldr	r1, [pc, #208]	; (8003bc8 <dns_call_found+0x178>)
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	4413      	add	r3, r2
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	440b      	add	r3, r1
 8003b00:	330a      	adds	r3, #10
 8003b02:	781b      	ldrb	r3, [r3, #0]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d11f      	bne.n	8003b48 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8003b08:	7bfa      	ldrb	r2, [r7, #15]
 8003b0a:	492f      	ldr	r1, [pc, #188]	; (8003bc8 <dns_call_found+0x178>)
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	011b      	lsls	r3, r3, #4
 8003b14:	440b      	add	r3, r1
 8003b16:	330f      	adds	r3, #15
 8003b18:	7819      	ldrb	r1, [r3, #0]
 8003b1a:	79fa      	ldrb	r2, [r7, #7]
 8003b1c:	482a      	ldr	r0, [pc, #168]	; (8003bc8 <dns_call_found+0x178>)
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	4413      	add	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	4403      	add	r3, r0
 8003b28:	330f      	adds	r3, #15
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	4299      	cmp	r1, r3
 8003b2e:	d10b      	bne.n	8003b48 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8003b30:	79fa      	ldrb	r2, [r7, #7]
 8003b32:	4925      	ldr	r1, [pc, #148]	; (8003bc8 <dns_call_found+0x178>)
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	4413      	add	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	440b      	add	r3, r1
 8003b3e:	330f      	adds	r3, #15
 8003b40:	2204      	movs	r2, #4
 8003b42:	701a      	strb	r2, [r3, #0]
        break;
 8003b44:	e006      	b.n	8003b54 <dns_call_found+0x104>
      continue; /* only check other requests */
 8003b46:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	3301      	adds	r3, #1
 8003b4c:	73fb      	strb	r3, [r7, #15]
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	2b03      	cmp	r3, #3
 8003b52:	d9ca      	bls.n	8003aea <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8003b54:	79fa      	ldrb	r2, [r7, #7]
 8003b56:	491c      	ldr	r1, [pc, #112]	; (8003bc8 <dns_call_found+0x178>)
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	4413      	add	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	440b      	add	r3, r1
 8003b62:	330f      	adds	r3, #15
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d827      	bhi.n	8003bba <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8003b6a:	79fa      	ldrb	r2, [r7, #7]
 8003b6c:	4916      	ldr	r1, [pc, #88]	; (8003bc8 <dns_call_found+0x178>)
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	4413      	add	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	440b      	add	r3, r1
 8003b78:	330f      	adds	r3, #15
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <dns_call_found+0x17c>)
 8003b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f008 fdd1 	bl	800c72c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8003b8a:	79fa      	ldrb	r2, [r7, #7]
 8003b8c:	490e      	ldr	r1, [pc, #56]	; (8003bc8 <dns_call_found+0x178>)
 8003b8e:	4613      	mov	r3, r2
 8003b90:	011b      	lsls	r3, r3, #4
 8003b92:	4413      	add	r3, r2
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	440b      	add	r3, r1
 8003b98:	330f      	adds	r3, #15
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <dns_call_found+0x17c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8003ba6:	79fa      	ldrb	r2, [r7, #7]
 8003ba8:	4907      	ldr	r1, [pc, #28]	; (8003bc8 <dns_call_found+0x178>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	011b      	lsls	r3, r3, #4
 8003bae:	4413      	add	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	440b      	add	r3, r1
 8003bb4:	330f      	adds	r3, #15
 8003bb6:	2204      	movs	r2, #4
 8003bb8:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8003bba:	bf00      	nop
 8003bbc:	3714      	adds	r7, #20
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd90      	pop	{r4, r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000504 	.word	0x20000504
 8003bc8:	200000c4 	.word	0x200000c4
 8003bcc:	200000b4 	.word	0x200000b4

08003bd0 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8003bd6:	f00d f85f 	bl	8010c98 <rand>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8003bde:	2300      	movs	r3, #0
 8003be0:	71fb      	strb	r3, [r7, #7]
 8003be2:	e01a      	b.n	8003c1a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8003be4:	79fa      	ldrb	r2, [r7, #7]
 8003be6:	4911      	ldr	r1, [pc, #68]	; (8003c2c <dns_create_txid+0x5c>)
 8003be8:	4613      	mov	r3, r2
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	4413      	add	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	440b      	add	r3, r1
 8003bf2:	330a      	adds	r3, #10
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d10c      	bne.n	8003c14 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8003bfa:	79fa      	ldrb	r2, [r7, #7]
 8003bfc:	490b      	ldr	r1, [pc, #44]	; (8003c2c <dns_create_txid+0x5c>)
 8003bfe:	4613      	mov	r3, r2
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	4413      	add	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	440b      	add	r3, r1
 8003c08:	3308      	adds	r3, #8
 8003c0a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8003c0c:	88ba      	ldrh	r2, [r7, #4]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d100      	bne.n	8003c14 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8003c12:	e7e0      	b.n	8003bd6 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	3301      	adds	r3, #1
 8003c18:	71fb      	strb	r3, [r7, #7]
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	2b03      	cmp	r3, #3
 8003c1e:	d9e1      	bls.n	8003be4 <dns_create_txid+0x14>
    }
  }

  return txid;
 8003c20:	88bb      	ldrh	r3, [r7, #4]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200000c4 	.word	0x200000c4

08003c30 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00e      	beq.n	8003c60 <dns_backupserver_available+0x30>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	7adb      	ldrb	r3, [r3, #11]
 8003c46:	3301      	adds	r3, #1
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	dc09      	bgt.n	8003c60 <dns_backupserver_available+0x30>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	7adb      	ldrb	r3, [r3, #11]
 8003c50:	3301      	adds	r3, #1
 8003c52:	4a07      	ldr	r2, [pc, #28]	; (8003c70 <dns_backupserver_available+0x40>)
 8003c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <dns_backupserver_available+0x30>
      ret = 1;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	20000534 	.word	0x20000534

08003c74 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8003c7e:	79fa      	ldrb	r2, [r7, #7]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	4413      	add	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	4a48      	ldr	r2, [pc, #288]	; (8003dac <dns_check_entry+0x138>)
 8003c8a:	4413      	add	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8003c8e:	79fb      	ldrb	r3, [r7, #7]
 8003c90:	2b03      	cmp	r3, #3
 8003c92:	d906      	bls.n	8003ca2 <dns_check_entry+0x2e>
 8003c94:	4b46      	ldr	r3, [pc, #280]	; (8003db0 <dns_check_entry+0x13c>)
 8003c96:	f240 421c 	movw	r2, #1052	; 0x41c
 8003c9a:	4946      	ldr	r1, [pc, #280]	; (8003db4 <dns_check_entry+0x140>)
 8003c9c:	4846      	ldr	r0, [pc, #280]	; (8003db8 <dns_check_entry+0x144>)
 8003c9e:	f00c ffe3 	bl	8010c68 <iprintf>

  switch (entry->state) {
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	7a9b      	ldrb	r3, [r3, #10]
 8003ca6:	2b03      	cmp	r3, #3
 8003ca8:	d86f      	bhi.n	8003d8a <dns_check_entry+0x116>
 8003caa:	a201      	add	r2, pc, #4	; (adr r2, 8003cb0 <dns_check_entry+0x3c>)
 8003cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb0:	08003d9b 	.word	0x08003d9b
 8003cb4:	08003cc1 	.word	0x08003cc1
 8003cb8:	08003cf3 	.word	0x08003cf3
 8003cbc:	08003d69 	.word	0x08003d69
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8003cc0:	f7ff ff86 	bl	8003bd0 <dns_create_txid>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2202      	movs	r2, #2
 8003cd0:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8003ce4:	79fb      	ldrb	r3, [r7, #7]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fdc2 	bl	8003870 <dns_send>
 8003cec:	4603      	mov	r3, r0
 8003cee:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8003cf0:	e058      	b.n	8003da4 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	7b1b      	ldrb	r3, [r3, #12]
 8003cf6:	3b01      	subs	r3, #1
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	731a      	strb	r2, [r3, #12]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	7b1b      	ldrb	r3, [r3, #12]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d14b      	bne.n	8003d9e <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	7b5b      	ldrb	r3, [r3, #13]
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	b2da      	uxtb	r2, r3
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	735a      	strb	r2, [r3, #13]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	7b5b      	ldrb	r3, [r3, #13]
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d11b      	bne.n	8003d52 <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ff88 	bl	8003c30 <dns_backupserver_available>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	7adb      	ldrb	r3, [r3, #11]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2201      	movs	r2, #1
 8003d36:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	735a      	strb	r2, [r3, #13]
 8003d3e:	e00c      	b.n	8003d5a <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8003d40:	79fb      	ldrb	r3, [r7, #7]
 8003d42:	2100      	movs	r1, #0
 8003d44:	4618      	mov	r0, r3
 8003d46:	f7ff fe83 	bl	8003a50 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	729a      	strb	r2, [r3, #10]
            break;
 8003d50:	e028      	b.n	8003da4 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	7b5a      	ldrb	r2, [r3, #13]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7ff fd87 	bl	8003870 <dns_send>
 8003d62:	4603      	mov	r3, r0
 8003d64:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8003d66:	e01a      	b.n	8003d9e <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <dns_check_entry+0x10e>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	1e5a      	subs	r2, r3, #1
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d10f      	bne.n	8003da2 <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2200      	movs	r2, #0
 8003d86:	729a      	strb	r2, [r3, #10]
      }
      break;
 8003d88:	e00b      	b.n	8003da2 <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8003d8a:	4b09      	ldr	r3, [pc, #36]	; (8003db0 <dns_check_entry+0x13c>)
 8003d8c:	f240 425b 	movw	r2, #1115	; 0x45b
 8003d90:	490a      	ldr	r1, [pc, #40]	; (8003dbc <dns_check_entry+0x148>)
 8003d92:	4809      	ldr	r0, [pc, #36]	; (8003db8 <dns_check_entry+0x144>)
 8003d94:	f00c ff68 	bl	8010c68 <iprintf>
      break;
 8003d98:	e004      	b.n	8003da4 <dns_check_entry+0x130>
      break;
 8003d9a:	bf00      	nop
 8003d9c:	e002      	b.n	8003da4 <dns_check_entry+0x130>
      break;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <dns_check_entry+0x130>
      break;
 8003da2:	bf00      	nop
  }
}
 8003da4:	bf00      	nop
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	200000c4 	.word	0x200000c4
 8003db0:	08011b34 	.word	0x08011b34
 8003db4:	08011ba4 	.word	0x08011ba4
 8003db8:	08011b7c 	.word	0x08011b7c
 8003dbc:	08011bc0 	.word	0x08011bc0

08003dc0 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	71fb      	strb	r3, [r7, #7]
 8003dca:	e006      	b.n	8003dda <dns_check_entries+0x1a>
    dns_check_entry(i);
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff ff50 	bl	8003c74 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8003dd4:	79fb      	ldrb	r3, [r7, #7]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	71fb      	strb	r3, [r7, #7]
 8003dda:	79fb      	ldrb	r3, [r7, #7]
 8003ddc:	2b03      	cmp	r3, #3
 8003dde:	d9f5      	bls.n	8003dcc <dns_check_entries+0xc>
  }
}
 8003de0:	bf00      	nop
 8003de2:	3708      	adds	r7, #8
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8003df2:	f000 f8d7 	bl	8003fa4 <mem_init>
  memp_init();
 8003df6:	f000 fbdd 	bl	80045b4 <memp_init>
  pbuf_init();
  netif_init();
 8003dfa:	f000 fc95 	bl	8004728 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8003dfe:	f008 f807 	bl	800be10 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8003e02:	f001 fedd 	bl	8005bc0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8003e06:	f7ff fd01 	bl	800380c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8003e0a:	f007 ff79 	bl	800bd00 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8003e0e:	bf00      	nop
 8003e10:	3708      	adds	r7, #8
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}
	...

08003e18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8003e22:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <ptr_to_mem+0x20>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	88fb      	ldrh	r3, [r7, #6]
 8003e28:	4413      	add	r3, r2
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	370c      	adds	r7, #12
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	2000053c 	.word	0x2000053c

08003e3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <mem_to_ptr+0x20>)
 8003e48:	6812      	ldr	r2, [r2, #0]
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	b29b      	uxth	r3, r3
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e58:	4770      	bx	lr
 8003e5a:	bf00      	nop
 8003e5c:	2000053c 	.word	0x2000053c

08003e60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b085      	sub	sp, #20
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8003e68:	4b45      	ldr	r3, [pc, #276]	; (8003f80 <plug_holes+0x120>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d206      	bcs.n	8003e80 <plug_holes+0x20>
 8003e72:	4b44      	ldr	r3, [pc, #272]	; (8003f84 <plug_holes+0x124>)
 8003e74:	f240 12df 	movw	r2, #479	; 0x1df
 8003e78:	4943      	ldr	r1, [pc, #268]	; (8003f88 <plug_holes+0x128>)
 8003e7a:	4844      	ldr	r0, [pc, #272]	; (8003f8c <plug_holes+0x12c>)
 8003e7c:	f00c fef4 	bl	8010c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8003e80:	4b43      	ldr	r3, [pc, #268]	; (8003f90 <plug_holes+0x130>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d306      	bcc.n	8003e98 <plug_holes+0x38>
 8003e8a:	4b3e      	ldr	r3, [pc, #248]	; (8003f84 <plug_holes+0x124>)
 8003e8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8003e90:	4940      	ldr	r1, [pc, #256]	; (8003f94 <plug_holes+0x134>)
 8003e92:	483e      	ldr	r0, [pc, #248]	; (8003f8c <plug_holes+0x12c>)
 8003e94:	f00c fee8 	bl	8010c68 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	791b      	ldrb	r3, [r3, #4]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d006      	beq.n	8003eae <plug_holes+0x4e>
 8003ea0:	4b38      	ldr	r3, [pc, #224]	; (8003f84 <plug_holes+0x124>)
 8003ea2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8003ea6:	493c      	ldr	r1, [pc, #240]	; (8003f98 <plug_holes+0x138>)
 8003ea8:	4838      	ldr	r0, [pc, #224]	; (8003f8c <plug_holes+0x12c>)
 8003eaa:	f00c fedd 	bl	8010c68 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	881b      	ldrh	r3, [r3, #0]
 8003eb2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003eb6:	d906      	bls.n	8003ec6 <plug_holes+0x66>
 8003eb8:	4b32      	ldr	r3, [pc, #200]	; (8003f84 <plug_holes+0x124>)
 8003eba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8003ebe:	4937      	ldr	r1, [pc, #220]	; (8003f9c <plug_holes+0x13c>)
 8003ec0:	4832      	ldr	r0, [pc, #200]	; (8003f8c <plug_holes+0x12c>)
 8003ec2:	f00c fed1 	bl	8010c68 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	881b      	ldrh	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7ff ffa4 	bl	8003e18 <ptr_to_mem>
 8003ed0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d024      	beq.n	8003f24 <plug_holes+0xc4>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	791b      	ldrb	r3, [r3, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d120      	bne.n	8003f24 <plug_holes+0xc4>
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	; (8003f90 <plug_holes+0x130>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d01b      	beq.n	8003f24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8003eec:	4b2c      	ldr	r3, [pc, #176]	; (8003fa0 <plug_holes+0x140>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d102      	bne.n	8003efc <plug_holes+0x9c>
      lfree = mem;
 8003ef6:	4a2a      	ldr	r2, [pc, #168]	; (8003fa0 <plug_holes+0x140>)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	881a      	ldrh	r2, [r3, #0]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	881b      	ldrh	r3, [r3, #0]
 8003f08:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f0c:	d00a      	beq.n	8003f24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	881b      	ldrh	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff ff80 	bl	8003e18 <ptr_to_mem>
 8003f18:	4604      	mov	r4, r0
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f7ff ff8e 	bl	8003e3c <mem_to_ptr>
 8003f20:	4603      	mov	r3, r0
 8003f22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	885b      	ldrh	r3, [r3, #2]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff75 	bl	8003e18 <ptr_to_mem>
 8003f2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d01f      	beq.n	8003f78 <plug_holes+0x118>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	791b      	ldrb	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d11b      	bne.n	8003f78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8003f40:	4b17      	ldr	r3, [pc, #92]	; (8003fa0 <plug_holes+0x140>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d102      	bne.n	8003f50 <plug_holes+0xf0>
      lfree = pmem;
 8003f4a:	4a15      	ldr	r2, [pc, #84]	; (8003fa0 <plug_holes+0x140>)
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	881a      	ldrh	r2, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f60:	d00a      	beq.n	8003f78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f7ff ff56 	bl	8003e18 <ptr_to_mem>
 8003f6c:	4604      	mov	r4, r0
 8003f6e:	68b8      	ldr	r0, [r7, #8]
 8003f70:	f7ff ff64 	bl	8003e3c <mem_to_ptr>
 8003f74:	4603      	mov	r3, r0
 8003f76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8003f78:	bf00      	nop
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd90      	pop	{r4, r7, pc}
 8003f80:	2000053c 	.word	0x2000053c
 8003f84:	08011be0 	.word	0x08011be0
 8003f88:	08011c10 	.word	0x08011c10
 8003f8c:	08011c28 	.word	0x08011c28
 8003f90:	20000540 	.word	0x20000540
 8003f94:	08011c50 	.word	0x08011c50
 8003f98:	08011c6c 	.word	0x08011c6c
 8003f9c:	08011c88 	.word	0x08011c88
 8003fa0:	20000544 	.word	0x20000544

08003fa4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8003faa:	4b18      	ldr	r3, [pc, #96]	; (800400c <mem_init+0x68>)
 8003fac:	3303      	adds	r3, #3
 8003fae:	f023 0303 	bic.w	r3, r3, #3
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	4b16      	ldr	r3, [pc, #88]	; (8004010 <mem_init+0x6c>)
 8003fb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8003fb8:	4b15      	ldr	r3, [pc, #84]	; (8004010 <mem_init+0x6c>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003fc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8003fd2:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8003fd6:	f7ff ff1f 	bl	8003e18 <ptr_to_mem>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	4b0d      	ldr	r3, [pc, #52]	; (8004014 <mem_init+0x70>)
 8003fde:	601a      	str	r2, [r3, #0]
  ram_end->used = 1;
 8003fe0:	4b0c      	ldr	r3, [pc, #48]	; (8004014 <mem_init+0x70>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8003fe8:	4b0a      	ldr	r3, [pc, #40]	; (8004014 <mem_init+0x70>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003ff0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <mem_init+0x70>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003ffa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8003ffc:	4b04      	ldr	r3, [pc, #16]	; (8004010 <mem_init+0x6c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a05      	ldr	r2, [pc, #20]	; (8004018 <mem_init+0x74>)
 8004002:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8004004:	bf00      	nop
 8004006:	3708      	adds	r7, #8
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}
 800400c:	20003908 	.word	0x20003908
 8004010:	2000053c 	.word	0x2000053c
 8004014:	20000540 	.word	0x20000540
 8004018:	20000544 	.word	0x20000544

0800401c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b086      	sub	sp, #24
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f7ff ff09 	bl	8003e3c <mem_to_ptr>
 800402a:	4603      	mov	r3, r0
 800402c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	4618      	mov	r0, r3
 8004034:	f7ff fef0 	bl	8003e18 <ptr_to_mem>
 8004038:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	885b      	ldrh	r3, [r3, #2]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff feea 	bl	8003e18 <ptr_to_mem>
 8004044:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800404e:	d818      	bhi.n	8004082 <mem_link_valid+0x66>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	885b      	ldrh	r3, [r3, #2]
 8004054:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004058:	d813      	bhi.n	8004082 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800405e:	8afa      	ldrh	r2, [r7, #22]
 8004060:	429a      	cmp	r2, r3
 8004062:	d004      	beq.n	800406e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	881b      	ldrh	r3, [r3, #0]
 8004068:	8afa      	ldrh	r2, [r7, #22]
 800406a:	429a      	cmp	r2, r3
 800406c:	d109      	bne.n	8004082 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800406e:	4b08      	ldr	r3, [pc, #32]	; (8004090 <mem_link_valid+0x74>)
 8004070:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8004072:	693a      	ldr	r2, [r7, #16]
 8004074:	429a      	cmp	r2, r3
 8004076:	d006      	beq.n	8004086 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	885b      	ldrh	r3, [r3, #2]
 800407c:	8afa      	ldrh	r2, [r7, #22]
 800407e:	429a      	cmp	r2, r3
 8004080:	d001      	beq.n	8004086 <mem_link_valid+0x6a>
    return 0;
 8004082:	2300      	movs	r3, #0
 8004084:	e000      	b.n	8004088 <mem_link_valid+0x6c>
  }
  return 1;
 8004086:	2301      	movs	r3, #1
}
 8004088:	4618      	mov	r0, r3
 800408a:	3718      	adds	r7, #24
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20000540 	.word	0x20000540

08004094 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d04c      	beq.n	800413c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f003 0303 	and.w	r3, r3, #3
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d007      	beq.n	80040bc <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80040ac:	4b25      	ldr	r3, [pc, #148]	; (8004144 <mem_free+0xb0>)
 80040ae:	f240 2273 	movw	r2, #627	; 0x273
 80040b2:	4925      	ldr	r1, [pc, #148]	; (8004148 <mem_free+0xb4>)
 80040b4:	4825      	ldr	r0, [pc, #148]	; (800414c <mem_free+0xb8>)
 80040b6:	f00c fdd7 	bl	8010c68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040ba:	e040      	b.n	800413e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3b08      	subs	r3, #8
 80040c0:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80040c2:	4b23      	ldr	r3, [pc, #140]	; (8004150 <mem_free+0xbc>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d306      	bcc.n	80040da <mem_free+0x46>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f103 020c 	add.w	r2, r3, #12
 80040d2:	4b20      	ldr	r3, [pc, #128]	; (8004154 <mem_free+0xc0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d907      	bls.n	80040ea <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80040da:	4b1a      	ldr	r3, [pc, #104]	; (8004144 <mem_free+0xb0>)
 80040dc:	f240 227f 	movw	r2, #639	; 0x27f
 80040e0:	491d      	ldr	r1, [pc, #116]	; (8004158 <mem_free+0xc4>)
 80040e2:	481a      	ldr	r0, [pc, #104]	; (800414c <mem_free+0xb8>)
 80040e4:	f00c fdc0 	bl	8010c68 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 80040e8:	e029      	b.n	800413e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	791b      	ldrb	r3, [r3, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80040f2:	4b14      	ldr	r3, [pc, #80]	; (8004144 <mem_free+0xb0>)
 80040f4:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80040f8:	4918      	ldr	r1, [pc, #96]	; (800415c <mem_free+0xc8>)
 80040fa:	4814      	ldr	r0, [pc, #80]	; (800414c <mem_free+0xb8>)
 80040fc:	f00c fdb4 	bl	8010c68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8004100:	e01d      	b.n	800413e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 8004102:	68f8      	ldr	r0, [r7, #12]
 8004104:	f7ff ff8a 	bl	800401c <mem_link_valid>
 8004108:	4603      	mov	r3, r0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d107      	bne.n	800411e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <mem_free+0xb0>)
 8004110:	f240 2295 	movw	r2, #661	; 0x295
 8004114:	4912      	ldr	r1, [pc, #72]	; (8004160 <mem_free+0xcc>)
 8004116:	480d      	ldr	r0, [pc, #52]	; (800414c <mem_free+0xb8>)
 8004118:	f00c fda6 	bl	8010c68 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800411c:	e00f      	b.n	800413e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8004124:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <mem_free+0xd0>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	429a      	cmp	r2, r3
 800412c:	d202      	bcs.n	8004134 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800412e:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <mem_free+0xd0>)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8004134:	68f8      	ldr	r0, [r7, #12]
 8004136:	f7ff fe93 	bl	8003e60 <plug_holes>
 800413a:	e000      	b.n	800413e <mem_free+0xaa>
    return;
 800413c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	08011be0 	.word	0x08011be0
 8004148:	08011cb4 	.word	0x08011cb4
 800414c:	08011c28 	.word	0x08011c28
 8004150:	2000053c 	.word	0x2000053c
 8004154:	20000540 	.word	0x20000540
 8004158:	08011cd8 	.word	0x08011cd8
 800415c:	08011cf4 	.word	0x08011cf4
 8004160:	08011d1c 	.word	0x08011d1c
 8004164:	20000544 	.word	0x20000544

08004168 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8004174:	887b      	ldrh	r3, [r7, #2]
 8004176:	3303      	adds	r3, #3
 8004178:	b29b      	uxth	r3, r3
 800417a:	f023 0303 	bic.w	r3, r3, #3
 800417e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8004180:	8bfb      	ldrh	r3, [r7, #30]
 8004182:	2b0b      	cmp	r3, #11
 8004184:	d801      	bhi.n	800418a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8004186:	230c      	movs	r3, #12
 8004188:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800418a:	8bfb      	ldrh	r3, [r7, #30]
 800418c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004190:	d803      	bhi.n	800419a <mem_trim+0x32>
 8004192:	8bfa      	ldrh	r2, [r7, #30]
 8004194:	887b      	ldrh	r3, [r7, #2]
 8004196:	429a      	cmp	r2, r3
 8004198:	d201      	bcs.n	800419e <mem_trim+0x36>
    return NULL;
 800419a:	2300      	movs	r3, #0
 800419c:	e0cc      	b.n	8004338 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800419e:	4b68      	ldr	r3, [pc, #416]	; (8004340 <mem_trim+0x1d8>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d304      	bcc.n	80041b2 <mem_trim+0x4a>
 80041a8:	4b66      	ldr	r3, [pc, #408]	; (8004344 <mem_trim+0x1dc>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d306      	bcc.n	80041c0 <mem_trim+0x58>
 80041b2:	4b65      	ldr	r3, [pc, #404]	; (8004348 <mem_trim+0x1e0>)
 80041b4:	f240 22d2 	movw	r2, #722	; 0x2d2
 80041b8:	4964      	ldr	r1, [pc, #400]	; (800434c <mem_trim+0x1e4>)
 80041ba:	4865      	ldr	r0, [pc, #404]	; (8004350 <mem_trim+0x1e8>)
 80041bc:	f00c fd54 	bl	8010c68 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80041c0:	4b5f      	ldr	r3, [pc, #380]	; (8004340 <mem_trim+0x1d8>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	687a      	ldr	r2, [r7, #4]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d304      	bcc.n	80041d4 <mem_trim+0x6c>
 80041ca:	4b5e      	ldr	r3, [pc, #376]	; (8004344 <mem_trim+0x1dc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d301      	bcc.n	80041d8 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	e0af      	b.n	8004338 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3b08      	subs	r3, #8
 80041dc:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80041de:	69b8      	ldr	r0, [r7, #24]
 80041e0:	f7ff fe2c 	bl	8003e3c <mem_to_ptr>
 80041e4:	4603      	mov	r3, r0
 80041e6:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	881a      	ldrh	r2, [r3, #0]
 80041ec:	8afb      	ldrh	r3, [r7, #22]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b08      	subs	r3, #8
 80041f4:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80041f6:	8bfa      	ldrh	r2, [r7, #30]
 80041f8:	8abb      	ldrh	r3, [r7, #20]
 80041fa:	429a      	cmp	r2, r3
 80041fc:	d906      	bls.n	800420c <mem_trim+0xa4>
 80041fe:	4b52      	ldr	r3, [pc, #328]	; (8004348 <mem_trim+0x1e0>)
 8004200:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8004204:	4953      	ldr	r1, [pc, #332]	; (8004354 <mem_trim+0x1ec>)
 8004206:	4852      	ldr	r0, [pc, #328]	; (8004350 <mem_trim+0x1e8>)
 8004208:	f00c fd2e 	bl	8010c68 <iprintf>
  if (newsize > size) {
 800420c:	8bfa      	ldrh	r2, [r7, #30]
 800420e:	8abb      	ldrh	r3, [r7, #20]
 8004210:	429a      	cmp	r2, r3
 8004212:	d901      	bls.n	8004218 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 8004214:	2300      	movs	r3, #0
 8004216:	e08f      	b.n	8004338 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 8004218:	8bfa      	ldrh	r2, [r7, #30]
 800421a:	8abb      	ldrh	r3, [r7, #20]
 800421c:	429a      	cmp	r2, r3
 800421e:	d101      	bne.n	8004224 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	e089      	b.n	8004338 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	881b      	ldrh	r3, [r3, #0]
 8004228:	4618      	mov	r0, r3
 800422a:	f7ff fdf5 	bl	8003e18 <ptr_to_mem>
 800422e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	791b      	ldrb	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d13f      	bne.n	80042b8 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	881b      	ldrh	r3, [r3, #0]
 800423c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004240:	d106      	bne.n	8004250 <mem_trim+0xe8>
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <mem_trim+0x1e0>)
 8004244:	f240 22f5 	movw	r2, #757	; 0x2f5
 8004248:	4943      	ldr	r1, [pc, #268]	; (8004358 <mem_trim+0x1f0>)
 800424a:	4841      	ldr	r0, [pc, #260]	; (8004350 <mem_trim+0x1e8>)
 800424c:	f00c fd0c 	bl	8010c68 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	881b      	ldrh	r3, [r3, #0]
 8004254:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8004256:	8afa      	ldrh	r2, [r7, #22]
 8004258:	8bfb      	ldrh	r3, [r7, #30]
 800425a:	4413      	add	r3, r2
 800425c:	b29b      	uxth	r3, r3
 800425e:	3308      	adds	r3, #8
 8004260:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8004262:	4b3e      	ldr	r3, [pc, #248]	; (800435c <mem_trim+0x1f4>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	693a      	ldr	r2, [r7, #16]
 8004268:	429a      	cmp	r2, r3
 800426a:	d106      	bne.n	800427a <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800426c:	89fb      	ldrh	r3, [r7, #14]
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fdd2 	bl	8003e18 <ptr_to_mem>
 8004274:	4602      	mov	r2, r0
 8004276:	4b39      	ldr	r3, [pc, #228]	; (800435c <mem_trim+0x1f4>)
 8004278:	601a      	str	r2, [r3, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800427a:	89fb      	ldrh	r3, [r7, #14]
 800427c:	4618      	mov	r0, r3
 800427e:	f7ff fdcb 	bl	8003e18 <ptr_to_mem>
 8004282:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2200      	movs	r2, #0
 8004288:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	89ba      	ldrh	r2, [r7, #12]
 800428e:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	8afa      	ldrh	r2, [r7, #22]
 8004294:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	89fa      	ldrh	r2, [r7, #14]
 800429a:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	881b      	ldrh	r3, [r3, #0]
 80042a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042a4:	d047      	beq.n	8004336 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7ff fdb4 	bl	8003e18 <ptr_to_mem>
 80042b0:	4602      	mov	r2, r0
 80042b2:	89fb      	ldrh	r3, [r7, #14]
 80042b4:	8053      	strh	r3, [r2, #2]
 80042b6:	e03e      	b.n	8004336 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80042b8:	8bfb      	ldrh	r3, [r7, #30]
 80042ba:	f103 0214 	add.w	r2, r3, #20
 80042be:	8abb      	ldrh	r3, [r7, #20]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d838      	bhi.n	8004336 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80042c4:	8afa      	ldrh	r2, [r7, #22]
 80042c6:	8bfb      	ldrh	r3, [r7, #30]
 80042c8:	4413      	add	r3, r2
 80042ca:	b29b      	uxth	r3, r3
 80042cc:	3308      	adds	r3, #8
 80042ce:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	881b      	ldrh	r3, [r3, #0]
 80042d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80042d8:	d106      	bne.n	80042e8 <mem_trim+0x180>
 80042da:	4b1b      	ldr	r3, [pc, #108]	; (8004348 <mem_trim+0x1e0>)
 80042dc:	f240 3216 	movw	r2, #790	; 0x316
 80042e0:	491d      	ldr	r1, [pc, #116]	; (8004358 <mem_trim+0x1f0>)
 80042e2:	481b      	ldr	r0, [pc, #108]	; (8004350 <mem_trim+0x1e8>)
 80042e4:	f00c fcc0 	bl	8010c68 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80042e8:	89fb      	ldrh	r3, [r7, #14]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7ff fd94 	bl	8003e18 <ptr_to_mem>
 80042f0:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80042f2:	4b1a      	ldr	r3, [pc, #104]	; (800435c <mem_trim+0x1f4>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d202      	bcs.n	8004302 <mem_trim+0x19a>
      lfree = mem2;
 80042fc:	4a17      	ldr	r2, [pc, #92]	; (800435c <mem_trim+0x1f4>)
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2200      	movs	r2, #0
 8004306:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	881a      	ldrh	r2, [r3, #0]
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	8afa      	ldrh	r2, [r7, #22]
 8004314:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	89fa      	ldrh	r2, [r7, #14]
 800431a:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004324:	d007      	beq.n	8004336 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fd74 	bl	8003e18 <ptr_to_mem>
 8004330:	4602      	mov	r2, r0
 8004332:	89fb      	ldrh	r3, [r7, #14]
 8004334:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8004336:	687b      	ldr	r3, [r7, #4]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3720      	adds	r7, #32
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}
 8004340:	2000053c 	.word	0x2000053c
 8004344:	20000540 	.word	0x20000540
 8004348:	08011be0 	.word	0x08011be0
 800434c:	08011d50 	.word	0x08011d50
 8004350:	08011c28 	.word	0x08011c28
 8004354:	08011d68 	.word	0x08011d68
 8004358:	08011d88 	.word	0x08011d88
 800435c:	20000544 	.word	0x20000544

08004360 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b088      	sub	sp, #32
 8004364:	af00      	add	r7, sp, #0
 8004366:	4603      	mov	r3, r0
 8004368:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800436a:	88fb      	ldrh	r3, [r7, #6]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <mem_malloc+0x14>
    return NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	e0d9      	b.n	8004528 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8004374:	88fb      	ldrh	r3, [r7, #6]
 8004376:	3303      	adds	r3, #3
 8004378:	b29b      	uxth	r3, r3
 800437a:	f023 0303 	bic.w	r3, r3, #3
 800437e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8004380:	8bbb      	ldrh	r3, [r7, #28]
 8004382:	2b0b      	cmp	r3, #11
 8004384:	d801      	bhi.n	800438a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8004386:	230c      	movs	r3, #12
 8004388:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800438a:	8bbb      	ldrh	r3, [r7, #28]
 800438c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004390:	d803      	bhi.n	800439a <mem_malloc+0x3a>
 8004392:	8bba      	ldrh	r2, [r7, #28]
 8004394:	88fb      	ldrh	r3, [r7, #6]
 8004396:	429a      	cmp	r2, r3
 8004398:	d201      	bcs.n	800439e <mem_malloc+0x3e>
    return NULL;
 800439a:	2300      	movs	r3, #0
 800439c:	e0c4      	b.n	8004528 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800439e:	4b64      	ldr	r3, [pc, #400]	; (8004530 <mem_malloc+0x1d0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff fd4a 	bl	8003e3c <mem_to_ptr>
 80043a8:	4603      	mov	r3, r0
 80043aa:	83fb      	strh	r3, [r7, #30]
 80043ac:	e0b4      	b.n	8004518 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80043ae:	8bfb      	ldrh	r3, [r7, #30]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff fd31 	bl	8003e18 <ptr_to_mem>
 80043b6:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f040 80a4 	bne.w	800450a <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	881b      	ldrh	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	8bfb      	ldrh	r3, [r7, #30]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	f1a3 0208 	sub.w	r2, r3, #8
 80043d0:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80043d2:	429a      	cmp	r2, r3
 80043d4:	f0c0 8099 	bcc.w	800450a <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	881b      	ldrh	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	8bfb      	ldrh	r3, [r7, #30]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f1a3 0208 	sub.w	r2, r3, #8
 80043e6:	8bbb      	ldrh	r3, [r7, #28]
 80043e8:	3314      	adds	r3, #20
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d333      	bcc.n	8004456 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80043ee:	8bfa      	ldrh	r2, [r7, #30]
 80043f0:	8bbb      	ldrh	r3, [r7, #28]
 80043f2:	4413      	add	r3, r2
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	3308      	adds	r3, #8
 80043f8:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80043fa:	8a7b      	ldrh	r3, [r7, #18]
 80043fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004400:	d106      	bne.n	8004410 <mem_malloc+0xb0>
 8004402:	4b4c      	ldr	r3, [pc, #304]	; (8004534 <mem_malloc+0x1d4>)
 8004404:	f240 3287 	movw	r2, #903	; 0x387
 8004408:	494b      	ldr	r1, [pc, #300]	; (8004538 <mem_malloc+0x1d8>)
 800440a:	484c      	ldr	r0, [pc, #304]	; (800453c <mem_malloc+0x1dc>)
 800440c:	f00c fc2c 	bl	8010c68 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8004410:	8a7b      	ldrh	r3, [r7, #18]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff fd00 	bl	8003e18 <ptr_to_mem>
 8004418:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	881a      	ldrh	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8bfa      	ldrh	r2, [r7, #30]
 800442c:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	8a7a      	ldrh	r2, [r7, #18]
 8004432:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	2201      	movs	r2, #1
 8004438:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	881b      	ldrh	r3, [r3, #0]
 800443e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8004442:	d00b      	beq.n	800445c <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	881b      	ldrh	r3, [r3, #0]
 8004448:	4618      	mov	r0, r3
 800444a:	f7ff fce5 	bl	8003e18 <ptr_to_mem>
 800444e:	4602      	mov	r2, r0
 8004450:	8a7b      	ldrh	r3, [r7, #18]
 8004452:	8053      	strh	r3, [r2, #2]
 8004454:	e002      	b.n	800445c <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2201      	movs	r2, #1
 800445a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800445c:	4b34      	ldr	r3, [pc, #208]	; (8004530 <mem_malloc+0x1d0>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	697a      	ldr	r2, [r7, #20]
 8004462:	429a      	cmp	r2, r3
 8004464:	d127      	bne.n	80044b6 <mem_malloc+0x156>
          struct mem *cur = lfree;
 8004466:	4b32      	ldr	r3, [pc, #200]	; (8004530 <mem_malloc+0x1d0>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800446c:	e005      	b.n	800447a <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	881b      	ldrh	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7ff fcd0 	bl	8003e18 <ptr_to_mem>
 8004478:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	791b      	ldrb	r3, [r3, #4]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d004      	beq.n	800448c <mem_malloc+0x12c>
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <mem_malloc+0x1e0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	429a      	cmp	r2, r3
 800448a:	d1f0      	bne.n	800446e <mem_malloc+0x10e>
          }
          lfree = cur;
 800448c:	4a28      	ldr	r2, [pc, #160]	; (8004530 <mem_malloc+0x1d0>)
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8004492:	4b27      	ldr	r3, [pc, #156]	; (8004530 <mem_malloc+0x1d0>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b2a      	ldr	r3, [pc, #168]	; (8004540 <mem_malloc+0x1e0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d00b      	beq.n	80044b6 <mem_malloc+0x156>
 800449e:	4b24      	ldr	r3, [pc, #144]	; (8004530 <mem_malloc+0x1d0>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	791b      	ldrb	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d006      	beq.n	80044b6 <mem_malloc+0x156>
 80044a8:	4b22      	ldr	r3, [pc, #136]	; (8004534 <mem_malloc+0x1d4>)
 80044aa:	f240 32b5 	movw	r2, #949	; 0x3b5
 80044ae:	4925      	ldr	r1, [pc, #148]	; (8004544 <mem_malloc+0x1e4>)
 80044b0:	4822      	ldr	r0, [pc, #136]	; (800453c <mem_malloc+0x1dc>)
 80044b2:	f00c fbd9 	bl	8010c68 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80044b6:	8bba      	ldrh	r2, [r7, #28]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	4413      	add	r3, r2
 80044bc:	3308      	adds	r3, #8
 80044be:	4a20      	ldr	r2, [pc, #128]	; (8004540 <mem_malloc+0x1e0>)
 80044c0:	6812      	ldr	r2, [r2, #0]
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d906      	bls.n	80044d4 <mem_malloc+0x174>
 80044c6:	4b1b      	ldr	r3, [pc, #108]	; (8004534 <mem_malloc+0x1d4>)
 80044c8:	f240 32ba 	movw	r2, #954	; 0x3ba
 80044cc:	491e      	ldr	r1, [pc, #120]	; (8004548 <mem_malloc+0x1e8>)
 80044ce:	481b      	ldr	r0, [pc, #108]	; (800453c <mem_malloc+0x1dc>)
 80044d0:	f00c fbca 	bl	8010c68 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d006      	beq.n	80044ec <mem_malloc+0x18c>
 80044de:	4b15      	ldr	r3, [pc, #84]	; (8004534 <mem_malloc+0x1d4>)
 80044e0:	f44f 726f 	mov.w	r2, #956	; 0x3bc
 80044e4:	4919      	ldr	r1, [pc, #100]	; (800454c <mem_malloc+0x1ec>)
 80044e6:	4815      	ldr	r0, [pc, #84]	; (800453c <mem_malloc+0x1dc>)
 80044e8:	f00c fbbe 	bl	8010c68 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d006      	beq.n	8004504 <mem_malloc+0x1a4>
 80044f6:	4b0f      	ldr	r3, [pc, #60]	; (8004534 <mem_malloc+0x1d4>)
 80044f8:	f240 32be 	movw	r2, #958	; 0x3be
 80044fc:	4914      	ldr	r1, [pc, #80]	; (8004550 <mem_malloc+0x1f0>)
 80044fe:	480f      	ldr	r0, [pc, #60]	; (800453c <mem_malloc+0x1dc>)
 8004500:	f00c fbb2 	bl	8010c68 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3308      	adds	r3, #8
 8004508:	e00e      	b.n	8004528 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800450a:	8bfb      	ldrh	r3, [r7, #30]
 800450c:	4618      	mov	r0, r3
 800450e:	f7ff fc83 	bl	8003e18 <ptr_to_mem>
 8004512:	4603      	mov	r3, r0
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8004518:	8bfa      	ldrh	r2, [r7, #30]
 800451a:	8bbb      	ldrh	r3, [r7, #28]
 800451c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8004520:	429a      	cmp	r2, r3
 8004522:	f4ff af44 	bcc.w	80043ae <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3720      	adds	r7, #32
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	20000544 	.word	0x20000544
 8004534:	08011be0 	.word	0x08011be0
 8004538:	08011d88 	.word	0x08011d88
 800453c:	08011c28 	.word	0x08011c28
 8004540:	20000540 	.word	0x20000540
 8004544:	08011d9c 	.word	0x08011d9c
 8004548:	08011db8 	.word	0x08011db8
 800454c:	08011de8 	.word	0x08011de8
 8004550:	08011e18 	.word	0x08011e18

08004554 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2200      	movs	r2, #0
 8004562:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	3303      	adds	r3, #3
 800456a:	f023 0303 	bic.w	r3, r3, #3
 800456e:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e011      	b.n	800459a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	68ba      	ldr	r2, [r7, #8]
 8004586:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	461a      	mov	r2, r3
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4413      	add	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	885b      	ldrh	r3, [r3, #2]
 800459e:	461a      	mov	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4293      	cmp	r3, r2
 80045a4:	dbe7      	blt.n	8004576 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80045a6:	bf00      	nop
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80045ba:	2300      	movs	r3, #0
 80045bc:	80fb      	strh	r3, [r7, #6]
 80045be:	e009      	b.n	80045d4 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80045c0:	88fb      	ldrh	r3, [r7, #6]
 80045c2:	4a08      	ldr	r2, [pc, #32]	; (80045e4 <memp_init+0x30>)
 80045c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f7ff ffc3 	bl	8004554 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80045ce:	88fb      	ldrh	r3, [r7, #6]
 80045d0:	3301      	adds	r3, #1
 80045d2:	80fb      	strh	r3, [r7, #6]
 80045d4:	88fb      	ldrh	r3, [r7, #6]
 80045d6:	2b08      	cmp	r3, #8
 80045d8:	d9f2      	bls.n	80045c0 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80045da:	bf00      	nop
 80045dc:	3708      	adds	r7, #8
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	08014998 	.word	0x08014998

080045e8 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b084      	sub	sp, #16
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d012      	beq.n	8004624 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	6812      	ldr	r2, [r2, #0]
 8004606:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d006      	beq.n	8004620 <do_memp_malloc_pool+0x38>
 8004612:	4b07      	ldr	r3, [pc, #28]	; (8004630 <do_memp_malloc_pool+0x48>)
 8004614:	f240 1219 	movw	r2, #281	; 0x119
 8004618:	4906      	ldr	r1, [pc, #24]	; (8004634 <do_memp_malloc_pool+0x4c>)
 800461a:	4807      	ldr	r0, [pc, #28]	; (8004638 <do_memp_malloc_pool+0x50>)
 800461c:	f00c fb24 	bl	8010c68 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	e000      	b.n	8004626 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3710      	adds	r7, #16
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
 800462e:	bf00      	nop
 8004630:	08011e3c 	.word	0x08011e3c
 8004634:	08011e6c 	.word	0x08011e6c
 8004638:	08011e90 	.word	0x08011e90

0800463c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8004646:	79fb      	ldrb	r3, [r7, #7]
 8004648:	2b08      	cmp	r3, #8
 800464a:	d908      	bls.n	800465e <memp_malloc+0x22>
 800464c:	4b0a      	ldr	r3, [pc, #40]	; (8004678 <memp_malloc+0x3c>)
 800464e:	f240 1257 	movw	r2, #343	; 0x157
 8004652:	490a      	ldr	r1, [pc, #40]	; (800467c <memp_malloc+0x40>)
 8004654:	480a      	ldr	r0, [pc, #40]	; (8004680 <memp_malloc+0x44>)
 8004656:	f00c fb07 	bl	8010c68 <iprintf>
 800465a:	2300      	movs	r3, #0
 800465c:	e008      	b.n	8004670 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800465e:	79fb      	ldrb	r3, [r7, #7]
 8004660:	4a08      	ldr	r2, [pc, #32]	; (8004684 <memp_malloc+0x48>)
 8004662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004666:	4618      	mov	r0, r3
 8004668:	f7ff ffbe 	bl	80045e8 <do_memp_malloc_pool>
 800466c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800466e:	68fb      	ldr	r3, [r7, #12]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	08011e3c 	.word	0x08011e3c
 800467c:	08011ecc 	.word	0x08011ecc
 8004680:	08011e90 	.word	0x08011e90
 8004684:	08014998 	.word	0x08014998

08004688 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b00      	cmp	r3, #0
 800469a:	d006      	beq.n	80046aa <do_memp_free_pool+0x22>
 800469c:	4b0a      	ldr	r3, [pc, #40]	; (80046c8 <do_memp_free_pool+0x40>)
 800469e:	f240 126d 	movw	r2, #365	; 0x16d
 80046a2:	490a      	ldr	r1, [pc, #40]	; (80046cc <do_memp_free_pool+0x44>)
 80046a4:	480a      	ldr	r0, [pc, #40]	; (80046d0 <do_memp_free_pool+0x48>)
 80046a6:	f00c fadf 	bl	8010c68 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 80046c0:	bf00      	nop
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	08011e3c 	.word	0x08011e3c
 80046cc:	08011eec 	.word	0x08011eec
 80046d0:	08011e90 	.word	0x08011e90

080046d4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	6039      	str	r1, [r7, #0]
 80046de:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d907      	bls.n	80046f6 <memp_free+0x22>
 80046e6:	4b0c      	ldr	r3, [pc, #48]	; (8004718 <memp_free+0x44>)
 80046e8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80046ec:	490b      	ldr	r1, [pc, #44]	; (800471c <memp_free+0x48>)
 80046ee:	480c      	ldr	r0, [pc, #48]	; (8004720 <memp_free+0x4c>)
 80046f0:	f00c faba 	bl	8010c68 <iprintf>
 80046f4:	e00c      	b.n	8004710 <memp_free+0x3c>

  if (mem == NULL) {
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80046fc:	79fb      	ldrb	r3, [r7, #7]
 80046fe:	4a09      	ldr	r2, [pc, #36]	; (8004724 <memp_free+0x50>)
 8004700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004704:	6839      	ldr	r1, [r7, #0]
 8004706:	4618      	mov	r0, r3
 8004708:	f7ff ffbe 	bl	8004688 <do_memp_free_pool>
 800470c:	e000      	b.n	8004710 <memp_free+0x3c>
    return;
 800470e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	08011e3c 	.word	0x08011e3c
 800471c:	08011f0c 	.word	0x08011f0c
 8004720:	08011e90 	.word	0x08011e90
 8004724:	08014998 	.word	0x08014998

08004728 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800472c:	bf00      	nop
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
	...

08004738 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
 8004744:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d108      	bne.n	800475e <netif_add+0x26>
 800474c:	4b5b      	ldr	r3, [pc, #364]	; (80048bc <netif_add+0x184>)
 800474e:	f240 1227 	movw	r2, #295	; 0x127
 8004752:	495b      	ldr	r1, [pc, #364]	; (80048c0 <netif_add+0x188>)
 8004754:	485b      	ldr	r0, [pc, #364]	; (80048c4 <netif_add+0x18c>)
 8004756:	f00c fa87 	bl	8010c68 <iprintf>
 800475a:	2300      	movs	r3, #0
 800475c:	e0a9      	b.n	80048b2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	2b00      	cmp	r3, #0
 8004762:	d108      	bne.n	8004776 <netif_add+0x3e>
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <netif_add+0x184>)
 8004766:	f44f 7294 	mov.w	r2, #296	; 0x128
 800476a:	4957      	ldr	r1, [pc, #348]	; (80048c8 <netif_add+0x190>)
 800476c:	4855      	ldr	r0, [pc, #340]	; (80048c4 <netif_add+0x18c>)
 800476e:	f00c fa7b 	bl	8010c68 <iprintf>
 8004772:	2300      	movs	r3, #0
 8004774:	e09d      	b.n	80048b2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800477c:	4b53      	ldr	r3, [pc, #332]	; (80048cc <netif_add+0x194>)
 800477e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d101      	bne.n	800478a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8004786:	4b51      	ldr	r3, [pc, #324]	; (80048cc <netif_add+0x194>)
 8004788:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8004790:	4b4e      	ldr	r3, [pc, #312]	; (80048cc <netif_add+0x194>)
 8004792:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2200      	movs	r2, #0
 8004798:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	2200      	movs	r2, #0
 800479e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4a49      	ldr	r2, [pc, #292]	; (80048d0 <netif_add+0x198>)
 80047aa:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2200      	movs	r2, #0
 80047b0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3324      	adds	r3, #36	; 0x24
 80047be:	2204      	movs	r2, #4
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f00c fa48 	bl	8010c58 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a3a      	ldr	r2, [r7, #32]
 80047d2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80047d4:	4b3f      	ldr	r3, [pc, #252]	; (80048d4 <netif_add+0x19c>)
 80047d6:	781a      	ldrb	r2, [r3, #0]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047e2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	68b9      	ldr	r1, [r7, #8]
 80047ea:	68f8      	ldr	r0, [r7, #12]
 80047ec:	f000 f914 	bl	8004a18 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f2:	68f8      	ldr	r0, [r7, #12]
 80047f4:	4798      	blx	r3
 80047f6:	4603      	mov	r3, r0
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <netif_add+0xc8>
    return NULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	e058      	b.n	80048b2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004806:	2bff      	cmp	r3, #255	; 0xff
 8004808:	d103      	bne.n	8004812 <netif_add+0xda>
        netif->num = 0;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 8004812:	2300      	movs	r3, #0
 8004814:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004816:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <netif_add+0x1a0>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e02b      	b.n	8004876 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800481e:	697a      	ldr	r2, [r7, #20]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	429a      	cmp	r2, r3
 8004824:	d106      	bne.n	8004834 <netif_add+0xfc>
 8004826:	4b25      	ldr	r3, [pc, #148]	; (80048bc <netif_add+0x184>)
 8004828:	f240 128b 	movw	r2, #395	; 0x18b
 800482c:	492b      	ldr	r1, [pc, #172]	; (80048dc <netif_add+0x1a4>)
 800482e:	4825      	ldr	r0, [pc, #148]	; (80048c4 <netif_add+0x18c>)
 8004830:	f00c fa1a 	bl	8010c68 <iprintf>
        num_netifs++;
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	3301      	adds	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2bff      	cmp	r3, #255	; 0xff
 800483e:	dd06      	ble.n	800484e <netif_add+0x116>
 8004840:	4b1e      	ldr	r3, [pc, #120]	; (80048bc <netif_add+0x184>)
 8004842:	f240 128d 	movw	r2, #397	; 0x18d
 8004846:	4926      	ldr	r1, [pc, #152]	; (80048e0 <netif_add+0x1a8>)
 8004848:	481e      	ldr	r0, [pc, #120]	; (80048c4 <netif_add+0x18c>)
 800484a:	f00c fa0d 	bl	8010c68 <iprintf>
        if (netif2->num == netif->num) {
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800485a:	429a      	cmp	r2, r3
 800485c:	d108      	bne.n	8004870 <netif_add+0x138>
          netif->num++;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004864:	3301      	adds	r3, #1
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800486e:	e005      	b.n	800487c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1d0      	bne.n	800481e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1be      	bne.n	8004800 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004888:	2bfe      	cmp	r3, #254	; 0xfe
 800488a:	d103      	bne.n	8004894 <netif_add+0x15c>
    netif_num = 0;
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <netif_add+0x19c>)
 800488e:	2200      	movs	r2, #0
 8004890:	701a      	strb	r2, [r3, #0]
 8004892:	e006      	b.n	80048a2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800489a:	3301      	adds	r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	4b0d      	ldr	r3, [pc, #52]	; (80048d4 <netif_add+0x19c>)
 80048a0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 80048a2:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <netif_add+0x1a0>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80048aa:	4a0b      	ldr	r2, [pc, #44]	; (80048d8 <netif_add+0x1a0>)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80048b0:	68fb      	ldr	r3, [r7, #12]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3718      	adds	r7, #24
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	08011f28 	.word	0x08011f28
 80048c0:	08011fbc 	.word	0x08011fbc
 80048c4:	08011f78 	.word	0x08011f78
 80048c8:	08011fd8 	.word	0x08011fd8
 80048cc:	08014a14 	.word	0x08014a14
 80048d0:	08004cfb 	.word	0x08004cfb
 80048d4:	2000056c 	.word	0x2000056c
 80048d8:	20006e54 	.word	0x20006e54
 80048dc:	08011ffc 	.word	0x08011ffc
 80048e0:	08012010 	.word	0x08012010

080048e4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80048ee:	6839      	ldr	r1, [r7, #0]
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 fecd 	bl	8007690 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80048f6:	6839      	ldr	r1, [r7, #0]
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f007 ff71 	bl	800c7e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80048fe:	bf00      	nop
 8004900:	3708      	adds	r7, #8
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
	...

08004908 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b086      	sub	sp, #24
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <netif_do_set_ipaddr+0x20>
 800491a:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <netif_do_set_ipaddr+0x88>)
 800491c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8004920:	491c      	ldr	r1, [pc, #112]	; (8004994 <netif_do_set_ipaddr+0x8c>)
 8004922:	481d      	ldr	r0, [pc, #116]	; (8004998 <netif_do_set_ipaddr+0x90>)
 8004924:	f00c f9a0 	bl	8010c68 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <netif_do_set_ipaddr+0x34>
 800492e:	4b18      	ldr	r3, [pc, #96]	; (8004990 <netif_do_set_ipaddr+0x88>)
 8004930:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8004934:	4917      	ldr	r1, [pc, #92]	; (8004994 <netif_do_set_ipaddr+0x8c>)
 8004936:	4818      	ldr	r0, [pc, #96]	; (8004998 <netif_do_set_ipaddr+0x90>)
 8004938:	f00c f996 	bl	8010c68 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	681a      	ldr	r2, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3304      	adds	r3, #4
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	429a      	cmp	r2, r3
 8004948:	d01c      	beq.n	8004984 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3304      	adds	r3, #4
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800495a:	f107 0314 	add.w	r3, r7, #20
 800495e:	4619      	mov	r1, r3
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7ff ffbf 	bl	80048e4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <netif_do_set_ipaddr+0x6a>
 800496c:	68bb      	ldr	r3, [r7, #8]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	e000      	b.n	8004974 <netif_do_set_ipaddr+0x6c>
 8004972:	2300      	movs	r3, #0
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8004978:	2101      	movs	r1, #1
 800497a:	68f8      	ldr	r0, [r7, #12]
 800497c:	f000 f8d2 	bl	8004b24 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8004980:	2301      	movs	r3, #1
 8004982:	e000      	b.n	8004986 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}
 800498e:	bf00      	nop
 8004990:	08011f28 	.word	0x08011f28
 8004994:	08012040 	.word	0x08012040
 8004998:	08011f78 	.word	0x08011f78

0800499c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800499c:	b480      	push	{r7}
 800499e:	b085      	sub	sp, #20
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3308      	adds	r3, #8
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d00a      	beq.n	80049cc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <netif_do_set_netmask+0x26>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	e000      	b.n	80049c4 <netif_do_set_netmask+0x28>
 80049c2:	2300      	movs	r3, #0
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80049c8:	2301      	movs	r3, #1
 80049ca:	e000      	b.n	80049ce <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3714      	adds	r7, #20
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr

080049da <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80049da:	b480      	push	{r7}
 80049dc:	b085      	sub	sp, #20
 80049de:	af00      	add	r7, sp, #0
 80049e0:	60f8      	str	r0, [r7, #12]
 80049e2:	60b9      	str	r1, [r7, #8]
 80049e4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	330c      	adds	r3, #12
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d00a      	beq.n	8004a0a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <netif_do_set_gw+0x26>
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	e000      	b.n	8004a02 <netif_do_set_gw+0x28>
 8004a00:	2300      	movs	r3, #0
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8004a06:	2301      	movs	r3, #1
 8004a08:	e000      	b.n	8004a0c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8004a34:	4b1c      	ldr	r3, [pc, #112]	; (8004aa8 <netif_set_addr+0x90>)
 8004a36:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d101      	bne.n	8004a42 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8004a3e:	4b1a      	ldr	r3, [pc, #104]	; (8004aa8 <netif_set_addr+0x90>)
 8004a40:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8004a48:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <netif_set_addr+0x90>)
 8004a4a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <netif_set_addr+0x42>
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d101      	bne.n	8004a5e <netif_set_addr+0x46>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <netif_set_addr+0x48>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
  if (remove) {
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d006      	beq.n	8004a76 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a68:	f107 0310 	add.w	r3, r7, #16
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	68b9      	ldr	r1, [r7, #8]
 8004a70:	68f8      	ldr	r0, [r7, #12]
 8004a72:	f7ff ff49 	bl	8004908 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8004a76:	69fa      	ldr	r2, [r7, #28]
 8004a78:	6879      	ldr	r1, [r7, #4]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7ff ff8e 	bl	800499c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8004a80:	69ba      	ldr	r2, [r7, #24]
 8004a82:	6839      	ldr	r1, [r7, #0]
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ffa8 	bl	80049da <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d106      	bne.n	8004a9e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8004a90:	f107 0310 	add.w	r3, r7, #16
 8004a94:	461a      	mov	r2, r3
 8004a96:	68b9      	ldr	r1, [r7, #8]
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f7ff ff35 	bl	8004908 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8004a9e:	bf00      	nop
 8004aa0:	3720      	adds	r7, #32
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	08014a14 	.word	0x08014a14

08004aac <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8004ab4:	4a04      	ldr	r2, [pc, #16]	; (8004ac8 <netif_set_default+0x1c>)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20006e58 	.word	0x20006e58

08004acc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d107      	bne.n	8004aea <netif_set_up+0x1e>
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <netif_set_up+0x4c>)
 8004adc:	f44f 7254 	mov.w	r2, #848	; 0x350
 8004ae0:	490e      	ldr	r1, [pc, #56]	; (8004b1c <netif_set_up+0x50>)
 8004ae2:	480f      	ldr	r0, [pc, #60]	; (8004b20 <netif_set_up+0x54>)
 8004ae4:	f00c f8c0 	bl	8010c68 <iprintf>
 8004ae8:	e013      	b.n	8004b12 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004af0:	f003 0301 	and.w	r3, r3, #1
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10c      	bne.n	8004b12 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004b0a:	2103      	movs	r1, #3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f809 	bl	8004b24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08011f28 	.word	0x08011f28
 8004b1c:	080120b0 	.word	0x080120b0
 8004b20:	08011f78 	.word	0x08011f78

08004b24 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <netif_issue_reports+0x20>
 8004b36:	4b18      	ldr	r3, [pc, #96]	; (8004b98 <netif_issue_reports+0x74>)
 8004b38:	f240 326d 	movw	r2, #877	; 0x36d
 8004b3c:	4917      	ldr	r1, [pc, #92]	; (8004b9c <netif_issue_reports+0x78>)
 8004b3e:	4818      	ldr	r0, [pc, #96]	; (8004ba0 <netif_issue_reports+0x7c>)
 8004b40:	f00c f892 	bl	8010c68 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b4a:	f003 0304 	and.w	r3, r3, #4
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d01e      	beq.n	8004b90 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b58:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d017      	beq.n	8004b90 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d013      	beq.n	8004b92 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00e      	beq.n	8004b92 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004b7a:	f003 0308 	and.w	r3, r3, #8
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d007      	beq.n	8004b92 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	3304      	adds	r3, #4
 8004b86:	4619      	mov	r1, r3
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f00a fc89 	bl	800f4a0 <etharp_request>
 8004b8e:	e000      	b.n	8004b92 <netif_issue_reports+0x6e>
    return;
 8004b90:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8004b92:	3708      	adds	r7, #8
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}
 8004b98:	08011f28 	.word	0x08011f28
 8004b9c:	080120cc 	.word	0x080120cc
 8004ba0:	08011f78 	.word	0x08011f78

08004ba4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d107      	bne.n	8004bc2 <netif_set_down+0x1e>
 8004bb2:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <netif_set_down+0x58>)
 8004bb4:	f240 329b 	movw	r2, #923	; 0x39b
 8004bb8:	4911      	ldr	r1, [pc, #68]	; (8004c00 <netif_set_down+0x5c>)
 8004bba:	4812      	ldr	r0, [pc, #72]	; (8004c04 <netif_set_down+0x60>)
 8004bbc:	f00c f854 	bl	8010c68 <iprintf>
 8004bc0:	e019      	b.n	8004bf6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bc8:	f003 0301 	and.w	r3, r3, #1
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004bd6:	f023 0301 	bic.w	r3, r3, #1
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004be8:	f003 0308 	and.w	r3, r3, #8
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f00a f80f 	bl	800ec14 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	08011f28 	.word	0x08011f28
 8004c00:	080120f0 	.word	0x080120f0
 8004c04:	08011f78 	.word	0x08011f78

08004c08 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d107      	bne.n	8004c26 <netif_set_link_up+0x1e>
 8004c16:	4b15      	ldr	r3, [pc, #84]	; (8004c6c <netif_set_link_up+0x64>)
 8004c18:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8004c1c:	4914      	ldr	r1, [pc, #80]	; (8004c70 <netif_set_link_up+0x68>)
 8004c1e:	4815      	ldr	r0, [pc, #84]	; (8004c74 <netif_set_link_up+0x6c>)
 8004c20:	f00c f822 	bl	8010c68 <iprintf>
 8004c24:	e01e      	b.n	8004c64 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c2c:	f003 0304 	and.w	r3, r3, #4
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d117      	bne.n	8004c64 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f008 fa14 	bl	800d074 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f7ff ff68 	bl	8004b24 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	69db      	ldr	r3, [r3, #28]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <netif_set_link_up+0x5c>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	08011f28 	.word	0x08011f28
 8004c70:	08012110 	.word	0x08012110
 8004c74:	08011f78 	.word	0x08011f78

08004c78 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d107      	bne.n	8004c96 <netif_set_link_down+0x1e>
 8004c86:	4b11      	ldr	r3, [pc, #68]	; (8004ccc <netif_set_link_down+0x54>)
 8004c88:	f240 4206 	movw	r2, #1030	; 0x406
 8004c8c:	4910      	ldr	r1, [pc, #64]	; (8004cd0 <netif_set_link_down+0x58>)
 8004c8e:	4811      	ldr	r0, [pc, #68]	; (8004cd4 <netif_set_link_down+0x5c>)
 8004c90:	f00b ffea 	bl	8010c68 <iprintf>
 8004c94:	e017      	b.n	8004cc6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004c9c:	f003 0304 	and.w	r3, r3, #4
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d010      	beq.n	8004cc6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004caa:	f023 0304 	bic.w	r3, r3, #4
 8004cae:	b2da      	uxtb	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69db      	ldr	r3, [r3, #28]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d003      	beq.n	8004cc6 <netif_set_link_down+0x4e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	69db      	ldr	r3, [r3, #28]
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	08011f28 	.word	0x08011f28
 8004cd0:	08012134 	.word	0x08012134
 8004cd4:	08011f78 	.word	0x08011f78

08004cd8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b083      	sub	sp, #12
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	61da      	str	r2, [r3, #28]
  }
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr

08004cfa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b085      	sub	sp, #20
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	60f8      	str	r0, [r7, #12]
 8004d02:	60b9      	str	r1, [r7, #8]
 8004d04:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8004d06:	f06f 030b 	mvn.w	r3, #11
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
	...

08004d18 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b085      	sub	sp, #20
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8004d22:	79fb      	ldrb	r3, [r7, #7]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d013      	beq.n	8004d50 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8004d28:	4b0d      	ldr	r3, [pc, #52]	; (8004d60 <netif_get_by_index+0x48>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e00c      	b.n	8004d4a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004d36:	3301      	adds	r3, #1
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	79fa      	ldrb	r2, [r7, #7]
 8004d3c:	429a      	cmp	r2, r3
 8004d3e:	d101      	bne.n	8004d44 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	e006      	b.n	8004d52 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1ef      	bne.n	8004d30 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8004d50:	2300      	movs	r3, #0
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	20006e54 	.word	0x20006e54

08004d64 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <pbuf_free_ooseq+0x38>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d70:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <pbuf_free_ooseq+0x3c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	607b      	str	r3, [r7, #4]
 8004d76:	e00a      	b.n	8004d8e <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f002 fcc3 	bl	800770c <tcp_free_ooseq>
      return;
 8004d86:	e005      	b.n	8004d94 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	607b      	str	r3, [r7, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1f1      	bne.n	8004d78 <pbuf_free_ooseq+0x14>
    }
  }
}
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	20006e5c 	.word	0x20006e5c
 8004da0:	20006e64 	.word	0x20006e64

08004da4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8004da8:	4b03      	ldr	r3, [pc, #12]	; (8004db8 <pbuf_pool_is_empty+0x14>)
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8004dae:	bf00      	nop
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr
 8004db8:	20006e5c 	.word	0x20006e5c

08004dbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	461a      	mov	r2, r3
 8004dca:	460b      	mov	r3, r1
 8004dcc:	80fb      	strh	r3, [r7, #6]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	88fa      	ldrh	r2, [r7, #6]
 8004de2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	88ba      	ldrh	r2, [r7, #4]
 8004de8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8004dea:	8b3b      	ldrh	r3, [r7, #24]
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	7f3a      	ldrb	r2, [r7, #28]
 8004df6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	73da      	strb	r2, [r3, #15]
}
 8004e04:	bf00      	nop
 8004e06:	3714      	adds	r7, #20
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0e:	4770      	bx	lr

08004e10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	; 0x30
 8004e14:	af02      	add	r7, sp, #8
 8004e16:	4603      	mov	r3, r0
 8004e18:	71fb      	strb	r3, [r7, #7]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	80bb      	strh	r3, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8004e22:	79fb      	ldrb	r3, [r7, #7]
 8004e24:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8004e26:	887b      	ldrh	r3, [r7, #2]
 8004e28:	2b41      	cmp	r3, #65	; 0x41
 8004e2a:	d00b      	beq.n	8004e44 <pbuf_alloc+0x34>
 8004e2c:	2b41      	cmp	r3, #65	; 0x41
 8004e2e:	dc02      	bgt.n	8004e36 <pbuf_alloc+0x26>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d007      	beq.n	8004e44 <pbuf_alloc+0x34>
 8004e34:	e0c2      	b.n	8004fbc <pbuf_alloc+0x1ac>
 8004e36:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8004e3a:	d00b      	beq.n	8004e54 <pbuf_alloc+0x44>
 8004e3c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8004e40:	d070      	beq.n	8004f24 <pbuf_alloc+0x114>
 8004e42:	e0bb      	b.n	8004fbc <pbuf_alloc+0x1ac>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8004e44:	887a      	ldrh	r2, [r7, #2]
 8004e46:	88bb      	ldrh	r3, [r7, #4]
 8004e48:	4619      	mov	r1, r3
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f000 f8d2 	bl	8004ff4 <pbuf_alloc_reference>
 8004e50:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8004e52:	e0bd      	b.n	8004fd0 <pbuf_alloc+0x1c0>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8004e54:	2300      	movs	r3, #0
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8004e5c:	88bb      	ldrh	r3, [r7, #4]
 8004e5e:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8004e60:	2008      	movs	r0, #8
 8004e62:	f7ff fbeb 	bl	800463c <memp_malloc>
 8004e66:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d109      	bne.n	8004e82 <pbuf_alloc+0x72>
          PBUF_POOL_IS_EMPTY();
 8004e6e:	f7ff ff99 	bl	8004da4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <pbuf_alloc+0x6e>
            pbuf_free(p);
 8004e78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e7a:	f000 faa9 	bl	80053d0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e0a7      	b.n	8004fd2 <pbuf_alloc+0x1c2>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8004e82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004e84:	3303      	adds	r3, #3
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f023 0303 	bic.w	r3, r3, #3
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	8b7a      	ldrh	r2, [r7, #26]
 8004e96:	4293      	cmp	r3, r2
 8004e98:	bf28      	it	cs
 8004e9a:	4613      	movcs	r3, r2
 8004e9c:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8004e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	693a      	ldr	r2, [r7, #16]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	3303      	adds	r3, #3
 8004ea8:	f023 0303 	bic.w	r3, r3, #3
 8004eac:	4618      	mov	r0, r3
 8004eae:	89f9      	ldrh	r1, [r7, #14]
 8004eb0:	8b7a      	ldrh	r2, [r7, #26]
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	9301      	str	r3, [sp, #4]
 8004eb6:	887b      	ldrh	r3, [r7, #2]
 8004eb8:	9300      	str	r3, [sp, #0]
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4601      	mov	r1, r0
 8004ebe:	6938      	ldr	r0, [r7, #16]
 8004ec0:	f7ff ff7c 	bl	8004dbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <pbuf_alloc+0xce>
 8004ed0:	4b42      	ldr	r3, [pc, #264]	; (8004fdc <pbuf_alloc+0x1cc>)
 8004ed2:	f240 1201 	movw	r2, #257	; 0x101
 8004ed6:	4942      	ldr	r1, [pc, #264]	; (8004fe0 <pbuf_alloc+0x1d0>)
 8004ed8:	4842      	ldr	r0, [pc, #264]	; (8004fe4 <pbuf_alloc+0x1d4>)
 8004eda:	f00b fec5 	bl	8010c68 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8004ede:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ee0:	3303      	adds	r3, #3
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8004eea:	d106      	bne.n	8004efa <pbuf_alloc+0xea>
 8004eec:	4b3b      	ldr	r3, [pc, #236]	; (8004fdc <pbuf_alloc+0x1cc>)
 8004eee:	f240 1203 	movw	r2, #259	; 0x103
 8004ef2:	493d      	ldr	r1, [pc, #244]	; (8004fe8 <pbuf_alloc+0x1d8>)
 8004ef4:	483b      	ldr	r0, [pc, #236]	; (8004fe4 <pbuf_alloc+0x1d4>)
 8004ef6:	f00b feb7 	bl	8010c68 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8004efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d102      	bne.n	8004f06 <pbuf_alloc+0xf6>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	627b      	str	r3, [r7, #36]	; 0x24
 8004f04:	e002      	b.n	8004f0c <pbuf_alloc+0xfc>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8004f10:	8b7a      	ldrh	r2, [r7, #26]
 8004f12:	89fb      	ldrh	r3, [r7, #14]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8004f1c:	8b7b      	ldrh	r3, [r7, #26]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d19e      	bne.n	8004e60 <pbuf_alloc+0x50>
      break;
 8004f22:	e055      	b.n	8004fd0 <pbuf_alloc+0x1c0>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8004f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f26:	3303      	adds	r3, #3
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	f023 0303 	bic.w	r3, r3, #3
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	88bb      	ldrh	r3, [r7, #4]
 8004f32:	3303      	adds	r3, #3
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	f023 0303 	bic.w	r3, r3, #3
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	4413      	add	r3, r2
 8004f3e:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8004f40:	8b3b      	ldrh	r3, [r7, #24]
 8004f42:	3310      	adds	r3, #16
 8004f44:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004f46:	8b3a      	ldrh	r2, [r7, #24]
 8004f48:	88bb      	ldrh	r3, [r7, #4]
 8004f4a:	3303      	adds	r3, #3
 8004f4c:	f023 0303 	bic.w	r3, r3, #3
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d306      	bcc.n	8004f62 <pbuf_alloc+0x152>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8004f54:	8afa      	ldrh	r2, [r7, #22]
 8004f56:	88bb      	ldrh	r3, [r7, #4]
 8004f58:	3303      	adds	r3, #3
 8004f5a:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d201      	bcs.n	8004f66 <pbuf_alloc+0x156>
        return NULL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	e035      	b.n	8004fd2 <pbuf_alloc+0x1c2>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8004f66:	8afb      	ldrh	r3, [r7, #22]
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7ff f9f9 	bl	8004360 <mem_malloc>
 8004f6e:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8004f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <pbuf_alloc+0x16a>
        return NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e02b      	b.n	8004fd2 <pbuf_alloc+0x1c2>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8004f7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004f7c:	3310      	adds	r3, #16
 8004f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f80:	4413      	add	r3, r2
 8004f82:	3303      	adds	r3, #3
 8004f84:	f023 0303 	bic.w	r3, r3, #3
 8004f88:	4618      	mov	r0, r3
 8004f8a:	88b9      	ldrh	r1, [r7, #4]
 8004f8c:	88ba      	ldrh	r2, [r7, #4]
 8004f8e:	2300      	movs	r3, #0
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	887b      	ldrh	r3, [r7, #2]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	460b      	mov	r3, r1
 8004f98:	4601      	mov	r1, r0
 8004f9a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f9c:	f7ff ff0e 	bl	8004dbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8004fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	f003 0303 	and.w	r3, r3, #3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d010      	beq.n	8004fce <pbuf_alloc+0x1be>
 8004fac:	4b0b      	ldr	r3, [pc, #44]	; (8004fdc <pbuf_alloc+0x1cc>)
 8004fae:	f240 1223 	movw	r2, #291	; 0x123
 8004fb2:	490e      	ldr	r1, [pc, #56]	; (8004fec <pbuf_alloc+0x1dc>)
 8004fb4:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <pbuf_alloc+0x1d4>)
 8004fb6:	f00b fe57 	bl	8010c68 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8004fba:	e008      	b.n	8004fce <pbuf_alloc+0x1be>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8004fbc:	4b07      	ldr	r3, [pc, #28]	; (8004fdc <pbuf_alloc+0x1cc>)
 8004fbe:	f240 1227 	movw	r2, #295	; 0x127
 8004fc2:	490b      	ldr	r1, [pc, #44]	; (8004ff0 <pbuf_alloc+0x1e0>)
 8004fc4:	4807      	ldr	r0, [pc, #28]	; (8004fe4 <pbuf_alloc+0x1d4>)
 8004fc6:	f00b fe4f 	bl	8010c68 <iprintf>
      return NULL;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	e001      	b.n	8004fd2 <pbuf_alloc+0x1c2>
      break;
 8004fce:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3728      	adds	r7, #40	; 0x28
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	08012158 	.word	0x08012158
 8004fe0:	08012188 	.word	0x08012188
 8004fe4:	080121b8 	.word	0x080121b8
 8004fe8:	080121e0 	.word	0x080121e0
 8004fec:	08012214 	.word	0x08012214
 8004ff0:	08012240 	.word	0x08012240

08004ff4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af02      	add	r7, sp, #8
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	807b      	strh	r3, [r7, #2]
 8005000:	4613      	mov	r3, r2
 8005002:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8005004:	883b      	ldrh	r3, [r7, #0]
 8005006:	2b41      	cmp	r3, #65	; 0x41
 8005008:	d009      	beq.n	800501e <pbuf_alloc_reference+0x2a>
 800500a:	883b      	ldrh	r3, [r7, #0]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d006      	beq.n	800501e <pbuf_alloc_reference+0x2a>
 8005010:	4b0f      	ldr	r3, [pc, #60]	; (8005050 <pbuf_alloc_reference+0x5c>)
 8005012:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8005016:	490f      	ldr	r1, [pc, #60]	; (8005054 <pbuf_alloc_reference+0x60>)
 8005018:	480f      	ldr	r0, [pc, #60]	; (8005058 <pbuf_alloc_reference+0x64>)
 800501a:	f00b fe25 	bl	8010c68 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800501e:	2007      	movs	r0, #7
 8005020:	f7ff fb0c 	bl	800463c <memp_malloc>
 8005024:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800502c:	2300      	movs	r3, #0
 800502e:	e00b      	b.n	8005048 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8005030:	8879      	ldrh	r1, [r7, #2]
 8005032:	887a      	ldrh	r2, [r7, #2]
 8005034:	2300      	movs	r3, #0
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	883b      	ldrh	r3, [r7, #0]
 800503a:	9300      	str	r3, [sp, #0]
 800503c:	460b      	mov	r3, r1
 800503e:	6879      	ldr	r1, [r7, #4]
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff febb 	bl	8004dbc <pbuf_init_alloced_pbuf>
  return p;
 8005046:	68fb      	ldr	r3, [r7, #12]
}
 8005048:	4618      	mov	r0, r3
 800504a:	3710      	adds	r7, #16
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}
 8005050:	08012158 	.word	0x08012158
 8005054:	0801225c 	.word	0x0801225c
 8005058:	080121b8 	.word	0x080121b8

0800505c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b088      	sub	sp, #32
 8005060:	af02      	add	r7, sp, #8
 8005062:	607b      	str	r3, [r7, #4]
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
 8005068:	460b      	mov	r3, r1
 800506a:	81bb      	strh	r3, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8005074:	8a7b      	ldrh	r3, [r7, #18]
 8005076:	3303      	adds	r3, #3
 8005078:	f023 0203 	bic.w	r2, r3, #3
 800507c:	89bb      	ldrh	r3, [r7, #12]
 800507e:	441a      	add	r2, r3
 8005080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005082:	429a      	cmp	r2, r3
 8005084:	d901      	bls.n	800508a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8005086:	2300      	movs	r3, #0
 8005088:	e018      	b.n	80050bc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d007      	beq.n	80050a0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8005090:	8a7b      	ldrh	r3, [r7, #18]
 8005092:	3303      	adds	r3, #3
 8005094:	f023 0303 	bic.w	r3, r3, #3
 8005098:	6a3a      	ldr	r2, [r7, #32]
 800509a:	4413      	add	r3, r2
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	e001      	b.n	80050a4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80050a0:	2300      	movs	r3, #0
 80050a2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	89b9      	ldrh	r1, [r7, #12]
 80050a8:	89ba      	ldrh	r2, [r7, #12]
 80050aa:	2302      	movs	r3, #2
 80050ac:	9301      	str	r3, [sp, #4]
 80050ae:	897b      	ldrh	r3, [r7, #10]
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	460b      	mov	r3, r1
 80050b4:	6979      	ldr	r1, [r7, #20]
 80050b6:	f7ff fe81 	bl	8004dbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80050ba:	687b      	ldr	r3, [r7, #4]
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3718      	adds	r7, #24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b084      	sub	sp, #16
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	460b      	mov	r3, r1
 80050ce:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <pbuf_realloc+0x20>
 80050d6:	4b3a      	ldr	r3, [pc, #232]	; (80051c0 <pbuf_realloc+0xfc>)
 80050d8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80050dc:	4939      	ldr	r1, [pc, #228]	; (80051c4 <pbuf_realloc+0x100>)
 80050de:	483a      	ldr	r0, [pc, #232]	; (80051c8 <pbuf_realloc+0x104>)
 80050e0:	f00b fdc2 	bl	8010c68 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	891b      	ldrh	r3, [r3, #8]
 80050e8:	887a      	ldrh	r2, [r7, #2]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d264      	bcs.n	80051b8 <pbuf_realloc+0xf4>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	891a      	ldrh	r2, [r3, #8]
 80050f2:	887b      	ldrh	r3, [r7, #2]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80050f8:	887b      	ldrh	r3, [r7, #2]
 80050fa:	817b      	strh	r3, [r7, #10]
  q = p;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8005100:	e018      	b.n	8005134 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	895b      	ldrh	r3, [r3, #10]
 8005106:	897a      	ldrh	r2, [r7, #10]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	891a      	ldrh	r2, [r3, #8]
 8005110:	893b      	ldrh	r3, [r7, #8]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	b29a      	uxth	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d106      	bne.n	8005134 <pbuf_realloc+0x70>
 8005126:	4b26      	ldr	r3, [pc, #152]	; (80051c0 <pbuf_realloc+0xfc>)
 8005128:	f240 12af 	movw	r2, #431	; 0x1af
 800512c:	4927      	ldr	r1, [pc, #156]	; (80051cc <pbuf_realloc+0x108>)
 800512e:	4826      	ldr	r0, [pc, #152]	; (80051c8 <pbuf_realloc+0x104>)
 8005130:	f00b fd9a 	bl	8010c68 <iprintf>
  while (rem_len > q->len) {
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	895b      	ldrh	r3, [r3, #10]
 8005138:	897a      	ldrh	r2, [r7, #10]
 800513a:	429a      	cmp	r2, r3
 800513c:	d8e1      	bhi.n	8005102 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	7b1b      	ldrb	r3, [r3, #12]
 8005142:	f003 030f 	and.w	r3, r3, #15
 8005146:	2b00      	cmp	r3, #0
 8005148:	d122      	bne.n	8005190 <pbuf_realloc+0xcc>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	895b      	ldrh	r3, [r3, #10]
 800514e:	897a      	ldrh	r2, [r7, #10]
 8005150:	429a      	cmp	r2, r3
 8005152:	d01d      	beq.n	8005190 <pbuf_realloc+0xcc>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	7b5b      	ldrb	r3, [r3, #13]
 8005158:	f003 0302 	and.w	r3, r3, #2
 800515c:	2b00      	cmp	r3, #0
 800515e:	d117      	bne.n	8005190 <pbuf_realloc+0xcc>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	461a      	mov	r2, r3
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	b29a      	uxth	r2, r3
 800516c:	897b      	ldrh	r3, [r7, #10]
 800516e:	4413      	add	r3, r2
 8005170:	b29b      	uxth	r3, r3
 8005172:	4619      	mov	r1, r3
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7fe fff7 	bl	8004168 <mem_trim>
 800517a:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d106      	bne.n	8005190 <pbuf_realloc+0xcc>
 8005182:	4b0f      	ldr	r3, [pc, #60]	; (80051c0 <pbuf_realloc+0xfc>)
 8005184:	f240 12bd 	movw	r2, #445	; 0x1bd
 8005188:	4911      	ldr	r1, [pc, #68]	; (80051d0 <pbuf_realloc+0x10c>)
 800518a:	480f      	ldr	r0, [pc, #60]	; (80051c8 <pbuf_realloc+0x104>)
 800518c:	f00b fd6c 	bl	8010c68 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	897a      	ldrh	r2, [r7, #10]
 8005194:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	895a      	ldrh	r2, [r3, #10]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d004      	beq.n	80051b0 <pbuf_realloc+0xec>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f910 	bl	80053d0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e000      	b.n	80051ba <pbuf_realloc+0xf6>
    return;
 80051b8:	bf00      	nop

}
 80051ba:	3710      	adds	r7, #16
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	08012158 	.word	0x08012158
 80051c4:	08012270 	.word	0x08012270
 80051c8:	080121b8 	.word	0x080121b8
 80051cc:	08012288 	.word	0x08012288
 80051d0:	080122a0 	.word	0x080122a0

080051d4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b086      	sub	sp, #24
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	4613      	mov	r3, r2
 80051e0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d106      	bne.n	80051f6 <pbuf_add_header_impl+0x22>
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <pbuf_add_header_impl+0xc4>)
 80051ea:	f240 12df 	movw	r2, #479	; 0x1df
 80051ee:	492b      	ldr	r1, [pc, #172]	; (800529c <pbuf_add_header_impl+0xc8>)
 80051f0:	482b      	ldr	r0, [pc, #172]	; (80052a0 <pbuf_add_header_impl+0xcc>)
 80051f2:	f00b fd39 	bl	8010c68 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d003      	beq.n	8005204 <pbuf_add_header_impl+0x30>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005202:	d301      	bcc.n	8005208 <pbuf_add_header_impl+0x34>
    return 1;
 8005204:	2301      	movs	r3, #1
 8005206:	e043      	b.n	8005290 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <pbuf_add_header_impl+0x3e>
    return 0;
 800520e:	2300      	movs	r3, #0
 8005210:	e03e      	b.n	8005290 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	891a      	ldrh	r2, [r3, #8]
 800521a:	8a7b      	ldrh	r3, [r7, #18]
 800521c:	4413      	add	r3, r2
 800521e:	b29b      	uxth	r3, r3
 8005220:	8a7a      	ldrh	r2, [r7, #18]
 8005222:	429a      	cmp	r2, r3
 8005224:	d901      	bls.n	800522a <pbuf_add_header_impl+0x56>
    return 1;
 8005226:	2301      	movs	r3, #1
 8005228:	e032      	b.n	8005290 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	7b1b      	ldrb	r3, [r3, #12]
 800522e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8005230:	8a3b      	ldrh	r3, [r7, #16]
 8005232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00c      	beq.n	8005254 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	685a      	ldr	r2, [r3, #4]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	425b      	negs	r3, r3
 8005242:	4413      	add	r3, r2
 8005244:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	3310      	adds	r3, #16
 800524a:	697a      	ldr	r2, [r7, #20]
 800524c:	429a      	cmp	r2, r3
 800524e:	d20d      	bcs.n	800526c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8005250:	2301      	movs	r3, #1
 8005252:	e01d      	b.n	8005290 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d006      	beq.n	8005268 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	425b      	negs	r3, r3
 8005262:	4413      	add	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
 8005266:	e001      	b.n	800526c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8005268:	2301      	movs	r3, #1
 800526a:	e011      	b.n	8005290 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	697a      	ldr	r2, [r7, #20]
 8005270:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	895a      	ldrh	r2, [r3, #10]
 8005276:	8a7b      	ldrh	r3, [r7, #18]
 8005278:	4413      	add	r3, r2
 800527a:	b29a      	uxth	r2, r3
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	891a      	ldrh	r2, [r3, #8]
 8005284:	8a7b      	ldrh	r3, [r7, #18]
 8005286:	4413      	add	r3, r2
 8005288:	b29a      	uxth	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	811a      	strh	r2, [r3, #8]


  return 0;
 800528e:	2300      	movs	r3, #0
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	08012158 	.word	0x08012158
 800529c:	080122bc 	.word	0x080122bc
 80052a0:	080121b8 	.word	0x080121b8

080052a4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff ff8e 	bl	80051d4 <pbuf_add_header_impl>
 80052b8:	4603      	mov	r3, r0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3708      	adds	r7, #8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
	...

080052c4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <pbuf_remove_header+0x1e>
 80052d4:	4b20      	ldr	r3, [pc, #128]	; (8005358 <pbuf_remove_header+0x94>)
 80052d6:	f240 224b 	movw	r2, #587	; 0x24b
 80052da:	4920      	ldr	r1, [pc, #128]	; (800535c <pbuf_remove_header+0x98>)
 80052dc:	4820      	ldr	r0, [pc, #128]	; (8005360 <pbuf_remove_header+0x9c>)
 80052de:	f00b fcc3 	bl	8010c68 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <pbuf_remove_header+0x2c>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052ee:	d301      	bcc.n	80052f4 <pbuf_remove_header+0x30>
    return 1;
 80052f0:	2301      	movs	r3, #1
 80052f2:	e02c      	b.n	800534e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <pbuf_remove_header+0x3a>
    return 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e027      	b.n	800534e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	895b      	ldrh	r3, [r3, #10]
 8005306:	89fa      	ldrh	r2, [r7, #14]
 8005308:	429a      	cmp	r2, r3
 800530a:	d908      	bls.n	800531e <pbuf_remove_header+0x5a>
 800530c:	4b12      	ldr	r3, [pc, #72]	; (8005358 <pbuf_remove_header+0x94>)
 800530e:	f240 2255 	movw	r2, #597	; 0x255
 8005312:	4914      	ldr	r1, [pc, #80]	; (8005364 <pbuf_remove_header+0xa0>)
 8005314:	4812      	ldr	r0, [pc, #72]	; (8005360 <pbuf_remove_header+0x9c>)
 8005316:	f00b fca7 	bl	8010c68 <iprintf>
 800531a:	2301      	movs	r3, #1
 800531c:	e017      	b.n	800534e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	441a      	add	r2, r3
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	895a      	ldrh	r2, [r3, #10]
 8005334:	89fb      	ldrh	r3, [r7, #14]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	b29a      	uxth	r2, r3
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	891a      	ldrh	r2, [r3, #8]
 8005342:	89fb      	ldrh	r3, [r7, #14]
 8005344:	1ad3      	subs	r3, r2, r3
 8005346:	b29a      	uxth	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08012158 	.word	0x08012158
 800535c:	080122bc 	.word	0x080122bc
 8005360:	080121b8 	.word	0x080121b8
 8005364:	080122c8 	.word	0x080122c8

08005368 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b082      	sub	sp, #8
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	460b      	mov	r3, r1
 8005372:	807b      	strh	r3, [r7, #2]
 8005374:	4613      	mov	r3, r2
 8005376:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8005378:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800537c:	2b00      	cmp	r3, #0
 800537e:	da08      	bge.n	8005392 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8005380:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005384:	425b      	negs	r3, r3
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f7ff ff9b 	bl	80052c4 <pbuf_remove_header>
 800538e:	4603      	mov	r3, r0
 8005390:	e007      	b.n	80053a2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8005392:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005396:	787a      	ldrb	r2, [r7, #1]
 8005398:	4619      	mov	r1, r3
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ff1a 	bl	80051d4 <pbuf_add_header_impl>
 80053a0:	4603      	mov	r3, r0
  }
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80053b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80053ba:	2201      	movs	r2, #1
 80053bc:	4619      	mov	r1, r3
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f7ff ffd2 	bl	8005368 <pbuf_header_impl>
 80053c4:	4603      	mov	r3, r0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b086      	sub	sp, #24
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d106      	bne.n	80053f2 <pbuf_free+0x22>
 80053e4:	4b38      	ldr	r3, [pc, #224]	; (80054c8 <pbuf_free+0xf8>)
 80053e6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80053ea:	4938      	ldr	r1, [pc, #224]	; (80054cc <pbuf_free+0xfc>)
 80053ec:	4838      	ldr	r0, [pc, #224]	; (80054d0 <pbuf_free+0x100>)
 80053ee:	f00b fc3b 	bl	8010c68 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80053f2:	2300      	movs	r3, #0
 80053f4:	e063      	b.n	80054be <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80053fa:	e05c      	b.n	80054b6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	7b9b      	ldrb	r3, [r3, #14]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d106      	bne.n	8005412 <pbuf_free+0x42>
 8005404:	4b30      	ldr	r3, [pc, #192]	; (80054c8 <pbuf_free+0xf8>)
 8005406:	f240 22f1 	movw	r2, #753	; 0x2f1
 800540a:	4932      	ldr	r1, [pc, #200]	; (80054d4 <pbuf_free+0x104>)
 800540c:	4830      	ldr	r0, [pc, #192]	; (80054d0 <pbuf_free+0x100>)
 800540e:	f00b fc2b 	bl	8010c68 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	7b9b      	ldrb	r3, [r3, #14]
 8005416:	3b01      	subs	r3, #1
 8005418:	b2da      	uxtb	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	739a      	strb	r2, [r3, #14]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	7b9b      	ldrb	r3, [r3, #14]
 8005422:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8005424:	7dbb      	ldrb	r3, [r7, #22]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d143      	bne.n	80054b2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	7b1b      	ldrb	r3, [r3, #12]
 8005434:	f003 030f 	and.w	r3, r3, #15
 8005438:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	7b5b      	ldrb	r3, [r3, #13]
 800543e:	f003 0302 	and.w	r3, r3, #2
 8005442:	2b00      	cmp	r3, #0
 8005444:	d011      	beq.n	800546a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d106      	bne.n	8005460 <pbuf_free+0x90>
 8005452:	4b1d      	ldr	r3, [pc, #116]	; (80054c8 <pbuf_free+0xf8>)
 8005454:	f240 22ff 	movw	r2, #767	; 0x2ff
 8005458:	491f      	ldr	r1, [pc, #124]	; (80054d8 <pbuf_free+0x108>)
 800545a:	481d      	ldr	r0, [pc, #116]	; (80054d0 <pbuf_free+0x100>)
 800545c:	f00b fc04 	bl	8010c68 <iprintf>
        pc->custom_free_function(p);
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	4798      	blx	r3
 8005468:	e01d      	b.n	80054a6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800546a:	7bfb      	ldrb	r3, [r7, #15]
 800546c:	2b02      	cmp	r3, #2
 800546e:	d104      	bne.n	800547a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8005470:	6879      	ldr	r1, [r7, #4]
 8005472:	2008      	movs	r0, #8
 8005474:	f7ff f92e 	bl	80046d4 <memp_free>
 8005478:	e015      	b.n	80054a6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b01      	cmp	r3, #1
 800547e:	d104      	bne.n	800548a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	2007      	movs	r0, #7
 8005484:	f7ff f926 	bl	80046d4 <memp_free>
 8005488:	e00d      	b.n	80054a6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800548a:	7bfb      	ldrb	r3, [r7, #15]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d103      	bne.n	8005498 <pbuf_free+0xc8>
          mem_free(p);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7fe fdff 	bl	8004094 <mem_free>
 8005496:	e006      	b.n	80054a6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8005498:	4b0b      	ldr	r3, [pc, #44]	; (80054c8 <pbuf_free+0xf8>)
 800549a:	f240 320f 	movw	r2, #783	; 0x30f
 800549e:	490f      	ldr	r1, [pc, #60]	; (80054dc <pbuf_free+0x10c>)
 80054a0:	480b      	ldr	r0, [pc, #44]	; (80054d0 <pbuf_free+0x100>)
 80054a2:	f00b fbe1 	bl	8010c68 <iprintf>
        }
      }
      count++;
 80054a6:	7dfb      	ldrb	r3, [r7, #23]
 80054a8:	3301      	adds	r3, #1
 80054aa:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	607b      	str	r3, [r7, #4]
 80054b0:	e001      	b.n	80054b6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d19f      	bne.n	80053fc <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80054bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3718      	adds	r7, #24
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	08012158 	.word	0x08012158
 80054cc:	080122bc 	.word	0x080122bc
 80054d0:	080121b8 	.word	0x080121b8
 80054d4:	080122e8 	.word	0x080122e8
 80054d8:	08012300 	.word	0x08012300
 80054dc:	08012324 	.word	0x08012324

080054e0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80054ec:	e005      	b.n	80054fa <pbuf_clen+0x1a>
    ++len;
 80054ee:	89fb      	ldrh	r3, [r7, #14]
 80054f0:	3301      	adds	r3, #1
 80054f2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1f6      	bne.n	80054ee <pbuf_clen+0xe>
  }
  return len;
 8005500:	89fb      	ldrh	r3, [r7, #14]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d010      	beq.n	8005540 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	7b9b      	ldrb	r3, [r3, #14]
 8005522:	3301      	adds	r3, #1
 8005524:	b2da      	uxtb	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	7b9b      	ldrb	r3, [r3, #14]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d106      	bne.n	8005540 <pbuf_ref+0x30>
 8005532:	4b05      	ldr	r3, [pc, #20]	; (8005548 <pbuf_ref+0x38>)
 8005534:	f240 3242 	movw	r2, #834	; 0x342
 8005538:	4904      	ldr	r1, [pc, #16]	; (800554c <pbuf_ref+0x3c>)
 800553a:	4805      	ldr	r0, [pc, #20]	; (8005550 <pbuf_ref+0x40>)
 800553c:	f00b fb94 	bl	8010c68 <iprintf>
  }
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	08012158 	.word	0x08012158
 800554c:	08012338 	.word	0x08012338
 8005550:	080121b8 	.word	0x080121b8

08005554 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b084      	sub	sp, #16
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <pbuf_cat+0x16>
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d107      	bne.n	800557a <pbuf_cat+0x26>
 800556a:	4b20      	ldr	r3, [pc, #128]	; (80055ec <pbuf_cat+0x98>)
 800556c:	f240 325a 	movw	r2, #858	; 0x35a
 8005570:	491f      	ldr	r1, [pc, #124]	; (80055f0 <pbuf_cat+0x9c>)
 8005572:	4820      	ldr	r0, [pc, #128]	; (80055f4 <pbuf_cat+0xa0>)
 8005574:	f00b fb78 	bl	8010c68 <iprintf>
 8005578:	e034      	b.n	80055e4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	60fb      	str	r3, [r7, #12]
 800557e:	e00a      	b.n	8005596 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	891a      	ldrh	r2, [r3, #8]
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	891b      	ldrh	r3, [r3, #8]
 8005588:	4413      	add	r3, r2
 800558a:	b29a      	uxth	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	60fb      	str	r3, [r7, #12]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1f0      	bne.n	8005580 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	891a      	ldrh	r2, [r3, #8]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	895b      	ldrh	r3, [r3, #10]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d006      	beq.n	80055b8 <pbuf_cat+0x64>
 80055aa:	4b10      	ldr	r3, [pc, #64]	; (80055ec <pbuf_cat+0x98>)
 80055ac:	f240 3262 	movw	r2, #866	; 0x362
 80055b0:	4911      	ldr	r1, [pc, #68]	; (80055f8 <pbuf_cat+0xa4>)
 80055b2:	4810      	ldr	r0, [pc, #64]	; (80055f4 <pbuf_cat+0xa0>)
 80055b4:	f00b fb58 	bl	8010c68 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d006      	beq.n	80055ce <pbuf_cat+0x7a>
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <pbuf_cat+0x98>)
 80055c2:	f240 3263 	movw	r2, #867	; 0x363
 80055c6:	490d      	ldr	r1, [pc, #52]	; (80055fc <pbuf_cat+0xa8>)
 80055c8:	480a      	ldr	r0, [pc, #40]	; (80055f4 <pbuf_cat+0xa0>)
 80055ca:	f00b fb4d 	bl	8010c68 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	891a      	ldrh	r2, [r3, #8]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	891b      	ldrh	r3, [r3, #8]
 80055d6:	4413      	add	r3, r2
 80055d8:	b29a      	uxth	r2, r3
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	683a      	ldr	r2, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	08012158 	.word	0x08012158
 80055f0:	0801234c 	.word	0x0801234c
 80055f4:	080121b8 	.word	0x080121b8
 80055f8:	08012384 	.word	0x08012384
 80055fc:	080123b4 	.word	0x080123b4

08005600 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	f7ff ffa1 	bl	8005554 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8005612:	6838      	ldr	r0, [r7, #0]
 8005614:	f7ff ff7c 	bl	8005510 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
 800562e:	2300      	movs	r3, #0
 8005630:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <pbuf_copy+0x2a>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d005      	beq.n	800564a <pbuf_copy+0x2a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	891a      	ldrh	r2, [r3, #8]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	891b      	ldrh	r3, [r3, #8]
 8005646:	429a      	cmp	r2, r3
 8005648:	d209      	bcs.n	800565e <pbuf_copy+0x3e>
 800564a:	4b57      	ldr	r3, [pc, #348]	; (80057a8 <pbuf_copy+0x188>)
 800564c:	f240 32ca 	movw	r2, #970	; 0x3ca
 8005650:	4956      	ldr	r1, [pc, #344]	; (80057ac <pbuf_copy+0x18c>)
 8005652:	4857      	ldr	r0, [pc, #348]	; (80057b0 <pbuf_copy+0x190>)
 8005654:	f00b fb08 	bl	8010c68 <iprintf>
 8005658:	f06f 030f 	mvn.w	r3, #15
 800565c:	e09f      	b.n	800579e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	895b      	ldrh	r3, [r3, #10]
 8005662:	461a      	mov	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	1ad2      	subs	r2, r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	895b      	ldrh	r3, [r3, #10]
 800566c:	4619      	mov	r1, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1acb      	subs	r3, r1, r3
 8005672:	429a      	cmp	r2, r3
 8005674:	d306      	bcc.n	8005684 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	895b      	ldrh	r3, [r3, #10]
 800567a:	461a      	mov	r2, r3
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e005      	b.n	8005690 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	895b      	ldrh	r3, [r3, #10]
 8005688:	461a      	mov	r2, r3
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	1ad3      	subs	r3, r2, r3
 800568e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685a      	ldr	r2, [r3, #4]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	18d0      	adds	r0, r2, r3
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	4413      	add	r3, r2
 80056a0:	68fa      	ldr	r2, [r7, #12]
 80056a2:	4619      	mov	r1, r3
 80056a4:	f00b facd 	bl	8010c42 <memcpy>
    offset_to += len;
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80056b0:	693a      	ldr	r2, [r7, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	895b      	ldrh	r3, [r3, #10]
 80056bc:	461a      	mov	r2, r3
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d906      	bls.n	80056d2 <pbuf_copy+0xb2>
 80056c4:	4b38      	ldr	r3, [pc, #224]	; (80057a8 <pbuf_copy+0x188>)
 80056c6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80056ca:	493a      	ldr	r1, [pc, #232]	; (80057b4 <pbuf_copy+0x194>)
 80056cc:	4838      	ldr	r0, [pc, #224]	; (80057b0 <pbuf_copy+0x190>)
 80056ce:	f00b facb 	bl	8010c68 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	895b      	ldrh	r3, [r3, #10]
 80056d6:	461a      	mov	r2, r3
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4293      	cmp	r3, r2
 80056dc:	d906      	bls.n	80056ec <pbuf_copy+0xcc>
 80056de:	4b32      	ldr	r3, [pc, #200]	; (80057a8 <pbuf_copy+0x188>)
 80056e0:	f240 32da 	movw	r2, #986	; 0x3da
 80056e4:	4934      	ldr	r1, [pc, #208]	; (80057b8 <pbuf_copy+0x198>)
 80056e6:	4832      	ldr	r0, [pc, #200]	; (80057b0 <pbuf_copy+0x190>)
 80056e8:	f00b fabe 	bl	8010c68 <iprintf>
    if (offset_from >= p_from->len) {
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	895b      	ldrh	r3, [r3, #10]
 80056f0:	461a      	mov	r2, r3
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d304      	bcc.n	8005702 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	895b      	ldrh	r3, [r3, #10]
 8005706:	461a      	mov	r2, r3
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	4293      	cmp	r3, r2
 800570c:	d114      	bne.n	8005738 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d10c      	bne.n	8005738 <pbuf_copy+0x118>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d009      	beq.n	8005738 <pbuf_copy+0x118>
 8005724:	4b20      	ldr	r3, [pc, #128]	; (80057a8 <pbuf_copy+0x188>)
 8005726:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800572a:	4924      	ldr	r1, [pc, #144]	; (80057bc <pbuf_copy+0x19c>)
 800572c:	4820      	ldr	r0, [pc, #128]	; (80057b0 <pbuf_copy+0x190>)
 800572e:	f00b fa9b 	bl	8010c68 <iprintf>
 8005732:	f06f 030f 	mvn.w	r3, #15
 8005736:	e032      	b.n	800579e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d013      	beq.n	8005766 <pbuf_copy+0x146>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	895a      	ldrh	r2, [r3, #10]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	891b      	ldrh	r3, [r3, #8]
 8005746:	429a      	cmp	r2, r3
 8005748:	d10d      	bne.n	8005766 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <pbuf_copy+0x146>
 8005752:	4b15      	ldr	r3, [pc, #84]	; (80057a8 <pbuf_copy+0x188>)
 8005754:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8005758:	4919      	ldr	r1, [pc, #100]	; (80057c0 <pbuf_copy+0x1a0>)
 800575a:	4815      	ldr	r0, [pc, #84]	; (80057b0 <pbuf_copy+0x190>)
 800575c:	f00b fa84 	bl	8010c68 <iprintf>
 8005760:	f06f 0305 	mvn.w	r3, #5
 8005764:	e01b      	b.n	800579e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d013      	beq.n	8005794 <pbuf_copy+0x174>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	895a      	ldrh	r2, [r3, #10]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	891b      	ldrh	r3, [r3, #8]
 8005774:	429a      	cmp	r2, r3
 8005776:	d10d      	bne.n	8005794 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d009      	beq.n	8005794 <pbuf_copy+0x174>
 8005780:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <pbuf_copy+0x188>)
 8005782:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8005786:	490e      	ldr	r1, [pc, #56]	; (80057c0 <pbuf_copy+0x1a0>)
 8005788:	4809      	ldr	r0, [pc, #36]	; (80057b0 <pbuf_copy+0x190>)
 800578a:	f00b fa6d 	bl	8010c68 <iprintf>
 800578e:	f06f 0305 	mvn.w	r3, #5
 8005792:	e004      	b.n	800579e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	f47f af61 	bne.w	800565e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800579c:	2300      	movs	r3, #0
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}
 80057a6:	bf00      	nop
 80057a8:	08012158 	.word	0x08012158
 80057ac:	08012400 	.word	0x08012400
 80057b0:	080121b8 	.word	0x080121b8
 80057b4:	08012430 	.word	0x08012430
 80057b8:	08012448 	.word	0x08012448
 80057bc:	08012464 	.word	0x08012464
 80057c0:	08012474 	.word	0x08012474

080057c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	4611      	mov	r1, r2
 80057d0:	461a      	mov	r2, r3
 80057d2:	460b      	mov	r3, r1
 80057d4:	80fb      	strh	r3, [r7, #6]
 80057d6:	4613      	mov	r3, r2
 80057d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80057da:	2300      	movs	r3, #0
 80057dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80057de:	2300      	movs	r3, #0
 80057e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d108      	bne.n	80057fa <pbuf_copy_partial+0x36>
 80057e8:	4b2b      	ldr	r3, [pc, #172]	; (8005898 <pbuf_copy_partial+0xd4>)
 80057ea:	f240 420a 	movw	r2, #1034	; 0x40a
 80057ee:	492b      	ldr	r1, [pc, #172]	; (800589c <pbuf_copy_partial+0xd8>)
 80057f0:	482b      	ldr	r0, [pc, #172]	; (80058a0 <pbuf_copy_partial+0xdc>)
 80057f2:	f00b fa39 	bl	8010c68 <iprintf>
 80057f6:	2300      	movs	r3, #0
 80057f8:	e04a      	b.n	8005890 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d108      	bne.n	8005812 <pbuf_copy_partial+0x4e>
 8005800:	4b25      	ldr	r3, [pc, #148]	; (8005898 <pbuf_copy_partial+0xd4>)
 8005802:	f240 420b 	movw	r2, #1035	; 0x40b
 8005806:	4927      	ldr	r1, [pc, #156]	; (80058a4 <pbuf_copy_partial+0xe0>)
 8005808:	4825      	ldr	r0, [pc, #148]	; (80058a0 <pbuf_copy_partial+0xdc>)
 800580a:	f00b fa2d 	bl	8010c68 <iprintf>
 800580e:	2300      	movs	r3, #0
 8005810:	e03e      	b.n	8005890 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	61fb      	str	r3, [r7, #28]
 8005816:	e034      	b.n	8005882 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8005818:	88bb      	ldrh	r3, [r7, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <pbuf_copy_partial+0x70>
 800581e:	69fb      	ldr	r3, [r7, #28]
 8005820:	895b      	ldrh	r3, [r3, #10]
 8005822:	88ba      	ldrh	r2, [r7, #4]
 8005824:	429a      	cmp	r2, r3
 8005826:	d305      	bcc.n	8005834 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	895b      	ldrh	r3, [r3, #10]
 800582c:	88ba      	ldrh	r2, [r7, #4]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	80bb      	strh	r3, [r7, #4]
 8005832:	e023      	b.n	800587c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	895a      	ldrh	r2, [r3, #10]
 8005838:	88bb      	ldrh	r3, [r7, #4]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800583e:	8b3a      	ldrh	r2, [r7, #24]
 8005840:	88fb      	ldrh	r3, [r7, #6]
 8005842:	429a      	cmp	r2, r3
 8005844:	d901      	bls.n	800584a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8005846:	88fb      	ldrh	r3, [r7, #6]
 8005848:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800584a:	8b7b      	ldrh	r3, [r7, #26]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	18d0      	adds	r0, r2, r3
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	685a      	ldr	r2, [r3, #4]
 8005854:	88bb      	ldrh	r3, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	8b3a      	ldrh	r2, [r7, #24]
 800585a:	4619      	mov	r1, r3
 800585c:	f00b f9f1 	bl	8010c42 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8005860:	8afa      	ldrh	r2, [r7, #22]
 8005862:	8b3b      	ldrh	r3, [r7, #24]
 8005864:	4413      	add	r3, r2
 8005866:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8005868:	8b7a      	ldrh	r2, [r7, #26]
 800586a:	8b3b      	ldrh	r3, [r7, #24]
 800586c:	4413      	add	r3, r2
 800586e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8005870:	88fa      	ldrh	r2, [r7, #6]
 8005872:	8b3b      	ldrh	r3, [r7, #24]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8005878:	2300      	movs	r3, #0
 800587a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	88fb      	ldrh	r3, [r7, #6]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d002      	beq.n	800588e <pbuf_copy_partial+0xca>
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1c4      	bne.n	8005818 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800588e:	8afb      	ldrh	r3, [r7, #22]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3720      	adds	r7, #32
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	08012158 	.word	0x08012158
 800589c:	080124a0 	.word	0x080124a0
 80058a0:	080121b8 	.word	0x080121b8
 80058a4:	080124c0 	.word	0x080124c0

080058a8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b087      	sub	sp, #28
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	460b      	mov	r3, r1
 80058b2:	607a      	str	r2, [r7, #4]
 80058b4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80058b6:	897b      	ldrh	r3, [r7, #10]
 80058b8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80058be:	e007      	b.n	80058d0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	895b      	ldrh	r3, [r3, #10]
 80058c4:	8afa      	ldrh	r2, [r7, #22]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d004      	beq.n	80058e0 <pbuf_skip_const+0x38>
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	895b      	ldrh	r3, [r3, #10]
 80058da:	8afa      	ldrh	r2, [r7, #22]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d2ef      	bcs.n	80058c0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8afa      	ldrh	r2, [r7, #22]
 80058ea:	801a      	strh	r2, [r3, #0]
  }
  return q;
 80058ec:	693b      	ldr	r3, [r7, #16]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	371c      	adds	r7, #28
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	460b      	mov	r3, r1
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8005908:	897b      	ldrh	r3, [r7, #10]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	4619      	mov	r1, r3
 800590e:	68f8      	ldr	r0, [r7, #12]
 8005910:	f7ff ffca 	bl	80058a8 <pbuf_skip_const>
 8005914:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8005916:	697b      	ldr	r3, [r7, #20]
}
 8005918:	4618      	mov	r0, r3
 800591a:	3718      	adds	r7, #24
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}

08005920 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800592e:	88fb      	ldrh	r3, [r7, #6]
 8005930:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8005932:	2300      	movs	r3, #0
 8005934:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d109      	bne.n	8005950 <pbuf_take+0x30>
 800593c:	4b3a      	ldr	r3, [pc, #232]	; (8005a28 <pbuf_take+0x108>)
 800593e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8005942:	493a      	ldr	r1, [pc, #232]	; (8005a2c <pbuf_take+0x10c>)
 8005944:	483a      	ldr	r0, [pc, #232]	; (8005a30 <pbuf_take+0x110>)
 8005946:	f00b f98f 	bl	8010c68 <iprintf>
 800594a:	f06f 030f 	mvn.w	r3, #15
 800594e:	e067      	b.n	8005a20 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d109      	bne.n	800596a <pbuf_take+0x4a>
 8005956:	4b34      	ldr	r3, [pc, #208]	; (8005a28 <pbuf_take+0x108>)
 8005958:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800595c:	4935      	ldr	r1, [pc, #212]	; (8005a34 <pbuf_take+0x114>)
 800595e:	4834      	ldr	r0, [pc, #208]	; (8005a30 <pbuf_take+0x110>)
 8005960:	f00b f982 	bl	8010c68 <iprintf>
 8005964:	f06f 030f 	mvn.w	r3, #15
 8005968:	e05a      	b.n	8005a20 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	891b      	ldrh	r3, [r3, #8]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	429a      	cmp	r2, r3
 8005972:	d909      	bls.n	8005988 <pbuf_take+0x68>
 8005974:	4b2c      	ldr	r3, [pc, #176]	; (8005a28 <pbuf_take+0x108>)
 8005976:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800597a:	492f      	ldr	r1, [pc, #188]	; (8005a38 <pbuf_take+0x118>)
 800597c:	482c      	ldr	r0, [pc, #176]	; (8005a30 <pbuf_take+0x110>)
 800597e:	f00b f973 	bl	8010c68 <iprintf>
 8005982:	f04f 33ff 	mov.w	r3, #4294967295
 8005986:	e04b      	b.n	8005a20 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d007      	beq.n	800599e <pbuf_take+0x7e>
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <pbuf_take+0x7e>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	891b      	ldrh	r3, [r3, #8]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	429a      	cmp	r2, r3
 800599c:	d902      	bls.n	80059a4 <pbuf_take+0x84>
    return ERR_ARG;
 800599e:	f06f 030f 	mvn.w	r3, #15
 80059a2:	e03d      	b.n	8005a20 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	61fb      	str	r3, [r7, #28]
 80059a8:	e028      	b.n	80059fc <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d106      	bne.n	80059be <pbuf_take+0x9e>
 80059b0:	4b1d      	ldr	r3, [pc, #116]	; (8005a28 <pbuf_take+0x108>)
 80059b2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 80059b6:	4921      	ldr	r1, [pc, #132]	; (8005a3c <pbuf_take+0x11c>)
 80059b8:	481d      	ldr	r0, [pc, #116]	; (8005a30 <pbuf_take+0x110>)
 80059ba:	f00b f955 	bl	8010c68 <iprintf>
    buf_copy_len = total_copy_len;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	895b      	ldrh	r3, [r3, #10]
 80059c6:	461a      	mov	r2, r3
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d902      	bls.n	80059d4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80059ce:	69fb      	ldr	r3, [r7, #28]
 80059d0:	895b      	ldrh	r3, [r3, #10]
 80059d2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	6858      	ldr	r0, [r3, #4]
 80059d8:	68ba      	ldr	r2, [r7, #8]
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	4413      	add	r3, r2
 80059de:	69ba      	ldr	r2, [r7, #24]
 80059e0:	4619      	mov	r1, r3
 80059e2:	f00b f92e 	bl	8010c42 <memcpy>
    total_copy_len -= buf_copy_len;
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	1ad3      	subs	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	4413      	add	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1d3      	bne.n	80059aa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d103      	bne.n	8005a10 <pbuf_take+0xf0>
 8005a08:	88fb      	ldrh	r3, [r7, #6]
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d006      	beq.n	8005a1e <pbuf_take+0xfe>
 8005a10:	4b05      	ldr	r3, [pc, #20]	; (8005a28 <pbuf_take+0x108>)
 8005a12:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8005a16:	490a      	ldr	r1, [pc, #40]	; (8005a40 <pbuf_take+0x120>)
 8005a18:	4805      	ldr	r0, [pc, #20]	; (8005a30 <pbuf_take+0x110>)
 8005a1a:	f00b f925 	bl	8010c68 <iprintf>
  return ERR_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08012158 	.word	0x08012158
 8005a2c:	08012530 	.word	0x08012530
 8005a30:	080121b8 	.word	0x080121b8
 8005a34:	08012548 	.word	0x08012548
 8005a38:	08012564 	.word	0x08012564
 8005a3c:	08012584 	.word	0x08012584
 8005a40:	0801259c 	.word	0x0801259c

08005a44 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	4611      	mov	r1, r2
 8005a50:	461a      	mov	r2, r3
 8005a52:	460b      	mov	r3, r1
 8005a54:	80fb      	strh	r3, [r7, #6]
 8005a56:	4613      	mov	r3, r2
 8005a58:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8005a5a:	f107 0210 	add.w	r2, r7, #16
 8005a5e:	88bb      	ldrh	r3, [r7, #4]
 8005a60:	4619      	mov	r1, r3
 8005a62:	68f8      	ldr	r0, [r7, #12]
 8005a64:	f7ff ff49 	bl	80058fa <pbuf_skip>
 8005a68:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8005a6a:	69fb      	ldr	r3, [r7, #28]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d047      	beq.n	8005b00 <pbuf_take_at+0xbc>
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	891b      	ldrh	r3, [r3, #8]
 8005a74:	461a      	mov	r2, r3
 8005a76:	8a3b      	ldrh	r3, [r7, #16]
 8005a78:	4619      	mov	r1, r3
 8005a7a:	88fb      	ldrh	r3, [r7, #6]
 8005a7c:	440b      	add	r3, r1
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	db3e      	blt.n	8005b00 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8005a82:	88fb      	ldrh	r3, [r7, #6]
 8005a84:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	895a      	ldrh	r2, [r3, #10]
 8005a8e:	8a3b      	ldrh	r3, [r7, #16]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d806      	bhi.n	8005aa2 <pbuf_take_at+0x5e>
 8005a94:	4b1d      	ldr	r3, [pc, #116]	; (8005b0c <pbuf_take_at+0xc8>)
 8005a96:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8005a9a:	491d      	ldr	r1, [pc, #116]	; (8005b10 <pbuf_take_at+0xcc>)
 8005a9c:	481d      	ldr	r0, [pc, #116]	; (8005b14 <pbuf_take_at+0xd0>)
 8005a9e:	f00b f8e3 	bl	8010c68 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	895b      	ldrh	r3, [r3, #10]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	8a3b      	ldrh	r3, [r7, #16]
 8005aaa:	1ad2      	subs	r2, r2, r3
 8005aac:	88fb      	ldrh	r3, [r7, #6]
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	da05      	bge.n	8005abe <pbuf_take_at+0x7a>
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	895a      	ldrh	r2, [r3, #10]
 8005ab6:	8a3b      	ldrh	r3, [r7, #16]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	e000      	b.n	8005ac0 <pbuf_take_at+0x7c>
 8005abe:	88fb      	ldrh	r3, [r7, #6]
 8005ac0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	8a3a      	ldrh	r2, [r7, #16]
 8005ac8:	4413      	add	r3, r2
 8005aca:	8a7a      	ldrh	r2, [r7, #18]
 8005acc:	68b9      	ldr	r1, [r7, #8]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f00b f8b7 	bl	8010c42 <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8005ad4:	8b7a      	ldrh	r2, [r7, #26]
 8005ad6:	8a7b      	ldrh	r3, [r7, #18]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8005adc:	8a7b      	ldrh	r3, [r7, #18]
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8005ae4:	8b7b      	ldrh	r3, [r7, #26]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d008      	beq.n	8005afc <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	8b7a      	ldrh	r2, [r7, #26]
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff ff14 	bl	8005920 <pbuf_take>
 8005af8:	4603      	mov	r3, r0
 8005afa:	e003      	b.n	8005b04 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	e001      	b.n	8005b04 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8005b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3720      	adds	r7, #32
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}
 8005b0c:	08012158 	.word	0x08012158
 8005b10:	080125b4 	.word	0x080125b4
 8005b14:	080121b8 	.word	0x080121b8

08005b18 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	4603      	mov	r3, r0
 8005b20:	603a      	str	r2, [r7, #0]
 8005b22:	71fb      	strb	r3, [r7, #7]
 8005b24:	460b      	mov	r3, r1
 8005b26:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	8919      	ldrh	r1, [r3, #8]
 8005b2c:	88ba      	ldrh	r2, [r7, #4]
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff f96d 	bl	8004e10 <pbuf_alloc>
 8005b36:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <pbuf_clone+0x2a>
    return NULL;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	e011      	b.n	8005b66 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8005b42:	6839      	ldr	r1, [r7, #0]
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f7ff fd6b 	bl	8005620 <pbuf_copy>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8005b4e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d006      	beq.n	8005b64 <pbuf_clone+0x4c>
 8005b56:	4b06      	ldr	r3, [pc, #24]	; (8005b70 <pbuf_clone+0x58>)
 8005b58:	f240 5224 	movw	r2, #1316	; 0x524
 8005b5c:	4905      	ldr	r1, [pc, #20]	; (8005b74 <pbuf_clone+0x5c>)
 8005b5e:	4806      	ldr	r0, [pc, #24]	; (8005b78 <pbuf_clone+0x60>)
 8005b60:	f00b f882 	bl	8010c68 <iprintf>
  return q;
 8005b64:	68fb      	ldr	r3, [r7, #12]
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3710      	adds	r7, #16
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}
 8005b6e:	bf00      	nop
 8005b70:	08012158 	.word	0x08012158
 8005b74:	080125cc 	.word	0x080125cc
 8005b78:	080121b8 	.word	0x080121b8

08005b7c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	460b      	mov	r3, r1
 8005b86:	807b      	strh	r3, [r7, #2]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8005b8c:	f107 020a 	add.w	r2, r7, #10
 8005b90:	887b      	ldrh	r3, [r7, #2]
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f7ff feb0 	bl	80058fa <pbuf_skip>
 8005b9a:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <pbuf_put_at+0x3c>
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	895a      	ldrh	r2, [r3, #10]
 8005ba6:	897b      	ldrh	r3, [r7, #10]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d905      	bls.n	8005bb8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	897a      	ldrh	r2, [r7, #10]
 8005bb2:	4413      	add	r3, r2
 8005bb4:	787a      	ldrb	r2, [r7, #1]
 8005bb6:	701a      	strb	r2, [r3, #0]
  }
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8005bc4:	f00b f868 	bl	8010c98 <rand>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8005bd6:	b29a      	uxth	r2, r3
 8005bd8:	4b01      	ldr	r3, [pc, #4]	; (8005be0 <tcp_init+0x20>)
 8005bda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8005bdc:	bf00      	nop
 8005bde:	bd80      	pop	{r7, pc}
 8005be0:	2000000a 	.word	0x2000000a

08005be4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	7d1b      	ldrb	r3, [r3, #20]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d105      	bne.n	8005c00 <tcp_free+0x1c>
 8005bf4:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <tcp_free+0x2c>)
 8005bf6:	22d4      	movs	r2, #212	; 0xd4
 8005bf8:	4906      	ldr	r1, [pc, #24]	; (8005c14 <tcp_free+0x30>)
 8005bfa:	4807      	ldr	r0, [pc, #28]	; (8005c18 <tcp_free+0x34>)
 8005bfc:	f00b f834 	bl	8010c68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8005c00:	6879      	ldr	r1, [r7, #4]
 8005c02:	2001      	movs	r0, #1
 8005c04:	f7fe fd66 	bl	80046d4 <memp_free>
}
 8005c08:	bf00      	nop
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	08012658 	.word	0x08012658
 8005c14:	08012688 	.word	0x08012688
 8005c18:	0801269c 	.word	0x0801269c

08005c1c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	7d1b      	ldrb	r3, [r3, #20]
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d105      	bne.n	8005c38 <tcp_free_listen+0x1c>
 8005c2c:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <tcp_free_listen+0x2c>)
 8005c2e:	22df      	movs	r2, #223	; 0xdf
 8005c30:	4906      	ldr	r1, [pc, #24]	; (8005c4c <tcp_free_listen+0x30>)
 8005c32:	4807      	ldr	r0, [pc, #28]	; (8005c50 <tcp_free_listen+0x34>)
 8005c34:	f00b f818 	bl	8010c68 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8005c38:	6879      	ldr	r1, [r7, #4]
 8005c3a:	2002      	movs	r0, #2
 8005c3c:	f7fe fd4a 	bl	80046d4 <memp_free>
}
 8005c40:	bf00      	nop
 8005c42:	3708      	adds	r7, #8
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	08012658 	.word	0x08012658
 8005c4c:	080126c4 	.word	0x080126c4
 8005c50:	0801269c 	.word	0x0801269c

08005c54 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8005c58:	f000 fff6 	bl	8006c48 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8005c5c:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <tcp_tmr+0x28>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	3301      	adds	r3, #1
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	4b05      	ldr	r3, [pc, #20]	; (8005c7c <tcp_tmr+0x28>)
 8005c66:	701a      	strb	r2, [r3, #0]
 8005c68:	4b04      	ldr	r3, [pc, #16]	; (8005c7c <tcp_tmr+0x28>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d001      	beq.n	8005c78 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8005c74:	f000 fcaa 	bl	80065cc <tcp_slowtmr>
  }
}
 8005c78:	bf00      	nop
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	2000056d 	.word	0x2000056d

08005c80 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <tcp_remove_listener+0x1c>
 8005c90:	4b0d      	ldr	r3, [pc, #52]	; (8005cc8 <tcp_remove_listener+0x48>)
 8005c92:	22ff      	movs	r2, #255	; 0xff
 8005c94:	490d      	ldr	r1, [pc, #52]	; (8005ccc <tcp_remove_listener+0x4c>)
 8005c96:	480e      	ldr	r0, [pc, #56]	; (8005cd0 <tcp_remove_listener+0x50>)
 8005c98:	f00a ffe6 	bl	8010c68 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	60fb      	str	r3, [r7, #12]
 8005ca0:	e00a      	b.n	8005cb8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ca6:	683a      	ldr	r2, [r7, #0]
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d102      	bne.n	8005cb2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	60fb      	str	r3, [r7, #12]
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1f1      	bne.n	8005ca2 <tcp_remove_listener+0x22>
    }
  }
}
 8005cbe:	bf00      	nop
 8005cc0:	3710      	adds	r7, #16
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}
 8005cc6:	bf00      	nop
 8005cc8:	08012658 	.word	0x08012658
 8005ccc:	080126e0 	.word	0x080126e0
 8005cd0:	0801269c 	.word	0x0801269c

08005cd4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <tcp_listen_closed+0x1c>
 8005ce2:	4b14      	ldr	r3, [pc, #80]	; (8005d34 <tcp_listen_closed+0x60>)
 8005ce4:	f240 1211 	movw	r2, #273	; 0x111
 8005ce8:	4913      	ldr	r1, [pc, #76]	; (8005d38 <tcp_listen_closed+0x64>)
 8005cea:	4814      	ldr	r0, [pc, #80]	; (8005d3c <tcp_listen_closed+0x68>)
 8005cec:	f00a ffbc 	bl	8010c68 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	7d1b      	ldrb	r3, [r3, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d006      	beq.n	8005d06 <tcp_listen_closed+0x32>
 8005cf8:	4b0e      	ldr	r3, [pc, #56]	; (8005d34 <tcp_listen_closed+0x60>)
 8005cfa:	f44f 7289 	mov.w	r2, #274	; 0x112
 8005cfe:	4910      	ldr	r1, [pc, #64]	; (8005d40 <tcp_listen_closed+0x6c>)
 8005d00:	480e      	ldr	r0, [pc, #56]	; (8005d3c <tcp_listen_closed+0x68>)
 8005d02:	f00a ffb1 	bl	8010c68 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d06:	2301      	movs	r3, #1
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	e00b      	b.n	8005d24 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8005d0c:	4a0d      	ldr	r2, [pc, #52]	; (8005d44 <tcp_listen_closed+0x70>)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	6879      	ldr	r1, [r7, #4]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ffb1 	bl	8005c80 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	3301      	adds	r3, #1
 8005d22:	60fb      	str	r3, [r7, #12]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b03      	cmp	r3, #3
 8005d28:	d9f0      	bls.n	8005d0c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	08012658 	.word	0x08012658
 8005d38:	08012708 	.word	0x08012708
 8005d3c:	0801269c 	.word	0x0801269c
 8005d40:	08012714 	.word	0x08012714
 8005d44:	080149d4 	.word	0x080149d4

08005d48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8005d48:	b5b0      	push	{r4, r5, r7, lr}
 8005d4a:	b088      	sub	sp, #32
 8005d4c:	af04      	add	r7, sp, #16
 8005d4e:	6078      	str	r0, [r7, #4]
 8005d50:	460b      	mov	r3, r1
 8005d52:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <tcp_close_shutdown+0x20>
 8005d5a:	4b61      	ldr	r3, [pc, #388]	; (8005ee0 <tcp_close_shutdown+0x198>)
 8005d5c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8005d60:	4960      	ldr	r1, [pc, #384]	; (8005ee4 <tcp_close_shutdown+0x19c>)
 8005d62:	4861      	ldr	r0, [pc, #388]	; (8005ee8 <tcp_close_shutdown+0x1a0>)
 8005d64:	f00a ff80 	bl	8010c68 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8005d68:	78fb      	ldrb	r3, [r7, #3]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d066      	beq.n	8005e3c <tcp_close_shutdown+0xf4>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	7d1b      	ldrb	r3, [r3, #20]
 8005d72:	2b04      	cmp	r3, #4
 8005d74:	d003      	beq.n	8005d7e <tcp_close_shutdown+0x36>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	7d1b      	ldrb	r3, [r3, #20]
 8005d7a:	2b07      	cmp	r3, #7
 8005d7c:	d15e      	bne.n	8005e3c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d104      	bne.n	8005d90 <tcp_close_shutdown+0x48>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d8a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8005d8e:	d055      	beq.n	8005e3c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	8b5b      	ldrh	r3, [r3, #26]
 8005d94:	f003 0310 	and.w	r3, r3, #16
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <tcp_close_shutdown+0x62>
 8005d9c:	4b50      	ldr	r3, [pc, #320]	; (8005ee0 <tcp_close_shutdown+0x198>)
 8005d9e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8005da2:	4952      	ldr	r1, [pc, #328]	; (8005eec <tcp_close_shutdown+0x1a4>)
 8005da4:	4850      	ldr	r0, [pc, #320]	; (8005ee8 <tcp_close_shutdown+0x1a0>)
 8005da6:	f00a ff5f 	bl	8010c68 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005db2:	687d      	ldr	r5, [r7, #4]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3304      	adds	r3, #4
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	8ad2      	ldrh	r2, [r2, #22]
 8005dbc:	6879      	ldr	r1, [r7, #4]
 8005dbe:	8b09      	ldrh	r1, [r1, #24]
 8005dc0:	9102      	str	r1, [sp, #8]
 8005dc2:	9201      	str	r2, [sp, #4]
 8005dc4:	9300      	str	r3, [sp, #0]
 8005dc6:	462b      	mov	r3, r5
 8005dc8:	4622      	mov	r2, r4
 8005dca:	4601      	mov	r1, r0
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f005 fd15 	bl	800b7fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fae6 	bl	80073a4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8005dd8:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <tcp_close_shutdown+0x1a8>)
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d105      	bne.n	8005dee <tcp_close_shutdown+0xa6>
 8005de2:	4b43      	ldr	r3, [pc, #268]	; (8005ef0 <tcp_close_shutdown+0x1a8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	4a41      	ldr	r2, [pc, #260]	; (8005ef0 <tcp_close_shutdown+0x1a8>)
 8005dea:	6013      	str	r3, [r2, #0]
 8005dec:	e013      	b.n	8005e16 <tcp_close_shutdown+0xce>
 8005dee:	4b40      	ldr	r3, [pc, #256]	; (8005ef0 <tcp_close_shutdown+0x1a8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	60fb      	str	r3, [r7, #12]
 8005df4:	e00c      	b.n	8005e10 <tcp_close_shutdown+0xc8>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d104      	bne.n	8005e0a <tcp_close_shutdown+0xc2>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	60da      	str	r2, [r3, #12]
 8005e08:	e005      	b.n	8005e16 <tcp_close_shutdown+0xce>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	60fb      	str	r3, [r7, #12]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1ef      	bne.n	8005df6 <tcp_close_shutdown+0xae>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	60da      	str	r2, [r3, #12]
 8005e1c:	4b35      	ldr	r3, [pc, #212]	; (8005ef4 <tcp_close_shutdown+0x1ac>)
 8005e1e:	2201      	movs	r2, #1
 8005e20:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8005e22:	4b35      	ldr	r3, [pc, #212]	; (8005ef8 <tcp_close_shutdown+0x1b0>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d102      	bne.n	8005e32 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8005e2c:	f003 ff78 	bl	8009d20 <tcp_trigger_input_pcb_close>
 8005e30:	e002      	b.n	8005e38 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7ff fed6 	bl	8005be4 <tcp_free>
      }
      return ERR_OK;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	e04d      	b.n	8005ed8 <tcp_close_shutdown+0x190>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	7d1b      	ldrb	r3, [r3, #20]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d02d      	beq.n	8005ea0 <tcp_close_shutdown+0x158>
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d036      	beq.n	8005eb6 <tcp_close_shutdown+0x16e>
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d13f      	bne.n	8005ecc <tcp_close_shutdown+0x184>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	8adb      	ldrh	r3, [r3, #22]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d021      	beq.n	8005e98 <tcp_close_shutdown+0x150>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8005e54:	4b29      	ldr	r3, [pc, #164]	; (8005efc <tcp_close_shutdown+0x1b4>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d105      	bne.n	8005e6a <tcp_close_shutdown+0x122>
 8005e5e:	4b27      	ldr	r3, [pc, #156]	; (8005efc <tcp_close_shutdown+0x1b4>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	4a25      	ldr	r2, [pc, #148]	; (8005efc <tcp_close_shutdown+0x1b4>)
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	e013      	b.n	8005e92 <tcp_close_shutdown+0x14a>
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <tcp_close_shutdown+0x1b4>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	60bb      	str	r3, [r7, #8]
 8005e70:	e00c      	b.n	8005e8c <tcp_close_shutdown+0x144>
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d104      	bne.n	8005e86 <tcp_close_shutdown+0x13e>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68da      	ldr	r2, [r3, #12]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	60da      	str	r2, [r3, #12]
 8005e84:	e005      	b.n	8005e92 <tcp_close_shutdown+0x14a>
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1ef      	bne.n	8005e72 <tcp_close_shutdown+0x12a>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f7ff fea3 	bl	8005be4 <tcp_free>
      break;
 8005e9e:	e01a      	b.n	8005ed6 <tcp_close_shutdown+0x18e>
    case LISTEN:
      tcp_listen_closed(pcb);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff17 	bl	8005cd4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8005ea6:	6879      	ldr	r1, [r7, #4]
 8005ea8:	4815      	ldr	r0, [pc, #84]	; (8005f00 <tcp_close_shutdown+0x1b8>)
 8005eaa:	f001 facb 	bl	8007444 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f7ff feb4 	bl	8005c1c <tcp_free_listen>
      break;
 8005eb4:	e00f      	b.n	8005ed6 <tcp_close_shutdown+0x18e>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8005eb6:	6879      	ldr	r1, [r7, #4]
 8005eb8:	480d      	ldr	r0, [pc, #52]	; (8005ef0 <tcp_close_shutdown+0x1a8>)
 8005eba:	f001 fac3 	bl	8007444 <tcp_pcb_remove>
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <tcp_close_shutdown+0x1ac>)
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f7ff fe8d 	bl	8005be4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8005eca:	e004      	b.n	8005ed6 <tcp_close_shutdown+0x18e>
    default:
      return tcp_close_shutdown_fin(pcb);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f000 f819 	bl	8005f04 <tcp_close_shutdown_fin>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	e000      	b.n	8005ed8 <tcp_close_shutdown+0x190>
  }
  return ERR_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bdb0      	pop	{r4, r5, r7, pc}
 8005ee0:	08012658 	.word	0x08012658
 8005ee4:	0801272c 	.word	0x0801272c
 8005ee8:	0801269c 	.word	0x0801269c
 8005eec:	0801274c 	.word	0x0801274c
 8005ef0:	20006e64 	.word	0x20006e64
 8005ef4:	20006e60 	.word	0x20006e60
 8005ef8:	20006e78 	.word	0x20006e78
 8005efc:	20006e70 	.word	0x20006e70
 8005f00:	20006e6c 	.word	0x20006e6c

08005f04 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <tcp_close_shutdown_fin+0x1c>
 8005f12:	4b2c      	ldr	r3, [pc, #176]	; (8005fc4 <tcp_close_shutdown_fin+0xc0>)
 8005f14:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8005f18:	492b      	ldr	r1, [pc, #172]	; (8005fc8 <tcp_close_shutdown_fin+0xc4>)
 8005f1a:	482c      	ldr	r0, [pc, #176]	; (8005fcc <tcp_close_shutdown_fin+0xc8>)
 8005f1c:	f00a fea4 	bl	8010c68 <iprintf>

  switch (pcb->state) {
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	7d1b      	ldrb	r3, [r3, #20]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d010      	beq.n	8005f4a <tcp_close_shutdown_fin+0x46>
 8005f28:	2b07      	cmp	r3, #7
 8005f2a:	d01b      	beq.n	8005f64 <tcp_close_shutdown_fin+0x60>
 8005f2c:	2b03      	cmp	r3, #3
 8005f2e:	d126      	bne.n	8005f7e <tcp_close_shutdown_fin+0x7a>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f004 fd61 	bl	800a9f8 <tcp_send_fin>
 8005f36:	4603      	mov	r3, r0
 8005f38:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d11f      	bne.n	8005f82 <tcp_close_shutdown_fin+0x7e>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2205      	movs	r2, #5
 8005f46:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f48:	e01b      	b.n	8005f82 <tcp_close_shutdown_fin+0x7e>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f004 fd54 	bl	800a9f8 <tcp_send_fin>
 8005f50:	4603      	mov	r3, r0
 8005f52:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d114      	bne.n	8005f86 <tcp_close_shutdown_fin+0x82>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2205      	movs	r2, #5
 8005f60:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f62:	e010      	b.n	8005f86 <tcp_close_shutdown_fin+0x82>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f004 fd47 	bl	800a9f8 <tcp_send_fin>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8005f6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d109      	bne.n	8005f8a <tcp_close_shutdown_fin+0x86>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2209      	movs	r2, #9
 8005f7a:	751a      	strb	r2, [r3, #20]
      }
      break;
 8005f7c:	e005      	b.n	8005f8a <tcp_close_shutdown_fin+0x86>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	e01c      	b.n	8005fbc <tcp_close_shutdown_fin+0xb8>
      break;
 8005f82:	bf00      	nop
 8005f84:	e002      	b.n	8005f8c <tcp_close_shutdown_fin+0x88>
      break;
 8005f86:	bf00      	nop
 8005f88:	e000      	b.n	8005f8c <tcp_close_shutdown_fin+0x88>
      break;
 8005f8a:	bf00      	nop
  }

  if (err == ERR_OK) {
 8005f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d103      	bne.n	8005f9c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8005f94:	6878      	ldr	r0, [r7, #4]
 8005f96:	f004 fe6d 	bl	800ac74 <tcp_output>
 8005f9a:	e00d      	b.n	8005fb8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 8005f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d108      	bne.n	8005fb8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	8b5b      	ldrh	r3, [r3, #26]
 8005faa:	f043 0308 	orr.w	r3, r3, #8
 8005fae:	b29a      	uxth	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	e001      	b.n	8005fbc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8005fb8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3710      	adds	r7, #16
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	bd80      	pop	{r7, pc}
 8005fc4:	08012658 	.word	0x08012658
 8005fc8:	08012708 	.word	0x08012708
 8005fcc:	0801269c 	.word	0x0801269c

08005fd0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d109      	bne.n	8005ff2 <tcp_close+0x22>
 8005fde:	4b0f      	ldr	r3, [pc, #60]	; (800601c <tcp_close+0x4c>)
 8005fe0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8005fe4:	490e      	ldr	r1, [pc, #56]	; (8006020 <tcp_close+0x50>)
 8005fe6:	480f      	ldr	r0, [pc, #60]	; (8006024 <tcp_close+0x54>)
 8005fe8:	f00a fe3e 	bl	8010c68 <iprintf>
 8005fec:	f06f 030f 	mvn.w	r3, #15
 8005ff0:	e00f      	b.n	8006012 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	7d1b      	ldrb	r3, [r3, #20]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d006      	beq.n	8006008 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8b5b      	ldrh	r3, [r3, #26]
 8005ffe:	f043 0310 	orr.w	r3, r3, #16
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8006008:	2101      	movs	r1, #1
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7ff fe9c 	bl	8005d48 <tcp_close_shutdown>
 8006010:	4603      	mov	r3, r0
}
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	08012658 	.word	0x08012658
 8006020:	08012768 	.word	0x08012768
 8006024:	0801269c 	.word	0x0801269c

08006028 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b08e      	sub	sp, #56	; 0x38
 800602c:	af04      	add	r7, sp, #16
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d107      	bne.n	8006048 <tcp_abandon+0x20>
 8006038:	4b52      	ldr	r3, [pc, #328]	; (8006184 <tcp_abandon+0x15c>)
 800603a:	f240 223d 	movw	r2, #573	; 0x23d
 800603e:	4952      	ldr	r1, [pc, #328]	; (8006188 <tcp_abandon+0x160>)
 8006040:	4852      	ldr	r0, [pc, #328]	; (800618c <tcp_abandon+0x164>)
 8006042:	f00a fe11 	bl	8010c68 <iprintf>
 8006046:	e099      	b.n	800617c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	7d1b      	ldrb	r3, [r3, #20]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d106      	bne.n	800605e <tcp_abandon+0x36>
 8006050:	4b4c      	ldr	r3, [pc, #304]	; (8006184 <tcp_abandon+0x15c>)
 8006052:	f240 2241 	movw	r2, #577	; 0x241
 8006056:	494e      	ldr	r1, [pc, #312]	; (8006190 <tcp_abandon+0x168>)
 8006058:	484c      	ldr	r0, [pc, #304]	; (800618c <tcp_abandon+0x164>)
 800605a:	f00a fe05 	bl	8010c68 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	7d1b      	ldrb	r3, [r3, #20]
 8006062:	2b0a      	cmp	r3, #10
 8006064:	d107      	bne.n	8006076 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8006066:	6879      	ldr	r1, [r7, #4]
 8006068:	484a      	ldr	r0, [pc, #296]	; (8006194 <tcp_abandon+0x16c>)
 800606a:	f001 f9eb 	bl	8007444 <tcp_pcb_remove>
    tcp_free(pcb);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7ff fdb8 	bl	8005be4 <tcp_free>
 8006074:	e082      	b.n	800617c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8006076:	2300      	movs	r3, #0
 8006078:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800607a:	2300      	movs	r3, #0
 800607c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006082:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006090:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	7d1b      	ldrb	r3, [r3, #20]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d126      	bne.n	80060ee <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8adb      	ldrh	r3, [r3, #22]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d02e      	beq.n	8006106 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80060a8:	4b3b      	ldr	r3, [pc, #236]	; (8006198 <tcp_abandon+0x170>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	429a      	cmp	r2, r3
 80060b0:	d105      	bne.n	80060be <tcp_abandon+0x96>
 80060b2:	4b39      	ldr	r3, [pc, #228]	; (8006198 <tcp_abandon+0x170>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	4a37      	ldr	r2, [pc, #220]	; (8006198 <tcp_abandon+0x170>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	e013      	b.n	80060e6 <tcp_abandon+0xbe>
 80060be:	4b36      	ldr	r3, [pc, #216]	; (8006198 <tcp_abandon+0x170>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	61fb      	str	r3, [r7, #28]
 80060c4:	e00c      	b.n	80060e0 <tcp_abandon+0xb8>
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	687a      	ldr	r2, [r7, #4]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d104      	bne.n	80060da <tcp_abandon+0xb2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	60da      	str	r2, [r3, #12]
 80060d8:	e005      	b.n	80060e6 <tcp_abandon+0xbe>
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	61fb      	str	r3, [r7, #28]
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d1ef      	bne.n	80060c6 <tcp_abandon+0x9e>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	60da      	str	r2, [r3, #12]
 80060ec:	e00b      	b.n	8006106 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	8adb      	ldrh	r3, [r3, #22]
 80060f6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80060f8:	6879      	ldr	r1, [r7, #4]
 80060fa:	4828      	ldr	r0, [pc, #160]	; (800619c <tcp_abandon+0x174>)
 80060fc:	f001 f9a2 	bl	8007444 <tcp_pcb_remove>
 8006100:	4b27      	ldr	r3, [pc, #156]	; (80061a0 <tcp_abandon+0x178>)
 8006102:	2201      	movs	r2, #1
 8006104:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800610a:	2b00      	cmp	r3, #0
 800610c:	d004      	beq.n	8006118 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006112:	4618      	mov	r0, r3
 8006114:	f000 fe78 	bl	8006e08 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d004      	beq.n	800612a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006124:	4618      	mov	r0, r3
 8006126:	f000 fe6f 	bl	8006e08 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800612e:	2b00      	cmp	r3, #0
 8006130:	d004      	beq.n	800613c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006136:	4618      	mov	r0, r3
 8006138:	f000 fe66 	bl	8006e08 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00e      	beq.n	8006160 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8006142:	6879      	ldr	r1, [r7, #4]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3304      	adds	r3, #4
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	8b12      	ldrh	r2, [r2, #24]
 800614c:	9202      	str	r2, [sp, #8]
 800614e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006150:	9201      	str	r2, [sp, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	460b      	mov	r3, r1
 8006156:	697a      	ldr	r2, [r7, #20]
 8006158:	69b9      	ldr	r1, [r7, #24]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f005 fb4e 	bl	800b7fc <tcp_rst>
    }
    last_state = pcb->state;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	7d1b      	ldrb	r3, [r3, #20]
 8006164:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f7ff fd3c 	bl	8005be4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d004      	beq.n	800617c <tcp_abandon+0x154>
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f06f 010c 	mvn.w	r1, #12
 8006178:	68f8      	ldr	r0, [r7, #12]
 800617a:	4798      	blx	r3
  }
}
 800617c:	3728      	adds	r7, #40	; 0x28
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	08012658 	.word	0x08012658
 8006188:	0801279c 	.word	0x0801279c
 800618c:	0801269c 	.word	0x0801269c
 8006190:	080127b8 	.word	0x080127b8
 8006194:	20006e74 	.word	0x20006e74
 8006198:	20006e70 	.word	0x20006e70
 800619c:	20006e64 	.word	0x20006e64
 80061a0:	20006e60 	.word	0x20006e60

080061a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80061ac:	2101      	movs	r1, #1
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f7ff ff3a 	bl	8006028 <tcp_abandon>
}
 80061b4:	bf00      	nop
 80061b6:	3708      	adds	r7, #8
 80061b8:	46bd      	mov	sp, r7
 80061ba:	bd80      	pop	{r7, pc}

080061bc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b084      	sub	sp, #16
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d106      	bne.n	80061d8 <tcp_update_rcv_ann_wnd+0x1c>
 80061ca:	4b25      	ldr	r3, [pc, #148]	; (8006260 <tcp_update_rcv_ann_wnd+0xa4>)
 80061cc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80061d0:	4924      	ldr	r1, [pc, #144]	; (8006264 <tcp_update_rcv_ann_wnd+0xa8>)
 80061d2:	4825      	ldr	r0, [pc, #148]	; (8006268 <tcp_update_rcv_ann_wnd+0xac>)
 80061d4:	f00a fd48 	bl	8010c68 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80061e0:	4413      	add	r3, r2
 80061e2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80061ec:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 80061f0:	bf28      	it	cs
 80061f2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 80061f6:	b292      	uxth	r2, r2
 80061f8:	4413      	add	r3, r2
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db08      	blt.n	8006214 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	e020      	b.n	8006256 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	2b00      	cmp	r3, #0
 8006220:	dd03      	ble.n	800622a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006228:	e014      	b.n	8006254 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800623c:	d306      	bcc.n	800624c <tcp_update_rcv_ann_wnd+0x90>
 800623e:	4b08      	ldr	r3, [pc, #32]	; (8006260 <tcp_update_rcv_ann_wnd+0xa4>)
 8006240:	f240 32b6 	movw	r2, #950	; 0x3b6
 8006244:	4909      	ldr	r1, [pc, #36]	; (800626c <tcp_update_rcv_ann_wnd+0xb0>)
 8006246:	4808      	ldr	r0, [pc, #32]	; (8006268 <tcp_update_rcv_ann_wnd+0xac>)
 8006248:	f00a fd0e 	bl	8010c68 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	b29a      	uxth	r2, r3
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8006254:	2300      	movs	r3, #0
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	08012658 	.word	0x08012658
 8006264:	080128b4 	.word	0x080128b4
 8006268:	0801269c 	.word	0x0801269c
 800626c:	080128d8 	.word	0x080128d8

08006270 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	460b      	mov	r3, r1
 800627a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d107      	bne.n	8006292 <tcp_recved+0x22>
 8006282:	4b1f      	ldr	r3, [pc, #124]	; (8006300 <tcp_recved+0x90>)
 8006284:	f240 32cf 	movw	r2, #975	; 0x3cf
 8006288:	491e      	ldr	r1, [pc, #120]	; (8006304 <tcp_recved+0x94>)
 800628a:	481f      	ldr	r0, [pc, #124]	; (8006308 <tcp_recved+0x98>)
 800628c:	f00a fcec 	bl	8010c68 <iprintf>
 8006290:	e032      	b.n	80062f8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7d1b      	ldrb	r3, [r3, #20]
 8006296:	2b01      	cmp	r3, #1
 8006298:	d106      	bne.n	80062a8 <tcp_recved+0x38>
 800629a:	4b19      	ldr	r3, [pc, #100]	; (8006300 <tcp_recved+0x90>)
 800629c:	f240 32d3 	movw	r2, #979	; 0x3d3
 80062a0:	491a      	ldr	r1, [pc, #104]	; (800630c <tcp_recved+0x9c>)
 80062a2:	4819      	ldr	r0, [pc, #100]	; (8006308 <tcp_recved+0x98>)
 80062a4:	f00a fce0 	bl	8010c68 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80062ac:	887b      	ldrh	r3, [r7, #2]
 80062ae:	4413      	add	r3, r2
 80062b0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80062b2:	89fb      	ldrh	r3, [r7, #14]
 80062b4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80062b8:	d804      	bhi.n	80062c4 <tcp_recved+0x54>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062be:	89fa      	ldrh	r2, [r7, #14]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d204      	bcs.n	80062ce <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80062ca:	851a      	strh	r2, [r3, #40]	; 0x28
 80062cc:	e002      	b.n	80062d4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	89fa      	ldrh	r2, [r7, #14]
 80062d2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f7ff ff71 	bl	80061bc <tcp_update_rcv_ann_wnd>
 80062da:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80062e2:	d309      	bcc.n	80062f8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	8b5b      	ldrh	r3, [r3, #26]
 80062e8:	f043 0302 	orr.w	r3, r3, #2
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f004 fcbe 	bl	800ac74 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}
 80062fe:	bf00      	nop
 8006300:	08012658 	.word	0x08012658
 8006304:	080128f4 	.word	0x080128f4
 8006308:	0801269c 	.word	0x0801269c
 800630c:	0801290c 	.word	0x0801290c

08006310 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800631a:	4b1e      	ldr	r3, [pc, #120]	; (8006394 <tcp_new_port+0x84>)
 800631c:	881b      	ldrh	r3, [r3, #0]
 800631e:	3301      	adds	r3, #1
 8006320:	b29a      	uxth	r2, r3
 8006322:	4b1c      	ldr	r3, [pc, #112]	; (8006394 <tcp_new_port+0x84>)
 8006324:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8006326:	4b1b      	ldr	r3, [pc, #108]	; (8006394 <tcp_new_port+0x84>)
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800632e:	4293      	cmp	r3, r2
 8006330:	d103      	bne.n	800633a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8006332:	4b18      	ldr	r3, [pc, #96]	; (8006394 <tcp_new_port+0x84>)
 8006334:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8006338:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800633a:	2300      	movs	r3, #0
 800633c:	71fb      	strb	r3, [r7, #7]
 800633e:	e01e      	b.n	800637e <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	4a15      	ldr	r2, [pc, #84]	; (8006398 <tcp_new_port+0x88>)
 8006344:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	603b      	str	r3, [r7, #0]
 800634c:	e011      	b.n	8006372 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	8ada      	ldrh	r2, [r3, #22]
 8006352:	4b10      	ldr	r3, [pc, #64]	; (8006394 <tcp_new_port+0x84>)
 8006354:	881b      	ldrh	r3, [r3, #0]
 8006356:	429a      	cmp	r2, r3
 8006358:	d108      	bne.n	800636c <tcp_new_port+0x5c>
        n++;
 800635a:	88bb      	ldrh	r3, [r7, #4]
 800635c:	3301      	adds	r3, #1
 800635e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8006360:	88bb      	ldrh	r3, [r7, #4]
 8006362:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006366:	d3d8      	bcc.n	800631a <tcp_new_port+0xa>
          return 0;
 8006368:	2300      	movs	r3, #0
 800636a:	e00d      	b.n	8006388 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1ea      	bne.n	800634e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8006378:	79fb      	ldrb	r3, [r7, #7]
 800637a:	3301      	adds	r3, #1
 800637c:	71fb      	strb	r3, [r7, #7]
 800637e:	79fb      	ldrb	r3, [r7, #7]
 8006380:	2b03      	cmp	r3, #3
 8006382:	d9dd      	bls.n	8006340 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <tcp_new_port+0x84>)
 8006386:	881b      	ldrh	r3, [r3, #0]
}
 8006388:	4618      	mov	r0, r3
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	2000000a 	.word	0x2000000a
 8006398:	080149d4 	.word	0x080149d4

0800639c <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b08a      	sub	sp, #40	; 0x28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	603b      	str	r3, [r7, #0]
 80063a8:	4613      	mov	r3, r2
 80063aa:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d109      	bne.n	80063ca <tcp_connect+0x2e>
 80063b6:	4b7d      	ldr	r3, [pc, #500]	; (80065ac <tcp_connect+0x210>)
 80063b8:	f240 4235 	movw	r2, #1077	; 0x435
 80063bc:	497c      	ldr	r1, [pc, #496]	; (80065b0 <tcp_connect+0x214>)
 80063be:	487d      	ldr	r0, [pc, #500]	; (80065b4 <tcp_connect+0x218>)
 80063c0:	f00a fc52 	bl	8010c68 <iprintf>
 80063c4:	f06f 030f 	mvn.w	r3, #15
 80063c8:	e0ec      	b.n	80065a4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d109      	bne.n	80063e4 <tcp_connect+0x48>
 80063d0:	4b76      	ldr	r3, [pc, #472]	; (80065ac <tcp_connect+0x210>)
 80063d2:	f240 4236 	movw	r2, #1078	; 0x436
 80063d6:	4978      	ldr	r1, [pc, #480]	; (80065b8 <tcp_connect+0x21c>)
 80063d8:	4876      	ldr	r0, [pc, #472]	; (80065b4 <tcp_connect+0x218>)
 80063da:	f00a fc45 	bl	8010c68 <iprintf>
 80063de:	f06f 030f 	mvn.w	r3, #15
 80063e2:	e0df      	b.n	80065a4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	7d1b      	ldrb	r3, [r3, #20]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d009      	beq.n	8006400 <tcp_connect+0x64>
 80063ec:	4b6f      	ldr	r3, [pc, #444]	; (80065ac <tcp_connect+0x210>)
 80063ee:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80063f2:	4972      	ldr	r1, [pc, #456]	; (80065bc <tcp_connect+0x220>)
 80063f4:	486f      	ldr	r0, [pc, #444]	; (80065b4 <tcp_connect+0x218>)
 80063f6:	f00a fc37 	bl	8010c68 <iprintf>
 80063fa:	f06f 0309 	mvn.w	r3, #9
 80063fe:	e0d1      	b.n	80065a4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d002      	beq.n	800640c <tcp_connect+0x70>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	e000      	b.n	800640e <tcp_connect+0x72>
 800640c:	2300      	movs	r3, #0
 800640e:	68fa      	ldr	r2, [r7, #12]
 8006410:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	88fa      	ldrh	r2, [r7, #6]
 8006416:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	7a1b      	ldrb	r3, [r3, #8]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	7a1b      	ldrb	r3, [r3, #8]
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fc77 	bl	8004d18 <netif_get_by_index>
 800642a:	6278      	str	r0, [r7, #36]	; 0x24
 800642c:	e005      	b.n	800643a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	3304      	adds	r3, #4
 8006432:	4618      	mov	r0, r3
 8006434:	f009 f9d4 	bl	800f7e0 <ip4_route>
 8006438:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800643a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	d102      	bne.n	8006446 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8006440:	f06f 0303 	mvn.w	r3, #3
 8006444:	e0ae      	b.n	80065a4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <tcp_connect+0xb8>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d111      	bne.n	8006478 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d002      	beq.n	8006460 <tcp_connect+0xc4>
 800645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645c:	3304      	adds	r3, #4
 800645e:	e000      	b.n	8006462 <tcp_connect+0xc6>
 8006460:	2300      	movs	r3, #0
 8006462:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d102      	bne.n	8006470 <tcp_connect+0xd4>
      return ERR_RTE;
 800646a:	f06f 0303 	mvn.w	r3, #3
 800646e:	e099      	b.n	80065a4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8006470:	69fb      	ldr	r3, [r7, #28]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	8adb      	ldrh	r3, [r3, #22]
 800647c:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	8adb      	ldrh	r3, [r3, #22]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d10c      	bne.n	80064a0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8006486:	f7ff ff43 	bl	8006310 <tcp_new_port>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	8adb      	ldrh	r3, [r3, #22]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d102      	bne.n	80064a0 <tcp_connect+0x104>
      return ERR_BUF;
 800649a:	f06f 0301 	mvn.w	r3, #1
 800649e:	e081      	b.n	80065a4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f001 f863 	bl	800756c <tcp_next_iss>
 80064a6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	1e5a      	subs	r2, r3, #1
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1e5a      	subs	r2, r3, #1
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	1e5a      	subs	r2, r3, #1
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80064ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80064f4:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	3304      	adds	r3, #4
 80064fe:	461a      	mov	r2, r3
 8006500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006502:	f001 f859 	bl	80075b8 <tcp_eff_send_mss_netif>
 8006506:	4603      	mov	r3, r0
 8006508:	461a      	mov	r2, r3
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800651e:	2102      	movs	r1, #2
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f004 fab9 	bl	800aa98 <tcp_enqueue_flags>
 8006526:	4603      	mov	r3, r0
 8006528:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800652a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d136      	bne.n	80065a0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2202      	movs	r2, #2
 8006536:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8006538:	8b7b      	ldrh	r3, [r7, #26]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d021      	beq.n	8006582 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800653e:	4b20      	ldr	r3, [pc, #128]	; (80065c0 <tcp_connect+0x224>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	429a      	cmp	r2, r3
 8006546:	d105      	bne.n	8006554 <tcp_connect+0x1b8>
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <tcp_connect+0x224>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	4a1c      	ldr	r2, [pc, #112]	; (80065c0 <tcp_connect+0x224>)
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e013      	b.n	800657c <tcp_connect+0x1e0>
 8006554:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <tcp_connect+0x224>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	623b      	str	r3, [r7, #32]
 800655a:	e00c      	b.n	8006576 <tcp_connect+0x1da>
 800655c:	6a3b      	ldr	r3, [r7, #32]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	429a      	cmp	r2, r3
 8006564:	d104      	bne.n	8006570 <tcp_connect+0x1d4>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68da      	ldr	r2, [r3, #12]
 800656a:	6a3b      	ldr	r3, [r7, #32]
 800656c:	60da      	str	r2, [r3, #12]
 800656e:	e005      	b.n	800657c <tcp_connect+0x1e0>
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d1ef      	bne.n	800655c <tcp_connect+0x1c0>
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 8006582:	4b10      	ldr	r3, [pc, #64]	; (80065c4 <tcp_connect+0x228>)
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	60da      	str	r2, [r3, #12]
 800658a:	4a0e      	ldr	r2, [pc, #56]	; (80065c4 <tcp_connect+0x228>)
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6013      	str	r3, [r2, #0]
 8006590:	f005 faf6 	bl	800bb80 <tcp_timer_needed>
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <tcp_connect+0x22c>)
 8006596:	2201      	movs	r2, #1
 8006598:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800659a:	68f8      	ldr	r0, [r7, #12]
 800659c:	f004 fb6a 	bl	800ac74 <tcp_output>
  }
  return ret;
 80065a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80065a4:	4618      	mov	r0, r3
 80065a6:	3728      	adds	r7, #40	; 0x28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	bd80      	pop	{r7, pc}
 80065ac:	08012658 	.word	0x08012658
 80065b0:	08012934 	.word	0x08012934
 80065b4:	0801269c 	.word	0x0801269c
 80065b8:	08012950 	.word	0x08012950
 80065bc:	0801296c 	.word	0x0801296c
 80065c0:	20006e70 	.word	0x20006e70
 80065c4:	20006e64 	.word	0x20006e64
 80065c8:	20006e60 	.word	0x20006e60

080065cc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80065cc:	b5b0      	push	{r4, r5, r7, lr}
 80065ce:	b090      	sub	sp, #64	; 0x40
 80065d0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80065d2:	2300      	movs	r3, #0
 80065d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80065d8:	4b94      	ldr	r3, [pc, #592]	; (800682c <tcp_slowtmr+0x260>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	3301      	adds	r3, #1
 80065de:	4a93      	ldr	r2, [pc, #588]	; (800682c <tcp_slowtmr+0x260>)
 80065e0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80065e2:	4b93      	ldr	r3, [pc, #588]	; (8006830 <tcp_slowtmr+0x264>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	3301      	adds	r3, #1
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	4b91      	ldr	r3, [pc, #580]	; (8006830 <tcp_slowtmr+0x264>)
 80065ec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80065ee:	2300      	movs	r3, #0
 80065f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80065f2:	4b90      	ldr	r3, [pc, #576]	; (8006834 <tcp_slowtmr+0x268>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80065f8:	e29f      	b.n	8006b3a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80065fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065fc:	7d1b      	ldrb	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <tcp_slowtmr+0x44>
 8006602:	4b8d      	ldr	r3, [pc, #564]	; (8006838 <tcp_slowtmr+0x26c>)
 8006604:	f240 42be 	movw	r2, #1214	; 0x4be
 8006608:	498c      	ldr	r1, [pc, #560]	; (800683c <tcp_slowtmr+0x270>)
 800660a:	488d      	ldr	r0, [pc, #564]	; (8006840 <tcp_slowtmr+0x274>)
 800660c:	f00a fb2c 	bl	8010c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8006610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006612:	7d1b      	ldrb	r3, [r3, #20]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d106      	bne.n	8006626 <tcp_slowtmr+0x5a>
 8006618:	4b87      	ldr	r3, [pc, #540]	; (8006838 <tcp_slowtmr+0x26c>)
 800661a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800661e:	4989      	ldr	r1, [pc, #548]	; (8006844 <tcp_slowtmr+0x278>)
 8006620:	4887      	ldr	r0, [pc, #540]	; (8006840 <tcp_slowtmr+0x274>)
 8006622:	f00a fb21 	bl	8010c68 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8006626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006628:	7d1b      	ldrb	r3, [r3, #20]
 800662a:	2b0a      	cmp	r3, #10
 800662c:	d106      	bne.n	800663c <tcp_slowtmr+0x70>
 800662e:	4b82      	ldr	r3, [pc, #520]	; (8006838 <tcp_slowtmr+0x26c>)
 8006630:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8006634:	4984      	ldr	r1, [pc, #528]	; (8006848 <tcp_slowtmr+0x27c>)
 8006636:	4882      	ldr	r0, [pc, #520]	; (8006840 <tcp_slowtmr+0x274>)
 8006638:	f00a fb16 	bl	8010c68 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	7f9a      	ldrb	r2, [r3, #30]
 8006640:	4b7b      	ldr	r3, [pc, #492]	; (8006830 <tcp_slowtmr+0x264>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	429a      	cmp	r2, r3
 8006646:	d105      	bne.n	8006654 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8006652:	e272      	b.n	8006b3a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8006654:	4b76      	ldr	r3, [pc, #472]	; (8006830 <tcp_slowtmr+0x264>)
 8006656:	781a      	ldrb	r2, [r3, #0]
 8006658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800665c:	2300      	movs	r3, #0
 800665e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8006668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800666a:	7d1b      	ldrb	r3, [r3, #20]
 800666c:	2b02      	cmp	r3, #2
 800666e:	d10a      	bne.n	8006686 <tcp_slowtmr+0xba>
 8006670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006672:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006676:	2b05      	cmp	r3, #5
 8006678:	d905      	bls.n	8006686 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800667a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800667e:	3301      	adds	r3, #1
 8006680:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006684:	e11e      	b.n	80068c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8006686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800668c:	2b0b      	cmp	r3, #11
 800668e:	d905      	bls.n	800669c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8006690:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006694:	3301      	adds	r3, #1
 8006696:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800669a:	e113      	b.n	80068c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800669c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800669e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d075      	beq.n	8006792 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80066a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d006      	beq.n	80066bc <tcp_slowtmr+0xf0>
 80066ae:	4b62      	ldr	r3, [pc, #392]	; (8006838 <tcp_slowtmr+0x26c>)
 80066b0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80066b4:	4965      	ldr	r1, [pc, #404]	; (800684c <tcp_slowtmr+0x280>)
 80066b6:	4862      	ldr	r0, [pc, #392]	; (8006840 <tcp_slowtmr+0x274>)
 80066b8:	f00a fad6 	bl	8010c68 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80066bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <tcp_slowtmr+0x106>
 80066c4:	4b5c      	ldr	r3, [pc, #368]	; (8006838 <tcp_slowtmr+0x26c>)
 80066c6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80066ca:	4961      	ldr	r1, [pc, #388]	; (8006850 <tcp_slowtmr+0x284>)
 80066cc:	485c      	ldr	r0, [pc, #368]	; (8006840 <tcp_slowtmr+0x274>)
 80066ce:	f00a facb 	bl	8010c68 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80066d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80066d8:	2b0b      	cmp	r3, #11
 80066da:	d905      	bls.n	80066e8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80066dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066e0:	3301      	adds	r3, #1
 80066e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80066e6:	e0ed      	b.n	80068c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80066ee:	3b01      	subs	r3, #1
 80066f0:	4a58      	ldr	r2, [pc, #352]	; (8006854 <tcp_slowtmr+0x288>)
 80066f2:	5cd3      	ldrb	r3, [r2, r3]
 80066f4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80066f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80066fc:	7c7a      	ldrb	r2, [r7, #17]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d907      	bls.n	8006712 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8006702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006704:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006708:	3301      	adds	r3, #1
 800670a:	b2da      	uxtb	r2, r3
 800670c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800670e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006718:	7c7a      	ldrb	r2, [r7, #17]
 800671a:	429a      	cmp	r2, r3
 800671c:	f200 80d2 	bhi.w	80068c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8006720:	2301      	movs	r3, #1
 8006722:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800672a:	2b00      	cmp	r3, #0
 800672c:	d108      	bne.n	8006740 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800672e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006730:	f005 f958 	bl	800b9e4 <tcp_zero_window_probe>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d014      	beq.n	8006764 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800673a:	2300      	movs	r3, #0
 800673c:	623b      	str	r3, [r7, #32]
 800673e:	e011      	b.n	8006764 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8006740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006742:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006746:	4619      	mov	r1, r3
 8006748:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800674a:	f004 f80d 	bl	800a768 <tcp_split_unsent_seg>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d107      	bne.n	8006764 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8006754:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006756:	f004 fa8d 	bl	800ac74 <tcp_output>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d101      	bne.n	8006764 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8006760:	2300      	movs	r3, #0
 8006762:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80ac 	beq.w	80068c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800676c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676e:	2200      	movs	r2, #0
 8006770:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8006774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006776:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800677a:	2b06      	cmp	r3, #6
 800677c:	f200 80a2 	bhi.w	80068c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8006780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006782:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8006786:	3301      	adds	r3, #1
 8006788:	b2da      	uxtb	r2, r3
 800678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800678c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8006790:	e098      	b.n	80068c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8006798:	2b00      	cmp	r3, #0
 800679a:	db0f      	blt.n	80067bc <tcp_slowtmr+0x1f0>
 800679c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80067a2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d008      	beq.n	80067bc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80067aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	3301      	adds	r3, #1
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	b21a      	sxth	r2, r3
 80067b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80067bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067be:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80067c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80067c8:	429a      	cmp	r2, r3
 80067ca:	db7b      	blt.n	80068c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80067cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067ce:	f004 fd49 	bl	800b264 <tcp_rexmit_rto_prepare>
 80067d2:	4603      	mov	r3, r0
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <tcp_slowtmr+0x21c>
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d171      	bne.n	80068c4 <tcp_slowtmr+0x2f8>
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d06d      	beq.n	80068c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80067e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ea:	7d1b      	ldrb	r3, [r3, #20]
 80067ec:	2b02      	cmp	r3, #2
 80067ee:	d03a      	beq.n	8006866 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80067f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067f6:	2b0c      	cmp	r3, #12
 80067f8:	bf28      	it	cs
 80067fa:	230c      	movcs	r3, #12
 80067fc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80067fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006800:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8006804:	10db      	asrs	r3, r3, #3
 8006806:	b21b      	sxth	r3, r3
 8006808:	461a      	mov	r2, r3
 800680a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8006810:	4413      	add	r3, r2
 8006812:	7efa      	ldrb	r2, [r7, #27]
 8006814:	4910      	ldr	r1, [pc, #64]	; (8006858 <tcp_slowtmr+0x28c>)
 8006816:	5c8a      	ldrb	r2, [r1, r2]
 8006818:	4093      	lsls	r3, r2
 800681a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006822:	4293      	cmp	r3, r2
 8006824:	dc1a      	bgt.n	800685c <tcp_slowtmr+0x290>
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	b21a      	sxth	r2, r3
 800682a:	e019      	b.n	8006860 <tcp_slowtmr+0x294>
 800682c:	20006e68 	.word	0x20006e68
 8006830:	2000056e 	.word	0x2000056e
 8006834:	20006e64 	.word	0x20006e64
 8006838:	08012658 	.word	0x08012658
 800683c:	0801299c 	.word	0x0801299c
 8006840:	0801269c 	.word	0x0801269c
 8006844:	080129c8 	.word	0x080129c8
 8006848:	080129f4 	.word	0x080129f4
 800684c:	08012a24 	.word	0x08012a24
 8006850:	08012a58 	.word	0x08012a58
 8006854:	080149cc 	.word	0x080149cc
 8006858:	080149bc 	.word	0x080149bc
 800685c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	2200      	movs	r2, #0
 800686a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800686c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800686e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8006878:	4293      	cmp	r3, r2
 800687a:	bf28      	it	cs
 800687c:	4613      	movcs	r3, r2
 800687e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8006880:	8a7b      	ldrh	r3, [r7, #18]
 8006882:	085b      	lsrs	r3, r3, #1
 8006884:	b29a      	uxth	r2, r3
 8006886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006888:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800688c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8006892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006894:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8006896:	005b      	lsls	r3, r3, #1
 8006898:	b29b      	uxth	r3, r3
 800689a:	429a      	cmp	r2, r3
 800689c:	d206      	bcs.n	80068ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80068a2:	005b      	lsls	r3, r3, #1
 80068a4:	b29a      	uxth	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80068ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80068b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80068be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80068c0:	f004 fd40 	bl	800b344 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80068c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068c6:	7d1b      	ldrb	r3, [r3, #20]
 80068c8:	2b06      	cmp	r3, #6
 80068ca:	d111      	bne.n	80068f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80068cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068ce:	8b5b      	ldrh	r3, [r3, #26]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00b      	beq.n	80068f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80068d8:	4b9d      	ldr	r3, [pc, #628]	; (8006b50 <tcp_slowtmr+0x584>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068de:	6a1b      	ldr	r3, [r3, #32]
 80068e0:	1ad3      	subs	r3, r2, r3
 80068e2:	2b28      	cmp	r3, #40	; 0x28
 80068e4:	d904      	bls.n	80068f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80068e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80068ea:	3301      	adds	r3, #1
 80068ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80068f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068f2:	7a5b      	ldrb	r3, [r3, #9]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d04c      	beq.n	8006996 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80068fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8006900:	2b04      	cmp	r3, #4
 8006902:	d003      	beq.n	800690c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8006908:	2b07      	cmp	r3, #7
 800690a:	d144      	bne.n	8006996 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800690c:	4b90      	ldr	r3, [pc, #576]	; (8006b50 <tcp_slowtmr+0x584>)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006912:	6a1b      	ldr	r3, [r3, #32]
 8006914:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8006916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800691c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8006920:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8006924:	498b      	ldr	r1, [pc, #556]	; (8006b54 <tcp_slowtmr+0x588>)
 8006926:	fba1 1303 	umull	r1, r3, r1, r3
 800692a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800692c:	429a      	cmp	r2, r3
 800692e:	d90a      	bls.n	8006946 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8006930:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006934:	3301      	adds	r3, #1
 8006936:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800693a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800693e:	3301      	adds	r3, #1
 8006940:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006944:	e027      	b.n	8006996 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8006946:	4b82      	ldr	r3, [pc, #520]	; (8006b50 <tcp_slowtmr+0x584>)
 8006948:	681a      	ldr	r2, [r3, #0]
 800694a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800694c:	6a1b      	ldr	r3, [r3, #32]
 800694e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800695c:	4618      	mov	r0, r3
 800695e:	4b7e      	ldr	r3, [pc, #504]	; (8006b58 <tcp_slowtmr+0x58c>)
 8006960:	fb03 f300 	mul.w	r3, r3, r0
 8006964:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8006966:	497b      	ldr	r1, [pc, #492]	; (8006b54 <tcp_slowtmr+0x588>)
 8006968:	fba1 1303 	umull	r1, r3, r1, r3
 800696c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800696e:	429a      	cmp	r2, r3
 8006970:	d911      	bls.n	8006996 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8006972:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006974:	f004 fff6 	bl	800b964 <tcp_keepalive>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800697e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8006986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006988:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800698c:	3301      	adds	r3, #1
 800698e:	b2da      	uxtb	r2, r3
 8006990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006992:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800699a:	2b00      	cmp	r3, #0
 800699c:	d011      	beq.n	80069c2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800699e:	4b6c      	ldr	r3, [pc, #432]	; (8006b50 <tcp_slowtmr+0x584>)
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	1ad2      	subs	r2, r2, r3
 80069a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069aa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80069ae:	4619      	mov	r1, r3
 80069b0:	460b      	mov	r3, r1
 80069b2:	005b      	lsls	r3, r3, #1
 80069b4:	440b      	add	r3, r1
 80069b6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d302      	bcc.n	80069c2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80069bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80069be:	f000 fea5 	bl	800770c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80069c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069c4:	7d1b      	ldrb	r3, [r3, #20]
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d10b      	bne.n	80069e2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80069ca:	4b61      	ldr	r3, [pc, #388]	; (8006b50 <tcp_slowtmr+0x584>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b28      	cmp	r3, #40	; 0x28
 80069d6:	d904      	bls.n	80069e2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80069d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069dc:	3301      	adds	r3, #1
 80069de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80069e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069e4:	7d1b      	ldrb	r3, [r3, #20]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d10b      	bne.n	8006a02 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80069ea:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <tcp_slowtmr+0x584>)
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	2bf0      	cmp	r3, #240	; 0xf0
 80069f6:	d904      	bls.n	8006a02 <tcp_slowtmr+0x436>
        ++pcb_remove;
 80069f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069fc:	3301      	adds	r3, #1
 80069fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d060      	beq.n	8006acc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a10:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8006a12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a14:	f000 fcc6 	bl	80073a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d010      	beq.n	8006a40 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d106      	bne.n	8006a36 <tcp_slowtmr+0x46a>
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <tcp_slowtmr+0x594>)
 8006a2a:	f240 526d 	movw	r2, #1389	; 0x56d
 8006a2e:	494d      	ldr	r1, [pc, #308]	; (8006b64 <tcp_slowtmr+0x598>)
 8006a30:	484d      	ldr	r0, [pc, #308]	; (8006b68 <tcp_slowtmr+0x59c>)
 8006a32:	f00a f919 	bl	8010c68 <iprintf>
        prev->next = pcb->next;
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	68da      	ldr	r2, [r3, #12]
 8006a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	e00f      	b.n	8006a60 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8006a40:	4b46      	ldr	r3, [pc, #280]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d006      	beq.n	8006a58 <tcp_slowtmr+0x48c>
 8006a4a:	4b45      	ldr	r3, [pc, #276]	; (8006b60 <tcp_slowtmr+0x594>)
 8006a4c:	f240 5271 	movw	r2, #1393	; 0x571
 8006a50:	4946      	ldr	r1, [pc, #280]	; (8006b6c <tcp_slowtmr+0x5a0>)
 8006a52:	4845      	ldr	r0, [pc, #276]	; (8006b68 <tcp_slowtmr+0x59c>)
 8006a54:	f00a f908 	bl	8010c68 <iprintf>
        tcp_active_pcbs = pcb->next;
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	4a3f      	ldr	r2, [pc, #252]	; (8006b5c <tcp_slowtmr+0x590>)
 8006a5e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8006a60:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d013      	beq.n	8006a90 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8006a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8006a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a6e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8006a70:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8006a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a74:	3304      	adds	r3, #4
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	8ad2      	ldrh	r2, [r2, #22]
 8006a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a7c:	8b09      	ldrh	r1, [r1, #24]
 8006a7e:	9102      	str	r1, [sp, #8]
 8006a80:	9201      	str	r2, [sp, #4]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	462b      	mov	r3, r5
 8006a86:	4622      	mov	r2, r4
 8006a88:	4601      	mov	r1, r0
 8006a8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006a8c:	f004 feb6 	bl	800b7fc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	691b      	ldr	r3, [r3, #16]
 8006a94:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8006a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a98:	7d1b      	ldrb	r3, [r3, #20]
 8006a9a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8006a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a9e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8006aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006aa6:	6838      	ldr	r0, [r7, #0]
 8006aa8:	f7ff f89c 	bl	8005be4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8006aac:	4b30      	ldr	r3, [pc, #192]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006aae:	2200      	movs	r2, #0
 8006ab0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <tcp_slowtmr+0x4f6>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f06f 010c 	mvn.w	r1, #12
 8006abe:	68b8      	ldr	r0, [r7, #8]
 8006ac0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8006ac2:	4b2b      	ldr	r3, [pc, #172]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d037      	beq.n	8006b3a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8006aca:	e590      	b.n	80065ee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	7f1b      	ldrb	r3, [r3, #28]
 8006ada:	3301      	adds	r3, #1
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8006ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae4:	7f1a      	ldrb	r2, [r3, #28]
 8006ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae8:	7f5b      	ldrb	r3, [r3, #29]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d325      	bcc.n	8006b3a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8006aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af0:	2200      	movs	r2, #0
 8006af2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8006af4:	4b1e      	ldr	r3, [pc, #120]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8006afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006afc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d00b      	beq.n	8006b1c <tcp_slowtmr+0x550>
 8006b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b0c:	6912      	ldr	r2, [r2, #16]
 8006b0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b10:	4610      	mov	r0, r2
 8006b12:	4798      	blx	r3
 8006b14:	4603      	mov	r3, r0
 8006b16:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8006b1a:	e002      	b.n	8006b22 <tcp_slowtmr+0x556>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8006b22:	4b13      	ldr	r3, [pc, #76]	; (8006b70 <tcp_slowtmr+0x5a4>)
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d000      	beq.n	8006b2c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8006b2a:	e560      	b.n	80065ee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8006b2c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8006b34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b36:	f004 f89d 	bl	800ac74 <tcp_output>
  while (pcb != NULL) {
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f47f ad5c 	bne.w	80065fa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8006b42:	2300      	movs	r3, #0
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <tcp_slowtmr+0x5a8>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006b4c:	e067      	b.n	8006c1e <tcp_slowtmr+0x652>
 8006b4e:	bf00      	nop
 8006b50:	20006e68 	.word	0x20006e68
 8006b54:	10624dd3 	.word	0x10624dd3
 8006b58:	000124f8 	.word	0x000124f8
 8006b5c:	20006e64 	.word	0x20006e64
 8006b60:	08012658 	.word	0x08012658
 8006b64:	08012a90 	.word	0x08012a90
 8006b68:	0801269c 	.word	0x0801269c
 8006b6c:	08012abc 	.word	0x08012abc
 8006b70:	20006e60 	.word	0x20006e60
 8006b74:	20006e74 	.word	0x20006e74
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8006b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7a:	7d1b      	ldrb	r3, [r3, #20]
 8006b7c:	2b0a      	cmp	r3, #10
 8006b7e:	d006      	beq.n	8006b8e <tcp_slowtmr+0x5c2>
 8006b80:	4b2a      	ldr	r3, [pc, #168]	; (8006c2c <tcp_slowtmr+0x660>)
 8006b82:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8006b86:	492a      	ldr	r1, [pc, #168]	; (8006c30 <tcp_slowtmr+0x664>)
 8006b88:	482a      	ldr	r0, [pc, #168]	; (8006c34 <tcp_slowtmr+0x668>)
 8006b8a:	f00a f86d 	bl	8010c68 <iprintf>
    pcb_remove = 0;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8006b94:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <tcp_slowtmr+0x66c>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2bf0      	cmp	r3, #240	; 0xf0
 8006ba0:	d904      	bls.n	8006bac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8006ba2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8006bac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d02f      	beq.n	8006c14 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8006bb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bb6:	f000 fbf5 	bl	80073a4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8006bc0:	4b1e      	ldr	r3, [pc, #120]	; (8006c3c <tcp_slowtmr+0x670>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d106      	bne.n	8006bd8 <tcp_slowtmr+0x60c>
 8006bca:	4b18      	ldr	r3, [pc, #96]	; (8006c2c <tcp_slowtmr+0x660>)
 8006bcc:	f240 52af 	movw	r2, #1455	; 0x5af
 8006bd0:	491b      	ldr	r1, [pc, #108]	; (8006c40 <tcp_slowtmr+0x674>)
 8006bd2:	4818      	ldr	r0, [pc, #96]	; (8006c34 <tcp_slowtmr+0x668>)
 8006bd4:	f00a f848 	bl	8010c68 <iprintf>
        prev->next = pcb->next;
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	68da      	ldr	r2, [r3, #12]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	60da      	str	r2, [r3, #12]
 8006be0:	e00f      	b.n	8006c02 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8006be2:	4b16      	ldr	r3, [pc, #88]	; (8006c3c <tcp_slowtmr+0x670>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d006      	beq.n	8006bfa <tcp_slowtmr+0x62e>
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <tcp_slowtmr+0x660>)
 8006bee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8006bf2:	4914      	ldr	r1, [pc, #80]	; (8006c44 <tcp_slowtmr+0x678>)
 8006bf4:	480f      	ldr	r0, [pc, #60]	; (8006c34 <tcp_slowtmr+0x668>)
 8006bf6:	f00a f837 	bl	8010c68 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8006bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bfc:	68db      	ldr	r3, [r3, #12]
 8006bfe:	4a0f      	ldr	r2, [pc, #60]	; (8006c3c <tcp_slowtmr+0x670>)
 8006c00:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8006c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8006c0c:	69f8      	ldr	r0, [r7, #28]
 8006c0e:	f7fe ffe9 	bl	8005be4 <tcp_free>
 8006c12:	e004      	b.n	8006c1e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8006c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8006c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1a9      	bne.n	8006b78 <tcp_slowtmr+0x5ac>
    }
  }
}
 8006c24:	bf00      	nop
 8006c26:	3730      	adds	r7, #48	; 0x30
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2c:	08012658 	.word	0x08012658
 8006c30:	08012ae8 	.word	0x08012ae8
 8006c34:	0801269c 	.word	0x0801269c
 8006c38:	20006e68 	.word	0x20006e68
 8006c3c:	20006e74 	.word	0x20006e74
 8006c40:	08012b18 	.word	0x08012b18
 8006c44:	08012b40 	.word	0x08012b40

08006c48 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8006c4e:	4b2d      	ldr	r3, [pc, #180]	; (8006d04 <tcp_fasttmr+0xbc>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	3301      	adds	r3, #1
 8006c54:	b2da      	uxtb	r2, r3
 8006c56:	4b2b      	ldr	r3, [pc, #172]	; (8006d04 <tcp_fasttmr+0xbc>)
 8006c58:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8006c5a:	4b2b      	ldr	r3, [pc, #172]	; (8006d08 <tcp_fasttmr+0xc0>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8006c60:	e048      	b.n	8006cf4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	7f9a      	ldrb	r2, [r3, #30]
 8006c66:	4b27      	ldr	r3, [pc, #156]	; (8006d04 <tcp_fasttmr+0xbc>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d03f      	beq.n	8006cee <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8006c6e:	4b25      	ldr	r3, [pc, #148]	; (8006d04 <tcp_fasttmr+0xbc>)
 8006c70:	781a      	ldrb	r2, [r3, #0]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	8b5b      	ldrh	r3, [r3, #26]
 8006c7a:	f003 0301 	and.w	r3, r3, #1
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d010      	beq.n	8006ca4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	8b5b      	ldrh	r3, [r3, #26]
 8006c86:	f043 0302 	orr.w	r3, r3, #2
 8006c8a:	b29a      	uxth	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f003 ffef 	bl	800ac74 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	8b5b      	ldrh	r3, [r3, #26]
 8006c9a:	f023 0303 	bic.w	r3, r3, #3
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	8b5b      	ldrh	r3, [r3, #26]
 8006ca8:	f003 0308 	and.w	r3, r3, #8
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d009      	beq.n	8006cc4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	8b5b      	ldrh	r3, [r3, #26]
 8006cb4:	f023 0308 	bic.w	r3, r3, #8
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff f920 	bl	8005f04 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d00a      	beq.n	8006ce8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8006cd2:	4b0e      	ldr	r3, [pc, #56]	; (8006d0c <tcp_fasttmr+0xc4>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f819 	bl	8006d10 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8006cde:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <tcp_fasttmr+0xc4>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d000      	beq.n	8006ce8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8006ce6:	e7b8      	b.n	8006c5a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	607b      	str	r3, [r7, #4]
 8006cec:	e002      	b.n	8006cf4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1b3      	bne.n	8006c62 <tcp_fasttmr+0x1a>
    }
  }
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}
 8006d02:	bf00      	nop
 8006d04:	2000056e 	.word	0x2000056e
 8006d08:	20006e64 	.word	0x20006e64
 8006d0c:	20006e60 	.word	0x20006e60

08006d10 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8006d10:	b590      	push	{r4, r7, lr}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d109      	bne.n	8006d32 <tcp_process_refused_data+0x22>
 8006d1e:	4b37      	ldr	r3, [pc, #220]	; (8006dfc <tcp_process_refused_data+0xec>)
 8006d20:	f240 6209 	movw	r2, #1545	; 0x609
 8006d24:	4936      	ldr	r1, [pc, #216]	; (8006e00 <tcp_process_refused_data+0xf0>)
 8006d26:	4837      	ldr	r0, [pc, #220]	; (8006e04 <tcp_process_refused_data+0xf4>)
 8006d28:	f009 ff9e 	bl	8010c68 <iprintf>
 8006d2c:	f06f 030f 	mvn.w	r3, #15
 8006d30:	e060      	b.n	8006df4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d36:	7b5b      	ldrb	r3, [r3, #13]
 8006d38:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d3e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <tcp_process_refused_data+0x58>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6918      	ldr	r0, [r3, #16]
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	68ba      	ldr	r2, [r7, #8]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	47a0      	blx	r4
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	e007      	b.n	8006d78 <tcp_process_refused_data+0x68>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	68ba      	ldr	r2, [r7, #8]
 8006d6c:	6879      	ldr	r1, [r7, #4]
 8006d6e:	2000      	movs	r0, #0
 8006d70:	f000 f8c0 	bl	8006ef4 <tcp_recv_null>
 8006d74:	4603      	mov	r3, r0
 8006d76:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8006d78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d12a      	bne.n	8006dd6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8006d80:	7bbb      	ldrb	r3, [r7, #14]
 8006d82:	f003 0320 	and.w	r3, r3, #32
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d033      	beq.n	8006df2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8006d92:	d005      	beq.n	8006da0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d98:	3301      	adds	r3, #1
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d00b      	beq.n	8006dc2 <tcp_process_refused_data+0xb2>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6918      	ldr	r0, [r3, #16]
 8006db4:	2300      	movs	r3, #0
 8006db6:	2200      	movs	r2, #0
 8006db8:	6879      	ldr	r1, [r7, #4]
 8006dba:	47a0      	blx	r4
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	73fb      	strb	r3, [r7, #15]
 8006dc0:	e001      	b.n	8006dc6 <tcp_process_refused_data+0xb6>
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8006dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dca:	f113 0f0d 	cmn.w	r3, #13
 8006dce:	d110      	bne.n	8006df2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8006dd0:	f06f 030c 	mvn.w	r3, #12
 8006dd4:	e00e      	b.n	8006df4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8006dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dda:	f113 0f0d 	cmn.w	r3, #13
 8006dde:	d102      	bne.n	8006de6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8006de0:	f06f 030c 	mvn.w	r3, #12
 8006de4:	e006      	b.n	8006df4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	68ba      	ldr	r2, [r7, #8]
 8006dea:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8006dec:	f06f 0304 	mvn.w	r3, #4
 8006df0:	e000      	b.n	8006df4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3714      	adds	r7, #20
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd90      	pop	{r4, r7, pc}
 8006dfc:	08012658 	.word	0x08012658
 8006e00:	08012b68 	.word	0x08012b68
 8006e04:	0801269c 	.word	0x0801269c

08006e08 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8006e10:	e007      	b.n	8006e22 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 f809 	bl	8006e30 <tcp_seg_free>
    seg = next;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1f4      	bne.n	8006e12 <tcp_segs_free+0xa>
  }
}
 8006e28:	bf00      	nop
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b082      	sub	sp, #8
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	685b      	ldr	r3, [r3, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d004      	beq.n	8006e50 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fac0 	bl	80053d0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	2003      	movs	r0, #3
 8006e54:	f7fd fc3e 	bl	80046d4 <memp_free>
  }
}
 8006e58:	bf00      	nop
 8006e5a:	3708      	adds	r7, #8
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	460b      	mov	r3, r1
 8006e6a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_setprio: invalid pcb", pcb != NULL, return);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d107      	bne.n	8006e82 <tcp_setprio+0x22>
 8006e72:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <tcp_setprio+0x30>)
 8006e74:	f44f 62ce 	mov.w	r2, #1648	; 0x670
 8006e78:	4906      	ldr	r1, [pc, #24]	; (8006e94 <tcp_setprio+0x34>)
 8006e7a:	4807      	ldr	r0, [pc, #28]	; (8006e98 <tcp_setprio+0x38>)
 8006e7c:	f009 fef4 	bl	8010c68 <iprintf>
 8006e80:	e002      	b.n	8006e88 <tcp_setprio+0x28>

  pcb->prio = prio;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	78fa      	ldrb	r2, [r7, #3]
 8006e86:	755a      	strb	r2, [r3, #21]
}
 8006e88:	3708      	adds	r7, #8
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	08012658 	.word	0x08012658
 8006e94:	08012b90 	.word	0x08012b90
 8006e98:	0801269c 	.word	0x0801269c

08006e9c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d106      	bne.n	8006eb8 <tcp_seg_copy+0x1c>
 8006eaa:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <tcp_seg_copy+0x4c>)
 8006eac:	f240 6282 	movw	r2, #1666	; 0x682
 8006eb0:	490e      	ldr	r1, [pc, #56]	; (8006eec <tcp_seg_copy+0x50>)
 8006eb2:	480f      	ldr	r0, [pc, #60]	; (8006ef0 <tcp_seg_copy+0x54>)
 8006eb4:	f009 fed8 	bl	8010c68 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8006eb8:	2003      	movs	r0, #3
 8006eba:	f7fd fbbf 	bl	800463c <memp_malloc>
 8006ebe:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d101      	bne.n	8006eca <tcp_seg_copy+0x2e>
    return NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	e00a      	b.n	8006ee0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8006eca:	2210      	movs	r2, #16
 8006ecc:	6879      	ldr	r1, [r7, #4]
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f009 feb7 	bl	8010c42 <memcpy>
  pbuf_ref(cseg->p);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f7fe fb19 	bl	8005510 <pbuf_ref>
  return cseg;
 8006ede:	68fb      	ldr	r3, [r7, #12]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3710      	adds	r7, #16
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	08012658 	.word	0x08012658
 8006eec:	08012bac 	.word	0x08012bac
 8006ef0:	0801269c 	.word	0x0801269c

08006ef4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
 8006f00:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8006f02:	68bb      	ldr	r3, [r7, #8]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <tcp_recv_null+0x28>
 8006f08:	4b12      	ldr	r3, [pc, #72]	; (8006f54 <tcp_recv_null+0x60>)
 8006f0a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8006f0e:	4912      	ldr	r1, [pc, #72]	; (8006f58 <tcp_recv_null+0x64>)
 8006f10:	4812      	ldr	r0, [pc, #72]	; (8006f5c <tcp_recv_null+0x68>)
 8006f12:	f009 fea9 	bl	8010c68 <iprintf>
 8006f16:	f06f 030f 	mvn.w	r3, #15
 8006f1a:	e016      	b.n	8006f4a <tcp_recv_null+0x56>

  if (p != NULL) {
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	891b      	ldrh	r3, [r3, #8]
 8006f26:	4619      	mov	r1, r3
 8006f28:	68b8      	ldr	r0, [r7, #8]
 8006f2a:	f7ff f9a1 	bl	8006270 <tcp_recved>
    pbuf_free(p);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7fe fa4e 	bl	80053d0 <pbuf_free>
 8006f34:	e008      	b.n	8006f48 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8006f36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8006f3e:	68b8      	ldr	r0, [r7, #8]
 8006f40:	f7ff f846 	bl	8005fd0 <tcp_close>
 8006f44:	4603      	mov	r3, r0
 8006f46:	e000      	b.n	8006f4a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8006f48:	2300      	movs	r3, #0
}
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	08012658 	.word	0x08012658
 8006f58:	08012bc8 	.word	0x08012bc8
 8006f5c:	0801269c 	.word	0x0801269c

08006f60 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8006f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	db01      	blt.n	8006f76 <tcp_kill_prio+0x16>
 8006f72:	79fb      	ldrb	r3, [r7, #7]
 8006f74:	e000      	b.n	8006f78 <tcp_kill_prio+0x18>
 8006f76:	237f      	movs	r3, #127	; 0x7f
 8006f78:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8006f7a:	7afb      	ldrb	r3, [r7, #11]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d034      	beq.n	8006fea <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8006f80:	7afb      	ldrb	r3, [r7, #11]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006f8e:	4b19      	ldr	r3, [pc, #100]	; (8006ff4 <tcp_kill_prio+0x94>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e01f      	b.n	8006fd6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	7d5b      	ldrb	r3, [r3, #21]
 8006f9a:	7afa      	ldrb	r2, [r7, #11]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d80c      	bhi.n	8006fba <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8006fa4:	7afa      	ldrb	r2, [r7, #11]
 8006fa6:	429a      	cmp	r2, r3
 8006fa8:	d112      	bne.n	8006fd0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8006faa:	4b13      	ldr	r3, [pc, #76]	; (8006ff8 <tcp_kill_prio+0x98>)
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	6a1b      	ldr	r3, [r3, #32]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	68fa      	ldr	r2, [r7, #12]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d80a      	bhi.n	8006fd0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8006fba:	4b0f      	ldr	r3, [pc, #60]	; (8006ff8 <tcp_kill_prio+0x98>)
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8006fca:	697b      	ldr	r3, [r7, #20]
 8006fcc:	7d5b      	ldrb	r3, [r3, #21]
 8006fce:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	617b      	str	r3, [r7, #20]
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d1dc      	bne.n	8006f96 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d004      	beq.n	8006fec <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8006fe2:	6938      	ldr	r0, [r7, #16]
 8006fe4:	f7ff f8de 	bl	80061a4 <tcp_abort>
 8006fe8:	e000      	b.n	8006fec <tcp_kill_prio+0x8c>
    return;
 8006fea:	bf00      	nop
  }
}
 8006fec:	3718      	adds	r7, #24
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
 8006ff2:	bf00      	nop
 8006ff4:	20006e64 	.word	0x20006e64
 8006ff8:	20006e68 	.word	0x20006e68

08006ffc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b086      	sub	sp, #24
 8007000:	af00      	add	r7, sp, #0
 8007002:	4603      	mov	r3, r0
 8007004:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8007006:	79fb      	ldrb	r3, [r7, #7]
 8007008:	2b08      	cmp	r3, #8
 800700a:	d009      	beq.n	8007020 <tcp_kill_state+0x24>
 800700c:	79fb      	ldrb	r3, [r7, #7]
 800700e:	2b09      	cmp	r3, #9
 8007010:	d006      	beq.n	8007020 <tcp_kill_state+0x24>
 8007012:	4b1a      	ldr	r3, [pc, #104]	; (800707c <tcp_kill_state+0x80>)
 8007014:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8007018:	4919      	ldr	r1, [pc, #100]	; (8007080 <tcp_kill_state+0x84>)
 800701a:	481a      	ldr	r0, [pc, #104]	; (8007084 <tcp_kill_state+0x88>)
 800701c:	f009 fe24 	bl	8010c68 <iprintf>

  inactivity = 0;
 8007020:	2300      	movs	r3, #0
 8007022:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8007024:	2300      	movs	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007028:	4b17      	ldr	r3, [pc, #92]	; (8007088 <tcp_kill_state+0x8c>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	617b      	str	r3, [r7, #20]
 800702e:	e017      	b.n	8007060 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	7d1b      	ldrb	r3, [r3, #20]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	429a      	cmp	r2, r3
 8007038:	d10f      	bne.n	800705a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800703a:	4b14      	ldr	r3, [pc, #80]	; (800708c <tcp_kill_state+0x90>)
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	1ad3      	subs	r3, r2, r3
 8007044:	68fa      	ldr	r2, [r7, #12]
 8007046:	429a      	cmp	r2, r3
 8007048:	d807      	bhi.n	800705a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800704a:	4b10      	ldr	r3, [pc, #64]	; (800708c <tcp_kill_state+0x90>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	6a1b      	ldr	r3, [r3, #32]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	617b      	str	r3, [r7, #20]
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d1e4      	bne.n	8007030 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d003      	beq.n	8007074 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800706c:	2100      	movs	r1, #0
 800706e:	6938      	ldr	r0, [r7, #16]
 8007070:	f7fe ffda 	bl	8006028 <tcp_abandon>
  }
}
 8007074:	bf00      	nop
 8007076:	3718      	adds	r7, #24
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}
 800707c:	08012658 	.word	0x08012658
 8007080:	08012be4 	.word	0x08012be4
 8007084:	0801269c 	.word	0x0801269c
 8007088:	20006e64 	.word	0x20006e64
 800708c:	20006e68 	.word	0x20006e68

08007090 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800709a:	2300      	movs	r3, #0
 800709c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800709e:	4b12      	ldr	r3, [pc, #72]	; (80070e8 <tcp_kill_timewait+0x58>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	60fb      	str	r3, [r7, #12]
 80070a4:	e012      	b.n	80070cc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80070a6:	4b11      	ldr	r3, [pc, #68]	; (80070ec <tcp_kill_timewait+0x5c>)
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6a1b      	ldr	r3, [r3, #32]
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	429a      	cmp	r2, r3
 80070b4:	d807      	bhi.n	80070c6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80070b6:	4b0d      	ldr	r3, [pc, #52]	; (80070ec <tcp_kill_timewait+0x5c>)
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	6a1b      	ldr	r3, [r3, #32]
 80070be:	1ad3      	subs	r3, r2, r3
 80070c0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d1e9      	bne.n	80070a6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d002      	beq.n	80070de <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80070d8:	68b8      	ldr	r0, [r7, #8]
 80070da:	f7ff f863 	bl	80061a4 <tcp_abort>
  }
}
 80070de:	bf00      	nop
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20006e74 	.word	0x20006e74
 80070ec:	20006e68 	.word	0x20006e68

080070f0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80070f6:	4b10      	ldr	r3, [pc, #64]	; (8007138 <tcp_handle_closepend+0x48>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80070fc:	e014      	b.n	8007128 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68db      	ldr	r3, [r3, #12]
 8007102:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	8b5b      	ldrh	r3, [r3, #26]
 8007108:	f003 0308 	and.w	r3, r3, #8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d009      	beq.n	8007124 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	8b5b      	ldrh	r3, [r3, #26]
 8007114:	f023 0308 	bic.w	r3, r3, #8
 8007118:	b29a      	uxth	r2, r3
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f7fe fef0 	bl	8005f04 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e7      	bne.n	80070fe <tcp_handle_closepend+0xe>
  }
}
 800712e:	bf00      	nop
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	20006e64 	.word	0x20006e64

0800713c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b084      	sub	sp, #16
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007146:	2001      	movs	r0, #1
 8007148:	f7fd fa78 	bl	800463c <memp_malloc>
 800714c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d126      	bne.n	80071a2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8007154:	f7ff ffcc 	bl	80070f0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8007158:	f7ff ff9a 	bl	8007090 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800715c:	2001      	movs	r0, #1
 800715e:	f7fd fa6d 	bl	800463c <memp_malloc>
 8007162:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d11b      	bne.n	80071a2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800716a:	2009      	movs	r0, #9
 800716c:	f7ff ff46 	bl	8006ffc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007170:	2001      	movs	r0, #1
 8007172:	f7fd fa63 	bl	800463c <memp_malloc>
 8007176:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d111      	bne.n	80071a2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800717e:	2008      	movs	r0, #8
 8007180:	f7ff ff3c 	bl	8006ffc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8007184:	2001      	movs	r0, #1
 8007186:	f7fd fa59 	bl	800463c <memp_malloc>
 800718a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d107      	bne.n	80071a2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	4618      	mov	r0, r3
 8007196:	f7ff fee3 	bl	8006f60 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800719a:	2001      	movs	r0, #1
 800719c:	f7fd fa4e 	bl	800463c <memp_malloc>
 80071a0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d03f      	beq.n	8007228 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80071a8:	229c      	movs	r2, #156	; 0x9c
 80071aa:	2100      	movs	r1, #0
 80071ac:	68f8      	ldr	r0, [r7, #12]
 80071ae:	f009 fd53 	bl	8010c58 <memset>
    pcb->prio = prio;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	79fa      	ldrb	r2, [r7, #7]
 80071b6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80071be:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80071c8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	22ff      	movs	r2, #255	; 0xff
 80071d6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f44f 7206 	mov.w	r2, #536	; 0x218
 80071de:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2206      	movs	r2, #6
 80071e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2206      	movs	r2, #6
 80071ec:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80071f4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80071fe:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <tcp_alloc+0xf8>)
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8007206:	4b0c      	ldr	r3, [pc, #48]	; (8007238 <tcp_alloc+0xfc>)
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007214:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	4a08      	ldr	r2, [pc, #32]	; (800723c <tcp_alloc+0x100>)
 800721c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a07      	ldr	r2, [pc, #28]	; (8007240 <tcp_alloc+0x104>)
 8007224:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8007228:	68fb      	ldr	r3, [r7, #12]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3710      	adds	r7, #16
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20006e68 	.word	0x20006e68
 8007238:	2000056e 	.word	0x2000056e
 800723c:	08006ef5 	.word	0x08006ef5
 8007240:	006ddd00 	.word	0x006ddd00

08007244 <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8007248:	2040      	movs	r0, #64	; 0x40
 800724a:	f7ff ff77 	bl	800713c <tcp_alloc>
 800724e:	4603      	mov	r3, r0
}
 8007250:	4618      	mov	r0, r3
 8007252:	bd80      	pop	{r7, pc}

08007254 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8007254:	b480      	push	{r7}
 8007256:	b083      	sub	sp, #12
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d002      	beq.n	800726a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	611a      	str	r2, [r3, #16]
  }
}
 800726a:	bf00      	nop
 800726c:	370c      	adds	r7, #12
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
	...

08007278 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8007278:	b580      	push	{r7, lr}
 800727a:	b082      	sub	sp, #8
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d00e      	beq.n	80072a6 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	7d1b      	ldrb	r3, [r3, #20]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d106      	bne.n	800729e <tcp_recv+0x26>
 8007290:	4b07      	ldr	r3, [pc, #28]	; (80072b0 <tcp_recv+0x38>)
 8007292:	f240 72df 	movw	r2, #2015	; 0x7df
 8007296:	4907      	ldr	r1, [pc, #28]	; (80072b4 <tcp_recv+0x3c>)
 8007298:	4807      	ldr	r0, [pc, #28]	; (80072b8 <tcp_recv+0x40>)
 800729a:	f009 fce5 	bl	8010c68 <iprintf>
    pcb->recv = recv;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80072a6:	bf00      	nop
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	08012658 	.word	0x08012658
 80072b4:	08012bf4 	.word	0x08012bf4
 80072b8:	0801269c 	.word	0x0801269c

080072bc <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00e      	beq.n	80072ea <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	7d1b      	ldrb	r3, [r3, #20]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d106      	bne.n	80072e2 <tcp_sent+0x26>
 80072d4:	4b07      	ldr	r3, [pc, #28]	; (80072f4 <tcp_sent+0x38>)
 80072d6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80072da:	4907      	ldr	r1, [pc, #28]	; (80072f8 <tcp_sent+0x3c>)
 80072dc:	4807      	ldr	r0, [pc, #28]	; (80072fc <tcp_sent+0x40>)
 80072de:	f009 fcc3 	bl	8010c68 <iprintf>
    pcb->sent = sent;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80072ea:	bf00      	nop
 80072ec:	3708      	adds	r7, #8
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	08012658 	.word	0x08012658
 80072f8:	08012c1c 	.word	0x08012c1c
 80072fc:	0801269c 	.word	0x0801269c

08007300 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d00e      	beq.n	800732e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7d1b      	ldrb	r3, [r3, #20]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d106      	bne.n	8007326 <tcp_err+0x26>
 8007318:	4b07      	ldr	r3, [pc, #28]	; (8007338 <tcp_err+0x38>)
 800731a:	f640 020d 	movw	r2, #2061	; 0x80d
 800731e:	4907      	ldr	r1, [pc, #28]	; (800733c <tcp_err+0x3c>)
 8007320:	4807      	ldr	r0, [pc, #28]	; (8007340 <tcp_err+0x40>)
 8007322:	f009 fca1 	bl	8010c68 <iprintf>
    pcb->errf = err;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	683a      	ldr	r2, [r7, #0]
 800732a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800732e:	bf00      	nop
 8007330:	3708      	adds	r7, #8
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
 8007336:	bf00      	nop
 8007338:	08012658 	.word	0x08012658
 800733c:	08012c44 	.word	0x08012c44
 8007340:	0801269c 	.word	0x0801269c

08007344 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	4613      	mov	r3, r2
 8007350:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <tcp_poll+0x24>
 8007358:	4b0e      	ldr	r3, [pc, #56]	; (8007394 <tcp_poll+0x50>)
 800735a:	f640 023d 	movw	r2, #2109	; 0x83d
 800735e:	490e      	ldr	r1, [pc, #56]	; (8007398 <tcp_poll+0x54>)
 8007360:	480e      	ldr	r0, [pc, #56]	; (800739c <tcp_poll+0x58>)
 8007362:	f009 fc81 	bl	8010c68 <iprintf>
 8007366:	e011      	b.n	800738c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	7d1b      	ldrb	r3, [r3, #20]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d106      	bne.n	800737e <tcp_poll+0x3a>
 8007370:	4b08      	ldr	r3, [pc, #32]	; (8007394 <tcp_poll+0x50>)
 8007372:	f640 023e 	movw	r2, #2110	; 0x83e
 8007376:	490a      	ldr	r1, [pc, #40]	; (80073a0 <tcp_poll+0x5c>)
 8007378:	4808      	ldr	r0, [pc, #32]	; (800739c <tcp_poll+0x58>)
 800737a:	f009 fc75 	bl	8010c68 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	68ba      	ldr	r2, [r7, #8]
 8007382:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	79fa      	ldrb	r2, [r7, #7]
 800738a:	775a      	strb	r2, [r3, #29]
}
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
 8007392:	bf00      	nop
 8007394:	08012658 	.word	0x08012658
 8007398:	08012c6c 	.word	0x08012c6c
 800739c:	0801269c 	.word	0x0801269c
 80073a0:	08012c84 	.word	0x08012c84

080073a4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b082      	sub	sp, #8
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d107      	bne.n	80073c2 <tcp_pcb_purge+0x1e>
 80073b2:	4b21      	ldr	r3, [pc, #132]	; (8007438 <tcp_pcb_purge+0x94>)
 80073b4:	f640 0251 	movw	r2, #2129	; 0x851
 80073b8:	4920      	ldr	r1, [pc, #128]	; (800743c <tcp_pcb_purge+0x98>)
 80073ba:	4821      	ldr	r0, [pc, #132]	; (8007440 <tcp_pcb_purge+0x9c>)
 80073bc:	f009 fc54 	bl	8010c68 <iprintf>
 80073c0:	e037      	b.n	8007432 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	7d1b      	ldrb	r3, [r3, #20]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d033      	beq.n	8007432 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80073ce:	2b0a      	cmp	r3, #10
 80073d0:	d02f      	beq.n	8007432 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d02b      	beq.n	8007432 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d007      	beq.n	80073f2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073e6:	4618      	mov	r0, r3
 80073e8:	f7fd fff2 	bl	80053d0 <pbuf_free>
      pcb->refused_data = NULL;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d002      	beq.n	8007400 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f986 	bl	800770c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007406:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800740c:	4618      	mov	r0, r3
 800740e:	f7ff fcfb 	bl	8006e08 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff fcf6 	bl	8006e08 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2200      	movs	r2, #0
 8007420:	66da      	str	r2, [r3, #108]	; 0x6c
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	08012658 	.word	0x08012658
 800743c:	08012ca4 	.word	0x08012ca4
 8007440:	0801269c 	.word	0x0801269c

08007444 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d106      	bne.n	8007462 <tcp_pcb_remove+0x1e>
 8007454:	4b3e      	ldr	r3, [pc, #248]	; (8007550 <tcp_pcb_remove+0x10c>)
 8007456:	f640 0283 	movw	r2, #2179	; 0x883
 800745a:	493e      	ldr	r1, [pc, #248]	; (8007554 <tcp_pcb_remove+0x110>)
 800745c:	483e      	ldr	r0, [pc, #248]	; (8007558 <tcp_pcb_remove+0x114>)
 800745e:	f009 fc03 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <tcp_pcb_remove+0x32>
 8007468:	4b39      	ldr	r3, [pc, #228]	; (8007550 <tcp_pcb_remove+0x10c>)
 800746a:	f640 0284 	movw	r2, #2180	; 0x884
 800746e:	493b      	ldr	r1, [pc, #236]	; (800755c <tcp_pcb_remove+0x118>)
 8007470:	4839      	ldr	r0, [pc, #228]	; (8007558 <tcp_pcb_remove+0x114>)
 8007472:	f009 fbf9 	bl	8010c68 <iprintf>

  TCP_RMV(pcblist, pcb);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	429a      	cmp	r2, r3
 800747e:	d105      	bne.n	800748c <tcp_pcb_remove+0x48>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	601a      	str	r2, [r3, #0]
 800748a:	e013      	b.n	80074b4 <tcp_pcb_remove+0x70>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	60fb      	str	r3, [r7, #12]
 8007492:	e00c      	b.n	80074ae <tcp_pcb_remove+0x6a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	68db      	ldr	r3, [r3, #12]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	429a      	cmp	r2, r3
 800749c:	d104      	bne.n	80074a8 <tcp_pcb_remove+0x64>
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	68da      	ldr	r2, [r3, #12]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	e005      	b.n	80074b4 <tcp_pcb_remove+0x70>
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	60fb      	str	r3, [r7, #12]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1ef      	bne.n	8007494 <tcp_pcb_remove+0x50>
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2200      	movs	r2, #0
 80074b8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80074ba:	6838      	ldr	r0, [r7, #0]
 80074bc:	f7ff ff72 	bl	80073a4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	7d1b      	ldrb	r3, [r3, #20]
 80074c4:	2b0a      	cmp	r3, #10
 80074c6:	d013      	beq.n	80074f0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80074cc:	2b01      	cmp	r3, #1
 80074ce:	d00f      	beq.n	80074f0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	8b5b      	ldrh	r3, [r3, #26]
 80074d4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d009      	beq.n	80074f0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	8b5b      	ldrh	r3, [r3, #26]
 80074e0:	f043 0302 	orr.w	r3, r3, #2
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80074ea:	6838      	ldr	r0, [r7, #0]
 80074ec:	f003 fbc2 	bl	800ac74 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	7d1b      	ldrb	r3, [r3, #20]
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d020      	beq.n	800753a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d006      	beq.n	800750e <tcp_pcb_remove+0xca>
 8007500:	4b13      	ldr	r3, [pc, #76]	; (8007550 <tcp_pcb_remove+0x10c>)
 8007502:	f640 0293 	movw	r2, #2195	; 0x893
 8007506:	4916      	ldr	r1, [pc, #88]	; (8007560 <tcp_pcb_remove+0x11c>)
 8007508:	4813      	ldr	r0, [pc, #76]	; (8007558 <tcp_pcb_remove+0x114>)
 800750a:	f009 fbad 	bl	8010c68 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007512:	2b00      	cmp	r3, #0
 8007514:	d006      	beq.n	8007524 <tcp_pcb_remove+0xe0>
 8007516:	4b0e      	ldr	r3, [pc, #56]	; (8007550 <tcp_pcb_remove+0x10c>)
 8007518:	f640 0294 	movw	r2, #2196	; 0x894
 800751c:	4911      	ldr	r1, [pc, #68]	; (8007564 <tcp_pcb_remove+0x120>)
 800751e:	480e      	ldr	r0, [pc, #56]	; (8007558 <tcp_pcb_remove+0x114>)
 8007520:	f009 fba2 	bl	8010c68 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8007524:	683b      	ldr	r3, [r7, #0]
 8007526:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007528:	2b00      	cmp	r3, #0
 800752a:	d006      	beq.n	800753a <tcp_pcb_remove+0xf6>
 800752c:	4b08      	ldr	r3, [pc, #32]	; (8007550 <tcp_pcb_remove+0x10c>)
 800752e:	f640 0296 	movw	r2, #2198	; 0x896
 8007532:	490d      	ldr	r1, [pc, #52]	; (8007568 <tcp_pcb_remove+0x124>)
 8007534:	4808      	ldr	r0, [pc, #32]	; (8007558 <tcp_pcb_remove+0x114>)
 8007536:	f009 fb97 	bl	8010c68 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	2200      	movs	r2, #0
 800753e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	2200      	movs	r2, #0
 8007544:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8007546:	bf00      	nop
 8007548:	3710      	adds	r7, #16
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
 800754e:	bf00      	nop
 8007550:	08012658 	.word	0x08012658
 8007554:	08012cc0 	.word	0x08012cc0
 8007558:	0801269c 	.word	0x0801269c
 800755c:	08012cdc 	.word	0x08012cdc
 8007560:	08012cfc 	.word	0x08012cfc
 8007564:	08012d14 	.word	0x08012d14
 8007568:	08012d30 	.word	0x08012d30

0800756c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d106      	bne.n	8007588 <tcp_next_iss+0x1c>
 800757a:	4b0a      	ldr	r3, [pc, #40]	; (80075a4 <tcp_next_iss+0x38>)
 800757c:	f640 02af 	movw	r2, #2223	; 0x8af
 8007580:	4909      	ldr	r1, [pc, #36]	; (80075a8 <tcp_next_iss+0x3c>)
 8007582:	480a      	ldr	r0, [pc, #40]	; (80075ac <tcp_next_iss+0x40>)
 8007584:	f009 fb70 	bl	8010c68 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8007588:	4b09      	ldr	r3, [pc, #36]	; (80075b0 <tcp_next_iss+0x44>)
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	4b09      	ldr	r3, [pc, #36]	; (80075b4 <tcp_next_iss+0x48>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	4a07      	ldr	r2, [pc, #28]	; (80075b0 <tcp_next_iss+0x44>)
 8007594:	6013      	str	r3, [r2, #0]
  return iss;
 8007596:	4b06      	ldr	r3, [pc, #24]	; (80075b0 <tcp_next_iss+0x44>)
 8007598:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	08012658 	.word	0x08012658
 80075a8:	08012d48 	.word	0x08012d48
 80075ac:	0801269c 	.word	0x0801269c
 80075b0:	2000000c 	.word	0x2000000c
 80075b4:	20006e68 	.word	0x20006e68

080075b8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
 80075be:	4603      	mov	r3, r0
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d106      	bne.n	80075da <tcp_eff_send_mss_netif+0x22>
 80075cc:	4b14      	ldr	r3, [pc, #80]	; (8007620 <tcp_eff_send_mss_netif+0x68>)
 80075ce:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80075d2:	4914      	ldr	r1, [pc, #80]	; (8007624 <tcp_eff_send_mss_netif+0x6c>)
 80075d4:	4814      	ldr	r0, [pc, #80]	; (8007628 <tcp_eff_send_mss_netif+0x70>)
 80075d6:	f009 fb47 	bl	8010c68 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d101      	bne.n	80075e4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80075e0:	89fb      	ldrh	r3, [r7, #14]
 80075e2:	e019      	b.n	8007618 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80075ea:	8afb      	ldrh	r3, [r7, #22]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d012      	beq.n	8007616 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80075f0:	2328      	movs	r3, #40	; 0x28
 80075f2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80075f4:	8afa      	ldrh	r2, [r7, #22]
 80075f6:	8abb      	ldrh	r3, [r7, #20]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d904      	bls.n	8007606 <tcp_eff_send_mss_netif+0x4e>
 80075fc:	8afa      	ldrh	r2, [r7, #22]
 80075fe:	8abb      	ldrh	r3, [r7, #20]
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	b29b      	uxth	r3, r3
 8007604:	e000      	b.n	8007608 <tcp_eff_send_mss_netif+0x50>
 8007606:	2300      	movs	r3, #0
 8007608:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800760a:	8a7a      	ldrh	r2, [r7, #18]
 800760c:	89fb      	ldrh	r3, [r7, #14]
 800760e:	4293      	cmp	r3, r2
 8007610:	bf28      	it	cs
 8007612:	4613      	movcs	r3, r2
 8007614:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8007616:	89fb      	ldrh	r3, [r7, #14]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3718      	adds	r7, #24
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	08012658 	.word	0x08012658
 8007624:	08012d64 	.word	0x08012d64
 8007628:	0801269c 	.word	0x0801269c

0800762c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8007636:	683b      	ldr	r3, [r7, #0]
 8007638:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d119      	bne.n	8007674 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8007642:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8007646:	4910      	ldr	r1, [pc, #64]	; (8007688 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8007648:	4810      	ldr	r0, [pc, #64]	; (800768c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800764a:	f009 fb0d 	bl	8010c68 <iprintf>

  while (pcb != NULL) {
 800764e:	e011      	b.n	8007674 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d108      	bne.n	800766e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f7fe fd9e 	bl	80061a4 <tcp_abort>
      pcb = next;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	60fb      	str	r3, [r7, #12]
 800766c:	e002      	b.n	8007674 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d1ea      	bne.n	8007650 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800767a:	bf00      	nop
 800767c:	3710      	adds	r7, #16
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop
 8007684:	08012658 	.word	0x08012658
 8007688:	08012d8c 	.word	0x08012d8c
 800768c:	0801269c 	.word	0x0801269c

08007690 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d02a      	beq.n	80076f6 <tcp_netif_ip_addr_changed+0x66>
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d026      	beq.n	80076f6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80076a8:	4b15      	ldr	r3, [pc, #84]	; (8007700 <tcp_netif_ip_addr_changed+0x70>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4619      	mov	r1, r3
 80076ae:	6878      	ldr	r0, [r7, #4]
 80076b0:	f7ff ffbc 	bl	800762c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80076b4:	4b13      	ldr	r3, [pc, #76]	; (8007704 <tcp_netif_ip_addr_changed+0x74>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7ff ffb6 	bl	800762c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d017      	beq.n	80076f6 <tcp_netif_ip_addr_changed+0x66>
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d013      	beq.n	80076f6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80076ce:	4b0e      	ldr	r3, [pc, #56]	; (8007708 <tcp_netif_ip_addr_changed+0x78>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	60fb      	str	r3, [r7, #12]
 80076d4:	e00c      	b.n	80076f0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681a      	ldr	r2, [r3, #0]
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d103      	bne.n	80076ea <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1ef      	bne.n	80076d6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80076f6:	bf00      	nop
 80076f8:	3710      	adds	r7, #16
 80076fa:	46bd      	mov	sp, r7
 80076fc:	bd80      	pop	{r7, pc}
 80076fe:	bf00      	nop
 8007700:	20006e64 	.word	0x20006e64
 8007704:	20006e70 	.word	0x20006e70
 8007708:	20006e6c 	.word	0x20006e6c

0800770c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007720:	4618      	mov	r0, r3
 8007722:	f7ff fb71 	bl	8006e08 <tcp_segs_free>
    pcb->ooseq = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8007734:	b590      	push	{r4, r7, lr}
 8007736:	b08d      	sub	sp, #52	; 0x34
 8007738:	af04      	add	r7, sp, #16
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d105      	bne.n	8007750 <tcp_input+0x1c>
 8007744:	4b9b      	ldr	r3, [pc, #620]	; (80079b4 <tcp_input+0x280>)
 8007746:	2283      	movs	r2, #131	; 0x83
 8007748:	499b      	ldr	r1, [pc, #620]	; (80079b8 <tcp_input+0x284>)
 800774a:	489c      	ldr	r0, [pc, #624]	; (80079bc <tcp_input+0x288>)
 800774c:	f009 fa8c 	bl	8010c68 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	4a9a      	ldr	r2, [pc, #616]	; (80079c0 <tcp_input+0x28c>)
 8007756:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	895b      	ldrh	r3, [r3, #10]
 800775c:	2b13      	cmp	r3, #19
 800775e:	f240 83c4 	bls.w	8007eea <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007762:	4b98      	ldr	r3, [pc, #608]	; (80079c4 <tcp_input+0x290>)
 8007764:	695a      	ldr	r2, [r3, #20]
 8007766:	4b97      	ldr	r3, [pc, #604]	; (80079c4 <tcp_input+0x290>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4619      	mov	r1, r3
 800776c:	4610      	mov	r0, r2
 800776e:	f008 fae9 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	f040 83ba 	bne.w	8007eee <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800777a:	4b92      	ldr	r3, [pc, #584]	; (80079c4 <tcp_input+0x290>)
 800777c:	695b      	ldr	r3, [r3, #20]
 800777e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8007782:	2be0      	cmp	r3, #224	; 0xe0
 8007784:	f000 83b3 	beq.w	8007eee <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8007788:	4b8d      	ldr	r3, [pc, #564]	; (80079c0 <tcp_input+0x28c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	899b      	ldrh	r3, [r3, #12]
 800778e:	b29b      	uxth	r3, r3
 8007790:	4618      	mov	r0, r3
 8007792:	f7fc f80d 	bl	80037b0 <lwip_htons>
 8007796:	4603      	mov	r3, r0
 8007798:	0b1b      	lsrs	r3, r3, #12
 800779a:	b29b      	uxth	r3, r3
 800779c:	b2db      	uxtb	r3, r3
 800779e:	009b      	lsls	r3, r3, #2
 80077a0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80077a2:	7cbb      	ldrb	r3, [r7, #18]
 80077a4:	2b13      	cmp	r3, #19
 80077a6:	f240 83a2 	bls.w	8007eee <tcp_input+0x7ba>
 80077aa:	7cbb      	ldrb	r3, [r7, #18]
 80077ac:	b29a      	uxth	r2, r3
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	891b      	ldrh	r3, [r3, #8]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	f200 839b 	bhi.w	8007eee <tcp_input+0x7ba>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80077b8:	7cbb      	ldrb	r3, [r7, #18]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b14      	subs	r3, #20
 80077be:	b29a      	uxth	r2, r3
 80077c0:	4b81      	ldr	r3, [pc, #516]	; (80079c8 <tcp_input+0x294>)
 80077c2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80077c4:	4b81      	ldr	r3, [pc, #516]	; (80079cc <tcp_input+0x298>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	895a      	ldrh	r2, [r3, #10]
 80077ce:	7cbb      	ldrb	r3, [r7, #18]
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d309      	bcc.n	80077ea <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80077d6:	4b7c      	ldr	r3, [pc, #496]	; (80079c8 <tcp_input+0x294>)
 80077d8:	881a      	ldrh	r2, [r3, #0]
 80077da:	4b7d      	ldr	r3, [pc, #500]	; (80079d0 <tcp_input+0x29c>)
 80077dc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80077de:	7cbb      	ldrb	r3, [r7, #18]
 80077e0:	4619      	mov	r1, r3
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fd fd6e 	bl	80052c4 <pbuf_remove_header>
 80077e8:	e04e      	b.n	8007888 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d105      	bne.n	80077fe <tcp_input+0xca>
 80077f2:	4b70      	ldr	r3, [pc, #448]	; (80079b4 <tcp_input+0x280>)
 80077f4:	22c2      	movs	r2, #194	; 0xc2
 80077f6:	4977      	ldr	r1, [pc, #476]	; (80079d4 <tcp_input+0x2a0>)
 80077f8:	4870      	ldr	r0, [pc, #448]	; (80079bc <tcp_input+0x288>)
 80077fa:	f009 fa35 	bl	8010c68 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80077fe:	2114      	movs	r1, #20
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7fd fd5f 	bl	80052c4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	895a      	ldrh	r2, [r3, #10]
 800780a:	4b71      	ldr	r3, [pc, #452]	; (80079d0 <tcp_input+0x29c>)
 800780c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800780e:	4b6e      	ldr	r3, [pc, #440]	; (80079c8 <tcp_input+0x294>)
 8007810:	881a      	ldrh	r2, [r3, #0]
 8007812:	4b6f      	ldr	r3, [pc, #444]	; (80079d0 <tcp_input+0x29c>)
 8007814:	881b      	ldrh	r3, [r3, #0]
 8007816:	1ad3      	subs	r3, r2, r3
 8007818:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800781a:	4b6d      	ldr	r3, [pc, #436]	; (80079d0 <tcp_input+0x29c>)
 800781c:	881b      	ldrh	r3, [r3, #0]
 800781e:	4619      	mov	r1, r3
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f7fd fd4f 	bl	80052c4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	895b      	ldrh	r3, [r3, #10]
 800782c:	8a3a      	ldrh	r2, [r7, #16]
 800782e:	429a      	cmp	r2, r3
 8007830:	f200 835f 	bhi.w	8007ef2 <tcp_input+0x7be>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	685b      	ldr	r3, [r3, #4]
 800783a:	4a64      	ldr	r2, [pc, #400]	; (80079cc <tcp_input+0x298>)
 800783c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	8a3a      	ldrh	r2, [r7, #16]
 8007844:	4611      	mov	r1, r2
 8007846:	4618      	mov	r0, r3
 8007848:	f7fd fd3c 	bl	80052c4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	891a      	ldrh	r2, [r3, #8]
 8007850:	8a3b      	ldrh	r3, [r7, #16]
 8007852:	1ad3      	subs	r3, r2, r3
 8007854:	b29a      	uxth	r2, r3
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	895b      	ldrh	r3, [r3, #10]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d005      	beq.n	800786e <tcp_input+0x13a>
 8007862:	4b54      	ldr	r3, [pc, #336]	; (80079b4 <tcp_input+0x280>)
 8007864:	22df      	movs	r2, #223	; 0xdf
 8007866:	495c      	ldr	r1, [pc, #368]	; (80079d8 <tcp_input+0x2a4>)
 8007868:	4854      	ldr	r0, [pc, #336]	; (80079bc <tcp_input+0x288>)
 800786a:	f009 f9fd 	bl	8010c68 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	891a      	ldrh	r2, [r3, #8]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	891b      	ldrh	r3, [r3, #8]
 8007878:	429a      	cmp	r2, r3
 800787a:	d005      	beq.n	8007888 <tcp_input+0x154>
 800787c:	4b4d      	ldr	r3, [pc, #308]	; (80079b4 <tcp_input+0x280>)
 800787e:	22e0      	movs	r2, #224	; 0xe0
 8007880:	4956      	ldr	r1, [pc, #344]	; (80079dc <tcp_input+0x2a8>)
 8007882:	484e      	ldr	r0, [pc, #312]	; (80079bc <tcp_input+0x288>)
 8007884:	f009 f9f0 	bl	8010c68 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8007888:	4b4d      	ldr	r3, [pc, #308]	; (80079c0 <tcp_input+0x28c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29a      	uxth	r2, r3
 8007890:	4b4b      	ldr	r3, [pc, #300]	; (80079c0 <tcp_input+0x28c>)
 8007892:	681c      	ldr	r4, [r3, #0]
 8007894:	4610      	mov	r0, r2
 8007896:	f7fb ff8b 	bl	80037b0 <lwip_htons>
 800789a:	4603      	mov	r3, r0
 800789c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800789e:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <tcp_input+0x28c>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	885b      	ldrh	r3, [r3, #2]
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <tcp_input+0x28c>)
 80078a8:	681c      	ldr	r4, [r3, #0]
 80078aa:	4610      	mov	r0, r2
 80078ac:	f7fb ff80 	bl	80037b0 <lwip_htons>
 80078b0:	4603      	mov	r3, r0
 80078b2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80078b4:	4b42      	ldr	r3, [pc, #264]	; (80079c0 <tcp_input+0x28c>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	685a      	ldr	r2, [r3, #4]
 80078ba:	4b41      	ldr	r3, [pc, #260]	; (80079c0 <tcp_input+0x28c>)
 80078bc:	681c      	ldr	r4, [r3, #0]
 80078be:	4610      	mov	r0, r2
 80078c0:	f7fb ff8b 	bl	80037da <lwip_htonl>
 80078c4:	4603      	mov	r3, r0
 80078c6:	6063      	str	r3, [r4, #4]
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	4a45      	ldr	r2, [pc, #276]	; (80079e0 <tcp_input+0x2ac>)
 80078cc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80078ce:	4b3c      	ldr	r3, [pc, #240]	; (80079c0 <tcp_input+0x28c>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	689a      	ldr	r2, [r3, #8]
 80078d4:	4b3a      	ldr	r3, [pc, #232]	; (80079c0 <tcp_input+0x28c>)
 80078d6:	681c      	ldr	r4, [r3, #0]
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fb ff7e 	bl	80037da <lwip_htonl>
 80078de:	4603      	mov	r3, r0
 80078e0:	60a3      	str	r3, [r4, #8]
 80078e2:	68a3      	ldr	r3, [r4, #8]
 80078e4:	4a3f      	ldr	r2, [pc, #252]	; (80079e4 <tcp_input+0x2b0>)
 80078e6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80078e8:	4b35      	ldr	r3, [pc, #212]	; (80079c0 <tcp_input+0x28c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	89db      	ldrh	r3, [r3, #14]
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	4b33      	ldr	r3, [pc, #204]	; (80079c0 <tcp_input+0x28c>)
 80078f2:	681c      	ldr	r4, [r3, #0]
 80078f4:	4610      	mov	r0, r2
 80078f6:	f7fb ff5b 	bl	80037b0 <lwip_htons>
 80078fa:	4603      	mov	r3, r0
 80078fc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80078fe:	4b30      	ldr	r3, [pc, #192]	; (80079c0 <tcp_input+0x28c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	899b      	ldrh	r3, [r3, #12]
 8007904:	b29b      	uxth	r3, r3
 8007906:	4618      	mov	r0, r3
 8007908:	f7fb ff52 	bl	80037b0 <lwip_htons>
 800790c:	4603      	mov	r3, r0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007914:	b2da      	uxtb	r2, r3
 8007916:	4b34      	ldr	r3, [pc, #208]	; (80079e8 <tcp_input+0x2b4>)
 8007918:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	891a      	ldrh	r2, [r3, #8]
 800791e:	4b33      	ldr	r3, [pc, #204]	; (80079ec <tcp_input+0x2b8>)
 8007920:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8007922:	4b31      	ldr	r3, [pc, #196]	; (80079e8 <tcp_input+0x2b4>)
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	f003 0303 	and.w	r3, r3, #3
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <tcp_input+0x214>
    tcplen++;
 800792e:	4b2f      	ldr	r3, [pc, #188]	; (80079ec <tcp_input+0x2b8>)
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	3301      	adds	r3, #1
 8007934:	b29a      	uxth	r2, r3
 8007936:	4b2d      	ldr	r3, [pc, #180]	; (80079ec <tcp_input+0x2b8>)
 8007938:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	891a      	ldrh	r2, [r3, #8]
 800793e:	4b2b      	ldr	r3, [pc, #172]	; (80079ec <tcp_input+0x2b8>)
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	429a      	cmp	r2, r3
 8007944:	f200 82d7 	bhi.w	8007ef6 <tcp_input+0x7c2>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8007948:	2300      	movs	r3, #0
 800794a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800794c:	4b28      	ldr	r3, [pc, #160]	; (80079f0 <tcp_input+0x2bc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	61fb      	str	r3, [r7, #28]
 8007952:	e09d      	b.n	8007a90 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8007954:	69fb      	ldr	r3, [r7, #28]
 8007956:	7d1b      	ldrb	r3, [r3, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <tcp_input+0x234>
 800795c:	4b15      	ldr	r3, [pc, #84]	; (80079b4 <tcp_input+0x280>)
 800795e:	22fb      	movs	r2, #251	; 0xfb
 8007960:	4924      	ldr	r1, [pc, #144]	; (80079f4 <tcp_input+0x2c0>)
 8007962:	4816      	ldr	r0, [pc, #88]	; (80079bc <tcp_input+0x288>)
 8007964:	f009 f980 	bl	8010c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	7d1b      	ldrb	r3, [r3, #20]
 800796c:	2b0a      	cmp	r3, #10
 800796e:	d105      	bne.n	800797c <tcp_input+0x248>
 8007970:	4b10      	ldr	r3, [pc, #64]	; (80079b4 <tcp_input+0x280>)
 8007972:	22fc      	movs	r2, #252	; 0xfc
 8007974:	4920      	ldr	r1, [pc, #128]	; (80079f8 <tcp_input+0x2c4>)
 8007976:	4811      	ldr	r0, [pc, #68]	; (80079bc <tcp_input+0x288>)
 8007978:	f009 f976 	bl	8010c68 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	7d1b      	ldrb	r3, [r3, #20]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d105      	bne.n	8007990 <tcp_input+0x25c>
 8007984:	4b0b      	ldr	r3, [pc, #44]	; (80079b4 <tcp_input+0x280>)
 8007986:	22fd      	movs	r2, #253	; 0xfd
 8007988:	491c      	ldr	r1, [pc, #112]	; (80079fc <tcp_input+0x2c8>)
 800798a:	480c      	ldr	r0, [pc, #48]	; (80079bc <tcp_input+0x288>)
 800798c:	f009 f96c 	bl	8010c68 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007990:	69fb      	ldr	r3, [r7, #28]
 8007992:	7a1b      	ldrb	r3, [r3, #8]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d033      	beq.n	8007a00 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	7a1a      	ldrb	r2, [r3, #8]
 800799c:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <tcp_input+0x290>)
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80079a4:	3301      	adds	r3, #1
 80079a6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80079a8:	429a      	cmp	r2, r3
 80079aa:	d029      	beq.n	8007a00 <tcp_input+0x2cc>
      prev = pcb;
 80079ac:	69fb      	ldr	r3, [r7, #28]
 80079ae:	61bb      	str	r3, [r7, #24]
      continue;
 80079b0:	e06b      	b.n	8007a8a <tcp_input+0x356>
 80079b2:	bf00      	nop
 80079b4:	08012dc0 	.word	0x08012dc0
 80079b8:	08012df4 	.word	0x08012df4
 80079bc:	08012e0c 	.word	0x08012e0c
 80079c0:	20000580 	.word	0x20000580
 80079c4:	200038f0 	.word	0x200038f0
 80079c8:	20000584 	.word	0x20000584
 80079cc:	20000588 	.word	0x20000588
 80079d0:	20000586 	.word	0x20000586
 80079d4:	08012e34 	.word	0x08012e34
 80079d8:	08012e44 	.word	0x08012e44
 80079dc:	08012e50 	.word	0x08012e50
 80079e0:	20000590 	.word	0x20000590
 80079e4:	20000594 	.word	0x20000594
 80079e8:	2000059c 	.word	0x2000059c
 80079ec:	2000059a 	.word	0x2000059a
 80079f0:	20006e64 	.word	0x20006e64
 80079f4:	08012e70 	.word	0x08012e70
 80079f8:	08012e98 	.word	0x08012e98
 80079fc:	08012ec4 	.word	0x08012ec4
    }

    if (pcb->remote_port == tcphdr->src &&
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	8b1a      	ldrh	r2, [r3, #24]
 8007a04:	4b94      	ldr	r3, [pc, #592]	; (8007c58 <tcp_input+0x524>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d13a      	bne.n	8007a86 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	8ada      	ldrh	r2, [r3, #22]
 8007a14:	4b90      	ldr	r3, [pc, #576]	; (8007c58 <tcp_input+0x524>)
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	885b      	ldrh	r3, [r3, #2]
 8007a1a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d132      	bne.n	8007a86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	4b8d      	ldr	r3, [pc, #564]	; (8007c5c <tcp_input+0x528>)
 8007a26:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8007a28:	429a      	cmp	r2, r3
 8007a2a:	d12c      	bne.n	8007a86 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4b8a      	ldr	r3, [pc, #552]	; (8007c5c <tcp_input+0x528>)
 8007a32:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d126      	bne.n	8007a86 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	69fa      	ldr	r2, [r7, #28]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d106      	bne.n	8007a50 <tcp_input+0x31c>
 8007a42:	4b87      	ldr	r3, [pc, #540]	; (8007c60 <tcp_input+0x52c>)
 8007a44:	f240 120d 	movw	r2, #269	; 0x10d
 8007a48:	4986      	ldr	r1, [pc, #536]	; (8007c64 <tcp_input+0x530>)
 8007a4a:	4887      	ldr	r0, [pc, #540]	; (8007c68 <tcp_input+0x534>)
 8007a4c:	f009 f90c 	bl	8010c68 <iprintf>
      if (prev != NULL) {
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <tcp_input+0x338>
        prev->next = pcb->next;
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8007a5e:	4b83      	ldr	r3, [pc, #524]	; (8007c6c <tcp_input+0x538>)
 8007a60:	681a      	ldr	r2, [r3, #0]
 8007a62:	69fb      	ldr	r3, [r7, #28]
 8007a64:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8007a66:	4a81      	ldr	r2, [pc, #516]	; (8007c6c <tcp_input+0x538>)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	69fa      	ldr	r2, [r7, #28]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d111      	bne.n	8007a9a <tcp_input+0x366>
 8007a76:	4b7a      	ldr	r3, [pc, #488]	; (8007c60 <tcp_input+0x52c>)
 8007a78:	f240 1215 	movw	r2, #277	; 0x115
 8007a7c:	497c      	ldr	r1, [pc, #496]	; (8007c70 <tcp_input+0x53c>)
 8007a7e:	487a      	ldr	r0, [pc, #488]	; (8007c68 <tcp_input+0x534>)
 8007a80:	f009 f8f2 	bl	8010c68 <iprintf>
      break;
 8007a84:	e009      	b.n	8007a9a <tcp_input+0x366>
    }
    prev = pcb;
 8007a86:	69fb      	ldr	r3, [r7, #28]
 8007a88:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	61fb      	str	r3, [r7, #28]
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f47f af5e 	bne.w	8007954 <tcp_input+0x220>
 8007a98:	e000      	b.n	8007a9c <tcp_input+0x368>
      break;
 8007a9a:	bf00      	nop
  }

  if (pcb == NULL) {
 8007a9c:	69fb      	ldr	r3, [r7, #28]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f040 8095 	bne.w	8007bce <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007aa4:	4b73      	ldr	r3, [pc, #460]	; (8007c74 <tcp_input+0x540>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	61fb      	str	r3, [r7, #28]
 8007aaa:	e03f      	b.n	8007b2c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	7d1b      	ldrb	r3, [r3, #20]
 8007ab0:	2b0a      	cmp	r3, #10
 8007ab2:	d006      	beq.n	8007ac2 <tcp_input+0x38e>
 8007ab4:	4b6a      	ldr	r3, [pc, #424]	; (8007c60 <tcp_input+0x52c>)
 8007ab6:	f240 121f 	movw	r2, #287	; 0x11f
 8007aba:	496f      	ldr	r1, [pc, #444]	; (8007c78 <tcp_input+0x544>)
 8007abc:	486a      	ldr	r0, [pc, #424]	; (8007c68 <tcp_input+0x534>)
 8007abe:	f009 f8d3 	bl	8010c68 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	7a1b      	ldrb	r3, [r3, #8]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007aca:	69fb      	ldr	r3, [r7, #28]
 8007acc:	7a1a      	ldrb	r2, [r3, #8]
 8007ace:	4b63      	ldr	r3, [pc, #396]	; (8007c5c <tcp_input+0x528>)
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d122      	bne.n	8007b24 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	8b1a      	ldrh	r2, [r3, #24]
 8007ae2:	4b5d      	ldr	r3, [pc, #372]	; (8007c58 <tcp_input+0x524>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	881b      	ldrh	r3, [r3, #0]
 8007ae8:	b29b      	uxth	r3, r3
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d11b      	bne.n	8007b26 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8007aee:	69fb      	ldr	r3, [r7, #28]
 8007af0:	8ada      	ldrh	r2, [r3, #22]
 8007af2:	4b59      	ldr	r3, [pc, #356]	; (8007c58 <tcp_input+0x524>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	885b      	ldrh	r3, [r3, #2]
 8007af8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8007afa:	429a      	cmp	r2, r3
 8007afc:	d113      	bne.n	8007b26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007afe:	69fb      	ldr	r3, [r7, #28]
 8007b00:	685a      	ldr	r2, [r3, #4]
 8007b02:	4b56      	ldr	r3, [pc, #344]	; (8007c5c <tcp_input+0x528>)
 8007b04:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d10d      	bne.n	8007b26 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	681a      	ldr	r2, [r3, #0]
 8007b0e:	4b53      	ldr	r3, [pc, #332]	; (8007c5c <tcp_input+0x528>)
 8007b10:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d107      	bne.n	8007b26 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8007b16:	69f8      	ldr	r0, [r7, #28]
 8007b18:	f000 fb52 	bl	80081c0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f7fd fc57 	bl	80053d0 <pbuf_free>
        return;
 8007b22:	e1ee      	b.n	8007f02 <tcp_input+0x7ce>
        continue;
 8007b24:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	61fb      	str	r3, [r7, #28]
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d1bc      	bne.n	8007aac <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b36:	4b51      	ldr	r3, [pc, #324]	; (8007c7c <tcp_input+0x548>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	617b      	str	r3, [r7, #20]
 8007b3c:	e02a      	b.n	8007b94 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	7a1b      	ldrb	r3, [r3, #8]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d00c      	beq.n	8007b60 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8007b46:	697b      	ldr	r3, [r7, #20]
 8007b48:	7a1a      	ldrb	r2, [r3, #8]
 8007b4a:	4b44      	ldr	r3, [pc, #272]	; (8007c5c <tcp_input+0x528>)
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b52:	3301      	adds	r3, #1
 8007b54:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d002      	beq.n	8007b60 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8007b5a:	697b      	ldr	r3, [r7, #20]
 8007b5c:	61bb      	str	r3, [r7, #24]
        continue;
 8007b5e:	e016      	b.n	8007b8e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	8ada      	ldrh	r2, [r3, #22]
 8007b64:	4b3c      	ldr	r3, [pc, #240]	; (8007c58 <tcp_input+0x524>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	885b      	ldrh	r3, [r3, #2]
 8007b6a:	b29b      	uxth	r3, r3
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d10c      	bne.n	8007b8a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	4b39      	ldr	r3, [pc, #228]	; (8007c5c <tcp_input+0x528>)
 8007b76:	695b      	ldr	r3, [r3, #20]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d00f      	beq.n	8007b9c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8007b7c:	697b      	ldr	r3, [r7, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00d      	beq.n	8007b9e <tcp_input+0x46a>
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d009      	beq.n	8007b9e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	68db      	ldr	r3, [r3, #12]
 8007b92:	617b      	str	r3, [r7, #20]
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1d1      	bne.n	8007b3e <tcp_input+0x40a>
 8007b9a:	e000      	b.n	8007b9e <tcp_input+0x46a>
            break;
 8007b9c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d014      	beq.n	8007bce <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d00a      	beq.n	8007bc0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	69bb      	ldr	r3, [r7, #24]
 8007bb0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8007bb2:	4b32      	ldr	r3, [pc, #200]	; (8007c7c <tcp_input+0x548>)
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8007bba:	4a30      	ldr	r2, [pc, #192]	; (8007c7c <tcp_input+0x548>)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8007bc0:	6978      	ldr	r0, [r7, #20]
 8007bc2:	f000 f9ff 	bl	8007fc4 <tcp_listen_input>
      }
      pbuf_free(p);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f7fd fc02 	bl	80053d0 <pbuf_free>
      return;
 8007bcc:	e199      	b.n	8007f02 <tcp_input+0x7ce>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8007bce:	69fb      	ldr	r3, [r7, #28]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	f000 8160 	beq.w	8007e96 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8007bd6:	4b2a      	ldr	r3, [pc, #168]	; (8007c80 <tcp_input+0x54c>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	891a      	ldrh	r2, [r3, #8]
 8007be0:	4b27      	ldr	r3, [pc, #156]	; (8007c80 <tcp_input+0x54c>)
 8007be2:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8007be4:	4a26      	ldr	r2, [pc, #152]	; (8007c80 <tcp_input+0x54c>)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8007bea:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <tcp_input+0x524>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <tcp_input+0x54c>)
 8007bf0:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8007bf2:	4b24      	ldr	r3, [pc, #144]	; (8007c84 <tcp_input+0x550>)
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8007bf8:	4b23      	ldr	r3, [pc, #140]	; (8007c88 <tcp_input+0x554>)
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8007bfe:	4b23      	ldr	r3, [pc, #140]	; (8007c8c <tcp_input+0x558>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8007c04:	4b22      	ldr	r3, [pc, #136]	; (8007c90 <tcp_input+0x55c>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	f003 0308 	and.w	r3, r3, #8
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d006      	beq.n	8007c1e <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	7b5b      	ldrb	r3, [r3, #13]
 8007c14:	f043 0301 	orr.w	r3, r3, #1
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8007c1e:	69fb      	ldr	r3, [r7, #28]
 8007c20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d038      	beq.n	8007c98 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c26:	69f8      	ldr	r0, [r7, #28]
 8007c28:	f7ff f872 	bl	8006d10 <tcp_process_refused_data>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	f113 0f0d 	cmn.w	r3, #13
 8007c32:	d007      	beq.n	8007c44 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d02d      	beq.n	8007c98 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8007c3c:	4b15      	ldr	r3, [pc, #84]	; (8007c94 <tcp_input+0x560>)
 8007c3e:	881b      	ldrh	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d029      	beq.n	8007c98 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f040 8104 	bne.w	8007e56 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8007c4e:	69f8      	ldr	r0, [r7, #28]
 8007c50:	f003 fe26 	bl	800b8a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8007c54:	e0ff      	b.n	8007e56 <tcp_input+0x722>
 8007c56:	bf00      	nop
 8007c58:	20000580 	.word	0x20000580
 8007c5c:	200038f0 	.word	0x200038f0
 8007c60:	08012dc0 	.word	0x08012dc0
 8007c64:	08012eec 	.word	0x08012eec
 8007c68:	08012e0c 	.word	0x08012e0c
 8007c6c:	20006e64 	.word	0x20006e64
 8007c70:	08012f18 	.word	0x08012f18
 8007c74:	20006e74 	.word	0x20006e74
 8007c78:	08012f44 	.word	0x08012f44
 8007c7c:	20006e6c 	.word	0x20006e6c
 8007c80:	20000570 	.word	0x20000570
 8007c84:	200005a0 	.word	0x200005a0
 8007c88:	2000059d 	.word	0x2000059d
 8007c8c:	20000598 	.word	0x20000598
 8007c90:	2000059c 	.word	0x2000059c
 8007c94:	2000059a 	.word	0x2000059a
      }
    }
    tcp_input_pcb = pcb;
 8007c98:	4a9b      	ldr	r2, [pc, #620]	; (8007f08 <tcp_input+0x7d4>)
 8007c9a:	69fb      	ldr	r3, [r7, #28]
 8007c9c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8007c9e:	69f8      	ldr	r0, [r7, #28]
 8007ca0:	f000 fb0a 	bl	80082b8 <tcp_process>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8007ca8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007cac:	f113 0f0d 	cmn.w	r3, #13
 8007cb0:	f000 80d3 	beq.w	8007e5a <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8007cb4:	4b95      	ldr	r3, [pc, #596]	; (8007f0c <tcp_input+0x7d8>)
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	f003 0308 	and.w	r3, r3, #8
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d015      	beq.n	8007cec <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d008      	beq.n	8007cdc <tcp_input+0x5a8>
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd0:	69fa      	ldr	r2, [r7, #28]
 8007cd2:	6912      	ldr	r2, [r2, #16]
 8007cd4:	f06f 010d 	mvn.w	r1, #13
 8007cd8:	4610      	mov	r0, r2
 8007cda:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007cdc:	69f9      	ldr	r1, [r7, #28]
 8007cde:	488c      	ldr	r0, [pc, #560]	; (8007f10 <tcp_input+0x7dc>)
 8007ce0:	f7ff fbb0 	bl	8007444 <tcp_pcb_remove>
        tcp_free(pcb);
 8007ce4:	69f8      	ldr	r0, [r7, #28]
 8007ce6:	f7fd ff7d 	bl	8005be4 <tcp_free>
 8007cea:	e0c1      	b.n	8007e70 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8007cec:	2300      	movs	r3, #0
 8007cee:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8007cf0:	4b88      	ldr	r3, [pc, #544]	; (8007f14 <tcp_input+0x7e0>)
 8007cf2:	881b      	ldrh	r3, [r3, #0]
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d01d      	beq.n	8007d34 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8007cf8:	4b86      	ldr	r3, [pc, #536]	; (8007f14 <tcp_input+0x7e0>)
 8007cfa:	881b      	ldrh	r3, [r3, #0]
 8007cfc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8007cfe:	69fb      	ldr	r3, [r7, #28]
 8007d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00a      	beq.n	8007d1e <tcp_input+0x5ea>
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d0e:	69fa      	ldr	r2, [r7, #28]
 8007d10:	6910      	ldr	r0, [r2, #16]
 8007d12:	89fa      	ldrh	r2, [r7, #14]
 8007d14:	69f9      	ldr	r1, [r7, #28]
 8007d16:	4798      	blx	r3
 8007d18:	4603      	mov	r3, r0
 8007d1a:	74fb      	strb	r3, [r7, #19]
 8007d1c:	e001      	b.n	8007d22 <tcp_input+0x5ee>
 8007d1e:	2300      	movs	r3, #0
 8007d20:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007d22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007d26:	f113 0f0d 	cmn.w	r3, #13
 8007d2a:	f000 8098 	beq.w	8007e5e <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8007d2e:	4b79      	ldr	r3, [pc, #484]	; (8007f14 <tcp_input+0x7e0>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8007d34:	69f8      	ldr	r0, [r7, #28]
 8007d36:	f000 f905 	bl	8007f44 <tcp_input_delayed_close>
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f040 8090 	bne.w	8007e62 <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8007d42:	4b75      	ldr	r3, [pc, #468]	; (8007f18 <tcp_input+0x7e4>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d041      	beq.n	8007dce <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8007d4a:	69fb      	ldr	r3, [r7, #28]
 8007d4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d006      	beq.n	8007d60 <tcp_input+0x62c>
 8007d52:	4b72      	ldr	r3, [pc, #456]	; (8007f1c <tcp_input+0x7e8>)
 8007d54:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8007d58:	4971      	ldr	r1, [pc, #452]	; (8007f20 <tcp_input+0x7ec>)
 8007d5a:	4872      	ldr	r0, [pc, #456]	; (8007f24 <tcp_input+0x7f0>)
 8007d5c:	f008 ff84 	bl	8010c68 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8007d60:	69fb      	ldr	r3, [r7, #28]
 8007d62:	8b5b      	ldrh	r3, [r3, #26]
 8007d64:	f003 0310 	and.w	r3, r3, #16
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d008      	beq.n	8007d7e <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8007d6c:	4b6a      	ldr	r3, [pc, #424]	; (8007f18 <tcp_input+0x7e4>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7fd fb2d 	bl	80053d0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8007d76:	69f8      	ldr	r0, [r7, #28]
 8007d78:	f7fe fa14 	bl	80061a4 <tcp_abort>
            goto aborted;
 8007d7c:	e078      	b.n	8007e70 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00c      	beq.n	8007da2 <tcp_input+0x66e>
 8007d88:	69fb      	ldr	r3, [r7, #28]
 8007d8a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007d8e:	69fb      	ldr	r3, [r7, #28]
 8007d90:	6918      	ldr	r0, [r3, #16]
 8007d92:	4b61      	ldr	r3, [pc, #388]	; (8007f18 <tcp_input+0x7e4>)
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	2300      	movs	r3, #0
 8007d98:	69f9      	ldr	r1, [r7, #28]
 8007d9a:	47a0      	blx	r4
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	74fb      	strb	r3, [r7, #19]
 8007da0:	e008      	b.n	8007db4 <tcp_input+0x680>
 8007da2:	4b5d      	ldr	r3, [pc, #372]	; (8007f18 <tcp_input+0x7e4>)
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	2300      	movs	r3, #0
 8007da8:	69f9      	ldr	r1, [r7, #28]
 8007daa:	2000      	movs	r0, #0
 8007dac:	f7ff f8a2 	bl	8006ef4 <tcp_recv_null>
 8007db0:	4603      	mov	r3, r0
 8007db2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8007db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007db8:	f113 0f0d 	cmn.w	r3, #13
 8007dbc:	d053      	beq.n	8007e66 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8007dbe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d003      	beq.n	8007dce <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8007dc6:	4b54      	ldr	r3, [pc, #336]	; (8007f18 <tcp_input+0x7e4>)
 8007dc8:	681a      	ldr	r2, [r3, #0]
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8007dce:	4b4f      	ldr	r3, [pc, #316]	; (8007f0c <tcp_input+0x7d8>)
 8007dd0:	781b      	ldrb	r3, [r3, #0]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d030      	beq.n	8007e3c <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8007dda:	69fb      	ldr	r3, [r7, #28]
 8007ddc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d009      	beq.n	8007df6 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007de6:	7b5a      	ldrb	r2, [r3, #13]
 8007de8:	69fb      	ldr	r3, [r7, #28]
 8007dea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dec:	f042 0220 	orr.w	r2, r2, #32
 8007df0:	b2d2      	uxtb	r2, r2
 8007df2:	735a      	strb	r2, [r3, #13]
 8007df4:	e022      	b.n	8007e3c <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007dfa:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8007dfe:	d005      	beq.n	8007e0c <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e04:	3301      	adds	r3, #1
 8007e06:	b29a      	uxth	r2, r3
 8007e08:	69fb      	ldr	r3, [r7, #28]
 8007e0a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8007e0c:	69fb      	ldr	r3, [r7, #28]
 8007e0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00b      	beq.n	8007e2e <tcp_input+0x6fa>
 8007e16:	69fb      	ldr	r3, [r7, #28]
 8007e18:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8007e1c:	69fb      	ldr	r3, [r7, #28]
 8007e1e:	6918      	ldr	r0, [r3, #16]
 8007e20:	2300      	movs	r3, #0
 8007e22:	2200      	movs	r2, #0
 8007e24:	69f9      	ldr	r1, [r7, #28]
 8007e26:	47a0      	blx	r4
 8007e28:	4603      	mov	r3, r0
 8007e2a:	74fb      	strb	r3, [r7, #19]
 8007e2c:	e001      	b.n	8007e32 <tcp_input+0x6fe>
 8007e2e:	2300      	movs	r3, #0
 8007e30:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8007e32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007e36:	f113 0f0d 	cmn.w	r3, #13
 8007e3a:	d016      	beq.n	8007e6a <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8007e3c:	4b32      	ldr	r3, [pc, #200]	; (8007f08 <tcp_input+0x7d4>)
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8007e42:	69f8      	ldr	r0, [r7, #28]
 8007e44:	f000 f87e 	bl	8007f44 <tcp_input_delayed_close>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10f      	bne.n	8007e6e <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8007e4e:	69f8      	ldr	r0, [r7, #28]
 8007e50:	f002 ff10 	bl	800ac74 <tcp_output>
 8007e54:	e00c      	b.n	8007e70 <tcp_input+0x73c>
        goto aborted;
 8007e56:	bf00      	nop
 8007e58:	e00a      	b.n	8007e70 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8007e5a:	bf00      	nop
 8007e5c:	e008      	b.n	8007e70 <tcp_input+0x73c>
              goto aborted;
 8007e5e:	bf00      	nop
 8007e60:	e006      	b.n	8007e70 <tcp_input+0x73c>
          goto aborted;
 8007e62:	bf00      	nop
 8007e64:	e004      	b.n	8007e70 <tcp_input+0x73c>
            goto aborted;
 8007e66:	bf00      	nop
 8007e68:	e002      	b.n	8007e70 <tcp_input+0x73c>
              goto aborted;
 8007e6a:	bf00      	nop
 8007e6c:	e000      	b.n	8007e70 <tcp_input+0x73c>
          goto aborted;
 8007e6e:	bf00      	nop
    tcp_input_pcb = NULL;
 8007e70:	4b25      	ldr	r3, [pc, #148]	; (8007f08 <tcp_input+0x7d4>)
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8007e76:	4b28      	ldr	r3, [pc, #160]	; (8007f18 <tcp_input+0x7e4>)
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8007e7c:	4b2a      	ldr	r3, [pc, #168]	; (8007f28 <tcp_input+0x7f4>)
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d03d      	beq.n	8007f00 <tcp_input+0x7cc>
      pbuf_free(inseg.p);
 8007e84:	4b28      	ldr	r3, [pc, #160]	; (8007f28 <tcp_input+0x7f4>)
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fd faa1 	bl	80053d0 <pbuf_free>
      inseg.p = NULL;
 8007e8e:	4b26      	ldr	r3, [pc, #152]	; (8007f28 <tcp_input+0x7f4>)
 8007e90:	2200      	movs	r2, #0
 8007e92:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8007e94:	e034      	b.n	8007f00 <tcp_input+0x7cc>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8007e96:	4b25      	ldr	r3, [pc, #148]	; (8007f2c <tcp_input+0x7f8>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	899b      	ldrh	r3, [r3, #12]
 8007e9c:	b29b      	uxth	r3, r3
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f7fb fc86 	bl	80037b0 <lwip_htons>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	b2db      	uxtb	r3, r3
 8007ea8:	f003 0304 	and.w	r3, r3, #4
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d118      	bne.n	8007ee2 <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007eb0:	4b1f      	ldr	r3, [pc, #124]	; (8007f30 <tcp_input+0x7fc>)
 8007eb2:	6819      	ldr	r1, [r3, #0]
 8007eb4:	4b1f      	ldr	r3, [pc, #124]	; (8007f34 <tcp_input+0x800>)
 8007eb6:	881b      	ldrh	r3, [r3, #0]
 8007eb8:	461a      	mov	r2, r3
 8007eba:	4b1f      	ldr	r3, [pc, #124]	; (8007f38 <tcp_input+0x804>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ec0:	4b1a      	ldr	r3, [pc, #104]	; (8007f2c <tcp_input+0x7f8>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ec4:	885b      	ldrh	r3, [r3, #2]
 8007ec6:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8007ec8:	4a18      	ldr	r2, [pc, #96]	; (8007f2c <tcp_input+0x7f8>)
 8007eca:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ecc:	8812      	ldrh	r2, [r2, #0]
 8007ece:	b292      	uxth	r2, r2
 8007ed0:	9202      	str	r2, [sp, #8]
 8007ed2:	9301      	str	r3, [sp, #4]
 8007ed4:	4b19      	ldr	r3, [pc, #100]	; (8007f3c <tcp_input+0x808>)
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	4b19      	ldr	r3, [pc, #100]	; (8007f40 <tcp_input+0x80c>)
 8007eda:	4602      	mov	r2, r0
 8007edc:	2000      	movs	r0, #0
 8007ede:	f003 fc8d 	bl	800b7fc <tcp_rst>
    pbuf_free(p);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7fd fa74 	bl	80053d0 <pbuf_free>
  return;
 8007ee8:	e00a      	b.n	8007f00 <tcp_input+0x7cc>
    goto dropped;
 8007eea:	bf00      	nop
 8007eec:	e004      	b.n	8007ef8 <tcp_input+0x7c4>
dropped:
 8007eee:	bf00      	nop
 8007ef0:	e002      	b.n	8007ef8 <tcp_input+0x7c4>
      goto dropped;
 8007ef2:	bf00      	nop
 8007ef4:	e000      	b.n	8007ef8 <tcp_input+0x7c4>
      goto dropped;
 8007ef6:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f7fd fa69 	bl	80053d0 <pbuf_free>
 8007efe:	e000      	b.n	8007f02 <tcp_input+0x7ce>
  return;
 8007f00:	bf00      	nop
}
 8007f02:	3724      	adds	r7, #36	; 0x24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd90      	pop	{r4, r7, pc}
 8007f08:	20006e78 	.word	0x20006e78
 8007f0c:	2000059d 	.word	0x2000059d
 8007f10:	20006e64 	.word	0x20006e64
 8007f14:	20000598 	.word	0x20000598
 8007f18:	200005a0 	.word	0x200005a0
 8007f1c:	08012dc0 	.word	0x08012dc0
 8007f20:	08012f74 	.word	0x08012f74
 8007f24:	08012e0c 	.word	0x08012e0c
 8007f28:	20000570 	.word	0x20000570
 8007f2c:	20000580 	.word	0x20000580
 8007f30:	20000594 	.word	0x20000594
 8007f34:	2000059a 	.word	0x2000059a
 8007f38:	20000590 	.word	0x20000590
 8007f3c:	20003900 	.word	0x20003900
 8007f40:	20003904 	.word	0x20003904

08007f44 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d106      	bne.n	8007f60 <tcp_input_delayed_close+0x1c>
 8007f52:	4b17      	ldr	r3, [pc, #92]	; (8007fb0 <tcp_input_delayed_close+0x6c>)
 8007f54:	f240 225a 	movw	r2, #602	; 0x25a
 8007f58:	4916      	ldr	r1, [pc, #88]	; (8007fb4 <tcp_input_delayed_close+0x70>)
 8007f5a:	4817      	ldr	r0, [pc, #92]	; (8007fb8 <tcp_input_delayed_close+0x74>)
 8007f5c:	f008 fe84 	bl	8010c68 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8007f60:	4b16      	ldr	r3, [pc, #88]	; (8007fbc <tcp_input_delayed_close+0x78>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	f003 0310 	and.w	r3, r3, #16
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01c      	beq.n	8007fa6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	8b5b      	ldrh	r3, [r3, #26]
 8007f70:	f003 0310 	and.w	r3, r3, #16
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d10d      	bne.n	8007f94 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d008      	beq.n	8007f94 <tcp_input_delayed_close+0x50>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6912      	ldr	r2, [r2, #16]
 8007f8c:	f06f 010e 	mvn.w	r1, #14
 8007f90:	4610      	mov	r0, r2
 8007f92:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	480a      	ldr	r0, [pc, #40]	; (8007fc0 <tcp_input_delayed_close+0x7c>)
 8007f98:	f7ff fa54 	bl	8007444 <tcp_pcb_remove>
    tcp_free(pcb);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fd fe21 	bl	8005be4 <tcp_free>
    return 1;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e000      	b.n	8007fa8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3708      	adds	r7, #8
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	08012dc0 	.word	0x08012dc0
 8007fb4:	08012f90 	.word	0x08012f90
 8007fb8:	08012e0c 	.word	0x08012e0c
 8007fbc:	2000059d 	.word	0x2000059d
 8007fc0:	20006e64 	.word	0x20006e64

08007fc4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8007fc4:	b590      	push	{r4, r7, lr}
 8007fc6:	b08b      	sub	sp, #44	; 0x2c
 8007fc8:	af04      	add	r7, sp, #16
 8007fca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8007fcc:	4b6f      	ldr	r3, [pc, #444]	; (800818c <tcp_listen_input+0x1c8>)
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f040 80d3 	bne.w	8008180 <tcp_listen_input+0x1bc>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d106      	bne.n	8007fee <tcp_listen_input+0x2a>
 8007fe0:	4b6b      	ldr	r3, [pc, #428]	; (8008190 <tcp_listen_input+0x1cc>)
 8007fe2:	f240 2281 	movw	r2, #641	; 0x281
 8007fe6:	496b      	ldr	r1, [pc, #428]	; (8008194 <tcp_listen_input+0x1d0>)
 8007fe8:	486b      	ldr	r0, [pc, #428]	; (8008198 <tcp_listen_input+0x1d4>)
 8007fea:	f008 fe3d 	bl	8010c68 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8007fee:	4b67      	ldr	r3, [pc, #412]	; (800818c <tcp_listen_input+0x1c8>)
 8007ff0:	781b      	ldrb	r3, [r3, #0]
 8007ff2:	f003 0310 	and.w	r3, r3, #16
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d019      	beq.n	800802e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8007ffa:	4b68      	ldr	r3, [pc, #416]	; (800819c <tcp_listen_input+0x1d8>)
 8007ffc:	6819      	ldr	r1, [r3, #0]
 8007ffe:	4b68      	ldr	r3, [pc, #416]	; (80081a0 <tcp_listen_input+0x1dc>)
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	4b67      	ldr	r3, [pc, #412]	; (80081a4 <tcp_listen_input+0x1e0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800800a:	4b67      	ldr	r3, [pc, #412]	; (80081a8 <tcp_listen_input+0x1e4>)
 800800c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800800e:	885b      	ldrh	r3, [r3, #2]
 8008010:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008012:	4a65      	ldr	r2, [pc, #404]	; (80081a8 <tcp_listen_input+0x1e4>)
 8008014:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008016:	8812      	ldrh	r2, [r2, #0]
 8008018:	b292      	uxth	r2, r2
 800801a:	9202      	str	r2, [sp, #8]
 800801c:	9301      	str	r3, [sp, #4]
 800801e:	4b63      	ldr	r3, [pc, #396]	; (80081ac <tcp_listen_input+0x1e8>)
 8008020:	9300      	str	r3, [sp, #0]
 8008022:	4b63      	ldr	r3, [pc, #396]	; (80081b0 <tcp_listen_input+0x1ec>)
 8008024:	4602      	mov	r2, r0
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f003 fbe8 	bl	800b7fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800802c:	e0aa      	b.n	8008184 <tcp_listen_input+0x1c0>
  } else if (flags & TCP_SYN) {
 800802e:	4b57      	ldr	r3, [pc, #348]	; (800818c <tcp_listen_input+0x1c8>)
 8008030:	781b      	ldrb	r3, [r3, #0]
 8008032:	f003 0302 	and.w	r3, r3, #2
 8008036:	2b00      	cmp	r3, #0
 8008038:	f000 80a4 	beq.w	8008184 <tcp_listen_input+0x1c0>
    npcb = tcp_alloc(pcb->prio);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	7d5b      	ldrb	r3, [r3, #21]
 8008040:	4618      	mov	r0, r3
 8008042:	f7ff f87b 	bl	800713c <tcp_alloc>
 8008046:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d111      	bne.n	8008072 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00a      	beq.n	800806c <tcp_listen_input+0xa8>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6910      	ldr	r0, [r2, #16]
 800805e:	f04f 32ff 	mov.w	r2, #4294967295
 8008062:	2100      	movs	r1, #0
 8008064:	4798      	blx	r3
 8008066:	4603      	mov	r3, r0
 8008068:	73bb      	strb	r3, [r7, #14]
      return;
 800806a:	e08c      	b.n	8008186 <tcp_listen_input+0x1c2>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800806c:	23f0      	movs	r3, #240	; 0xf0
 800806e:	73bb      	strb	r3, [r7, #14]
      return;
 8008070:	e089      	b.n	8008186 <tcp_listen_input+0x1c2>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8008072:	4b50      	ldr	r3, [pc, #320]	; (80081b4 <tcp_listen_input+0x1f0>)
 8008074:	695a      	ldr	r2, [r3, #20]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800807a:	4b4e      	ldr	r3, [pc, #312]	; (80081b4 <tcp_listen_input+0x1f0>)
 800807c:	691a      	ldr	r2, [r3, #16]
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	8ada      	ldrh	r2, [r3, #22]
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800808a:	4b47      	ldr	r3, [pc, #284]	; (80081a8 <tcp_listen_input+0x1e4>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	881b      	ldrh	r3, [r3, #0]
 8008090:	b29a      	uxth	r2, r3
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2203      	movs	r2, #3
 800809a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800809c:	4b41      	ldr	r3, [pc, #260]	; (80081a4 <tcp_listen_input+0x1e0>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	1c5a      	adds	r2, r3, #1
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080aa:	697b      	ldr	r3, [r7, #20]
 80080ac:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80080ae:	6978      	ldr	r0, [r7, #20]
 80080b0:	f7ff fa5c 	bl	800756c <tcp_next_iss>
 80080b4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	693a      	ldr	r2, [r7, #16]
 80080ba:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	693a      	ldr	r2, [r7, #16]
 80080c0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	693a      	ldr	r2, [r7, #16]
 80080c6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	693a      	ldr	r2, [r7, #16]
 80080cc:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80080ce:	4b35      	ldr	r3, [pc, #212]	; (80081a4 <tcp_listen_input+0x1e0>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	1e5a      	subs	r2, r3, #1
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	691a      	ldr	r2, [r3, #16]
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	7a5b      	ldrb	r3, [r3, #9]
 80080ea:	f003 030c 	and.w	r3, r3, #12
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	7a1a      	ldrb	r2, [r3, #8]
 80080f8:	697b      	ldr	r3, [r7, #20]
 80080fa:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80080fc:	4b2e      	ldr	r3, [pc, #184]	; (80081b8 <tcp_listen_input+0x1f4>)
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	697b      	ldr	r3, [r7, #20]
 8008102:	60da      	str	r2, [r3, #12]
 8008104:	4a2c      	ldr	r2, [pc, #176]	; (80081b8 <tcp_listen_input+0x1f4>)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	6013      	str	r3, [r2, #0]
 800810a:	f003 fd39 	bl	800bb80 <tcp_timer_needed>
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <tcp_listen_input+0x1f8>)
 8008110:	2201      	movs	r2, #1
 8008112:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8008114:	6978      	ldr	r0, [r7, #20]
 8008116:	f001 fd8f 	bl	8009c38 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800811a:	4b23      	ldr	r3, [pc, #140]	; (80081a8 <tcp_listen_input+0x1e4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	89db      	ldrh	r3, [r3, #14]
 8008120:	b29a      	uxth	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	3304      	adds	r3, #4
 800813c:	4618      	mov	r0, r3
 800813e:	f007 fb4f 	bl	800f7e0 <ip4_route>
 8008142:	4601      	mov	r1, r0
 8008144:	697b      	ldr	r3, [r7, #20]
 8008146:	3304      	adds	r3, #4
 8008148:	461a      	mov	r2, r3
 800814a:	4620      	mov	r0, r4
 800814c:	f7ff fa34 	bl	80075b8 <tcp_eff_send_mss_netif>
 8008150:	4603      	mov	r3, r0
 8008152:	461a      	mov	r2, r3
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8008158:	2112      	movs	r1, #18
 800815a:	6978      	ldr	r0, [r7, #20]
 800815c:	f002 fc9c 	bl	800aa98 <tcp_enqueue_flags>
 8008160:	4603      	mov	r3, r0
 8008162:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8008164:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d004      	beq.n	8008176 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800816c:	2100      	movs	r1, #0
 800816e:	6978      	ldr	r0, [r7, #20]
 8008170:	f7fd ff5a 	bl	8006028 <tcp_abandon>
      return;
 8008174:	e007      	b.n	8008186 <tcp_listen_input+0x1c2>
    tcp_output(npcb);
 8008176:	6978      	ldr	r0, [r7, #20]
 8008178:	f002 fd7c 	bl	800ac74 <tcp_output>
  return;
 800817c:	bf00      	nop
 800817e:	e001      	b.n	8008184 <tcp_listen_input+0x1c0>
    return;
 8008180:	bf00      	nop
 8008182:	e000      	b.n	8008186 <tcp_listen_input+0x1c2>
  return;
 8008184:	bf00      	nop
}
 8008186:	371c      	adds	r7, #28
 8008188:	46bd      	mov	sp, r7
 800818a:	bd90      	pop	{r4, r7, pc}
 800818c:	2000059c 	.word	0x2000059c
 8008190:	08012dc0 	.word	0x08012dc0
 8008194:	08012fb8 	.word	0x08012fb8
 8008198:	08012e0c 	.word	0x08012e0c
 800819c:	20000594 	.word	0x20000594
 80081a0:	2000059a 	.word	0x2000059a
 80081a4:	20000590 	.word	0x20000590
 80081a8:	20000580 	.word	0x20000580
 80081ac:	20003900 	.word	0x20003900
 80081b0:	20003904 	.word	0x20003904
 80081b4:	200038f0 	.word	0x200038f0
 80081b8:	20006e64 	.word	0x20006e64
 80081bc:	20006e60 	.word	0x20006e60

080081c0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b086      	sub	sp, #24
 80081c4:	af04      	add	r7, sp, #16
 80081c6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80081c8:	4b30      	ldr	r3, [pc, #192]	; (800828c <tcp_timewait_input+0xcc>)
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 0304 	and.w	r3, r3, #4
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d154      	bne.n	800827e <tcp_timewait_input+0xbe>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d106      	bne.n	80081e8 <tcp_timewait_input+0x28>
 80081da:	4b2d      	ldr	r3, [pc, #180]	; (8008290 <tcp_timewait_input+0xd0>)
 80081dc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80081e0:	492c      	ldr	r1, [pc, #176]	; (8008294 <tcp_timewait_input+0xd4>)
 80081e2:	482d      	ldr	r0, [pc, #180]	; (8008298 <tcp_timewait_input+0xd8>)
 80081e4:	f008 fd40 	bl	8010c68 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80081e8:	4b28      	ldr	r3, [pc, #160]	; (800828c <tcp_timewait_input+0xcc>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d02a      	beq.n	800824a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80081f4:	4b29      	ldr	r3, [pc, #164]	; (800829c <tcp_timewait_input+0xdc>)
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081fc:	1ad3      	subs	r3, r2, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	db2d      	blt.n	800825e <tcp_timewait_input+0x9e>
 8008202:	4b26      	ldr	r3, [pc, #152]	; (800829c <tcp_timewait_input+0xdc>)
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800820e:	440b      	add	r3, r1
 8008210:	1ad3      	subs	r3, r2, r3
 8008212:	2b00      	cmp	r3, #0
 8008214:	dc23      	bgt.n	800825e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008216:	4b22      	ldr	r3, [pc, #136]	; (80082a0 <tcp_timewait_input+0xe0>)
 8008218:	6819      	ldr	r1, [r3, #0]
 800821a:	4b22      	ldr	r3, [pc, #136]	; (80082a4 <tcp_timewait_input+0xe4>)
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	461a      	mov	r2, r3
 8008220:	4b1e      	ldr	r3, [pc, #120]	; (800829c <tcp_timewait_input+0xdc>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008226:	4b20      	ldr	r3, [pc, #128]	; (80082a8 <tcp_timewait_input+0xe8>)
 8008228:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800822a:	885b      	ldrh	r3, [r3, #2]
 800822c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800822e:	4a1e      	ldr	r2, [pc, #120]	; (80082a8 <tcp_timewait_input+0xe8>)
 8008230:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008232:	8812      	ldrh	r2, [r2, #0]
 8008234:	b292      	uxth	r2, r2
 8008236:	9202      	str	r2, [sp, #8]
 8008238:	9301      	str	r3, [sp, #4]
 800823a:	4b1c      	ldr	r3, [pc, #112]	; (80082ac <tcp_timewait_input+0xec>)
 800823c:	9300      	str	r3, [sp, #0]
 800823e:	4b1c      	ldr	r3, [pc, #112]	; (80082b0 <tcp_timewait_input+0xf0>)
 8008240:	4602      	mov	r2, r0
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f003 fada 	bl	800b7fc <tcp_rst>
      return;
 8008248:	e01c      	b.n	8008284 <tcp_timewait_input+0xc4>
    }
  } else if (flags & TCP_FIN) {
 800824a:	4b10      	ldr	r3, [pc, #64]	; (800828c <tcp_timewait_input+0xcc>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f003 0301 	and.w	r3, r3, #1
 8008252:	2b00      	cmp	r3, #0
 8008254:	d003      	beq.n	800825e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8008256:	4b17      	ldr	r3, [pc, #92]	; (80082b4 <tcp_timewait_input+0xf4>)
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800825e:	4b11      	ldr	r3, [pc, #68]	; (80082a4 <tcp_timewait_input+0xe4>)
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	2b00      	cmp	r3, #0
 8008264:	d00d      	beq.n	8008282 <tcp_timewait_input+0xc2>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	8b5b      	ldrh	r3, [r3, #26]
 800826a:	f043 0302 	orr.w	r3, r3, #2
 800826e:	b29a      	uxth	r2, r3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f002 fcfd 	bl	800ac74 <tcp_output>
  }
  return;
 800827a:	bf00      	nop
 800827c:	e001      	b.n	8008282 <tcp_timewait_input+0xc2>
    return;
 800827e:	bf00      	nop
 8008280:	e000      	b.n	8008284 <tcp_timewait_input+0xc4>
  return;
 8008282:	bf00      	nop
}
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	2000059c 	.word	0x2000059c
 8008290:	08012dc0 	.word	0x08012dc0
 8008294:	08012fd8 	.word	0x08012fd8
 8008298:	08012e0c 	.word	0x08012e0c
 800829c:	20000590 	.word	0x20000590
 80082a0:	20000594 	.word	0x20000594
 80082a4:	2000059a 	.word	0x2000059a
 80082a8:	20000580 	.word	0x20000580
 80082ac:	20003900 	.word	0x20003900
 80082b0:	20003904 	.word	0x20003904
 80082b4:	20006e68 	.word	0x20006e68

080082b8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80082b8:	b590      	push	{r4, r7, lr}
 80082ba:	b08d      	sub	sp, #52	; 0x34
 80082bc:	af04      	add	r7, sp, #16
 80082be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80082c0:	2300      	movs	r3, #0
 80082c2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80082c4:	2300      	movs	r3, #0
 80082c6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <tcp_process+0x24>
 80082ce:	4ba5      	ldr	r3, [pc, #660]	; (8008564 <tcp_process+0x2ac>)
 80082d0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80082d4:	49a4      	ldr	r1, [pc, #656]	; (8008568 <tcp_process+0x2b0>)
 80082d6:	48a5      	ldr	r0, [pc, #660]	; (800856c <tcp_process+0x2b4>)
 80082d8:	f008 fcc6 	bl	8010c68 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80082dc:	4ba4      	ldr	r3, [pc, #656]	; (8008570 <tcp_process+0x2b8>)
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d04e      	beq.n	8008386 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	7d1b      	ldrb	r3, [r3, #20]
 80082ec:	2b02      	cmp	r3, #2
 80082ee:	d108      	bne.n	8008302 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082f4:	4b9f      	ldr	r3, [pc, #636]	; (8008574 <tcp_process+0x2bc>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d123      	bne.n	8008344 <tcp_process+0x8c>
        acceptable = 1;
 80082fc:	2301      	movs	r3, #1
 80082fe:	76fb      	strb	r3, [r7, #27]
 8008300:	e020      	b.n	8008344 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008306:	4b9c      	ldr	r3, [pc, #624]	; (8008578 <tcp_process+0x2c0>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d102      	bne.n	8008314 <tcp_process+0x5c>
        acceptable = 1;
 800830e:	2301      	movs	r3, #1
 8008310:	76fb      	strb	r3, [r7, #27]
 8008312:	e017      	b.n	8008344 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8008314:	4b98      	ldr	r3, [pc, #608]	; (8008578 <tcp_process+0x2c0>)
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831c:	1ad3      	subs	r3, r2, r3
 800831e:	2b00      	cmp	r3, #0
 8008320:	db10      	blt.n	8008344 <tcp_process+0x8c>
 8008322:	4b95      	ldr	r3, [pc, #596]	; (8008578 <tcp_process+0x2c0>)
 8008324:	681a      	ldr	r2, [r3, #0]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800832e:	440b      	add	r3, r1
 8008330:	1ad3      	subs	r3, r2, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	dc06      	bgt.n	8008344 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8b5b      	ldrh	r3, [r3, #26]
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	b29a      	uxth	r2, r3
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8008344:	7efb      	ldrb	r3, [r7, #27]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d01b      	beq.n	8008382 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	7d1b      	ldrb	r3, [r3, #20]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d106      	bne.n	8008360 <tcp_process+0xa8>
 8008352:	4b84      	ldr	r3, [pc, #528]	; (8008564 <tcp_process+0x2ac>)
 8008354:	f44f 724e 	mov.w	r2, #824	; 0x338
 8008358:	4988      	ldr	r1, [pc, #544]	; (800857c <tcp_process+0x2c4>)
 800835a:	4884      	ldr	r0, [pc, #528]	; (800856c <tcp_process+0x2b4>)
 800835c:	f008 fc84 	bl	8010c68 <iprintf>
      recv_flags |= TF_RESET;
 8008360:	4b87      	ldr	r3, [pc, #540]	; (8008580 <tcp_process+0x2c8>)
 8008362:	781b      	ldrb	r3, [r3, #0]
 8008364:	f043 0308 	orr.w	r3, r3, #8
 8008368:	b2da      	uxtb	r2, r3
 800836a:	4b85      	ldr	r3, [pc, #532]	; (8008580 <tcp_process+0x2c8>)
 800836c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	8b5b      	ldrh	r3, [r3, #26]
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	b29a      	uxth	r2, r3
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800837c:	f06f 030d 	mvn.w	r3, #13
 8008380:	e37a      	b.n	8008a78 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8008382:	2300      	movs	r3, #0
 8008384:	e378      	b.n	8008a78 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8008386:	4b7a      	ldr	r3, [pc, #488]	; (8008570 <tcp_process+0x2b8>)
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d010      	beq.n	80083b4 <tcp_process+0xfc>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	7d1b      	ldrb	r3, [r3, #20]
 8008396:	2b02      	cmp	r3, #2
 8008398:	d00c      	beq.n	80083b4 <tcp_process+0xfc>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	7d1b      	ldrb	r3, [r3, #20]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d008      	beq.n	80083b4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	8b5b      	ldrh	r3, [r3, #26]
 80083a6:	f043 0302 	orr.w	r3, r3, #2
 80083aa:	b29a      	uxth	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	e361      	b.n	8008a78 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	8b5b      	ldrh	r3, [r3, #26]
 80083b8:	f003 0310 	and.w	r3, r3, #16
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d103      	bne.n	80083c8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80083c0:	4b70      	ldr	r3, [pc, #448]	; (8008584 <tcp_process+0x2cc>)
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2200      	movs	r2, #0
 80083cc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f001 fc2d 	bl	8009c38 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7d1b      	ldrb	r3, [r3, #20]
 80083e2:	3b02      	subs	r3, #2
 80083e4:	2b07      	cmp	r3, #7
 80083e6:	f200 8337 	bhi.w	8008a58 <tcp_process+0x7a0>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <tcp_process+0x138>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	08008411 	.word	0x08008411
 80083f4:	08008641 	.word	0x08008641
 80083f8:	080087b9 	.word	0x080087b9
 80083fc:	080087e3 	.word	0x080087e3
 8008400:	08008907 	.word	0x08008907
 8008404:	080087b9 	.word	0x080087b9
 8008408:	08008993 	.word	0x08008993
 800840c:	08008a23 	.word	0x08008a23
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8008410:	4b57      	ldr	r3, [pc, #348]	; (8008570 <tcp_process+0x2b8>)
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 0310 	and.w	r3, r3, #16
 8008418:	2b00      	cmp	r3, #0
 800841a:	f000 80e4 	beq.w	80085e6 <tcp_process+0x32e>
 800841e:	4b54      	ldr	r3, [pc, #336]	; (8008570 <tcp_process+0x2b8>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	f003 0302 	and.w	r3, r3, #2
 8008426:	2b00      	cmp	r3, #0
 8008428:	f000 80dd 	beq.w	80085e6 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	4b50      	ldr	r3, [pc, #320]	; (8008574 <tcp_process+0x2bc>)
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	429a      	cmp	r2, r3
 8008438:	f040 80d5 	bne.w	80085e6 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800843c:	4b4e      	ldr	r3, [pc, #312]	; (8008578 <tcp_process+0x2c0>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800844e:	4b49      	ldr	r3, [pc, #292]	; (8008574 <tcp_process+0x2bc>)
 8008450:	681a      	ldr	r2, [r3, #0]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8008456:	4b4c      	ldr	r3, [pc, #304]	; (8008588 <tcp_process+0x2d0>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	89db      	ldrh	r3, [r3, #14]
 800845c:	b29a      	uxth	r2, r3
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8008470:	4b41      	ldr	r3, [pc, #260]	; (8008578 <tcp_process+0x2c0>)
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	1e5a      	subs	r2, r3, #1
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2204      	movs	r2, #4
 800847e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3304      	adds	r3, #4
 8008488:	4618      	mov	r0, r3
 800848a:	f007 f9a9 	bl	800f7e0 <ip4_route>
 800848e:	4601      	mov	r1, r0
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	3304      	adds	r3, #4
 8008494:	461a      	mov	r2, r3
 8008496:	4620      	mov	r0, r4
 8008498:	f7ff f88e 	bl	80075b8 <tcp_eff_send_mss_netif>
 800849c:	4603      	mov	r3, r0
 800849e:	461a      	mov	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084a8:	009a      	lsls	r2, r3, #2
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084ae:	005b      	lsls	r3, r3, #1
 80084b0:	f241 111c 	movw	r1, #4380	; 0x111c
 80084b4:	428b      	cmp	r3, r1
 80084b6:	bf38      	it	cc
 80084b8:	460b      	movcc	r3, r1
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d204      	bcs.n	80084c8 <tcp_process+0x210>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	b29b      	uxth	r3, r3
 80084c6:	e00d      	b.n	80084e4 <tcp_process+0x22c>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084cc:	005b      	lsls	r3, r3, #1
 80084ce:	f241 121c 	movw	r2, #4380	; 0x111c
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d904      	bls.n	80084e0 <tcp_process+0x228>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	b29b      	uxth	r3, r3
 80084de:	e001      	b.n	80084e4 <tcp_process+0x22c>
 80084e0:	f241 131c 	movw	r3, #4380	; 0x111c
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <tcp_process+0x24a>
 80084f4:	4b1b      	ldr	r3, [pc, #108]	; (8008564 <tcp_process+0x2ac>)
 80084f6:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80084fa:	4924      	ldr	r1, [pc, #144]	; (800858c <tcp_process+0x2d4>)
 80084fc:	481b      	ldr	r0, [pc, #108]	; (800856c <tcp_process+0x2b4>)
 80084fe:	f008 fbb3 	bl	8010c68 <iprintf>
        --pcb->snd_queuelen;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008508:	3b01      	subs	r3, #1
 800850a:	b29a      	uxth	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008516:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d111      	bne.n	8008542 <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008522:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d106      	bne.n	8008538 <tcp_process+0x280>
 800852a:	4b0e      	ldr	r3, [pc, #56]	; (8008564 <tcp_process+0x2ac>)
 800852c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8008530:	4917      	ldr	r1, [pc, #92]	; (8008590 <tcp_process+0x2d8>)
 8008532:	480e      	ldr	r0, [pc, #56]	; (800856c <tcp_process+0x2b4>)
 8008534:	f008 fb98 	bl	8010c68 <iprintf>
          pcb->unsent = rseg->next;
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	681a      	ldr	r2, [r3, #0]
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	66da      	str	r2, [r3, #108]	; 0x6c
 8008540:	e003      	b.n	800854a <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800854a:	69f8      	ldr	r0, [r7, #28]
 800854c:	f7fe fc70 	bl	8006e30 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008554:	2b00      	cmp	r3, #0
 8008556:	d11d      	bne.n	8008594 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800855e:	861a      	strh	r2, [r3, #48]	; 0x30
 8008560:	e01f      	b.n	80085a2 <tcp_process+0x2ea>
 8008562:	bf00      	nop
 8008564:	08012dc0 	.word	0x08012dc0
 8008568:	08012ff8 	.word	0x08012ff8
 800856c:	08012e0c 	.word	0x08012e0c
 8008570:	2000059c 	.word	0x2000059c
 8008574:	20000594 	.word	0x20000594
 8008578:	20000590 	.word	0x20000590
 800857c:	08013014 	.word	0x08013014
 8008580:	2000059d 	.word	0x2000059d
 8008584:	20006e68 	.word	0x20006e68
 8008588:	20000580 	.word	0x20000580
 800858c:	08013034 	.word	0x08013034
 8008590:	0801304c 	.word	0x0801304c
        } else {
          pcb->rtime = 0;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2200      	movs	r2, #0
 8008598:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2200      	movs	r2, #0
 800859e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00a      	beq.n	80085c2 <tcp_process+0x30a>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	6910      	ldr	r0, [r2, #16]
 80085b6:	2200      	movs	r2, #0
 80085b8:	6879      	ldr	r1, [r7, #4]
 80085ba:	4798      	blx	r3
 80085bc:	4603      	mov	r3, r0
 80085be:	76bb      	strb	r3, [r7, #26]
 80085c0:	e001      	b.n	80085c6 <tcp_process+0x30e>
 80085c2:	2300      	movs	r3, #0
 80085c4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80085c6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80085ca:	f113 0f0d 	cmn.w	r3, #13
 80085ce:	d102      	bne.n	80085d6 <tcp_process+0x31e>
          return ERR_ABRT;
 80085d0:	f06f 030c 	mvn.w	r3, #12
 80085d4:	e250      	b.n	8008a78 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8b5b      	ldrh	r3, [r3, #26]
 80085da:	f043 0302 	orr.w	r3, r3, #2
 80085de:	b29a      	uxth	r2, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80085e4:	e23a      	b.n	8008a5c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80085e6:	4b9d      	ldr	r3, [pc, #628]	; (800885c <tcp_process+0x5a4>)
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	f003 0310 	and.w	r3, r3, #16
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	f000 8234 	beq.w	8008a5c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80085f4:	4b9a      	ldr	r3, [pc, #616]	; (8008860 <tcp_process+0x5a8>)
 80085f6:	6819      	ldr	r1, [r3, #0]
 80085f8:	4b9a      	ldr	r3, [pc, #616]	; (8008864 <tcp_process+0x5ac>)
 80085fa:	881b      	ldrh	r3, [r3, #0]
 80085fc:	461a      	mov	r2, r3
 80085fe:	4b9a      	ldr	r3, [pc, #616]	; (8008868 <tcp_process+0x5b0>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008604:	4b99      	ldr	r3, [pc, #612]	; (800886c <tcp_process+0x5b4>)
 8008606:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008608:	885b      	ldrh	r3, [r3, #2]
 800860a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800860c:	4a97      	ldr	r2, [pc, #604]	; (800886c <tcp_process+0x5b4>)
 800860e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008610:	8812      	ldrh	r2, [r2, #0]
 8008612:	b292      	uxth	r2, r2
 8008614:	9202      	str	r2, [sp, #8]
 8008616:	9301      	str	r3, [sp, #4]
 8008618:	4b95      	ldr	r3, [pc, #596]	; (8008870 <tcp_process+0x5b8>)
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	4b95      	ldr	r3, [pc, #596]	; (8008874 <tcp_process+0x5bc>)
 800861e:	4602      	mov	r2, r0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f003 f8eb 	bl	800b7fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800862c:	2b05      	cmp	r3, #5
 800862e:	f200 8215 	bhi.w	8008a5c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2200      	movs	r2, #0
 8008636:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f002 feab 	bl	800b394 <tcp_rexmit_rto>
      break;
 800863e:	e20d      	b.n	8008a5c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8008640:	4b86      	ldr	r3, [pc, #536]	; (800885c <tcp_process+0x5a4>)
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 0310 	and.w	r3, r3, #16
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 80a1 	beq.w	8008790 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800864e:	4b84      	ldr	r3, [pc, #528]	; (8008860 <tcp_process+0x5a8>)
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008656:	1ad3      	subs	r3, r2, r3
 8008658:	3b01      	subs	r3, #1
 800865a:	2b00      	cmp	r3, #0
 800865c:	db7e      	blt.n	800875c <tcp_process+0x4a4>
 800865e:	4b80      	ldr	r3, [pc, #512]	; (8008860 <tcp_process+0x5a8>)
 8008660:	681a      	ldr	r2, [r3, #0]
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	1ad3      	subs	r3, r2, r3
 8008668:	2b00      	cmp	r3, #0
 800866a:	dc77      	bgt.n	800875c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2204      	movs	r2, #4
 8008670:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800867a:	23fa      	movs	r3, #250	; 0xfa
 800867c:	76bb      	strb	r3, [r7, #26]
 800867e:	e01d      	b.n	80086bc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d106      	bne.n	8008698 <tcp_process+0x3e0>
 800868a:	4b7b      	ldr	r3, [pc, #492]	; (8008878 <tcp_process+0x5c0>)
 800868c:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8008690:	497a      	ldr	r1, [pc, #488]	; (800887c <tcp_process+0x5c4>)
 8008692:	487b      	ldr	r0, [pc, #492]	; (8008880 <tcp_process+0x5c8>)
 8008694:	f008 fae8 	bl	8010c68 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800869c:	699b      	ldr	r3, [r3, #24]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <tcp_process+0x400>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6910      	ldr	r0, [r2, #16]
 80086ac:	2200      	movs	r2, #0
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4798      	blx	r3
 80086b2:	4603      	mov	r3, r0
 80086b4:	76bb      	strb	r3, [r7, #26]
 80086b6:	e001      	b.n	80086bc <tcp_process+0x404>
 80086b8:	23f0      	movs	r3, #240	; 0xf0
 80086ba:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80086bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80086c4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80086c8:	f113 0f0d 	cmn.w	r3, #13
 80086cc:	d002      	beq.n	80086d4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f7fd fd68 	bl	80061a4 <tcp_abort>
            }
            return ERR_ABRT;
 80086d4:	f06f 030c 	mvn.w	r3, #12
 80086d8:	e1ce      	b.n	8008a78 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 fae0 	bl	8008ca0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80086e0:	4b68      	ldr	r3, [pc, #416]	; (8008884 <tcp_process+0x5cc>)
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d005      	beq.n	80086f4 <tcp_process+0x43c>
            recv_acked--;
 80086e8:	4b66      	ldr	r3, [pc, #408]	; (8008884 <tcp_process+0x5cc>)
 80086ea:	881b      	ldrh	r3, [r3, #0]
 80086ec:	3b01      	subs	r3, #1
 80086ee:	b29a      	uxth	r2, r3
 80086f0:	4b64      	ldr	r3, [pc, #400]	; (8008884 <tcp_process+0x5cc>)
 80086f2:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086f8:	009a      	lsls	r2, r3, #2
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80086fe:	005b      	lsls	r3, r3, #1
 8008700:	f241 111c 	movw	r1, #4380	; 0x111c
 8008704:	428b      	cmp	r3, r1
 8008706:	bf38      	it	cc
 8008708:	460b      	movcc	r3, r1
 800870a:	429a      	cmp	r2, r3
 800870c:	d204      	bcs.n	8008718 <tcp_process+0x460>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	b29b      	uxth	r3, r3
 8008716:	e00d      	b.n	8008734 <tcp_process+0x47c>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800871c:	005b      	lsls	r3, r3, #1
 800871e:	f241 121c 	movw	r2, #4380	; 0x111c
 8008722:	4293      	cmp	r3, r2
 8008724:	d904      	bls.n	8008730 <tcp_process+0x478>
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	b29b      	uxth	r3, r3
 800872e:	e001      	b.n	8008734 <tcp_process+0x47c>
 8008730:	f241 131c 	movw	r3, #4380	; 0x111c
 8008734:	687a      	ldr	r2, [r7, #4]
 8008736:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800873a:	4b53      	ldr	r3, [pc, #332]	; (8008888 <tcp_process+0x5d0>)
 800873c:	781b      	ldrb	r3, [r3, #0]
 800873e:	f003 0320 	and.w	r3, r3, #32
 8008742:	2b00      	cmp	r3, #0
 8008744:	d037      	beq.n	80087b6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	8b5b      	ldrh	r3, [r3, #26]
 800874a:	f043 0302 	orr.w	r3, r3, #2
 800874e:	b29a      	uxth	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2207      	movs	r2, #7
 8008758:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800875a:	e02c      	b.n	80087b6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800875c:	4b40      	ldr	r3, [pc, #256]	; (8008860 <tcp_process+0x5a8>)
 800875e:	6819      	ldr	r1, [r3, #0]
 8008760:	4b40      	ldr	r3, [pc, #256]	; (8008864 <tcp_process+0x5ac>)
 8008762:	881b      	ldrh	r3, [r3, #0]
 8008764:	461a      	mov	r2, r3
 8008766:	4b40      	ldr	r3, [pc, #256]	; (8008868 <tcp_process+0x5b0>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800876c:	4b3f      	ldr	r3, [pc, #252]	; (800886c <tcp_process+0x5b4>)
 800876e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008770:	885b      	ldrh	r3, [r3, #2]
 8008772:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8008774:	4a3d      	ldr	r2, [pc, #244]	; (800886c <tcp_process+0x5b4>)
 8008776:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8008778:	8812      	ldrh	r2, [r2, #0]
 800877a:	b292      	uxth	r2, r2
 800877c:	9202      	str	r2, [sp, #8]
 800877e:	9301      	str	r3, [sp, #4]
 8008780:	4b3b      	ldr	r3, [pc, #236]	; (8008870 <tcp_process+0x5b8>)
 8008782:	9300      	str	r3, [sp, #0]
 8008784:	4b3b      	ldr	r3, [pc, #236]	; (8008874 <tcp_process+0x5bc>)
 8008786:	4602      	mov	r2, r0
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f003 f837 	bl	800b7fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800878e:	e167      	b.n	8008a60 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8008790:	4b32      	ldr	r3, [pc, #200]	; (800885c <tcp_process+0x5a4>)
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	f000 8161 	beq.w	8008a60 <tcp_process+0x7a8>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087a2:	1e5a      	subs	r2, r3, #1
 80087a4:	4b30      	ldr	r3, [pc, #192]	; (8008868 <tcp_process+0x5b0>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	429a      	cmp	r2, r3
 80087aa:	f040 8159 	bne.w	8008a60 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f002 fe12 	bl	800b3d8 <tcp_rexmit>
      break;
 80087b4:	e154      	b.n	8008a60 <tcp_process+0x7a8>
 80087b6:	e153      	b.n	8008a60 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80087b8:	6878      	ldr	r0, [r7, #4]
 80087ba:	f000 fa71 	bl	8008ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80087be:	4b32      	ldr	r3, [pc, #200]	; (8008888 <tcp_process+0x5d0>)
 80087c0:	781b      	ldrb	r3, [r3, #0]
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	f000 814c 	beq.w	8008a64 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	8b5b      	ldrh	r3, [r3, #26]
 80087d0:	f043 0302 	orr.w	r3, r3, #2
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2207      	movs	r2, #7
 80087de:	751a      	strb	r2, [r3, #20]
      }
      break;
 80087e0:	e140      	b.n	8008a64 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f000 fa5c 	bl	8008ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80087e8:	4b27      	ldr	r3, [pc, #156]	; (8008888 <tcp_process+0x5d0>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	f003 0320 	and.w	r3, r3, #32
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d071      	beq.n	80088d8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80087f4:	4b19      	ldr	r3, [pc, #100]	; (800885c <tcp_process+0x5a4>)
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d060      	beq.n	80088c2 <tcp_process+0x60a>
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008804:	4b16      	ldr	r3, [pc, #88]	; (8008860 <tcp_process+0x5a8>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d15a      	bne.n	80088c2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8008810:	2b00      	cmp	r3, #0
 8008812:	d156      	bne.n	80088c2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	8b5b      	ldrh	r3, [r3, #26]
 8008818:	f043 0302 	orr.w	r3, r3, #2
 800881c:	b29a      	uxth	r2, r3
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7fe fdbe 	bl	80073a4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8008828:	4b18      	ldr	r3, [pc, #96]	; (800888c <tcp_process+0x5d4>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	687a      	ldr	r2, [r7, #4]
 800882e:	429a      	cmp	r2, r3
 8008830:	d105      	bne.n	800883e <tcp_process+0x586>
 8008832:	4b16      	ldr	r3, [pc, #88]	; (800888c <tcp_process+0x5d4>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	68db      	ldr	r3, [r3, #12]
 8008838:	4a14      	ldr	r2, [pc, #80]	; (800888c <tcp_process+0x5d4>)
 800883a:	6013      	str	r3, [r2, #0]
 800883c:	e02e      	b.n	800889c <tcp_process+0x5e4>
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <tcp_process+0x5d4>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	617b      	str	r3, [r7, #20]
 8008844:	e027      	b.n	8008896 <tcp_process+0x5de>
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	687a      	ldr	r2, [r7, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d11f      	bne.n	8008890 <tcp_process+0x5d8>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	68da      	ldr	r2, [r3, #12]
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	60da      	str	r2, [r3, #12]
 8008858:	e020      	b.n	800889c <tcp_process+0x5e4>
 800885a:	bf00      	nop
 800885c:	2000059c 	.word	0x2000059c
 8008860:	20000594 	.word	0x20000594
 8008864:	2000059a 	.word	0x2000059a
 8008868:	20000590 	.word	0x20000590
 800886c:	20000580 	.word	0x20000580
 8008870:	20003900 	.word	0x20003900
 8008874:	20003904 	.word	0x20003904
 8008878:	08012dc0 	.word	0x08012dc0
 800887c:	08013060 	.word	0x08013060
 8008880:	08012e0c 	.word	0x08012e0c
 8008884:	20000598 	.word	0x20000598
 8008888:	2000059d 	.word	0x2000059d
 800888c:	20006e64 	.word	0x20006e64
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	617b      	str	r3, [r7, #20]
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d1d4      	bne.n	8008846 <tcp_process+0x58e>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2200      	movs	r2, #0
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	4b77      	ldr	r3, [pc, #476]	; (8008a80 <tcp_process+0x7c8>)
 80088a4:	2201      	movs	r2, #1
 80088a6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	220a      	movs	r2, #10
 80088ac:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80088ae:	4b75      	ldr	r3, [pc, #468]	; (8008a84 <tcp_process+0x7cc>)
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	60da      	str	r2, [r3, #12]
 80088b6:	4a73      	ldr	r2, [pc, #460]	; (8008a84 <tcp_process+0x7cc>)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6013      	str	r3, [r2, #0]
 80088bc:	f003 f960 	bl	800bb80 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80088c0:	e0d2      	b.n	8008a68 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	8b5b      	ldrh	r3, [r3, #26]
 80088c6:	f043 0302 	orr.w	r3, r3, #2
 80088ca:	b29a      	uxth	r2, r3
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2208      	movs	r2, #8
 80088d4:	751a      	strb	r2, [r3, #20]
      break;
 80088d6:	e0c7      	b.n	8008a68 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80088d8:	4b6b      	ldr	r3, [pc, #428]	; (8008a88 <tcp_process+0x7d0>)
 80088da:	781b      	ldrb	r3, [r3, #0]
 80088dc:	f003 0310 	and.w	r3, r3, #16
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80c1 	beq.w	8008a68 <tcp_process+0x7b0>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80088ea:	4b68      	ldr	r3, [pc, #416]	; (8008a8c <tcp_process+0x7d4>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	f040 80ba 	bne.w	8008a68 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f040 80b5 	bne.w	8008a68 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2206      	movs	r2, #6
 8008902:	751a      	strb	r2, [r3, #20]
      break;
 8008904:	e0b0      	b.n	8008a68 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f9ca 	bl	8008ca0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800890c:	4b60      	ldr	r3, [pc, #384]	; (8008a90 <tcp_process+0x7d8>)
 800890e:	781b      	ldrb	r3, [r3, #0]
 8008910:	f003 0320 	and.w	r3, r3, #32
 8008914:	2b00      	cmp	r3, #0
 8008916:	f000 80a9 	beq.w	8008a6c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	8b5b      	ldrh	r3, [r3, #26]
 800891e:	f043 0302 	orr.w	r3, r3, #2
 8008922:	b29a      	uxth	r2, r3
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f7fe fd3b 	bl	80073a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800892e:	4b59      	ldr	r3, [pc, #356]	; (8008a94 <tcp_process+0x7dc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	429a      	cmp	r2, r3
 8008936:	d105      	bne.n	8008944 <tcp_process+0x68c>
 8008938:	4b56      	ldr	r3, [pc, #344]	; (8008a94 <tcp_process+0x7dc>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68db      	ldr	r3, [r3, #12]
 800893e:	4a55      	ldr	r2, [pc, #340]	; (8008a94 <tcp_process+0x7dc>)
 8008940:	6013      	str	r3, [r2, #0]
 8008942:	e013      	b.n	800896c <tcp_process+0x6b4>
 8008944:	4b53      	ldr	r3, [pc, #332]	; (8008a94 <tcp_process+0x7dc>)
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	613b      	str	r3, [r7, #16]
 800894a:	e00c      	b.n	8008966 <tcp_process+0x6ae>
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d104      	bne.n	8008960 <tcp_process+0x6a8>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	693b      	ldr	r3, [r7, #16]
 800895c:	60da      	str	r2, [r3, #12]
 800895e:	e005      	b.n	800896c <tcp_process+0x6b4>
 8008960:	693b      	ldr	r3, [r7, #16]
 8008962:	68db      	ldr	r3, [r3, #12]
 8008964:	613b      	str	r3, [r7, #16]
 8008966:	693b      	ldr	r3, [r7, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d1ef      	bne.n	800894c <tcp_process+0x694>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2200      	movs	r2, #0
 8008970:	60da      	str	r2, [r3, #12]
 8008972:	4b43      	ldr	r3, [pc, #268]	; (8008a80 <tcp_process+0x7c8>)
 8008974:	2201      	movs	r2, #1
 8008976:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	220a      	movs	r2, #10
 800897c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800897e:	4b41      	ldr	r3, [pc, #260]	; (8008a84 <tcp_process+0x7cc>)
 8008980:	681a      	ldr	r2, [r3, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	60da      	str	r2, [r3, #12]
 8008986:	4a3f      	ldr	r2, [pc, #252]	; (8008a84 <tcp_process+0x7cc>)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6013      	str	r3, [r2, #0]
 800898c:	f003 f8f8 	bl	800bb80 <tcp_timer_needed>
      }
      break;
 8008990:	e06c      	b.n	8008a6c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f984 	bl	8008ca0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008998:	4b3b      	ldr	r3, [pc, #236]	; (8008a88 <tcp_process+0x7d0>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 0310 	and.w	r3, r3, #16
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d065      	beq.n	8008a70 <tcp_process+0x7b8>
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80089a8:	4b38      	ldr	r3, [pc, #224]	; (8008a8c <tcp_process+0x7d4>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d15f      	bne.n	8008a70 <tcp_process+0x7b8>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d15b      	bne.n	8008a70 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7fe fcf3 	bl	80073a4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80089be:	4b35      	ldr	r3, [pc, #212]	; (8008a94 <tcp_process+0x7dc>)
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	429a      	cmp	r2, r3
 80089c6:	d105      	bne.n	80089d4 <tcp_process+0x71c>
 80089c8:	4b32      	ldr	r3, [pc, #200]	; (8008a94 <tcp_process+0x7dc>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	4a31      	ldr	r2, [pc, #196]	; (8008a94 <tcp_process+0x7dc>)
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e013      	b.n	80089fc <tcp_process+0x744>
 80089d4:	4b2f      	ldr	r3, [pc, #188]	; (8008a94 <tcp_process+0x7dc>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	e00c      	b.n	80089f6 <tcp_process+0x73e>
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	68db      	ldr	r3, [r3, #12]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d104      	bne.n	80089f0 <tcp_process+0x738>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	68da      	ldr	r2, [r3, #12]
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	60da      	str	r2, [r3, #12]
 80089ee:	e005      	b.n	80089fc <tcp_process+0x744>
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	68db      	ldr	r3, [r3, #12]
 80089f4:	60fb      	str	r3, [r7, #12]
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d1ef      	bne.n	80089dc <tcp_process+0x724>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2200      	movs	r2, #0
 8008a00:	60da      	str	r2, [r3, #12]
 8008a02:	4b1f      	ldr	r3, [pc, #124]	; (8008a80 <tcp_process+0x7c8>)
 8008a04:	2201      	movs	r2, #1
 8008a06:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	220a      	movs	r2, #10
 8008a0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8008a0e:	4b1d      	ldr	r3, [pc, #116]	; (8008a84 <tcp_process+0x7cc>)
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	60da      	str	r2, [r3, #12]
 8008a16:	4a1b      	ldr	r2, [pc, #108]	; (8008a84 <tcp_process+0x7cc>)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	6013      	str	r3, [r2, #0]
 8008a1c:	f003 f8b0 	bl	800bb80 <tcp_timer_needed>
      }
      break;
 8008a20:	e026      	b.n	8008a70 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f93c 	bl	8008ca0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8008a28:	4b17      	ldr	r3, [pc, #92]	; (8008a88 <tcp_process+0x7d0>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	f003 0310 	and.w	r3, r3, #16
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d01f      	beq.n	8008a74 <tcp_process+0x7bc>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a38:	4b14      	ldr	r3, [pc, #80]	; (8008a8c <tcp_process+0x7d4>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d119      	bne.n	8008a74 <tcp_process+0x7bc>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d115      	bne.n	8008a74 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8008a48:	4b11      	ldr	r3, [pc, #68]	; (8008a90 <tcp_process+0x7d8>)
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	f043 0310 	orr.w	r3, r3, #16
 8008a50:	b2da      	uxtb	r2, r3
 8008a52:	4b0f      	ldr	r3, [pc, #60]	; (8008a90 <tcp_process+0x7d8>)
 8008a54:	701a      	strb	r2, [r3, #0]
      }
      break;
 8008a56:	e00d      	b.n	8008a74 <tcp_process+0x7bc>
    default:
      break;
 8008a58:	bf00      	nop
 8008a5a:	e00c      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a5c:	bf00      	nop
 8008a5e:	e00a      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a60:	bf00      	nop
 8008a62:	e008      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a64:	bf00      	nop
 8008a66:	e006      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a68:	bf00      	nop
 8008a6a:	e004      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a6c:	bf00      	nop
 8008a6e:	e002      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a70:	bf00      	nop
 8008a72:	e000      	b.n	8008a76 <tcp_process+0x7be>
      break;
 8008a74:	bf00      	nop
  }
  return ERR_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3724      	adds	r7, #36	; 0x24
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd90      	pop	{r4, r7, pc}
 8008a80:	20006e60 	.word	0x20006e60
 8008a84:	20006e74 	.word	0x20006e74
 8008a88:	2000059c 	.word	0x2000059c
 8008a8c:	20000594 	.word	0x20000594
 8008a90:	2000059d 	.word	0x2000059d
 8008a94:	20006e64 	.word	0x20006e64

08008a98 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8008a98:	b590      	push	{r4, r7, lr}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
 8008aa0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d106      	bne.n	8008ab6 <tcp_oos_insert_segment+0x1e>
 8008aa8:	4b3b      	ldr	r3, [pc, #236]	; (8008b98 <tcp_oos_insert_segment+0x100>)
 8008aaa:	f240 421f 	movw	r2, #1055	; 0x41f
 8008aae:	493b      	ldr	r1, [pc, #236]	; (8008b9c <tcp_oos_insert_segment+0x104>)
 8008ab0:	483b      	ldr	r0, [pc, #236]	; (8008ba0 <tcp_oos_insert_segment+0x108>)
 8008ab2:	f008 f8d9 	bl	8010c68 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	899b      	ldrh	r3, [r3, #12]
 8008abc:	b29b      	uxth	r3, r3
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fa fe76 	bl	80037b0 <lwip_htons>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	b2db      	uxtb	r3, r3
 8008ac8:	f003 0301 	and.w	r3, r3, #1
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d028      	beq.n	8008b22 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8008ad0:	6838      	ldr	r0, [r7, #0]
 8008ad2:	f7fe f999 	bl	8006e08 <tcp_segs_free>
    next = NULL;
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	603b      	str	r3, [r7, #0]
 8008ada:	e056      	b.n	8008b8a <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	899b      	ldrh	r3, [r3, #12]
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f7fa fe63 	bl	80037b0 <lwip_htons>
 8008aea:	4603      	mov	r3, r0
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00d      	beq.n	8008b12 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	68db      	ldr	r3, [r3, #12]
 8008afa:	899b      	ldrh	r3, [r3, #12]
 8008afc:	b29c      	uxth	r4, r3
 8008afe:	2001      	movs	r0, #1
 8008b00:	f7fa fe56 	bl	80037b0 <lwip_htons>
 8008b04:	4603      	mov	r3, r0
 8008b06:	461a      	mov	r2, r3
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	4322      	orrs	r2, r4
 8008b0e:	b292      	uxth	r2, r2
 8008b10:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8008b1c:	68f8      	ldr	r0, [r7, #12]
 8008b1e:	f7fe f987 	bl	8006e30 <tcp_seg_free>
    while (next &&
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00e      	beq.n	8008b46 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	891b      	ldrh	r3, [r3, #8]
 8008b2c:	461a      	mov	r2, r3
 8008b2e:	4b1d      	ldr	r3, [pc, #116]	; (8008ba4 <tcp_oos_insert_segment+0x10c>)
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	441a      	add	r2, r3
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	68db      	ldr	r3, [r3, #12]
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	8909      	ldrh	r1, [r1, #8]
 8008b3e:	440b      	add	r3, r1
 8008b40:	1ad3      	subs	r3, r2, r3
    while (next &&
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	daca      	bge.n	8008adc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d01e      	beq.n	8008b8a <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	891b      	ldrh	r3, [r3, #8]
 8008b50:	461a      	mov	r2, r3
 8008b52:	4b14      	ldr	r3, [pc, #80]	; (8008ba4 <tcp_oos_insert_segment+0x10c>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	441a      	add	r2, r3
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	dd12      	ble.n	8008b8a <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8008b64:	683b      	ldr	r3, [r7, #0]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	b29a      	uxth	r2, r3
 8008b6c:	4b0d      	ldr	r3, [pc, #52]	; (8008ba4 <tcp_oos_insert_segment+0x10c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	b29b      	uxth	r3, r3
 8008b72:	1ad3      	subs	r3, r2, r3
 8008b74:	b29a      	uxth	r2, r3
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685a      	ldr	r2, [r3, #4]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	891b      	ldrh	r3, [r3, #8]
 8008b82:	4619      	mov	r1, r3
 8008b84:	4610      	mov	r0, r2
 8008b86:	f7fc fa9d 	bl	80050c4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	683a      	ldr	r2, [r7, #0]
 8008b8e:	601a      	str	r2, [r3, #0]
}
 8008b90:	bf00      	nop
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd90      	pop	{r4, r7, pc}
 8008b98:	08012dc0 	.word	0x08012dc0
 8008b9c:	08013080 	.word	0x08013080
 8008ba0:	08012e0c 	.word	0x08012e0c
 8008ba4:	20000590 	.word	0x20000590

08008ba8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8008ba8:	b5b0      	push	{r4, r5, r7, lr}
 8008baa:	b086      	sub	sp, #24
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	607a      	str	r2, [r7, #4]
 8008bb4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8008bb6:	e03e      	b.n	8008c36 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	f7fc fc8a 	bl	80054e0 <pbuf_clen>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008bd6:	8a7a      	ldrh	r2, [r7, #18]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d906      	bls.n	8008bea <tcp_free_acked_segments+0x42>
 8008bdc:	4b2a      	ldr	r3, [pc, #168]	; (8008c88 <tcp_free_acked_segments+0xe0>)
 8008bde:	f240 4257 	movw	r2, #1111	; 0x457
 8008be2:	492a      	ldr	r1, [pc, #168]	; (8008c8c <tcp_free_acked_segments+0xe4>)
 8008be4:	482a      	ldr	r0, [pc, #168]	; (8008c90 <tcp_free_acked_segments+0xe8>)
 8008be6:	f008 f83f 	bl	8010c68 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8008bf0:	8a7b      	ldrh	r3, [r7, #18]
 8008bf2:	1ad3      	subs	r3, r2, r3
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	891a      	ldrh	r2, [r3, #8]
 8008c00:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <tcp_free_acked_segments+0xec>)
 8008c02:	881b      	ldrh	r3, [r3, #0]
 8008c04:	4413      	add	r3, r2
 8008c06:	b29a      	uxth	r2, r3
 8008c08:	4b22      	ldr	r3, [pc, #136]	; (8008c94 <tcp_free_acked_segments+0xec>)
 8008c0a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8008c0c:	6978      	ldr	r0, [r7, #20]
 8008c0e:	f7fe f90f 	bl	8006e30 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d00c      	beq.n	8008c36 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d109      	bne.n	8008c36 <tcp_free_acked_segments+0x8e>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d106      	bne.n	8008c36 <tcp_free_acked_segments+0x8e>
 8008c28:	4b17      	ldr	r3, [pc, #92]	; (8008c88 <tcp_free_acked_segments+0xe0>)
 8008c2a:	f240 4262 	movw	r2, #1122	; 0x462
 8008c2e:	491a      	ldr	r1, [pc, #104]	; (8008c98 <tcp_free_acked_segments+0xf0>)
 8008c30:	4817      	ldr	r0, [pc, #92]	; (8008c90 <tcp_free_acked_segments+0xe8>)
 8008c32:	f008 f819 	bl	8010c68 <iprintf>
  while (seg_list != NULL &&
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d020      	beq.n	8008c7e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	68db      	ldr	r3, [r3, #12]
 8008c40:	685b      	ldr	r3, [r3, #4]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fa fdc9 	bl	80037da <lwip_htonl>
 8008c48:	4604      	mov	r4, r0
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	891b      	ldrh	r3, [r3, #8]
 8008c4e:	461d      	mov	r5, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	68db      	ldr	r3, [r3, #12]
 8008c54:	899b      	ldrh	r3, [r3, #12]
 8008c56:	b29b      	uxth	r3, r3
 8008c58:	4618      	mov	r0, r3
 8008c5a:	f7fa fda9 	bl	80037b0 <lwip_htons>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	b2db      	uxtb	r3, r3
 8008c62:	f003 0303 	and.w	r3, r3, #3
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <tcp_free_acked_segments+0xc6>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e000      	b.n	8008c70 <tcp_free_acked_segments+0xc8>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	442b      	add	r3, r5
 8008c72:	18e2      	adds	r2, r4, r3
 8008c74:	4b09      	ldr	r3, [pc, #36]	; (8008c9c <tcp_free_acked_segments+0xf4>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	dd9c      	ble.n	8008bb8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8008c7e:	68bb      	ldr	r3, [r7, #8]
}
 8008c80:	4618      	mov	r0, r3
 8008c82:	3718      	adds	r7, #24
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bdb0      	pop	{r4, r5, r7, pc}
 8008c88:	08012dc0 	.word	0x08012dc0
 8008c8c:	080130a8 	.word	0x080130a8
 8008c90:	08012e0c 	.word	0x08012e0c
 8008c94:	20000598 	.word	0x20000598
 8008c98:	080130d0 	.word	0x080130d0
 8008c9c:	20000594 	.word	0x20000594

08008ca0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8008ca0:	b5b0      	push	{r4, r5, r7, lr}
 8008ca2:	b094      	sub	sp, #80	; 0x50
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d106      	bne.n	8008cc0 <tcp_receive+0x20>
 8008cb2:	4ba6      	ldr	r3, [pc, #664]	; (8008f4c <tcp_receive+0x2ac>)
 8008cb4:	f240 427b 	movw	r2, #1147	; 0x47b
 8008cb8:	49a5      	ldr	r1, [pc, #660]	; (8008f50 <tcp_receive+0x2b0>)
 8008cba:	48a6      	ldr	r0, [pc, #664]	; (8008f54 <tcp_receive+0x2b4>)
 8008cbc:	f007 ffd4 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	7d1b      	ldrb	r3, [r3, #20]
 8008cc4:	2b03      	cmp	r3, #3
 8008cc6:	d806      	bhi.n	8008cd6 <tcp_receive+0x36>
 8008cc8:	4ba0      	ldr	r3, [pc, #640]	; (8008f4c <tcp_receive+0x2ac>)
 8008cca:	f240 427c 	movw	r2, #1148	; 0x47c
 8008cce:	49a2      	ldr	r1, [pc, #648]	; (8008f58 <tcp_receive+0x2b8>)
 8008cd0:	48a0      	ldr	r0, [pc, #640]	; (8008f54 <tcp_receive+0x2b4>)
 8008cd2:	f007 ffc9 	bl	8010c68 <iprintf>

  if (flags & TCP_ACK) {
 8008cd6:	4ba1      	ldr	r3, [pc, #644]	; (8008f5c <tcp_receive+0x2bc>)
 8008cd8:	781b      	ldrb	r3, [r3, #0]
 8008cda:	f003 0310 	and.w	r3, r3, #16
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	f000 8263 	beq.w	80091aa <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008cea:	461a      	mov	r2, r3
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cf0:	4413      	add	r3, r2
 8008cf2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cf8:	4b99      	ldr	r3, [pc, #612]	; (8008f60 <tcp_receive+0x2c0>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	db1b      	blt.n	8008d3a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d06:	4b96      	ldr	r3, [pc, #600]	; (8008f60 <tcp_receive+0x2c0>)
 8008d08:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d106      	bne.n	8008d1c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d12:	4b94      	ldr	r3, [pc, #592]	; (8008f64 <tcp_receive+0x2c4>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	1ad3      	subs	r3, r2, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	db0e      	blt.n	8008d3a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d20:	4b90      	ldr	r3, [pc, #576]	; (8008f64 <tcp_receive+0x2c4>)
 8008d22:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d125      	bne.n	8008d74 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8008d28:	4b8f      	ldr	r3, [pc, #572]	; (8008f68 <tcp_receive+0x2c8>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	89db      	ldrh	r3, [r3, #14]
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d91c      	bls.n	8008d74 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8008d3a:	4b8b      	ldr	r3, [pc, #556]	; (8008f68 <tcp_receive+0x2c8>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	89db      	ldrh	r3, [r3, #14]
 8008d40:	b29a      	uxth	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d54:	429a      	cmp	r2, r3
 8008d56:	d205      	bcs.n	8008d64 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8008d64:	4b7e      	ldr	r3, [pc, #504]	; (8008f60 <tcp_receive+0x2c0>)
 8008d66:	681a      	ldr	r2, [r3, #0]
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8008d6c:	4b7d      	ldr	r3, [pc, #500]	; (8008f64 <tcp_receive+0x2c4>)
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8008d74:	4b7b      	ldr	r3, [pc, #492]	; (8008f64 <tcp_receive+0x2c4>)
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d7c:	1ad3      	subs	r3, r2, r3
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dc58      	bgt.n	8008e34 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8008d82:	4b7a      	ldr	r3, [pc, #488]	; (8008f6c <tcp_receive+0x2cc>)
 8008d84:	881b      	ldrh	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d14b      	bne.n	8008e22 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8008d94:	4413      	add	r3, r2
 8008d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d142      	bne.n	8008e22 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	db3d      	blt.n	8008e22 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008daa:	4b6e      	ldr	r3, [pc, #440]	; (8008f64 <tcp_receive+0x2c4>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d137      	bne.n	8008e22 <tcp_receive+0x182>
              found_dupack = 1;
 8008db2:	2301      	movs	r3, #1
 8008db4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dbc:	2bff      	cmp	r3, #255	; 0xff
 8008dbe:	d007      	beq.n	8008dd0 <tcp_receive+0x130>
                ++pcb->dupacks;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	d91b      	bls.n	8008e12 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008de4:	4413      	add	r3, r2
 8008de6:	b29a      	uxth	r2, r3
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d30a      	bcc.n	8008e08 <tcp_receive+0x168>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008dfc:	4413      	add	r3, r2
 8008dfe:	b29a      	uxth	r2, r3
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008e06:	e004      	b.n	8008e12 <tcp_receive+0x172>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008e0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008e18:	2b02      	cmp	r3, #2
 8008e1a:	d902      	bls.n	8008e22 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f002 fb47 	bl	800b4b0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8008e22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	f040 8160 	bne.w	80090ea <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e32:	e15a      	b.n	80090ea <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8008e34:	4b4b      	ldr	r3, [pc, #300]	; (8008f64 <tcp_receive+0x2c4>)
 8008e36:	681a      	ldr	r2, [r3, #0]
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3c:	1ad3      	subs	r3, r2, r3
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f2c0 814d 	blt.w	80090e0 <tcp_receive+0x440>
 8008e46:	4b47      	ldr	r3, [pc, #284]	; (8008f64 <tcp_receive+0x2c4>)
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e4e:	1ad3      	subs	r3, r2, r3
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f300 8145 	bgt.w	80090e0 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	8b5b      	ldrh	r3, [r3, #26]
 8008e5a:	f003 0304 	and.w	r3, r3, #4
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d010      	beq.n	8008e84 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	8b5b      	ldrh	r3, [r3, #26]
 8008e66:	f023 0304 	bic.w	r3, r3, #4
 8008e6a:	b29a      	uxth	r2, r3
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2200      	movs	r2, #0
 8008e88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8008e92:	10db      	asrs	r3, r3, #3
 8008e94:	b21b      	sxth	r3, r3
 8008e96:	b29a      	uxth	r2, r3
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	b21a      	sxth	r2, r3
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8008eac:	4b2d      	ldr	r3, [pc, #180]	; (8008f64 <tcp_receive+0x2c4>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	b29a      	uxth	r2, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008eb6:	b29b      	uxth	r3, r3
 8008eb8:	1ad3      	subs	r3, r2, r3
 8008eba:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8008ec4:	4b27      	ldr	r3, [pc, #156]	; (8008f64 <tcp_receive+0x2c4>)
 8008ec6:	681a      	ldr	r2, [r3, #0]
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	7d1b      	ldrb	r3, [r3, #20]
 8008ed0:	2b03      	cmp	r3, #3
 8008ed2:	f240 8096 	bls.w	8009002 <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d244      	bcs.n	8008f70 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	8b5b      	ldrh	r3, [r3, #26]
 8008eea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d001      	beq.n	8008ef6 <tcp_receive+0x256>
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	e000      	b.n	8008ef8 <tcp_receive+0x258>
 8008ef6:	2302      	movs	r3, #2
 8008ef8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8008efc:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8008f00:	b29a      	uxth	r2, r3
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008f06:	fb12 f303 	smulbb	r3, r2, r3
 8008f0a:	b29b      	uxth	r3, r3
 8008f0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	bf28      	it	cs
 8008f12:	4613      	movcs	r3, r2
 8008f14:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f1c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f1e:	4413      	add	r3, r2
 8008f20:	b29a      	uxth	r2, r3
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d309      	bcc.n	8008f40 <tcp_receive+0x2a0>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008f32:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8008f34:	4413      	add	r3, r2
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f3e:	e060      	b.n	8009002 <tcp_receive+0x362>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008f46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008f4a:	e05a      	b.n	8009002 <tcp_receive+0x362>
 8008f4c:	08012dc0 	.word	0x08012dc0
 8008f50:	080130f0 	.word	0x080130f0
 8008f54:	08012e0c 	.word	0x08012e0c
 8008f58:	0801310c 	.word	0x0801310c
 8008f5c:	2000059c 	.word	0x2000059c
 8008f60:	20000590 	.word	0x20000590
 8008f64:	20000594 	.word	0x20000594
 8008f68:	20000580 	.word	0x20000580
 8008f6c:	2000059a 	.word	0x2000059a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f78:	4413      	add	r3, r2
 8008f7a:	b29a      	uxth	r2, r3
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8008f82:	429a      	cmp	r2, r3
 8008f84:	d309      	bcc.n	8008f9a <tcp_receive+0x2fa>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008f8e:	4413      	add	r3, r2
 8008f90:	b29a      	uxth	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8008f98:	e004      	b.n	8008fa4 <tcp_receive+0x304>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008fa0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d326      	bcc.n	8009002 <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fd4:	4413      	add	r3, r2
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d30a      	bcc.n	8008ff8 <tcp_receive+0x358>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8008fec:	4413      	add	r3, r2
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8008ff6:	e004      	b.n	8009002 <tcp_receive+0x362>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008ffe:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800900a:	4a98      	ldr	r2, [pc, #608]	; (800926c <tcp_receive+0x5cc>)
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f7ff fdcb 	bl	8008ba8 <tcp_free_acked_segments>
 8009012:	4602      	mov	r2, r0
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009020:	4a93      	ldr	r2, [pc, #588]	; (8009270 <tcp_receive+0x5d0>)
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fdc0 	bl	8008ba8 <tcp_free_acked_segments>
 8009028:	4602      	mov	r2, r0
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009032:	2b00      	cmp	r3, #0
 8009034:	d104      	bne.n	8009040 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800903c:	861a      	strh	r2, [r3, #48]	; 0x30
 800903e:	e002      	b.n	8009046 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009050:	2b00      	cmp	r3, #0
 8009052:	d103      	bne.n	800905c <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2200      	movs	r2, #0
 8009058:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8009062:	4b84      	ldr	r3, [pc, #528]	; (8009274 <tcp_receive+0x5d4>)
 8009064:	881b      	ldrh	r3, [r3, #0]
 8009066:	4413      	add	r3, r2
 8009068:	b29a      	uxth	r2, r3
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	8b5b      	ldrh	r3, [r3, #26]
 8009074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009078:	2b00      	cmp	r3, #0
 800907a:	d035      	beq.n	80090e8 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009080:	2b00      	cmp	r3, #0
 8009082:	d118      	bne.n	80090b6 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009094:	68db      	ldr	r3, [r3, #12]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	4618      	mov	r0, r3
 800909a:	f7fa fb9e 	bl	80037da <lwip_htonl>
 800909e:	4603      	mov	r3, r0
 80090a0:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	dc20      	bgt.n	80090e8 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	8b5b      	ldrh	r3, [r3, #26]
 80090aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090ae:	b29a      	uxth	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80090b4:	e018      	b.n	80090e8 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	4618      	mov	r0, r3
 80090c4:	f7fa fb89 	bl	80037da <lwip_htonl>
 80090c8:	4603      	mov	r3, r0
 80090ca:	1ae3      	subs	r3, r4, r3
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	dc0b      	bgt.n	80090e8 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	8b5b      	ldrh	r3, [r3, #26]
 80090d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090d8:	b29a      	uxth	r2, r3
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80090de:	e003      	b.n	80090e8 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f002 fbdd 	bl	800b8a0 <tcp_send_empty_ack>
 80090e6:	e000      	b.n	80090ea <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80090e8:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d05b      	beq.n	80091aa <tcp_receive+0x50a>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090f6:	4b60      	ldr	r3, [pc, #384]	; (8009278 <tcp_receive+0x5d8>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	da54      	bge.n	80091aa <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8009100:	4b5e      	ldr	r3, [pc, #376]	; (800927c <tcp_receive+0x5dc>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	b29a      	uxth	r2, r3
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800910a:	b29b      	uxth	r3, r3
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	b29b      	uxth	r3, r3
 8009110:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8009114:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800911e:	10db      	asrs	r3, r3, #3
 8009120:	b21b      	sxth	r3, r3
 8009122:	b29b      	uxth	r3, r3
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	b29b      	uxth	r3, r3
 8009128:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8009132:	b29a      	uxth	r2, r3
 8009134:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009138:	4413      	add	r3, r2
 800913a:	b29b      	uxth	r3, r3
 800913c:	b21a      	sxth	r2, r3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8009142:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8009146:	2b00      	cmp	r3, #0
 8009148:	da05      	bge.n	8009156 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800914a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800914e:	425b      	negs	r3, r3
 8009150:	b29b      	uxth	r3, r3
 8009152:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8009156:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009160:	109b      	asrs	r3, r3, #2
 8009162:	b21b      	sxth	r3, r3
 8009164:	b29b      	uxth	r3, r3
 8009166:	1ad3      	subs	r3, r2, r3
 8009168:	b29b      	uxth	r3, r3
 800916a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009174:	b29a      	uxth	r2, r3
 8009176:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800917a:	4413      	add	r3, r2
 800917c:	b29b      	uxth	r3, r3
 800917e:	b21a      	sxth	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800918a:	10db      	asrs	r3, r3, #3
 800918c:	b21b      	sxth	r3, r3
 800918e:	b29a      	uxth	r2, r3
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8009196:	b29b      	uxth	r3, r3
 8009198:	4413      	add	r3, r2
 800919a:	b29b      	uxth	r3, r3
 800919c:	b21a      	sxth	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80091aa:	4b35      	ldr	r3, [pc, #212]	; (8009280 <tcp_receive+0x5e0>)
 80091ac:	881b      	ldrh	r3, [r3, #0]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	f000 84e1 	beq.w	8009b76 <tcp_receive+0xed6>
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	7d1b      	ldrb	r3, [r3, #20]
 80091b8:	2b06      	cmp	r3, #6
 80091ba:	f200 84dc 	bhi.w	8009b76 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091c2:	4b30      	ldr	r3, [pc, #192]	; (8009284 <tcp_receive+0x5e4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	3b01      	subs	r3, #1
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	f2c0 808e 	blt.w	80092ec <tcp_receive+0x64c>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091d4:	4b2a      	ldr	r3, [pc, #168]	; (8009280 <tcp_receive+0x5e0>)
 80091d6:	881b      	ldrh	r3, [r3, #0]
 80091d8:	4619      	mov	r1, r3
 80091da:	4b2a      	ldr	r3, [pc, #168]	; (8009284 <tcp_receive+0x5e4>)
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	440b      	add	r3, r1
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	3301      	adds	r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f300 8081 	bgt.w	80092ec <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80091ea:	4b27      	ldr	r3, [pc, #156]	; (8009288 <tcp_receive+0x5e8>)
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80091f4:	4b23      	ldr	r3, [pc, #140]	; (8009284 <tcp_receive+0x5e4>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	1ad3      	subs	r3, r2, r3
 80091fa:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80091fc:	4b22      	ldr	r3, [pc, #136]	; (8009288 <tcp_receive+0x5e8>)
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d106      	bne.n	8009212 <tcp_receive+0x572>
 8009204:	4b21      	ldr	r3, [pc, #132]	; (800928c <tcp_receive+0x5ec>)
 8009206:	f240 5294 	movw	r2, #1428	; 0x594
 800920a:	4921      	ldr	r1, [pc, #132]	; (8009290 <tcp_receive+0x5f0>)
 800920c:	4821      	ldr	r0, [pc, #132]	; (8009294 <tcp_receive+0x5f4>)
 800920e:	f007 fd2b 	bl	8010c68 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8009212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009214:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009218:	4293      	cmp	r3, r2
 800921a:	d906      	bls.n	800922a <tcp_receive+0x58a>
 800921c:	4b1b      	ldr	r3, [pc, #108]	; (800928c <tcp_receive+0x5ec>)
 800921e:	f240 5295 	movw	r2, #1429	; 0x595
 8009222:	491d      	ldr	r1, [pc, #116]	; (8009298 <tcp_receive+0x5f8>)
 8009224:	481b      	ldr	r0, [pc, #108]	; (8009294 <tcp_receive+0x5f4>)
 8009226:	f007 fd1f 	bl	8010c68 <iprintf>
      off = (u16_t)off32;
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8009230:	4b15      	ldr	r3, [pc, #84]	; (8009288 <tcp_receive+0x5e8>)
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	891b      	ldrh	r3, [r3, #8]
 8009236:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800923a:	429a      	cmp	r2, r3
 800923c:	d906      	bls.n	800924c <tcp_receive+0x5ac>
 800923e:	4b13      	ldr	r3, [pc, #76]	; (800928c <tcp_receive+0x5ec>)
 8009240:	f240 5297 	movw	r2, #1431	; 0x597
 8009244:	4915      	ldr	r1, [pc, #84]	; (800929c <tcp_receive+0x5fc>)
 8009246:	4813      	ldr	r0, [pc, #76]	; (8009294 <tcp_receive+0x5f4>)
 8009248:	f007 fd0e 	bl	8010c68 <iprintf>
      inseg.len -= off;
 800924c:	4b0e      	ldr	r3, [pc, #56]	; (8009288 <tcp_receive+0x5e8>)
 800924e:	891a      	ldrh	r2, [r3, #8]
 8009250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	b29a      	uxth	r2, r3
 8009258:	4b0b      	ldr	r3, [pc, #44]	; (8009288 <tcp_receive+0x5e8>)
 800925a:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800925c:	4b0a      	ldr	r3, [pc, #40]	; (8009288 <tcp_receive+0x5e8>)
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	891a      	ldrh	r2, [r3, #8]
 8009262:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800926a:	e029      	b.n	80092c0 <tcp_receive+0x620>
 800926c:	08013128 	.word	0x08013128
 8009270:	08013130 	.word	0x08013130
 8009274:	20000598 	.word	0x20000598
 8009278:	20000594 	.word	0x20000594
 800927c:	20006e68 	.word	0x20006e68
 8009280:	2000059a 	.word	0x2000059a
 8009284:	20000590 	.word	0x20000590
 8009288:	20000570 	.word	0x20000570
 800928c:	08012dc0 	.word	0x08012dc0
 8009290:	08013138 	.word	0x08013138
 8009294:	08012e0c 	.word	0x08012e0c
 8009298:	08013148 	.word	0x08013148
 800929c:	08013158 	.word	0x08013158
        off -= p->len;
 80092a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092a2:	895b      	ldrh	r3, [r3, #10]
 80092a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80092a8:	1ad3      	subs	r3, r2, r3
 80092aa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80092ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80092b2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80092b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092b6:	2200      	movs	r2, #0
 80092b8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80092ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80092c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80092c2:	895b      	ldrh	r3, [r3, #10]
 80092c4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d8e9      	bhi.n	80092a0 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80092cc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80092d0:	4619      	mov	r1, r3
 80092d2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80092d4:	f7fb fff6 	bl	80052c4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092dc:	4a91      	ldr	r2, [pc, #580]	; (8009524 <tcp_receive+0x884>)
 80092de:	6013      	str	r3, [r2, #0]
 80092e0:	4b91      	ldr	r3, [pc, #580]	; (8009528 <tcp_receive+0x888>)
 80092e2:	68db      	ldr	r3, [r3, #12]
 80092e4:	4a8f      	ldr	r2, [pc, #572]	; (8009524 <tcp_receive+0x884>)
 80092e6:	6812      	ldr	r2, [r2, #0]
 80092e8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80092ea:	e00d      	b.n	8009308 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80092ec:	4b8d      	ldr	r3, [pc, #564]	; (8009524 <tcp_receive+0x884>)
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	da06      	bge.n	8009308 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8b5b      	ldrh	r3, [r3, #26]
 80092fe:	f043 0302 	orr.w	r3, r3, #2
 8009302:	b29a      	uxth	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009308:	4b86      	ldr	r3, [pc, #536]	; (8009524 <tcp_receive+0x884>)
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009310:	1ad3      	subs	r3, r2, r3
 8009312:	2b00      	cmp	r3, #0
 8009314:	f2c0 842a 	blt.w	8009b6c <tcp_receive+0xecc>
 8009318:	4b82      	ldr	r3, [pc, #520]	; (8009524 <tcp_receive+0x884>)
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009324:	440b      	add	r3, r1
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	3301      	adds	r3, #1
 800932a:	2b00      	cmp	r3, #0
 800932c:	f300 841e 	bgt.w	8009b6c <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009334:	4b7b      	ldr	r3, [pc, #492]	; (8009524 <tcp_receive+0x884>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	429a      	cmp	r2, r3
 800933a:	f040 829a 	bne.w	8009872 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800933e:	4b7a      	ldr	r3, [pc, #488]	; (8009528 <tcp_receive+0x888>)
 8009340:	891c      	ldrh	r4, [r3, #8]
 8009342:	4b79      	ldr	r3, [pc, #484]	; (8009528 <tcp_receive+0x888>)
 8009344:	68db      	ldr	r3, [r3, #12]
 8009346:	899b      	ldrh	r3, [r3, #12]
 8009348:	b29b      	uxth	r3, r3
 800934a:	4618      	mov	r0, r3
 800934c:	f7fa fa30 	bl	80037b0 <lwip_htons>
 8009350:	4603      	mov	r3, r0
 8009352:	b2db      	uxtb	r3, r3
 8009354:	f003 0303 	and.w	r3, r3, #3
 8009358:	2b00      	cmp	r3, #0
 800935a:	d001      	beq.n	8009360 <tcp_receive+0x6c0>
 800935c:	2301      	movs	r3, #1
 800935e:	e000      	b.n	8009362 <tcp_receive+0x6c2>
 8009360:	2300      	movs	r3, #0
 8009362:	4423      	add	r3, r4
 8009364:	b29a      	uxth	r2, r3
 8009366:	4b71      	ldr	r3, [pc, #452]	; (800952c <tcp_receive+0x88c>)
 8009368:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800936e:	4b6f      	ldr	r3, [pc, #444]	; (800952c <tcp_receive+0x88c>)
 8009370:	881b      	ldrh	r3, [r3, #0]
 8009372:	429a      	cmp	r2, r3
 8009374:	d275      	bcs.n	8009462 <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009376:	4b6c      	ldr	r3, [pc, #432]	; (8009528 <tcp_receive+0x888>)
 8009378:	68db      	ldr	r3, [r3, #12]
 800937a:	899b      	ldrh	r3, [r3, #12]
 800937c:	b29b      	uxth	r3, r3
 800937e:	4618      	mov	r0, r3
 8009380:	f7fa fa16 	bl	80037b0 <lwip_htons>
 8009384:	4603      	mov	r3, r0
 8009386:	b2db      	uxtb	r3, r3
 8009388:	f003 0301 	and.w	r3, r3, #1
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01f      	beq.n	80093d0 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8009390:	4b65      	ldr	r3, [pc, #404]	; (8009528 <tcp_receive+0x888>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	899b      	ldrh	r3, [r3, #12]
 8009396:	b29b      	uxth	r3, r3
 8009398:	b21b      	sxth	r3, r3
 800939a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800939e:	b21c      	sxth	r4, r3
 80093a0:	4b61      	ldr	r3, [pc, #388]	; (8009528 <tcp_receive+0x888>)
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	899b      	ldrh	r3, [r3, #12]
 80093a6:	b29b      	uxth	r3, r3
 80093a8:	4618      	mov	r0, r3
 80093aa:	f7fa fa01 	bl	80037b0 <lwip_htons>
 80093ae:	4603      	mov	r3, r0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	b29b      	uxth	r3, r3
 80093b4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4618      	mov	r0, r3
 80093bc:	f7fa f9f8 	bl	80037b0 <lwip_htons>
 80093c0:	4603      	mov	r3, r0
 80093c2:	b21b      	sxth	r3, r3
 80093c4:	4323      	orrs	r3, r4
 80093c6:	b21a      	sxth	r2, r3
 80093c8:	4b57      	ldr	r3, [pc, #348]	; (8009528 <tcp_receive+0x888>)
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	b292      	uxth	r2, r2
 80093ce:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80093d4:	4b54      	ldr	r3, [pc, #336]	; (8009528 <tcp_receive+0x888>)
 80093d6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80093d8:	4b53      	ldr	r3, [pc, #332]	; (8009528 <tcp_receive+0x888>)
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	899b      	ldrh	r3, [r3, #12]
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7fa f9e5 	bl	80037b0 <lwip_htons>
 80093e6:	4603      	mov	r3, r0
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	f003 0302 	and.w	r3, r3, #2
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d005      	beq.n	80093fe <tcp_receive+0x75e>
            inseg.len -= 1;
 80093f2:	4b4d      	ldr	r3, [pc, #308]	; (8009528 <tcp_receive+0x888>)
 80093f4:	891b      	ldrh	r3, [r3, #8]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	b29a      	uxth	r2, r3
 80093fa:	4b4b      	ldr	r3, [pc, #300]	; (8009528 <tcp_receive+0x888>)
 80093fc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80093fe:	4b4a      	ldr	r3, [pc, #296]	; (8009528 <tcp_receive+0x888>)
 8009400:	685a      	ldr	r2, [r3, #4]
 8009402:	4b49      	ldr	r3, [pc, #292]	; (8009528 <tcp_receive+0x888>)
 8009404:	891b      	ldrh	r3, [r3, #8]
 8009406:	4619      	mov	r1, r3
 8009408:	4610      	mov	r0, r2
 800940a:	f7fb fe5b 	bl	80050c4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800940e:	4b46      	ldr	r3, [pc, #280]	; (8009528 <tcp_receive+0x888>)
 8009410:	891c      	ldrh	r4, [r3, #8]
 8009412:	4b45      	ldr	r3, [pc, #276]	; (8009528 <tcp_receive+0x888>)
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	899b      	ldrh	r3, [r3, #12]
 8009418:	b29b      	uxth	r3, r3
 800941a:	4618      	mov	r0, r3
 800941c:	f7fa f9c8 	bl	80037b0 <lwip_htons>
 8009420:	4603      	mov	r3, r0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	f003 0303 	and.w	r3, r3, #3
 8009428:	2b00      	cmp	r3, #0
 800942a:	d001      	beq.n	8009430 <tcp_receive+0x790>
 800942c:	2301      	movs	r3, #1
 800942e:	e000      	b.n	8009432 <tcp_receive+0x792>
 8009430:	2300      	movs	r3, #0
 8009432:	4423      	add	r3, r4
 8009434:	b29a      	uxth	r2, r3
 8009436:	4b3d      	ldr	r3, [pc, #244]	; (800952c <tcp_receive+0x88c>)
 8009438:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800943a:	4b3c      	ldr	r3, [pc, #240]	; (800952c <tcp_receive+0x88c>)
 800943c:	881b      	ldrh	r3, [r3, #0]
 800943e:	461a      	mov	r2, r3
 8009440:	4b38      	ldr	r3, [pc, #224]	; (8009524 <tcp_receive+0x884>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	441a      	add	r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800944a:	6879      	ldr	r1, [r7, #4]
 800944c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800944e:	440b      	add	r3, r1
 8009450:	429a      	cmp	r2, r3
 8009452:	d006      	beq.n	8009462 <tcp_receive+0x7c2>
 8009454:	4b36      	ldr	r3, [pc, #216]	; (8009530 <tcp_receive+0x890>)
 8009456:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800945a:	4936      	ldr	r1, [pc, #216]	; (8009534 <tcp_receive+0x894>)
 800945c:	4836      	ldr	r0, [pc, #216]	; (8009538 <tcp_receive+0x898>)
 800945e:	f007 fc03 	bl	8010c68 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009466:	2b00      	cmp	r3, #0
 8009468:	f000 80e7 	beq.w	800963a <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800946c:	4b2e      	ldr	r3, [pc, #184]	; (8009528 <tcp_receive+0x888>)
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	899b      	ldrh	r3, [r3, #12]
 8009472:	b29b      	uxth	r3, r3
 8009474:	4618      	mov	r0, r3
 8009476:	f7fa f99b 	bl	80037b0 <lwip_htons>
 800947a:	4603      	mov	r3, r0
 800947c:	b2db      	uxtb	r3, r3
 800947e:	f003 0301 	and.w	r3, r3, #1
 8009482:	2b00      	cmp	r3, #0
 8009484:	d010      	beq.n	80094a8 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8009486:	e00a      	b.n	800949e <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800948c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009492:	681a      	ldr	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f7fd fcc9 	bl	8006e30 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d1f0      	bne.n	8009488 <tcp_receive+0x7e8>
 80094a6:	e0c8      	b.n	800963a <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80094ac:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80094ae:	e052      	b.n	8009556 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80094b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b2:	68db      	ldr	r3, [r3, #12]
 80094b4:	899b      	ldrh	r3, [r3, #12]
 80094b6:	b29b      	uxth	r3, r3
 80094b8:	4618      	mov	r0, r3
 80094ba:	f7fa f979 	bl	80037b0 <lwip_htons>
 80094be:	4603      	mov	r3, r0
 80094c0:	b2db      	uxtb	r3, r3
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d03d      	beq.n	8009546 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80094ca:	4b17      	ldr	r3, [pc, #92]	; (8009528 <tcp_receive+0x888>)
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	899b      	ldrh	r3, [r3, #12]
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	4618      	mov	r0, r3
 80094d4:	f7fa f96c 	bl	80037b0 <lwip_htons>
 80094d8:	4603      	mov	r3, r0
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d130      	bne.n	8009546 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80094e4:	4b10      	ldr	r3, [pc, #64]	; (8009528 <tcp_receive+0x888>)
 80094e6:	68db      	ldr	r3, [r3, #12]
 80094e8:	899b      	ldrh	r3, [r3, #12]
 80094ea:	b29c      	uxth	r4, r3
 80094ec:	2001      	movs	r0, #1
 80094ee:	f7fa f95f 	bl	80037b0 <lwip_htons>
 80094f2:	4603      	mov	r3, r0
 80094f4:	461a      	mov	r2, r3
 80094f6:	4b0c      	ldr	r3, [pc, #48]	; (8009528 <tcp_receive+0x888>)
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	4322      	orrs	r2, r4
 80094fc:	b292      	uxth	r2, r2
 80094fe:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8009500:	4b09      	ldr	r3, [pc, #36]	; (8009528 <tcp_receive+0x888>)
 8009502:	891c      	ldrh	r4, [r3, #8]
 8009504:	4b08      	ldr	r3, [pc, #32]	; (8009528 <tcp_receive+0x888>)
 8009506:	68db      	ldr	r3, [r3, #12]
 8009508:	899b      	ldrh	r3, [r3, #12]
 800950a:	b29b      	uxth	r3, r3
 800950c:	4618      	mov	r0, r3
 800950e:	f7fa f94f 	bl	80037b0 <lwip_htons>
 8009512:	4603      	mov	r3, r0
 8009514:	b2db      	uxtb	r3, r3
 8009516:	f003 0303 	and.w	r3, r3, #3
 800951a:	2b00      	cmp	r3, #0
 800951c:	d00e      	beq.n	800953c <tcp_receive+0x89c>
 800951e:	2301      	movs	r3, #1
 8009520:	e00d      	b.n	800953e <tcp_receive+0x89e>
 8009522:	bf00      	nop
 8009524:	20000590 	.word	0x20000590
 8009528:	20000570 	.word	0x20000570
 800952c:	2000059a 	.word	0x2000059a
 8009530:	08012dc0 	.word	0x08012dc0
 8009534:	08013168 	.word	0x08013168
 8009538:	08012e0c 	.word	0x08012e0c
 800953c:	2300      	movs	r3, #0
 800953e:	4423      	add	r3, r4
 8009540:	b29a      	uxth	r2, r3
 8009542:	4b98      	ldr	r3, [pc, #608]	; (80097a4 <tcp_receive+0xb04>)
 8009544:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8009546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009548:	613b      	str	r3, [r7, #16]
              next = next->next;
 800954a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8009550:	6938      	ldr	r0, [r7, #16]
 8009552:	f7fd fc6d 	bl	8006e30 <tcp_seg_free>
            while (next &&
 8009556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009558:	2b00      	cmp	r3, #0
 800955a:	d00e      	beq.n	800957a <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800955c:	4b91      	ldr	r3, [pc, #580]	; (80097a4 <tcp_receive+0xb04>)
 800955e:	881b      	ldrh	r3, [r3, #0]
 8009560:	461a      	mov	r2, r3
 8009562:	4b91      	ldr	r3, [pc, #580]	; (80097a8 <tcp_receive+0xb08>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	441a      	add	r2, r3
 8009568:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009570:	8909      	ldrh	r1, [r1, #8]
 8009572:	440b      	add	r3, r1
 8009574:	1ad3      	subs	r3, r2, r3
            while (next &&
 8009576:	2b00      	cmp	r3, #0
 8009578:	da9a      	bge.n	80094b0 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800957a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800957c:	2b00      	cmp	r3, #0
 800957e:	d059      	beq.n	8009634 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8009580:	4b88      	ldr	r3, [pc, #544]	; (80097a4 <tcp_receive+0xb04>)
 8009582:	881b      	ldrh	r3, [r3, #0]
 8009584:	461a      	mov	r2, r3
 8009586:	4b88      	ldr	r3, [pc, #544]	; (80097a8 <tcp_receive+0xb08>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	441a      	add	r2, r3
 800958c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	1ad3      	subs	r3, r2, r3
            if (next &&
 8009594:	2b00      	cmp	r3, #0
 8009596:	dd4d      	ble.n	8009634 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8009598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800959a:	68db      	ldr	r3, [r3, #12]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	b29a      	uxth	r2, r3
 80095a0:	4b81      	ldr	r3, [pc, #516]	; (80097a8 <tcp_receive+0xb08>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	1ad3      	subs	r3, r2, r3
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	4b80      	ldr	r3, [pc, #512]	; (80097ac <tcp_receive+0xb0c>)
 80095ac:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80095ae:	4b7f      	ldr	r3, [pc, #508]	; (80097ac <tcp_receive+0xb0c>)
 80095b0:	68db      	ldr	r3, [r3, #12]
 80095b2:	899b      	ldrh	r3, [r3, #12]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	4618      	mov	r0, r3
 80095b8:	f7fa f8fa 	bl	80037b0 <lwip_htons>
 80095bc:	4603      	mov	r3, r0
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	f003 0302 	and.w	r3, r3, #2
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d005      	beq.n	80095d4 <tcp_receive+0x934>
                inseg.len -= 1;
 80095c8:	4b78      	ldr	r3, [pc, #480]	; (80097ac <tcp_receive+0xb0c>)
 80095ca:	891b      	ldrh	r3, [r3, #8]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b29a      	uxth	r2, r3
 80095d0:	4b76      	ldr	r3, [pc, #472]	; (80097ac <tcp_receive+0xb0c>)
 80095d2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80095d4:	4b75      	ldr	r3, [pc, #468]	; (80097ac <tcp_receive+0xb0c>)
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	4b74      	ldr	r3, [pc, #464]	; (80097ac <tcp_receive+0xb0c>)
 80095da:	891b      	ldrh	r3, [r3, #8]
 80095dc:	4619      	mov	r1, r3
 80095de:	4610      	mov	r0, r2
 80095e0:	f7fb fd70 	bl	80050c4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80095e4:	4b71      	ldr	r3, [pc, #452]	; (80097ac <tcp_receive+0xb0c>)
 80095e6:	891c      	ldrh	r4, [r3, #8]
 80095e8:	4b70      	ldr	r3, [pc, #448]	; (80097ac <tcp_receive+0xb0c>)
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	899b      	ldrh	r3, [r3, #12]
 80095ee:	b29b      	uxth	r3, r3
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fa f8dd 	bl	80037b0 <lwip_htons>
 80095f6:	4603      	mov	r3, r0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f003 0303 	and.w	r3, r3, #3
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d001      	beq.n	8009606 <tcp_receive+0x966>
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <tcp_receive+0x968>
 8009606:	2300      	movs	r3, #0
 8009608:	4423      	add	r3, r4
 800960a:	b29a      	uxth	r2, r3
 800960c:	4b65      	ldr	r3, [pc, #404]	; (80097a4 <tcp_receive+0xb04>)
 800960e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8009610:	4b64      	ldr	r3, [pc, #400]	; (80097a4 <tcp_receive+0xb04>)
 8009612:	881b      	ldrh	r3, [r3, #0]
 8009614:	461a      	mov	r2, r3
 8009616:	4b64      	ldr	r3, [pc, #400]	; (80097a8 <tcp_receive+0xb08>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	441a      	add	r2, r3
 800961c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800961e:	68db      	ldr	r3, [r3, #12]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d006      	beq.n	8009634 <tcp_receive+0x994>
 8009626:	4b62      	ldr	r3, [pc, #392]	; (80097b0 <tcp_receive+0xb10>)
 8009628:	f240 52fd 	movw	r2, #1533	; 0x5fd
 800962c:	4961      	ldr	r1, [pc, #388]	; (80097b4 <tcp_receive+0xb14>)
 800962e:	4862      	ldr	r0, [pc, #392]	; (80097b8 <tcp_receive+0xb18>)
 8009630:	f007 fb1a 	bl	8010c68 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009638:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800963a:	4b5a      	ldr	r3, [pc, #360]	; (80097a4 <tcp_receive+0xb04>)
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	4b59      	ldr	r3, [pc, #356]	; (80097a8 <tcp_receive+0xb08>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	441a      	add	r2, r3
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800964e:	4b55      	ldr	r3, [pc, #340]	; (80097a4 <tcp_receive+0xb04>)
 8009650:	881b      	ldrh	r3, [r3, #0]
 8009652:	429a      	cmp	r2, r3
 8009654:	d206      	bcs.n	8009664 <tcp_receive+0x9c4>
 8009656:	4b56      	ldr	r3, [pc, #344]	; (80097b0 <tcp_receive+0xb10>)
 8009658:	f240 6207 	movw	r2, #1543	; 0x607
 800965c:	4957      	ldr	r1, [pc, #348]	; (80097bc <tcp_receive+0xb1c>)
 800965e:	4856      	ldr	r0, [pc, #344]	; (80097b8 <tcp_receive+0xb18>)
 8009660:	f007 fb02 	bl	8010c68 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8009668:	4b4e      	ldr	r3, [pc, #312]	; (80097a4 <tcp_receive+0xb04>)
 800966a:	881b      	ldrh	r3, [r3, #0]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	b29a      	uxth	r2, r3
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7fc fda1 	bl	80061bc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800967a:	4b4c      	ldr	r3, [pc, #304]	; (80097ac <tcp_receive+0xb0c>)
 800967c:	685b      	ldr	r3, [r3, #4]
 800967e:	891b      	ldrh	r3, [r3, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	d006      	beq.n	8009692 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8009684:	4b49      	ldr	r3, [pc, #292]	; (80097ac <tcp_receive+0xb0c>)
 8009686:	685b      	ldr	r3, [r3, #4]
 8009688:	4a4d      	ldr	r2, [pc, #308]	; (80097c0 <tcp_receive+0xb20>)
 800968a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800968c:	4b47      	ldr	r3, [pc, #284]	; (80097ac <tcp_receive+0xb0c>)
 800968e:	2200      	movs	r2, #0
 8009690:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8009692:	4b46      	ldr	r3, [pc, #280]	; (80097ac <tcp_receive+0xb0c>)
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	899b      	ldrh	r3, [r3, #12]
 8009698:	b29b      	uxth	r3, r3
 800969a:	4618      	mov	r0, r3
 800969c:	f7fa f888 	bl	80037b0 <lwip_htons>
 80096a0:	4603      	mov	r3, r0
 80096a2:	b2db      	uxtb	r3, r3
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 80b8 	beq.w	800981e <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80096ae:	4b45      	ldr	r3, [pc, #276]	; (80097c4 <tcp_receive+0xb24>)
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f043 0320 	orr.w	r3, r3, #32
 80096b6:	b2da      	uxtb	r2, r3
 80096b8:	4b42      	ldr	r3, [pc, #264]	; (80097c4 <tcp_receive+0xb24>)
 80096ba:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80096bc:	e0af      	b.n	800981e <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096c2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	685b      	ldr	r3, [r3, #4]
 80096cc:	4a36      	ldr	r2, [pc, #216]	; (80097a8 <tcp_receive+0xb08>)
 80096ce:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	891b      	ldrh	r3, [r3, #8]
 80096d4:	461c      	mov	r4, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	899b      	ldrh	r3, [r3, #12]
 80096dc:	b29b      	uxth	r3, r3
 80096de:	4618      	mov	r0, r3
 80096e0:	f7fa f866 	bl	80037b0 <lwip_htons>
 80096e4:	4603      	mov	r3, r0
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f003 0303 	and.w	r3, r3, #3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d001      	beq.n	80096f4 <tcp_receive+0xa54>
 80096f0:	2301      	movs	r3, #1
 80096f2:	e000      	b.n	80096f6 <tcp_receive+0xa56>
 80096f4:	2300      	movs	r3, #0
 80096f6:	191a      	adds	r2, r3, r4
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fc:	441a      	add	r2, r3
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009706:	461c      	mov	r4, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	891b      	ldrh	r3, [r3, #8]
 800970c:	461d      	mov	r5, r3
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	899b      	ldrh	r3, [r3, #12]
 8009714:	b29b      	uxth	r3, r3
 8009716:	4618      	mov	r0, r3
 8009718:	f7fa f84a 	bl	80037b0 <lwip_htons>
 800971c:	4603      	mov	r3, r0
 800971e:	b2db      	uxtb	r3, r3
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <tcp_receive+0xa8c>
 8009728:	2301      	movs	r3, #1
 800972a:	e000      	b.n	800972e <tcp_receive+0xa8e>
 800972c:	2300      	movs	r3, #0
 800972e:	442b      	add	r3, r5
 8009730:	429c      	cmp	r4, r3
 8009732:	d206      	bcs.n	8009742 <tcp_receive+0xaa2>
 8009734:	4b1e      	ldr	r3, [pc, #120]	; (80097b0 <tcp_receive+0xb10>)
 8009736:	f240 622c 	movw	r2, #1580	; 0x62c
 800973a:	4923      	ldr	r1, [pc, #140]	; (80097c8 <tcp_receive+0xb28>)
 800973c:	481e      	ldr	r0, [pc, #120]	; (80097b8 <tcp_receive+0xb18>)
 800973e:	f007 fa93 	bl	8010c68 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	891b      	ldrh	r3, [r3, #8]
 8009746:	461c      	mov	r4, r3
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	68db      	ldr	r3, [r3, #12]
 800974c:	899b      	ldrh	r3, [r3, #12]
 800974e:	b29b      	uxth	r3, r3
 8009750:	4618      	mov	r0, r3
 8009752:	f7fa f82d 	bl	80037b0 <lwip_htons>
 8009756:	4603      	mov	r3, r0
 8009758:	b2db      	uxtb	r3, r3
 800975a:	f003 0303 	and.w	r3, r3, #3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d001      	beq.n	8009766 <tcp_receive+0xac6>
 8009762:	2301      	movs	r3, #1
 8009764:	e000      	b.n	8009768 <tcp_receive+0xac8>
 8009766:	2300      	movs	r3, #0
 8009768:	1919      	adds	r1, r3, r4
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800976e:	b28b      	uxth	r3, r1
 8009770:	1ad3      	subs	r3, r2, r3
 8009772:	b29a      	uxth	r2, r3
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f7fc fd1f 	bl	80061bc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	891b      	ldrh	r3, [r3, #8]
 8009784:	2b00      	cmp	r3, #0
 8009786:	d028      	beq.n	80097da <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8009788:	4b0d      	ldr	r3, [pc, #52]	; (80097c0 <tcp_receive+0xb20>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d01d      	beq.n	80097cc <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8009790:	4b0b      	ldr	r3, [pc, #44]	; (80097c0 <tcp_receive+0xb20>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	4619      	mov	r1, r3
 800979a:	4610      	mov	r0, r2
 800979c:	f7fb feda 	bl	8005554 <pbuf_cat>
 80097a0:	e018      	b.n	80097d4 <tcp_receive+0xb34>
 80097a2:	bf00      	nop
 80097a4:	2000059a 	.word	0x2000059a
 80097a8:	20000590 	.word	0x20000590
 80097ac:	20000570 	.word	0x20000570
 80097b0:	08012dc0 	.word	0x08012dc0
 80097b4:	080131a0 	.word	0x080131a0
 80097b8:	08012e0c 	.word	0x08012e0c
 80097bc:	080131dc 	.word	0x080131dc
 80097c0:	200005a0 	.word	0x200005a0
 80097c4:	2000059d 	.word	0x2000059d
 80097c8:	080131fc 	.word	0x080131fc
            } else {
              recv_data = cseg->p;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	4a70      	ldr	r2, [pc, #448]	; (8009994 <tcp_receive+0xcf4>)
 80097d2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	2200      	movs	r2, #0
 80097d8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80097da:	68bb      	ldr	r3, [r7, #8]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	899b      	ldrh	r3, [r3, #12]
 80097e0:	b29b      	uxth	r3, r3
 80097e2:	4618      	mov	r0, r3
 80097e4:	f7f9 ffe4 	bl	80037b0 <lwip_htons>
 80097e8:	4603      	mov	r3, r0
 80097ea:	b2db      	uxtb	r3, r3
 80097ec:	f003 0301 	and.w	r3, r3, #1
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00d      	beq.n	8009810 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80097f4:	4b68      	ldr	r3, [pc, #416]	; (8009998 <tcp_receive+0xcf8>)
 80097f6:	781b      	ldrb	r3, [r3, #0]
 80097f8:	f043 0320 	orr.w	r3, r3, #32
 80097fc:	b2da      	uxtb	r2, r3
 80097fe:	4b66      	ldr	r3, [pc, #408]	; (8009998 <tcp_receive+0xcf8>)
 8009800:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	7d1b      	ldrb	r3, [r3, #20]
 8009806:	2b04      	cmp	r3, #4
 8009808:	d102      	bne.n	8009810 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2207      	movs	r2, #7
 800980e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8009818:	68b8      	ldr	r0, [r7, #8]
 800981a:	f7fd fb09 	bl	8006e30 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009822:	2b00      	cmp	r3, #0
 8009824:	d008      	beq.n	8009838 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800982a:	68db      	ldr	r3, [r3, #12]
 800982c:	685a      	ldr	r2, [r3, #4]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8009832:	429a      	cmp	r2, r3
 8009834:	f43f af43 	beq.w	80096be <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	8b5b      	ldrh	r3, [r3, #26]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b00      	cmp	r3, #0
 8009842:	d00e      	beq.n	8009862 <tcp_receive+0xbc2>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	8b5b      	ldrh	r3, [r3, #26]
 8009848:	f023 0301 	bic.w	r3, r3, #1
 800984c:	b29a      	uxth	r2, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	835a      	strh	r2, [r3, #26]
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	8b5b      	ldrh	r3, [r3, #26]
 8009856:	f043 0302 	orr.w	r3, r3, #2
 800985a:	b29a      	uxth	r2, r3
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009860:	e188      	b.n	8009b74 <tcp_receive+0xed4>
        tcp_ack(pcb);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	8b5b      	ldrh	r3, [r3, #26]
 8009866:	f043 0301 	orr.w	r3, r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8009870:	e180      	b.n	8009b74 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800987a:	4848      	ldr	r0, [pc, #288]	; (800999c <tcp_receive+0xcfc>)
 800987c:	f7fd fb0e 	bl	8006e9c <tcp_seg_copy>
 8009880:	4602      	mov	r2, r0
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	675a      	str	r2, [r3, #116]	; 0x74
 8009886:	e16d      	b.n	8009b64 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8009888:	2300      	movs	r3, #0
 800988a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009890:	63bb      	str	r3, [r7, #56]	; 0x38
 8009892:	e157      	b.n	8009b44 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 8009894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	4b41      	ldr	r3, [pc, #260]	; (80099a0 <tcp_receive+0xd00>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d11d      	bne.n	80098de <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80098a2:	4b3e      	ldr	r3, [pc, #248]	; (800999c <tcp_receive+0xcfc>)
 80098a4:	891a      	ldrh	r2, [r3, #8]
 80098a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098a8:	891b      	ldrh	r3, [r3, #8]
 80098aa:	429a      	cmp	r2, r3
 80098ac:	f240 814f 	bls.w	8009b4e <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098b0:	483a      	ldr	r0, [pc, #232]	; (800999c <tcp_receive+0xcfc>)
 80098b2:	f7fd faf3 	bl	8006e9c <tcp_seg_copy>
 80098b6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80098b8:	697b      	ldr	r3, [r7, #20]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	f000 8149 	beq.w	8009b52 <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80098c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d003      	beq.n	80098ce <tcp_receive+0xc2e>
                    prev->next = cseg;
 80098c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098c8:	697a      	ldr	r2, [r7, #20]
 80098ca:	601a      	str	r2, [r3, #0]
 80098cc:	e002      	b.n	80098d4 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	697a      	ldr	r2, [r7, #20]
 80098d2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80098d4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098d6:	6978      	ldr	r0, [r7, #20]
 80098d8:	f7ff f8de 	bl	8008a98 <tcp_oos_insert_segment>
                }
                break;
 80098dc:	e139      	b.n	8009b52 <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80098de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d117      	bne.n	8009914 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80098e4:	4b2e      	ldr	r3, [pc, #184]	; (80099a0 <tcp_receive+0xd00>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	1ad3      	subs	r3, r2, r3
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	da57      	bge.n	80099a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80098f4:	4829      	ldr	r0, [pc, #164]	; (800999c <tcp_receive+0xcfc>)
 80098f6:	f7fd fad1 	bl	8006e9c <tcp_seg_copy>
 80098fa:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8129 	beq.w	8009b56 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	69ba      	ldr	r2, [r7, #24]
 8009908:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800990a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800990c:	69b8      	ldr	r0, [r7, #24]
 800990e:	f7ff f8c3 	bl	8008a98 <tcp_oos_insert_segment>
                  }
                  break;
 8009912:	e120      	b.n	8009b56 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8009914:	4b22      	ldr	r3, [pc, #136]	; (80099a0 <tcp_receive+0xd00>)
 8009916:	681a      	ldr	r2, [r3, #0]
 8009918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800991a:	68db      	ldr	r3, [r3, #12]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	3b01      	subs	r3, #1
 8009922:	2b00      	cmp	r3, #0
 8009924:	db3e      	blt.n	80099a4 <tcp_receive+0xd04>
 8009926:	4b1e      	ldr	r3, [pc, #120]	; (80099a0 <tcp_receive+0xd00>)
 8009928:	681a      	ldr	r2, [r3, #0]
 800992a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	685b      	ldr	r3, [r3, #4]
 8009930:	1ad3      	subs	r3, r2, r3
 8009932:	3301      	adds	r3, #1
 8009934:	2b00      	cmp	r3, #0
 8009936:	dc35      	bgt.n	80099a4 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8009938:	4818      	ldr	r0, [pc, #96]	; (800999c <tcp_receive+0xcfc>)
 800993a:	f7fd faaf 	bl	8006e9c <tcp_seg_copy>
 800993e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f000 8109 	beq.w	8009b5a <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8009948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009950:	8912      	ldrh	r2, [r2, #8]
 8009952:	441a      	add	r2, r3
 8009954:	4b12      	ldr	r3, [pc, #72]	; (80099a0 <tcp_receive+0xd00>)
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	1ad3      	subs	r3, r2, r3
 800995a:	2b00      	cmp	r3, #0
 800995c:	dd12      	ble.n	8009984 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800995e:	4b10      	ldr	r3, [pc, #64]	; (80099a0 <tcp_receive+0xd00>)
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	b29a      	uxth	r2, r3
 8009964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009966:	68db      	ldr	r3, [r3, #12]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	b29b      	uxth	r3, r3
 800996c:	1ad3      	subs	r3, r2, r3
 800996e:	b29a      	uxth	r2, r3
 8009970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009972:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8009974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009976:	685a      	ldr	r2, [r3, #4]
 8009978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800997a:	891b      	ldrh	r3, [r3, #8]
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f7fb fba0 	bl	80050c4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8009984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009986:	69fa      	ldr	r2, [r7, #28]
 8009988:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800998a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800998c:	69f8      	ldr	r0, [r7, #28]
 800998e:	f7ff f883 	bl	8008a98 <tcp_oos_insert_segment>
                  }
                  break;
 8009992:	e0e2      	b.n	8009b5a <tcp_receive+0xeba>
 8009994:	200005a0 	.word	0x200005a0
 8009998:	2000059d 	.word	0x2000059d
 800999c:	20000570 	.word	0x20000570
 80099a0:	20000590 	.word	0x20000590
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80099a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099a6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80099a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f040 80c6 	bne.w	8009b3e <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80099b2:	4b80      	ldr	r3, [pc, #512]	; (8009bb4 <tcp_receive+0xf14>)
 80099b4:	681a      	ldr	r2, [r3, #0]
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	68db      	ldr	r3, [r3, #12]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80099be:	2b00      	cmp	r3, #0
 80099c0:	f340 80bd 	ble.w	8009b3e <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	899b      	ldrh	r3, [r3, #12]
 80099ca:	b29b      	uxth	r3, r3
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7f9 feef 	bl	80037b0 <lwip_htons>
 80099d2:	4603      	mov	r3, r0
 80099d4:	b2db      	uxtb	r3, r3
 80099d6:	f003 0301 	and.w	r3, r3, #1
 80099da:	2b00      	cmp	r3, #0
 80099dc:	f040 80bf 	bne.w	8009b5e <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80099e0:	4875      	ldr	r0, [pc, #468]	; (8009bb8 <tcp_receive+0xf18>)
 80099e2:	f7fd fa5b 	bl	8006e9c <tcp_seg_copy>
 80099e6:	4602      	mov	r2, r0
 80099e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ea:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80099ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	f000 80b6 	beq.w	8009b62 <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80099f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099f8:	68db      	ldr	r3, [r3, #12]
 80099fa:	685b      	ldr	r3, [r3, #4]
 80099fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80099fe:	8912      	ldrh	r2, [r2, #8]
 8009a00:	441a      	add	r2, r3
 8009a02:	4b6c      	ldr	r3, [pc, #432]	; (8009bb4 <tcp_receive+0xf14>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	1ad3      	subs	r3, r2, r3
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	dd12      	ble.n	8009a32 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8009a0c:	4b69      	ldr	r3, [pc, #420]	; (8009bb4 <tcp_receive+0xf14>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	68db      	ldr	r3, [r3, #12]
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	b29b      	uxth	r3, r3
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	b29a      	uxth	r2, r3
 8009a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a20:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	685a      	ldr	r2, [r3, #4]
 8009a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a28:	891b      	ldrh	r3, [r3, #8]
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	4610      	mov	r0, r2
 8009a2e:	f7fb fb49 	bl	80050c4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8009a32:	4b62      	ldr	r3, [pc, #392]	; (8009bbc <tcp_receive+0xf1c>)
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b5e      	ldr	r3, [pc, #376]	; (8009bb4 <tcp_receive+0xf14>)
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	441a      	add	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a42:	6879      	ldr	r1, [r7, #4]
 8009a44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009a46:	440b      	add	r3, r1
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f340 8089 	ble.w	8009b62 <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8009a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	899b      	ldrh	r3, [r3, #12]
 8009a58:	b29b      	uxth	r3, r3
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f7f9 fea8 	bl	80037b0 <lwip_htons>
 8009a60:	4603      	mov	r3, r0
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d022      	beq.n	8009ab2 <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8009a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	68db      	ldr	r3, [r3, #12]
 8009a72:	899b      	ldrh	r3, [r3, #12]
 8009a74:	b29b      	uxth	r3, r3
 8009a76:	b21b      	sxth	r3, r3
 8009a78:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009a7c:	b21c      	sxth	r4, r3
 8009a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	68db      	ldr	r3, [r3, #12]
 8009a84:	899b      	ldrh	r3, [r3, #12]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f9 fe91 	bl	80037b0 <lwip_htons>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	b2db      	uxtb	r3, r3
 8009a92:	b29b      	uxth	r3, r3
 8009a94:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009a98:	b29b      	uxth	r3, r3
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	f7f9 fe88 	bl	80037b0 <lwip_htons>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	b21b      	sxth	r3, r3
 8009aa4:	4323      	orrs	r3, r4
 8009aa6:	b21a      	sxth	r2, r3
 8009aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	68db      	ldr	r3, [r3, #12]
 8009aae:	b292      	uxth	r2, r2
 8009ab0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009abc:	4413      	add	r3, r2
 8009abe:	b299      	uxth	r1, r3
 8009ac0:	4b3c      	ldr	r3, [pc, #240]	; (8009bb4 <tcp_receive+0xf14>)
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	1a8a      	subs	r2, r1, r2
 8009acc:	b292      	uxth	r2, r2
 8009ace:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8009ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	891b      	ldrh	r3, [r3, #8]
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fb faf0 	bl	80050c4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	891c      	ldrh	r4, [r3, #8]
 8009aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68db      	ldr	r3, [r3, #12]
 8009af0:	899b      	ldrh	r3, [r3, #12]
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	4618      	mov	r0, r3
 8009af6:	f7f9 fe5b 	bl	80037b0 <lwip_htons>
 8009afa:	4603      	mov	r3, r0
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	f003 0303 	and.w	r3, r3, #3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d001      	beq.n	8009b0a <tcp_receive+0xe6a>
 8009b06:	2301      	movs	r3, #1
 8009b08:	e000      	b.n	8009b0c <tcp_receive+0xe6c>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4423      	add	r3, r4
 8009b0e:	b29a      	uxth	r2, r3
 8009b10:	4b2a      	ldr	r3, [pc, #168]	; (8009bbc <tcp_receive+0xf1c>)
 8009b12:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8009b14:	4b29      	ldr	r3, [pc, #164]	; (8009bbc <tcp_receive+0xf1c>)
 8009b16:	881b      	ldrh	r3, [r3, #0]
 8009b18:	461a      	mov	r2, r3
 8009b1a:	4b26      	ldr	r3, [pc, #152]	; (8009bb4 <tcp_receive+0xf14>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	441a      	add	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b28:	440b      	add	r3, r1
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d019      	beq.n	8009b62 <tcp_receive+0xec2>
 8009b2e:	4b24      	ldr	r3, [pc, #144]	; (8009bc0 <tcp_receive+0xf20>)
 8009b30:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8009b34:	4923      	ldr	r1, [pc, #140]	; (8009bc4 <tcp_receive+0xf24>)
 8009b36:	4824      	ldr	r0, [pc, #144]	; (8009bc8 <tcp_receive+0xf28>)
 8009b38:	f007 f896 	bl	8010c68 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8009b3c:	e011      	b.n	8009b62 <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8009b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8009b44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	f47f aea4 	bne.w	8009894 <tcp_receive+0xbf4>
 8009b4c:	e00a      	b.n	8009b64 <tcp_receive+0xec4>
                break;
 8009b4e:	bf00      	nop
 8009b50:	e008      	b.n	8009b64 <tcp_receive+0xec4>
                break;
 8009b52:	bf00      	nop
 8009b54:	e006      	b.n	8009b64 <tcp_receive+0xec4>
                  break;
 8009b56:	bf00      	nop
 8009b58:	e004      	b.n	8009b64 <tcp_receive+0xec4>
                  break;
 8009b5a:	bf00      	nop
 8009b5c:	e002      	b.n	8009b64 <tcp_receive+0xec4>
                  break;
 8009b5e:	bf00      	nop
 8009b60:	e000      	b.n	8009b64 <tcp_receive+0xec4>
                break;
 8009b62:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f001 fe9b 	bl	800b8a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8009b6a:	e003      	b.n	8009b74 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f001 fe97 	bl	800b8a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8009b72:	e01a      	b.n	8009baa <tcp_receive+0xf0a>
 8009b74:	e019      	b.n	8009baa <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <tcp_receive+0xf14>)
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7e:	1ad3      	subs	r3, r2, r3
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	db0a      	blt.n	8009b9a <tcp_receive+0xefa>
 8009b84:	4b0b      	ldr	r3, [pc, #44]	; (8009bb4 <tcp_receive+0xf14>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8009b90:	440b      	add	r3, r1
 8009b92:	1ad3      	subs	r3, r2, r3
 8009b94:	3301      	adds	r3, #1
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	dd07      	ble.n	8009baa <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	8b5b      	ldrh	r3, [r3, #26]
 8009b9e:	f043 0302 	orr.w	r3, r3, #2
 8009ba2:	b29a      	uxth	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8009ba8:	e7ff      	b.n	8009baa <tcp_receive+0xf0a>
 8009baa:	bf00      	nop
 8009bac:	3750      	adds	r7, #80	; 0x50
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000590 	.word	0x20000590
 8009bb8:	20000570 	.word	0x20000570
 8009bbc:	2000059a 	.word	0x2000059a
 8009bc0:	08012dc0 	.word	0x08012dc0
 8009bc4:	08013168 	.word	0x08013168
 8009bc8:	08012e0c 	.word	0x08012e0c

08009bcc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8009bd2:	4b15      	ldr	r3, [pc, #84]	; (8009c28 <tcp_get_next_optbyte+0x5c>)
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	1c5a      	adds	r2, r3, #1
 8009bd8:	b291      	uxth	r1, r2
 8009bda:	4a13      	ldr	r2, [pc, #76]	; (8009c28 <tcp_get_next_optbyte+0x5c>)
 8009bdc:	8011      	strh	r1, [r2, #0]
 8009bde:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8009be0:	4b12      	ldr	r3, [pc, #72]	; (8009c2c <tcp_get_next_optbyte+0x60>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d004      	beq.n	8009bf2 <tcp_get_next_optbyte+0x26>
 8009be8:	4b11      	ldr	r3, [pc, #68]	; (8009c30 <tcp_get_next_optbyte+0x64>)
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	88fa      	ldrh	r2, [r7, #6]
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d208      	bcs.n	8009c04 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8009bf2:	4b10      	ldr	r3, [pc, #64]	; (8009c34 <tcp_get_next_optbyte+0x68>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	3314      	adds	r3, #20
 8009bf8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8009bfa:	88fb      	ldrh	r3, [r7, #6]
 8009bfc:	683a      	ldr	r2, [r7, #0]
 8009bfe:	4413      	add	r3, r2
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	e00b      	b.n	8009c1c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8009c04:	88fb      	ldrh	r3, [r7, #6]
 8009c06:	b2da      	uxtb	r2, r3
 8009c08:	4b09      	ldr	r3, [pc, #36]	; (8009c30 <tcp_get_next_optbyte+0x64>)
 8009c0a:	881b      	ldrh	r3, [r3, #0]
 8009c0c:	b2db      	uxtb	r3, r3
 8009c0e:	1ad3      	subs	r3, r2, r3
 8009c10:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8009c12:	4b06      	ldr	r3, [pc, #24]	; (8009c2c <tcp_get_next_optbyte+0x60>)
 8009c14:	681a      	ldr	r2, [r3, #0]
 8009c16:	797b      	ldrb	r3, [r7, #5]
 8009c18:	4413      	add	r3, r2
 8009c1a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	370c      	adds	r7, #12
 8009c20:	46bd      	mov	sp, r7
 8009c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c26:	4770      	bx	lr
 8009c28:	2000058c 	.word	0x2000058c
 8009c2c:	20000588 	.word	0x20000588
 8009c30:	20000586 	.word	0x20000586
 8009c34:	20000580 	.word	0x20000580

08009c38 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b084      	sub	sp, #16
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d106      	bne.n	8009c54 <tcp_parseopt+0x1c>
 8009c46:	4b31      	ldr	r3, [pc, #196]	; (8009d0c <tcp_parseopt+0xd4>)
 8009c48:	f240 727d 	movw	r2, #1917	; 0x77d
 8009c4c:	4930      	ldr	r1, [pc, #192]	; (8009d10 <tcp_parseopt+0xd8>)
 8009c4e:	4831      	ldr	r0, [pc, #196]	; (8009d14 <tcp_parseopt+0xdc>)
 8009c50:	f007 f80a 	bl	8010c68 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8009c54:	4b30      	ldr	r3, [pc, #192]	; (8009d18 <tcp_parseopt+0xe0>)
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d053      	beq.n	8009d04 <tcp_parseopt+0xcc>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009c5c:	4b2f      	ldr	r3, [pc, #188]	; (8009d1c <tcp_parseopt+0xe4>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	801a      	strh	r2, [r3, #0]
 8009c62:	e043      	b.n	8009cec <tcp_parseopt+0xb4>
      u8_t opt = tcp_get_next_optbyte();
 8009c64:	f7ff ffb2 	bl	8009bcc <tcp_get_next_optbyte>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8009c6c:	7bfb      	ldrb	r3, [r7, #15]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	d03c      	beq.n	8009cec <tcp_parseopt+0xb4>
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d002      	beq.n	8009c7c <tcp_parseopt+0x44>
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d03f      	beq.n	8009cfa <tcp_parseopt+0xc2>
 8009c7a:	e026      	b.n	8009cca <tcp_parseopt+0x92>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8009c7c:	f7ff ffa6 	bl	8009bcc <tcp_get_next_optbyte>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b04      	cmp	r3, #4
 8009c84:	d13b      	bne.n	8009cfe <tcp_parseopt+0xc6>
 8009c86:	4b25      	ldr	r3, [pc, #148]	; (8009d1c <tcp_parseopt+0xe4>)
 8009c88:	881b      	ldrh	r3, [r3, #0]
 8009c8a:	3302      	adds	r3, #2
 8009c8c:	4a22      	ldr	r2, [pc, #136]	; (8009d18 <tcp_parseopt+0xe0>)
 8009c8e:	8812      	ldrh	r2, [r2, #0]
 8009c90:	4293      	cmp	r3, r2
 8009c92:	dc34      	bgt.n	8009cfe <tcp_parseopt+0xc6>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8009c94:	f7ff ff9a 	bl	8009bcc <tcp_get_next_optbyte>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	021b      	lsls	r3, r3, #8
 8009c9e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8009ca0:	f7ff ff94 	bl	8009bcc <tcp_get_next_optbyte>
 8009ca4:	4603      	mov	r3, r0
 8009ca6:	b29a      	uxth	r2, r3
 8009ca8:	89bb      	ldrh	r3, [r7, #12]
 8009caa:	4313      	orrs	r3, r2
 8009cac:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8009cae:	89bb      	ldrh	r3, [r7, #12]
 8009cb0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8009cb4:	d804      	bhi.n	8009cc0 <tcp_parseopt+0x88>
 8009cb6:	89bb      	ldrh	r3, [r7, #12]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d001      	beq.n	8009cc0 <tcp_parseopt+0x88>
 8009cbc:	89ba      	ldrh	r2, [r7, #12]
 8009cbe:	e001      	b.n	8009cc4 <tcp_parseopt+0x8c>
 8009cc0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8009cc8:	e010      	b.n	8009cec <tcp_parseopt+0xb4>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8009cca:	f7ff ff7f 	bl	8009bcc <tcp_get_next_optbyte>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8009cd2:	7afb      	ldrb	r3, [r7, #11]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d914      	bls.n	8009d02 <tcp_parseopt+0xca>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <tcp_parseopt+0xe4>)
 8009cde:	881b      	ldrh	r3, [r3, #0]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b02      	subs	r3, #2
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <tcp_parseopt+0xe4>)
 8009cea:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8009cec:	4b0b      	ldr	r3, [pc, #44]	; (8009d1c <tcp_parseopt+0xe4>)
 8009cee:	881a      	ldrh	r2, [r3, #0]
 8009cf0:	4b09      	ldr	r3, [pc, #36]	; (8009d18 <tcp_parseopt+0xe0>)
 8009cf2:	881b      	ldrh	r3, [r3, #0]
 8009cf4:	429a      	cmp	r2, r3
 8009cf6:	d3b5      	bcc.n	8009c64 <tcp_parseopt+0x2c>
 8009cf8:	e004      	b.n	8009d04 <tcp_parseopt+0xcc>
          return;
 8009cfa:	bf00      	nop
 8009cfc:	e002      	b.n	8009d04 <tcp_parseopt+0xcc>
            return;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <tcp_parseopt+0xcc>
            return;
 8009d02:	bf00      	nop
      }
    }
  }
}
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08012dc0 	.word	0x08012dc0
 8009d10:	08013224 	.word	0x08013224
 8009d14:	08012e0c 	.word	0x08012e0c
 8009d18:	20000584 	.word	0x20000584
 8009d1c:	2000058c 	.word	0x2000058c

08009d20 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8009d20:	b480      	push	{r7}
 8009d22:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8009d24:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <tcp_trigger_input_pcb_close+0x1c>)
 8009d26:	781b      	ldrb	r3, [r3, #0]
 8009d28:	f043 0310 	orr.w	r3, r3, #16
 8009d2c:	b2da      	uxtb	r2, r3
 8009d2e:	4b03      	ldr	r3, [pc, #12]	; (8009d3c <tcp_trigger_input_pcb_close+0x1c>)
 8009d30:	701a      	strb	r2, [r3, #0]
}
 8009d32:	bf00      	nop
 8009d34:	46bd      	mov	sp, r7
 8009d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d3a:	4770      	bx	lr
 8009d3c:	2000059d 	.word	0x2000059d

08009d40 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	60f8      	str	r0, [r7, #12]
 8009d48:	60b9      	str	r1, [r7, #8]
 8009d4a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d00a      	beq.n	8009d68 <tcp_route+0x28>
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	7a1b      	ldrb	r3, [r3, #8]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d006      	beq.n	8009d68 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	7a1b      	ldrb	r3, [r3, #8]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fa ffda 	bl	8004d18 <netif_get_by_index>
 8009d64:	4603      	mov	r3, r0
 8009d66:	e003      	b.n	8009d70 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f005 fd39 	bl	800f7e0 <ip4_route>
 8009d6e:	4603      	mov	r3, r0
  }
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8009d78:	b590      	push	{r4, r7, lr}
 8009d7a:	b087      	sub	sp, #28
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	603b      	str	r3, [r7, #0]
 8009d84:	4613      	mov	r3, r2
 8009d86:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d105      	bne.n	8009d9a <tcp_create_segment+0x22>
 8009d8e:	4b44      	ldr	r3, [pc, #272]	; (8009ea0 <tcp_create_segment+0x128>)
 8009d90:	22a3      	movs	r2, #163	; 0xa3
 8009d92:	4944      	ldr	r1, [pc, #272]	; (8009ea4 <tcp_create_segment+0x12c>)
 8009d94:	4844      	ldr	r0, [pc, #272]	; (8009ea8 <tcp_create_segment+0x130>)
 8009d96:	f006 ff67 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d105      	bne.n	8009dac <tcp_create_segment+0x34>
 8009da0:	4b3f      	ldr	r3, [pc, #252]	; (8009ea0 <tcp_create_segment+0x128>)
 8009da2:	22a4      	movs	r2, #164	; 0xa4
 8009da4:	4941      	ldr	r1, [pc, #260]	; (8009eac <tcp_create_segment+0x134>)
 8009da6:	4840      	ldr	r0, [pc, #256]	; (8009ea8 <tcp_create_segment+0x130>)
 8009da8:	f006 ff5e 	bl	8010c68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8009dac:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	b2db      	uxtb	r3, r3
 8009db4:	f003 0304 	and.w	r3, r3, #4
 8009db8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8009dba:	2003      	movs	r0, #3
 8009dbc:	f7fa fc3e 	bl	800463c <memp_malloc>
 8009dc0:	6138      	str	r0, [r7, #16]
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d104      	bne.n	8009dd2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8009dc8:	68b8      	ldr	r0, [r7, #8]
 8009dca:	f7fb fb01 	bl	80053d0 <pbuf_free>
    return NULL;
 8009dce:	2300      	movs	r3, #0
 8009dd0:	e061      	b.n	8009e96 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8009dd2:	693b      	ldr	r3, [r7, #16]
 8009dd4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8009dd8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8009de6:	68bb      	ldr	r3, [r7, #8]
 8009de8:	891a      	ldrh	r2, [r3, #8]
 8009dea:	7dfb      	ldrb	r3, [r7, #23]
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	429a      	cmp	r2, r3
 8009df0:	d205      	bcs.n	8009dfe <tcp_create_segment+0x86>
 8009df2:	4b2b      	ldr	r3, [pc, #172]	; (8009ea0 <tcp_create_segment+0x128>)
 8009df4:	22b0      	movs	r2, #176	; 0xb0
 8009df6:	492e      	ldr	r1, [pc, #184]	; (8009eb0 <tcp_create_segment+0x138>)
 8009df8:	482b      	ldr	r0, [pc, #172]	; (8009ea8 <tcp_create_segment+0x130>)
 8009dfa:	f006 ff35 	bl	8010c68 <iprintf>
  seg->len = p->tot_len - optlen;
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	891a      	ldrh	r2, [r3, #8]
 8009e02:	7dfb      	ldrb	r3, [r7, #23]
 8009e04:	b29b      	uxth	r3, r3
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8009e0e:	2114      	movs	r1, #20
 8009e10:	68b8      	ldr	r0, [r7, #8]
 8009e12:	f7fb fa47 	bl	80052a4 <pbuf_add_header>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d004      	beq.n	8009e26 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8009e1c:	6938      	ldr	r0, [r7, #16]
 8009e1e:	f7fd f807 	bl	8006e30 <tcp_seg_free>
    return NULL;
 8009e22:	2300      	movs	r3, #0
 8009e24:	e037      	b.n	8009e96 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8009e26:	693b      	ldr	r3, [r7, #16]
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8ada      	ldrh	r2, [r3, #22]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	68dc      	ldr	r4, [r3, #12]
 8009e38:	4610      	mov	r0, r2
 8009e3a:	f7f9 fcb9 	bl	80037b0 <lwip_htons>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	8b1a      	ldrh	r2, [r3, #24]
 8009e46:	693b      	ldr	r3, [r7, #16]
 8009e48:	68dc      	ldr	r4, [r3, #12]
 8009e4a:	4610      	mov	r0, r2
 8009e4c:	f7f9 fcb0 	bl	80037b0 <lwip_htons>
 8009e50:	4603      	mov	r3, r0
 8009e52:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	68dc      	ldr	r4, [r3, #12]
 8009e58:	6838      	ldr	r0, [r7, #0]
 8009e5a:	f7f9 fcbe 	bl	80037da <lwip_htonl>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8009e62:	7dfb      	ldrb	r3, [r7, #23]
 8009e64:	089b      	lsrs	r3, r3, #2
 8009e66:	b2db      	uxtb	r3, r3
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	3305      	adds	r3, #5
 8009e6c:	b29b      	uxth	r3, r3
 8009e6e:	031b      	lsls	r3, r3, #12
 8009e70:	b29a      	uxth	r2, r3
 8009e72:	79fb      	ldrb	r3, [r7, #7]
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	4313      	orrs	r3, r2
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	68dc      	ldr	r4, [r3, #12]
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7f9 fc96 	bl	80037b0 <lwip_htons>
 8009e84:	4603      	mov	r3, r0
 8009e86:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	68db      	ldr	r3, [r3, #12]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	749a      	strb	r2, [r3, #18]
 8009e90:	2200      	movs	r2, #0
 8009e92:	74da      	strb	r2, [r3, #19]
  return seg;
 8009e94:	693b      	ldr	r3, [r7, #16]
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	371c      	adds	r7, #28
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd90      	pop	{r4, r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	08013240 	.word	0x08013240
 8009ea4:	08013274 	.word	0x08013274
 8009ea8:	08013294 	.word	0x08013294
 8009eac:	080132bc 	.word	0x080132bc
 8009eb0:	080132e0 	.word	0x080132e0

08009eb4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b086      	sub	sp, #24
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	607b      	str	r3, [r7, #4]
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	73fb      	strb	r3, [r7, #15]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	81bb      	strh	r3, [r7, #12]
 8009ec4:	4613      	mov	r3, r2
 8009ec6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8009ec8:	89bb      	ldrh	r3, [r7, #12]
 8009eca:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d105      	bne.n	8009ede <tcp_pbuf_prealloc+0x2a>
 8009ed2:	4b30      	ldr	r3, [pc, #192]	; (8009f94 <tcp_pbuf_prealloc+0xe0>)
 8009ed4:	22e8      	movs	r2, #232	; 0xe8
 8009ed6:	4930      	ldr	r1, [pc, #192]	; (8009f98 <tcp_pbuf_prealloc+0xe4>)
 8009ed8:	4830      	ldr	r0, [pc, #192]	; (8009f9c <tcp_pbuf_prealloc+0xe8>)
 8009eda:	f006 fec5 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8009ede:	6a3b      	ldr	r3, [r7, #32]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d105      	bne.n	8009ef0 <tcp_pbuf_prealloc+0x3c>
 8009ee4:	4b2b      	ldr	r3, [pc, #172]	; (8009f94 <tcp_pbuf_prealloc+0xe0>)
 8009ee6:	22e9      	movs	r2, #233	; 0xe9
 8009ee8:	492d      	ldr	r1, [pc, #180]	; (8009fa0 <tcp_pbuf_prealloc+0xec>)
 8009eea:	482c      	ldr	r0, [pc, #176]	; (8009f9c <tcp_pbuf_prealloc+0xe8>)
 8009eec:	f006 febc 	bl	8010c68 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8009ef0:	89ba      	ldrh	r2, [r7, #12]
 8009ef2:	897b      	ldrh	r3, [r7, #10]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d221      	bcs.n	8009f3c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009ef8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009efc:	f003 0302 	and.w	r3, r3, #2
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d111      	bne.n	8009f28 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8009f04:	6a3b      	ldr	r3, [r7, #32]
 8009f06:	8b5b      	ldrh	r3, [r3, #26]
 8009f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d115      	bne.n	8009f3c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8009f10:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d007      	beq.n	8009f28 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8009f18:	6a3b      	ldr	r3, [r7, #32]
 8009f1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d103      	bne.n	8009f28 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8009f20:	6a3b      	ldr	r3, [r7, #32]
 8009f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d009      	beq.n	8009f3c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8009f28:	89bb      	ldrh	r3, [r7, #12]
 8009f2a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8009f2e:	f023 0203 	bic.w	r2, r3, #3
 8009f32:	897b      	ldrh	r3, [r7, #10]
 8009f34:	4293      	cmp	r3, r2
 8009f36:	bf28      	it	cs
 8009f38:	4613      	movcs	r3, r2
 8009f3a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8009f3c:	8af9      	ldrh	r1, [r7, #22]
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
 8009f40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8009f44:	4618      	mov	r0, r3
 8009f46:	f7fa ff63 	bl	8004e10 <pbuf_alloc>
 8009f4a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8009f52:	2300      	movs	r3, #0
 8009f54:	e019      	b.n	8009f8a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8009f56:	693b      	ldr	r3, [r7, #16]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d006      	beq.n	8009f6c <tcp_pbuf_prealloc+0xb8>
 8009f5e:	4b0d      	ldr	r3, [pc, #52]	; (8009f94 <tcp_pbuf_prealloc+0xe0>)
 8009f60:	f240 120b 	movw	r2, #267	; 0x10b
 8009f64:	490f      	ldr	r1, [pc, #60]	; (8009fa4 <tcp_pbuf_prealloc+0xf0>)
 8009f66:	480d      	ldr	r0, [pc, #52]	; (8009f9c <tcp_pbuf_prealloc+0xe8>)
 8009f68:	f006 fe7e 	bl	8010c68 <iprintf>
  *oversize = p->len - length;
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	895a      	ldrh	r2, [r3, #10]
 8009f70:	89bb      	ldrh	r3, [r7, #12]
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	b29a      	uxth	r2, r3
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	89ba      	ldrh	r2, [r7, #12]
 8009f7e:	811a      	strh	r2, [r3, #8]
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	891a      	ldrh	r2, [r3, #8]
 8009f84:	693b      	ldr	r3, [r7, #16]
 8009f86:	815a      	strh	r2, [r3, #10]
  return p;
 8009f88:	693b      	ldr	r3, [r7, #16]
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3718      	adds	r7, #24
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	bd80      	pop	{r7, pc}
 8009f92:	bf00      	nop
 8009f94:	08013240 	.word	0x08013240
 8009f98:	080132f8 	.word	0x080132f8
 8009f9c:	08013294 	.word	0x08013294
 8009fa0:	0801331c 	.word	0x0801331c
 8009fa4:	0801333c 	.word	0x0801333c

08009fa8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b082      	sub	sp, #8
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d106      	bne.n	8009fc8 <tcp_write_checks+0x20>
 8009fba:	4b33      	ldr	r3, [pc, #204]	; (800a088 <tcp_write_checks+0xe0>)
 8009fbc:	f240 1233 	movw	r2, #307	; 0x133
 8009fc0:	4932      	ldr	r1, [pc, #200]	; (800a08c <tcp_write_checks+0xe4>)
 8009fc2:	4833      	ldr	r0, [pc, #204]	; (800a090 <tcp_write_checks+0xe8>)
 8009fc4:	f006 fe50 	bl	8010c68 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	7d1b      	ldrb	r3, [r3, #20]
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d00e      	beq.n	8009fee <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8009fd4:	2b07      	cmp	r3, #7
 8009fd6:	d00a      	beq.n	8009fee <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d006      	beq.n	8009fee <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8009fe4:	2b03      	cmp	r3, #3
 8009fe6:	d002      	beq.n	8009fee <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8009fe8:	f06f 030a 	mvn.w	r3, #10
 8009fec:	e048      	b.n	800a080 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8009fee:	887b      	ldrh	r3, [r7, #2]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d101      	bne.n	8009ff8 <tcp_write_checks+0x50>
    return ERR_OK;
 8009ff4:	2300      	movs	r3, #0
 8009ff6:	e043      	b.n	800a080 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009ffe:	887a      	ldrh	r2, [r7, #2]
 800a000:	429a      	cmp	r2, r3
 800a002:	d909      	bls.n	800a018 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	8b5b      	ldrh	r3, [r3, #26]
 800a008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a012:	f04f 33ff 	mov.w	r3, #4294967295
 800a016:	e033      	b.n	800a080 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a01e:	2b08      	cmp	r3, #8
 800a020:	d909      	bls.n	800a036 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	8b5b      	ldrh	r3, [r3, #26]
 800a026:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800a030:	f04f 33ff 	mov.w	r3, #4294967295
 800a034:	e024      	b.n	800a080 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00f      	beq.n	800a060 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a044:	2b00      	cmp	r3, #0
 800a046:	d11a      	bne.n	800a07e <tcp_write_checks+0xd6>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d116      	bne.n	800a07e <tcp_write_checks+0xd6>
 800a050:	4b0d      	ldr	r3, [pc, #52]	; (800a088 <tcp_write_checks+0xe0>)
 800a052:	f44f 72ab 	mov.w	r2, #342	; 0x156
 800a056:	490f      	ldr	r1, [pc, #60]	; (800a094 <tcp_write_checks+0xec>)
 800a058:	480d      	ldr	r0, [pc, #52]	; (800a090 <tcp_write_checks+0xe8>)
 800a05a:	f006 fe05 	bl	8010c68 <iprintf>
 800a05e:	e00e      	b.n	800a07e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a064:	2b00      	cmp	r3, #0
 800a066:	d103      	bne.n	800a070 <tcp_write_checks+0xc8>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d006      	beq.n	800a07e <tcp_write_checks+0xd6>
 800a070:	4b05      	ldr	r3, [pc, #20]	; (800a088 <tcp_write_checks+0xe0>)
 800a072:	f240 1259 	movw	r2, #345	; 0x159
 800a076:	4908      	ldr	r1, [pc, #32]	; (800a098 <tcp_write_checks+0xf0>)
 800a078:	4805      	ldr	r0, [pc, #20]	; (800a090 <tcp_write_checks+0xe8>)
 800a07a:	f006 fdf5 	bl	8010c68 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800a07e:	2300      	movs	r3, #0
}
 800a080:	4618      	mov	r0, r3
 800a082:	3708      	adds	r7, #8
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}
 800a088:	08013240 	.word	0x08013240
 800a08c:	08013350 	.word	0x08013350
 800a090:	08013294 	.word	0x08013294
 800a094:	08013370 	.word	0x08013370
 800a098:	080133ac 	.word	0x080133ac

0800a09c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800a09c:	b590      	push	{r4, r7, lr}
 800a09e:	b09b      	sub	sp, #108	; 0x6c
 800a0a0:	af04      	add	r7, sp, #16
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	4611      	mov	r1, r2
 800a0a8:	461a      	mov	r2, r3
 800a0aa:	460b      	mov	r3, r1
 800a0ac:	80fb      	strh	r3, [r7, #6]
 800a0ae:	4613      	mov	r3, r2
 800a0b0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	653b      	str	r3, [r7, #80]	; 0x50
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a0be:	2300      	movs	r3, #0
 800a0c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800a0d6:	2300      	movs	r3, #0
 800a0d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d109      	bne.n	800a0f8 <tcp_write+0x5c>
 800a0e4:	4ba5      	ldr	r3, [pc, #660]	; (800a37c <tcp_write+0x2e0>)
 800a0e6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 800a0ea:	49a5      	ldr	r1, [pc, #660]	; (800a380 <tcp_write+0x2e4>)
 800a0ec:	48a5      	ldr	r0, [pc, #660]	; (800a384 <tcp_write+0x2e8>)
 800a0ee:	f006 fdbb 	bl	8010c68 <iprintf>
 800a0f2:	f06f 030f 	mvn.w	r3, #15
 800a0f6:	e32c      	b.n	800a752 <tcp_write+0x6b6>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a0fe:	085b      	lsrs	r3, r3, #1
 800a100:	b29a      	uxth	r2, r3
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a106:	4293      	cmp	r3, r2
 800a108:	bf28      	it	cs
 800a10a:	4613      	movcs	r3, r2
 800a10c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 800a10e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	d102      	bne.n	800a11a <tcp_write+0x7e>
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a118:	e000      	b.n	800a11c <tcp_write+0x80>
 800a11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a11c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d109      	bne.n	800a138 <tcp_write+0x9c>
 800a124:	4b95      	ldr	r3, [pc, #596]	; (800a37c <tcp_write+0x2e0>)
 800a126:	f44f 72d7 	mov.w	r2, #430	; 0x1ae
 800a12a:	4997      	ldr	r1, [pc, #604]	; (800a388 <tcp_write+0x2ec>)
 800a12c:	4895      	ldr	r0, [pc, #596]	; (800a384 <tcp_write+0x2e8>)
 800a12e:	f006 fd9b 	bl	8010c68 <iprintf>
 800a132:	f06f 030f 	mvn.w	r3, #15
 800a136:	e30c      	b.n	800a752 <tcp_write+0x6b6>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 800a138:	88fb      	ldrh	r3, [r7, #6]
 800a13a:	4619      	mov	r1, r3
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f7ff ff33 	bl	8009fa8 <tcp_write_checks>
 800a142:	4603      	mov	r3, r0
 800a144:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 800a148:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d002      	beq.n	800a156 <tcp_write+0xba>
    return err;
 800a150:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a154:	e2fd      	b.n	800a752 <tcp_write+0x6b6>
  }
  queuelen = pcb->snd_queuelen;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a15c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800a160:	2300      	movs	r3, #0
 800a162:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f000 80f7 	beq.w	800a35e <tcp_write+0x2c2>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a174:	653b      	str	r3, [r7, #80]	; 0x50
 800a176:	e002      	b.n	800a17e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 800a178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800a17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d1f8      	bne.n	800a178 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 800a186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a188:	7a9b      	ldrb	r3, [r3, #10]
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 800a194:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a198:	891b      	ldrh	r3, [r3, #8]
 800a19a:	4619      	mov	r1, r3
 800a19c:	8c3b      	ldrh	r3, [r7, #32]
 800a19e:	440b      	add	r3, r1
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	da06      	bge.n	800a1b2 <tcp_write+0x116>
 800a1a4:	4b75      	ldr	r3, [pc, #468]	; (800a37c <tcp_write+0x2e0>)
 800a1a6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a1aa:	4978      	ldr	r1, [pc, #480]	; (800a38c <tcp_write+0x2f0>)
 800a1ac:	4875      	ldr	r0, [pc, #468]	; (800a384 <tcp_write+0x2e8>)
 800a1ae:	f006 fd5b 	bl	8010c68 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 800a1b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1b4:	891a      	ldrh	r2, [r3, #8]
 800a1b6:	8c3b      	ldrh	r3, [r7, #32]
 800a1b8:	4413      	add	r3, r2
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a1c8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 800a1ca:	8a7b      	ldrh	r3, [r7, #18]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d027      	beq.n	800a220 <tcp_write+0x184>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 800a1d0:	8a7b      	ldrh	r3, [r7, #18]
 800a1d2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a1d4:	429a      	cmp	r2, r3
 800a1d6:	d206      	bcs.n	800a1e6 <tcp_write+0x14a>
 800a1d8:	4b68      	ldr	r3, [pc, #416]	; (800a37c <tcp_write+0x2e0>)
 800a1da:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 800a1de:	496c      	ldr	r1, [pc, #432]	; (800a390 <tcp_write+0x2f4>)
 800a1e0:	4868      	ldr	r0, [pc, #416]	; (800a384 <tcp_write+0x2e8>)
 800a1e2:	f006 fd41 	bl	8010c68 <iprintf>
      seg = last_unsent;
 800a1e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a1e8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 800a1ea:	8a7b      	ldrh	r3, [r7, #18]
 800a1ec:	88fa      	ldrh	r2, [r7, #6]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d901      	bls.n	800a1f6 <tcp_write+0x15a>
 800a1f2:	8a7b      	ldrh	r3, [r7, #18]
 800a1f4:	e000      	b.n	800a1f8 <tcp_write+0x15c>
 800a1f6:	88fb      	ldrh	r3, [r7, #6]
 800a1f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a1fa:	4293      	cmp	r3, r2
 800a1fc:	bfa8      	it	ge
 800a1fe:	4613      	movge	r3, r2
 800a200:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 800a202:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a206:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a208:	4413      	add	r3, r2
 800a20a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 800a20e:	8a7a      	ldrh	r2, [r7, #18]
 800a210:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a212:	1ad3      	subs	r3, r2, r3
 800a214:	b29b      	uxth	r3, r3
 800a216:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 800a218:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a21a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a21c:	1ad3      	subs	r3, r2, r3
 800a21e:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 800a220:	8a7b      	ldrh	r3, [r7, #18]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d00b      	beq.n	800a23e <tcp_write+0x1a2>
 800a226:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a22a:	88fb      	ldrh	r3, [r7, #6]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d006      	beq.n	800a23e <tcp_write+0x1a2>
 800a230:	4b52      	ldr	r3, [pc, #328]	; (800a37c <tcp_write+0x2e0>)
 800a232:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a236:	4957      	ldr	r1, [pc, #348]	; (800a394 <tcp_write+0x2f8>)
 800a238:	4852      	ldr	r0, [pc, #328]	; (800a384 <tcp_write+0x2e8>)
 800a23a:	f006 fd15 	bl	8010c68 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 800a23e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a242:	88fb      	ldrh	r3, [r7, #6]
 800a244:	429a      	cmp	r2, r3
 800a246:	f080 8168 	bcs.w	800a51a <tcp_write+0x47e>
 800a24a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8164 	beq.w	800a51a <tcp_write+0x47e>
 800a252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a254:	891b      	ldrh	r3, [r3, #8]
 800a256:	2b00      	cmp	r3, #0
 800a258:	f000 815f 	beq.w	800a51a <tcp_write+0x47e>
      u16_t seglen = LWIP_MIN(space, len - pos);
 800a25c:	88fa      	ldrh	r2, [r7, #6]
 800a25e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a266:	4293      	cmp	r3, r2
 800a268:	bfa8      	it	ge
 800a26a:	4613      	movge	r3, r2
 800a26c:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 800a26e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a270:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a272:	797b      	ldrb	r3, [r7, #5]
 800a274:	f003 0301 	and.w	r3, r3, #1
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d027      	beq.n	800a2cc <tcp_write+0x230>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 800a27c:	f107 0012 	add.w	r0, r7, #18
 800a280:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a282:	8bf9      	ldrh	r1, [r7, #30]
 800a284:	2301      	movs	r3, #1
 800a286:	9302      	str	r3, [sp, #8]
 800a288:	797b      	ldrb	r3, [r7, #5]
 800a28a:	9301      	str	r3, [sp, #4]
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	9300      	str	r3, [sp, #0]
 800a290:	4603      	mov	r3, r0
 800a292:	2000      	movs	r0, #0
 800a294:	f7ff fe0e 	bl	8009eb4 <tcp_pbuf_prealloc>
 800a298:	6578      	str	r0, [r7, #84]	; 0x54
 800a29a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	f000 8226 	beq.w	800a6ee <tcp_write+0x652>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 800a2a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a2a4:	6858      	ldr	r0, [r3, #4]
 800a2a6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	4413      	add	r3, r2
 800a2ae:	8bfa      	ldrh	r2, [r7, #30]
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	f006 fcc6 	bl	8010c42 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 800a2b6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a2b8:	f7fb f912 	bl	80054e0 <pbuf_clen>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	461a      	mov	r2, r3
 800a2c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a2c4:	4413      	add	r3, r2
 800a2c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800a2ca:	e041      	b.n	800a350 <tcp_write+0x2b4>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 800a2cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ce:	685b      	ldr	r3, [r3, #4]
 800a2d0:	637b      	str	r3, [r7, #52]	; 0x34
 800a2d2:	e002      	b.n	800a2da <tcp_write+0x23e>
 800a2d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d1f8      	bne.n	800a2d4 <tcp_write+0x238>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2e4:	7b1b      	ldrb	r3, [r3, #12]
 800a2e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d115      	bne.n	800a31a <tcp_write+0x27e>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 800a2ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a2f0:	685b      	ldr	r3, [r3, #4]
 800a2f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2f4:	8952      	ldrh	r2, [r2, #10]
 800a2f6:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 800a2f8:	68ba      	ldr	r2, [r7, #8]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d10d      	bne.n	800a31a <tcp_write+0x27e>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 800a2fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a302:	2b00      	cmp	r3, #0
 800a304:	d006      	beq.n	800a314 <tcp_write+0x278>
 800a306:	4b1d      	ldr	r3, [pc, #116]	; (800a37c <tcp_write+0x2e0>)
 800a308:	f240 2231 	movw	r2, #561	; 0x231
 800a30c:	4922      	ldr	r1, [pc, #136]	; (800a398 <tcp_write+0x2fc>)
 800a30e:	481d      	ldr	r0, [pc, #116]	; (800a384 <tcp_write+0x2e8>)
 800a310:	f006 fcaa 	bl	8010c68 <iprintf>
          extendlen = seglen;
 800a314:	8bfb      	ldrh	r3, [r7, #30]
 800a316:	87bb      	strh	r3, [r7, #60]	; 0x3c
 800a318:	e01a      	b.n	800a350 <tcp_write+0x2b4>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 800a31a:	8bfb      	ldrh	r3, [r7, #30]
 800a31c:	2201      	movs	r2, #1
 800a31e:	4619      	mov	r1, r3
 800a320:	2000      	movs	r0, #0
 800a322:	f7fa fd75 	bl	8004e10 <pbuf_alloc>
 800a326:	6578      	str	r0, [r7, #84]	; 0x54
 800a328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	f000 81e1 	beq.w	800a6f2 <tcp_write+0x656>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 800a330:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a334:	68ba      	ldr	r2, [r7, #8]
 800a336:	441a      	add	r2, r3
 800a338:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a33a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 800a33c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a33e:	f7fb f8cf 	bl	80054e0 <pbuf_clen>
 800a342:	4603      	mov	r3, r0
 800a344:	461a      	mov	r2, r3
 800a346:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a34a:	4413      	add	r3, r2
 800a34c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 800a350:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a354:	8bfb      	ldrh	r3, [r7, #30]
 800a356:	4413      	add	r3, r2
 800a358:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a35c:	e0dd      	b.n	800a51a <tcp_write+0x47e>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800a364:	2b00      	cmp	r3, #0
 800a366:	f000 80d8 	beq.w	800a51a <tcp_write+0x47e>
 800a36a:	4b04      	ldr	r3, [pc, #16]	; (800a37c <tcp_write+0x2e0>)
 800a36c:	f240 224b 	movw	r2, #587	; 0x24b
 800a370:	490a      	ldr	r1, [pc, #40]	; (800a39c <tcp_write+0x300>)
 800a372:	4804      	ldr	r0, [pc, #16]	; (800a384 <tcp_write+0x2e8>)
 800a374:	f006 fc78 	bl	8010c68 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 800a378:	e0cf      	b.n	800a51a <tcp_write+0x47e>
 800a37a:	bf00      	nop
 800a37c:	08013240 	.word	0x08013240
 800a380:	080133e0 	.word	0x080133e0
 800a384:	08013294 	.word	0x08013294
 800a388:	080133f8 	.word	0x080133f8
 800a38c:	0801342c 	.word	0x0801342c
 800a390:	08013444 	.word	0x08013444
 800a394:	08013464 	.word	0x08013464
 800a398:	08013484 	.word	0x08013484
 800a39c:	080134b0 	.word	0x080134b0
    struct pbuf *p;
    u16_t left = len - pos;
 800a3a0:	88fa      	ldrh	r2, [r7, #6]
 800a3a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a3a6:	1ad3      	subs	r3, r2, r3
 800a3a8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 800a3aa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3ae:	b29b      	uxth	r3, r3
 800a3b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3b2:	1ad3      	subs	r3, r2, r3
 800a3b4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 800a3b6:	8b7a      	ldrh	r2, [r7, #26]
 800a3b8:	8bbb      	ldrh	r3, [r7, #28]
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	bf28      	it	cs
 800a3be:	4613      	movcs	r3, r2
 800a3c0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 800a3c2:	797b      	ldrb	r3, [r7, #5]
 800a3c4:	f003 0301 	and.w	r3, r3, #1
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d036      	beq.n	800a43a <tcp_write+0x39e>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 800a3cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	8b3b      	ldrh	r3, [r7, #24]
 800a3d4:	4413      	add	r3, r2
 800a3d6:	b299      	uxth	r1, r3
 800a3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bf0c      	ite	eq
 800a3de:	2301      	moveq	r3, #1
 800a3e0:	2300      	movne	r3, #0
 800a3e2:	b2db      	uxtb	r3, r3
 800a3e4:	f107 0012 	add.w	r0, r7, #18
 800a3e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a3ea:	9302      	str	r3, [sp, #8]
 800a3ec:	797b      	ldrb	r3, [r7, #5]
 800a3ee:	9301      	str	r3, [sp, #4]
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	9300      	str	r3, [sp, #0]
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2036      	movs	r0, #54	; 0x36
 800a3f8:	f7ff fd5c 	bl	8009eb4 <tcp_pbuf_prealloc>
 800a3fc:	6338      	str	r0, [r7, #48]	; 0x30
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 8178 	beq.w	800a6f6 <tcp_write+0x65a>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 800a406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a408:	895b      	ldrh	r3, [r3, #10]
 800a40a:	8b3a      	ldrh	r2, [r7, #24]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d906      	bls.n	800a41e <tcp_write+0x382>
 800a410:	4b8c      	ldr	r3, [pc, #560]	; (800a644 <tcp_write+0x5a8>)
 800a412:	f240 2267 	movw	r2, #615	; 0x267
 800a416:	498c      	ldr	r1, [pc, #560]	; (800a648 <tcp_write+0x5ac>)
 800a418:	488c      	ldr	r0, [pc, #560]	; (800a64c <tcp_write+0x5b0>)
 800a41a:	f006 fc25 	bl	8010c68 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 800a41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a420:	685a      	ldr	r2, [r3, #4]
 800a422:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a426:	18d0      	adds	r0, r2, r3
 800a428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a42c:	68ba      	ldr	r2, [r7, #8]
 800a42e:	4413      	add	r3, r2
 800a430:	8b3a      	ldrh	r2, [r7, #24]
 800a432:	4619      	mov	r1, r3
 800a434:	f006 fc05 	bl	8010c42 <memcpy>
 800a438:	e02f      	b.n	800a49a <tcp_write+0x3fe>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 800a43a:	8a7b      	ldrh	r3, [r7, #18]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d006      	beq.n	800a44e <tcp_write+0x3b2>
 800a440:	4b80      	ldr	r3, [pc, #512]	; (800a644 <tcp_write+0x5a8>)
 800a442:	f240 2271 	movw	r2, #625	; 0x271
 800a446:	4982      	ldr	r1, [pc, #520]	; (800a650 <tcp_write+0x5b4>)
 800a448:	4880      	ldr	r0, [pc, #512]	; (800a64c <tcp_write+0x5b0>)
 800a44a:	f006 fc0d 	bl	8010c68 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 800a44e:	8b3b      	ldrh	r3, [r7, #24]
 800a450:	2201      	movs	r2, #1
 800a452:	4619      	mov	r1, r3
 800a454:	2036      	movs	r0, #54	; 0x36
 800a456:	f7fa fcdb 	bl	8004e10 <pbuf_alloc>
 800a45a:	6178      	str	r0, [r7, #20]
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	f000 814b 	beq.w	800a6fa <tcp_write+0x65e>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 800a464:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	441a      	add	r2, r3
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800a470:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a474:	b29b      	uxth	r3, r3
 800a476:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a47a:	4619      	mov	r1, r3
 800a47c:	2036      	movs	r0, #54	; 0x36
 800a47e:	f7fa fcc7 	bl	8004e10 <pbuf_alloc>
 800a482:	6338      	str	r0, [r7, #48]	; 0x30
 800a484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a486:	2b00      	cmp	r3, #0
 800a488:	d103      	bne.n	800a492 <tcp_write+0x3f6>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 800a48a:	6978      	ldr	r0, [r7, #20]
 800a48c:	f7fa ffa0 	bl	80053d0 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 800a490:	e136      	b.n	800a700 <tcp_write+0x664>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 800a492:	6979      	ldr	r1, [r7, #20]
 800a494:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a496:	f7fb f85d 	bl	8005554 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 800a49a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a49c:	f7fb f820 	bl	80054e0 <pbuf_clen>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4a8:	4413      	add	r3, r2
 800a4aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 800a4ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800a4b2:	2b09      	cmp	r3, #9
 800a4b4:	d903      	bls.n	800a4be <tcp_write+0x422>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 800a4b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a4b8:	f7fa ff8a 	bl	80053d0 <pbuf_free>
      goto memerr;
 800a4bc:	e120      	b.n	800a700 <tcp_write+0x664>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4c2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a4c6:	441a      	add	r2, r3
 800a4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4cc:	9300      	str	r3, [sp, #0]
 800a4ce:	4613      	mov	r3, r2
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f7ff fc4f 	bl	8009d78 <tcp_create_segment>
 800a4da:	64f8      	str	r0, [r7, #76]	; 0x4c
 800a4dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f000 810d 	beq.w	800a6fe <tcp_write+0x662>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 800a4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d102      	bne.n	800a4f0 <tcp_write+0x454>
      queue = seg;
 800a4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4ec:	647b      	str	r3, [r7, #68]	; 0x44
 800a4ee:	e00c      	b.n	800a50a <tcp_write+0x46e>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 800a4f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d106      	bne.n	800a504 <tcp_write+0x468>
 800a4f6:	4b53      	ldr	r3, [pc, #332]	; (800a644 <tcp_write+0x5a8>)
 800a4f8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800a4fc:	4955      	ldr	r1, [pc, #340]	; (800a654 <tcp_write+0x5b8>)
 800a4fe:	4853      	ldr	r0, [pc, #332]	; (800a64c <tcp_write+0x5b0>)
 800a500:	f006 fbb2 	bl	8010c68 <iprintf>
      prev_seg->next = seg;
 800a504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a506:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a508:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 800a50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a50c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 800a50e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a512:	8b3b      	ldrh	r3, [r7, #24]
 800a514:	4413      	add	r3, r2
 800a516:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 800a51a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800a51e:	88fb      	ldrh	r3, [r7, #6]
 800a520:	429a      	cmp	r2, r3
 800a522:	f4ff af3d 	bcc.w	800a3a0 <tcp_write+0x304>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 800a526:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d02c      	beq.n	800a586 <tcp_write+0x4ea>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 800a52c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a532:	e01e      	b.n	800a572 <tcp_write+0x4d6>
      p->tot_len += oversize_used;
 800a534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a536:	891a      	ldrh	r2, [r3, #8]
 800a538:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a53a:	4413      	add	r3, r2
 800a53c:	b29a      	uxth	r2, r3
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 800a542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d110      	bne.n	800a56c <tcp_write+0x4d0>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 800a54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a550:	8952      	ldrh	r2, [r2, #10]
 800a552:	4413      	add	r3, r2
 800a554:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	4618      	mov	r0, r3
 800a55a:	f006 fb72 	bl	8010c42 <memcpy>
        p->len += oversize_used;
 800a55e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a560:	895a      	ldrh	r2, [r3, #10]
 800a562:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a564:	4413      	add	r3, r2
 800a566:	b29a      	uxth	r2, r3
 800a568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a574:	2b00      	cmp	r3, #0
 800a576:	d1dd      	bne.n	800a534 <tcp_write+0x498>
      }
    }
    last_unsent->len += oversize_used;
 800a578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a57a:	891a      	ldrh	r2, [r3, #8]
 800a57c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800a57e:	4413      	add	r3, r2
 800a580:	b29a      	uxth	r2, r3
 800a582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a584:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 800a586:	8a7a      	ldrh	r2, [r7, #18]
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 800a58e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a590:	2b00      	cmp	r3, #0
 800a592:	d018      	beq.n	800a5c6 <tcp_write+0x52a>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 800a594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a596:	2b00      	cmp	r3, #0
 800a598:	d106      	bne.n	800a5a8 <tcp_write+0x50c>
 800a59a:	4b2a      	ldr	r3, [pc, #168]	; (800a644 <tcp_write+0x5a8>)
 800a59c:	f240 22e1 	movw	r2, #737	; 0x2e1
 800a5a0:	492d      	ldr	r1, [pc, #180]	; (800a658 <tcp_write+0x5bc>)
 800a5a2:	482a      	ldr	r0, [pc, #168]	; (800a64c <tcp_write+0x5b0>)
 800a5a4:	f006 fb60 	bl	8010c68 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 800a5a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fa ffd0 	bl	8005554 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 800a5b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5b6:	891a      	ldrh	r2, [r3, #8]
 800a5b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5ba:	891b      	ldrh	r3, [r3, #8]
 800a5bc:	4413      	add	r3, r2
 800a5be:	b29a      	uxth	r2, r3
 800a5c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5c2:	811a      	strh	r2, [r3, #8]
 800a5c4:	e037      	b.n	800a636 <tcp_write+0x59a>
  } else if (extendlen > 0) {
 800a5c6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d034      	beq.n	800a636 <tcp_write+0x59a>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 800a5cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d003      	beq.n	800a5da <tcp_write+0x53e>
 800a5d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5d4:	685b      	ldr	r3, [r3, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <tcp_write+0x54c>
 800a5da:	4b1a      	ldr	r3, [pc, #104]	; (800a644 <tcp_write+0x5a8>)
 800a5dc:	f240 22e7 	movw	r2, #743	; 0x2e7
 800a5e0:	491e      	ldr	r1, [pc, #120]	; (800a65c <tcp_write+0x5c0>)
 800a5e2:	481a      	ldr	r0, [pc, #104]	; (800a64c <tcp_write+0x5b0>)
 800a5e4:	f006 fb40 	bl	8010c68 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a5e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800a5ee:	e009      	b.n	800a604 <tcp_write+0x568>
      p->tot_len += extendlen;
 800a5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f2:	891a      	ldrh	r2, [r3, #8]
 800a5f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5f6:	4413      	add	r3, r2
 800a5f8:	b29a      	uxth	r2, r3
 800a5fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 800a5fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	62bb      	str	r3, [r7, #40]	; 0x28
 800a604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d1f1      	bne.n	800a5f0 <tcp_write+0x554>
    }
    p->tot_len += extendlen;
 800a60c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a60e:	891a      	ldrh	r2, [r3, #8]
 800a610:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a612:	4413      	add	r3, r2
 800a614:	b29a      	uxth	r2, r3
 800a616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a618:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	895a      	ldrh	r2, [r3, #10]
 800a61e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a620:	4413      	add	r3, r2
 800a622:	b29a      	uxth	r2, r3
 800a624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a626:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 800a628:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a62a:	891a      	ldrh	r2, [r3, #8]
 800a62c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a62e:	4413      	add	r3, r2
 800a630:	b29a      	uxth	r2, r3
 800a632:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a634:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 800a636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d111      	bne.n	800a660 <tcp_write+0x5c4>
    pcb->unsent = queue;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a640:	66da      	str	r2, [r3, #108]	; 0x6c
 800a642:	e010      	b.n	800a666 <tcp_write+0x5ca>
 800a644:	08013240 	.word	0x08013240
 800a648:	080134e0 	.word	0x080134e0
 800a64c:	08013294 	.word	0x08013294
 800a650:	08013520 	.word	0x08013520
 800a654:	08013530 	.word	0x08013530
 800a658:	08013544 	.word	0x08013544
 800a65c:	0801357c 	.word	0x0801357c
  } else {
    last_unsent->next = queue;
 800a660:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a664:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a66a:	88fb      	ldrh	r3, [r7, #6]
 800a66c:	441a      	add	r2, r3
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800a678:	88fb      	ldrh	r3, [r7, #6]
 800a67a:	1ad3      	subs	r3, r2, r3
 800a67c:	b29a      	uxth	r2, r3
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800a68a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a694:	2b00      	cmp	r3, #0
 800a696:	d00e      	beq.n	800a6b6 <tcp_write+0x61a>
    LWIP_ASSERT("tcp_write: valid queue length",
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d10a      	bne.n	800a6b6 <tcp_write+0x61a>
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d106      	bne.n	800a6b6 <tcp_write+0x61a>
 800a6a8:	4b2c      	ldr	r3, [pc, #176]	; (800a75c <tcp_write+0x6c0>)
 800a6aa:	f240 3213 	movw	r2, #787	; 0x313
 800a6ae:	492c      	ldr	r1, [pc, #176]	; (800a760 <tcp_write+0x6c4>)
 800a6b0:	482c      	ldr	r0, [pc, #176]	; (800a764 <tcp_write+0x6c8>)
 800a6b2:	f006 fad9 	bl	8010c68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 800a6b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d016      	beq.n	800a6ea <tcp_write+0x64e>
 800a6bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6be:	68db      	ldr	r3, [r3, #12]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d012      	beq.n	800a6ea <tcp_write+0x64e>
 800a6c4:	797b      	ldrb	r3, [r7, #5]
 800a6c6:	f003 0302 	and.w	r3, r3, #2
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10d      	bne.n	800a6ea <tcp_write+0x64e>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 800a6ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6d0:	68db      	ldr	r3, [r3, #12]
 800a6d2:	899b      	ldrh	r3, [r3, #12]
 800a6d4:	b29c      	uxth	r4, r3
 800a6d6:	2008      	movs	r0, #8
 800a6d8:	f7f9 f86a 	bl	80037b0 <lwip_htons>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	461a      	mov	r2, r3
 800a6e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6e2:	68db      	ldr	r3, [r3, #12]
 800a6e4:	4322      	orrs	r2, r4
 800a6e6:	b292      	uxth	r2, r2
 800a6e8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e031      	b.n	800a752 <tcp_write+0x6b6>
          goto memerr;
 800a6ee:	bf00      	nop
 800a6f0:	e006      	b.n	800a700 <tcp_write+0x664>
            goto memerr;
 800a6f2:	bf00      	nop
 800a6f4:	e004      	b.n	800a700 <tcp_write+0x664>
        goto memerr;
 800a6f6:	bf00      	nop
 800a6f8:	e002      	b.n	800a700 <tcp_write+0x664>
        goto memerr;
 800a6fa:	bf00      	nop
 800a6fc:	e000      	b.n	800a700 <tcp_write+0x664>
      goto memerr;
 800a6fe:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	8b5b      	ldrh	r3, [r3, #26]
 800a704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a708:	b29a      	uxth	r2, r3
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 800a70e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a710:	2b00      	cmp	r3, #0
 800a712:	d002      	beq.n	800a71a <tcp_write+0x67e>
    pbuf_free(concat_p);
 800a714:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800a716:	f7fa fe5b 	bl	80053d0 <pbuf_free>
  }
  if (queue != NULL) {
 800a71a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d002      	beq.n	800a726 <tcp_write+0x68a>
    tcp_segs_free(queue);
 800a720:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800a722:	f7fc fb71 	bl	8006e08 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d00e      	beq.n	800a74e <tcp_write+0x6b2>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a734:	2b00      	cmp	r3, #0
 800a736:	d10a      	bne.n	800a74e <tcp_write+0x6b2>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d106      	bne.n	800a74e <tcp_write+0x6b2>
 800a740:	4b06      	ldr	r3, [pc, #24]	; (800a75c <tcp_write+0x6c0>)
 800a742:	f44f 724a 	mov.w	r2, #808	; 0x328
 800a746:	4906      	ldr	r1, [pc, #24]	; (800a760 <tcp_write+0x6c4>)
 800a748:	4806      	ldr	r0, [pc, #24]	; (800a764 <tcp_write+0x6c8>)
 800a74a:	f006 fa8d 	bl	8010c68 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 800a74e:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a752:	4618      	mov	r0, r3
 800a754:	375c      	adds	r7, #92	; 0x5c
 800a756:	46bd      	mov	sp, r7
 800a758:	bd90      	pop	{r4, r7, pc}
 800a75a:	bf00      	nop
 800a75c:	08013240 	.word	0x08013240
 800a760:	080135b4 	.word	0x080135b4
 800a764:	08013294 	.word	0x08013294

0800a768 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800a768:	b590      	push	{r4, r7, lr}
 800a76a:	b08b      	sub	sp, #44	; 0x2c
 800a76c:	af02      	add	r7, sp, #8
 800a76e:	6078      	str	r0, [r7, #4]
 800a770:	460b      	mov	r3, r1
 800a772:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800a774:	2300      	movs	r3, #0
 800a776:	61fb      	str	r3, [r7, #28]
 800a778:	2300      	movs	r3, #0
 800a77a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800a77c:	2300      	movs	r3, #0
 800a77e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d106      	bne.n	800a794 <tcp_split_unsent_seg+0x2c>
 800a786:	4b95      	ldr	r3, [pc, #596]	; (800a9dc <tcp_split_unsent_seg+0x274>)
 800a788:	f240 324b 	movw	r2, #843	; 0x34b
 800a78c:	4994      	ldr	r1, [pc, #592]	; (800a9e0 <tcp_split_unsent_seg+0x278>)
 800a78e:	4895      	ldr	r0, [pc, #596]	; (800a9e4 <tcp_split_unsent_seg+0x27c>)
 800a790:	f006 fa6a 	bl	8010c68 <iprintf>

  useg = pcb->unsent;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a798:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d102      	bne.n	800a7a6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800a7a0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a4:	e116      	b.n	800a9d4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800a7a6:	887b      	ldrh	r3, [r7, #2]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800a7ac:	4b8b      	ldr	r3, [pc, #556]	; (800a9dc <tcp_split_unsent_seg+0x274>)
 800a7ae:	f240 3253 	movw	r2, #851	; 0x353
 800a7b2:	498d      	ldr	r1, [pc, #564]	; (800a9e8 <tcp_split_unsent_seg+0x280>)
 800a7b4:	488b      	ldr	r0, [pc, #556]	; (800a9e4 <tcp_split_unsent_seg+0x27c>)
 800a7b6:	f006 fa57 	bl	8010c68 <iprintf>
    return ERR_VAL;
 800a7ba:	f06f 0305 	mvn.w	r3, #5
 800a7be:	e109      	b.n	800a9d4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	891b      	ldrh	r3, [r3, #8]
 800a7c4:	887a      	ldrh	r2, [r7, #2]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d301      	bcc.n	800a7ce <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	e102      	b.n	800a9d4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800a7d2:	887a      	ldrh	r2, [r7, #2]
 800a7d4:	429a      	cmp	r2, r3
 800a7d6:	d906      	bls.n	800a7e6 <tcp_split_unsent_seg+0x7e>
 800a7d8:	4b80      	ldr	r3, [pc, #512]	; (800a9dc <tcp_split_unsent_seg+0x274>)
 800a7da:	f240 325b 	movw	r2, #859	; 0x35b
 800a7de:	4983      	ldr	r1, [pc, #524]	; (800a9ec <tcp_split_unsent_seg+0x284>)
 800a7e0:	4880      	ldr	r0, [pc, #512]	; (800a9e4 <tcp_split_unsent_seg+0x27c>)
 800a7e2:	f006 fa41 	bl	8010c68 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	891b      	ldrh	r3, [r3, #8]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d106      	bne.n	800a7fc <tcp_split_unsent_seg+0x94>
 800a7ee:	4b7b      	ldr	r3, [pc, #492]	; (800a9dc <tcp_split_unsent_seg+0x274>)
 800a7f0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800a7f4:	497e      	ldr	r1, [pc, #504]	; (800a9f0 <tcp_split_unsent_seg+0x288>)
 800a7f6:	487b      	ldr	r0, [pc, #492]	; (800a9e4 <tcp_split_unsent_seg+0x27c>)
 800a7f8:	f006 fa36 	bl	8010c68 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800a7fc:	697b      	ldr	r3, [r7, #20]
 800a7fe:	7a9b      	ldrb	r3, [r3, #10]
 800a800:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800a802:	7bfb      	ldrb	r3, [r7, #15]
 800a804:	009b      	lsls	r3, r3, #2
 800a806:	b2db      	uxtb	r3, r3
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	891a      	ldrh	r2, [r3, #8]
 800a812:	887b      	ldrh	r3, [r7, #2]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800a818:	7bbb      	ldrb	r3, [r7, #14]
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	89bb      	ldrh	r3, [r7, #12]
 800a81e:	4413      	add	r3, r2
 800a820:	b29b      	uxth	r3, r3
 800a822:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a826:	4619      	mov	r1, r3
 800a828:	2036      	movs	r0, #54	; 0x36
 800a82a:	f7fa faf1 	bl	8004e10 <pbuf_alloc>
 800a82e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	2b00      	cmp	r3, #0
 800a834:	f000 80b7 	beq.w	800a9a6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	891a      	ldrh	r2, [r3, #8]
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	891b      	ldrh	r3, [r3, #8]
 800a842:	1ad3      	subs	r3, r2, r3
 800a844:	b29a      	uxth	r2, r3
 800a846:	887b      	ldrh	r3, [r7, #2]
 800a848:	4413      	add	r3, r2
 800a84a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	6858      	ldr	r0, [r3, #4]
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	7bbb      	ldrb	r3, [r7, #14]
 800a856:	18d1      	adds	r1, r2, r3
 800a858:	897b      	ldrh	r3, [r7, #10]
 800a85a:	89ba      	ldrh	r2, [r7, #12]
 800a85c:	f7fa ffb2 	bl	80057c4 <pbuf_copy_partial>
 800a860:	4603      	mov	r3, r0
 800a862:	461a      	mov	r2, r3
 800a864:	89bb      	ldrh	r3, [r7, #12]
 800a866:	4293      	cmp	r3, r2
 800a868:	f040 809f 	bne.w	800a9aa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	899b      	ldrh	r3, [r3, #12]
 800a872:	b29b      	uxth	r3, r3
 800a874:	4618      	mov	r0, r3
 800a876:	f7f8 ff9b 	bl	80037b0 <lwip_htons>
 800a87a:	4603      	mov	r3, r0
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a882:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800a884:	2300      	movs	r3, #0
 800a886:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800a888:	7efb      	ldrb	r3, [r7, #27]
 800a88a:	f003 0308 	and.w	r3, r3, #8
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d007      	beq.n	800a8a2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800a892:	7efb      	ldrb	r3, [r7, #27]
 800a894:	f023 0308 	bic.w	r3, r3, #8
 800a898:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800a89a:	7ebb      	ldrb	r3, [r7, #26]
 800a89c:	f043 0308 	orr.w	r3, r3, #8
 800a8a0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800a8a2:	7efb      	ldrb	r3, [r7, #27]
 800a8a4:	f003 0301 	and.w	r3, r3, #1
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d007      	beq.n	800a8bc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800a8ac:	7efb      	ldrb	r3, [r7, #27]
 800a8ae:	f023 0301 	bic.w	r3, r3, #1
 800a8b2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800a8b4:	7ebb      	ldrb	r3, [r7, #26]
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	f7f8 ff89 	bl	80037da <lwip_htonl>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	887b      	ldrh	r3, [r7, #2]
 800a8cc:	18d1      	adds	r1, r2, r3
 800a8ce:	7eba      	ldrb	r2, [r7, #26]
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	460b      	mov	r3, r1
 800a8d6:	6939      	ldr	r1, [r7, #16]
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f7ff fa4d 	bl	8009d78 <tcp_create_segment>
 800a8de:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d063      	beq.n	800a9ae <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	f7fa fdf8 	bl	80054e0 <pbuf_clen>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a8fa:	1a9b      	subs	r3, r3, r2
 800a8fc:	b29a      	uxth	r2, r3
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	6858      	ldr	r0, [r3, #4]
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	891a      	ldrh	r2, [r3, #8]
 800a90e:	89bb      	ldrh	r3, [r7, #12]
 800a910:	1ad3      	subs	r3, r2, r3
 800a912:	b29b      	uxth	r3, r3
 800a914:	4619      	mov	r1, r3
 800a916:	f7fa fbd5 	bl	80050c4 <pbuf_realloc>
  useg->len -= remainder;
 800a91a:	697b      	ldr	r3, [r7, #20]
 800a91c:	891a      	ldrh	r2, [r3, #8]
 800a91e:	89bb      	ldrh	r3, [r7, #12]
 800a920:	1ad3      	subs	r3, r2, r3
 800a922:	b29a      	uxth	r2, r3
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	68db      	ldr	r3, [r3, #12]
 800a92c:	899b      	ldrh	r3, [r3, #12]
 800a92e:	b29c      	uxth	r4, r3
 800a930:	7efb      	ldrb	r3, [r7, #27]
 800a932:	b29b      	uxth	r3, r3
 800a934:	4618      	mov	r0, r3
 800a936:	f7f8 ff3b 	bl	80037b0 <lwip_htons>
 800a93a:	4603      	mov	r3, r0
 800a93c:	461a      	mov	r2, r3
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	4322      	orrs	r2, r4
 800a944:	b292      	uxth	r2, r2
 800a946:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	685b      	ldr	r3, [r3, #4]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7fa fdc7 	bl	80054e0 <pbuf_clen>
 800a952:	4603      	mov	r3, r0
 800a954:	461a      	mov	r2, r3
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a95c:	4413      	add	r3, r2
 800a95e:	b29a      	uxth	r2, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800a966:	69fb      	ldr	r3, [r7, #28]
 800a968:	685b      	ldr	r3, [r3, #4]
 800a96a:	4618      	mov	r0, r3
 800a96c:	f7fa fdb8 	bl	80054e0 <pbuf_clen>
 800a970:	4603      	mov	r3, r0
 800a972:	461a      	mov	r2, r3
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800a97a:	4413      	add	r3, r2
 800a97c:	b29a      	uxth	r2, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	69fb      	ldr	r3, [r7, #28]
 800a98a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	69fa      	ldr	r2, [r7, #28]
 800a990:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800a992:	69fb      	ldr	r3, [r7, #28]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d103      	bne.n	800a9a2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2200      	movs	r2, #0
 800a99e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	e016      	b.n	800a9d4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800a9a6:	bf00      	nop
 800a9a8:	e002      	b.n	800a9b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a9aa:	bf00      	nop
 800a9ac:	e000      	b.n	800a9b0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 800a9ae:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800a9b0:	69fb      	ldr	r3, [r7, #28]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d006      	beq.n	800a9c4 <tcp_split_unsent_seg+0x25c>
 800a9b6:	4b09      	ldr	r3, [pc, #36]	; (800a9dc <tcp_split_unsent_seg+0x274>)
 800a9b8:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800a9bc:	490d      	ldr	r1, [pc, #52]	; (800a9f4 <tcp_split_unsent_seg+0x28c>)
 800a9be:	4809      	ldr	r0, [pc, #36]	; (800a9e4 <tcp_split_unsent_seg+0x27c>)
 800a9c0:	f006 f952 	bl	8010c68 <iprintf>
  if (p != NULL) {
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d002      	beq.n	800a9d0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800a9ca:	6938      	ldr	r0, [r7, #16]
 800a9cc:	f7fa fd00 	bl	80053d0 <pbuf_free>
  }

  return ERR_MEM;
 800a9d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3724      	adds	r7, #36	; 0x24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd90      	pop	{r4, r7, pc}
 800a9dc:	08013240 	.word	0x08013240
 800a9e0:	080135d4 	.word	0x080135d4
 800a9e4:	08013294 	.word	0x08013294
 800a9e8:	080135f8 	.word	0x080135f8
 800a9ec:	0801361c 	.word	0x0801361c
 800a9f0:	0801362c 	.word	0x0801362c
 800a9f4:	0801363c 	.word	0x0801363c

0800a9f8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800a9f8:	b590      	push	{r4, r7, lr}
 800a9fa:	b085      	sub	sp, #20
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d106      	bne.n	800aa14 <tcp_send_fin+0x1c>
 800aa06:	4b21      	ldr	r3, [pc, #132]	; (800aa8c <tcp_send_fin+0x94>)
 800aa08:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800aa0c:	4920      	ldr	r1, [pc, #128]	; (800aa90 <tcp_send_fin+0x98>)
 800aa0e:	4821      	ldr	r0, [pc, #132]	; (800aa94 <tcp_send_fin+0x9c>)
 800aa10:	f006 f92a 	bl	8010c68 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d02e      	beq.n	800aa7a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa20:	60fb      	str	r3, [r7, #12]
 800aa22:	e002      	b.n	800aa2a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1f8      	bne.n	800aa24 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	899b      	ldrh	r3, [r3, #12]
 800aa38:	b29b      	uxth	r3, r3
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7f8 feb8 	bl	80037b0 <lwip_htons>
 800aa40:	4603      	mov	r3, r0
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d116      	bne.n	800aa7a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	899b      	ldrh	r3, [r3, #12]
 800aa52:	b29c      	uxth	r4, r3
 800aa54:	2001      	movs	r0, #1
 800aa56:	f7f8 feab 	bl	80037b0 <lwip_htons>
 800aa5a:	4603      	mov	r3, r0
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	68db      	ldr	r3, [r3, #12]
 800aa62:	4322      	orrs	r2, r4
 800aa64:	b292      	uxth	r2, r2
 800aa66:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	8b5b      	ldrh	r3, [r3, #26]
 800aa6c:	f043 0320 	orr.w	r3, r3, #32
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800aa76:	2300      	movs	r3, #0
 800aa78:	e004      	b.n	800aa84 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800aa7a:	2101      	movs	r1, #1
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 f80b 	bl	800aa98 <tcp_enqueue_flags>
 800aa82:	4603      	mov	r3, r0
}
 800aa84:	4618      	mov	r0, r3
 800aa86:	3714      	adds	r7, #20
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd90      	pop	{r4, r7, pc}
 800aa8c:	08013240 	.word	0x08013240
 800aa90:	08013648 	.word	0x08013648
 800aa94:	08013294 	.word	0x08013294

0800aa98 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b08a      	sub	sp, #40	; 0x28
 800aa9c:	af02      	add	r7, sp, #8
 800aa9e:	6078      	str	r0, [r7, #4]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800aaac:	78fb      	ldrb	r3, [r7, #3]
 800aaae:	f003 0303 	and.w	r3, r3, #3
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d106      	bne.n	800aac4 <tcp_enqueue_flags+0x2c>
 800aab6:	4b67      	ldr	r3, [pc, #412]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800aab8:	f240 4212 	movw	r2, #1042	; 0x412
 800aabc:	4966      	ldr	r1, [pc, #408]	; (800ac58 <tcp_enqueue_flags+0x1c0>)
 800aabe:	4867      	ldr	r0, [pc, #412]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800aac0:	f006 f8d2 	bl	8010c68 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d106      	bne.n	800aad8 <tcp_enqueue_flags+0x40>
 800aaca:	4b62      	ldr	r3, [pc, #392]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800aacc:	f240 4213 	movw	r2, #1043	; 0x413
 800aad0:	4963      	ldr	r1, [pc, #396]	; (800ac60 <tcp_enqueue_flags+0x1c8>)
 800aad2:	4862      	ldr	r0, [pc, #392]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800aad4:	f006 f8c8 	bl	8010c68 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800aad8:	78fb      	ldrb	r3, [r7, #3]
 800aada:	f003 0302 	and.w	r3, r3, #2
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800aae2:	2301      	movs	r3, #1
 800aae4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800aae6:	7ffb      	ldrb	r3, [r7, #31]
 800aae8:	009b      	lsls	r3, r3, #2
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 0304 	and.w	r3, r3, #4
 800aaf0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800aaf2:	7dfb      	ldrb	r3, [r7, #23]
 800aaf4:	b29b      	uxth	r3, r3
 800aaf6:	f44f 7220 	mov.w	r2, #640	; 0x280
 800aafa:	4619      	mov	r1, r3
 800aafc:	2036      	movs	r0, #54	; 0x36
 800aafe:	f7fa f987 	bl	8004e10 <pbuf_alloc>
 800ab02:	6138      	str	r0, [r7, #16]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d109      	bne.n	800ab1e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	8b5b      	ldrh	r3, [r3, #26]
 800ab0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1c:	e095      	b.n	800ac4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	895a      	ldrh	r2, [r3, #10]
 800ab22:	7dfb      	ldrb	r3, [r7, #23]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d206      	bcs.n	800ab38 <tcp_enqueue_flags+0xa0>
 800ab2a:	4b4a      	ldr	r3, [pc, #296]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800ab2c:	f240 423a 	movw	r2, #1082	; 0x43a
 800ab30:	494c      	ldr	r1, [pc, #304]	; (800ac64 <tcp_enqueue_flags+0x1cc>)
 800ab32:	484a      	ldr	r0, [pc, #296]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800ab34:	f006 f898 	bl	8010c68 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800ab3c:	78fa      	ldrb	r2, [r7, #3]
 800ab3e:	7ffb      	ldrb	r3, [r7, #31]
 800ab40:	9300      	str	r3, [sp, #0]
 800ab42:	460b      	mov	r3, r1
 800ab44:	6939      	ldr	r1, [r7, #16]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f7ff f916 	bl	8009d78 <tcp_create_segment>
 800ab4c:	60f8      	str	r0, [r7, #12]
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d109      	bne.n	800ab68 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	8b5b      	ldrh	r3, [r3, #26]
 800ab58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5c:	b29a      	uxth	r2, r3
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800ab62:	f04f 33ff 	mov.w	r3, #4294967295
 800ab66:	e070      	b.n	800ac4a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f003 0303 	and.w	r3, r3, #3
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d006      	beq.n	800ab82 <tcp_enqueue_flags+0xea>
 800ab74:	4b37      	ldr	r3, [pc, #220]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800ab76:	f240 4242 	movw	r2, #1090	; 0x442
 800ab7a:	493b      	ldr	r1, [pc, #236]	; (800ac68 <tcp_enqueue_flags+0x1d0>)
 800ab7c:	4837      	ldr	r0, [pc, #220]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800ab7e:	f006 f873 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	891b      	ldrh	r3, [r3, #8]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d006      	beq.n	800ab98 <tcp_enqueue_flags+0x100>
 800ab8a:	4b32      	ldr	r3, [pc, #200]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800ab8c:	f240 4243 	movw	r2, #1091	; 0x443
 800ab90:	4936      	ldr	r1, [pc, #216]	; (800ac6c <tcp_enqueue_flags+0x1d4>)
 800ab92:	4832      	ldr	r0, [pc, #200]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800ab94:	f006 f868 	bl	8010c68 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d103      	bne.n	800aba8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	66da      	str	r2, [r3, #108]	; 0x6c
 800aba6:	e00d      	b.n	800abc4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abac:	61bb      	str	r3, [r7, #24]
 800abae:	e002      	b.n	800abb6 <tcp_enqueue_flags+0x11e>
 800abb0:	69bb      	ldr	r3, [r7, #24]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	61bb      	str	r3, [r7, #24]
 800abb6:	69bb      	ldr	r3, [r7, #24]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d1f8      	bne.n	800abb0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800abbe:	69bb      	ldr	r3, [r7, #24]
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800abcc:	78fb      	ldrb	r3, [r7, #3]
 800abce:	f003 0302 	and.w	r3, r3, #2
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d104      	bne.n	800abe0 <tcp_enqueue_flags+0x148>
 800abd6:	78fb      	ldrb	r3, [r7, #3]
 800abd8:	f003 0301 	and.w	r3, r3, #1
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d004      	beq.n	800abea <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abe4:	1c5a      	adds	r2, r3, #1
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800abea:	78fb      	ldrb	r3, [r7, #3]
 800abec:	f003 0301 	and.w	r3, r3, #1
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d006      	beq.n	800ac02 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	8b5b      	ldrh	r3, [r3, #26]
 800abf8:	f043 0320 	orr.w	r3, r3, #32
 800abfc:	b29a      	uxth	r2, r3
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7fa fc6a 	bl	80054e0 <pbuf_clen>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	461a      	mov	r2, r3
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac16:	4413      	add	r3, r2
 800ac18:	b29a      	uxth	r2, r3
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d00e      	beq.n	800ac48 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <tcp_enqueue_flags+0x1b0>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d106      	bne.n	800ac48 <tcp_enqueue_flags+0x1b0>
 800ac3a:	4b06      	ldr	r3, [pc, #24]	; (800ac54 <tcp_enqueue_flags+0x1bc>)
 800ac3c:	f240 4266 	movw	r2, #1126	; 0x466
 800ac40:	490b      	ldr	r1, [pc, #44]	; (800ac70 <tcp_enqueue_flags+0x1d8>)
 800ac42:	4806      	ldr	r0, [pc, #24]	; (800ac5c <tcp_enqueue_flags+0x1c4>)
 800ac44:	f006 f810 	bl	8010c68 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800ac48:	2300      	movs	r3, #0
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	08013240 	.word	0x08013240
 800ac58:	08013664 	.word	0x08013664
 800ac5c:	08013294 	.word	0x08013294
 800ac60:	080136bc 	.word	0x080136bc
 800ac64:	080136dc 	.word	0x080136dc
 800ac68:	08013718 	.word	0x08013718
 800ac6c:	08013730 	.word	0x08013730
 800ac70:	0801375c 	.word	0x0801375c

0800ac74 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800ac74:	b5b0      	push	{r4, r5, r7, lr}
 800ac76:	b08a      	sub	sp, #40	; 0x28
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d106      	bne.n	800ac90 <tcp_output+0x1c>
 800ac82:	4ba0      	ldr	r3, [pc, #640]	; (800af04 <tcp_output+0x290>)
 800ac84:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800ac88:	499f      	ldr	r1, [pc, #636]	; (800af08 <tcp_output+0x294>)
 800ac8a:	48a0      	ldr	r0, [pc, #640]	; (800af0c <tcp_output+0x298>)
 800ac8c:	f005 ffec 	bl	8010c68 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	7d1b      	ldrb	r3, [r3, #20]
 800ac94:	2b01      	cmp	r3, #1
 800ac96:	d106      	bne.n	800aca6 <tcp_output+0x32>
 800ac98:	4b9a      	ldr	r3, [pc, #616]	; (800af04 <tcp_output+0x290>)
 800ac9a:	f240 42e4 	movw	r2, #1252	; 0x4e4
 800ac9e:	499c      	ldr	r1, [pc, #624]	; (800af10 <tcp_output+0x29c>)
 800aca0:	489a      	ldr	r0, [pc, #616]	; (800af0c <tcp_output+0x298>)
 800aca2:	f005 ffe1 	bl	8010c68 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800aca6:	4b9b      	ldr	r3, [pc, #620]	; (800af14 <tcp_output+0x2a0>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	429a      	cmp	r2, r3
 800acae:	d101      	bne.n	800acb4 <tcp_output+0x40>
    return ERR_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	e1d2      	b.n	800b05a <tcp_output+0x3e6>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d203      	bcs.n	800accc <tcp_output+0x58>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800acca:	e002      	b.n	800acd2 <tcp_output+0x5e>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800acd2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd8:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800acda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d10b      	bne.n	800acf8 <tcp_output+0x84>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	8b5b      	ldrh	r3, [r3, #26]
 800ace4:	f003 0302 	and.w	r3, r3, #2
 800ace8:	2b00      	cmp	r3, #0
 800acea:	f000 81a9 	beq.w	800b040 <tcp_output+0x3cc>
      return tcp_send_empty_ack(pcb);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fdd6 	bl	800b8a0 <tcp_send_empty_ack>
 800acf4:	4603      	mov	r3, r0
 800acf6:	e1b0      	b.n	800b05a <tcp_output+0x3e6>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800acf8:	6879      	ldr	r1, [r7, #4]
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	3304      	adds	r3, #4
 800acfe:	461a      	mov	r2, r3
 800ad00:	6878      	ldr	r0, [r7, #4]
 800ad02:	f7ff f81d 	bl	8009d40 <tcp_route>
 800ad06:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d102      	bne.n	800ad14 <tcp_output+0xa0>
    return ERR_RTE;
 800ad0e:	f06f 0303 	mvn.w	r3, #3
 800ad12:	e1a2      	b.n	800b05a <tcp_output+0x3e6>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d003      	beq.n	800ad22 <tcp_output+0xae>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d111      	bne.n	800ad46 <tcp_output+0xd2>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800ad22:	697b      	ldr	r3, [r7, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d002      	beq.n	800ad2e <tcp_output+0xba>
 800ad28:	697b      	ldr	r3, [r7, #20]
 800ad2a:	3304      	adds	r3, #4
 800ad2c:	e000      	b.n	800ad30 <tcp_output+0xbc>
 800ad2e:	2300      	movs	r3, #0
 800ad30:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d102      	bne.n	800ad3e <tcp_output+0xca>
      return ERR_RTE;
 800ad38:	f06f 0303 	mvn.w	r3, #3
 800ad3c:	e18d      	b.n	800b05a <tcp_output+0x3e6>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ad46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad48:	68db      	ldr	r3, [r3, #12]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f7f8 fd44 	bl	80037da <lwip_htonl>
 800ad52:	4602      	mov	r2, r0
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad5c:	8912      	ldrh	r2, [r2, #8]
 800ad5e:	4413      	add	r3, r2
 800ad60:	69ba      	ldr	r2, [r7, #24]
 800ad62:	429a      	cmp	r2, r3
 800ad64:	d227      	bcs.n	800adb6 <tcp_output+0x142>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d114      	bne.n	800ad9e <tcp_output+0x12a>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d110      	bne.n	800ad9e <tcp_output+0x12a>
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <tcp_output+0x12a>
      pcb->persist_cnt = 0;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2201      	movs	r2, #1
 800ad92:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	8b5b      	ldrh	r3, [r3, #26]
 800ada2:	f003 0302 	and.w	r3, r3, #2
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f000 814c 	beq.w	800b044 <tcp_output+0x3d0>
      return tcp_send_empty_ack(pcb);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 fd77 	bl	800b8a0 <tcp_send_empty_ack>
 800adb2:	4603      	mov	r3, r0
 800adb4:	e151      	b.n	800b05a <tcp_output+0x3e6>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2200      	movs	r2, #0
 800adba:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc2:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800adc4:	6a3b      	ldr	r3, [r7, #32]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	f000 811b 	beq.w	800b002 <tcp_output+0x38e>
    for (; useg->next != NULL; useg = useg->next);
 800adcc:	e002      	b.n	800add4 <tcp_output+0x160>
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	623b      	str	r3, [r7, #32]
 800add4:	6a3b      	ldr	r3, [r7, #32]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f8      	bne.n	800adce <tcp_output+0x15a>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800addc:	e111      	b.n	800b002 <tcp_output+0x38e>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800adde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade0:	68db      	ldr	r3, [r3, #12]
 800ade2:	899b      	ldrh	r3, [r3, #12]
 800ade4:	b29b      	uxth	r3, r3
 800ade6:	4618      	mov	r0, r3
 800ade8:	f7f8 fce2 	bl	80037b0 <lwip_htons>
 800adec:	4603      	mov	r3, r0
 800adee:	b2db      	uxtb	r3, r3
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d006      	beq.n	800ae06 <tcp_output+0x192>
 800adf8:	4b42      	ldr	r3, [pc, #264]	; (800af04 <tcp_output+0x290>)
 800adfa:	f240 5237 	movw	r2, #1335	; 0x537
 800adfe:	4946      	ldr	r1, [pc, #280]	; (800af18 <tcp_output+0x2a4>)
 800ae00:	4842      	ldr	r0, [pc, #264]	; (800af0c <tcp_output+0x298>)
 800ae02:	f005 ff31 	bl	8010c68 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d01f      	beq.n	800ae4e <tcp_output+0x1da>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	8b5b      	ldrh	r3, [r3, #26]
 800ae12:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d119      	bne.n	800ae4e <tcp_output+0x1da>
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00b      	beq.n	800ae3a <tcp_output+0x1c6>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d110      	bne.n	800ae4e <tcp_output+0x1da>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ae30:	891a      	ldrh	r2, [r3, #8]
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ae36:	429a      	cmp	r2, r3
 800ae38:	d209      	bcs.n	800ae4e <tcp_output+0x1da>
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d004      	beq.n	800ae4e <tcp_output+0x1da>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ae4a:	2b08      	cmp	r3, #8
 800ae4c:	d901      	bls.n	800ae52 <tcp_output+0x1de>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e000      	b.n	800ae54 <tcp_output+0x1e0>
 800ae52:	2300      	movs	r3, #0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d106      	bne.n	800ae66 <tcp_output+0x1f2>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	8b5b      	ldrh	r3, [r3, #26]
 800ae5c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	f000 80e3 	beq.w	800b02c <tcp_output+0x3b8>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	7d1b      	ldrb	r3, [r3, #20]
 800ae6a:	2b02      	cmp	r3, #2
 800ae6c:	d00d      	beq.n	800ae8a <tcp_output+0x216>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ae6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae70:	68db      	ldr	r3, [r3, #12]
 800ae72:	899b      	ldrh	r3, [r3, #12]
 800ae74:	b29c      	uxth	r4, r3
 800ae76:	2010      	movs	r0, #16
 800ae78:	f7f8 fc9a 	bl	80037b0 <lwip_htons>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	461a      	mov	r2, r3
 800ae80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	4322      	orrs	r2, r4
 800ae86:	b292      	uxth	r2, r2
 800ae88:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ae8a:	697a      	ldr	r2, [r7, #20]
 800ae8c:	6879      	ldr	r1, [r7, #4]
 800ae8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ae90:	f000 f908 	bl	800b0a4 <tcp_output_segment>
 800ae94:	4603      	mov	r3, r0
 800ae96:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ae98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d009      	beq.n	800aeb4 <tcp_output+0x240>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	8b5b      	ldrh	r3, [r3, #26]
 800aea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aea8:	b29a      	uxth	r2, r3
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	835a      	strh	r2, [r3, #26]
      return err;
 800aeae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aeb2:	e0d2      	b.n	800b05a <tcp_output+0x3e6>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800aeb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb6:	681a      	ldr	r2, [r3, #0]
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	7d1b      	ldrb	r3, [r3, #20]
 800aec0:	2b02      	cmp	r3, #2
 800aec2:	d006      	beq.n	800aed2 <tcp_output+0x25e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	8b5b      	ldrh	r3, [r3, #26]
 800aec8:	f023 0303 	bic.w	r3, r3, #3
 800aecc:	b29a      	uxth	r2, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800aed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed4:	68db      	ldr	r3, [r3, #12]
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7f8 fc7e 	bl	80037da <lwip_htonl>
 800aede:	4604      	mov	r4, r0
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	891b      	ldrh	r3, [r3, #8]
 800aee4:	461d      	mov	r5, r3
 800aee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee8:	68db      	ldr	r3, [r3, #12]
 800aeea:	899b      	ldrh	r3, [r3, #12]
 800aeec:	b29b      	uxth	r3, r3
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7f8 fc5e 	bl	80037b0 <lwip_htons>
 800aef4:	4603      	mov	r3, r0
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d00d      	beq.n	800af1c <tcp_output+0x2a8>
 800af00:	2301      	movs	r3, #1
 800af02:	e00c      	b.n	800af1e <tcp_output+0x2aa>
 800af04:	08013240 	.word	0x08013240
 800af08:	08013784 	.word	0x08013784
 800af0c:	08013294 	.word	0x08013294
 800af10:	0801379c 	.word	0x0801379c
 800af14:	20006e78 	.word	0x20006e78
 800af18:	080137c4 	.word	0x080137c4
 800af1c:	2300      	movs	r3, #0
 800af1e:	442b      	add	r3, r5
 800af20:	4423      	add	r3, r4
 800af22:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	1ad3      	subs	r3, r2, r3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	da02      	bge.n	800af36 <tcp_output+0x2c2>
      pcb->snd_nxt = snd_nxt;
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	68ba      	ldr	r2, [r7, #8]
 800af34:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	891b      	ldrh	r3, [r3, #8]
 800af3a:	461c      	mov	r4, r3
 800af3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af3e:	68db      	ldr	r3, [r3, #12]
 800af40:	899b      	ldrh	r3, [r3, #12]
 800af42:	b29b      	uxth	r3, r3
 800af44:	4618      	mov	r0, r3
 800af46:	f7f8 fc33 	bl	80037b0 <lwip_htons>
 800af4a:	4603      	mov	r3, r0
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <tcp_output+0x2e6>
 800af56:	2301      	movs	r3, #1
 800af58:	e000      	b.n	800af5c <tcp_output+0x2e8>
 800af5a:	2300      	movs	r3, #0
 800af5c:	4423      	add	r3, r4
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d049      	beq.n	800aff6 <tcp_output+0x382>
      seg->next = NULL;
 800af62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af64:	2200      	movs	r2, #0
 800af66:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d105      	bne.n	800af7c <tcp_output+0x308>
        pcb->unacked = seg;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af74:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800af76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af78:	623b      	str	r3, [r7, #32]
 800af7a:	e03f      	b.n	800affc <tcp_output+0x388>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	68db      	ldr	r3, [r3, #12]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	4618      	mov	r0, r3
 800af84:	f7f8 fc29 	bl	80037da <lwip_htonl>
 800af88:	4604      	mov	r4, r0
 800af8a:	6a3b      	ldr	r3, [r7, #32]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4618      	mov	r0, r3
 800af92:	f7f8 fc22 	bl	80037da <lwip_htonl>
 800af96:	4603      	mov	r3, r0
 800af98:	1ae3      	subs	r3, r4, r3
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	da24      	bge.n	800afe8 <tcp_output+0x374>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	3370      	adds	r3, #112	; 0x70
 800afa2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800afa4:	e002      	b.n	800afac <tcp_output+0x338>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800afa6:	69fb      	ldr	r3, [r7, #28]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d011      	beq.n	800afd8 <tcp_output+0x364>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800afb4:	69fb      	ldr	r3, [r7, #28]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	685b      	ldr	r3, [r3, #4]
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7f8 fc0c 	bl	80037da <lwip_htonl>
 800afc2:	4604      	mov	r4, r0
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	4618      	mov	r0, r3
 800afcc:	f7f8 fc05 	bl	80037da <lwip_htonl>
 800afd0:	4603      	mov	r3, r0
 800afd2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	dbe6      	blt.n	800afa6 <tcp_output+0x332>
          }
          seg->next = (*cur_seg);
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	681a      	ldr	r2, [r3, #0]
 800afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afde:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	e009      	b.n	800affc <tcp_output+0x388>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800afe8:	6a3b      	ldr	r3, [r7, #32]
 800afea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afec:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	e002      	b.n	800affc <tcp_output+0x388>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800aff6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff8:	f7fb ff1a 	bl	8006e30 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b000:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800b002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b004:	2b00      	cmp	r3, #0
 800b006:	d012      	beq.n	800b02e <tcp_output+0x3ba>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800b008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	4618      	mov	r0, r3
 800b010:	f7f8 fbe3 	bl	80037da <lwip_htonl>
 800b014:	4602      	mov	r2, r0
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b01a:	1ad3      	subs	r3, r2, r3
 800b01c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b01e:	8912      	ldrh	r2, [r2, #8]
 800b020:	4413      	add	r3, r2
  while (seg != NULL &&
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	429a      	cmp	r2, r3
 800b026:	f4bf aeda 	bcs.w	800adde <tcp_output+0x16a>
 800b02a:	e000      	b.n	800b02e <tcp_output+0x3ba>
      break;
 800b02c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b032:	2b00      	cmp	r3, #0
 800b034:	d108      	bne.n	800b048 <tcp_output+0x3d4>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2200      	movs	r2, #0
 800b03a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800b03e:	e004      	b.n	800b04a <tcp_output+0x3d6>
    goto output_done;
 800b040:	bf00      	nop
 800b042:	e002      	b.n	800b04a <tcp_output+0x3d6>
    goto output_done;
 800b044:	bf00      	nop
 800b046:	e000      	b.n	800b04a <tcp_output+0x3d6>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800b048:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	8b5b      	ldrh	r3, [r3, #26]
 800b04e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b052:	b29a      	uxth	r2, r3
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800b058:	2300      	movs	r3, #0
}
 800b05a:	4618      	mov	r0, r3
 800b05c:	3728      	adds	r7, #40	; 0x28
 800b05e:	46bd      	mov	sp, r7
 800b060:	bdb0      	pop	{r4, r5, r7, pc}
 800b062:	bf00      	nop

0800b064 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d106      	bne.n	800b080 <tcp_output_segment_busy+0x1c>
 800b072:	4b09      	ldr	r3, [pc, #36]	; (800b098 <tcp_output_segment_busy+0x34>)
 800b074:	f240 529a 	movw	r2, #1434	; 0x59a
 800b078:	4908      	ldr	r1, [pc, #32]	; (800b09c <tcp_output_segment_busy+0x38>)
 800b07a:	4809      	ldr	r0, [pc, #36]	; (800b0a0 <tcp_output_segment_busy+0x3c>)
 800b07c:	f005 fdf4 	bl	8010c68 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	685b      	ldr	r3, [r3, #4]
 800b084:	7b9b      	ldrb	r3, [r3, #14]
 800b086:	2b01      	cmp	r3, #1
 800b088:	d001      	beq.n	800b08e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 800b08a:	2301      	movs	r3, #1
 800b08c:	e000      	b.n	800b090 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}
 800b098:	08013240 	.word	0x08013240
 800b09c:	080137dc 	.word	0x080137dc
 800b0a0:	08013294 	.word	0x08013294

0800b0a4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 800b0a4:	b5b0      	push	{r4, r5, r7, lr}
 800b0a6:	b08c      	sub	sp, #48	; 0x30
 800b0a8:	af04      	add	r7, sp, #16
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d106      	bne.n	800b0c4 <tcp_output_segment+0x20>
 800b0b6:	4b64      	ldr	r3, [pc, #400]	; (800b248 <tcp_output_segment+0x1a4>)
 800b0b8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 800b0bc:	4963      	ldr	r1, [pc, #396]	; (800b24c <tcp_output_segment+0x1a8>)
 800b0be:	4864      	ldr	r0, [pc, #400]	; (800b250 <tcp_output_segment+0x1ac>)
 800b0c0:	f005 fdd2 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d106      	bne.n	800b0d8 <tcp_output_segment+0x34>
 800b0ca:	4b5f      	ldr	r3, [pc, #380]	; (800b248 <tcp_output_segment+0x1a4>)
 800b0cc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 800b0d0:	4960      	ldr	r1, [pc, #384]	; (800b254 <tcp_output_segment+0x1b0>)
 800b0d2:	485f      	ldr	r0, [pc, #380]	; (800b250 <tcp_output_segment+0x1ac>)
 800b0d4:	f005 fdc8 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d106      	bne.n	800b0ec <tcp_output_segment+0x48>
 800b0de:	4b5a      	ldr	r3, [pc, #360]	; (800b248 <tcp_output_segment+0x1a4>)
 800b0e0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 800b0e4:	495c      	ldr	r1, [pc, #368]	; (800b258 <tcp_output_segment+0x1b4>)
 800b0e6:	485a      	ldr	r0, [pc, #360]	; (800b250 <tcp_output_segment+0x1ac>)
 800b0e8:	f005 fdbe 	bl	8010c68 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 800b0ec:	68f8      	ldr	r0, [r7, #12]
 800b0ee:	f7ff ffb9 	bl	800b064 <tcp_output_segment_busy>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d001      	beq.n	800b0fc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e0a0      	b.n	800b23e <tcp_output_segment+0x19a>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	68dc      	ldr	r4, [r3, #12]
 800b104:	4610      	mov	r0, r2
 800b106:	f7f8 fb68 	bl	80037da <lwip_htonl>
 800b10a:	4603      	mov	r3, r0
 800b10c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	68dc      	ldr	r4, [r3, #12]
 800b116:	4610      	mov	r0, r2
 800b118:	f7f8 fb4a 	bl	80037b0 <lwip_htons>
 800b11c:	4603      	mov	r3, r0
 800b11e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b128:	441a      	add	r2, r3
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	3314      	adds	r3, #20
 800b134:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	7a9b      	ldrb	r3, [r3, #10]
 800b13a:	f003 0301 	and.w	r3, r3, #1
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d015      	beq.n	800b16e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	3304      	adds	r3, #4
 800b146:	461a      	mov	r2, r3
 800b148:	6879      	ldr	r1, [r7, #4]
 800b14a:	f44f 7006 	mov.w	r0, #536	; 0x218
 800b14e:	f7fc fa33 	bl	80075b8 <tcp_eff_send_mss_netif>
 800b152:	4603      	mov	r3, r0
 800b154:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 800b156:	8b7b      	ldrh	r3, [r7, #26]
 800b158:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 800b15c:	4618      	mov	r0, r3
 800b15e:	f7f8 fb3c 	bl	80037da <lwip_htonl>
 800b162:	4602      	mov	r2, r0
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	601a      	str	r2, [r3, #0]
    opts += 1;
 800b168:	69fb      	ldr	r3, [r7, #28]
 800b16a:	3304      	adds	r3, #4
 800b16c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800b174:	2b00      	cmp	r3, #0
 800b176:	da02      	bge.n	800b17e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	2200      	movs	r2, #0
 800b17c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b182:	2b00      	cmp	r3, #0
 800b184:	d10c      	bne.n	800b1a0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 800b186:	4b35      	ldr	r3, [pc, #212]	; (800b25c <tcp_output_segment+0x1b8>)
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	68db      	ldr	r3, [r3, #12]
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	4618      	mov	r0, r3
 800b196:	f7f8 fb20 	bl	80037da <lwip_htonl>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	1ad3      	subs	r3, r2, r3
 800b1ae:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	8959      	ldrh	r1, [r3, #10]
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	8b3a      	ldrh	r2, [r7, #24]
 800b1bc:	1a8a      	subs	r2, r1, r2
 800b1be:	b292      	uxth	r2, r2
 800b1c0:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	8919      	ldrh	r1, [r3, #8]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	8b3a      	ldrh	r2, [r7, #24]
 800b1ce:	1a8a      	subs	r2, r1, r2
 800b1d0:	b292      	uxth	r2, r2
 800b1d2:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	68fa      	ldr	r2, [r7, #12]
 800b1da:	68d2      	ldr	r2, [r2, #12]
 800b1dc:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	741a      	strb	r2, [r3, #16]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f103 0214 	add.w	r2, r3, #20
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	7a9b      	ldrb	r3, [r3, #10]
 800b1f6:	009b      	lsls	r3, r3, #2
 800b1f8:	f003 0304 	and.w	r3, r3, #4
 800b1fc:	4413      	add	r3, r2
 800b1fe:	69fa      	ldr	r2, [r7, #28]
 800b200:	429a      	cmp	r2, r3
 800b202:	d006      	beq.n	800b212 <tcp_output_segment+0x16e>
 800b204:	4b10      	ldr	r3, [pc, #64]	; (800b248 <tcp_output_segment+0x1a4>)
 800b206:	f240 621c 	movw	r2, #1564	; 0x61c
 800b20a:	4915      	ldr	r1, [pc, #84]	; (800b260 <tcp_output_segment+0x1bc>)
 800b20c:	4810      	ldr	r0, [pc, #64]	; (800b250 <tcp_output_segment+0x1ac>)
 800b20e:	f005 fd2b 	bl	8010c68 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	6858      	ldr	r0, [r3, #4]
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	1d1c      	adds	r4, r3, #4
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	7add      	ldrb	r5, [r3, #11]
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	7a9b      	ldrb	r3, [r3, #10]
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	9202      	str	r2, [sp, #8]
 800b228:	2206      	movs	r2, #6
 800b22a:	9201      	str	r2, [sp, #4]
 800b22c:	9300      	str	r3, [sp, #0]
 800b22e:	462b      	mov	r3, r5
 800b230:	4622      	mov	r2, r4
 800b232:	f004 fcaf 	bl	800fb94 <ip4_output_if>
 800b236:	4603      	mov	r3, r0
 800b238:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 800b23a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3720      	adds	r7, #32
 800b242:	46bd      	mov	sp, r7
 800b244:	bdb0      	pop	{r4, r5, r7, pc}
 800b246:	bf00      	nop
 800b248:	08013240 	.word	0x08013240
 800b24c:	08013804 	.word	0x08013804
 800b250:	08013294 	.word	0x08013294
 800b254:	08013824 	.word	0x08013824
 800b258:	08013844 	.word	0x08013844
 800b25c:	20006e68 	.word	0x20006e68
 800b260:	08013868 	.word	0x08013868

0800b264 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 800b264:	b5b0      	push	{r4, r5, r7, lr}
 800b266:	b084      	sub	sp, #16
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d106      	bne.n	800b280 <tcp_rexmit_rto_prepare+0x1c>
 800b272:	4b31      	ldr	r3, [pc, #196]	; (800b338 <tcp_rexmit_rto_prepare+0xd4>)
 800b274:	f240 6263 	movw	r2, #1635	; 0x663
 800b278:	4930      	ldr	r1, [pc, #192]	; (800b33c <tcp_rexmit_rto_prepare+0xd8>)
 800b27a:	4831      	ldr	r0, [pc, #196]	; (800b340 <tcp_rexmit_rto_prepare+0xdc>)
 800b27c:	f005 fcf4 	bl	8010c68 <iprintf>

  if (pcb->unacked == NULL) {
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b284:	2b00      	cmp	r3, #0
 800b286:	d102      	bne.n	800b28e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 800b288:	f06f 0305 	mvn.w	r3, #5
 800b28c:	e050      	b.n	800b330 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b292:	60fb      	str	r3, [r7, #12]
 800b294:	e00b      	b.n	800b2ae <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 800b296:	68f8      	ldr	r0, [r7, #12]
 800b298:	f7ff fee4 	bl	800b064 <tcp_output_segment_busy>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d002      	beq.n	800b2a8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 800b2a2:	f06f 0305 	mvn.w	r3, #5
 800b2a6:	e043      	b.n	800b330 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	60fb      	str	r3, [r7, #12]
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d1ef      	bne.n	800b296 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 800b2b6:	68f8      	ldr	r0, [r7, #12]
 800b2b8:	f7ff fed4 	bl	800b064 <tcp_output_segment_busy>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d002      	beq.n	800b2c8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 800b2c2:	f06f 0305 	mvn.w	r3, #5
 800b2c6:	e033      	b.n	800b330 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	8b5b      	ldrh	r3, [r3, #26]
 800b2e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2e6:	b29a      	uxth	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	68db      	ldr	r3, [r3, #12]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7f8 fa71 	bl	80037da <lwip_htonl>
 800b2f8:	4604      	mov	r4, r0
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	891b      	ldrh	r3, [r3, #8]
 800b2fe:	461d      	mov	r5, r3
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	68db      	ldr	r3, [r3, #12]
 800b304:	899b      	ldrh	r3, [r3, #12]
 800b306:	b29b      	uxth	r3, r3
 800b308:	4618      	mov	r0, r3
 800b30a:	f7f8 fa51 	bl	80037b0 <lwip_htons>
 800b30e:	4603      	mov	r3, r0
 800b310:	b2db      	uxtb	r3, r3
 800b312:	f003 0303 	and.w	r3, r3, #3
 800b316:	2b00      	cmp	r3, #0
 800b318:	d001      	beq.n	800b31e <tcp_rexmit_rto_prepare+0xba>
 800b31a:	2301      	movs	r3, #1
 800b31c:	e000      	b.n	800b320 <tcp_rexmit_rto_prepare+0xbc>
 800b31e:	2300      	movs	r3, #0
 800b320:	442b      	add	r3, r5
 800b322:	18e2      	adds	r2, r4, r3
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2200      	movs	r2, #0
 800b32c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	3710      	adds	r7, #16
 800b334:	46bd      	mov	sp, r7
 800b336:	bdb0      	pop	{r4, r5, r7, pc}
 800b338:	08013240 	.word	0x08013240
 800b33c:	0801387c 	.word	0x0801387c
 800b340:	08013294 	.word	0x08013294

0800b344 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d106      	bne.n	800b360 <tcp_rexmit_rto_commit+0x1c>
 800b352:	4b0d      	ldr	r3, [pc, #52]	; (800b388 <tcp_rexmit_rto_commit+0x44>)
 800b354:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800b358:	490c      	ldr	r1, [pc, #48]	; (800b38c <tcp_rexmit_rto_commit+0x48>)
 800b35a:	480d      	ldr	r0, [pc, #52]	; (800b390 <tcp_rexmit_rto_commit+0x4c>)
 800b35c:	f005 fc84 	bl	8010c68 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b366:	2bff      	cmp	r3, #255	; 0xff
 800b368:	d007      	beq.n	800b37a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b370:	3301      	adds	r3, #1
 800b372:	b2da      	uxtb	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f7ff fc7a 	bl	800ac74 <tcp_output>
}
 800b380:	bf00      	nop
 800b382:	3708      	adds	r7, #8
 800b384:	46bd      	mov	sp, r7
 800b386:	bd80      	pop	{r7, pc}
 800b388:	08013240 	.word	0x08013240
 800b38c:	080138a0 	.word	0x080138a0
 800b390:	08013294 	.word	0x08013294

0800b394 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d106      	bne.n	800b3b0 <tcp_rexmit_rto+0x1c>
 800b3a2:	4b0a      	ldr	r3, [pc, #40]	; (800b3cc <tcp_rexmit_rto+0x38>)
 800b3a4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 800b3a8:	4909      	ldr	r1, [pc, #36]	; (800b3d0 <tcp_rexmit_rto+0x3c>)
 800b3aa:	480a      	ldr	r0, [pc, #40]	; (800b3d4 <tcp_rexmit_rto+0x40>)
 800b3ac:	f005 fc5c 	bl	8010c68 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f7ff ff57 	bl	800b264 <tcp_rexmit_rto_prepare>
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f7ff ffc1 	bl	800b344 <tcp_rexmit_rto_commit>
  }
}
 800b3c2:	bf00      	nop
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
 800b3ca:	bf00      	nop
 800b3cc:	08013240 	.word	0x08013240
 800b3d0:	080138c4 	.word	0x080138c4
 800b3d4:	08013294 	.word	0x08013294

0800b3d8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 800b3d8:	b590      	push	{r4, r7, lr}
 800b3da:	b085      	sub	sp, #20
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d106      	bne.n	800b3f4 <tcp_rexmit+0x1c>
 800b3e6:	4b2f      	ldr	r3, [pc, #188]	; (800b4a4 <tcp_rexmit+0xcc>)
 800b3e8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 800b3ec:	492e      	ldr	r1, [pc, #184]	; (800b4a8 <tcp_rexmit+0xd0>)
 800b3ee:	482f      	ldr	r0, [pc, #188]	; (800b4ac <tcp_rexmit+0xd4>)
 800b3f0:	f005 fc3a 	bl	8010c68 <iprintf>

  if (pcb->unacked == NULL) {
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d102      	bne.n	800b402 <tcp_rexmit+0x2a>
    return ERR_VAL;
 800b3fc:	f06f 0305 	mvn.w	r3, #5
 800b400:	e04c      	b.n	800b49c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 800b408:	68b8      	ldr	r0, [r7, #8]
 800b40a:	f7ff fe2b 	bl	800b064 <tcp_output_segment_busy>
 800b40e:	4603      	mov	r3, r0
 800b410:	2b00      	cmp	r3, #0
 800b412:	d002      	beq.n	800b41a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 800b414:	f06f 0305 	mvn.w	r3, #5
 800b418:	e040      	b.n	800b49c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	336c      	adds	r3, #108	; 0x6c
 800b426:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b428:	e002      	b.n	800b430 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d011      	beq.n	800b45c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	68db      	ldr	r3, [r3, #12]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	4618      	mov	r0, r3
 800b442:	f7f8 f9ca 	bl	80037da <lwip_htonl>
 800b446:	4604      	mov	r4, r0
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	68db      	ldr	r3, [r3, #12]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	4618      	mov	r0, r3
 800b450:	f7f8 f9c3 	bl	80037da <lwip_htonl>
 800b454:	4603      	mov	r3, r0
 800b456:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dbe6      	blt.n	800b42a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681a      	ldr	r2, [r3, #0]
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	68ba      	ldr	r2, [r7, #8]
 800b468:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d103      	bne.n	800b47a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	2200      	movs	r2, #0
 800b476:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b480:	2bff      	cmp	r3, #255	; 0xff
 800b482:	d007      	beq.n	800b494 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b48a:	3301      	adds	r3, #1
 800b48c:	b2da      	uxtb	r2, r3
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	2200      	movs	r2, #0
 800b498:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3714      	adds	r7, #20
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd90      	pop	{r4, r7, pc}
 800b4a4:	08013240 	.word	0x08013240
 800b4a8:	080138e0 	.word	0x080138e0
 800b4ac:	08013294 	.word	0x08013294

0800b4b0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <tcp_rexmit_fast+0x1c>
 800b4be:	4b2e      	ldr	r3, [pc, #184]	; (800b578 <tcp_rexmit_fast+0xc8>)
 800b4c0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 800b4c4:	492d      	ldr	r1, [pc, #180]	; (800b57c <tcp_rexmit_fast+0xcc>)
 800b4c6:	482e      	ldr	r0, [pc, #184]	; (800b580 <tcp_rexmit_fast+0xd0>)
 800b4c8:	f005 fbce 	bl	8010c68 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d04d      	beq.n	800b570 <tcp_rexmit_fast+0xc0>
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	8b5b      	ldrh	r3, [r3, #26]
 800b4d8:	f003 0304 	and.w	r3, r3, #4
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d147      	bne.n	800b570 <tcp_rexmit_fast+0xc0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f7ff ff79 	bl	800b3d8 <tcp_rexmit>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d141      	bne.n	800b570 <tcp_rexmit_fast+0xc0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d207      	bcs.n	800b50c <tcp_rexmit_fast+0x5c>
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800b502:	0fda      	lsrs	r2, r3, #31
 800b504:	4413      	add	r3, r2
 800b506:	105b      	asrs	r3, r3, #1
 800b508:	b29b      	uxth	r3, r3
 800b50a:	e006      	b.n	800b51a <tcp_rexmit_fast+0x6a>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b512:	0fda      	lsrs	r2, r3, #31
 800b514:	4413      	add	r3, r2
 800b516:	105b      	asrs	r3, r3, #1
 800b518:	b29b      	uxth	r3, r3
 800b51a:	687a      	ldr	r2, [r7, #4]
 800b51c:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800b526:	461a      	mov	r2, r3
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	429a      	cmp	r2, r3
 800b530:	d206      	bcs.n	800b540 <tcp_rexmit_fast+0x90>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b536:	005b      	lsls	r3, r3, #1
 800b538:	b29a      	uxth	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800b54a:	4619      	mov	r1, r3
 800b54c:	0049      	lsls	r1, r1, #1
 800b54e:	440b      	add	r3, r1
 800b550:	b29b      	uxth	r3, r3
 800b552:	4413      	add	r3, r2
 800b554:	b29a      	uxth	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	8b5b      	ldrh	r3, [r3, #26]
 800b560:	f043 0304 	orr.w	r3, r3, #4
 800b564:	b29a      	uxth	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2200      	movs	r2, #0
 800b56e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}
 800b578:	08013240 	.word	0x08013240
 800b57c:	080138f8 	.word	0x080138f8
 800b580:	08013294 	.word	0x08013294

0800b584 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 800b584:	b580      	push	{r7, lr}
 800b586:	b086      	sub	sp, #24
 800b588:	af00      	add	r7, sp, #0
 800b58a:	60f8      	str	r0, [r7, #12]
 800b58c:	607b      	str	r3, [r7, #4]
 800b58e:	460b      	mov	r3, r1
 800b590:	817b      	strh	r3, [r7, #10]
 800b592:	4613      	mov	r3, r2
 800b594:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 800b596:	897a      	ldrh	r2, [r7, #10]
 800b598:	893b      	ldrh	r3, [r7, #8]
 800b59a:	4413      	add	r3, r2
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	3314      	adds	r3, #20
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	2022      	movs	r0, #34	; 0x22
 800b5aa:	f7f9 fc31 	bl	8004e10 <pbuf_alloc>
 800b5ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 800b5b0:	697b      	ldr	r3, [r7, #20]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d04e      	beq.n	800b654 <tcp_output_alloc_header_common+0xd0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	895b      	ldrh	r3, [r3, #10]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	897b      	ldrh	r3, [r7, #10]
 800b5be:	3314      	adds	r3, #20
 800b5c0:	429a      	cmp	r2, r3
 800b5c2:	da06      	bge.n	800b5d2 <tcp_output_alloc_header_common+0x4e>
 800b5c4:	4b26      	ldr	r3, [pc, #152]	; (800b660 <tcp_output_alloc_header_common+0xdc>)
 800b5c6:	f240 7224 	movw	r2, #1828	; 0x724
 800b5ca:	4926      	ldr	r1, [pc, #152]	; (800b664 <tcp_output_alloc_header_common+0xe0>)
 800b5cc:	4826      	ldr	r0, [pc, #152]	; (800b668 <tcp_output_alloc_header_common+0xe4>)
 800b5ce:	f005 fb4b 	bl	8010c68 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 800b5d2:	697b      	ldr	r3, [r7, #20]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 800b5d8:	8c3b      	ldrh	r3, [r7, #32]
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7f8 f8e8 	bl	80037b0 <lwip_htons>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	461a      	mov	r2, r3
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 800b5e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7f8 f8e0 	bl	80037b0 <lwip_htons>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 800b5fe:	68f8      	ldr	r0, [r7, #12]
 800b600:	f7f8 f8eb 	bl	80037da <lwip_htonl>
 800b604:	4602      	mov	r2, r0
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 800b60a:	897b      	ldrh	r3, [r7, #10]
 800b60c:	089b      	lsrs	r3, r3, #2
 800b60e:	b29b      	uxth	r3, r3
 800b610:	3305      	adds	r3, #5
 800b612:	b29b      	uxth	r3, r3
 800b614:	031b      	lsls	r3, r3, #12
 800b616:	b29a      	uxth	r2, r3
 800b618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b61c:	b29b      	uxth	r3, r3
 800b61e:	4313      	orrs	r3, r2
 800b620:	b29b      	uxth	r3, r3
 800b622:	4618      	mov	r0, r3
 800b624:	f7f8 f8c4 	bl	80037b0 <lwip_htons>
 800b628:	4603      	mov	r3, r0
 800b62a:	461a      	mov	r2, r3
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 800b630:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b632:	4618      	mov	r0, r3
 800b634:	f7f8 f8bc 	bl	80037b0 <lwip_htons>
 800b638:	4603      	mov	r3, r0
 800b63a:	461a      	mov	r2, r3
 800b63c:	693b      	ldr	r3, [r7, #16]
 800b63e:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	2200      	movs	r2, #0
 800b644:	741a      	strb	r2, [r3, #16]
 800b646:	2200      	movs	r2, #0
 800b648:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2200      	movs	r2, #0
 800b64e:	749a      	strb	r2, [r3, #18]
 800b650:	2200      	movs	r2, #0
 800b652:	74da      	strb	r2, [r3, #19]
  }
  return p;
 800b654:	697b      	ldr	r3, [r7, #20]
}
 800b656:	4618      	mov	r0, r3
 800b658:	3718      	adds	r7, #24
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}
 800b65e:	bf00      	nop
 800b660:	08013240 	.word	0x08013240
 800b664:	08013918 	.word	0x08013918
 800b668:	08013294 	.word	0x08013294

0800b66c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 800b66c:	b5b0      	push	{r4, r5, r7, lr}
 800b66e:	b08a      	sub	sp, #40	; 0x28
 800b670:	af04      	add	r7, sp, #16
 800b672:	60f8      	str	r0, [r7, #12]
 800b674:	607b      	str	r3, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	817b      	strh	r3, [r7, #10]
 800b67a:	4613      	mov	r3, r2
 800b67c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d106      	bne.n	800b692 <tcp_output_alloc_header+0x26>
 800b684:	4b15      	ldr	r3, [pc, #84]	; (800b6dc <tcp_output_alloc_header+0x70>)
 800b686:	f240 7242 	movw	r2, #1858	; 0x742
 800b68a:	4915      	ldr	r1, [pc, #84]	; (800b6e0 <tcp_output_alloc_header+0x74>)
 800b68c:	4815      	ldr	r0, [pc, #84]	; (800b6e4 <tcp_output_alloc_header+0x78>)
 800b68e:	f005 faeb 	bl	8010c68 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800b696:	68fb      	ldr	r3, [r7, #12]
 800b698:	8adb      	ldrh	r3, [r3, #22]
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	8b12      	ldrh	r2, [r2, #24]
 800b69e:	68f9      	ldr	r1, [r7, #12]
 800b6a0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 800b6a2:	893d      	ldrh	r5, [r7, #8]
 800b6a4:	897c      	ldrh	r4, [r7, #10]
 800b6a6:	9103      	str	r1, [sp, #12]
 800b6a8:	2110      	movs	r1, #16
 800b6aa:	9102      	str	r1, [sp, #8]
 800b6ac:	9201      	str	r2, [sp, #4]
 800b6ae:	9300      	str	r3, [sp, #0]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	462a      	mov	r2, r5
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	f7ff ff65 	bl	800b584 <tcp_output_alloc_header_common>
 800b6ba:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d006      	beq.n	800b6d0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 800b6ca:	441a      	add	r2, r3
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 800b6d0:	697b      	ldr	r3, [r7, #20]
}
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bdb0      	pop	{r4, r5, r7, pc}
 800b6da:	bf00      	nop
 800b6dc:	08013240 	.word	0x08013240
 800b6e0:	08013948 	.word	0x08013948
 800b6e4:	08013294 	.word	0x08013294

0800b6e8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b088      	sub	sp, #32
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	71fb      	strb	r3, [r7, #7]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 800b6fe:	2300      	movs	r3, #0
 800b700:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d106      	bne.n	800b716 <tcp_output_fill_options+0x2e>
 800b708:	4b13      	ldr	r3, [pc, #76]	; (800b758 <tcp_output_fill_options+0x70>)
 800b70a:	f240 7256 	movw	r2, #1878	; 0x756
 800b70e:	4913      	ldr	r1, [pc, #76]	; (800b75c <tcp_output_fill_options+0x74>)
 800b710:	4813      	ldr	r0, [pc, #76]	; (800b760 <tcp_output_fill_options+0x78>)
 800b712:	f005 faa9 	bl	8010c68 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 800b71c:	69bb      	ldr	r3, [r7, #24]
 800b71e:	3314      	adds	r3, #20
 800b720:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	f103 0214 	add.w	r2, r3, #20
 800b728:	8bfb      	ldrh	r3, [r7, #30]
 800b72a:	009b      	lsls	r3, r3, #2
 800b72c:	4619      	mov	r1, r3
 800b72e:	79fb      	ldrb	r3, [r7, #7]
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	f003 0304 	and.w	r3, r3, #4
 800b736:	440b      	add	r3, r1
 800b738:	4413      	add	r3, r2
 800b73a:	697a      	ldr	r2, [r7, #20]
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d006      	beq.n	800b74e <tcp_output_fill_options+0x66>
 800b740:	4b05      	ldr	r3, [pc, #20]	; (800b758 <tcp_output_fill_options+0x70>)
 800b742:	f240 7275 	movw	r2, #1909	; 0x775
 800b746:	4907      	ldr	r1, [pc, #28]	; (800b764 <tcp_output_fill_options+0x7c>)
 800b748:	4805      	ldr	r0, [pc, #20]	; (800b760 <tcp_output_fill_options+0x78>)
 800b74a:	f005 fa8d 	bl	8010c68 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 800b74e:	bf00      	nop
 800b750:	3720      	adds	r7, #32
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	08013240 	.word	0x08013240
 800b75c:	08013970 	.word	0x08013970
 800b760:	08013294 	.word	0x08013294
 800b764:	08013868 	.word	0x08013868

0800b768 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b08a      	sub	sp, #40	; 0x28
 800b76c:	af04      	add	r7, sp, #16
 800b76e:	60f8      	str	r0, [r7, #12]
 800b770:	60b9      	str	r1, [r7, #8]
 800b772:	607a      	str	r2, [r7, #4]
 800b774:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d106      	bne.n	800b78a <tcp_output_control_segment+0x22>
 800b77c:	4b1c      	ldr	r3, [pc, #112]	; (800b7f0 <tcp_output_control_segment+0x88>)
 800b77e:	f240 7287 	movw	r2, #1927	; 0x787
 800b782:	491c      	ldr	r1, [pc, #112]	; (800b7f4 <tcp_output_control_segment+0x8c>)
 800b784:	481c      	ldr	r0, [pc, #112]	; (800b7f8 <tcp_output_control_segment+0x90>)
 800b786:	f005 fa6f 	bl	8010c68 <iprintf>

  netif = tcp_route(pcb, src, dst);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	6879      	ldr	r1, [r7, #4]
 800b78e:	68f8      	ldr	r0, [r7, #12]
 800b790:	f7fe fad6 	bl	8009d40 <tcp_route>
 800b794:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 800b796:	693b      	ldr	r3, [r7, #16]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d102      	bne.n	800b7a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 800b79c:	23fc      	movs	r3, #252	; 0xfc
 800b79e:	75fb      	strb	r3, [r7, #23]
 800b7a0:	e01c      	b.n	800b7dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d006      	beq.n	800b7b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	7adb      	ldrb	r3, [r3, #11]
 800b7ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	7a9b      	ldrb	r3, [r3, #10]
 800b7b2:	757b      	strb	r3, [r7, #21]
 800b7b4:	e003      	b.n	800b7be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 800b7b6:	23ff      	movs	r3, #255	; 0xff
 800b7b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 800b7be:	7dba      	ldrb	r2, [r7, #22]
 800b7c0:	693b      	ldr	r3, [r7, #16]
 800b7c2:	9302      	str	r3, [sp, #8]
 800b7c4:	2306      	movs	r3, #6
 800b7c6:	9301      	str	r3, [sp, #4]
 800b7c8:	7d7b      	ldrb	r3, [r7, #21]
 800b7ca:	9300      	str	r3, [sp, #0]
 800b7cc:	4613      	mov	r3, r2
 800b7ce:	683a      	ldr	r2, [r7, #0]
 800b7d0:	6879      	ldr	r1, [r7, #4]
 800b7d2:	68b8      	ldr	r0, [r7, #8]
 800b7d4:	f004 f9de 	bl	800fb94 <ip4_output_if>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 800b7dc:	68b8      	ldr	r0, [r7, #8]
 800b7de:	f7f9 fdf7 	bl	80053d0 <pbuf_free>
  return err;
 800b7e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3718      	adds	r7, #24
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	bd80      	pop	{r7, pc}
 800b7ee:	bf00      	nop
 800b7f0:	08013240 	.word	0x08013240
 800b7f4:	08013998 	.word	0x08013998
 800b7f8:	08013294 	.word	0x08013294

0800b7fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 800b7fc:	b590      	push	{r4, r7, lr}
 800b7fe:	b08b      	sub	sp, #44	; 0x2c
 800b800:	af04      	add	r7, sp, #16
 800b802:	60f8      	str	r0, [r7, #12]
 800b804:	60b9      	str	r1, [r7, #8]
 800b806:	607a      	str	r2, [r7, #4]
 800b808:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d106      	bne.n	800b81e <tcp_rst+0x22>
 800b810:	4b1f      	ldr	r3, [pc, #124]	; (800b890 <tcp_rst+0x94>)
 800b812:	f240 72c4 	movw	r2, #1988	; 0x7c4
 800b816:	491f      	ldr	r1, [pc, #124]	; (800b894 <tcp_rst+0x98>)
 800b818:	481f      	ldr	r0, [pc, #124]	; (800b898 <tcp_rst+0x9c>)
 800b81a:	f005 fa25 	bl	8010c68 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 800b81e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b820:	2b00      	cmp	r3, #0
 800b822:	d106      	bne.n	800b832 <tcp_rst+0x36>
 800b824:	4b1a      	ldr	r3, [pc, #104]	; (800b890 <tcp_rst+0x94>)
 800b826:	f240 72c5 	movw	r2, #1989	; 0x7c5
 800b82a:	491c      	ldr	r1, [pc, #112]	; (800b89c <tcp_rst+0xa0>)
 800b82c:	481a      	ldr	r0, [pc, #104]	; (800b898 <tcp_rst+0x9c>)
 800b82e:	f005 fa1b 	bl	8010c68 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b832:	2300      	movs	r3, #0
 800b834:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 800b836:	f246 0308 	movw	r3, #24584	; 0x6008
 800b83a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	b29c      	uxth	r4, r3
 800b840:	68b8      	ldr	r0, [r7, #8]
 800b842:	f7f7 ffca 	bl	80037da <lwip_htonl>
 800b846:	4602      	mov	r2, r0
 800b848:	8abb      	ldrh	r3, [r7, #20]
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	2314      	movs	r3, #20
 800b84e:	9302      	str	r3, [sp, #8]
 800b850:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b856:	9300      	str	r3, [sp, #0]
 800b858:	4613      	mov	r3, r2
 800b85a:	2200      	movs	r2, #0
 800b85c:	4621      	mov	r1, r4
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	f7ff fe90 	bl	800b584 <tcp_output_alloc_header_common>
 800b864:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d00c      	beq.n	800b886 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b86c:	7dfb      	ldrb	r3, [r7, #23]
 800b86e:	2200      	movs	r2, #0
 800b870:	6939      	ldr	r1, [r7, #16]
 800b872:	68f8      	ldr	r0, [r7, #12]
 800b874:	f7ff ff38 	bl	800b6e8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 800b878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87a:	683a      	ldr	r2, [r7, #0]
 800b87c:	6939      	ldr	r1, [r7, #16]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff ff72 	bl	800b768 <tcp_output_control_segment>
 800b884:	e000      	b.n	800b888 <tcp_rst+0x8c>
    return;
 800b886:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 800b888:	371c      	adds	r7, #28
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd90      	pop	{r4, r7, pc}
 800b88e:	bf00      	nop
 800b890:	08013240 	.word	0x08013240
 800b894:	080139c4 	.word	0x080139c4
 800b898:	08013294 	.word	0x08013294
 800b89c:	080139e0 	.word	0x080139e0

0800b8a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 800b8a0:	b590      	push	{r4, r7, lr}
 800b8a2:	b087      	sub	sp, #28
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d106      	bne.n	800b8c4 <tcp_send_empty_ack+0x24>
 800b8b6:	4b28      	ldr	r3, [pc, #160]	; (800b958 <tcp_send_empty_ack+0xb8>)
 800b8b8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 800b8bc:	4927      	ldr	r1, [pc, #156]	; (800b95c <tcp_send_empty_ack+0xbc>)
 800b8be:	4828      	ldr	r0, [pc, #160]	; (800b960 <tcp_send_empty_ack+0xc0>)
 800b8c0:	f005 f9d2 	bl	8010c68 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 0304 	and.w	r3, r3, #4
 800b8ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 800b8d0:	7d7b      	ldrb	r3, [r7, #21]
 800b8d2:	b29c      	uxth	r4, r3
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7f7 ff7e 	bl	80037da <lwip_htonl>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4621      	mov	r1, r4
 800b8e4:	6878      	ldr	r0, [r7, #4]
 800b8e6:	f7ff fec1 	bl	800b66c <tcp_output_alloc_header>
 800b8ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d109      	bne.n	800b906 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	8b5b      	ldrh	r3, [r3, #26]
 800b8f6:	f043 0303 	orr.w	r3, r3, #3
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 800b900:	f06f 0301 	mvn.w	r3, #1
 800b904:	e023      	b.n	800b94e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 800b906:	7dbb      	ldrb	r3, [r7, #22]
 800b908:	7dfa      	ldrb	r2, [r7, #23]
 800b90a:	6939      	ldr	r1, [r7, #16]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f7ff feeb 	bl	800b6e8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b912:	687a      	ldr	r2, [r7, #4]
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3304      	adds	r3, #4
 800b918:	6939      	ldr	r1, [r7, #16]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f7ff ff24 	bl	800b768 <tcp_output_control_segment>
 800b920:	4603      	mov	r3, r0
 800b922:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 800b924:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d007      	beq.n	800b93c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	8b5b      	ldrh	r3, [r3, #26]
 800b930:	f043 0303 	orr.w	r3, r3, #3
 800b934:	b29a      	uxth	r2, r3
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	835a      	strh	r2, [r3, #26]
 800b93a:	e006      	b.n	800b94a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	8b5b      	ldrh	r3, [r3, #26]
 800b940:	f023 0303 	bic.w	r3, r3, #3
 800b944:	b29a      	uxth	r2, r3
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	835a      	strh	r2, [r3, #26]
  }

  return err;
 800b94a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b94e:	4618      	mov	r0, r3
 800b950:	371c      	adds	r7, #28
 800b952:	46bd      	mov	sp, r7
 800b954:	bd90      	pop	{r4, r7, pc}
 800b956:	bf00      	nop
 800b958:	08013240 	.word	0x08013240
 800b95c:	080139fc 	.word	0x080139fc
 800b960:	08013294 	.word	0x08013294

0800b964 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 800b964:	b590      	push	{r4, r7, lr}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b96c:	2300      	movs	r3, #0
 800b96e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d106      	bne.n	800b984 <tcp_keepalive+0x20>
 800b976:	4b18      	ldr	r3, [pc, #96]	; (800b9d8 <tcp_keepalive+0x74>)
 800b978:	f640 0224 	movw	r2, #2084	; 0x824
 800b97c:	4917      	ldr	r1, [pc, #92]	; (800b9dc <tcp_keepalive+0x78>)
 800b97e:	4818      	ldr	r0, [pc, #96]	; (800b9e0 <tcp_keepalive+0x7c>)
 800b980:	f005 f972 	bl	8010c68 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 800b984:	7dfb      	ldrb	r3, [r7, #23]
 800b986:	b29c      	uxth	r4, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b98c:	3b01      	subs	r3, #1
 800b98e:	4618      	mov	r0, r3
 800b990:	f7f7 ff23 	bl	80037da <lwip_htonl>
 800b994:	4603      	mov	r3, r0
 800b996:	2200      	movs	r2, #0
 800b998:	4621      	mov	r1, r4
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f7ff fe66 	bl	800b66c <tcp_output_alloc_header>
 800b9a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d102      	bne.n	800b9ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 800b9a8:	f04f 33ff 	mov.w	r3, #4294967295
 800b9ac:	e010      	b.n	800b9d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800b9ae:	7dfb      	ldrb	r3, [r7, #23]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	6939      	ldr	r1, [r7, #16]
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7ff fe97 	bl	800b6e8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800b9ba:	687a      	ldr	r2, [r7, #4]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	3304      	adds	r3, #4
 800b9c0:	6939      	ldr	r1, [r7, #16]
 800b9c2:	6878      	ldr	r0, [r7, #4]
 800b9c4:	f7ff fed0 	bl	800b768 <tcp_output_control_segment>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800b9cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd90      	pop	{r4, r7, pc}
 800b9d8:	08013240 	.word	0x08013240
 800b9dc:	08013a1c 	.word	0x08013a1c
 800b9e0:	08013294 	.word	0x08013294

0800b9e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 800b9e4:	b590      	push	{r4, r7, lr}
 800b9e6:	b08b      	sub	sp, #44	; 0x2c
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d106      	bne.n	800ba06 <tcp_zero_window_probe+0x22>
 800b9f8:	4b4c      	ldr	r3, [pc, #304]	; (800bb2c <tcp_zero_window_probe+0x148>)
 800b9fa:	f640 024f 	movw	r2, #2127	; 0x84f
 800b9fe:	494c      	ldr	r1, [pc, #304]	; (800bb30 <tcp_zero_window_probe+0x14c>)
 800ba00:	484c      	ldr	r0, [pc, #304]	; (800bb34 <tcp_zero_window_probe+0x150>)
 800ba02:	f005 f931 	bl	8010c68 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba0a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 800ba0c:	6a3b      	ldr	r3, [r7, #32]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d101      	bne.n	800ba16 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 800ba12:	2300      	movs	r3, #0
 800ba14:	e086      	b.n	800bb24 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba1c:	2bff      	cmp	r3, #255	; 0xff
 800ba1e:	d007      	beq.n	800ba30 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800ba26:	3301      	adds	r3, #1
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 800ba30:	6a3b      	ldr	r3, [r7, #32]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	899b      	ldrh	r3, [r3, #12]
 800ba36:	b29b      	uxth	r3, r3
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7f7 feb9 	bl	80037b0 <lwip_htons>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	f003 0301 	and.w	r3, r3, #1
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d005      	beq.n	800ba56 <tcp_zero_window_probe+0x72>
 800ba4a:	6a3b      	ldr	r3, [r7, #32]
 800ba4c:	891b      	ldrh	r3, [r3, #8]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <tcp_zero_window_probe+0x72>
 800ba52:	2301      	movs	r3, #1
 800ba54:	e000      	b.n	800ba58 <tcp_zero_window_probe+0x74>
 800ba56:	2300      	movs	r3, #0
 800ba58:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 800ba5a:	7ffb      	ldrb	r3, [r7, #31]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	bf0c      	ite	eq
 800ba60:	2301      	moveq	r3, #1
 800ba62:	2300      	movne	r3, #0
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 800ba68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ba6c:	b299      	uxth	r1, r3
 800ba6e:	6a3b      	ldr	r3, [r7, #32]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	8bba      	ldrh	r2, [r7, #28]
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f7ff fdf8 	bl	800b66c <tcp_output_alloc_header>
 800ba7c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d102      	bne.n	800ba8a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 800ba84:	f04f 33ff 	mov.w	r3, #4294967295
 800ba88:	e04c      	b.n	800bb24 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 800ba8a:	69bb      	ldr	r3, [r7, #24]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 800ba90:	7ffb      	ldrb	r3, [r7, #31]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d011      	beq.n	800baba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	899b      	ldrh	r3, [r3, #12]
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	b21b      	sxth	r3, r3
 800ba9e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800baa2:	b21c      	sxth	r4, r3
 800baa4:	2011      	movs	r0, #17
 800baa6:	f7f7 fe83 	bl	80037b0 <lwip_htons>
 800baaa:	4603      	mov	r3, r0
 800baac:	b21b      	sxth	r3, r3
 800baae:	4323      	orrs	r3, r4
 800bab0:	b21b      	sxth	r3, r3
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	697b      	ldr	r3, [r7, #20]
 800bab6:	819a      	strh	r2, [r3, #12]
 800bab8:	e010      	b.n	800badc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	685b      	ldr	r3, [r3, #4]
 800babe:	3314      	adds	r3, #20
 800bac0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 800bac2:	6a3b      	ldr	r3, [r7, #32]
 800bac4:	6858      	ldr	r0, [r3, #4]
 800bac6:	6a3b      	ldr	r3, [r7, #32]
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	891a      	ldrh	r2, [r3, #8]
 800bacc:	6a3b      	ldr	r3, [r7, #32]
 800bace:	891b      	ldrh	r3, [r3, #8]
 800bad0:	1ad3      	subs	r3, r2, r3
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	2201      	movs	r2, #1
 800bad6:	6939      	ldr	r1, [r7, #16]
 800bad8:	f7f9 fe74 	bl	80057c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 800badc:	6a3b      	ldr	r3, [r7, #32]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7f7 fe79 	bl	80037da <lwip_htonl>
 800bae8:	4603      	mov	r3, r0
 800baea:	3301      	adds	r3, #1
 800baec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	1ad3      	subs	r3, r2, r3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	da02      	bge.n	800bb00 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 800bb00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800bb04:	2200      	movs	r2, #0
 800bb06:	69b9      	ldr	r1, [r7, #24]
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f7ff fded 	bl	800b6e8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	3304      	adds	r3, #4
 800bb14:	69b9      	ldr	r1, [r7, #24]
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f7ff fe26 	bl	800b768 <tcp_output_control_segment>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 800bb20:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	372c      	adds	r7, #44	; 0x2c
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	bd90      	pop	{r4, r7, pc}
 800bb2c:	08013240 	.word	0x08013240
 800bb30:	08013a38 	.word	0x08013a38
 800bb34:	08013294 	.word	0x08013294

0800bb38 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 800bb38:	b580      	push	{r7, lr}
 800bb3a:	b082      	sub	sp, #8
 800bb3c:	af00      	add	r7, sp, #0
 800bb3e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 800bb40:	f7fa f888 	bl	8005c54 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 800bb44:	4b0a      	ldr	r3, [pc, #40]	; (800bb70 <tcpip_tcp_timer+0x38>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d103      	bne.n	800bb54 <tcpip_tcp_timer+0x1c>
 800bb4c:	4b09      	ldr	r3, [pc, #36]	; (800bb74 <tcpip_tcp_timer+0x3c>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d005      	beq.n	800bb60 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bb54:	2200      	movs	r2, #0
 800bb56:	4908      	ldr	r1, [pc, #32]	; (800bb78 <tcpip_tcp_timer+0x40>)
 800bb58:	20fa      	movs	r0, #250	; 0xfa
 800bb5a:	f000 f8f1 	bl	800bd40 <sys_timeout>
 800bb5e:	e002      	b.n	800bb66 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <tcpip_tcp_timer+0x44>)
 800bb62:	2200      	movs	r2, #0
 800bb64:	601a      	str	r2, [r3, #0]
  }
}
 800bb66:	bf00      	nop
 800bb68:	3708      	adds	r7, #8
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	20006e64 	.word	0x20006e64
 800bb74:	20006e74 	.word	0x20006e74
 800bb78:	0800bb39 	.word	0x0800bb39
 800bb7c:	200005ac 	.word	0x200005ac

0800bb80 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 800bb80:	b580      	push	{r7, lr}
 800bb82:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 800bb84:	4b0a      	ldr	r3, [pc, #40]	; (800bbb0 <tcp_timer_needed+0x30>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d10f      	bne.n	800bbac <tcp_timer_needed+0x2c>
 800bb8c:	4b09      	ldr	r3, [pc, #36]	; (800bbb4 <tcp_timer_needed+0x34>)
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d103      	bne.n	800bb9c <tcp_timer_needed+0x1c>
 800bb94:	4b08      	ldr	r3, [pc, #32]	; (800bbb8 <tcp_timer_needed+0x38>)
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d007      	beq.n	800bbac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 800bb9c:	4b04      	ldr	r3, [pc, #16]	; (800bbb0 <tcp_timer_needed+0x30>)
 800bb9e:	2201      	movs	r2, #1
 800bba0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 800bba2:	2200      	movs	r2, #0
 800bba4:	4905      	ldr	r1, [pc, #20]	; (800bbbc <tcp_timer_needed+0x3c>)
 800bba6:	20fa      	movs	r0, #250	; 0xfa
 800bba8:	f000 f8ca 	bl	800bd40 <sys_timeout>
  }
}
 800bbac:	bf00      	nop
 800bbae:	bd80      	pop	{r7, pc}
 800bbb0:	200005ac 	.word	0x200005ac
 800bbb4:	20006e64 	.word	0x20006e64
 800bbb8:	20006e74 	.word	0x20006e74
 800bbbc:	0800bb39 	.word	0x0800bb39

0800bbc0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b086      	sub	sp, #24
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	60f8      	str	r0, [r7, #12]
 800bbc8:	60b9      	str	r1, [r7, #8]
 800bbca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 800bbcc:	2006      	movs	r0, #6
 800bbce:	f7f8 fd35 	bl	800463c <memp_malloc>
 800bbd2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 800bbd4:	693b      	ldr	r3, [r7, #16]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d109      	bne.n	800bbee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 800bbda:	693b      	ldr	r3, [r7, #16]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d151      	bne.n	800bc84 <sys_timeout_abs+0xc4>
 800bbe0:	4b2a      	ldr	r3, [pc, #168]	; (800bc8c <sys_timeout_abs+0xcc>)
 800bbe2:	22be      	movs	r2, #190	; 0xbe
 800bbe4:	492a      	ldr	r1, [pc, #168]	; (800bc90 <sys_timeout_abs+0xd0>)
 800bbe6:	482b      	ldr	r0, [pc, #172]	; (800bc94 <sys_timeout_abs+0xd4>)
 800bbe8:	f005 f83e 	bl	8010c68 <iprintf>
    return;
 800bbec:	e04a      	b.n	800bc84 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	68ba      	ldr	r2, [r7, #8]
 800bbf8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	68fa      	ldr	r2, [r7, #12]
 800bc04:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 800bc06:	4b24      	ldr	r3, [pc, #144]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d103      	bne.n	800bc16 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 800bc0e:	4a22      	ldr	r2, [pc, #136]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6013      	str	r3, [r2, #0]
    return;
 800bc14:	e037      	b.n	800bc86 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 800bc16:	693b      	ldr	r3, [r7, #16]
 800bc18:	685a      	ldr	r2, [r3, #4]
 800bc1a:	4b1f      	ldr	r3, [pc, #124]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	1ad3      	subs	r3, r2, r3
 800bc22:	0fdb      	lsrs	r3, r3, #31
 800bc24:	f003 0301 	and.w	r3, r3, #1
 800bc28:	b2db      	uxtb	r3, r3
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d007      	beq.n	800bc3e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 800bc2e:	4b1a      	ldr	r3, [pc, #104]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	693b      	ldr	r3, [r7, #16]
 800bc34:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 800bc36:	4a18      	ldr	r2, [pc, #96]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	6013      	str	r3, [r2, #0]
 800bc3c:	e023      	b.n	800bc86 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc3e:	4b16      	ldr	r3, [pc, #88]	; (800bc98 <sys_timeout_abs+0xd8>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	617b      	str	r3, [r7, #20]
 800bc44:	e01a      	b.n	800bc7c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d00b      	beq.n	800bc66 <sys_timeout_abs+0xa6>
 800bc4e:	693b      	ldr	r3, [r7, #16]
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	685b      	ldr	r3, [r3, #4]
 800bc58:	1ad3      	subs	r3, r2, r3
 800bc5a:	0fdb      	lsrs	r3, r3, #31
 800bc5c:	f003 0301 	and.w	r3, r3, #1
 800bc60:	b2db      	uxtb	r3, r3
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 800bc66:	697b      	ldr	r3, [r7, #20]
 800bc68:	681a      	ldr	r2, [r3, #0]
 800bc6a:	693b      	ldr	r3, [r7, #16]
 800bc6c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 800bc6e:	697b      	ldr	r3, [r7, #20]
 800bc70:	693a      	ldr	r2, [r7, #16]
 800bc72:	601a      	str	r2, [r3, #0]
        break;
 800bc74:	e007      	b.n	800bc86 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	617b      	str	r3, [r7, #20]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d1e1      	bne.n	800bc46 <sys_timeout_abs+0x86>
 800bc82:	e000      	b.n	800bc86 <sys_timeout_abs+0xc6>
    return;
 800bc84:	bf00      	nop
      }
    }
  }
}
 800bc86:	3718      	adds	r7, #24
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	bd80      	pop	{r7, pc}
 800bc8c:	08013a5c 	.word	0x08013a5c
 800bc90:	08013a90 	.word	0x08013a90
 800bc94:	08013ad0 	.word	0x08013ad0
 800bc98:	200005a4 	.word	0x200005a4

0800bc9c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	4798      	blx	r3

  now = sys_now();
 800bcae:	f7f7 fcb7 	bl	8003620 <sys_now>
 800bcb2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 800bcb4:	697b      	ldr	r3, [r7, #20]
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	4b0f      	ldr	r3, [pc, #60]	; (800bcf8 <lwip_cyclic_timer+0x5c>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 800bcc0:	68fa      	ldr	r2, [r7, #12]
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	1ad3      	subs	r3, r2, r3
 800bcc6:	0fdb      	lsrs	r3, r3, #31
 800bcc8:	f003 0301 	and.w	r3, r3, #1
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d009      	beq.n	800bce6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	681a      	ldr	r2, [r3, #0]
 800bcd6:	693b      	ldr	r3, [r7, #16]
 800bcd8:	4413      	add	r3, r2
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	4907      	ldr	r1, [pc, #28]	; (800bcfc <lwip_cyclic_timer+0x60>)
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff ff6e 	bl	800bbc0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 800bce4:	e004      	b.n	800bcf0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	4904      	ldr	r1, [pc, #16]	; (800bcfc <lwip_cyclic_timer+0x60>)
 800bcea:	68f8      	ldr	r0, [r7, #12]
 800bcec:	f7ff ff68 	bl	800bbc0 <sys_timeout_abs>
}
 800bcf0:	bf00      	nop
 800bcf2:	3718      	adds	r7, #24
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}
 800bcf8:	200005a8 	.word	0x200005a8
 800bcfc:	0800bc9d 	.word	0x0800bc9d

0800bd00 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b082      	sub	sp, #8
 800bd04:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd06:	2301      	movs	r3, #1
 800bd08:	607b      	str	r3, [r7, #4]
 800bd0a:	e00e      	b.n	800bd2a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 800bd0c:	4a0a      	ldr	r2, [pc, #40]	; (800bd38 <sys_timeouts_init+0x38>)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	00db      	lsls	r3, r3, #3
 800bd18:	4a07      	ldr	r2, [pc, #28]	; (800bd38 <sys_timeouts_init+0x38>)
 800bd1a:	4413      	add	r3, r2
 800bd1c:	461a      	mov	r2, r3
 800bd1e:	4907      	ldr	r1, [pc, #28]	; (800bd3c <sys_timeouts_init+0x3c>)
 800bd20:	f000 f80e 	bl	800bd40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3301      	adds	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b05      	cmp	r3, #5
 800bd2e:	d9ed      	bls.n	800bd0c <sys_timeouts_init+0xc>
  }
}
 800bd30:	bf00      	nop
 800bd32:	3708      	adds	r7, #8
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}
 800bd38:	080149e4 	.word	0x080149e4
 800bd3c:	0800bc9d 	.word	0x0800bc9d

0800bd40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b086      	sub	sp, #24
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	60f8      	str	r0, [r7, #12]
 800bd48:	60b9      	str	r1, [r7, #8]
 800bd4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd52:	d306      	bcc.n	800bd62 <sys_timeout+0x22>
 800bd54:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <sys_timeout+0x40>)
 800bd56:	f240 1229 	movw	r2, #297	; 0x129
 800bd5a:	490a      	ldr	r1, [pc, #40]	; (800bd84 <sys_timeout+0x44>)
 800bd5c:	480a      	ldr	r0, [pc, #40]	; (800bd88 <sys_timeout+0x48>)
 800bd5e:	f004 ff83 	bl	8010c68 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 800bd62:	f7f7 fc5d 	bl	8003620 <sys_now>
 800bd66:	4602      	mov	r2, r0
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4413      	add	r3, r2
 800bd6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 800bd6e:	687a      	ldr	r2, [r7, #4]
 800bd70:	68b9      	ldr	r1, [r7, #8]
 800bd72:	6978      	ldr	r0, [r7, #20]
 800bd74:	f7ff ff24 	bl	800bbc0 <sys_timeout_abs>
#endif
}
 800bd78:	bf00      	nop
 800bd7a:	3718      	adds	r7, #24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	08013a5c 	.word	0x08013a5c
 800bd84:	08013af8 	.word	0x08013af8
 800bd88:	08013ad0 	.word	0x08013ad0

0800bd8c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 800bd92:	f7f7 fc45 	bl	8003620 <sys_now>
 800bd96:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 800bd98:	4b1a      	ldr	r3, [pc, #104]	; (800be04 <sys_check_timeouts+0x78>)
 800bd9a:	781b      	ldrb	r3, [r3, #0]
 800bd9c:	b2db      	uxtb	r3, r3
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <sys_check_timeouts+0x1a>
 800bda2:	f7f8 ffdf 	bl	8004d64 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 800bda6:	4b18      	ldr	r3, [pc, #96]	; (800be08 <sys_check_timeouts+0x7c>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d022      	beq.n	800bdf8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 800bdb2:	68bb      	ldr	r3, [r7, #8]
 800bdb4:	685b      	ldr	r3, [r3, #4]
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	1ad3      	subs	r3, r2, r3
 800bdba:	0fdb      	lsrs	r3, r3, #31
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d11a      	bne.n	800bdfc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a0f      	ldr	r2, [pc, #60]	; (800be08 <sys_check_timeouts+0x7c>)
 800bdcc:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	68db      	ldr	r3, [r3, #12]
 800bdd8:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	4a0b      	ldr	r2, [pc, #44]	; (800be0c <sys_check_timeouts+0x80>)
 800bde0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 800bde2:	68b9      	ldr	r1, [r7, #8]
 800bde4:	2006      	movs	r0, #6
 800bde6:	f7f8 fc75 	bl	80046d4 <memp_free>
    if (handler != NULL) {
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d0d3      	beq.n	800bd98 <sys_check_timeouts+0xc>
      handler(arg);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	6838      	ldr	r0, [r7, #0]
 800bdf4:	4798      	blx	r3
  do {
 800bdf6:	e7cf      	b.n	800bd98 <sys_check_timeouts+0xc>
      return;
 800bdf8:	bf00      	nop
 800bdfa:	e000      	b.n	800bdfe <sys_check_timeouts+0x72>
      return;
 800bdfc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 800bdfe:	3710      	adds	r7, #16
 800be00:	46bd      	mov	sp, r7
 800be02:	bd80      	pop	{r7, pc}
 800be04:	20006e5c 	.word	0x20006e5c
 800be08:	200005a4 	.word	0x200005a4
 800be0c:	200005a8 	.word	0x200005a8

0800be10 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 800be10:	b580      	push	{r7, lr}
 800be12:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800be14:	f004 ff40 	bl	8010c98 <rand>
 800be18:	4603      	mov	r3, r0
 800be1a:	b29b      	uxth	r3, r3
 800be1c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800be20:	b29b      	uxth	r3, r3
 800be22:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800be26:	b29a      	uxth	r2, r3
 800be28:	4b01      	ldr	r3, [pc, #4]	; (800be30 <udp_init+0x20>)
 800be2a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800be2c:	bf00      	nop
 800be2e:	bd80      	pop	{r7, pc}
 800be30:	20000010 	.word	0x20000010

0800be34 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 800be34:	b480      	push	{r7}
 800be36:	b083      	sub	sp, #12
 800be38:	af00      	add	r7, sp, #0
  u16_t n = 0;
 800be3a:	2300      	movs	r3, #0
 800be3c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 800be3e:	4b17      	ldr	r3, [pc, #92]	; (800be9c <udp_new_port+0x68>)
 800be40:	881b      	ldrh	r3, [r3, #0]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	b291      	uxth	r1, r2
 800be46:	4a15      	ldr	r2, [pc, #84]	; (800be9c <udp_new_port+0x68>)
 800be48:	8011      	strh	r1, [r2, #0]
 800be4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be4e:	4293      	cmp	r3, r2
 800be50:	d103      	bne.n	800be5a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 800be52:	4b12      	ldr	r3, [pc, #72]	; (800be9c <udp_new_port+0x68>)
 800be54:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800be58:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be5a:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <udp_new_port+0x6c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	603b      	str	r3, [r7, #0]
 800be60:	e011      	b.n	800be86 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	8a5a      	ldrh	r2, [r3, #18]
 800be66:	4b0d      	ldr	r3, [pc, #52]	; (800be9c <udp_new_port+0x68>)
 800be68:	881b      	ldrh	r3, [r3, #0]
 800be6a:	429a      	cmp	r2, r3
 800be6c:	d108      	bne.n	800be80 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 800be6e:	88fb      	ldrh	r3, [r7, #6]
 800be70:	3301      	adds	r3, #1
 800be72:	80fb      	strh	r3, [r7, #6]
 800be74:	88fb      	ldrh	r3, [r7, #6]
 800be76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800be7a:	d3e0      	bcc.n	800be3e <udp_new_port+0xa>
        return 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	e007      	b.n	800be90 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	68db      	ldr	r3, [r3, #12]
 800be84:	603b      	str	r3, [r7, #0]
 800be86:	683b      	ldr	r3, [r7, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d1ea      	bne.n	800be62 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 800be8c:	4b03      	ldr	r3, [pc, #12]	; (800be9c <udp_new_port+0x68>)
 800be8e:	881b      	ldrh	r3, [r3, #0]
}
 800be90:	4618      	mov	r0, r3
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr
 800be9c:	20000010 	.word	0x20000010
 800bea0:	20006e7c 	.word	0x20006e7c

0800bea4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b084      	sub	sp, #16
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	4613      	mov	r3, r2
 800beb0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d105      	bne.n	800bec4 <udp_input_local_match+0x20>
 800beb8:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <udp_input_local_match+0xb4>)
 800beba:	2287      	movs	r2, #135	; 0x87
 800bebc:	4927      	ldr	r1, [pc, #156]	; (800bf5c <udp_input_local_match+0xb8>)
 800bebe:	4828      	ldr	r0, [pc, #160]	; (800bf60 <udp_input_local_match+0xbc>)
 800bec0:	f004 fed2 	bl	8010c68 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d105      	bne.n	800bed6 <udp_input_local_match+0x32>
 800beca:	4b23      	ldr	r3, [pc, #140]	; (800bf58 <udp_input_local_match+0xb4>)
 800becc:	2288      	movs	r2, #136	; 0x88
 800bece:	4925      	ldr	r1, [pc, #148]	; (800bf64 <udp_input_local_match+0xc0>)
 800bed0:	4823      	ldr	r0, [pc, #140]	; (800bf60 <udp_input_local_match+0xbc>)
 800bed2:	f004 fec9 	bl	8010c68 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	7a1b      	ldrb	r3, [r3, #8]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d00b      	beq.n	800bef6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	7a1a      	ldrb	r2, [r3, #8]
 800bee2:	4b21      	ldr	r3, [pc, #132]	; (800bf68 <udp_input_local_match+0xc4>)
 800bee4:	685b      	ldr	r3, [r3, #4]
 800bee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800beea:	3301      	adds	r3, #1
 800beec:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800beee:	429a      	cmp	r2, r3
 800bef0:	d001      	beq.n	800bef6 <udp_input_local_match+0x52>
    return 0;
 800bef2:	2300      	movs	r3, #0
 800bef4:	e02b      	b.n	800bf4e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 800bef6:	79fb      	ldrb	r3, [r7, #7]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d018      	beq.n	800bf2e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2b00      	cmp	r3, #0
 800bf00:	d013      	beq.n	800bf2a <udp_input_local_match+0x86>
 800bf02:	68fb      	ldr	r3, [r7, #12]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d00f      	beq.n	800bf2a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf0a:	4b17      	ldr	r3, [pc, #92]	; (800bf68 <udp_input_local_match+0xc4>)
 800bf0c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800bf0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf12:	d00a      	beq.n	800bf2a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	681a      	ldr	r2, [r3, #0]
 800bf18:	4b13      	ldr	r3, [pc, #76]	; (800bf68 <udp_input_local_match+0xc4>)
 800bf1a:	695b      	ldr	r3, [r3, #20]
 800bf1c:	405a      	eors	r2, r3
 800bf1e:	68bb      	ldr	r3, [r7, #8]
 800bf20:	3308      	adds	r3, #8
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d110      	bne.n	800bf4c <udp_input_local_match+0xa8>
          return 1;
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e00f      	b.n	800bf4e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d009      	beq.n	800bf48 <udp_input_local_match+0xa4>
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d005      	beq.n	800bf48 <udp_input_local_match+0xa4>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	681a      	ldr	r2, [r3, #0]
 800bf40:	4b09      	ldr	r3, [pc, #36]	; (800bf68 <udp_input_local_match+0xc4>)
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	d101      	bne.n	800bf4c <udp_input_local_match+0xa8>
        return 1;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e000      	b.n	800bf4e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 800bf4c:	2300      	movs	r3, #0
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	08013b44 	.word	0x08013b44
 800bf5c:	08013b74 	.word	0x08013b74
 800bf60:	08013b98 	.word	0x08013b98
 800bf64:	08013bc0 	.word	0x08013bc0
 800bf68:	200038f0 	.word	0x200038f0

0800bf6c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 800bf6c:	b590      	push	{r4, r7, lr}
 800bf6e:	b08d      	sub	sp, #52	; 0x34
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	6078      	str	r0, [r7, #4]
 800bf74:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d105      	bne.n	800bf8c <udp_input+0x20>
 800bf80:	4b7c      	ldr	r3, [pc, #496]	; (800c174 <udp_input+0x208>)
 800bf82:	22cf      	movs	r2, #207	; 0xcf
 800bf84:	497c      	ldr	r1, [pc, #496]	; (800c178 <udp_input+0x20c>)
 800bf86:	487d      	ldr	r0, [pc, #500]	; (800c17c <udp_input+0x210>)
 800bf88:	f004 fe6e 	bl	8010c68 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 800bf8c:	683b      	ldr	r3, [r7, #0]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d105      	bne.n	800bf9e <udp_input+0x32>
 800bf92:	4b78      	ldr	r3, [pc, #480]	; (800c174 <udp_input+0x208>)
 800bf94:	22d0      	movs	r2, #208	; 0xd0
 800bf96:	497a      	ldr	r1, [pc, #488]	; (800c180 <udp_input+0x214>)
 800bf98:	4878      	ldr	r0, [pc, #480]	; (800c17c <udp_input+0x210>)
 800bf9a:	f004 fe65 	bl	8010c68 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	895b      	ldrh	r3, [r3, #10]
 800bfa2:	2b07      	cmp	r3, #7
 800bfa4:	d803      	bhi.n	800bfae <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	f7f9 fa12 	bl	80053d0 <pbuf_free>
    goto end;
 800bfac:	e0de      	b.n	800c16c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	685b      	ldr	r3, [r3, #4]
 800bfb2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 800bfb4:	4b73      	ldr	r3, [pc, #460]	; (800c184 <udp_input+0x218>)
 800bfb6:	695a      	ldr	r2, [r3, #20]
 800bfb8:	4b72      	ldr	r3, [pc, #456]	; (800c184 <udp_input+0x218>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	4610      	mov	r0, r2
 800bfc0:	f003 fec0 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800bfc4:	4603      	mov	r3, r0
 800bfc6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 800bfc8:	697b      	ldr	r3, [r7, #20]
 800bfca:	881b      	ldrh	r3, [r3, #0]
 800bfcc:	b29b      	uxth	r3, r3
 800bfce:	4618      	mov	r0, r3
 800bfd0:	f7f7 fbee 	bl	80037b0 <lwip_htons>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	885b      	ldrh	r3, [r3, #2]
 800bfdc:	b29b      	uxth	r3, r3
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7f7 fbe6 	bl	80037b0 <lwip_htons>
 800bfe4:	4603      	mov	r3, r0
 800bfe6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 800bfec:	2300      	movs	r3, #0
 800bfee:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 800bff0:	2300      	movs	r3, #0
 800bff2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800bff4:	4b64      	ldr	r3, [pc, #400]	; (800c188 <udp_input+0x21c>)
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	627b      	str	r3, [r7, #36]	; 0x24
 800bffa:	e054      	b.n	800c0a6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 800bffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffe:	8a5b      	ldrh	r3, [r3, #18]
 800c000:	89fa      	ldrh	r2, [r7, #14]
 800c002:	429a      	cmp	r2, r3
 800c004:	d14a      	bne.n	800c09c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 800c006:	7cfb      	ldrb	r3, [r7, #19]
 800c008:	461a      	mov	r2, r3
 800c00a:	6839      	ldr	r1, [r7, #0]
 800c00c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c00e:	f7ff ff49 	bl	800bea4 <udp_input_local_match>
 800c012:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 800c014:	2b00      	cmp	r3, #0
 800c016:	d041      	beq.n	800c09c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	7c1b      	ldrb	r3, [r3, #16]
 800c01c:	f003 0304 	and.w	r3, r3, #4
 800c020:	2b00      	cmp	r3, #0
 800c022:	d11d      	bne.n	800c060 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d102      	bne.n	800c030 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 800c02a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02c:	61fb      	str	r3, [r7, #28]
 800c02e:	e017      	b.n	800c060 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 800c030:	7cfb      	ldrb	r3, [r7, #19]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d014      	beq.n	800c060 <udp_input+0xf4>
 800c036:	4b53      	ldr	r3, [pc, #332]	; (800c184 <udp_input+0x218>)
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03e:	d10f      	bne.n	800c060 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 800c040:	69fb      	ldr	r3, [r7, #28]
 800c042:	681a      	ldr	r2, [r3, #0]
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	3304      	adds	r3, #4
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d008      	beq.n	800c060 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	681a      	ldr	r2, [r3, #0]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	3304      	adds	r3, #4
 800c056:	681b      	ldr	r3, [r3, #0]
 800c058:	429a      	cmp	r2, r3
 800c05a:	d101      	bne.n	800c060 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 800c05c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c05e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 800c060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c062:	8a9b      	ldrh	r3, [r3, #20]
 800c064:	8a3a      	ldrh	r2, [r7, #16]
 800c066:	429a      	cmp	r2, r3
 800c068:	d118      	bne.n	800c09c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c06a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c06c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d005      	beq.n	800c07e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 800c072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c074:	685a      	ldr	r2, [r3, #4]
 800c076:	4b43      	ldr	r3, [pc, #268]	; (800c184 <udp_input+0x218>)
 800c078:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 800c07a:	429a      	cmp	r2, r3
 800c07c:	d10e      	bne.n	800c09c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 800c07e:	6a3b      	ldr	r3, [r7, #32]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d014      	beq.n	800c0ae <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 800c084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c086:	68da      	ldr	r2, [r3, #12]
 800c088:	6a3b      	ldr	r3, [r7, #32]
 800c08a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 800c08c:	4b3e      	ldr	r3, [pc, #248]	; (800c188 <udp_input+0x21c>)
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 800c094:	4a3c      	ldr	r2, [pc, #240]	; (800c188 <udp_input+0x21c>)
 800c096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c098:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 800c09a:	e008      	b.n	800c0ae <udp_input+0x142>
      }
    }

    prev = pcb;
 800c09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c09e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 800c0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a2:	68db      	ldr	r3, [r3, #12]
 800c0a4:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d1a7      	bne.n	800bffc <udp_input+0x90>
 800c0ac:	e000      	b.n	800c0b0 <udp_input+0x144>
        break;
 800c0ae:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 800c0b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d101      	bne.n	800c0ba <udp_input+0x14e>
    pcb = uncon_pcb;
 800c0b6:	69fb      	ldr	r3, [r7, #28]
 800c0b8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d002      	beq.n	800c0c6 <udp_input+0x15a>
    for_us = 1;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	76fb      	strb	r3, [r7, #27]
 800c0c4:	e00a      	b.n	800c0dc <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	3304      	adds	r3, #4
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	4b2d      	ldr	r3, [pc, #180]	; (800c184 <udp_input+0x218>)
 800c0ce:	695b      	ldr	r3, [r3, #20]
 800c0d0:	429a      	cmp	r2, r3
 800c0d2:	bf0c      	ite	eq
 800c0d4:	2301      	moveq	r3, #1
 800c0d6:	2300      	movne	r3, #0
 800c0d8:	b2db      	uxtb	r3, r3
 800c0da:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 800c0dc:	7efb      	ldrb	r3, [r7, #27]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d041      	beq.n	800c166 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 800c0e2:	2108      	movs	r1, #8
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f7f9 f8ed 	bl	80052c4 <pbuf_remove_header>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d00a      	beq.n	800c106 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 800c0f0:	4b20      	ldr	r3, [pc, #128]	; (800c174 <udp_input+0x208>)
 800c0f2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 800c0f6:	4925      	ldr	r1, [pc, #148]	; (800c18c <udp_input+0x220>)
 800c0f8:	4820      	ldr	r0, [pc, #128]	; (800c17c <udp_input+0x210>)
 800c0fa:	f004 fdb5 	bl	8010c68 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7f9 f966 	bl	80053d0 <pbuf_free>
      goto end;
 800c104:	e032      	b.n	800c16c <udp_input+0x200>
    }

    if (pcb != NULL) {
 800c106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d012      	beq.n	800c132 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 800c10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c10e:	699b      	ldr	r3, [r3, #24]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00a      	beq.n	800c12a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 800c114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c116:	699c      	ldr	r4, [r3, #24]
 800c118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c11a:	69d8      	ldr	r0, [r3, #28]
 800c11c:	8a3b      	ldrh	r3, [r7, #16]
 800c11e:	9300      	str	r3, [sp, #0]
 800c120:	4b1b      	ldr	r3, [pc, #108]	; (800c190 <udp_input+0x224>)
 800c122:	687a      	ldr	r2, [r7, #4]
 800c124:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c126:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 800c128:	e021      	b.n	800c16e <udp_input+0x202>
        pbuf_free(p);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f7f9 f950 	bl	80053d0 <pbuf_free>
        goto end;
 800c130:	e01c      	b.n	800c16c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 800c132:	7cfb      	ldrb	r3, [r7, #19]
 800c134:	2b00      	cmp	r3, #0
 800c136:	d112      	bne.n	800c15e <udp_input+0x1f2>
 800c138:	4b12      	ldr	r3, [pc, #72]	; (800c184 <udp_input+0x218>)
 800c13a:	695b      	ldr	r3, [r3, #20]
 800c13c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c140:	2be0      	cmp	r3, #224	; 0xe0
 800c142:	d00c      	beq.n	800c15e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 800c144:	4b0f      	ldr	r3, [pc, #60]	; (800c184 <udp_input+0x218>)
 800c146:	899b      	ldrh	r3, [r3, #12]
 800c148:	3308      	adds	r3, #8
 800c14a:	b29b      	uxth	r3, r3
 800c14c:	b21b      	sxth	r3, r3
 800c14e:	4619      	mov	r1, r3
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f7f9 f92a 	bl	80053aa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 800c156:	2103      	movs	r1, #3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f003 fab7 	bl	800f6cc <icmp_dest_unreach>
      pbuf_free(p);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f7f9 f936 	bl	80053d0 <pbuf_free>
  return;
 800c164:	e003      	b.n	800c16e <udp_input+0x202>
    pbuf_free(p);
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7f9 f932 	bl	80053d0 <pbuf_free>
  return;
 800c16c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 800c16e:	372c      	adds	r7, #44	; 0x2c
 800c170:	46bd      	mov	sp, r7
 800c172:	bd90      	pop	{r4, r7, pc}
 800c174:	08013b44 	.word	0x08013b44
 800c178:	08013be8 	.word	0x08013be8
 800c17c:	08013b98 	.word	0x08013b98
 800c180:	08013c00 	.word	0x08013c00
 800c184:	200038f0 	.word	0x200038f0
 800c188:	20006e7c 	.word	0x20006e7c
 800c18c:	08013c1c 	.word	0x08013c1c
 800c190:	20003900 	.word	0x20003900

0800c194 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 800c194:	b580      	push	{r7, lr}
 800c196:	b088      	sub	sp, #32
 800c198:	af02      	add	r7, sp, #8
 800c19a:	60f8      	str	r0, [r7, #12]
 800c19c:	60b9      	str	r1, [r7, #8]
 800c19e:	607a      	str	r2, [r7, #4]
 800c1a0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d109      	bne.n	800c1bc <udp_sendto+0x28>
 800c1a8:	4b23      	ldr	r3, [pc, #140]	; (800c238 <udp_sendto+0xa4>)
 800c1aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 800c1ae:	4923      	ldr	r1, [pc, #140]	; (800c23c <udp_sendto+0xa8>)
 800c1b0:	4823      	ldr	r0, [pc, #140]	; (800c240 <udp_sendto+0xac>)
 800c1b2:	f004 fd59 	bl	8010c68 <iprintf>
 800c1b6:	f06f 030f 	mvn.w	r3, #15
 800c1ba:	e038      	b.n	800c22e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 800c1bc:	68bb      	ldr	r3, [r7, #8]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d109      	bne.n	800c1d6 <udp_sendto+0x42>
 800c1c2:	4b1d      	ldr	r3, [pc, #116]	; (800c238 <udp_sendto+0xa4>)
 800c1c4:	f240 2219 	movw	r2, #537	; 0x219
 800c1c8:	491e      	ldr	r1, [pc, #120]	; (800c244 <udp_sendto+0xb0>)
 800c1ca:	481d      	ldr	r0, [pc, #116]	; (800c240 <udp_sendto+0xac>)
 800c1cc:	f004 fd4c 	bl	8010c68 <iprintf>
 800c1d0:	f06f 030f 	mvn.w	r3, #15
 800c1d4:	e02b      	b.n	800c22e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d109      	bne.n	800c1f0 <udp_sendto+0x5c>
 800c1dc:	4b16      	ldr	r3, [pc, #88]	; (800c238 <udp_sendto+0xa4>)
 800c1de:	f240 221a 	movw	r2, #538	; 0x21a
 800c1e2:	4919      	ldr	r1, [pc, #100]	; (800c248 <udp_sendto+0xb4>)
 800c1e4:	4816      	ldr	r0, [pc, #88]	; (800c240 <udp_sendto+0xac>)
 800c1e6:	f004 fd3f 	bl	8010c68 <iprintf>
 800c1ea:	f06f 030f 	mvn.w	r3, #15
 800c1ee:	e01e      	b.n	800c22e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	7a1b      	ldrb	r3, [r3, #8]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d006      	beq.n	800c206 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	7a1b      	ldrb	r3, [r3, #8]
 800c1fc:	4618      	mov	r0, r3
 800c1fe:	f7f8 fd8b 	bl	8004d18 <netif_get_by_index>
 800c202:	6178      	str	r0, [r7, #20]
 800c204:	e003      	b.n	800c20e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f003 faea 	bl	800f7e0 <ip4_route>
 800c20c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 800c214:	f06f 0303 	mvn.w	r3, #3
 800c218:	e009      	b.n	800c22e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 800c21a:	887a      	ldrh	r2, [r7, #2]
 800c21c:	697b      	ldr	r3, [r7, #20]
 800c21e:	9300      	str	r3, [sp, #0]
 800c220:	4613      	mov	r3, r2
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	68f8      	ldr	r0, [r7, #12]
 800c228:	f000 f810 	bl	800c24c <udp_sendto_if>
 800c22c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c22e:	4618      	mov	r0, r3
 800c230:	3718      	adds	r7, #24
 800c232:	46bd      	mov	sp, r7
 800c234:	bd80      	pop	{r7, pc}
 800c236:	bf00      	nop
 800c238:	08013b44 	.word	0x08013b44
 800c23c:	08013c68 	.word	0x08013c68
 800c240:	08013b98 	.word	0x08013b98
 800c244:	08013c80 	.word	0x08013c80
 800c248:	08013c9c 	.word	0x08013c9c

0800c24c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af02      	add	r7, sp, #8
 800c252:	60f8      	str	r0, [r7, #12]
 800c254:	60b9      	str	r1, [r7, #8]
 800c256:	607a      	str	r2, [r7, #4]
 800c258:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d109      	bne.n	800c274 <udp_sendto_if+0x28>
 800c260:	4b2e      	ldr	r3, [pc, #184]	; (800c31c <udp_sendto_if+0xd0>)
 800c262:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c266:	492e      	ldr	r1, [pc, #184]	; (800c320 <udp_sendto_if+0xd4>)
 800c268:	482e      	ldr	r0, [pc, #184]	; (800c324 <udp_sendto_if+0xd8>)
 800c26a:	f004 fcfd 	bl	8010c68 <iprintf>
 800c26e:	f06f 030f 	mvn.w	r3, #15
 800c272:	e04f      	b.n	800c314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d109      	bne.n	800c28e <udp_sendto_if+0x42>
 800c27a:	4b28      	ldr	r3, [pc, #160]	; (800c31c <udp_sendto_if+0xd0>)
 800c27c:	f240 2281 	movw	r2, #641	; 0x281
 800c280:	4929      	ldr	r1, [pc, #164]	; (800c328 <udp_sendto_if+0xdc>)
 800c282:	4828      	ldr	r0, [pc, #160]	; (800c324 <udp_sendto_if+0xd8>)
 800c284:	f004 fcf0 	bl	8010c68 <iprintf>
 800c288:	f06f 030f 	mvn.w	r3, #15
 800c28c:	e042      	b.n	800c314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d109      	bne.n	800c2a8 <udp_sendto_if+0x5c>
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <udp_sendto_if+0xd0>)
 800c296:	f240 2282 	movw	r2, #642	; 0x282
 800c29a:	4924      	ldr	r1, [pc, #144]	; (800c32c <udp_sendto_if+0xe0>)
 800c29c:	4821      	ldr	r0, [pc, #132]	; (800c324 <udp_sendto_if+0xd8>)
 800c29e:	f004 fce3 	bl	8010c68 <iprintf>
 800c2a2:	f06f 030f 	mvn.w	r3, #15
 800c2a6:	e035      	b.n	800c314 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d109      	bne.n	800c2c2 <udp_sendto_if+0x76>
 800c2ae:	4b1b      	ldr	r3, [pc, #108]	; (800c31c <udp_sendto_if+0xd0>)
 800c2b0:	f240 2283 	movw	r2, #643	; 0x283
 800c2b4:	491e      	ldr	r1, [pc, #120]	; (800c330 <udp_sendto_if+0xe4>)
 800c2b6:	481b      	ldr	r0, [pc, #108]	; (800c324 <udp_sendto_if+0xd8>)
 800c2b8:	f004 fcd6 	bl	8010c68 <iprintf>
 800c2bc:	f06f 030f 	mvn.w	r3, #15
 800c2c0:	e028      	b.n	800c314 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c2c2:	68fb      	ldr	r3, [r7, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d009      	beq.n	800c2dc <udp_sendto_if+0x90>
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d005      	beq.n	800c2dc <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 800c2d8:	2be0      	cmp	r3, #224	; 0xe0
 800c2da:	d103      	bne.n	800c2e4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 800c2dc:	6a3b      	ldr	r3, [r7, #32]
 800c2de:	3304      	adds	r3, #4
 800c2e0:	617b      	str	r3, [r7, #20]
 800c2e2:	e00b      	b.n	800c2fc <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	681a      	ldr	r2, [r3, #0]
 800c2e8:	6a3b      	ldr	r3, [r7, #32]
 800c2ea:	3304      	adds	r3, #4
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d002      	beq.n	800c2f8 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 800c2f2:	f06f 0303 	mvn.w	r3, #3
 800c2f6:	e00d      	b.n	800c314 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 800c2fc:	887a      	ldrh	r2, [r7, #2]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	9301      	str	r3, [sp, #4]
 800c302:	6a3b      	ldr	r3, [r7, #32]
 800c304:	9300      	str	r3, [sp, #0]
 800c306:	4613      	mov	r3, r2
 800c308:	687a      	ldr	r2, [r7, #4]
 800c30a:	68b9      	ldr	r1, [r7, #8]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f000 f811 	bl	800c334 <udp_sendto_if_src>
 800c312:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	08013b44 	.word	0x08013b44
 800c320:	08013cb8 	.word	0x08013cb8
 800c324:	08013b98 	.word	0x08013b98
 800c328:	08013cd4 	.word	0x08013cd4
 800c32c:	08013cf0 	.word	0x08013cf0
 800c330:	08013d10 	.word	0x08013d10

0800c334 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b08c      	sub	sp, #48	; 0x30
 800c338:	af04      	add	r7, sp, #16
 800c33a:	60f8      	str	r0, [r7, #12]
 800c33c:	60b9      	str	r1, [r7, #8]
 800c33e:	607a      	str	r2, [r7, #4]
 800c340:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d109      	bne.n	800c35c <udp_sendto_if_src+0x28>
 800c348:	4b65      	ldr	r3, [pc, #404]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c34a:	f240 22d1 	movw	r2, #721	; 0x2d1
 800c34e:	4965      	ldr	r1, [pc, #404]	; (800c4e4 <udp_sendto_if_src+0x1b0>)
 800c350:	4865      	ldr	r0, [pc, #404]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c352:	f004 fc89 	bl	8010c68 <iprintf>
 800c356:	f06f 030f 	mvn.w	r3, #15
 800c35a:	e0bc      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <udp_sendto_if_src+0x42>
 800c362:	4b5f      	ldr	r3, [pc, #380]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c364:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c368:	4960      	ldr	r1, [pc, #384]	; (800c4ec <udp_sendto_if_src+0x1b8>)
 800c36a:	485f      	ldr	r0, [pc, #380]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c36c:	f004 fc7c 	bl	8010c68 <iprintf>
 800c370:	f06f 030f 	mvn.w	r3, #15
 800c374:	e0af      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d109      	bne.n	800c390 <udp_sendto_if_src+0x5c>
 800c37c:	4b58      	ldr	r3, [pc, #352]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c37e:	f240 22d3 	movw	r2, #723	; 0x2d3
 800c382:	495b      	ldr	r1, [pc, #364]	; (800c4f0 <udp_sendto_if_src+0x1bc>)
 800c384:	4858      	ldr	r0, [pc, #352]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c386:	f004 fc6f 	bl	8010c68 <iprintf>
 800c38a:	f06f 030f 	mvn.w	r3, #15
 800c38e:	e0a2      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 800c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c392:	2b00      	cmp	r3, #0
 800c394:	d109      	bne.n	800c3aa <udp_sendto_if_src+0x76>
 800c396:	4b52      	ldr	r3, [pc, #328]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c398:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c39c:	4955      	ldr	r1, [pc, #340]	; (800c4f4 <udp_sendto_if_src+0x1c0>)
 800c39e:	4852      	ldr	r0, [pc, #328]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c3a0:	f004 fc62 	bl	8010c68 <iprintf>
 800c3a4:	f06f 030f 	mvn.w	r3, #15
 800c3a8:	e095      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 800c3aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d109      	bne.n	800c3c4 <udp_sendto_if_src+0x90>
 800c3b0:	4b4b      	ldr	r3, [pc, #300]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c3b2:	f240 22d5 	movw	r2, #725	; 0x2d5
 800c3b6:	4950      	ldr	r1, [pc, #320]	; (800c4f8 <udp_sendto_if_src+0x1c4>)
 800c3b8:	484b      	ldr	r0, [pc, #300]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c3ba:	f004 fc55 	bl	8010c68 <iprintf>
 800c3be:	f06f 030f 	mvn.w	r3, #15
 800c3c2:	e088      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	8a5b      	ldrh	r3, [r3, #18]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d10f      	bne.n	800c3ec <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c3cc:	68f9      	ldr	r1, [r7, #12]
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	8a5b      	ldrh	r3, [r3, #18]
 800c3d2:	461a      	mov	r2, r3
 800c3d4:	68f8      	ldr	r0, [r7, #12]
 800c3d6:	f000 f893 	bl	800c500 <udp_bind>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 800c3de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d002      	beq.n	800c3ec <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 800c3e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800c3ea:	e074      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	891b      	ldrh	r3, [r3, #8]
 800c3f0:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 800c3f4:	4293      	cmp	r3, r2
 800c3f6:	d902      	bls.n	800c3fe <udp_sendto_if_src+0xca>
    return ERR_MEM;
 800c3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c3fc:	e06b      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 800c3fe:	2108      	movs	r1, #8
 800c400:	68b8      	ldr	r0, [r7, #8]
 800c402:	f7f8 ff4f 	bl	80052a4 <pbuf_add_header>
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d015      	beq.n	800c438 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 800c40c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800c410:	2108      	movs	r1, #8
 800c412:	2022      	movs	r0, #34	; 0x22
 800c414:	f7f8 fcfc 	bl	8004e10 <pbuf_alloc>
 800c418:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d102      	bne.n	800c426 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 800c420:	f04f 33ff 	mov.w	r3, #4294967295
 800c424:	e057      	b.n	800c4d6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	891b      	ldrh	r3, [r3, #8]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d006      	beq.n	800c43c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 800c42e:	68b9      	ldr	r1, [r7, #8]
 800c430:	69f8      	ldr	r0, [r7, #28]
 800c432:	f7f9 f8e5 	bl	8005600 <pbuf_chain>
 800c436:	e001      	b.n	800c43c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	895b      	ldrh	r3, [r3, #10]
 800c440:	2b07      	cmp	r3, #7
 800c442:	d806      	bhi.n	800c452 <udp_sendto_if_src+0x11e>
 800c444:	4b26      	ldr	r3, [pc, #152]	; (800c4e0 <udp_sendto_if_src+0x1ac>)
 800c446:	f240 320e 	movw	r2, #782	; 0x30e
 800c44a:	492c      	ldr	r1, [pc, #176]	; (800c4fc <udp_sendto_if_src+0x1c8>)
 800c44c:	4826      	ldr	r0, [pc, #152]	; (800c4e8 <udp_sendto_if_src+0x1b4>)
 800c44e:	f004 fc0b 	bl	8010c68 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	8a5b      	ldrh	r3, [r3, #18]
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7f7 f9a7 	bl	80037b0 <lwip_htons>
 800c462:	4603      	mov	r3, r0
 800c464:	461a      	mov	r2, r3
 800c466:	697b      	ldr	r3, [r7, #20]
 800c468:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 800c46a:	887b      	ldrh	r3, [r7, #2]
 800c46c:	4618      	mov	r0, r3
 800c46e:	f7f7 f99f 	bl	80037b0 <lwip_htons>
 800c472:	4603      	mov	r3, r0
 800c474:	461a      	mov	r2, r3
 800c476:	697b      	ldr	r3, [r7, #20]
 800c478:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2200      	movs	r2, #0
 800c47e:	719a      	strb	r2, [r3, #6]
 800c480:	2200      	movs	r2, #0
 800c482:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 800c484:	69fb      	ldr	r3, [r7, #28]
 800c486:	891b      	ldrh	r3, [r3, #8]
 800c488:	4618      	mov	r0, r3
 800c48a:	f7f7 f991 	bl	80037b0 <lwip_htons>
 800c48e:	4603      	mov	r3, r0
 800c490:	461a      	mov	r2, r3
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 800c496:	2311      	movs	r3, #17
 800c498:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	7adb      	ldrb	r3, [r3, #11]
 800c49e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	7a9b      	ldrb	r3, [r3, #10]
 800c4a4:	7cb9      	ldrb	r1, [r7, #18]
 800c4a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4a8:	9202      	str	r2, [sp, #8]
 800c4aa:	7cfa      	ldrb	r2, [r7, #19]
 800c4ac:	9201      	str	r2, [sp, #4]
 800c4ae:	9300      	str	r3, [sp, #0]
 800c4b0:	460b      	mov	r3, r1
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c4b6:	69f8      	ldr	r0, [r7, #28]
 800c4b8:	f003 fb96 	bl	800fbe8 <ip4_output_if_src>
 800c4bc:	4603      	mov	r3, r0
 800c4be:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 800c4c0:	69fa      	ldr	r2, [r7, #28]
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	429a      	cmp	r2, r3
 800c4c6:	d004      	beq.n	800c4d2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 800c4c8:	69f8      	ldr	r0, [r7, #28]
 800c4ca:	f7f8 ff81 	bl	80053d0 <pbuf_free>
    q = NULL;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 800c4d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3720      	adds	r7, #32
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	08013b44 	.word	0x08013b44
 800c4e4:	08013d30 	.word	0x08013d30
 800c4e8:	08013b98 	.word	0x08013b98
 800c4ec:	08013d50 	.word	0x08013d50
 800c4f0:	08013d70 	.word	0x08013d70
 800c4f4:	08013d94 	.word	0x08013d94
 800c4f8:	08013db8 	.word	0x08013db8
 800c4fc:	08013ddc 	.word	0x08013ddc

0800c500 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c500:	b580      	push	{r7, lr}
 800c502:	b086      	sub	sp, #24
 800c504:	af00      	add	r7, sp, #0
 800c506:	60f8      	str	r0, [r7, #12]
 800c508:	60b9      	str	r1, [r7, #8]
 800c50a:	4613      	mov	r3, r2
 800c50c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d101      	bne.n	800c518 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 800c514:	4b39      	ldr	r3, [pc, #228]	; (800c5fc <udp_bind+0xfc>)
 800c516:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d109      	bne.n	800c532 <udp_bind+0x32>
 800c51e:	4b38      	ldr	r3, [pc, #224]	; (800c600 <udp_bind+0x100>)
 800c520:	f240 32b7 	movw	r2, #951	; 0x3b7
 800c524:	4937      	ldr	r1, [pc, #220]	; (800c604 <udp_bind+0x104>)
 800c526:	4838      	ldr	r0, [pc, #224]	; (800c608 <udp_bind+0x108>)
 800c528:	f004 fb9e 	bl	8010c68 <iprintf>
 800c52c:	f06f 030f 	mvn.w	r3, #15
 800c530:	e060      	b.n	800c5f4 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c536:	4b35      	ldr	r3, [pc, #212]	; (800c60c <udp_bind+0x10c>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	617b      	str	r3, [r7, #20]
 800c53c:	e009      	b.n	800c552 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 800c53e:	68fa      	ldr	r2, [r7, #12]
 800c540:	697b      	ldr	r3, [r7, #20]
 800c542:	429a      	cmp	r2, r3
 800c544:	d102      	bne.n	800c54c <udp_bind+0x4c>
      rebind = 1;
 800c546:	2301      	movs	r3, #1
 800c548:	74fb      	strb	r3, [r7, #19]
      break;
 800c54a:	e005      	b.n	800c558 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	617b      	str	r3, [r7, #20]
 800c552:	697b      	ldr	r3, [r7, #20]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d1f2      	bne.n	800c53e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 800c558:	88fb      	ldrh	r3, [r7, #6]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d109      	bne.n	800c572 <udp_bind+0x72>
    port = udp_new_port();
 800c55e:	f7ff fc69 	bl	800be34 <udp_new_port>
 800c562:	4603      	mov	r3, r0
 800c564:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c566:	88fb      	ldrh	r3, [r7, #6]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d12c      	bne.n	800c5c6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 800c56c:	f06f 0307 	mvn.w	r3, #7
 800c570:	e040      	b.n	800c5f4 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c572:	4b26      	ldr	r3, [pc, #152]	; (800c60c <udp_bind+0x10c>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	617b      	str	r3, [r7, #20]
 800c578:	e022      	b.n	800c5c0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	429a      	cmp	r2, r3
 800c580:	d01b      	beq.n	800c5ba <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 800c582:	697b      	ldr	r3, [r7, #20]
 800c584:	8a5b      	ldrh	r3, [r3, #18]
 800c586:	88fa      	ldrh	r2, [r7, #6]
 800c588:	429a      	cmp	r2, r3
 800c58a:	d116      	bne.n	800c5ba <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	681a      	ldr	r2, [r3, #0]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 800c594:	429a      	cmp	r2, r3
 800c596:	d00d      	beq.n	800c5b4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d00a      	beq.n	800c5b4 <udp_bind+0xb4>
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d006      	beq.n	800c5b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c5a6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d003      	beq.n	800c5b4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d102      	bne.n	800c5ba <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 800c5b4:	f06f 0307 	mvn.w	r3, #7
 800c5b8:	e01c      	b.n	800c5f4 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c5ba:	697b      	ldr	r3, [r7, #20]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1d9      	bne.n	800c57a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d002      	beq.n	800c5d2 <udp_bind+0xd2>
 800c5cc:	68bb      	ldr	r3, [r7, #8]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	e000      	b.n	800c5d4 <udp_bind+0xd4>
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	88fa      	ldrh	r2, [r7, #6]
 800c5dc:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 800c5de:	7cfb      	ldrb	r3, [r7, #19]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d106      	bne.n	800c5f2 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 800c5e4:	4b09      	ldr	r3, [pc, #36]	; (800c60c <udp_bind+0x10c>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 800c5ec:	4a07      	ldr	r2, [pc, #28]	; (800c60c <udp_bind+0x10c>)
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 800c5f2:	2300      	movs	r3, #0
}
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	3718      	adds	r7, #24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	bd80      	pop	{r7, pc}
 800c5fc:	08014a14 	.word	0x08014a14
 800c600:	08013b44 	.word	0x08013b44
 800c604:	08013e0c 	.word	0x08013e0c
 800c608:	08013b98 	.word	0x08013b98
 800c60c:	20006e7c 	.word	0x20006e7c

0800c610 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c610:	b580      	push	{r7, lr}
 800c612:	b086      	sub	sp, #24
 800c614:	af00      	add	r7, sp, #0
 800c616:	60f8      	str	r0, [r7, #12]
 800c618:	60b9      	str	r1, [r7, #8]
 800c61a:	4613      	mov	r3, r2
 800c61c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d109      	bne.n	800c638 <udp_connect+0x28>
 800c624:	4b2c      	ldr	r3, [pc, #176]	; (800c6d8 <udp_connect+0xc8>)
 800c626:	f240 4235 	movw	r2, #1077	; 0x435
 800c62a:	492c      	ldr	r1, [pc, #176]	; (800c6dc <udp_connect+0xcc>)
 800c62c:	482c      	ldr	r0, [pc, #176]	; (800c6e0 <udp_connect+0xd0>)
 800c62e:	f004 fb1b 	bl	8010c68 <iprintf>
 800c632:	f06f 030f 	mvn.w	r3, #15
 800c636:	e04b      	b.n	800c6d0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800c638:	68bb      	ldr	r3, [r7, #8]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d109      	bne.n	800c652 <udp_connect+0x42>
 800c63e:	4b26      	ldr	r3, [pc, #152]	; (800c6d8 <udp_connect+0xc8>)
 800c640:	f240 4236 	movw	r2, #1078	; 0x436
 800c644:	4927      	ldr	r1, [pc, #156]	; (800c6e4 <udp_connect+0xd4>)
 800c646:	4826      	ldr	r0, [pc, #152]	; (800c6e0 <udp_connect+0xd0>)
 800c648:	f004 fb0e 	bl	8010c68 <iprintf>
 800c64c:	f06f 030f 	mvn.w	r3, #15
 800c650:	e03e      	b.n	800c6d0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	8a5b      	ldrh	r3, [r3, #18]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d10f      	bne.n	800c67a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 800c65a:	68f9      	ldr	r1, [r7, #12]
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	8a5b      	ldrh	r3, [r3, #18]
 800c660:	461a      	mov	r2, r3
 800c662:	68f8      	ldr	r0, [r7, #12]
 800c664:	f7ff ff4c 	bl	800c500 <udp_bind>
 800c668:	4603      	mov	r3, r0
 800c66a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800c66c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d002      	beq.n	800c67a <udp_connect+0x6a>
      return err;
 800c674:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800c678:	e02a      	b.n	800c6d0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d002      	beq.n	800c686 <udp_connect+0x76>
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	e000      	b.n	800c688 <udp_connect+0x78>
 800c686:	2300      	movs	r3, #0
 800c688:	68fa      	ldr	r2, [r7, #12]
 800c68a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	88fa      	ldrh	r2, [r7, #6]
 800c690:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 800c692:	68fb      	ldr	r3, [r7, #12]
 800c694:	7c1b      	ldrb	r3, [r3, #16]
 800c696:	f043 0304 	orr.w	r3, r3, #4
 800c69a:	b2da      	uxtb	r2, r3
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c6a0:	4b11      	ldr	r3, [pc, #68]	; (800c6e8 <udp_connect+0xd8>)
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	617b      	str	r3, [r7, #20]
 800c6a6:	e008      	b.n	800c6ba <udp_connect+0xaa>
    if (pcb == ipcb) {
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d101      	bne.n	800c6b4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	e00d      	b.n	800c6d0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	617b      	str	r3, [r7, #20]
 800c6ba:	697b      	ldr	r3, [r7, #20]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1f3      	bne.n	800c6a8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 800c6c0:	4b09      	ldr	r3, [pc, #36]	; (800c6e8 <udp_connect+0xd8>)
 800c6c2:	681a      	ldr	r2, [r3, #0]
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 800c6c8:	4a07      	ldr	r2, [pc, #28]	; (800c6e8 <udp_connect+0xd8>)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	3718      	adds	r7, #24
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}
 800c6d8:	08013b44 	.word	0x08013b44
 800c6dc:	08013e24 	.word	0x08013e24
 800c6e0:	08013b98 	.word	0x08013b98
 800c6e4:	08013e40 	.word	0x08013e40
 800c6e8:	20006e7c 	.word	0x20006e7c

0800c6ec <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b084      	sub	sp, #16
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	60f8      	str	r0, [r7, #12]
 800c6f4:	60b9      	str	r1, [r7, #8]
 800c6f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d107      	bne.n	800c70e <udp_recv+0x22>
 800c6fe:	4b08      	ldr	r3, [pc, #32]	; (800c720 <udp_recv+0x34>)
 800c700:	f240 428a 	movw	r2, #1162	; 0x48a
 800c704:	4907      	ldr	r1, [pc, #28]	; (800c724 <udp_recv+0x38>)
 800c706:	4808      	ldr	r0, [pc, #32]	; (800c728 <udp_recv+0x3c>)
 800c708:	f004 faae 	bl	8010c68 <iprintf>
 800c70c:	e005      	b.n	800c71a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	68ba      	ldr	r2, [r7, #8]
 800c712:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	61da      	str	r2, [r3, #28]
}
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	08013b44 	.word	0x08013b44
 800c724:	08013e78 	.word	0x08013e78
 800c728:	08013b98 	.word	0x08013b98

0800c72c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d107      	bne.n	800c74a <udp_remove+0x1e>
 800c73a:	4b19      	ldr	r3, [pc, #100]	; (800c7a0 <udp_remove+0x74>)
 800c73c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 800c740:	4918      	ldr	r1, [pc, #96]	; (800c7a4 <udp_remove+0x78>)
 800c742:	4819      	ldr	r0, [pc, #100]	; (800c7a8 <udp_remove+0x7c>)
 800c744:	f004 fa90 	bl	8010c68 <iprintf>
 800c748:	e026      	b.n	800c798 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 800c74a:	4b18      	ldr	r3, [pc, #96]	; (800c7ac <udp_remove+0x80>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	687a      	ldr	r2, [r7, #4]
 800c750:	429a      	cmp	r2, r3
 800c752:	d105      	bne.n	800c760 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 800c754:	4b15      	ldr	r3, [pc, #84]	; (800c7ac <udp_remove+0x80>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	68db      	ldr	r3, [r3, #12]
 800c75a:	4a14      	ldr	r2, [pc, #80]	; (800c7ac <udp_remove+0x80>)
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	e017      	b.n	800c790 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <udp_remove+0x80>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	60fb      	str	r3, [r7, #12]
 800c766:	e010      	b.n	800c78a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	68db      	ldr	r3, [r3, #12]
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d009      	beq.n	800c784 <udp_remove+0x58>
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	687a      	ldr	r2, [r7, #4]
 800c776:	429a      	cmp	r2, r3
 800c778:	d104      	bne.n	800c784 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	68da      	ldr	r2, [r3, #12]
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	60da      	str	r2, [r3, #12]
        break;
 800c782:	e005      	b.n	800c790 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	68db      	ldr	r3, [r3, #12]
 800c788:	60fb      	str	r3, [r7, #12]
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1eb      	bne.n	800c768 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 800c790:	6879      	ldr	r1, [r7, #4]
 800c792:	2000      	movs	r0, #0
 800c794:	f7f7 ff9e 	bl	80046d4 <memp_free>
}
 800c798:	3710      	adds	r7, #16
 800c79a:	46bd      	mov	sp, r7
 800c79c:	bd80      	pop	{r7, pc}
 800c79e:	bf00      	nop
 800c7a0:	08013b44 	.word	0x08013b44
 800c7a4:	08013e90 	.word	0x08013e90
 800c7a8:	08013b98 	.word	0x08013b98
 800c7ac:	20006e7c 	.word	0x20006e7c

0800c7b0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b082      	sub	sp, #8
 800c7b4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 800c7b6:	2000      	movs	r0, #0
 800c7b8:	f7f7 ff40 	bl	800463c <memp_malloc>
 800c7bc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d007      	beq.n	800c7d4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 800c7c4:	2220      	movs	r2, #32
 800c7c6:	2100      	movs	r1, #0
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f004 fa45 	bl	8010c58 <memset>
    pcb->ttl = UDP_TTL;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	22ff      	movs	r2, #255	; 0xff
 800c7d2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 800c7d4:	687b      	ldr	r3, [r7, #4]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3708      	adds	r7, #8
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
	...

0800c7e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	6078      	str	r0, [r7, #4]
 800c7e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d01e      	beq.n	800c82e <udp_netif_ip_addr_changed+0x4e>
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d01a      	beq.n	800c82e <udp_netif_ip_addr_changed+0x4e>
 800c7f8:	683b      	ldr	r3, [r7, #0]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d017      	beq.n	800c82e <udp_netif_ip_addr_changed+0x4e>
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d013      	beq.n	800c82e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c806:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <udp_netif_ip_addr_changed+0x5c>)
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	60fb      	str	r3, [r7, #12]
 800c80c:	e00c      	b.n	800c828 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	429a      	cmp	r2, r3
 800c818:	d103      	bne.n	800c822 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 800c81a:	683b      	ldr	r3, [r7, #0]
 800c81c:	681a      	ldr	r2, [r3, #0]
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	60fb      	str	r3, [r7, #12]
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d1ef      	bne.n	800c80e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 800c82e:	bf00      	nop
 800c830:	3714      	adds	r7, #20
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	20006e7c 	.word	0x20006e7c

0800c840 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 800c840:	b580      	push	{r7, lr}
 800c842:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 800c844:	4b20      	ldr	r3, [pc, #128]	; (800c8c8 <dhcp_inc_pcb_refcount+0x88>)
 800c846:	781b      	ldrb	r3, [r3, #0]
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d133      	bne.n	800c8b4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 800c84c:	4b1f      	ldr	r3, [pc, #124]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d005      	beq.n	800c860 <dhcp_inc_pcb_refcount+0x20>
 800c854:	4b1e      	ldr	r3, [pc, #120]	; (800c8d0 <dhcp_inc_pcb_refcount+0x90>)
 800c856:	22e5      	movs	r2, #229	; 0xe5
 800c858:	491e      	ldr	r1, [pc, #120]	; (800c8d4 <dhcp_inc_pcb_refcount+0x94>)
 800c85a:	481f      	ldr	r0, [pc, #124]	; (800c8d8 <dhcp_inc_pcb_refcount+0x98>)
 800c85c:	f004 fa04 	bl	8010c68 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 800c860:	f7ff ffa6 	bl	800c7b0 <udp_new>
 800c864:	4602      	mov	r2, r0
 800c866:	4b19      	ldr	r3, [pc, #100]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c868:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 800c86a:	4b18      	ldr	r3, [pc, #96]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d102      	bne.n	800c878 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 800c872:	f04f 33ff 	mov.w	r3, #4294967295
 800c876:	e024      	b.n	800c8c2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 800c878:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	7a5a      	ldrb	r2, [r3, #9]
 800c87e:	4b13      	ldr	r3, [pc, #76]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	f042 0220 	orr.w	r2, r2, #32
 800c886:	b2d2      	uxtb	r2, r2
 800c888:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 800c88a:	4b10      	ldr	r3, [pc, #64]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	2244      	movs	r2, #68	; 0x44
 800c890:	4912      	ldr	r1, [pc, #72]	; (800c8dc <dhcp_inc_pcb_refcount+0x9c>)
 800c892:	4618      	mov	r0, r3
 800c894:	f7ff fe34 	bl	800c500 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	2243      	movs	r2, #67	; 0x43
 800c89e:	490f      	ldr	r1, [pc, #60]	; (800c8dc <dhcp_inc_pcb_refcount+0x9c>)
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7ff feb5 	bl	800c610 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 800c8a6:	4b09      	ldr	r3, [pc, #36]	; (800c8cc <dhcp_inc_pcb_refcount+0x8c>)
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	490c      	ldr	r1, [pc, #48]	; (800c8e0 <dhcp_inc_pcb_refcount+0xa0>)
 800c8ae:	4618      	mov	r0, r3
 800c8b0:	f7ff ff1c 	bl	800c6ec <udp_recv>
  }

  dhcp_pcb_refcount++;
 800c8b4:	4b04      	ldr	r3, [pc, #16]	; (800c8c8 <dhcp_inc_pcb_refcount+0x88>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	b2da      	uxtb	r2, r3
 800c8bc:	4b02      	ldr	r3, [pc, #8]	; (800c8c8 <dhcp_inc_pcb_refcount+0x88>)
 800c8be:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 800c8c0:	2300      	movs	r3, #0
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	200005b4 	.word	0x200005b4
 800c8cc:	200005b0 	.word	0x200005b0
 800c8d0:	08013ea8 	.word	0x08013ea8
 800c8d4:	08013ee0 	.word	0x08013ee0
 800c8d8:	08013f08 	.word	0x08013f08
 800c8dc:	08014a14 	.word	0x08014a14
 800c8e0:	0800e239 	.word	0x0800e239

0800c8e4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 800c8e8:	4b0e      	ldr	r3, [pc, #56]	; (800c924 <dhcp_dec_pcb_refcount+0x40>)
 800c8ea:	781b      	ldrb	r3, [r3, #0]
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d105      	bne.n	800c8fc <dhcp_dec_pcb_refcount+0x18>
 800c8f0:	4b0d      	ldr	r3, [pc, #52]	; (800c928 <dhcp_dec_pcb_refcount+0x44>)
 800c8f2:	22ff      	movs	r2, #255	; 0xff
 800c8f4:	490d      	ldr	r1, [pc, #52]	; (800c92c <dhcp_dec_pcb_refcount+0x48>)
 800c8f6:	480e      	ldr	r0, [pc, #56]	; (800c930 <dhcp_dec_pcb_refcount+0x4c>)
 800c8f8:	f004 f9b6 	bl	8010c68 <iprintf>
  dhcp_pcb_refcount--;
 800c8fc:	4b09      	ldr	r3, [pc, #36]	; (800c924 <dhcp_dec_pcb_refcount+0x40>)
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	3b01      	subs	r3, #1
 800c902:	b2da      	uxtb	r2, r3
 800c904:	4b07      	ldr	r3, [pc, #28]	; (800c924 <dhcp_dec_pcb_refcount+0x40>)
 800c906:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 800c908:	4b06      	ldr	r3, [pc, #24]	; (800c924 <dhcp_dec_pcb_refcount+0x40>)
 800c90a:	781b      	ldrb	r3, [r3, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d107      	bne.n	800c920 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 800c910:	4b08      	ldr	r3, [pc, #32]	; (800c934 <dhcp_dec_pcb_refcount+0x50>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	4618      	mov	r0, r3
 800c916:	f7ff ff09 	bl	800c72c <udp_remove>
    dhcp_pcb = NULL;
 800c91a:	4b06      	ldr	r3, [pc, #24]	; (800c934 <dhcp_dec_pcb_refcount+0x50>)
 800c91c:	2200      	movs	r2, #0
 800c91e:	601a      	str	r2, [r3, #0]
  }
}
 800c920:	bf00      	nop
 800c922:	bd80      	pop	{r7, pc}
 800c924:	200005b4 	.word	0x200005b4
 800c928:	08013ea8 	.word	0x08013ea8
 800c92c:	08013f30 	.word	0x08013f30
 800c930:	08013f08 	.word	0x08013f08
 800c934:	200005b0 	.word	0x200005b0

0800c938 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c944:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800c946:	210c      	movs	r1, #12
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f001 f887 	bl	800da5c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800c94e:	4b06      	ldr	r3, [pc, #24]	; (800c968 <dhcp_handle_nak+0x30>)
 800c950:	4a05      	ldr	r2, [pc, #20]	; (800c968 <dhcp_handle_nak+0x30>)
 800c952:	4905      	ldr	r1, [pc, #20]	; (800c968 <dhcp_handle_nak+0x30>)
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f7f8 f85f 	bl	8004a18 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 800c95a:	6878      	ldr	r0, [r7, #4]
 800c95c:	f000 fc7a 	bl	800d254 <dhcp_discover>
}
 800c960:	bf00      	nop
 800c962:	3710      	adds	r7, #16
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}
 800c968:	08014a14 	.word	0x08014a14

0800c96c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c978:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 800c97a:	2108      	movs	r1, #8
 800c97c:	68f8      	ldr	r0, [r7, #12]
 800c97e:	f001 f86d 	bl	800da5c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	331c      	adds	r3, #28
 800c986:	2200      	movs	r2, #0
 800c988:	4619      	mov	r1, r3
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	f002 fb9c 	bl	800f0c8 <etharp_query>
 800c990:	4603      	mov	r3, r0
 800c992:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	799b      	ldrb	r3, [r3, #6]
 800c998:	2bff      	cmp	r3, #255	; 0xff
 800c99a:	d005      	beq.n	800c9a8 <dhcp_check+0x3c>
    dhcp->tries++;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	799b      	ldrb	r3, [r3, #6]
 800c9a0:	3301      	adds	r3, #1
 800c9a2:	b2da      	uxtb	r2, r3
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 800c9a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800c9ac:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800c9ae:	893b      	ldrh	r3, [r7, #8]
 800c9b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800c9b4:	4a06      	ldr	r2, [pc, #24]	; (800c9d0 <dhcp_check+0x64>)
 800c9b6:	fb82 1203 	smull	r1, r2, r2, r3
 800c9ba:	1152      	asrs	r2, r2, #5
 800c9bc:	17db      	asrs	r3, r3, #31
 800c9be:	1ad3      	subs	r3, r2, r3
 800c9c0:	b29a      	uxth	r2, r3
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 800c9c6:	bf00      	nop
 800c9c8:	3710      	adds	r7, #16
 800c9ca:	46bd      	mov	sp, r7
 800c9cc:	bd80      	pop	{r7, pc}
 800c9ce:	bf00      	nop
 800c9d0:	10624dd3 	.word	0x10624dd3

0800c9d4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9e2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 800c9e4:	4b0c      	ldr	r3, [pc, #48]	; (800ca18 <dhcp_handle_offer+0x44>)
 800c9e6:	789b      	ldrb	r3, [r3, #2]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d011      	beq.n	800ca10 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 800c9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ca1c <dhcp_handle_offer+0x48>)
 800c9f4:	689b      	ldr	r3, [r3, #8]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f7f6 feef 	bl	80037da <lwip_htonl>
 800c9fc:	4602      	mov	r2, r0
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	691a      	ldr	r2, [r3, #16]
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 f808 	bl	800ca20 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 800ca10:	bf00      	nop
 800ca12:	3710      	adds	r7, #16
 800ca14:	46bd      	mov	sp, r7
 800ca16:	bd80      	pop	{r7, pc}
 800ca18:	20006e80 	.word	0x20006e80
 800ca1c:	20006e8c 	.word	0x20006e8c

0800ca20 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 800ca20:	b5b0      	push	{r4, r5, r7, lr}
 800ca22:	b08a      	sub	sp, #40	; 0x28
 800ca24:	af02      	add	r7, sp, #8
 800ca26:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d109      	bne.n	800ca42 <dhcp_select+0x22>
 800ca2e:	4b71      	ldr	r3, [pc, #452]	; (800cbf4 <dhcp_select+0x1d4>)
 800ca30:	f240 1277 	movw	r2, #375	; 0x177
 800ca34:	4970      	ldr	r1, [pc, #448]	; (800cbf8 <dhcp_select+0x1d8>)
 800ca36:	4871      	ldr	r0, [pc, #452]	; (800cbfc <dhcp_select+0x1dc>)
 800ca38:	f004 f916 	bl	8010c68 <iprintf>
 800ca3c:	f06f 030f 	mvn.w	r3, #15
 800ca40:	e0d3      	b.n	800cbea <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca46:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 800ca48:	69bb      	ldr	r3, [r7, #24]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d109      	bne.n	800ca62 <dhcp_select+0x42>
 800ca4e:	4b69      	ldr	r3, [pc, #420]	; (800cbf4 <dhcp_select+0x1d4>)
 800ca50:	f240 1279 	movw	r2, #377	; 0x179
 800ca54:	496a      	ldr	r1, [pc, #424]	; (800cc00 <dhcp_select+0x1e0>)
 800ca56:	4869      	ldr	r0, [pc, #420]	; (800cbfc <dhcp_select+0x1dc>)
 800ca58:	f004 f906 	bl	8010c68 <iprintf>
 800ca5c:	f06f 0305 	mvn.w	r3, #5
 800ca60:	e0c3      	b.n	800cbea <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 800ca62:	2101      	movs	r1, #1
 800ca64:	69b8      	ldr	r0, [r7, #24]
 800ca66:	f000 fff9 	bl	800da5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800ca6a:	f107 030c 	add.w	r3, r7, #12
 800ca6e:	2203      	movs	r2, #3
 800ca70:	69b9      	ldr	r1, [r7, #24]
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	f001 fcac 	bl	800e3d0 <dhcp_create_msg>
 800ca78:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800ca7a:	697b      	ldr	r3, [r7, #20]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f000 8085 	beq.w	800cb8c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	685b      	ldr	r3, [r3, #4]
 800ca86:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800ca88:	89b8      	ldrh	r0, [r7, #12]
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800ca90:	2302      	movs	r3, #2
 800ca92:	2239      	movs	r2, #57	; 0x39
 800ca94:	f000 fffc 	bl	800da90 <dhcp_option>
 800ca98:	4603      	mov	r3, r0
 800ca9a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800ca9c:	89b8      	ldrh	r0, [r7, #12]
 800ca9e:	693b      	ldr	r3, [r7, #16]
 800caa0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800caa8:	461a      	mov	r2, r3
 800caaa:	f001 f84b 	bl	800db44 <dhcp_option_short>
 800caae:	4603      	mov	r3, r0
 800cab0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800cab2:	89b8      	ldrh	r0, [r7, #12]
 800cab4:	693b      	ldr	r3, [r7, #16]
 800cab6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800caba:	2304      	movs	r3, #4
 800cabc:	2232      	movs	r2, #50	; 0x32
 800cabe:	f000 ffe7 	bl	800da90 <dhcp_option>
 800cac2:	4603      	mov	r3, r0
 800cac4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800cac6:	89bc      	ldrh	r4, [r7, #12]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cace:	69bb      	ldr	r3, [r7, #24]
 800cad0:	69db      	ldr	r3, [r3, #28]
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7f6 fe81 	bl	80037da <lwip_htonl>
 800cad8:	4603      	mov	r3, r0
 800cada:	461a      	mov	r2, r3
 800cadc:	4629      	mov	r1, r5
 800cade:	4620      	mov	r0, r4
 800cae0:	f001 f862 	bl	800dba8 <dhcp_option_long>
 800cae4:	4603      	mov	r3, r0
 800cae6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800cae8:	89b8      	ldrh	r0, [r7, #12]
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800caf0:	2304      	movs	r3, #4
 800caf2:	2236      	movs	r2, #54	; 0x36
 800caf4:	f000 ffcc 	bl	800da90 <dhcp_option>
 800caf8:	4603      	mov	r3, r0
 800cafa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 800cafc:	89bc      	ldrh	r4, [r7, #12]
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800cb04:	69bb      	ldr	r3, [r7, #24]
 800cb06:	699b      	ldr	r3, [r3, #24]
 800cb08:	4618      	mov	r0, r3
 800cb0a:	f7f6 fe66 	bl	80037da <lwip_htonl>
 800cb0e:	4603      	mov	r3, r0
 800cb10:	461a      	mov	r2, r3
 800cb12:	4629      	mov	r1, r5
 800cb14:	4620      	mov	r0, r4
 800cb16:	f001 f847 	bl	800dba8 <dhcp_option_long>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800cb1e:	89b8      	ldrh	r0, [r7, #12]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cb26:	2304      	movs	r3, #4
 800cb28:	2237      	movs	r2, #55	; 0x37
 800cb2a:	f000 ffb1 	bl	800da90 <dhcp_option>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb32:	2300      	movs	r3, #0
 800cb34:	77bb      	strb	r3, [r7, #30]
 800cb36:	e00e      	b.n	800cb56 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800cb38:	89b8      	ldrh	r0, [r7, #12]
 800cb3a:	693b      	ldr	r3, [r7, #16]
 800cb3c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800cb40:	7fbb      	ldrb	r3, [r7, #30]
 800cb42:	4a30      	ldr	r2, [pc, #192]	; (800cc04 <dhcp_select+0x1e4>)
 800cb44:	5cd3      	ldrb	r3, [r2, r3]
 800cb46:	461a      	mov	r2, r3
 800cb48:	f000 ffd6 	bl	800daf8 <dhcp_option_byte>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800cb50:	7fbb      	ldrb	r3, [r7, #30]
 800cb52:	3301      	adds	r3, #1
 800cb54:	77bb      	strb	r3, [r7, #30]
 800cb56:	7fbb      	ldrb	r3, [r7, #30]
 800cb58:	2b03      	cmp	r3, #3
 800cb5a:	d9ed      	bls.n	800cb38 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800cb5c:	89b8      	ldrh	r0, [r7, #12]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	33f0      	adds	r3, #240	; 0xf0
 800cb62:	697a      	ldr	r2, [r7, #20]
 800cb64:	4619      	mov	r1, r3
 800cb66:	f001 fd09 	bl	800e57c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800cb6a:	4b27      	ldr	r3, [pc, #156]	; (800cc08 <dhcp_select+0x1e8>)
 800cb6c:	6818      	ldr	r0, [r3, #0]
 800cb6e:	4b27      	ldr	r3, [pc, #156]	; (800cc0c <dhcp_select+0x1ec>)
 800cb70:	9301      	str	r3, [sp, #4]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	9300      	str	r3, [sp, #0]
 800cb76:	2343      	movs	r3, #67	; 0x43
 800cb78:	4a25      	ldr	r2, [pc, #148]	; (800cc10 <dhcp_select+0x1f0>)
 800cb7a:	6979      	ldr	r1, [r7, #20]
 800cb7c:	f7ff fbda 	bl	800c334 <udp_sendto_if_src>
 800cb80:	4603      	mov	r3, r0
 800cb82:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800cb84:	6978      	ldr	r0, [r7, #20]
 800cb86:	f7f8 fc23 	bl	80053d0 <pbuf_free>
 800cb8a:	e001      	b.n	800cb90 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800cb8c:	23ff      	movs	r3, #255	; 0xff
 800cb8e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800cb90:	69bb      	ldr	r3, [r7, #24]
 800cb92:	799b      	ldrb	r3, [r3, #6]
 800cb94:	2bff      	cmp	r3, #255	; 0xff
 800cb96:	d005      	beq.n	800cba4 <dhcp_select+0x184>
    dhcp->tries++;
 800cb98:	69bb      	ldr	r3, [r7, #24]
 800cb9a:	799b      	ldrb	r3, [r3, #6]
 800cb9c:	3301      	adds	r3, #1
 800cb9e:	b2da      	uxtb	r2, r3
 800cba0:	69bb      	ldr	r3, [r7, #24]
 800cba2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800cba4:	69bb      	ldr	r3, [r7, #24]
 800cba6:	799b      	ldrb	r3, [r3, #6]
 800cba8:	2b05      	cmp	r3, #5
 800cbaa:	d80d      	bhi.n	800cbc8 <dhcp_select+0x1a8>
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	799b      	ldrb	r3, [r3, #6]
 800cbb0:	461a      	mov	r2, r3
 800cbb2:	2301      	movs	r3, #1
 800cbb4:	4093      	lsls	r3, r2
 800cbb6:	b29b      	uxth	r3, r3
 800cbb8:	461a      	mov	r2, r3
 800cbba:	0152      	lsls	r2, r2, #5
 800cbbc:	1ad2      	subs	r2, r2, r3
 800cbbe:	0092      	lsls	r2, r2, #2
 800cbc0:	4413      	add	r3, r2
 800cbc2:	00db      	lsls	r3, r3, #3
 800cbc4:	b29b      	uxth	r3, r3
 800cbc6:	e001      	b.n	800cbcc <dhcp_select+0x1ac>
 800cbc8:	f64e 2360 	movw	r3, #60000	; 0xea60
 800cbcc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800cbce:	89fb      	ldrh	r3, [r7, #14]
 800cbd0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800cbd4:	4a0f      	ldr	r2, [pc, #60]	; (800cc14 <dhcp_select+0x1f4>)
 800cbd6:	fb82 1203 	smull	r1, r2, r2, r3
 800cbda:	1152      	asrs	r2, r2, #5
 800cbdc:	17db      	asrs	r3, r3, #31
 800cbde:	1ad3      	subs	r3, r2, r3
 800cbe0:	b29a      	uxth	r2, r3
 800cbe2:	69bb      	ldr	r3, [r7, #24]
 800cbe4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800cbe6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3720      	adds	r7, #32
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bdb0      	pop	{r4, r5, r7, pc}
 800cbf2:	bf00      	nop
 800cbf4:	08013ea8 	.word	0x08013ea8
 800cbf8:	08013f54 	.word	0x08013f54
 800cbfc:	08013f08 	.word	0x08013f08
 800cc00:	08013f70 	.word	0x08013f70
 800cc04:	20000014 	.word	0x20000014
 800cc08:	200005b0 	.word	0x200005b0
 800cc0c:	08014a14 	.word	0x08014a14
 800cc10:	08014a18 	.word	0x08014a18
 800cc14:	10624dd3 	.word	0x10624dd3

0800cc18 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b082      	sub	sp, #8
 800cc1c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 800cc1e:	4b27      	ldr	r3, [pc, #156]	; (800ccbc <dhcp_coarse_tmr+0xa4>)
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	607b      	str	r3, [r7, #4]
 800cc24:	e042      	b.n	800ccac <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc2a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d039      	beq.n	800cca6 <dhcp_coarse_tmr+0x8e>
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	795b      	ldrb	r3, [r3, #5]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d035      	beq.n	800cca6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 800cc3a:	683b      	ldr	r3, [r7, #0]
 800cc3c:	8a9b      	ldrh	r3, [r3, #20]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d012      	beq.n	800cc68 <dhcp_coarse_tmr+0x50>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	8a5b      	ldrh	r3, [r3, #18]
 800cc46:	3301      	adds	r3, #1
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	683b      	ldr	r3, [r7, #0]
 800cc4c:	825a      	strh	r2, [r3, #18]
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	8a5a      	ldrh	r2, [r3, #18]
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	8a9b      	ldrh	r3, [r3, #20]
 800cc56:	429a      	cmp	r2, r3
 800cc58:	d106      	bne.n	800cc68 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f000 fe64 	bl	800d928 <dhcp_release_and_stop>
        dhcp_start(netif);
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f000 f989 	bl	800cf78 <dhcp_start>
 800cc66:	e01e      	b.n	800cca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	8a1b      	ldrh	r3, [r3, #16]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d00b      	beq.n	800cc88 <dhcp_coarse_tmr+0x70>
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	8a1b      	ldrh	r3, [r3, #16]
 800cc74:	1e5a      	subs	r2, r3, #1
 800cc76:	b291      	uxth	r1, r2
 800cc78:	683a      	ldr	r2, [r7, #0]
 800cc7a:	8211      	strh	r1, [r2, #16]
 800cc7c:	2b01      	cmp	r3, #1
 800cc7e:	d103      	bne.n	800cc88 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f000 f8c6 	bl	800ce12 <dhcp_t2_timeout>
 800cc86:	e00e      	b.n	800cca6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	89db      	ldrh	r3, [r3, #14]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d00a      	beq.n	800cca6 <dhcp_coarse_tmr+0x8e>
 800cc90:	683b      	ldr	r3, [r7, #0]
 800cc92:	89db      	ldrh	r3, [r3, #14]
 800cc94:	1e5a      	subs	r2, r3, #1
 800cc96:	b291      	uxth	r1, r2
 800cc98:	683a      	ldr	r2, [r7, #0]
 800cc9a:	81d1      	strh	r1, [r2, #14]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d102      	bne.n	800cca6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f000 f888 	bl	800cdb6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	607b      	str	r3, [r7, #4]
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d1b9      	bne.n	800cc26 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 800ccb2:	bf00      	nop
 800ccb4:	3708      	adds	r7, #8
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop
 800ccbc:	20006e54 	.word	0x20006e54

0800ccc0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 800ccc6:	4b16      	ldr	r3, [pc, #88]	; (800cd20 <dhcp_fine_tmr+0x60>)
 800ccc8:	681b      	ldr	r3, [r3, #0]
 800ccca:	607b      	str	r3, [r7, #4]
 800cccc:	e020      	b.n	800cd10 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 800ccd4:	683b      	ldr	r3, [r7, #0]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d017      	beq.n	800cd0a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	891b      	ldrh	r3, [r3, #8]
 800ccde:	2b01      	cmp	r3, #1
 800cce0:	d906      	bls.n	800ccf0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	891b      	ldrh	r3, [r3, #8]
 800cce6:	3b01      	subs	r3, #1
 800cce8:	b29a      	uxth	r2, r3
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	811a      	strh	r2, [r3, #8]
 800ccee:	e00c      	b.n	800cd0a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	891b      	ldrh	r3, [r3, #8]
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d108      	bne.n	800cd0a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	891b      	ldrh	r3, [r3, #8]
 800ccfc:	3b01      	subs	r3, #1
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f80d 	bl	800cd24 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	607b      	str	r3, [r7, #4]
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1db      	bne.n	800ccce <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 800cd16:	bf00      	nop
 800cd18:	3708      	adds	r7, #8
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	bd80      	pop	{r7, pc}
 800cd1e:	bf00      	nop
 800cd20:	20006e54 	.word	0x20006e54

0800cd24 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b084      	sub	sp, #16
 800cd28:	af00      	add	r7, sp, #0
 800cd2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd30:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	795b      	ldrb	r3, [r3, #5]
 800cd36:	2b0c      	cmp	r3, #12
 800cd38:	d003      	beq.n	800cd42 <dhcp_timeout+0x1e>
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	795b      	ldrb	r3, [r3, #5]
 800cd3e:	2b06      	cmp	r3, #6
 800cd40:	d103      	bne.n	800cd4a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 800cd42:	6878      	ldr	r0, [r7, #4]
 800cd44:	f000 fa86 	bl	800d254 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 800cd48:	e031      	b.n	800cdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	795b      	ldrb	r3, [r3, #5]
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d10e      	bne.n	800cd70 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	799b      	ldrb	r3, [r3, #6]
 800cd56:	2b05      	cmp	r3, #5
 800cd58:	d803      	bhi.n	800cd62 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f7ff fe60 	bl	800ca20 <dhcp_select>
}
 800cd60:	e025      	b.n	800cdae <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 fde0 	bl	800d928 <dhcp_release_and_stop>
      dhcp_start(netif);
 800cd68:	6878      	ldr	r0, [r7, #4]
 800cd6a:	f000 f905 	bl	800cf78 <dhcp_start>
}
 800cd6e:	e01e      	b.n	800cdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	795b      	ldrb	r3, [r3, #5]
 800cd74:	2b08      	cmp	r3, #8
 800cd76:	d10b      	bne.n	800cd90 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	799b      	ldrb	r3, [r3, #6]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d803      	bhi.n	800cd88 <dhcp_timeout+0x64>
      dhcp_check(netif);
 800cd80:	6878      	ldr	r0, [r7, #4]
 800cd82:	f7ff fdf3 	bl	800c96c <dhcp_check>
}
 800cd86:	e012      	b.n	800cdae <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 fb05 	bl	800d398 <dhcp_bind>
}
 800cd8e:	e00e      	b.n	800cdae <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	795b      	ldrb	r3, [r3, #5]
 800cd94:	2b03      	cmp	r3, #3
 800cd96:	d10a      	bne.n	800cdae <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	799b      	ldrb	r3, [r3, #6]
 800cd9c:	2b01      	cmp	r3, #1
 800cd9e:	d803      	bhi.n	800cda8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f000 fd0b 	bl	800d7bc <dhcp_reboot>
}
 800cda6:	e002      	b.n	800cdae <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 800cda8:	6878      	ldr	r0, [r7, #4]
 800cdaa:	f000 fa53 	bl	800d254 <dhcp_discover>
}
 800cdae:	bf00      	nop
 800cdb0:	3710      	adds	r7, #16
 800cdb2:	46bd      	mov	sp, r7
 800cdb4:	bd80      	pop	{r7, pc}

0800cdb6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 800cdb6:	b580      	push	{r7, lr}
 800cdb8:	b084      	sub	sp, #16
 800cdba:	af00      	add	r7, sp, #0
 800cdbc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	795b      	ldrb	r3, [r3, #5]
 800cdc8:	2b01      	cmp	r3, #1
 800cdca:	d007      	beq.n	800cddc <dhcp_t1_timeout+0x26>
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	795b      	ldrb	r3, [r3, #5]
 800cdd0:	2b0a      	cmp	r3, #10
 800cdd2:	d003      	beq.n	800cddc <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800cdd8:	2b05      	cmp	r3, #5
 800cdda:	d116      	bne.n	800ce0a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f000 fbb5 	bl	800d54c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	899b      	ldrh	r3, [r3, #12]
 800cde6:	461a      	mov	r2, r3
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	8a5b      	ldrh	r3, [r3, #18]
 800cdec:	1ad3      	subs	r3, r2, r3
 800cdee:	2b01      	cmp	r3, #1
 800cdf0:	dd0b      	ble.n	800ce0a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	899b      	ldrh	r3, [r3, #12]
 800cdf6:	461a      	mov	r2, r3
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	8a5b      	ldrh	r3, [r3, #18]
 800cdfc:	1ad3      	subs	r3, r2, r3
 800cdfe:	0fda      	lsrs	r2, r3, #31
 800ce00:	4413      	add	r3, r2
 800ce02:	105b      	asrs	r3, r3, #1
 800ce04:	b29a      	uxth	r2, r3
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	81da      	strh	r2, [r3, #14]
    }
  }
}
 800ce0a:	bf00      	nop
 800ce0c:	3710      	adds	r7, #16
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce1e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	795b      	ldrb	r3, [r3, #5]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d00b      	beq.n	800ce40 <dhcp_t2_timeout+0x2e>
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	795b      	ldrb	r3, [r3, #5]
 800ce2c:	2b0a      	cmp	r3, #10
 800ce2e:	d007      	beq.n	800ce40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 800ce34:	2b05      	cmp	r3, #5
 800ce36:	d003      	beq.n	800ce40 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	795b      	ldrb	r3, [r3, #5]
 800ce3c:	2b04      	cmp	r3, #4
 800ce3e:	d116      	bne.n	800ce6e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f000 fc1f 	bl	800d684 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	8a9b      	ldrh	r3, [r3, #20]
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	68fb      	ldr	r3, [r7, #12]
 800ce4e:	8a5b      	ldrh	r3, [r3, #18]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	2b01      	cmp	r3, #1
 800ce54:	dd0b      	ble.n	800ce6e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	8a9b      	ldrh	r3, [r3, #20]
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	8a5b      	ldrh	r3, [r3, #18]
 800ce60:	1ad3      	subs	r3, r2, r3
 800ce62:	0fda      	lsrs	r2, r3, #31
 800ce64:	4413      	add	r3, r2
 800ce66:	105b      	asrs	r3, r3, #1
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 800ce6e:	bf00      	nop
 800ce70:	3710      	adds	r7, #16
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}
	...

0800ce78 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b086      	sub	sp, #24
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce86:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800ce88:	693b      	ldr	r3, [r7, #16]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800ce8e:	693b      	ldr	r3, [r7, #16]
 800ce90:	2200      	movs	r2, #0
 800ce92:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 800ce94:	4b36      	ldr	r3, [pc, #216]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800ce96:	78db      	ldrb	r3, [r3, #3]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d003      	beq.n	800cea4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 800ce9c:	4b35      	ldr	r3, [pc, #212]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800ce9e:	68da      	ldr	r2, [r3, #12]
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 800cea4:	4b32      	ldr	r3, [pc, #200]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800cea6:	791b      	ldrb	r3, [r3, #4]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d004      	beq.n	800ceb6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 800ceac:	4b31      	ldr	r3, [pc, #196]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800ceae:	691a      	ldr	r2, [r3, #16]
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	62da      	str	r2, [r3, #44]	; 0x2c
 800ceb4:	e004      	b.n	800cec0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 800ceb6:	693b      	ldr	r3, [r7, #16]
 800ceb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceba:	085a      	lsrs	r2, r3, #1
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 800cec0:	4b2b      	ldr	r3, [pc, #172]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800cec2:	795b      	ldrb	r3, [r3, #5]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 800cec8:	4b2a      	ldr	r3, [pc, #168]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800ceca:	695a      	ldr	r2, [r3, #20]
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	631a      	str	r2, [r3, #48]	; 0x30
 800ced0:	e007      	b.n	800cee2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 800ced2:	693b      	ldr	r3, [r7, #16]
 800ced4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ced6:	4613      	mov	r3, r2
 800ced8:	00db      	lsls	r3, r3, #3
 800ceda:	1a9b      	subs	r3, r3, r2
 800cedc:	08da      	lsrs	r2, r3, #3
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 800cee2:	683b      	ldr	r3, [r7, #0]
 800cee4:	691a      	ldr	r2, [r3, #16]
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 800ceea:	4b21      	ldr	r3, [pc, #132]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800ceec:	799b      	ldrb	r3, [r3, #6]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d00b      	beq.n	800cf0a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 800cef2:	4b20      	ldr	r3, [pc, #128]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800cef4:	699b      	ldr	r3, [r3, #24]
 800cef6:	4618      	mov	r0, r3
 800cef8:	f7f6 fc6f 	bl	80037da <lwip_htonl>
 800cefc:	4602      	mov	r2, r0
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 800cf02:	693b      	ldr	r3, [r7, #16]
 800cf04:	2201      	movs	r2, #1
 800cf06:	71da      	strb	r2, [r3, #7]
 800cf08:	e002      	b.n	800cf10 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 800cf0a:	693b      	ldr	r3, [r7, #16]
 800cf0c:	2200      	movs	r2, #0
 800cf0e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 800cf10:	4b17      	ldr	r3, [pc, #92]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800cf12:	79db      	ldrb	r3, [r3, #7]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d007      	beq.n	800cf28 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 800cf18:	4b16      	ldr	r3, [pc, #88]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800cf1a:	69db      	ldr	r3, [r3, #28]
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	f7f6 fc5c 	bl	80037da <lwip_htonl>
 800cf22:	4602      	mov	r2, r0
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	625a      	str	r2, [r3, #36]	; 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800cf28:	2300      	movs	r3, #0
 800cf2a:	75fb      	strb	r3, [r7, #23]
 800cf2c:	e013      	b.n	800cf56 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 800cf2e:	7dfb      	ldrb	r3, [r7, #23]
 800cf30:	3308      	adds	r3, #8
 800cf32:	4a10      	ldr	r2, [pc, #64]	; (800cf74 <dhcp_handle_ack+0xfc>)
 800cf34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf38:	4618      	mov	r0, r3
 800cf3a:	f7f6 fc4e 	bl	80037da <lwip_htonl>
 800cf3e:	4603      	mov	r3, r0
 800cf40:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 800cf42:	f107 020c 	add.w	r2, r7, #12
 800cf46:	7dfb      	ldrb	r3, [r7, #23]
 800cf48:	4611      	mov	r1, r2
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	f7f6 fc66 	bl	800381c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 800cf50:	7dfb      	ldrb	r3, [r7, #23]
 800cf52:	3301      	adds	r3, #1
 800cf54:	75fb      	strb	r3, [r7, #23]
 800cf56:	7dfb      	ldrb	r3, [r7, #23]
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d805      	bhi.n	800cf68 <dhcp_handle_ack+0xf0>
 800cf5c:	7dfb      	ldrb	r3, [r7, #23]
 800cf5e:	3308      	adds	r3, #8
 800cf60:	4a03      	ldr	r2, [pc, #12]	; (800cf70 <dhcp_handle_ack+0xf8>)
 800cf62:	5cd3      	ldrb	r3, [r2, r3]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e2      	bne.n	800cf2e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 800cf68:	bf00      	nop
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	20006e80 	.word	0x20006e80
 800cf74:	20006e8c 	.word	0x20006e8c

0800cf78 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b084      	sub	sp, #16
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d109      	bne.n	800cf9a <dhcp_start+0x22>
 800cf86:	4b37      	ldr	r3, [pc, #220]	; (800d064 <dhcp_start+0xec>)
 800cf88:	f240 22e7 	movw	r2, #743	; 0x2e7
 800cf8c:	4936      	ldr	r1, [pc, #216]	; (800d068 <dhcp_start+0xf0>)
 800cf8e:	4837      	ldr	r0, [pc, #220]	; (800d06c <dhcp_start+0xf4>)
 800cf90:	f003 fe6a 	bl	8010c68 <iprintf>
 800cf94:	f06f 030f 	mvn.w	r3, #15
 800cf98:	e060      	b.n	800d05c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800cfa0:	f003 0301 	and.w	r3, r3, #1
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d109      	bne.n	800cfbc <dhcp_start+0x44>
 800cfa8:	4b2e      	ldr	r3, [pc, #184]	; (800d064 <dhcp_start+0xec>)
 800cfaa:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 800cfae:	4930      	ldr	r1, [pc, #192]	; (800d070 <dhcp_start+0xf8>)
 800cfb0:	482e      	ldr	r0, [pc, #184]	; (800d06c <dhcp_start+0xf4>)
 800cfb2:	f003 fe59 	bl	8010c68 <iprintf>
 800cfb6:	f06f 030f 	mvn.w	r3, #15
 800cfba:	e04f      	b.n	800d05c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cfc0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc6:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 800cfca:	d202      	bcs.n	800cfd2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 800cfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800cfd0:	e044      	b.n	800d05c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d10d      	bne.n	800cff4 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 800cfd8:	2034      	movs	r0, #52	; 0x34
 800cfda:	f7f7 f9c1 	bl	8004360 <mem_malloc>
 800cfde:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d102      	bne.n	800cfec <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 800cfe6:	f04f 33ff 	mov.w	r3, #4294967295
 800cfea:	e037      	b.n	800d05c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	68fa      	ldr	r2, [r7, #12]
 800cff0:	625a      	str	r2, [r3, #36]	; 0x24
 800cff2:	e005      	b.n	800d000 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	791b      	ldrb	r3, [r3, #4]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800cffc:	f7ff fc72 	bl	800c8e4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 800d000:	2234      	movs	r2, #52	; 0x34
 800d002:	2100      	movs	r1, #0
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f003 fe27 	bl	8010c58 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 800d00a:	f7ff fc19 	bl	800c840 <dhcp_inc_pcb_refcount>
 800d00e:	4603      	mov	r3, r0
 800d010:	2b00      	cmp	r3, #0
 800d012:	d002      	beq.n	800d01a <dhcp_start+0xa2>
    return ERR_MEM;
 800d014:	f04f 33ff 	mov.w	r3, #4294967295
 800d018:	e020      	b.n	800d05c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2201      	movs	r2, #1
 800d01e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d026:	f003 0304 	and.w	r3, r3, #4
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d105      	bne.n	800d03a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 800d02e:	2102      	movs	r1, #2
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 fd13 	bl	800da5c <dhcp_set_state>
    return ERR_OK;
 800d036:	2300      	movs	r3, #0
 800d038:	e010      	b.n	800d05c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 f90a 	bl	800d254 <dhcp_discover>
 800d040:	4603      	mov	r3, r0
 800d042:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 800d044:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d005      	beq.n	800d058 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fc6b 	bl	800d928 <dhcp_release_and_stop>
    return ERR_MEM;
 800d052:	f04f 33ff 	mov.w	r3, #4294967295
 800d056:	e001      	b.n	800d05c <dhcp_start+0xe4>
  }
  return result;
 800d058:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}
 800d064:	08013ea8 	.word	0x08013ea8
 800d068:	08013f8c 	.word	0x08013f8c
 800d06c:	08013f08 	.word	0x08013f08
 800d070:	08013fd0 	.word	0x08013fd0

0800d074 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b084      	sub	sp, #16
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d037      	beq.n	800d0f8 <dhcp_network_changed+0x84>
    return;
  }
  switch (dhcp->state) {
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	795b      	ldrb	r3, [r3, #5]
 800d08c:	2b0a      	cmp	r3, #10
 800d08e:	d820      	bhi.n	800d0d2 <dhcp_network_changed+0x5e>
 800d090:	a201      	add	r2, pc, #4	; (adr r2, 800d098 <dhcp_network_changed+0x24>)
 800d092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d096:	bf00      	nop
 800d098:	0800d0fd 	.word	0x0800d0fd
 800d09c:	0800d0d3 	.word	0x0800d0d3
 800d0a0:	0800d0d3 	.word	0x0800d0d3
 800d0a4:	0800d0c5 	.word	0x0800d0c5
 800d0a8:	0800d0c5 	.word	0x0800d0c5
 800d0ac:	0800d0c5 	.word	0x0800d0c5
 800d0b0:	0800d0d3 	.word	0x0800d0d3
 800d0b4:	0800d0d3 	.word	0x0800d0d3
 800d0b8:	0800d0d3 	.word	0x0800d0d3
 800d0bc:	0800d0d3 	.word	0x0800d0d3
 800d0c0:	0800d0c5 	.word	0x0800d0c5
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fb76 	bl	800d7bc <dhcp_reboot>
      break;
 800d0d0:	e015      	b.n	800d0fe <dhcp_network_changed+0x8a>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	795b      	ldrb	r3, [r3, #5]
 800d0d6:	2b0c      	cmp	r3, #12
 800d0d8:	d906      	bls.n	800d0e8 <dhcp_network_changed+0x74>
 800d0da:	4b0a      	ldr	r3, [pc, #40]	; (800d104 <dhcp_network_changed+0x90>)
 800d0dc:	f240 326d 	movw	r2, #877	; 0x36d
 800d0e0:	4909      	ldr	r1, [pc, #36]	; (800d108 <dhcp_network_changed+0x94>)
 800d0e2:	480a      	ldr	r0, [pc, #40]	; (800d10c <dhcp_network_changed+0x98>)
 800d0e4:	f003 fdc0 	bl	8010c68 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 800d0ee:	6878      	ldr	r0, [r7, #4]
 800d0f0:	f000 f8b0 	bl	800d254 <dhcp_discover>
      break;
 800d0f4:	bf00      	nop
 800d0f6:	e002      	b.n	800d0fe <dhcp_network_changed+0x8a>
    return;
 800d0f8:	bf00      	nop
 800d0fa:	e000      	b.n	800d0fe <dhcp_network_changed+0x8a>
      break;
 800d0fc:	bf00      	nop
  }
}
 800d0fe:	3710      	adds	r7, #16
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	08013ea8 	.word	0x08013ea8
 800d108:	08013ff4 	.word	0x08013ff4
 800d10c:	08013f08 	.word	0x08013f08

0800d110 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b084      	sub	sp, #16
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d107      	bne.n	800d130 <dhcp_arp_reply+0x20>
 800d120:	4b0e      	ldr	r3, [pc, #56]	; (800d15c <dhcp_arp_reply+0x4c>)
 800d122:	f240 328b 	movw	r2, #907	; 0x38b
 800d126:	490e      	ldr	r1, [pc, #56]	; (800d160 <dhcp_arp_reply+0x50>)
 800d128:	480e      	ldr	r0, [pc, #56]	; (800d164 <dhcp_arp_reply+0x54>)
 800d12a:	f003 fd9d 	bl	8010c68 <iprintf>
 800d12e:	e012      	b.n	800d156 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d134:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d00c      	beq.n	800d156 <dhcp_arp_reply+0x46>
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	795b      	ldrb	r3, [r3, #5]
 800d140:	2b08      	cmp	r3, #8
 800d142:	d108      	bne.n	800d156 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 800d144:	683b      	ldr	r3, [r7, #0]
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	69db      	ldr	r3, [r3, #28]
 800d14c:	429a      	cmp	r2, r3
 800d14e:	d102      	bne.n	800d156 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 f809 	bl	800d168 <dhcp_decline>
    }
  }
}
 800d156:	3710      	adds	r7, #16
 800d158:	46bd      	mov	sp, r7
 800d15a:	bd80      	pop	{r7, pc}
 800d15c:	08013ea8 	.word	0x08013ea8
 800d160:	08013f8c 	.word	0x08013f8c
 800d164:	08013f08 	.word	0x08013f08

0800d168 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 800d168:	b5b0      	push	{r4, r5, r7, lr}
 800d16a:	b08a      	sub	sp, #40	; 0x28
 800d16c:	af02      	add	r7, sp, #8
 800d16e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d174:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 800d176:	210c      	movs	r1, #12
 800d178:	69b8      	ldr	r0, [r7, #24]
 800d17a:	f000 fc6f 	bl	800da5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 800d17e:	f107 030c 	add.w	r3, r7, #12
 800d182:	2204      	movs	r2, #4
 800d184:	69b9      	ldr	r1, [r7, #24]
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f001 f922 	bl	800e3d0 <dhcp_create_msg>
 800d18c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d035      	beq.n	800d200 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d194:	697b      	ldr	r3, [r7, #20]
 800d196:	685b      	ldr	r3, [r3, #4]
 800d198:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d19a:	89b8      	ldrh	r0, [r7, #12]
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d1a2:	2304      	movs	r3, #4
 800d1a4:	2232      	movs	r2, #50	; 0x32
 800d1a6:	f000 fc73 	bl	800da90 <dhcp_option>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d1ae:	89bc      	ldrh	r4, [r7, #12]
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	69db      	ldr	r3, [r3, #28]
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7f6 fb0d 	bl	80037da <lwip_htonl>
 800d1c0:	4603      	mov	r3, r0
 800d1c2:	461a      	mov	r2, r3
 800d1c4:	4629      	mov	r1, r5
 800d1c6:	4620      	mov	r0, r4
 800d1c8:	f000 fcee 	bl	800dba8 <dhcp_option_long>
 800d1cc:	4603      	mov	r3, r0
 800d1ce:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d1d0:	89b8      	ldrh	r0, [r7, #12]
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	33f0      	adds	r3, #240	; 0xf0
 800d1d6:	697a      	ldr	r2, [r7, #20]
 800d1d8:	4619      	mov	r1, r3
 800d1da:	f001 f9cf 	bl	800e57c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d1de:	4b19      	ldr	r3, [pc, #100]	; (800d244 <dhcp_decline+0xdc>)
 800d1e0:	6818      	ldr	r0, [r3, #0]
 800d1e2:	4b19      	ldr	r3, [pc, #100]	; (800d248 <dhcp_decline+0xe0>)
 800d1e4:	9301      	str	r3, [sp, #4]
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	2343      	movs	r3, #67	; 0x43
 800d1ec:	4a17      	ldr	r2, [pc, #92]	; (800d24c <dhcp_decline+0xe4>)
 800d1ee:	6979      	ldr	r1, [r7, #20]
 800d1f0:	f7ff f8a0 	bl	800c334 <udp_sendto_if_src>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d1f8:	6978      	ldr	r0, [r7, #20]
 800d1fa:	f7f8 f8e9 	bl	80053d0 <pbuf_free>
 800d1fe:	e001      	b.n	800d204 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d200:	23ff      	movs	r3, #255	; 0xff
 800d202:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	799b      	ldrb	r3, [r3, #6]
 800d208:	2bff      	cmp	r3, #255	; 0xff
 800d20a:	d005      	beq.n	800d218 <dhcp_decline+0xb0>
    dhcp->tries++;
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	799b      	ldrb	r3, [r3, #6]
 800d210:	3301      	adds	r3, #1
 800d212:	b2da      	uxtb	r2, r3
 800d214:	69bb      	ldr	r3, [r7, #24]
 800d216:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 800d218:	f242 7310 	movw	r3, #10000	; 0x2710
 800d21c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d21e:	89fb      	ldrh	r3, [r7, #14]
 800d220:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d224:	4a0a      	ldr	r2, [pc, #40]	; (800d250 <dhcp_decline+0xe8>)
 800d226:	fb82 1203 	smull	r1, r2, r2, r3
 800d22a:	1152      	asrs	r2, r2, #5
 800d22c:	17db      	asrs	r3, r3, #31
 800d22e:	1ad3      	subs	r3, r2, r3
 800d230:	b29a      	uxth	r2, r3
 800d232:	69bb      	ldr	r3, [r7, #24]
 800d234:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d236:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3720      	adds	r7, #32
 800d23e:	46bd      	mov	sp, r7
 800d240:	bdb0      	pop	{r4, r5, r7, pc}
 800d242:	bf00      	nop
 800d244:	200005b0 	.word	0x200005b0
 800d248:	08014a14 	.word	0x08014a14
 800d24c:	08014a18 	.word	0x08014a18
 800d250:	10624dd3 	.word	0x10624dd3

0800d254 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b08a      	sub	sp, #40	; 0x28
 800d258:	af02      	add	r7, sp, #8
 800d25a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d260:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 800d262:	2300      	movs	r3, #0
 800d264:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	2200      	movs	r2, #0
 800d26a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 800d26c:	2106      	movs	r1, #6
 800d26e:	69b8      	ldr	r0, [r7, #24]
 800d270:	f000 fbf4 	bl	800da5c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 800d274:	f107 0308 	add.w	r3, r7, #8
 800d278:	2201      	movs	r2, #1
 800d27a:	69b9      	ldr	r1, [r7, #24]
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f001 f8a7 	bl	800e3d0 <dhcp_create_msg>
 800d282:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d04b      	beq.n	800d322 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d28a:	693b      	ldr	r3, [r7, #16]
 800d28c:	685b      	ldr	r3, [r3, #4]
 800d28e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d290:	8938      	ldrh	r0, [r7, #8]
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d298:	2302      	movs	r3, #2
 800d29a:	2239      	movs	r2, #57	; 0x39
 800d29c:	f000 fbf8 	bl	800da90 <dhcp_option>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d2a4:	8938      	ldrh	r0, [r7, #8]
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	f000 fc47 	bl	800db44 <dhcp_option_short>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d2ba:	8938      	ldrh	r0, [r7, #8]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2c2:	2304      	movs	r3, #4
 800d2c4:	2237      	movs	r2, #55	; 0x37
 800d2c6:	f000 fbe3 	bl	800da90 <dhcp_option>
 800d2ca:	4603      	mov	r3, r0
 800d2cc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d2ce:	2300      	movs	r3, #0
 800d2d0:	77fb      	strb	r3, [r7, #31]
 800d2d2:	e00e      	b.n	800d2f2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d2d4:	8938      	ldrh	r0, [r7, #8]
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d2dc:	7ffb      	ldrb	r3, [r7, #31]
 800d2de:	4a29      	ldr	r2, [pc, #164]	; (800d384 <dhcp_discover+0x130>)
 800d2e0:	5cd3      	ldrb	r3, [r2, r3]
 800d2e2:	461a      	mov	r2, r3
 800d2e4:	f000 fc08 	bl	800daf8 <dhcp_option_byte>
 800d2e8:	4603      	mov	r3, r0
 800d2ea:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d2ec:	7ffb      	ldrb	r3, [r7, #31]
 800d2ee:	3301      	adds	r3, #1
 800d2f0:	77fb      	strb	r3, [r7, #31]
 800d2f2:	7ffb      	ldrb	r3, [r7, #31]
 800d2f4:	2b03      	cmp	r3, #3
 800d2f6:	d9ed      	bls.n	800d2d4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d2f8:	8938      	ldrh	r0, [r7, #8]
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	33f0      	adds	r3, #240	; 0xf0
 800d2fe:	693a      	ldr	r2, [r7, #16]
 800d300:	4619      	mov	r1, r3
 800d302:	f001 f93b 	bl	800e57c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 800d306:	4b20      	ldr	r3, [pc, #128]	; (800d388 <dhcp_discover+0x134>)
 800d308:	6818      	ldr	r0, [r3, #0]
 800d30a:	4b20      	ldr	r3, [pc, #128]	; (800d38c <dhcp_discover+0x138>)
 800d30c:	9301      	str	r3, [sp, #4]
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	9300      	str	r3, [sp, #0]
 800d312:	2343      	movs	r3, #67	; 0x43
 800d314:	4a1e      	ldr	r2, [pc, #120]	; (800d390 <dhcp_discover+0x13c>)
 800d316:	6939      	ldr	r1, [r7, #16]
 800d318:	f7ff f80c 	bl	800c334 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 800d31c:	6938      	ldr	r0, [r7, #16]
 800d31e:	f7f8 f857 	bl	80053d0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 800d322:	69bb      	ldr	r3, [r7, #24]
 800d324:	799b      	ldrb	r3, [r3, #6]
 800d326:	2bff      	cmp	r3, #255	; 0xff
 800d328:	d005      	beq.n	800d336 <dhcp_discover+0xe2>
    dhcp->tries++;
 800d32a:	69bb      	ldr	r3, [r7, #24]
 800d32c:	799b      	ldrb	r3, [r3, #6]
 800d32e:	3301      	adds	r3, #1
 800d330:	b2da      	uxtb	r2, r3
 800d332:	69bb      	ldr	r3, [r7, #24]
 800d334:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 800d336:	69bb      	ldr	r3, [r7, #24]
 800d338:	799b      	ldrb	r3, [r3, #6]
 800d33a:	2b05      	cmp	r3, #5
 800d33c:	d80d      	bhi.n	800d35a <dhcp_discover+0x106>
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	799b      	ldrb	r3, [r3, #6]
 800d342:	461a      	mov	r2, r3
 800d344:	2301      	movs	r3, #1
 800d346:	4093      	lsls	r3, r2
 800d348:	b29b      	uxth	r3, r3
 800d34a:	461a      	mov	r2, r3
 800d34c:	0152      	lsls	r2, r2, #5
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	0092      	lsls	r2, r2, #2
 800d352:	4413      	add	r3, r2
 800d354:	00db      	lsls	r3, r3, #3
 800d356:	b29b      	uxth	r3, r3
 800d358:	e001      	b.n	800d35e <dhcp_discover+0x10a>
 800d35a:	f64e 2360 	movw	r3, #60000	; 0xea60
 800d35e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d360:	897b      	ldrh	r3, [r7, #10]
 800d362:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d366:	4a0b      	ldr	r2, [pc, #44]	; (800d394 <dhcp_discover+0x140>)
 800d368:	fb82 1203 	smull	r1, r2, r2, r3
 800d36c:	1152      	asrs	r2, r2, #5
 800d36e:	17db      	asrs	r3, r3, #31
 800d370:	1ad3      	subs	r3, r2, r3
 800d372:	b29a      	uxth	r2, r3
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d37c:	4618      	mov	r0, r3
 800d37e:	3720      	adds	r7, #32
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	20000014 	.word	0x20000014
 800d388:	200005b0 	.word	0x200005b0
 800d38c:	08014a14 	.word	0x08014a14
 800d390:	08014a18 	.word	0x08014a18
 800d394:	10624dd3 	.word	0x10624dd3

0800d398 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b088      	sub	sp, #32
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d107      	bne.n	800d3b6 <dhcp_bind+0x1e>
 800d3a6:	4b64      	ldr	r3, [pc, #400]	; (800d538 <dhcp_bind+0x1a0>)
 800d3a8:	f240 4215 	movw	r2, #1045	; 0x415
 800d3ac:	4963      	ldr	r1, [pc, #396]	; (800d53c <dhcp_bind+0x1a4>)
 800d3ae:	4864      	ldr	r0, [pc, #400]	; (800d540 <dhcp_bind+0x1a8>)
 800d3b0:	f003 fc5a 	bl	8010c68 <iprintf>
 800d3b4:	e0bc      	b.n	800d530 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d107      	bne.n	800d3d2 <dhcp_bind+0x3a>
 800d3c2:	4b5d      	ldr	r3, [pc, #372]	; (800d538 <dhcp_bind+0x1a0>)
 800d3c4:	f240 4217 	movw	r2, #1047	; 0x417
 800d3c8:	495e      	ldr	r1, [pc, #376]	; (800d544 <dhcp_bind+0x1ac>)
 800d3ca:	485d      	ldr	r0, [pc, #372]	; (800d540 <dhcp_bind+0x1a8>)
 800d3cc:	f003 fc4c 	bl	8010c68 <iprintf>
 800d3d0:	e0ae      	b.n	800d530 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 800d3d2:	69bb      	ldr	r3, [r7, #24]
 800d3d4:	2200      	movs	r2, #0
 800d3d6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 800d3d8:	69bb      	ldr	r3, [r7, #24]
 800d3da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3e0:	d019      	beq.n	800d416 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3e6:	331e      	adds	r3, #30
 800d3e8:	4a57      	ldr	r2, [pc, #348]	; (800d548 <dhcp_bind+0x1b0>)
 800d3ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d3ee:	095b      	lsrs	r3, r3, #5
 800d3f0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d3f2:	69fb      	ldr	r3, [r7, #28]
 800d3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3f8:	d302      	bcc.n	800d400 <dhcp_bind+0x68>
      timeout = 0xffff;
 800d3fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3fe:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	b29a      	uxth	r2, r3
 800d404:	69bb      	ldr	r3, [r7, #24]
 800d406:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	8a9b      	ldrh	r3, [r3, #20]
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d102      	bne.n	800d416 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 800d410:	69bb      	ldr	r3, [r7, #24]
 800d412:	2201      	movs	r2, #1
 800d414:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 800d416:	69bb      	ldr	r3, [r7, #24]
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d41e:	d01d      	beq.n	800d45c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d420:	69bb      	ldr	r3, [r7, #24]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	331e      	adds	r3, #30
 800d426:	4a48      	ldr	r2, [pc, #288]	; (800d548 <dhcp_bind+0x1b0>)
 800d428:	fba2 2303 	umull	r2, r3, r2, r3
 800d42c:	095b      	lsrs	r3, r3, #5
 800d42e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d436:	d302      	bcc.n	800d43e <dhcp_bind+0xa6>
      timeout = 0xffff;
 800d438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d43c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 800d43e:	69fb      	ldr	r3, [r7, #28]
 800d440:	b29a      	uxth	r2, r3
 800d442:	69bb      	ldr	r3, [r7, #24]
 800d444:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	895b      	ldrh	r3, [r3, #10]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d102      	bne.n	800d454 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 800d44e:	69bb      	ldr	r3, [r7, #24]
 800d450:	2201      	movs	r2, #1
 800d452:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 800d454:	69bb      	ldr	r3, [r7, #24]
 800d456:	895a      	ldrh	r2, [r3, #10]
 800d458:	69bb      	ldr	r3, [r7, #24]
 800d45a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 800d45c:	69bb      	ldr	r3, [r7, #24]
 800d45e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d460:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d464:	d01d      	beq.n	800d4a2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 800d466:	69bb      	ldr	r3, [r7, #24]
 800d468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46a:	331e      	adds	r3, #30
 800d46c:	4a36      	ldr	r2, [pc, #216]	; (800d548 <dhcp_bind+0x1b0>)
 800d46e:	fba2 2303 	umull	r2, r3, r2, r3
 800d472:	095b      	lsrs	r3, r3, #5
 800d474:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d47c:	d302      	bcc.n	800d484 <dhcp_bind+0xec>
      timeout = 0xffff;
 800d47e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d482:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 800d484:	69fb      	ldr	r3, [r7, #28]
 800d486:	b29a      	uxth	r2, r3
 800d488:	69bb      	ldr	r3, [r7, #24]
 800d48a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 800d48c:	69bb      	ldr	r3, [r7, #24]
 800d48e:	899b      	ldrh	r3, [r3, #12]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d102      	bne.n	800d49a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 800d494:	69bb      	ldr	r3, [r7, #24]
 800d496:	2201      	movs	r2, #1
 800d498:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 800d49a:	69bb      	ldr	r3, [r7, #24]
 800d49c:	899a      	ldrh	r2, [r3, #12]
 800d49e:	69bb      	ldr	r3, [r7, #24]
 800d4a0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 800d4a2:	69bb      	ldr	r3, [r7, #24]
 800d4a4:	895a      	ldrh	r2, [r3, #10]
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	899b      	ldrh	r3, [r3, #12]
 800d4aa:	429a      	cmp	r2, r3
 800d4ac:	d306      	bcc.n	800d4bc <dhcp_bind+0x124>
 800d4ae:	69bb      	ldr	r3, [r7, #24]
 800d4b0:	899b      	ldrh	r3, [r3, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d002      	beq.n	800d4bc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	79db      	ldrb	r3, [r3, #7]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d003      	beq.n	800d4cc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 800d4c4:	69bb      	ldr	r3, [r7, #24]
 800d4c6:	6a1b      	ldr	r3, [r3, #32]
 800d4c8:	613b      	str	r3, [r7, #16]
 800d4ca:	e014      	b.n	800d4f6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 800d4cc:	69bb      	ldr	r3, [r7, #24]
 800d4ce:	331c      	adds	r3, #28
 800d4d0:	781b      	ldrb	r3, [r3, #0]
 800d4d2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 800d4d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	db02      	blt.n	800d4e2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 800d4dc:	23ff      	movs	r3, #255	; 0xff
 800d4de:	613b      	str	r3, [r7, #16]
 800d4e0:	e009      	b.n	800d4f6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	2bbf      	cmp	r3, #191	; 0xbf
 800d4e6:	d903      	bls.n	800d4f0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 800d4e8:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800d4ec:	613b      	str	r3, [r7, #16]
 800d4ee:	e002      	b.n	800d4f6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 800d4f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d4f4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 800d4f6:	69bb      	ldr	r3, [r7, #24]
 800d4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4fa:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d108      	bne.n	800d514 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 800d502:	69bb      	ldr	r3, [r7, #24]
 800d504:	69da      	ldr	r2, [r3, #28]
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	4013      	ands	r3, r2
 800d50a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d512:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 800d514:	210a      	movs	r1, #10
 800d516:	69b8      	ldr	r0, [r7, #24]
 800d518:	f000 faa0 	bl	800da5c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 800d51c:	69bb      	ldr	r3, [r7, #24]
 800d51e:	f103 011c 	add.w	r1, r3, #28
 800d522:	f107 030c 	add.w	r3, r7, #12
 800d526:	f107 0210 	add.w	r2, r7, #16
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f7f7 fa74 	bl	8004a18 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 800d530:	3720      	adds	r7, #32
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	08013ea8 	.word	0x08013ea8
 800d53c:	08014008 	.word	0x08014008
 800d540:	08013f08 	.word	0x08013f08
 800d544:	08014024 	.word	0x08014024
 800d548:	88888889 	.word	0x88888889

0800d54c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 800d54c:	b580      	push	{r7, lr}
 800d54e:	b08a      	sub	sp, #40	; 0x28
 800d550:	af02      	add	r7, sp, #8
 800d552:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d558:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 800d55a:	2105      	movs	r1, #5
 800d55c:	69b8      	ldr	r0, [r7, #24]
 800d55e:	f000 fa7d 	bl	800da5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d562:	f107 030c 	add.w	r3, r7, #12
 800d566:	2203      	movs	r2, #3
 800d568:	69b9      	ldr	r1, [r7, #24]
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 ff30 	bl	800e3d0 <dhcp_create_msg>
 800d570:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d04e      	beq.n	800d616 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d57e:	89b8      	ldrh	r0, [r7, #12]
 800d580:	693b      	ldr	r3, [r7, #16]
 800d582:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d586:	2302      	movs	r3, #2
 800d588:	2239      	movs	r2, #57	; 0x39
 800d58a:	f000 fa81 	bl	800da90 <dhcp_option>
 800d58e:	4603      	mov	r3, r0
 800d590:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d592:	89b8      	ldrh	r0, [r7, #12]
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f000 fad0 	bl	800db44 <dhcp_option_short>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d5a8:	89b8      	ldrh	r0, [r7, #12]
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d5b0:	2304      	movs	r3, #4
 800d5b2:	2237      	movs	r2, #55	; 0x37
 800d5b4:	f000 fa6c 	bl	800da90 <dhcp_option>
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d5bc:	2300      	movs	r3, #0
 800d5be:	77bb      	strb	r3, [r7, #30]
 800d5c0:	e00e      	b.n	800d5e0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d5c2:	89b8      	ldrh	r0, [r7, #12]
 800d5c4:	693b      	ldr	r3, [r7, #16]
 800d5c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d5ca:	7fbb      	ldrb	r3, [r7, #30]
 800d5cc:	4a2a      	ldr	r2, [pc, #168]	; (800d678 <dhcp_renew+0x12c>)
 800d5ce:	5cd3      	ldrb	r3, [r2, r3]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	f000 fa91 	bl	800daf8 <dhcp_option_byte>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d5da:	7fbb      	ldrb	r3, [r7, #30]
 800d5dc:	3301      	adds	r3, #1
 800d5de:	77bb      	strb	r3, [r7, #30]
 800d5e0:	7fbb      	ldrb	r3, [r7, #30]
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d9ed      	bls.n	800d5c2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d5e6:	89b8      	ldrh	r0, [r7, #12]
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	33f0      	adds	r3, #240	; 0xf0
 800d5ec:	697a      	ldr	r2, [r7, #20]
 800d5ee:	4619      	mov	r1, r3
 800d5f0:	f000 ffc4 	bl	800e57c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d5f4:	4b21      	ldr	r3, [pc, #132]	; (800d67c <dhcp_renew+0x130>)
 800d5f6:	6818      	ldr	r0, [r3, #0]
 800d5f8:	69bb      	ldr	r3, [r7, #24]
 800d5fa:	f103 0218 	add.w	r2, r3, #24
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	9300      	str	r3, [sp, #0]
 800d602:	2343      	movs	r3, #67	; 0x43
 800d604:	6979      	ldr	r1, [r7, #20]
 800d606:	f7fe fe21 	bl	800c24c <udp_sendto_if>
 800d60a:	4603      	mov	r3, r0
 800d60c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d60e:	6978      	ldr	r0, [r7, #20]
 800d610:	f7f7 fede 	bl	80053d0 <pbuf_free>
 800d614:	e001      	b.n	800d61a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d616:	23ff      	movs	r3, #255	; 0xff
 800d618:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d61a:	69bb      	ldr	r3, [r7, #24]
 800d61c:	799b      	ldrb	r3, [r3, #6]
 800d61e:	2bff      	cmp	r3, #255	; 0xff
 800d620:	d005      	beq.n	800d62e <dhcp_renew+0xe2>
    dhcp->tries++;
 800d622:	69bb      	ldr	r3, [r7, #24]
 800d624:	799b      	ldrb	r3, [r3, #6]
 800d626:	3301      	adds	r3, #1
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	69bb      	ldr	r3, [r7, #24]
 800d62c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 800d62e:	69bb      	ldr	r3, [r7, #24]
 800d630:	799b      	ldrb	r3, [r3, #6]
 800d632:	2b09      	cmp	r3, #9
 800d634:	d80a      	bhi.n	800d64c <dhcp_renew+0x100>
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	799b      	ldrb	r3, [r3, #6]
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	461a      	mov	r2, r3
 800d63e:	0152      	lsls	r2, r2, #5
 800d640:	1ad2      	subs	r2, r2, r3
 800d642:	0092      	lsls	r2, r2, #2
 800d644:	4413      	add	r3, r2
 800d646:	011b      	lsls	r3, r3, #4
 800d648:	b29b      	uxth	r3, r3
 800d64a:	e001      	b.n	800d650 <dhcp_renew+0x104>
 800d64c:	f644 6320 	movw	r3, #20000	; 0x4e20
 800d650:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d652:	89fb      	ldrh	r3, [r7, #14]
 800d654:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d658:	4a09      	ldr	r2, [pc, #36]	; (800d680 <dhcp_renew+0x134>)
 800d65a:	fb82 1203 	smull	r1, r2, r2, r3
 800d65e:	1152      	asrs	r2, r2, #5
 800d660:	17db      	asrs	r3, r3, #31
 800d662:	1ad3      	subs	r3, r2, r3
 800d664:	b29a      	uxth	r2, r3
 800d666:	69bb      	ldr	r3, [r7, #24]
 800d668:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d66a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d66e:	4618      	mov	r0, r3
 800d670:	3720      	adds	r7, #32
 800d672:	46bd      	mov	sp, r7
 800d674:	bd80      	pop	{r7, pc}
 800d676:	bf00      	nop
 800d678:	20000014 	.word	0x20000014
 800d67c:	200005b0 	.word	0x200005b0
 800d680:	10624dd3 	.word	0x10624dd3

0800d684 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 800d684:	b580      	push	{r7, lr}
 800d686:	b08a      	sub	sp, #40	; 0x28
 800d688:	af02      	add	r7, sp, #8
 800d68a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d690:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 800d692:	2104      	movs	r1, #4
 800d694:	69b8      	ldr	r0, [r7, #24]
 800d696:	f000 f9e1 	bl	800da5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d69a:	f107 030c 	add.w	r3, r7, #12
 800d69e:	2203      	movs	r2, #3
 800d6a0:	69b9      	ldr	r1, [r7, #24]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fe94 	bl	800e3d0 <dhcp_create_msg>
 800d6a8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d6aa:	697b      	ldr	r3, [r7, #20]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d04c      	beq.n	800d74a <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d6b0:	697b      	ldr	r3, [r7, #20]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d6b6:	89b8      	ldrh	r0, [r7, #12]
 800d6b8:	693b      	ldr	r3, [r7, #16]
 800d6ba:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6be:	2302      	movs	r3, #2
 800d6c0:	2239      	movs	r2, #57	; 0x39
 800d6c2:	f000 f9e5 	bl	800da90 <dhcp_option>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 800d6ca:	89b8      	ldrh	r0, [r7, #12]
 800d6cc:	693b      	ldr	r3, [r7, #16]
 800d6ce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	f000 fa34 	bl	800db44 <dhcp_option_short>
 800d6dc:	4603      	mov	r3, r0
 800d6de:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d6e0:	89b8      	ldrh	r0, [r7, #12]
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d6e8:	2304      	movs	r3, #4
 800d6ea:	2237      	movs	r2, #55	; 0x37
 800d6ec:	f000 f9d0 	bl	800da90 <dhcp_option>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	77bb      	strb	r3, [r7, #30]
 800d6f8:	e00e      	b.n	800d718 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d6fa:	89b8      	ldrh	r0, [r7, #12]
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d702:	7fbb      	ldrb	r3, [r7, #30]
 800d704:	4a29      	ldr	r2, [pc, #164]	; (800d7ac <dhcp_rebind+0x128>)
 800d706:	5cd3      	ldrb	r3, [r2, r3]
 800d708:	461a      	mov	r2, r3
 800d70a:	f000 f9f5 	bl	800daf8 <dhcp_option_byte>
 800d70e:	4603      	mov	r3, r0
 800d710:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d712:	7fbb      	ldrb	r3, [r7, #30]
 800d714:	3301      	adds	r3, #1
 800d716:	77bb      	strb	r3, [r7, #30]
 800d718:	7fbb      	ldrb	r3, [r7, #30]
 800d71a:	2b03      	cmp	r3, #3
 800d71c:	d9ed      	bls.n	800d6fa <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d71e:	89b8      	ldrh	r0, [r7, #12]
 800d720:	693b      	ldr	r3, [r7, #16]
 800d722:	33f0      	adds	r3, #240	; 0xf0
 800d724:	697a      	ldr	r2, [r7, #20]
 800d726:	4619      	mov	r1, r3
 800d728:	f000 ff28 	bl	800e57c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d72c:	4b20      	ldr	r3, [pc, #128]	; (800d7b0 <dhcp_rebind+0x12c>)
 800d72e:	6818      	ldr	r0, [r3, #0]
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	9300      	str	r3, [sp, #0]
 800d734:	2343      	movs	r3, #67	; 0x43
 800d736:	4a1f      	ldr	r2, [pc, #124]	; (800d7b4 <dhcp_rebind+0x130>)
 800d738:	6979      	ldr	r1, [r7, #20]
 800d73a:	f7fe fd87 	bl	800c24c <udp_sendto_if>
 800d73e:	4603      	mov	r3, r0
 800d740:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d742:	6978      	ldr	r0, [r7, #20]
 800d744:	f7f7 fe44 	bl	80053d0 <pbuf_free>
 800d748:	e001      	b.n	800d74e <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d74a:	23ff      	movs	r3, #255	; 0xff
 800d74c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d74e:	69bb      	ldr	r3, [r7, #24]
 800d750:	799b      	ldrb	r3, [r3, #6]
 800d752:	2bff      	cmp	r3, #255	; 0xff
 800d754:	d005      	beq.n	800d762 <dhcp_rebind+0xde>
    dhcp->tries++;
 800d756:	69bb      	ldr	r3, [r7, #24]
 800d758:	799b      	ldrb	r3, [r3, #6]
 800d75a:	3301      	adds	r3, #1
 800d75c:	b2da      	uxtb	r2, r3
 800d75e:	69bb      	ldr	r3, [r7, #24]
 800d760:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d762:	69bb      	ldr	r3, [r7, #24]
 800d764:	799b      	ldrb	r3, [r3, #6]
 800d766:	2b09      	cmp	r3, #9
 800d768:	d80a      	bhi.n	800d780 <dhcp_rebind+0xfc>
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	799b      	ldrb	r3, [r3, #6]
 800d76e:	b29b      	uxth	r3, r3
 800d770:	461a      	mov	r2, r3
 800d772:	0152      	lsls	r2, r2, #5
 800d774:	1ad2      	subs	r2, r2, r3
 800d776:	0092      	lsls	r2, r2, #2
 800d778:	4413      	add	r3, r2
 800d77a:	00db      	lsls	r3, r3, #3
 800d77c:	b29b      	uxth	r3, r3
 800d77e:	e001      	b.n	800d784 <dhcp_rebind+0x100>
 800d780:	f242 7310 	movw	r3, #10000	; 0x2710
 800d784:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d786:	89fb      	ldrh	r3, [r7, #14]
 800d788:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d78c:	4a0a      	ldr	r2, [pc, #40]	; (800d7b8 <dhcp_rebind+0x134>)
 800d78e:	fb82 1203 	smull	r1, r2, r2, r3
 800d792:	1152      	asrs	r2, r2, #5
 800d794:	17db      	asrs	r3, r3, #31
 800d796:	1ad3      	subs	r3, r2, r3
 800d798:	b29a      	uxth	r2, r3
 800d79a:	69bb      	ldr	r3, [r7, #24]
 800d79c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d79e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3720      	adds	r7, #32
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}
 800d7aa:	bf00      	nop
 800d7ac:	20000014 	.word	0x20000014
 800d7b0:	200005b0 	.word	0x200005b0
 800d7b4:	08014a18 	.word	0x08014a18
 800d7b8:	10624dd3 	.word	0x10624dd3

0800d7bc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 800d7bc:	b5b0      	push	{r4, r5, r7, lr}
 800d7be:	b08a      	sub	sp, #40	; 0x28
 800d7c0:	af02      	add	r7, sp, #8
 800d7c2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7c8:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 800d7ca:	2103      	movs	r1, #3
 800d7cc:	69b8      	ldr	r0, [r7, #24]
 800d7ce:	f000 f945 	bl	800da5c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 800d7d2:	f107 030c 	add.w	r3, r7, #12
 800d7d6:	2203      	movs	r2, #3
 800d7d8:	69b9      	ldr	r1, [r7, #24]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fdf8 	bl	800e3d0 <dhcp_create_msg>
 800d7e0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 800d7e2:	697b      	ldr	r3, [r7, #20]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d066      	beq.n	800d8b6 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d7e8:	697b      	ldr	r3, [r7, #20]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 800d7ee:	89b8      	ldrh	r0, [r7, #12]
 800d7f0:	693b      	ldr	r3, [r7, #16]
 800d7f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d7f6:	2302      	movs	r3, #2
 800d7f8:	2239      	movs	r2, #57	; 0x39
 800d7fa:	f000 f949 	bl	800da90 <dhcp_option>
 800d7fe:	4603      	mov	r3, r0
 800d800:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 800d802:	89b8      	ldrh	r0, [r7, #12]
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	33f0      	adds	r3, #240	; 0xf0
 800d808:	f44f 7210 	mov.w	r2, #576	; 0x240
 800d80c:	4619      	mov	r1, r3
 800d80e:	f000 f999 	bl	800db44 <dhcp_option_short>
 800d812:	4603      	mov	r3, r0
 800d814:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 800d816:	89b8      	ldrh	r0, [r7, #12]
 800d818:	693b      	ldr	r3, [r7, #16]
 800d81a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d81e:	2304      	movs	r3, #4
 800d820:	2232      	movs	r2, #50	; 0x32
 800d822:	f000 f935 	bl	800da90 <dhcp_option>
 800d826:	4603      	mov	r3, r0
 800d828:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 800d82a:	89bc      	ldrh	r4, [r7, #12]
 800d82c:	693b      	ldr	r3, [r7, #16]
 800d82e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d832:	69bb      	ldr	r3, [r7, #24]
 800d834:	69db      	ldr	r3, [r3, #28]
 800d836:	4618      	mov	r0, r3
 800d838:	f7f5 ffcf 	bl	80037da <lwip_htonl>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	4629      	mov	r1, r5
 800d842:	4620      	mov	r0, r4
 800d844:	f000 f9b0 	bl	800dba8 <dhcp_option_long>
 800d848:	4603      	mov	r3, r0
 800d84a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 800d84c:	89b8      	ldrh	r0, [r7, #12]
 800d84e:	693b      	ldr	r3, [r7, #16]
 800d850:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d854:	2304      	movs	r3, #4
 800d856:	2237      	movs	r2, #55	; 0x37
 800d858:	f000 f91a 	bl	800da90 <dhcp_option>
 800d85c:	4603      	mov	r3, r0
 800d85e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d860:	2300      	movs	r3, #0
 800d862:	77bb      	strb	r3, [r7, #30]
 800d864:	e00e      	b.n	800d884 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 800d866:	89b8      	ldrh	r0, [r7, #12]
 800d868:	693b      	ldr	r3, [r7, #16]
 800d86a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d86e:	7fbb      	ldrb	r3, [r7, #30]
 800d870:	4a29      	ldr	r2, [pc, #164]	; (800d918 <dhcp_reboot+0x15c>)
 800d872:	5cd3      	ldrb	r3, [r2, r3]
 800d874:	461a      	mov	r2, r3
 800d876:	f000 f93f 	bl	800daf8 <dhcp_option_byte>
 800d87a:	4603      	mov	r3, r0
 800d87c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 800d87e:	7fbb      	ldrb	r3, [r7, #30]
 800d880:	3301      	adds	r3, #1
 800d882:	77bb      	strb	r3, [r7, #30]
 800d884:	7fbb      	ldrb	r3, [r7, #30]
 800d886:	2b03      	cmp	r3, #3
 800d888:	d9ed      	bls.n	800d866 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d88a:	89b8      	ldrh	r0, [r7, #12]
 800d88c:	693b      	ldr	r3, [r7, #16]
 800d88e:	33f0      	adds	r3, #240	; 0xf0
 800d890:	697a      	ldr	r2, [r7, #20]
 800d892:	4619      	mov	r1, r3
 800d894:	f000 fe72 	bl	800e57c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800d898:	4b20      	ldr	r3, [pc, #128]	; (800d91c <dhcp_reboot+0x160>)
 800d89a:	6818      	ldr	r0, [r3, #0]
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	2343      	movs	r3, #67	; 0x43
 800d8a2:	4a1f      	ldr	r2, [pc, #124]	; (800d920 <dhcp_reboot+0x164>)
 800d8a4:	6979      	ldr	r1, [r7, #20]
 800d8a6:	f7fe fcd1 	bl	800c24c <udp_sendto_if>
 800d8aa:	4603      	mov	r3, r0
 800d8ac:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 800d8ae:	6978      	ldr	r0, [r7, #20]
 800d8b0:	f7f7 fd8e 	bl	80053d0 <pbuf_free>
 800d8b4:	e001      	b.n	800d8ba <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 800d8b6:	23ff      	movs	r3, #255	; 0xff
 800d8b8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 800d8ba:	69bb      	ldr	r3, [r7, #24]
 800d8bc:	799b      	ldrb	r3, [r3, #6]
 800d8be:	2bff      	cmp	r3, #255	; 0xff
 800d8c0:	d005      	beq.n	800d8ce <dhcp_reboot+0x112>
    dhcp->tries++;
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	799b      	ldrb	r3, [r3, #6]
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	b2da      	uxtb	r2, r3
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 800d8ce:	69bb      	ldr	r3, [r7, #24]
 800d8d0:	799b      	ldrb	r3, [r3, #6]
 800d8d2:	2b09      	cmp	r3, #9
 800d8d4:	d80a      	bhi.n	800d8ec <dhcp_reboot+0x130>
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	799b      	ldrb	r3, [r3, #6]
 800d8da:	b29b      	uxth	r3, r3
 800d8dc:	461a      	mov	r2, r3
 800d8de:	0152      	lsls	r2, r2, #5
 800d8e0:	1ad2      	subs	r2, r2, r3
 800d8e2:	0092      	lsls	r2, r2, #2
 800d8e4:	4413      	add	r3, r2
 800d8e6:	00db      	lsls	r3, r3, #3
 800d8e8:	b29b      	uxth	r3, r3
 800d8ea:	e001      	b.n	800d8f0 <dhcp_reboot+0x134>
 800d8ec:	f242 7310 	movw	r3, #10000	; 0x2710
 800d8f0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 800d8f2:	89fb      	ldrh	r3, [r7, #14]
 800d8f4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 800d8f8:	4a0a      	ldr	r2, [pc, #40]	; (800d924 <dhcp_reboot+0x168>)
 800d8fa:	fb82 1203 	smull	r1, r2, r2, r3
 800d8fe:	1152      	asrs	r2, r2, #5
 800d900:	17db      	asrs	r3, r3, #31
 800d902:	1ad3      	subs	r3, r2, r3
 800d904:	b29a      	uxth	r2, r3
 800d906:	69bb      	ldr	r3, [r7, #24]
 800d908:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 800d90a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800d90e:	4618      	mov	r0, r3
 800d910:	3720      	adds	r7, #32
 800d912:	46bd      	mov	sp, r7
 800d914:	bdb0      	pop	{r4, r5, r7, pc}
 800d916:	bf00      	nop
 800d918:	20000014 	.word	0x20000014
 800d91c:	200005b0 	.word	0x200005b0
 800d920:	08014a18 	.word	0x08014a18
 800d924:	10624dd3 	.word	0x10624dd3

0800d928 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 800d928:	b5b0      	push	{r4, r5, r7, lr}
 800d92a:	b08a      	sub	sp, #40	; 0x28
 800d92c:	af02      	add	r7, sp, #8
 800d92e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d934:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 800d936:	69fb      	ldr	r3, [r7, #28]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 8084 	beq.w	800da46 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	795b      	ldrb	r3, [r3, #5]
 800d942:	2b00      	cmp	r3, #0
 800d944:	f000 8081 	beq.w	800da4a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	699b      	ldr	r3, [r3, #24]
 800d94c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 800d94e:	69fb      	ldr	r3, [r7, #28]
 800d950:	2200      	movs	r2, #0
 800d952:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	2200      	movs	r2, #0
 800d958:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 800d95a:	69fb      	ldr	r3, [r7, #28]
 800d95c:	2200      	movs	r2, #0
 800d95e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	2200      	movs	r2, #0
 800d964:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 800d966:	69fb      	ldr	r3, [r7, #28]
 800d968:	2200      	movs	r2, #0
 800d96a:	631a      	str	r2, [r3, #48]	; 0x30
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	62da      	str	r2, [r3, #44]	; 0x2c
 800d974:	69fb      	ldr	r3, [r7, #28]
 800d976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 800d97c:	69fb      	ldr	r3, [r7, #28]
 800d97e:	2200      	movs	r2, #0
 800d980:	829a      	strh	r2, [r3, #20]
 800d982:	69fb      	ldr	r3, [r7, #28]
 800d984:	8a9a      	ldrh	r2, [r3, #20]
 800d986:	69fb      	ldr	r3, [r7, #28]
 800d988:	825a      	strh	r2, [r3, #18]
 800d98a:	69fb      	ldr	r3, [r7, #28]
 800d98c:	8a5a      	ldrh	r2, [r3, #18]
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	821a      	strh	r2, [r3, #16]
 800d992:	69fb      	ldr	r3, [r7, #28]
 800d994:	8a1a      	ldrh	r2, [r3, #16]
 800d996:	69fb      	ldr	r3, [r7, #28]
 800d998:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fe1c 	bl	800e5d8 <dhcp_supplied_address>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d03b      	beq.n	800da1e <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 800d9a6:	f107 030e 	add.w	r3, r7, #14
 800d9aa:	2207      	movs	r2, #7
 800d9ac:	69f9      	ldr	r1, [r7, #28]
 800d9ae:	6878      	ldr	r0, [r7, #4]
 800d9b0:	f000 fd0e 	bl	800e3d0 <dhcp_create_msg>
 800d9b4:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d030      	beq.n	800da1e <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 800d9bc:	69bb      	ldr	r3, [r7, #24]
 800d9be:	685b      	ldr	r3, [r3, #4]
 800d9c0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 800d9c2:	89f8      	ldrh	r0, [r7, #14]
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800d9ca:	2304      	movs	r3, #4
 800d9cc:	2236      	movs	r2, #54	; 0x36
 800d9ce:	f000 f85f 	bl	800da90 <dhcp_option>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 800d9d6:	89fc      	ldrh	r4, [r7, #14]
 800d9d8:	697b      	ldr	r3, [r7, #20]
 800d9da:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 800d9de:	693b      	ldr	r3, [r7, #16]
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7f5 fefa 	bl	80037da <lwip_htonl>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	4620      	mov	r0, r4
 800d9ee:	f000 f8db 	bl	800dba8 <dhcp_option_long>
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 800d9f6:	89f8      	ldrh	r0, [r7, #14]
 800d9f8:	697b      	ldr	r3, [r7, #20]
 800d9fa:	33f0      	adds	r3, #240	; 0xf0
 800d9fc:	69ba      	ldr	r2, [r7, #24]
 800d9fe:	4619      	mov	r1, r3
 800da00:	f000 fdbc 	bl	800e57c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 800da04:	4b13      	ldr	r3, [pc, #76]	; (800da54 <dhcp_release_and_stop+0x12c>)
 800da06:	6818      	ldr	r0, [r3, #0]
 800da08:	f107 0210 	add.w	r2, r7, #16
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	9300      	str	r3, [sp, #0]
 800da10:	2343      	movs	r3, #67	; 0x43
 800da12:	69b9      	ldr	r1, [r7, #24]
 800da14:	f7fe fc1a 	bl	800c24c <udp_sendto_if>
      pbuf_free(p_out);
 800da18:	69b8      	ldr	r0, [r7, #24]
 800da1a:	f7f7 fcd9 	bl	80053d0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 800da1e:	4b0e      	ldr	r3, [pc, #56]	; (800da58 <dhcp_release_and_stop+0x130>)
 800da20:	4a0d      	ldr	r2, [pc, #52]	; (800da58 <dhcp_release_and_stop+0x130>)
 800da22:	490d      	ldr	r1, [pc, #52]	; (800da58 <dhcp_release_and_stop+0x130>)
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7f6 fff7 	bl	8004a18 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 800da2a:	2100      	movs	r1, #0
 800da2c:	69f8      	ldr	r0, [r7, #28]
 800da2e:	f000 f815 	bl	800da5c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 800da32:	69fb      	ldr	r3, [r7, #28]
 800da34:	791b      	ldrb	r3, [r3, #4]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d008      	beq.n	800da4c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 800da3a:	f7fe ff53 	bl	800c8e4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 800da3e:	69fb      	ldr	r3, [r7, #28]
 800da40:	2200      	movs	r2, #0
 800da42:	711a      	strb	r2, [r3, #4]
 800da44:	e002      	b.n	800da4c <dhcp_release_and_stop+0x124>
    return;
 800da46:	bf00      	nop
 800da48:	e000      	b.n	800da4c <dhcp_release_and_stop+0x124>
    return;
 800da4a:	bf00      	nop
  }
}
 800da4c:	3720      	adds	r7, #32
 800da4e:	46bd      	mov	sp, r7
 800da50:	bdb0      	pop	{r4, r5, r7, pc}
 800da52:	bf00      	nop
 800da54:	200005b0 	.word	0x200005b0
 800da58:	08014a14 	.word	0x08014a14

0800da5c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 800da5c:	b480      	push	{r7}
 800da5e:	b083      	sub	sp, #12
 800da60:	af00      	add	r7, sp, #0
 800da62:	6078      	str	r0, [r7, #4]
 800da64:	460b      	mov	r3, r1
 800da66:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	795b      	ldrb	r3, [r3, #5]
 800da6c:	78fa      	ldrb	r2, [r7, #3]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d008      	beq.n	800da84 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	78fa      	ldrb	r2, [r7, #3]
 800da76:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2200      	movs	r2, #0
 800da7c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	811a      	strh	r2, [r3, #8]
  }
}
 800da84:	bf00      	nop
 800da86:	370c      	adds	r7, #12
 800da88:	46bd      	mov	sp, r7
 800da8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8e:	4770      	bx	lr

0800da90 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 800da90:	b580      	push	{r7, lr}
 800da92:	b082      	sub	sp, #8
 800da94:	af00      	add	r7, sp, #0
 800da96:	6039      	str	r1, [r7, #0]
 800da98:	4611      	mov	r1, r2
 800da9a:	461a      	mov	r2, r3
 800da9c:	4603      	mov	r3, r0
 800da9e:	80fb      	strh	r3, [r7, #6]
 800daa0:	460b      	mov	r3, r1
 800daa2:	717b      	strb	r3, [r7, #5]
 800daa4:	4613      	mov	r3, r2
 800daa6:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 800daa8:	88fa      	ldrh	r2, [r7, #6]
 800daaa:	793b      	ldrb	r3, [r7, #4]
 800daac:	4413      	add	r3, r2
 800daae:	3302      	adds	r3, #2
 800dab0:	2b44      	cmp	r3, #68	; 0x44
 800dab2:	d906      	bls.n	800dac2 <dhcp_option+0x32>
 800dab4:	4b0d      	ldr	r3, [pc, #52]	; (800daec <dhcp_option+0x5c>)
 800dab6:	f240 529a 	movw	r2, #1434	; 0x59a
 800daba:	490d      	ldr	r1, [pc, #52]	; (800daf0 <dhcp_option+0x60>)
 800dabc:	480d      	ldr	r0, [pc, #52]	; (800daf4 <dhcp_option+0x64>)
 800dabe:	f003 f8d3 	bl	8010c68 <iprintf>
  options[options_out_len++] = option_type;
 800dac2:	88fb      	ldrh	r3, [r7, #6]
 800dac4:	1c5a      	adds	r2, r3, #1
 800dac6:	80fa      	strh	r2, [r7, #6]
 800dac8:	461a      	mov	r2, r3
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	4413      	add	r3, r2
 800dace:	797a      	ldrb	r2, [r7, #5]
 800dad0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 800dad2:	88fb      	ldrh	r3, [r7, #6]
 800dad4:	1c5a      	adds	r2, r3, #1
 800dad6:	80fa      	strh	r2, [r7, #6]
 800dad8:	461a      	mov	r2, r3
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	4413      	add	r3, r2
 800dade:	793a      	ldrb	r2, [r7, #4]
 800dae0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800dae2:	88fb      	ldrh	r3, [r7, #6]
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3708      	adds	r7, #8
 800dae8:	46bd      	mov	sp, r7
 800daea:	bd80      	pop	{r7, pc}
 800daec:	08013ea8 	.word	0x08013ea8
 800daf0:	0801403c 	.word	0x0801403c
 800daf4:	08013f08 	.word	0x08013f08

0800daf8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	4603      	mov	r3, r0
 800db00:	6039      	str	r1, [r7, #0]
 800db02:	80fb      	strh	r3, [r7, #6]
 800db04:	4613      	mov	r3, r2
 800db06:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 800db08:	88fb      	ldrh	r3, [r7, #6]
 800db0a:	2b43      	cmp	r3, #67	; 0x43
 800db0c:	d906      	bls.n	800db1c <dhcp_option_byte+0x24>
 800db0e:	4b0a      	ldr	r3, [pc, #40]	; (800db38 <dhcp_option_byte+0x40>)
 800db10:	f240 52a6 	movw	r2, #1446	; 0x5a6
 800db14:	4909      	ldr	r1, [pc, #36]	; (800db3c <dhcp_option_byte+0x44>)
 800db16:	480a      	ldr	r0, [pc, #40]	; (800db40 <dhcp_option_byte+0x48>)
 800db18:	f003 f8a6 	bl	8010c68 <iprintf>
  options[options_out_len++] = value;
 800db1c:	88fb      	ldrh	r3, [r7, #6]
 800db1e:	1c5a      	adds	r2, r3, #1
 800db20:	80fa      	strh	r2, [r7, #6]
 800db22:	461a      	mov	r2, r3
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	4413      	add	r3, r2
 800db28:	797a      	ldrb	r2, [r7, #5]
 800db2a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800db2c:	88fb      	ldrh	r3, [r7, #6]
}
 800db2e:	4618      	mov	r0, r3
 800db30:	3708      	adds	r7, #8
 800db32:	46bd      	mov	sp, r7
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	08013ea8 	.word	0x08013ea8
 800db3c:	08014080 	.word	0x08014080
 800db40:	08013f08 	.word	0x08013f08

0800db44 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 800db44:	b580      	push	{r7, lr}
 800db46:	b082      	sub	sp, #8
 800db48:	af00      	add	r7, sp, #0
 800db4a:	4603      	mov	r3, r0
 800db4c:	6039      	str	r1, [r7, #0]
 800db4e:	80fb      	strh	r3, [r7, #6]
 800db50:	4613      	mov	r3, r2
 800db52:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 800db54:	88fb      	ldrh	r3, [r7, #6]
 800db56:	3302      	adds	r3, #2
 800db58:	2b44      	cmp	r3, #68	; 0x44
 800db5a:	d906      	bls.n	800db6a <dhcp_option_short+0x26>
 800db5c:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <dhcp_option_short+0x58>)
 800db5e:	f240 52ae 	movw	r2, #1454	; 0x5ae
 800db62:	490f      	ldr	r1, [pc, #60]	; (800dba0 <dhcp_option_short+0x5c>)
 800db64:	480f      	ldr	r0, [pc, #60]	; (800dba4 <dhcp_option_short+0x60>)
 800db66:	f003 f87f 	bl	8010c68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 800db6a:	88bb      	ldrh	r3, [r7, #4]
 800db6c:	0a1b      	lsrs	r3, r3, #8
 800db6e:	b29a      	uxth	r2, r3
 800db70:	88fb      	ldrh	r3, [r7, #6]
 800db72:	1c59      	adds	r1, r3, #1
 800db74:	80f9      	strh	r1, [r7, #6]
 800db76:	4619      	mov	r1, r3
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	440b      	add	r3, r1
 800db7c:	b2d2      	uxtb	r2, r2
 800db7e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 800db80:	88fb      	ldrh	r3, [r7, #6]
 800db82:	1c5a      	adds	r2, r3, #1
 800db84:	80fa      	strh	r2, [r7, #6]
 800db86:	461a      	mov	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	4413      	add	r3, r2
 800db8c:	88ba      	ldrh	r2, [r7, #4]
 800db8e:	b2d2      	uxtb	r2, r2
 800db90:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800db92:	88fb      	ldrh	r3, [r7, #6]
}
 800db94:	4618      	mov	r0, r3
 800db96:	3708      	adds	r7, #8
 800db98:	46bd      	mov	sp, r7
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	08013ea8 	.word	0x08013ea8
 800dba0:	080140b8 	.word	0x080140b8
 800dba4:	08013f08 	.word	0x08013f08

0800dba8 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b084      	sub	sp, #16
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
 800dbb4:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 800dbb6:	89fb      	ldrh	r3, [r7, #14]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	2b44      	cmp	r3, #68	; 0x44
 800dbbc:	d906      	bls.n	800dbcc <dhcp_option_long+0x24>
 800dbbe:	4b19      	ldr	r3, [pc, #100]	; (800dc24 <dhcp_option_long+0x7c>)
 800dbc0:	f240 52b7 	movw	r2, #1463	; 0x5b7
 800dbc4:	4918      	ldr	r1, [pc, #96]	; (800dc28 <dhcp_option_long+0x80>)
 800dbc6:	4819      	ldr	r0, [pc, #100]	; (800dc2c <dhcp_option_long+0x84>)
 800dbc8:	f003 f84e 	bl	8010c68 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	0e1a      	lsrs	r2, r3, #24
 800dbd0:	89fb      	ldrh	r3, [r7, #14]
 800dbd2:	1c59      	adds	r1, r3, #1
 800dbd4:	81f9      	strh	r1, [r7, #14]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	440b      	add	r3, r1
 800dbdc:	b2d2      	uxtb	r2, r2
 800dbde:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	0c1a      	lsrs	r2, r3, #16
 800dbe4:	89fb      	ldrh	r3, [r7, #14]
 800dbe6:	1c59      	adds	r1, r3, #1
 800dbe8:	81f9      	strh	r1, [r7, #14]
 800dbea:	4619      	mov	r1, r3
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	440b      	add	r3, r1
 800dbf0:	b2d2      	uxtb	r2, r2
 800dbf2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	0a1a      	lsrs	r2, r3, #8
 800dbf8:	89fb      	ldrh	r3, [r7, #14]
 800dbfa:	1c59      	adds	r1, r3, #1
 800dbfc:	81f9      	strh	r1, [r7, #14]
 800dbfe:	4619      	mov	r1, r3
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	440b      	add	r3, r1
 800dc04:	b2d2      	uxtb	r2, r2
 800dc06:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 800dc08:	89fb      	ldrh	r3, [r7, #14]
 800dc0a:	1c5a      	adds	r2, r3, #1
 800dc0c:	81fa      	strh	r2, [r7, #14]
 800dc0e:	461a      	mov	r2, r3
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	4413      	add	r3, r2
 800dc14:	687a      	ldr	r2, [r7, #4]
 800dc16:	b2d2      	uxtb	r2, r2
 800dc18:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 800dc1a:	89fb      	ldrh	r3, [r7, #14]
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	08013ea8 	.word	0x08013ea8
 800dc28:	080140f4 	.word	0x080140f4
 800dc2c:	08013f08 	.word	0x08013f08

0800dc30 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b090      	sub	sp, #64	; 0x40
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 800dc3e:	2300      	movs	r3, #0
 800dc40:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 800dc42:	220a      	movs	r2, #10
 800dc44:	2100      	movs	r1, #0
 800dc46:	48ba      	ldr	r0, [pc, #744]	; (800df30 <dhcp_parse_reply+0x300>)
 800dc48:	f003 f806 	bl	8010c58 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	895b      	ldrh	r3, [r3, #10]
 800dc50:	2b2b      	cmp	r3, #43	; 0x2b
 800dc52:	d802      	bhi.n	800dc5a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 800dc54:	f06f 0301 	mvn.w	r3, #1
 800dc58:	e2e9      	b.n	800e22e <dhcp_parse_reply+0x5fe>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	685b      	ldr	r3, [r3, #4]
 800dc5e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 800dc60:	23f0      	movs	r3, #240	; 0xf0
 800dc62:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	891b      	ldrh	r3, [r3, #8]
 800dc68:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800dc6e:	e00c      	b.n	800dc8a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 800dc70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc72:	895b      	ldrh	r3, [r3, #10]
 800dc74:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dc76:	1ad3      	subs	r3, r2, r3
 800dc78:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 800dc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc7c:	895b      	ldrh	r3, [r3, #10]
 800dc7e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800dc80:	1ad3      	subs	r3, r2, r3
 800dc82:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 800dc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 800dc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d004      	beq.n	800dc9a <dhcp_parse_reply+0x6a>
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	895b      	ldrh	r3, [r3, #10]
 800dc94:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800dc96:	429a      	cmp	r2, r3
 800dc98:	d2ea      	bcs.n	800dc70 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 800dc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d102      	bne.n	800dca6 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 800dca0:	f06f 0301 	mvn.w	r3, #1
 800dca4:	e2c3      	b.n	800e22e <dhcp_parse_reply+0x5fe>
  }
  offset = options_idx;
 800dca6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800dca8:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 800dcaa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800dcac:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 800dcae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb0:	685b      	ldr	r3, [r3, #4]
 800dcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800dcb4:	e267      	b.n	800e186 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 800dcb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcb8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcba:	4413      	add	r3, r2
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 800dcc6:	f04f 33ff 	mov.w	r3, #4294967295
 800dcca:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 800dccc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcce:	3302      	adds	r3, #2
 800dcd0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 800dcd2:	8bfa      	ldrh	r2, [r7, #30]
 800dcd4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcd6:	429a      	cmp	r2, r3
 800dcd8:	d202      	bcs.n	800dce0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 800dcda:	f06f 0301 	mvn.w	r3, #1
 800dcde:	e2a6      	b.n	800e22e <dhcp_parse_reply+0x5fe>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 800dce0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dce2:	3301      	adds	r3, #1
 800dce4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce6:	8952      	ldrh	r2, [r2, #10]
 800dce8:	4293      	cmp	r3, r2
 800dcea:	da07      	bge.n	800dcfc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 800dcec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dcee:	3301      	adds	r3, #1
 800dcf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800dcf2:	4413      	add	r3, r2
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800dcfa:	e00b      	b.n	800dd14 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 800dcfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d004      	beq.n	800dd0e <dhcp_parse_reply+0xde>
 800dd04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	e000      	b.n	800dd10 <dhcp_parse_reply+0xe0>
 800dd0e:	2300      	movs	r3, #0
 800dd10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 800dd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 800dd1c:	7dfb      	ldrb	r3, [r7, #23]
 800dd1e:	2b3b      	cmp	r3, #59	; 0x3b
 800dd20:	f200 815a 	bhi.w	800dfd8 <dhcp_parse_reply+0x3a8>
 800dd24:	a201      	add	r2, pc, #4	; (adr r2, 800dd2c <dhcp_parse_reply+0xfc>)
 800dd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd2a:	bf00      	nop
 800dd2c:	0800de1d 	.word	0x0800de1d
 800dd30:	0800de2d 	.word	0x0800de2d
 800dd34:	0800dfd9 	.word	0x0800dfd9
 800dd38:	0800de4f 	.word	0x0800de4f
 800dd3c:	0800dfd9 	.word	0x0800dfd9
 800dd40:	0800dfd9 	.word	0x0800dfd9
 800dd44:	0800de7b 	.word	0x0800de7b
 800dd48:	0800dfd9 	.word	0x0800dfd9
 800dd4c:	0800dfd9 	.word	0x0800dfd9
 800dd50:	0800dfd9 	.word	0x0800dfd9
 800dd54:	0800dfd9 	.word	0x0800dfd9
 800dd58:	0800dfd9 	.word	0x0800dfd9
 800dd5c:	0800dfd9 	.word	0x0800dfd9
 800dd60:	0800dfd9 	.word	0x0800dfd9
 800dd64:	0800dfd9 	.word	0x0800dfd9
 800dd68:	0800dfd9 	.word	0x0800dfd9
 800dd6c:	0800dfd9 	.word	0x0800dfd9
 800dd70:	0800dfd9 	.word	0x0800dfd9
 800dd74:	0800dfd9 	.word	0x0800dfd9
 800dd78:	0800dfd9 	.word	0x0800dfd9
 800dd7c:	0800dfd9 	.word	0x0800dfd9
 800dd80:	0800dfd9 	.word	0x0800dfd9
 800dd84:	0800dfd9 	.word	0x0800dfd9
 800dd88:	0800dfd9 	.word	0x0800dfd9
 800dd8c:	0800dfd9 	.word	0x0800dfd9
 800dd90:	0800dfd9 	.word	0x0800dfd9
 800dd94:	0800dfd9 	.word	0x0800dfd9
 800dd98:	0800dfd9 	.word	0x0800dfd9
 800dd9c:	0800dfd9 	.word	0x0800dfd9
 800dda0:	0800dfd9 	.word	0x0800dfd9
 800dda4:	0800dfd9 	.word	0x0800dfd9
 800dda8:	0800dfd9 	.word	0x0800dfd9
 800ddac:	0800dfd9 	.word	0x0800dfd9
 800ddb0:	0800dfd9 	.word	0x0800dfd9
 800ddb4:	0800dfd9 	.word	0x0800dfd9
 800ddb8:	0800dfd9 	.word	0x0800dfd9
 800ddbc:	0800dfd9 	.word	0x0800dfd9
 800ddc0:	0800dfd9 	.word	0x0800dfd9
 800ddc4:	0800dfd9 	.word	0x0800dfd9
 800ddc8:	0800dfd9 	.word	0x0800dfd9
 800ddcc:	0800dfd9 	.word	0x0800dfd9
 800ddd0:	0800dfd9 	.word	0x0800dfd9
 800ddd4:	0800dfd9 	.word	0x0800dfd9
 800ddd8:	0800dfd9 	.word	0x0800dfd9
 800dddc:	0800dfd9 	.word	0x0800dfd9
 800dde0:	0800dfd9 	.word	0x0800dfd9
 800dde4:	0800dfd9 	.word	0x0800dfd9
 800dde8:	0800dfd9 	.word	0x0800dfd9
 800ddec:	0800dfd9 	.word	0x0800dfd9
 800ddf0:	0800dfd9 	.word	0x0800dfd9
 800ddf4:	0800dfd9 	.word	0x0800dfd9
 800ddf8:	0800ded1 	.word	0x0800ded1
 800ddfc:	0800def3 	.word	0x0800def3
 800de00:	0800df51 	.word	0x0800df51
 800de04:	0800df73 	.word	0x0800df73
 800de08:	0800dfd9 	.word	0x0800dfd9
 800de0c:	0800dfd9 	.word	0x0800dfd9
 800de10:	0800dfd9 	.word	0x0800dfd9
 800de14:	0800df95 	.word	0x0800df95
 800de18:	0800dfb7 	.word	0x0800dfb7
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 800de1c:	2300      	movs	r3, #0
 800de1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de26:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 800de2a:	e0d9      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800de2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de30:	2b04      	cmp	r3, #4
 800de32:	d009      	beq.n	800de48 <dhcp_parse_reply+0x218>
 800de34:	4b3f      	ldr	r3, [pc, #252]	; (800df34 <dhcp_parse_reply+0x304>)
 800de36:	f240 622e 	movw	r2, #1582	; 0x62e
 800de3a:	493f      	ldr	r1, [pc, #252]	; (800df38 <dhcp_parse_reply+0x308>)
 800de3c:	483f      	ldr	r0, [pc, #252]	; (800df3c <dhcp_parse_reply+0x30c>)
 800de3e:	f002 ff13 	bl	8010c68 <iprintf>
 800de42:	f06f 0305 	mvn.w	r3, #5
 800de46:	e1f2      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 800de48:	2306      	movs	r3, #6
 800de4a:	623b      	str	r3, [r7, #32]
        break;
 800de4c:	e0c8      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 800de4e:	2304      	movs	r3, #4
 800de50:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800de54:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800de58:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800de5c:	429a      	cmp	r2, r3
 800de5e:	d209      	bcs.n	800de74 <dhcp_parse_reply+0x244>
 800de60:	4b34      	ldr	r3, [pc, #208]	; (800df34 <dhcp_parse_reply+0x304>)
 800de62:	f240 6233 	movw	r2, #1587	; 0x633
 800de66:	4936      	ldr	r1, [pc, #216]	; (800df40 <dhcp_parse_reply+0x310>)
 800de68:	4834      	ldr	r0, [pc, #208]	; (800df3c <dhcp_parse_reply+0x30c>)
 800de6a:	f002 fefd 	bl	8010c68 <iprintf>
 800de6e:	f06f 0305 	mvn.w	r3, #5
 800de72:	e1dc      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 800de74:	2307      	movs	r3, #7
 800de76:	623b      	str	r3, [r7, #32]
        break;
 800de78:	e0b2      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 800de7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de7e:	f003 0303 	and.w	r3, r3, #3
 800de82:	b2db      	uxtb	r3, r3
 800de84:	2b00      	cmp	r3, #0
 800de86:	d009      	beq.n	800de9c <dhcp_parse_reply+0x26c>
 800de88:	4b2a      	ldr	r3, [pc, #168]	; (800df34 <dhcp_parse_reply+0x304>)
 800de8a:	f240 6239 	movw	r2, #1593	; 0x639
 800de8e:	492d      	ldr	r1, [pc, #180]	; (800df44 <dhcp_parse_reply+0x314>)
 800de90:	482a      	ldr	r0, [pc, #168]	; (800df3c <dhcp_parse_reply+0x30c>)
 800de92:	f002 fee9 	bl	8010c68 <iprintf>
 800de96:	f06f 0305 	mvn.w	r3, #5
 800de9a:	e1c8      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 800de9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dea0:	2b08      	cmp	r3, #8
 800dea2:	bf28      	it	cs
 800dea4:	2308      	movcs	r3, #8
 800dea6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 800deaa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800deae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d209      	bcs.n	800deca <dhcp_parse_reply+0x29a>
 800deb6:	4b1f      	ldr	r3, [pc, #124]	; (800df34 <dhcp_parse_reply+0x304>)
 800deb8:	f240 623c 	movw	r2, #1596	; 0x63c
 800debc:	4920      	ldr	r1, [pc, #128]	; (800df40 <dhcp_parse_reply+0x310>)
 800debe:	481f      	ldr	r0, [pc, #124]	; (800df3c <dhcp_parse_reply+0x30c>)
 800dec0:	f002 fed2 	bl	8010c68 <iprintf>
 800dec4:	f06f 0305 	mvn.w	r3, #5
 800dec8:	e1b1      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 800deca:	2308      	movs	r3, #8
 800decc:	623b      	str	r3, [r7, #32]
        break;
 800dece:	e087      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800ded0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ded4:	2b04      	cmp	r3, #4
 800ded6:	d009      	beq.n	800deec <dhcp_parse_reply+0x2bc>
 800ded8:	4b16      	ldr	r3, [pc, #88]	; (800df34 <dhcp_parse_reply+0x304>)
 800deda:	f240 6241 	movw	r2, #1601	; 0x641
 800dede:	4916      	ldr	r1, [pc, #88]	; (800df38 <dhcp_parse_reply+0x308>)
 800dee0:	4816      	ldr	r0, [pc, #88]	; (800df3c <dhcp_parse_reply+0x30c>)
 800dee2:	f002 fec1 	bl	8010c68 <iprintf>
 800dee6:	f06f 0305 	mvn.w	r3, #5
 800deea:	e1a0      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 800deec:	2303      	movs	r3, #3
 800deee:	623b      	str	r3, [r7, #32]
        break;
 800def0:	e076      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800def2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800def6:	2b01      	cmp	r3, #1
 800def8:	d009      	beq.n	800df0e <dhcp_parse_reply+0x2de>
 800defa:	4b0e      	ldr	r3, [pc, #56]	; (800df34 <dhcp_parse_reply+0x304>)
 800defc:	f240 624f 	movw	r2, #1615	; 0x64f
 800df00:	4911      	ldr	r1, [pc, #68]	; (800df48 <dhcp_parse_reply+0x318>)
 800df02:	480e      	ldr	r0, [pc, #56]	; (800df3c <dhcp_parse_reply+0x30c>)
 800df04:	f002 feb0 	bl	8010c68 <iprintf>
 800df08:	f06f 0305 	mvn.w	r3, #5
 800df0c:	e18f      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 800df0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800df10:	2bf0      	cmp	r3, #240	; 0xf0
 800df12:	d009      	beq.n	800df28 <dhcp_parse_reply+0x2f8>
 800df14:	4b07      	ldr	r3, [pc, #28]	; (800df34 <dhcp_parse_reply+0x304>)
 800df16:	f240 6251 	movw	r2, #1617	; 0x651
 800df1a:	490c      	ldr	r1, [pc, #48]	; (800df4c <dhcp_parse_reply+0x31c>)
 800df1c:	4807      	ldr	r0, [pc, #28]	; (800df3c <dhcp_parse_reply+0x30c>)
 800df1e:	f002 fea3 	bl	8010c68 <iprintf>
 800df22:	f06f 0305 	mvn.w	r3, #5
 800df26:	e182      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 800df28:	2300      	movs	r3, #0
 800df2a:	623b      	str	r3, [r7, #32]
        break;
 800df2c:	e058      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
 800df2e:	bf00      	nop
 800df30:	20006e80 	.word	0x20006e80
 800df34:	08013ea8 	.word	0x08013ea8
 800df38:	08014130 	.word	0x08014130
 800df3c:	08013f08 	.word	0x08013f08
 800df40:	0801413c 	.word	0x0801413c
 800df44:	08014150 	.word	0x08014150
 800df48:	08014160 	.word	0x08014160
 800df4c:	0801416c 	.word	0x0801416c
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 800df50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df54:	2b01      	cmp	r3, #1
 800df56:	d009      	beq.n	800df6c <dhcp_parse_reply+0x33c>
 800df58:	4ba5      	ldr	r3, [pc, #660]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800df5a:	f240 6255 	movw	r2, #1621	; 0x655
 800df5e:	49a5      	ldr	r1, [pc, #660]	; (800e1f4 <dhcp_parse_reply+0x5c4>)
 800df60:	48a5      	ldr	r0, [pc, #660]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800df62:	f002 fe81 	bl	8010c68 <iprintf>
 800df66:	f06f 0305 	mvn.w	r3, #5
 800df6a:	e160      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 800df6c:	2301      	movs	r3, #1
 800df6e:	623b      	str	r3, [r7, #32]
        break;
 800df70:	e036      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800df72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df76:	2b04      	cmp	r3, #4
 800df78:	d009      	beq.n	800df8e <dhcp_parse_reply+0x35e>
 800df7a:	4b9d      	ldr	r3, [pc, #628]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800df7c:	f240 6259 	movw	r2, #1625	; 0x659
 800df80:	499e      	ldr	r1, [pc, #632]	; (800e1fc <dhcp_parse_reply+0x5cc>)
 800df82:	489d      	ldr	r0, [pc, #628]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800df84:	f002 fe70 	bl	8010c68 <iprintf>
 800df88:	f06f 0305 	mvn.w	r3, #5
 800df8c:	e14f      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 800df8e:	2302      	movs	r3, #2
 800df90:	623b      	str	r3, [r7, #32]
        break;
 800df92:	e025      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800df94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df98:	2b04      	cmp	r3, #4
 800df9a:	d009      	beq.n	800dfb0 <dhcp_parse_reply+0x380>
 800df9c:	4b94      	ldr	r3, [pc, #592]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800df9e:	f240 625d 	movw	r2, #1629	; 0x65d
 800dfa2:	4996      	ldr	r1, [pc, #600]	; (800e1fc <dhcp_parse_reply+0x5cc>)
 800dfa4:	4894      	ldr	r0, [pc, #592]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800dfa6:	f002 fe5f 	bl	8010c68 <iprintf>
 800dfaa:	f06f 0305 	mvn.w	r3, #5
 800dfae:	e13e      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T1;
 800dfb0:	2304      	movs	r3, #4
 800dfb2:	623b      	str	r3, [r7, #32]
        break;
 800dfb4:	e014      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 800dfb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfba:	2b04      	cmp	r3, #4
 800dfbc:	d009      	beq.n	800dfd2 <dhcp_parse_reply+0x3a2>
 800dfbe:	4b8c      	ldr	r3, [pc, #560]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800dfc0:	f240 6261 	movw	r2, #1633	; 0x661
 800dfc4:	498d      	ldr	r1, [pc, #564]	; (800e1fc <dhcp_parse_reply+0x5cc>)
 800dfc6:	488c      	ldr	r0, [pc, #560]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800dfc8:	f002 fe4e 	bl	8010c68 <iprintf>
 800dfcc:	f06f 0305 	mvn.w	r3, #5
 800dfd0:	e12d      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        decode_idx = DHCP_OPTION_IDX_T2;
 800dfd2:	2305      	movs	r3, #5
 800dfd4:	623b      	str	r3, [r7, #32]
        break;
 800dfd6:	e003      	b.n	800dfe0 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 800dfd8:	2300      	movs	r3, #0
 800dfda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 800dfde:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 800dfe0:	7dfb      	ldrb	r3, [r7, #23]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d103      	bne.n	800dfee <dhcp_parse_reply+0x3be>
      offset++;
 800dfe6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800dfe8:	3301      	adds	r3, #1
 800dfea:	877b      	strh	r3, [r7, #58]	; 0x3a
 800dfec:	e0a1      	b.n	800e132 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 800dfee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800dff0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dff4:	4413      	add	r3, r2
 800dff6:	3302      	adds	r3, #2
 800dff8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dffc:	db02      	blt.n	800e004 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 800dffe:	f06f 0301 	mvn.w	r3, #1
 800e002:	e114      	b.n	800e22e <dhcp_parse_reply+0x5fe>
      }
      offset = (u16_t)(offset + len + 2);
 800e004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e008:	b29a      	uxth	r2, r3
 800e00a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e00c:	4413      	add	r3, r2
 800e00e:	b29b      	uxth	r3, r3
 800e010:	3302      	adds	r3, #2
 800e012:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 800e014:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 808a 	beq.w	800e132 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 800e01e:	2300      	movs	r3, #0
 800e020:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 800e022:	6a3b      	ldr	r3, [r7, #32]
 800e024:	2b00      	cmp	r3, #0
 800e026:	db02      	blt.n	800e02e <dhcp_parse_reply+0x3fe>
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	2b09      	cmp	r3, #9
 800e02c:	dd06      	ble.n	800e03c <dhcp_parse_reply+0x40c>
 800e02e:	4b70      	ldr	r3, [pc, #448]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800e030:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 800e034:	4972      	ldr	r1, [pc, #456]	; (800e200 <dhcp_parse_reply+0x5d0>)
 800e036:	4870      	ldr	r0, [pc, #448]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800e038:	f002 fe16 	bl	8010c68 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 800e03c:	4a71      	ldr	r2, [pc, #452]	; (800e204 <dhcp_parse_reply+0x5d4>)
 800e03e:	6a3b      	ldr	r3, [r7, #32]
 800e040:	4413      	add	r3, r2
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d174      	bne.n	800e132 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 800e048:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e04c:	2b04      	cmp	r3, #4
 800e04e:	bf28      	it	cs
 800e050:	2304      	movcs	r3, #4
 800e052:	b2db      	uxtb	r3, r3
 800e054:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 800e056:	8bfb      	ldrh	r3, [r7, #30]
 800e058:	8aba      	ldrh	r2, [r7, #20]
 800e05a:	f107 0108 	add.w	r1, r7, #8
 800e05e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e060:	f7f7 fbb0 	bl	80057c4 <pbuf_copy_partial>
 800e064:	4603      	mov	r3, r0
 800e066:	461a      	mov	r2, r3
 800e068:	8abb      	ldrh	r3, [r7, #20]
 800e06a:	4293      	cmp	r3, r2
 800e06c:	d002      	beq.n	800e074 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 800e06e:	f06f 0301 	mvn.w	r3, #1
 800e072:	e0dc      	b.n	800e22e <dhcp_parse_reply+0x5fe>
          }
          if (decode_len > 4) {
 800e074:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e078:	2b04      	cmp	r3, #4
 800e07a:	d933      	bls.n	800e0e4 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 800e07c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e080:	f003 0303 	and.w	r3, r3, #3
 800e084:	b2db      	uxtb	r3, r3
 800e086:	2b00      	cmp	r3, #0
 800e088:	d009      	beq.n	800e09e <dhcp_parse_reply+0x46e>
 800e08a:	4b59      	ldr	r3, [pc, #356]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800e08c:	f240 6281 	movw	r2, #1665	; 0x681
 800e090:	495d      	ldr	r1, [pc, #372]	; (800e208 <dhcp_parse_reply+0x5d8>)
 800e092:	4859      	ldr	r0, [pc, #356]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800e094:	f002 fde8 	bl	8010c68 <iprintf>
 800e098:	f06f 0305 	mvn.w	r3, #5
 800e09c:	e0c7      	b.n	800e22e <dhcp_parse_reply+0x5fe>
            dhcp_got_option(dhcp, decode_idx);
 800e09e:	4a59      	ldr	r2, [pc, #356]	; (800e204 <dhcp_parse_reply+0x5d4>)
 800e0a0:	6a3b      	ldr	r3, [r7, #32]
 800e0a2:	4413      	add	r3, r2
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	f7f5 fb95 	bl	80037da <lwip_htonl>
 800e0b0:	4601      	mov	r1, r0
 800e0b2:	4a56      	ldr	r2, [pc, #344]	; (800e20c <dhcp_parse_reply+0x5dc>)
 800e0b4:	6a3b      	ldr	r3, [r7, #32]
 800e0b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 800e0ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0be:	3b04      	subs	r3, #4
 800e0c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 800e0c4:	8bfb      	ldrh	r3, [r7, #30]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 800e0ca:	8a7a      	ldrh	r2, [r7, #18]
 800e0cc:	8bfb      	ldrh	r3, [r7, #30]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d202      	bcs.n	800e0d8 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 800e0d2:	f06f 0301 	mvn.w	r3, #1
 800e0d6:	e0aa      	b.n	800e22e <dhcp_parse_reply+0x5fe>
            }
            val_offset = next_val_offset;
 800e0d8:	8a7b      	ldrh	r3, [r7, #18]
 800e0da:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 800e0e2:	e79e      	b.n	800e022 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 800e0e4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0e8:	2b04      	cmp	r3, #4
 800e0ea:	d106      	bne.n	800e0fa <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 800e0ec:	68bb      	ldr	r3, [r7, #8]
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7f5 fb73 	bl	80037da <lwip_htonl>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	60bb      	str	r3, [r7, #8]
 800e0f8:	e011      	b.n	800e11e <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 800e0fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e0fe:	2b01      	cmp	r3, #1
 800e100:	d009      	beq.n	800e116 <dhcp_parse_reply+0x4e6>
 800e102:	4b3b      	ldr	r3, [pc, #236]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800e104:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 800e108:	4941      	ldr	r1, [pc, #260]	; (800e210 <dhcp_parse_reply+0x5e0>)
 800e10a:	483b      	ldr	r0, [pc, #236]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800e10c:	f002 fdac 	bl	8010c68 <iprintf>
 800e110:	f06f 0305 	mvn.w	r3, #5
 800e114:	e08b      	b.n	800e22e <dhcp_parse_reply+0x5fe>
            value = ((u8_t *)&value)[0];
 800e116:	f107 0308 	add.w	r3, r7, #8
 800e11a:	781b      	ldrb	r3, [r3, #0]
 800e11c:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 800e11e:	4a39      	ldr	r2, [pc, #228]	; (800e204 <dhcp_parse_reply+0x5d4>)
 800e120:	6a3b      	ldr	r3, [r7, #32]
 800e122:	4413      	add	r3, r2
 800e124:	2201      	movs	r2, #1
 800e126:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 800e128:	68ba      	ldr	r2, [r7, #8]
 800e12a:	4938      	ldr	r1, [pc, #224]	; (800e20c <dhcp_parse_reply+0x5dc>)
 800e12c:	6a3b      	ldr	r3, [r7, #32]
 800e12e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 800e132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e134:	895b      	ldrh	r3, [r3, #10]
 800e136:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e138:	429a      	cmp	r2, r3
 800e13a:	d324      	bcc.n	800e186 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 800e13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e13e:	895b      	ldrh	r3, [r3, #10]
 800e140:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e142:	1ad3      	subs	r3, r2, r3
 800e144:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 800e146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e148:	895b      	ldrh	r3, [r3, #10]
 800e14a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800e14c:	1ad3      	subs	r3, r2, r3
 800e14e:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 800e150:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e152:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e154:	429a      	cmp	r2, r3
 800e156:	d213      	bcs.n	800e180 <dhcp_parse_reply+0x550>
        q = q->next;
 800e158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	2b00      	cmp	r3, #0
 800e162:	d109      	bne.n	800e178 <dhcp_parse_reply+0x548>
 800e164:	4b22      	ldr	r3, [pc, #136]	; (800e1f0 <dhcp_parse_reply+0x5c0>)
 800e166:	f240 629d 	movw	r2, #1693	; 0x69d
 800e16a:	492a      	ldr	r1, [pc, #168]	; (800e214 <dhcp_parse_reply+0x5e4>)
 800e16c:	4822      	ldr	r0, [pc, #136]	; (800e1f8 <dhcp_parse_reply+0x5c8>)
 800e16e:	f002 fd7b 	bl	8010c68 <iprintf>
 800e172:	f06f 0305 	mvn.w	r3, #5
 800e176:	e05a      	b.n	800e22e <dhcp_parse_reply+0x5fe>
        options = (u8_t *)q->payload;
 800e178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17a:	685b      	ldr	r3, [r3, #4]
 800e17c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e17e:	e002      	b.n	800e186 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 800e180:	f06f 0301 	mvn.w	r3, #1
 800e184:	e053      	b.n	800e22e <dhcp_parse_reply+0x5fe>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d00a      	beq.n	800e1a2 <dhcp_parse_reply+0x572>
 800e18c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800e18e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800e190:	429a      	cmp	r2, r3
 800e192:	d206      	bcs.n	800e1a2 <dhcp_parse_reply+0x572>
 800e194:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800e196:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e198:	4413      	add	r3, r2
 800e19a:	781b      	ldrb	r3, [r3, #0]
 800e19c:	2bff      	cmp	r3, #255	; 0xff
 800e19e:	f47f ad8a 	bne.w	800dcb6 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 800e1a2:	4b18      	ldr	r3, [pc, #96]	; (800e204 <dhcp_parse_reply+0x5d4>)
 800e1a4:	781b      	ldrb	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d018      	beq.n	800e1dc <dhcp_parse_reply+0x5ac>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e1aa:	4b18      	ldr	r3, [pc, #96]	; (800e20c <dhcp_parse_reply+0x5dc>)
 800e1ac:	681b      	ldr	r3, [r3, #0]
 800e1ae:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 800e1b0:	4b14      	ldr	r3, [pc, #80]	; (800e204 <dhcp_parse_reply+0x5d4>)
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b01      	cmp	r3, #1
 800e1ba:	d102      	bne.n	800e1c2 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e1c0:	e00c      	b.n	800e1dc <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	2b02      	cmp	r3, #2
 800e1c6:	d102      	bne.n	800e1ce <dhcp_parse_reply+0x59e>
      parse_sname_as_options = 1;
 800e1c8:	2301      	movs	r3, #1
 800e1ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800e1cc:	e006      	b.n	800e1dc <dhcp_parse_reply+0x5ac>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	2b03      	cmp	r3, #3
 800e1d2:	d103      	bne.n	800e1dc <dhcp_parse_reply+0x5ac>
      parse_sname_as_options = 1;
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 800e1d8:	2301      	movs	r3, #1
 800e1da:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 800e1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d01a      	beq.n	800e218 <dhcp_parse_reply+0x5e8>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 800e1e6:	236c      	movs	r3, #108	; 0x6c
 800e1e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 800e1ea:	23ec      	movs	r3, #236	; 0xec
 800e1ec:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 800e1ee:	e53c      	b.n	800dc6a <dhcp_parse_reply+0x3a>
 800e1f0:	08013ea8 	.word	0x08013ea8
 800e1f4:	08014160 	.word	0x08014160
 800e1f8:	08013f08 	.word	0x08013f08
 800e1fc:	08014130 	.word	0x08014130
 800e200:	08014184 	.word	0x08014184
 800e204:	20006e80 	.word	0x20006e80
 800e208:	08014198 	.word	0x08014198
 800e20c:	20006e8c 	.word	0x20006e8c
 800e210:	080141b0 	.word	0x080141b0
 800e214:	080141c4 	.word	0x080141c4
  } else if (parse_sname_as_options) {
 800e218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d006      	beq.n	800e22c <dhcp_parse_reply+0x5fc>
    parse_sname_as_options = 0;
 800e21e:	2300      	movs	r3, #0
 800e220:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 800e222:	232c      	movs	r3, #44	; 0x2c
 800e224:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 800e226:	236c      	movs	r3, #108	; 0x6c
 800e228:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 800e22a:	e51e      	b.n	800dc6a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 800e22c:	2300      	movs	r3, #0
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3740      	adds	r7, #64	; 0x40
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop

0800e238 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b08a      	sub	sp, #40	; 0x28
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	60f8      	str	r0, [r7, #12]
 800e240:	60b9      	str	r1, [r7, #8]
 800e242:	607a      	str	r2, [r7, #4]
 800e244:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 800e246:	4b5f      	ldr	r3, [pc, #380]	; (800e3c4 <dhcp_recv+0x18c>)
 800e248:	685b      	ldr	r3, [r3, #4]
 800e24a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 800e24c:	6a3b      	ldr	r3, [r7, #32]
 800e24e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e250:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	685b      	ldr	r3, [r3, #4]
 800e256:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 800e258:	69fb      	ldr	r3, [r7, #28]
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	f000 809d 	beq.w	800e39a <dhcp_recv+0x162>
 800e260:	69fb      	ldr	r3, [r7, #28]
 800e262:	791b      	ldrb	r3, [r3, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	f000 8098 	beq.w	800e39a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	895b      	ldrh	r3, [r3, #10]
 800e26e:	2b2b      	cmp	r3, #43	; 0x2b
 800e270:	f240 8095 	bls.w	800e39e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	2b02      	cmp	r3, #2
 800e27a:	f040 8092 	bne.w	800e3a2 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e27e:	2300      	movs	r3, #0
 800e280:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e284:	e012      	b.n	800e2ac <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 800e286:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e28a:	6a3a      	ldr	r2, [r7, #32]
 800e28c:	4413      	add	r3, r2
 800e28e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 800e292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e296:	69b9      	ldr	r1, [r7, #24]
 800e298:	440b      	add	r3, r1
 800e29a:	7f1b      	ldrb	r3, [r3, #28]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	f040 8082 	bne.w	800e3a6 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e2a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a6:	3301      	adds	r3, #1
 800e2a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e2ac:	6a3b      	ldr	r3, [r7, #32]
 800e2ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e2b2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800e2b6:	429a      	cmp	r2, r3
 800e2b8:	d203      	bcs.n	800e2c2 <dhcp_recv+0x8a>
 800e2ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2be:	2b05      	cmp	r3, #5
 800e2c0:	d9e1      	bls.n	800e286 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 800e2c2:	69bb      	ldr	r3, [r7, #24]
 800e2c4:	685b      	ldr	r3, [r3, #4]
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7f5 fa87 	bl	80037da <lwip_htonl>
 800e2cc:	4602      	mov	r2, r0
 800e2ce:	69fb      	ldr	r3, [r7, #28]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d169      	bne.n	800e3aa <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 800e2d6:	69f9      	ldr	r1, [r7, #28]
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f7ff fca9 	bl	800dc30 <dhcp_parse_reply>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d164      	bne.n	800e3ae <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 800e2e4:	4b38      	ldr	r3, [pc, #224]	; (800e3c8 <dhcp_recv+0x190>)
 800e2e6:	785b      	ldrb	r3, [r3, #1]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d062      	beq.n	800e3b2 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 800e2f2:	4b36      	ldr	r3, [pc, #216]	; (800e3cc <dhcp_recv+0x194>)
 800e2f4:	685b      	ldr	r3, [r3, #4]
 800e2f6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 800e2f8:	7cfb      	ldrb	r3, [r7, #19]
 800e2fa:	2b05      	cmp	r3, #5
 800e2fc:	d12a      	bne.n	800e354 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 800e2fe:	69fb      	ldr	r3, [r7, #28]
 800e300:	795b      	ldrb	r3, [r3, #5]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d112      	bne.n	800e32c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 800e306:	6979      	ldr	r1, [r7, #20]
 800e308:	6a38      	ldr	r0, [r7, #32]
 800e30a:	f7fe fdb5 	bl	800ce78 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e314:	f003 0308 	and.w	r3, r3, #8
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d003      	beq.n	800e324 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 800e31c:	6a38      	ldr	r0, [r7, #32]
 800e31e:	f7fe fb25 	bl	800c96c <dhcp_check>
 800e322:	e047      	b.n	800e3b4 <dhcp_recv+0x17c>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 800e324:	6a38      	ldr	r0, [r7, #32]
 800e326:	f7ff f837 	bl	800d398 <dhcp_bind>
 800e32a:	e043      	b.n	800e3b4 <dhcp_recv+0x17c>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e32c:	69fb      	ldr	r3, [r7, #28]
 800e32e:	795b      	ldrb	r3, [r3, #5]
 800e330:	2b03      	cmp	r3, #3
 800e332:	d007      	beq.n	800e344 <dhcp_recv+0x10c>
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	795b      	ldrb	r3, [r3, #5]
 800e338:	2b04      	cmp	r3, #4
 800e33a:	d003      	beq.n	800e344 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 800e33c:	69fb      	ldr	r3, [r7, #28]
 800e33e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 800e340:	2b05      	cmp	r3, #5
 800e342:	d137      	bne.n	800e3b4 <dhcp_recv+0x17c>
      dhcp_handle_ack(netif, msg_in);
 800e344:	6979      	ldr	r1, [r7, #20]
 800e346:	6a38      	ldr	r0, [r7, #32]
 800e348:	f7fe fd96 	bl	800ce78 <dhcp_handle_ack>
      dhcp_bind(netif);
 800e34c:	6a38      	ldr	r0, [r7, #32]
 800e34e:	f7ff f823 	bl	800d398 <dhcp_bind>
 800e352:	e02f      	b.n	800e3b4 <dhcp_recv+0x17c>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 800e354:	7cfb      	ldrb	r3, [r7, #19]
 800e356:	2b06      	cmp	r3, #6
 800e358:	d113      	bne.n	800e382 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e35a:	69fb      	ldr	r3, [r7, #28]
 800e35c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 800e35e:	2b03      	cmp	r3, #3
 800e360:	d00b      	beq.n	800e37a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	795b      	ldrb	r3, [r3, #5]
 800e366:	2b01      	cmp	r3, #1
 800e368:	d007      	beq.n	800e37a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 800e36e:	2b04      	cmp	r3, #4
 800e370:	d003      	beq.n	800e37a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 800e372:	69fb      	ldr	r3, [r7, #28]
 800e374:	795b      	ldrb	r3, [r3, #5]
 800e376:	2b05      	cmp	r3, #5
 800e378:	d103      	bne.n	800e382 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 800e37a:	6a38      	ldr	r0, [r7, #32]
 800e37c:	f7fe fadc 	bl	800c938 <dhcp_handle_nak>
 800e380:	e018      	b.n	800e3b4 <dhcp_recv+0x17c>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 800e382:	7cfb      	ldrb	r3, [r7, #19]
 800e384:	2b02      	cmp	r3, #2
 800e386:	d108      	bne.n	800e39a <dhcp_recv+0x162>
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	795b      	ldrb	r3, [r3, #5]
 800e38c:	2b06      	cmp	r3, #6
 800e38e:	d104      	bne.n	800e39a <dhcp_recv+0x162>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 800e390:	6979      	ldr	r1, [r7, #20]
 800e392:	6a38      	ldr	r0, [r7, #32]
 800e394:	f7fe fb1e 	bl	800c9d4 <dhcp_handle_offer>
 800e398:	e00c      	b.n	800e3b4 <dhcp_recv+0x17c>
  }

free_pbuf_and_return:
 800e39a:	bf00      	nop
 800e39c:	e00a      	b.n	800e3b4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e39e:	bf00      	nop
 800e3a0:	e008      	b.n	800e3b4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e3a2:	bf00      	nop
 800e3a4:	e006      	b.n	800e3b4 <dhcp_recv+0x17c>
      goto free_pbuf_and_return;
 800e3a6:	bf00      	nop
 800e3a8:	e004      	b.n	800e3b4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e3aa:	bf00      	nop
 800e3ac:	e002      	b.n	800e3b4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e3ae:	bf00      	nop
 800e3b0:	e000      	b.n	800e3b4 <dhcp_recv+0x17c>
    goto free_pbuf_and_return;
 800e3b2:	bf00      	nop
  pbuf_free(p);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7f7 f80b 	bl	80053d0 <pbuf_free>
}
 800e3ba:	bf00      	nop
 800e3bc:	3728      	adds	r7, #40	; 0x28
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200038f0 	.word	0x200038f0
 800e3c8:	20006e80 	.word	0x20006e80
 800e3cc:	20006e8c 	.word	0x20006e8c

0800e3d0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b088      	sub	sp, #32
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	603b      	str	r3, [r7, #0]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d108      	bne.n	800e3f8 <dhcp_create_msg+0x28>
 800e3e6:	4b5f      	ldr	r3, [pc, #380]	; (800e564 <dhcp_create_msg+0x194>)
 800e3e8:	f240 7269 	movw	r2, #1897	; 0x769
 800e3ec:	495e      	ldr	r1, [pc, #376]	; (800e568 <dhcp_create_msg+0x198>)
 800e3ee:	485f      	ldr	r0, [pc, #380]	; (800e56c <dhcp_create_msg+0x19c>)
 800e3f0:	f002 fc3a 	bl	8010c68 <iprintf>
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	e0b1      	b.n	800e55c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d108      	bne.n	800e410 <dhcp_create_msg+0x40>
 800e3fe:	4b59      	ldr	r3, [pc, #356]	; (800e564 <dhcp_create_msg+0x194>)
 800e400:	f240 726a 	movw	r2, #1898	; 0x76a
 800e404:	495a      	ldr	r1, [pc, #360]	; (800e570 <dhcp_create_msg+0x1a0>)
 800e406:	4859      	ldr	r0, [pc, #356]	; (800e56c <dhcp_create_msg+0x19c>)
 800e408:	f002 fc2e 	bl	8010c68 <iprintf>
 800e40c:	2300      	movs	r3, #0
 800e40e:	e0a5      	b.n	800e55c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 800e410:	f44f 7220 	mov.w	r2, #640	; 0x280
 800e414:	f44f 719a 	mov.w	r1, #308	; 0x134
 800e418:	2036      	movs	r0, #54	; 0x36
 800e41a:	f7f6 fcf9 	bl	8004e10 <pbuf_alloc>
 800e41e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 800e420:	69bb      	ldr	r3, [r7, #24]
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 800e426:	2300      	movs	r3, #0
 800e428:	e098      	b.n	800e55c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 800e42a:	69bb      	ldr	r3, [r7, #24]
 800e42c:	895b      	ldrh	r3, [r3, #10]
 800e42e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 800e432:	d206      	bcs.n	800e442 <dhcp_create_msg+0x72>
 800e434:	4b4b      	ldr	r3, [pc, #300]	; (800e564 <dhcp_create_msg+0x194>)
 800e436:	f240 7272 	movw	r2, #1906	; 0x772
 800e43a:	494e      	ldr	r1, [pc, #312]	; (800e574 <dhcp_create_msg+0x1a4>)
 800e43c:	484b      	ldr	r0, [pc, #300]	; (800e56c <dhcp_create_msg+0x19c>)
 800e43e:	f002 fc13 	bl	8010c68 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 800e442:	79fb      	ldrb	r3, [r7, #7]
 800e444:	2b03      	cmp	r3, #3
 800e446:	d103      	bne.n	800e450 <dhcp_create_msg+0x80>
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	795b      	ldrb	r3, [r3, #5]
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d10d      	bne.n	800e46c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 800e450:	68bb      	ldr	r3, [r7, #8]
 800e452:	799b      	ldrb	r3, [r3, #6]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 800e458:	f002 fc1e 	bl	8010c98 <rand>
 800e45c:	4603      	mov	r3, r0
 800e45e:	461a      	mov	r2, r3
 800e460:	4b45      	ldr	r3, [pc, #276]	; (800e578 <dhcp_create_msg+0x1a8>)
 800e462:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 800e464:	4b44      	ldr	r3, [pc, #272]	; (800e578 <dhcp_create_msg+0x1a8>)
 800e466:	681a      	ldr	r2, [r3, #0]
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	685b      	ldr	r3, [r3, #4]
 800e470:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 800e472:	f44f 729a 	mov.w	r2, #308	; 0x134
 800e476:	2100      	movs	r1, #0
 800e478:	6978      	ldr	r0, [r7, #20]
 800e47a:	f002 fbed 	bl	8010c58 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 800e47e:	697b      	ldr	r3, [r7, #20]
 800e480:	2201      	movs	r2, #1
 800e482:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	2201      	movs	r2, #1
 800e488:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 800e494:	68bb      	ldr	r3, [r7, #8]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4618      	mov	r0, r3
 800e49a:	f7f5 f99e 	bl	80037da <lwip_htonl>
 800e49e:	4602      	mov	r2, r0
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 800e4a4:	79fb      	ldrb	r3, [r7, #7]
 800e4a6:	2b08      	cmp	r3, #8
 800e4a8:	d010      	beq.n	800e4cc <dhcp_create_msg+0xfc>
 800e4aa:	79fb      	ldrb	r3, [r7, #7]
 800e4ac:	2b04      	cmp	r3, #4
 800e4ae:	d00d      	beq.n	800e4cc <dhcp_create_msg+0xfc>
 800e4b0:	79fb      	ldrb	r3, [r7, #7]
 800e4b2:	2b07      	cmp	r3, #7
 800e4b4:	d00a      	beq.n	800e4cc <dhcp_create_msg+0xfc>
 800e4b6:	79fb      	ldrb	r3, [r7, #7]
 800e4b8:	2b03      	cmp	r3, #3
 800e4ba:	d10c      	bne.n	800e4d6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e4bc:	68bb      	ldr	r3, [r7, #8]
 800e4be:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 800e4c0:	2b05      	cmp	r3, #5
 800e4c2:	d003      	beq.n	800e4cc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 800e4c4:	68bb      	ldr	r3, [r7, #8]
 800e4c6:	795b      	ldrb	r3, [r3, #5]
 800e4c8:	2b04      	cmp	r3, #4
 800e4ca:	d104      	bne.n	800e4d6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	3304      	adds	r3, #4
 800e4d0:	681a      	ldr	r2, [r3, #0]
 800e4d2:	697b      	ldr	r3, [r7, #20]
 800e4d4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	83fb      	strh	r3, [r7, #30]
 800e4da:	e00c      	b.n	800e4f6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 800e4dc:	8bfa      	ldrh	r2, [r7, #30]
 800e4de:	8bfb      	ldrh	r3, [r7, #30]
 800e4e0:	68f9      	ldr	r1, [r7, #12]
 800e4e2:	440a      	add	r2, r1
 800e4e4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 800e4e8:	697a      	ldr	r2, [r7, #20]
 800e4ea:	4413      	add	r3, r2
 800e4ec:	460a      	mov	r2, r1
 800e4ee:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 800e4f0:	8bfb      	ldrh	r3, [r7, #30]
 800e4f2:	3301      	adds	r3, #1
 800e4f4:	83fb      	strh	r3, [r7, #30]
 800e4f6:	8bfb      	ldrh	r3, [r7, #30]
 800e4f8:	2b05      	cmp	r3, #5
 800e4fa:	d9ef      	bls.n	800e4dc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 800e4fc:	697b      	ldr	r3, [r7, #20]
 800e4fe:	2200      	movs	r2, #0
 800e500:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e504:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 800e508:	2200      	movs	r2, #0
 800e50a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 800e50e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 800e512:	2200      	movs	r2, #0
 800e514:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 800e518:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 800e51c:	2200      	movs	r2, #0
 800e51e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 800e522:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 800e526:	697b      	ldr	r3, [r7, #20]
 800e528:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e52c:	2301      	movs	r3, #1
 800e52e:	2235      	movs	r2, #53	; 0x35
 800e530:	2000      	movs	r0, #0
 800e532:	f7ff faad 	bl	800da90 <dhcp_option>
 800e536:	4603      	mov	r3, r0
 800e538:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 800e53a:	697b      	ldr	r3, [r7, #20]
 800e53c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 800e540:	79fa      	ldrb	r2, [r7, #7]
 800e542:	8a7b      	ldrh	r3, [r7, #18]
 800e544:	4618      	mov	r0, r3
 800e546:	f7ff fad7 	bl	800daf8 <dhcp_option_byte>
 800e54a:	4603      	mov	r3, r0
 800e54c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	2b00      	cmp	r3, #0
 800e552:	d002      	beq.n	800e55a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	8a7a      	ldrh	r2, [r7, #18]
 800e558:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 800e55a:	69bb      	ldr	r3, [r7, #24]
}
 800e55c:	4618      	mov	r0, r3
 800e55e:	3720      	adds	r7, #32
 800e560:	46bd      	mov	sp, r7
 800e562:	bd80      	pop	{r7, pc}
 800e564:	08013ea8 	.word	0x08013ea8
 800e568:	080141d8 	.word	0x080141d8
 800e56c:	08013f08 	.word	0x08013f08
 800e570:	080141f8 	.word	0x080141f8
 800e574:	08014218 	.word	0x08014218
 800e578:	200005b8 	.word	0x200005b8

0800e57c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	4603      	mov	r3, r0
 800e584:	60b9      	str	r1, [r7, #8]
 800e586:	607a      	str	r2, [r7, #4]
 800e588:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 800e58a:	89fb      	ldrh	r3, [r7, #14]
 800e58c:	1c5a      	adds	r2, r3, #1
 800e58e:	81fa      	strh	r2, [r7, #14]
 800e590:	461a      	mov	r2, r3
 800e592:	68bb      	ldr	r3, [r7, #8]
 800e594:	4413      	add	r3, r2
 800e596:	22ff      	movs	r2, #255	; 0xff
 800e598:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e59a:	e007      	b.n	800e5ac <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 800e59c:	89fb      	ldrh	r3, [r7, #14]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	81fa      	strh	r2, [r7, #14]
 800e5a2:	461a      	mov	r2, r3
 800e5a4:	68bb      	ldr	r3, [r7, #8]
 800e5a6:	4413      	add	r3, r2
 800e5a8:	2200      	movs	r2, #0
 800e5aa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 800e5ac:	89fb      	ldrh	r3, [r7, #14]
 800e5ae:	2b43      	cmp	r3, #67	; 0x43
 800e5b0:	d904      	bls.n	800e5bc <dhcp_option_trailer+0x40>
 800e5b2:	89fb      	ldrh	r3, [r7, #14]
 800e5b4:	f003 0303 	and.w	r3, r3, #3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d002      	beq.n	800e5c2 <dhcp_option_trailer+0x46>
 800e5bc:	89fb      	ldrh	r3, [r7, #14]
 800e5be:	2b43      	cmp	r3, #67	; 0x43
 800e5c0:	d9ec      	bls.n	800e59c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 800e5c2:	89fb      	ldrh	r3, [r7, #14]
 800e5c4:	33f0      	adds	r3, #240	; 0xf0
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	4619      	mov	r1, r3
 800e5ca:	6878      	ldr	r0, [r7, #4]
 800e5cc:	f7f6 fd7a 	bl	80050c4 <pbuf_realloc>
}
 800e5d0:	bf00      	nop
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}

0800e5d8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 800e5d8:	b480      	push	{r7}
 800e5da:	b085      	sub	sp, #20
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d017      	beq.n	800e616 <dhcp_supplied_address+0x3e>
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d013      	beq.n	800e616 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5f2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	795b      	ldrb	r3, [r3, #5]
 800e5f8:	2b0a      	cmp	r3, #10
 800e5fa:	d007      	beq.n	800e60c <dhcp_supplied_address+0x34>
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	795b      	ldrb	r3, [r3, #5]
 800e600:	2b05      	cmp	r3, #5
 800e602:	d003      	beq.n	800e60c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 800e608:	2b04      	cmp	r3, #4
 800e60a:	d101      	bne.n	800e610 <dhcp_supplied_address+0x38>
 800e60c:	2301      	movs	r3, #1
 800e60e:	e000      	b.n	800e612 <dhcp_supplied_address+0x3a>
 800e610:	2300      	movs	r3, #0
 800e612:	b2db      	uxtb	r3, r3
 800e614:	e000      	b.n	800e618 <dhcp_supplied_address+0x40>
  }
  return 0;
 800e616:	2300      	movs	r3, #0
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3714      	adds	r7, #20
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 800e62c:	4915      	ldr	r1, [pc, #84]	; (800e684 <etharp_free_entry+0x60>)
 800e62e:	687a      	ldr	r2, [r7, #4]
 800e630:	4613      	mov	r3, r2
 800e632:	005b      	lsls	r3, r3, #1
 800e634:	4413      	add	r3, r2
 800e636:	00db      	lsls	r3, r3, #3
 800e638:	440b      	add	r3, r1
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d013      	beq.n	800e668 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 800e640:	4910      	ldr	r1, [pc, #64]	; (800e684 <etharp_free_entry+0x60>)
 800e642:	687a      	ldr	r2, [r7, #4]
 800e644:	4613      	mov	r3, r2
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	4413      	add	r3, r2
 800e64a:	00db      	lsls	r3, r3, #3
 800e64c:	440b      	add	r3, r1
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4618      	mov	r0, r3
 800e652:	f7f6 febd 	bl	80053d0 <pbuf_free>
    arp_table[i].q = NULL;
 800e656:	490b      	ldr	r1, [pc, #44]	; (800e684 <etharp_free_entry+0x60>)
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	4613      	mov	r3, r2
 800e65c:	005b      	lsls	r3, r3, #1
 800e65e:	4413      	add	r3, r2
 800e660:	00db      	lsls	r3, r3, #3
 800e662:	440b      	add	r3, r1
 800e664:	2200      	movs	r2, #0
 800e666:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 800e668:	4906      	ldr	r1, [pc, #24]	; (800e684 <etharp_free_entry+0x60>)
 800e66a:	687a      	ldr	r2, [r7, #4]
 800e66c:	4613      	mov	r3, r2
 800e66e:	005b      	lsls	r3, r3, #1
 800e670:	4413      	add	r3, r2
 800e672:	00db      	lsls	r3, r3, #3
 800e674:	440b      	add	r3, r1
 800e676:	3314      	adds	r3, #20
 800e678:	2200      	movs	r2, #0
 800e67a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 800e67c:	bf00      	nop
 800e67e:	3708      	adds	r7, #8
 800e680:	46bd      	mov	sp, r7
 800e682:	bd80      	pop	{r7, pc}
 800e684:	200005bc 	.word	0x200005bc

0800e688 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e68e:	2300      	movs	r3, #0
 800e690:	607b      	str	r3, [r7, #4]
 800e692:	e096      	b.n	800e7c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 800e694:	494f      	ldr	r1, [pc, #316]	; (800e7d4 <etharp_tmr+0x14c>)
 800e696:	687a      	ldr	r2, [r7, #4]
 800e698:	4613      	mov	r3, r2
 800e69a:	005b      	lsls	r3, r3, #1
 800e69c:	4413      	add	r3, r2
 800e69e:	00db      	lsls	r3, r3, #3
 800e6a0:	440b      	add	r3, r1
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	781b      	ldrb	r3, [r3, #0]
 800e6a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 800e6a8:	78fb      	ldrb	r3, [r7, #3]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	f000 8086 	beq.w	800e7bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 800e6b0:	4948      	ldr	r1, [pc, #288]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6b2:	687a      	ldr	r2, [r7, #4]
 800e6b4:	4613      	mov	r3, r2
 800e6b6:	005b      	lsls	r3, r3, #1
 800e6b8:	4413      	add	r3, r2
 800e6ba:	00db      	lsls	r3, r3, #3
 800e6bc:	440b      	add	r3, r1
 800e6be:	3312      	adds	r3, #18
 800e6c0:	881b      	ldrh	r3, [r3, #0]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	b298      	uxth	r0, r3
 800e6c6:	4943      	ldr	r1, [pc, #268]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	4613      	mov	r3, r2
 800e6cc:	005b      	lsls	r3, r3, #1
 800e6ce:	4413      	add	r3, r2
 800e6d0:	00db      	lsls	r3, r3, #3
 800e6d2:	440b      	add	r3, r1
 800e6d4:	3312      	adds	r3, #18
 800e6d6:	4602      	mov	r2, r0
 800e6d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e6da:	493e      	ldr	r1, [pc, #248]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	005b      	lsls	r3, r3, #1
 800e6e2:	4413      	add	r3, r2
 800e6e4:	00db      	lsls	r3, r3, #3
 800e6e6:	440b      	add	r3, r1
 800e6e8:	3312      	adds	r3, #18
 800e6ea:	881b      	ldrh	r3, [r3, #0]
 800e6ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800e6f0:	d215      	bcs.n	800e71e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e6f2:	4938      	ldr	r1, [pc, #224]	; (800e7d4 <etharp_tmr+0x14c>)
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	4613      	mov	r3, r2
 800e6f8:	005b      	lsls	r3, r3, #1
 800e6fa:	4413      	add	r3, r2
 800e6fc:	00db      	lsls	r3, r3, #3
 800e6fe:	440b      	add	r3, r1
 800e700:	3314      	adds	r3, #20
 800e702:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800e704:	2b01      	cmp	r3, #1
 800e706:	d10e      	bne.n	800e726 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800e708:	4932      	ldr	r1, [pc, #200]	; (800e7d4 <etharp_tmr+0x14c>)
 800e70a:	687a      	ldr	r2, [r7, #4]
 800e70c:	4613      	mov	r3, r2
 800e70e:	005b      	lsls	r3, r3, #1
 800e710:	4413      	add	r3, r2
 800e712:	00db      	lsls	r3, r3, #3
 800e714:	440b      	add	r3, r1
 800e716:	3312      	adds	r3, #18
 800e718:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800e71a:	2b04      	cmp	r3, #4
 800e71c:	d903      	bls.n	800e726 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f7ff ff80 	bl	800e624 <etharp_free_entry>
 800e724:	e04a      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800e726:	492b      	ldr	r1, [pc, #172]	; (800e7d4 <etharp_tmr+0x14c>)
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	4613      	mov	r3, r2
 800e72c:	005b      	lsls	r3, r3, #1
 800e72e:	4413      	add	r3, r2
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	440b      	add	r3, r1
 800e734:	3314      	adds	r3, #20
 800e736:	781b      	ldrb	r3, [r3, #0]
 800e738:	2b03      	cmp	r3, #3
 800e73a:	d10a      	bne.n	800e752 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 800e73c:	4925      	ldr	r1, [pc, #148]	; (800e7d4 <etharp_tmr+0x14c>)
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	4613      	mov	r3, r2
 800e742:	005b      	lsls	r3, r3, #1
 800e744:	4413      	add	r3, r2
 800e746:	00db      	lsls	r3, r3, #3
 800e748:	440b      	add	r3, r1
 800e74a:	3314      	adds	r3, #20
 800e74c:	2204      	movs	r2, #4
 800e74e:	701a      	strb	r2, [r3, #0]
 800e750:	e034      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 800e752:	4920      	ldr	r1, [pc, #128]	; (800e7d4 <etharp_tmr+0x14c>)
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	4613      	mov	r3, r2
 800e758:	005b      	lsls	r3, r3, #1
 800e75a:	4413      	add	r3, r2
 800e75c:	00db      	lsls	r3, r3, #3
 800e75e:	440b      	add	r3, r1
 800e760:	3314      	adds	r3, #20
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b04      	cmp	r3, #4
 800e766:	d10a      	bne.n	800e77e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 800e768:	491a      	ldr	r1, [pc, #104]	; (800e7d4 <etharp_tmr+0x14c>)
 800e76a:	687a      	ldr	r2, [r7, #4]
 800e76c:	4613      	mov	r3, r2
 800e76e:	005b      	lsls	r3, r3, #1
 800e770:	4413      	add	r3, r2
 800e772:	00db      	lsls	r3, r3, #3
 800e774:	440b      	add	r3, r1
 800e776:	3314      	adds	r3, #20
 800e778:	2202      	movs	r2, #2
 800e77a:	701a      	strb	r2, [r3, #0]
 800e77c:	e01e      	b.n	800e7bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800e77e:	4915      	ldr	r1, [pc, #84]	; (800e7d4 <etharp_tmr+0x14c>)
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	4613      	mov	r3, r2
 800e784:	005b      	lsls	r3, r3, #1
 800e786:	4413      	add	r3, r2
 800e788:	00db      	lsls	r3, r3, #3
 800e78a:	440b      	add	r3, r1
 800e78c:	3314      	adds	r3, #20
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	2b01      	cmp	r3, #1
 800e792:	d113      	bne.n	800e7bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 800e794:	490f      	ldr	r1, [pc, #60]	; (800e7d4 <etharp_tmr+0x14c>)
 800e796:	687a      	ldr	r2, [r7, #4]
 800e798:	4613      	mov	r3, r2
 800e79a:	005b      	lsls	r3, r3, #1
 800e79c:	4413      	add	r3, r2
 800e79e:	00db      	lsls	r3, r3, #3
 800e7a0:	440b      	add	r3, r1
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	6818      	ldr	r0, [r3, #0]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	4613      	mov	r3, r2
 800e7aa:	005b      	lsls	r3, r3, #1
 800e7ac:	4413      	add	r3, r2
 800e7ae:	00db      	lsls	r3, r3, #3
 800e7b0:	4a08      	ldr	r2, [pc, #32]	; (800e7d4 <etharp_tmr+0x14c>)
 800e7b2:	4413      	add	r3, r2
 800e7b4:	3304      	adds	r3, #4
 800e7b6:	4619      	mov	r1, r3
 800e7b8:	f000 fe72 	bl	800f4a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	3301      	adds	r3, #1
 800e7c0:	607b      	str	r3, [r7, #4]
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	f77f af65 	ble.w	800e694 <etharp_tmr+0xc>
      }
    }
  }
}
 800e7ca:	bf00      	nop
 800e7cc:	3708      	adds	r7, #8
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
 800e7d2:	bf00      	nop
 800e7d4:	200005bc 	.word	0x200005bc

0800e7d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 800e7d8:	b580      	push	{r7, lr}
 800e7da:	b08a      	sub	sp, #40	; 0x28
 800e7dc:	af00      	add	r7, sp, #0
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	460b      	mov	r3, r1
 800e7e2:	607a      	str	r2, [r7, #4]
 800e7e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800e7e6:	230a      	movs	r3, #10
 800e7e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e7ea:	230a      	movs	r3, #10
 800e7ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 800e7ee:	230a      	movs	r3, #10
 800e7f0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 800e7f6:	230a      	movs	r3, #10
 800e7f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800e7fa:	2300      	movs	r3, #0
 800e7fc:	83bb      	strh	r3, [r7, #28]
 800e7fe:	2300      	movs	r3, #0
 800e800:	837b      	strh	r3, [r7, #26]
 800e802:	2300      	movs	r3, #0
 800e804:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e806:	2300      	movs	r3, #0
 800e808:	843b      	strh	r3, [r7, #32]
 800e80a:	e0ae      	b.n	800e96a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 800e80c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e810:	49a6      	ldr	r1, [pc, #664]	; (800eaac <etharp_find_entry+0x2d4>)
 800e812:	4613      	mov	r3, r2
 800e814:	005b      	lsls	r3, r3, #1
 800e816:	4413      	add	r3, r2
 800e818:	00db      	lsls	r3, r3, #3
 800e81a:	440b      	add	r3, r1
 800e81c:	3314      	adds	r3, #20
 800e81e:	781b      	ldrb	r3, [r3, #0]
 800e820:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 800e822:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e826:	2b0a      	cmp	r3, #10
 800e828:	d105      	bne.n	800e836 <etharp_find_entry+0x5e>
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d102      	bne.n	800e836 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 800e830:	8c3b      	ldrh	r3, [r7, #32]
 800e832:	847b      	strh	r3, [r7, #34]	; 0x22
 800e834:	e095      	b.n	800e962 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 800e836:	7dfb      	ldrb	r3, [r7, #23]
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f000 8092 	beq.w	800e962 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800e83e:	7dfb      	ldrb	r3, [r7, #23]
 800e840:	2b01      	cmp	r3, #1
 800e842:	d009      	beq.n	800e858 <etharp_find_entry+0x80>
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	2b01      	cmp	r3, #1
 800e848:	d806      	bhi.n	800e858 <etharp_find_entry+0x80>
 800e84a:	4b99      	ldr	r3, [pc, #612]	; (800eab0 <etharp_find_entry+0x2d8>)
 800e84c:	f44f 7292 	mov.w	r2, #292	; 0x124
 800e850:	4998      	ldr	r1, [pc, #608]	; (800eab4 <etharp_find_entry+0x2dc>)
 800e852:	4899      	ldr	r0, [pc, #612]	; (800eab8 <etharp_find_entry+0x2e0>)
 800e854:	f002 fa08 	bl	8010c68 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d020      	beq.n	800e8a0 <etharp_find_entry+0xc8>
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	6819      	ldr	r1, [r3, #0]
 800e862:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e866:	4891      	ldr	r0, [pc, #580]	; (800eaac <etharp_find_entry+0x2d4>)
 800e868:	4613      	mov	r3, r2
 800e86a:	005b      	lsls	r3, r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	00db      	lsls	r3, r3, #3
 800e870:	4403      	add	r3, r0
 800e872:	3304      	adds	r3, #4
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4299      	cmp	r1, r3
 800e878:	d112      	bne.n	800e8a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00c      	beq.n	800e89a <etharp_find_entry+0xc2>
 800e880:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e884:	4989      	ldr	r1, [pc, #548]	; (800eaac <etharp_find_entry+0x2d4>)
 800e886:	4613      	mov	r3, r2
 800e888:	005b      	lsls	r3, r3, #1
 800e88a:	4413      	add	r3, r2
 800e88c:	00db      	lsls	r3, r3, #3
 800e88e:	440b      	add	r3, r1
 800e890:	3308      	adds	r3, #8
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	687a      	ldr	r2, [r7, #4]
 800e896:	429a      	cmp	r2, r3
 800e898:	d102      	bne.n	800e8a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 800e89a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e89e:	e100      	b.n	800eaa2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 800e8a0:	7dfb      	ldrb	r3, [r7, #23]
 800e8a2:	2b01      	cmp	r3, #1
 800e8a4:	d140      	bne.n	800e928 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 800e8a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8aa:	4980      	ldr	r1, [pc, #512]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8ac:	4613      	mov	r3, r2
 800e8ae:	005b      	lsls	r3, r3, #1
 800e8b0:	4413      	add	r3, r2
 800e8b2:	00db      	lsls	r3, r3, #3
 800e8b4:	440b      	add	r3, r1
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d01a      	beq.n	800e8f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 800e8bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8c0:	497a      	ldr	r1, [pc, #488]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8c2:	4613      	mov	r3, r2
 800e8c4:	005b      	lsls	r3, r3, #1
 800e8c6:	4413      	add	r3, r2
 800e8c8:	00db      	lsls	r3, r3, #3
 800e8ca:	440b      	add	r3, r1
 800e8cc:	3312      	adds	r3, #18
 800e8ce:	881b      	ldrh	r3, [r3, #0]
 800e8d0:	8bba      	ldrh	r2, [r7, #28]
 800e8d2:	429a      	cmp	r2, r3
 800e8d4:	d845      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_queue = i;
 800e8d6:	8c3b      	ldrh	r3, [r7, #32]
 800e8d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 800e8da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8de:	4973      	ldr	r1, [pc, #460]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	005b      	lsls	r3, r3, #1
 800e8e4:	4413      	add	r3, r2
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	440b      	add	r3, r1
 800e8ea:	3312      	adds	r3, #18
 800e8ec:	881b      	ldrh	r3, [r3, #0]
 800e8ee:	83bb      	strh	r3, [r7, #28]
 800e8f0:	e037      	b.n	800e962 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800e8f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e8f6:	496d      	ldr	r1, [pc, #436]	; (800eaac <etharp_find_entry+0x2d4>)
 800e8f8:	4613      	mov	r3, r2
 800e8fa:	005b      	lsls	r3, r3, #1
 800e8fc:	4413      	add	r3, r2
 800e8fe:	00db      	lsls	r3, r3, #3
 800e900:	440b      	add	r3, r1
 800e902:	3312      	adds	r3, #18
 800e904:	881b      	ldrh	r3, [r3, #0]
 800e906:	8b7a      	ldrh	r2, [r7, #26]
 800e908:	429a      	cmp	r2, r3
 800e90a:	d82a      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_pending = i;
 800e90c:	8c3b      	ldrh	r3, [r7, #32]
 800e90e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 800e910:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e914:	4965      	ldr	r1, [pc, #404]	; (800eaac <etharp_find_entry+0x2d4>)
 800e916:	4613      	mov	r3, r2
 800e918:	005b      	lsls	r3, r3, #1
 800e91a:	4413      	add	r3, r2
 800e91c:	00db      	lsls	r3, r3, #3
 800e91e:	440b      	add	r3, r1
 800e920:	3312      	adds	r3, #18
 800e922:	881b      	ldrh	r3, [r3, #0]
 800e924:	837b      	strh	r3, [r7, #26]
 800e926:	e01c      	b.n	800e962 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800e928:	7dfb      	ldrb	r3, [r7, #23]
 800e92a:	2b01      	cmp	r3, #1
 800e92c:	d919      	bls.n	800e962 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 800e92e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e932:	495e      	ldr	r1, [pc, #376]	; (800eaac <etharp_find_entry+0x2d4>)
 800e934:	4613      	mov	r3, r2
 800e936:	005b      	lsls	r3, r3, #1
 800e938:	4413      	add	r3, r2
 800e93a:	00db      	lsls	r3, r3, #3
 800e93c:	440b      	add	r3, r1
 800e93e:	3312      	adds	r3, #18
 800e940:	881b      	ldrh	r3, [r3, #0]
 800e942:	8b3a      	ldrh	r2, [r7, #24]
 800e944:	429a      	cmp	r2, r3
 800e946:	d80c      	bhi.n	800e962 <etharp_find_entry+0x18a>
            old_stable = i;
 800e948:	8c3b      	ldrh	r3, [r7, #32]
 800e94a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 800e94c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e950:	4956      	ldr	r1, [pc, #344]	; (800eaac <etharp_find_entry+0x2d4>)
 800e952:	4613      	mov	r3, r2
 800e954:	005b      	lsls	r3, r3, #1
 800e956:	4413      	add	r3, r2
 800e958:	00db      	lsls	r3, r3, #3
 800e95a:	440b      	add	r3, r1
 800e95c:	3312      	adds	r3, #18
 800e95e:	881b      	ldrh	r3, [r3, #0]
 800e960:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800e962:	8c3b      	ldrh	r3, [r7, #32]
 800e964:	3301      	adds	r3, #1
 800e966:	b29b      	uxth	r3, r3
 800e968:	843b      	strh	r3, [r7, #32]
 800e96a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e96e:	2b09      	cmp	r3, #9
 800e970:	f77f af4c 	ble.w	800e80c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 800e974:	7afb      	ldrb	r3, [r7, #11]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d108      	bne.n	800e990 <etharp_find_entry+0x1b8>
 800e97e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e982:	2b0a      	cmp	r3, #10
 800e984:	d107      	bne.n	800e996 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 800e986:	7afb      	ldrb	r3, [r7, #11]
 800e988:	f003 0301 	and.w	r3, r3, #1
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d102      	bne.n	800e996 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 800e990:	f04f 33ff 	mov.w	r3, #4294967295
 800e994:	e085      	b.n	800eaa2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 800e996:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800e99a:	2b09      	cmp	r3, #9
 800e99c:	dc02      	bgt.n	800e9a4 <etharp_find_entry+0x1cc>
    i = empty;
 800e99e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9a0:	843b      	strh	r3, [r7, #32]
 800e9a2:	e039      	b.n	800ea18 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 800e9a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800e9a8:	2b09      	cmp	r3, #9
 800e9aa:	dc14      	bgt.n	800e9d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 800e9ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 800e9b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800e9b4:	493d      	ldr	r1, [pc, #244]	; (800eaac <etharp_find_entry+0x2d4>)
 800e9b6:	4613      	mov	r3, r2
 800e9b8:	005b      	lsls	r3, r3, #1
 800e9ba:	4413      	add	r3, r2
 800e9bc:	00db      	lsls	r3, r3, #3
 800e9be:	440b      	add	r3, r1
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d018      	beq.n	800e9f8 <etharp_find_entry+0x220>
 800e9c6:	4b3a      	ldr	r3, [pc, #232]	; (800eab0 <etharp_find_entry+0x2d8>)
 800e9c8:	f240 126d 	movw	r2, #365	; 0x16d
 800e9cc:	493b      	ldr	r1, [pc, #236]	; (800eabc <etharp_find_entry+0x2e4>)
 800e9ce:	483a      	ldr	r0, [pc, #232]	; (800eab8 <etharp_find_entry+0x2e0>)
 800e9d0:	f002 f94a 	bl	8010c68 <iprintf>
 800e9d4:	e010      	b.n	800e9f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 800e9d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800e9da:	2b09      	cmp	r3, #9
 800e9dc:	dc02      	bgt.n	800e9e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 800e9de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800e9e0:	843b      	strh	r3, [r7, #32]
 800e9e2:	e009      	b.n	800e9f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 800e9e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800e9e8:	2b09      	cmp	r3, #9
 800e9ea:	dc02      	bgt.n	800e9f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 800e9ec:	8bfb      	ldrh	r3, [r7, #30]
 800e9ee:	843b      	strh	r3, [r7, #32]
 800e9f0:	e002      	b.n	800e9f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 800e9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f6:	e054      	b.n	800eaa2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800e9f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800e9fc:	2b09      	cmp	r3, #9
 800e9fe:	dd06      	ble.n	800ea0e <etharp_find_entry+0x236>
 800ea00:	4b2b      	ldr	r3, [pc, #172]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea02:	f240 127f 	movw	r2, #383	; 0x17f
 800ea06:	492e      	ldr	r1, [pc, #184]	; (800eac0 <etharp_find_entry+0x2e8>)
 800ea08:	482b      	ldr	r0, [pc, #172]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea0a:	f002 f92d 	bl	8010c68 <iprintf>
    etharp_free_entry(i);
 800ea0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea12:	4618      	mov	r0, r3
 800ea14:	f7ff fe06 	bl	800e624 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800ea18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800ea1c:	2b09      	cmp	r3, #9
 800ea1e:	dd06      	ble.n	800ea2e <etharp_find_entry+0x256>
 800ea20:	4b23      	ldr	r3, [pc, #140]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea22:	f240 1283 	movw	r2, #387	; 0x183
 800ea26:	4926      	ldr	r1, [pc, #152]	; (800eac0 <etharp_find_entry+0x2e8>)
 800ea28:	4823      	ldr	r0, [pc, #140]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea2a:	f002 f91d 	bl	8010c68 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 800ea2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea32:	491e      	ldr	r1, [pc, #120]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea34:	4613      	mov	r3, r2
 800ea36:	005b      	lsls	r3, r3, #1
 800ea38:	4413      	add	r3, r2
 800ea3a:	00db      	lsls	r3, r3, #3
 800ea3c:	440b      	add	r3, r1
 800ea3e:	3314      	adds	r3, #20
 800ea40:	781b      	ldrb	r3, [r3, #0]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d006      	beq.n	800ea54 <etharp_find_entry+0x27c>
 800ea46:	4b1a      	ldr	r3, [pc, #104]	; (800eab0 <etharp_find_entry+0x2d8>)
 800ea48:	f240 1285 	movw	r2, #389	; 0x185
 800ea4c:	491d      	ldr	r1, [pc, #116]	; (800eac4 <etharp_find_entry+0x2ec>)
 800ea4e:	481a      	ldr	r0, [pc, #104]	; (800eab8 <etharp_find_entry+0x2e0>)
 800ea50:	f002 f90a 	bl	8010c68 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00b      	beq.n	800ea72 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800ea5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	6819      	ldr	r1, [r3, #0]
 800ea62:	4812      	ldr	r0, [pc, #72]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea64:	4613      	mov	r3, r2
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	4413      	add	r3, r2
 800ea6a:	00db      	lsls	r3, r3, #3
 800ea6c:	4403      	add	r3, r0
 800ea6e:	3304      	adds	r3, #4
 800ea70:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 800ea72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea76:	490d      	ldr	r1, [pc, #52]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea78:	4613      	mov	r3, r2
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	4413      	add	r3, r2
 800ea7e:	00db      	lsls	r3, r3, #3
 800ea80:	440b      	add	r3, r1
 800ea82:	3312      	adds	r3, #18
 800ea84:	2200      	movs	r2, #0
 800ea86:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 800ea88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800ea8c:	4907      	ldr	r1, [pc, #28]	; (800eaac <etharp_find_entry+0x2d4>)
 800ea8e:	4613      	mov	r3, r2
 800ea90:	005b      	lsls	r3, r3, #1
 800ea92:	4413      	add	r3, r2
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	440b      	add	r3, r1
 800ea98:	3308      	adds	r3, #8
 800ea9a:	687a      	ldr	r2, [r7, #4]
 800ea9c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 800ea9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3728      	adds	r7, #40	; 0x28
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	200005bc 	.word	0x200005bc
 800eab0:	08014258 	.word	0x08014258
 800eab4:	08014290 	.word	0x08014290
 800eab8:	080142d0 	.word	0x080142d0
 800eabc:	080142f8 	.word	0x080142f8
 800eac0:	08014310 	.word	0x08014310
 800eac4:	08014324 	.word	0x08014324

0800eac8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b088      	sub	sp, #32
 800eacc:	af02      	add	r7, sp, #8
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
 800ead4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eadc:	2b06      	cmp	r3, #6
 800eade:	d006      	beq.n	800eaee <etharp_update_arp_entry+0x26>
 800eae0:	4b48      	ldr	r3, [pc, #288]	; (800ec04 <etharp_update_arp_entry+0x13c>)
 800eae2:	f240 12a9 	movw	r2, #425	; 0x1a9
 800eae6:	4948      	ldr	r1, [pc, #288]	; (800ec08 <etharp_update_arp_entry+0x140>)
 800eae8:	4848      	ldr	r0, [pc, #288]	; (800ec0c <etharp_update_arp_entry+0x144>)
 800eaea:	f002 f8bd 	bl	8010c68 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 800eaee:	68bb      	ldr	r3, [r7, #8]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d012      	beq.n	800eb1a <etharp_update_arp_entry+0x52>
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d00e      	beq.n	800eb1a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	68f9      	ldr	r1, [r7, #12]
 800eb02:	4618      	mov	r0, r3
 800eb04:	f001 f91e 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800eb08:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d105      	bne.n	800eb1a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 800eb0e:	68bb      	ldr	r3, [r7, #8]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800eb16:	2be0      	cmp	r3, #224	; 0xe0
 800eb18:	d102      	bne.n	800eb20 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800eb1a:	f06f 030f 	mvn.w	r3, #15
 800eb1e:	e06c      	b.n	800ebfa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 800eb20:	78fb      	ldrb	r3, [r7, #3]
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	4619      	mov	r1, r3
 800eb26:	68b8      	ldr	r0, [r7, #8]
 800eb28:	f7ff fe56 	bl	800e7d8 <etharp_find_entry>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 800eb30:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	da02      	bge.n	800eb3e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 800eb38:	8afb      	ldrh	r3, [r7, #22]
 800eb3a:	b25b      	sxtb	r3, r3
 800eb3c:	e05d      	b.n	800ebfa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 800eb3e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb42:	4933      	ldr	r1, [pc, #204]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb44:	4613      	mov	r3, r2
 800eb46:	005b      	lsls	r3, r3, #1
 800eb48:	4413      	add	r3, r2
 800eb4a:	00db      	lsls	r3, r3, #3
 800eb4c:	440b      	add	r3, r1
 800eb4e:	3314      	adds	r3, #20
 800eb50:	2202      	movs	r2, #2
 800eb52:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800eb54:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb58:	492d      	ldr	r1, [pc, #180]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb5a:	4613      	mov	r3, r2
 800eb5c:	005b      	lsls	r3, r3, #1
 800eb5e:	4413      	add	r3, r2
 800eb60:	00db      	lsls	r3, r3, #3
 800eb62:	440b      	add	r3, r1
 800eb64:	3308      	adds	r3, #8
 800eb66:	68fa      	ldr	r2, [r7, #12]
 800eb68:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 800eb6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	005b      	lsls	r3, r3, #1
 800eb72:	4413      	add	r3, r2
 800eb74:	00db      	lsls	r3, r3, #3
 800eb76:	3308      	adds	r3, #8
 800eb78:	4a25      	ldr	r2, [pc, #148]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb7a:	4413      	add	r3, r2
 800eb7c:	3304      	adds	r3, #4
 800eb7e:	2206      	movs	r2, #6
 800eb80:	6879      	ldr	r1, [r7, #4]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f002 f85d 	bl	8010c42 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 800eb88:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eb8c:	4920      	ldr	r1, [pc, #128]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eb8e:	4613      	mov	r3, r2
 800eb90:	005b      	lsls	r3, r3, #1
 800eb92:	4413      	add	r3, r2
 800eb94:	00db      	lsls	r3, r3, #3
 800eb96:	440b      	add	r3, r1
 800eb98:	3312      	adds	r3, #18
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 800eb9e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800eba2:	491b      	ldr	r1, [pc, #108]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800eba4:	4613      	mov	r3, r2
 800eba6:	005b      	lsls	r3, r3, #1
 800eba8:	4413      	add	r3, r2
 800ebaa:	00db      	lsls	r3, r3, #3
 800ebac:	440b      	add	r3, r1
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2b00      	cmp	r3, #0
 800ebb2:	d021      	beq.n	800ebf8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 800ebb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebb8:	4915      	ldr	r1, [pc, #84]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800ebba:	4613      	mov	r3, r2
 800ebbc:	005b      	lsls	r3, r3, #1
 800ebbe:	4413      	add	r3, r2
 800ebc0:	00db      	lsls	r3, r3, #3
 800ebc2:	440b      	add	r3, r1
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 800ebc8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ebcc:	4910      	ldr	r1, [pc, #64]	; (800ec10 <etharp_update_arp_entry+0x148>)
 800ebce:	4613      	mov	r3, r2
 800ebd0:	005b      	lsls	r3, r3, #1
 800ebd2:	4413      	add	r3, r2
 800ebd4:	00db      	lsls	r3, r3, #3
 800ebd6:	440b      	add	r3, r1
 800ebd8:	2200      	movs	r2, #0
 800ebda:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 800ebdc:	68fb      	ldr	r3, [r7, #12]
 800ebde:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800ebe2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebe6:	9300      	str	r3, [sp, #0]
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	6939      	ldr	r1, [r7, #16]
 800ebec:	68f8      	ldr	r0, [r7, #12]
 800ebee:	f001 ffad 	bl	8010b4c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 800ebf2:	6938      	ldr	r0, [r7, #16]
 800ebf4:	f7f6 fbec 	bl	80053d0 <pbuf_free>
  }
  return ERR_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3718      	adds	r7, #24
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	08014258 	.word	0x08014258
 800ec08:	08014350 	.word	0x08014350
 800ec0c:	080142d0 	.word	0x080142d0
 800ec10:	200005bc 	.word	0x200005bc

0800ec14 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	60fb      	str	r3, [r7, #12]
 800ec20:	e01e      	b.n	800ec60 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 800ec22:	4913      	ldr	r1, [pc, #76]	; (800ec70 <etharp_cleanup_netif+0x5c>)
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	4613      	mov	r3, r2
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	4413      	add	r3, r2
 800ec2c:	00db      	lsls	r3, r3, #3
 800ec2e:	440b      	add	r3, r1
 800ec30:	3314      	adds	r3, #20
 800ec32:	781b      	ldrb	r3, [r3, #0]
 800ec34:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800ec36:	7afb      	ldrb	r3, [r7, #11]
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d00e      	beq.n	800ec5a <etharp_cleanup_netif+0x46>
 800ec3c:	490c      	ldr	r1, [pc, #48]	; (800ec70 <etharp_cleanup_netif+0x5c>)
 800ec3e:	68fa      	ldr	r2, [r7, #12]
 800ec40:	4613      	mov	r3, r2
 800ec42:	005b      	lsls	r3, r3, #1
 800ec44:	4413      	add	r3, r2
 800ec46:	00db      	lsls	r3, r3, #3
 800ec48:	440b      	add	r3, r1
 800ec4a:	3308      	adds	r3, #8
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	687a      	ldr	r2, [r7, #4]
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d102      	bne.n	800ec5a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f7ff fce5 	bl	800e624 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	3301      	adds	r3, #1
 800ec5e:	60fb      	str	r3, [r7, #12]
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	2b09      	cmp	r3, #9
 800ec64:	dddd      	ble.n	800ec22 <etharp_cleanup_netif+0xe>
    }
  }
}
 800ec66:	bf00      	nop
 800ec68:	3710      	adds	r7, #16
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	bd80      	pop	{r7, pc}
 800ec6e:	bf00      	nop
 800ec70:	200005bc 	.word	0x200005bc

0800ec74 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800ec74:	b5b0      	push	{r4, r5, r7, lr}
 800ec76:	b08a      	sub	sp, #40	; 0x28
 800ec78:	af04      	add	r7, sp, #16
 800ec7a:	6078      	str	r0, [r7, #4]
 800ec7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 800ec7e:	683b      	ldr	r3, [r7, #0]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d107      	bne.n	800ec94 <etharp_input+0x20>
 800ec84:	4b3f      	ldr	r3, [pc, #252]	; (800ed84 <etharp_input+0x110>)
 800ec86:	f240 228a 	movw	r2, #650	; 0x28a
 800ec8a:	493f      	ldr	r1, [pc, #252]	; (800ed88 <etharp_input+0x114>)
 800ec8c:	483f      	ldr	r0, [pc, #252]	; (800ed8c <etharp_input+0x118>)
 800ec8e:	f001 ffeb 	bl	8010c68 <iprintf>
 800ec92:	e074      	b.n	800ed7e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ec9a:	693b      	ldr	r3, [r7, #16]
 800ec9c:	881b      	ldrh	r3, [r3, #0]
 800ec9e:	b29b      	uxth	r3, r3
 800eca0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eca4:	d10c      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 800ecaa:	2b06      	cmp	r3, #6
 800ecac:	d108      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecae:	693b      	ldr	r3, [r7, #16]
 800ecb0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800ecb2:	2b04      	cmp	r3, #4
 800ecb4:	d104      	bne.n	800ecc0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 800ecb6:	693b      	ldr	r3, [r7, #16]
 800ecb8:	885b      	ldrh	r3, [r3, #2]
 800ecba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 800ecbc:	2b08      	cmp	r3, #8
 800ecbe:	d003      	beq.n	800ecc8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f7f6 fb85 	bl	80053d0 <pbuf_free>
    return;
 800ecc6:	e05a      	b.n	800ed7e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	330e      	adds	r3, #14
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 800ecd0:	693b      	ldr	r3, [r7, #16]
 800ecd2:	3318      	adds	r3, #24
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ecd8:	683b      	ldr	r3, [r7, #0]
 800ecda:	3304      	adds	r3, #4
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d102      	bne.n	800ece8 <etharp_input+0x74>
    for_us = 0;
 800ece2:	2300      	movs	r3, #0
 800ece4:	75fb      	strb	r3, [r7, #23]
 800ece6:	e009      	b.n	800ecfc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 800ece8:	68ba      	ldr	r2, [r7, #8]
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	3304      	adds	r3, #4
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	429a      	cmp	r2, r3
 800ecf2:	bf0c      	ite	eq
 800ecf4:	2301      	moveq	r3, #1
 800ecf6:	2300      	movne	r3, #0
 800ecf8:	b2db      	uxtb	r3, r3
 800ecfa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	f103 0208 	add.w	r2, r3, #8
 800ed02:	7dfb      	ldrb	r3, [r7, #23]
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <etharp_input+0x98>
 800ed08:	2301      	movs	r3, #1
 800ed0a:	e000      	b.n	800ed0e <etharp_input+0x9a>
 800ed0c:	2302      	movs	r3, #2
 800ed0e:	f107 010c 	add.w	r1, r7, #12
 800ed12:	6838      	ldr	r0, [r7, #0]
 800ed14:	f7ff fed8 	bl	800eac8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 800ed18:	693b      	ldr	r3, [r7, #16]
 800ed1a:	88db      	ldrh	r3, [r3, #6]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ed22:	d003      	beq.n	800ed2c <etharp_input+0xb8>
 800ed24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ed28:	d01e      	beq.n	800ed68 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 800ed2a:	e025      	b.n	800ed78 <etharp_input+0x104>
      if (for_us) {
 800ed2c:	7dfb      	ldrb	r3, [r7, #23]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d021      	beq.n	800ed76 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 800ed44:	683b      	ldr	r3, [r7, #0]
 800ed46:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 800ed48:	693a      	ldr	r2, [r7, #16]
 800ed4a:	3208      	adds	r2, #8
        etharp_raw(netif,
 800ed4c:	2102      	movs	r1, #2
 800ed4e:	9103      	str	r1, [sp, #12]
 800ed50:	f107 010c 	add.w	r1, r7, #12
 800ed54:	9102      	str	r1, [sp, #8]
 800ed56:	9201      	str	r2, [sp, #4]
 800ed58:	9300      	str	r3, [sp, #0]
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4601      	mov	r1, r0
 800ed60:	6838      	ldr	r0, [r7, #0]
 800ed62:	f000 faef 	bl	800f344 <etharp_raw>
      break;
 800ed66:	e006      	b.n	800ed76 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 800ed68:	f107 030c 	add.w	r3, r7, #12
 800ed6c:	4619      	mov	r1, r3
 800ed6e:	6838      	ldr	r0, [r7, #0]
 800ed70:	f7fe f9ce 	bl	800d110 <dhcp_arp_reply>
      break;
 800ed74:	e000      	b.n	800ed78 <etharp_input+0x104>
      break;
 800ed76:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 800ed78:	6878      	ldr	r0, [r7, #4]
 800ed7a:	f7f6 fb29 	bl	80053d0 <pbuf_free>
}
 800ed7e:	3718      	adds	r7, #24
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bdb0      	pop	{r4, r5, r7, pc}
 800ed84:	08014258 	.word	0x08014258
 800ed88:	080143a8 	.word	0x080143a8
 800ed8c:	080142d0 	.word	0x080142d0

0800ed90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af02      	add	r7, sp, #8
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	4613      	mov	r3, r2
 800ed9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800ed9e:	79fa      	ldrb	r2, [r7, #7]
 800eda0:	4944      	ldr	r1, [pc, #272]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800eda2:	4613      	mov	r3, r2
 800eda4:	005b      	lsls	r3, r3, #1
 800eda6:	4413      	add	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	440b      	add	r3, r1
 800edac:	3314      	adds	r3, #20
 800edae:	781b      	ldrb	r3, [r3, #0]
 800edb0:	2b01      	cmp	r3, #1
 800edb2:	d806      	bhi.n	800edc2 <etharp_output_to_arp_index+0x32>
 800edb4:	4b40      	ldr	r3, [pc, #256]	; (800eeb8 <etharp_output_to_arp_index+0x128>)
 800edb6:	f240 22ef 	movw	r2, #751	; 0x2ef
 800edba:	4940      	ldr	r1, [pc, #256]	; (800eebc <etharp_output_to_arp_index+0x12c>)
 800edbc:	4840      	ldr	r0, [pc, #256]	; (800eec0 <etharp_output_to_arp_index+0x130>)
 800edbe:	f001 ff53 	bl	8010c68 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 800edc2:	79fa      	ldrb	r2, [r7, #7]
 800edc4:	493b      	ldr	r1, [pc, #236]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800edc6:	4613      	mov	r3, r2
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4413      	add	r3, r2
 800edcc:	00db      	lsls	r3, r3, #3
 800edce:	440b      	add	r3, r1
 800edd0:	3314      	adds	r3, #20
 800edd2:	781b      	ldrb	r3, [r3, #0]
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d153      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 800edd8:	79fa      	ldrb	r2, [r7, #7]
 800edda:	4936      	ldr	r1, [pc, #216]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800eddc:	4613      	mov	r3, r2
 800edde:	005b      	lsls	r3, r3, #1
 800ede0:	4413      	add	r3, r2
 800ede2:	00db      	lsls	r3, r3, #3
 800ede4:	440b      	add	r3, r1
 800ede6:	3312      	adds	r3, #18
 800ede8:	881b      	ldrh	r3, [r3, #0]
 800edea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 800edee:	d919      	bls.n	800ee24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 800edf0:	79fa      	ldrb	r2, [r7, #7]
 800edf2:	4613      	mov	r3, r2
 800edf4:	005b      	lsls	r3, r3, #1
 800edf6:	4413      	add	r3, r2
 800edf8:	00db      	lsls	r3, r3, #3
 800edfa:	4a2e      	ldr	r2, [pc, #184]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800edfc:	4413      	add	r3, r2
 800edfe:	3304      	adds	r3, #4
 800ee00:	4619      	mov	r1, r3
 800ee02:	68f8      	ldr	r0, [r7, #12]
 800ee04:	f000 fb4c 	bl	800f4a0 <etharp_request>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d138      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee0e:	79fa      	ldrb	r2, [r7, #7]
 800ee10:	4928      	ldr	r1, [pc, #160]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee12:	4613      	mov	r3, r2
 800ee14:	005b      	lsls	r3, r3, #1
 800ee16:	4413      	add	r3, r2
 800ee18:	00db      	lsls	r3, r3, #3
 800ee1a:	440b      	add	r3, r1
 800ee1c:	3314      	adds	r3, #20
 800ee1e:	2203      	movs	r2, #3
 800ee20:	701a      	strb	r2, [r3, #0]
 800ee22:	e02d      	b.n	800ee80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 800ee24:	79fa      	ldrb	r2, [r7, #7]
 800ee26:	4923      	ldr	r1, [pc, #140]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee28:	4613      	mov	r3, r2
 800ee2a:	005b      	lsls	r3, r3, #1
 800ee2c:	4413      	add	r3, r2
 800ee2e:	00db      	lsls	r3, r3, #3
 800ee30:	440b      	add	r3, r1
 800ee32:	3312      	adds	r3, #18
 800ee34:	881b      	ldrh	r3, [r3, #0]
 800ee36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800ee3a:	d321      	bcc.n	800ee80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800ee3c:	79fa      	ldrb	r2, [r7, #7]
 800ee3e:	4613      	mov	r3, r2
 800ee40:	005b      	lsls	r3, r3, #1
 800ee42:	4413      	add	r3, r2
 800ee44:	00db      	lsls	r3, r3, #3
 800ee46:	4a1b      	ldr	r2, [pc, #108]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee48:	4413      	add	r3, r2
 800ee4a:	1d19      	adds	r1, r3, #4
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	005b      	lsls	r3, r3, #1
 800ee52:	4413      	add	r3, r2
 800ee54:	00db      	lsls	r3, r3, #3
 800ee56:	3308      	adds	r3, #8
 800ee58:	4a16      	ldr	r2, [pc, #88]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee5a:	4413      	add	r3, r2
 800ee5c:	3304      	adds	r3, #4
 800ee5e:	461a      	mov	r2, r3
 800ee60:	68f8      	ldr	r0, [r7, #12]
 800ee62:	f000 fafb 	bl	800f45c <etharp_request_dst>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d109      	bne.n	800ee80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800ee6c:	79fa      	ldrb	r2, [r7, #7]
 800ee6e:	4911      	ldr	r1, [pc, #68]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee70:	4613      	mov	r3, r2
 800ee72:	005b      	lsls	r3, r3, #1
 800ee74:	4413      	add	r3, r2
 800ee76:	00db      	lsls	r3, r3, #3
 800ee78:	440b      	add	r3, r1
 800ee7a:	3314      	adds	r3, #20
 800ee7c:	2203      	movs	r2, #3
 800ee7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 800ee86:	79fa      	ldrb	r2, [r7, #7]
 800ee88:	4613      	mov	r3, r2
 800ee8a:	005b      	lsls	r3, r3, #1
 800ee8c:	4413      	add	r3, r2
 800ee8e:	00db      	lsls	r3, r3, #3
 800ee90:	3308      	adds	r3, #8
 800ee92:	4a08      	ldr	r2, [pc, #32]	; (800eeb4 <etharp_output_to_arp_index+0x124>)
 800ee94:	4413      	add	r3, r2
 800ee96:	1d1a      	adds	r2, r3, #4
 800ee98:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	4613      	mov	r3, r2
 800eea0:	460a      	mov	r2, r1
 800eea2:	68b9      	ldr	r1, [r7, #8]
 800eea4:	68f8      	ldr	r0, [r7, #12]
 800eea6:	f001 fe51 	bl	8010b4c <ethernet_output>
 800eeaa:	4603      	mov	r3, r0
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3710      	adds	r7, #16
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}
 800eeb4:	200005bc 	.word	0x200005bc
 800eeb8:	08014258 	.word	0x08014258
 800eebc:	080143c8 	.word	0x080143c8
 800eec0:	080142d0 	.word	0x080142d0

0800eec4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b08a      	sub	sp, #40	; 0x28
 800eec8:	af02      	add	r7, sp, #8
 800eeca:	60f8      	str	r0, [r7, #12]
 800eecc:	60b9      	str	r1, [r7, #8]
 800eece:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d106      	bne.n	800eee8 <etharp_output+0x24>
 800eeda:	4b73      	ldr	r3, [pc, #460]	; (800f0a8 <etharp_output+0x1e4>)
 800eedc:	f240 321e 	movw	r2, #798	; 0x31e
 800eee0:	4972      	ldr	r1, [pc, #456]	; (800f0ac <etharp_output+0x1e8>)
 800eee2:	4873      	ldr	r0, [pc, #460]	; (800f0b0 <etharp_output+0x1ec>)
 800eee4:	f001 fec0 	bl	8010c68 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <etharp_output+0x38>
 800eeee:	4b6e      	ldr	r3, [pc, #440]	; (800f0a8 <etharp_output+0x1e4>)
 800eef0:	f240 321f 	movw	r2, #799	; 0x31f
 800eef4:	496f      	ldr	r1, [pc, #444]	; (800f0b4 <etharp_output+0x1f0>)
 800eef6:	486e      	ldr	r0, [pc, #440]	; (800f0b0 <etharp_output+0x1ec>)
 800eef8:	f001 feb6 	bl	8010c68 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d106      	bne.n	800ef10 <etharp_output+0x4c>
 800ef02:	4b69      	ldr	r3, [pc, #420]	; (800f0a8 <etharp_output+0x1e4>)
 800ef04:	f44f 7248 	mov.w	r2, #800	; 0x320
 800ef08:	496b      	ldr	r1, [pc, #428]	; (800f0b8 <etharp_output+0x1f4>)
 800ef0a:	4869      	ldr	r0, [pc, #420]	; (800f0b0 <etharp_output+0x1ec>)
 800ef0c:	f001 feac 	bl	8010c68 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	68f9      	ldr	r1, [r7, #12]
 800ef16:	4618      	mov	r0, r3
 800ef18:	f000 ff14 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d002      	beq.n	800ef28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 800ef22:	4b66      	ldr	r3, [pc, #408]	; (800f0bc <etharp_output+0x1f8>)
 800ef24:	61fb      	str	r3, [r7, #28]
 800ef26:	e0af      	b.n	800f088 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ef30:	2be0      	cmp	r3, #224	; 0xe0
 800ef32:	d118      	bne.n	800ef66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 800ef34:	2301      	movs	r3, #1
 800ef36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 800ef38:	2300      	movs	r3, #0
 800ef3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800ef3c:	235e      	movs	r3, #94	; 0x5e
 800ef3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 800ef40:	687b      	ldr	r3, [r7, #4]
 800ef42:	3301      	adds	r3, #1
 800ef44:	781b      	ldrb	r3, [r3, #0]
 800ef46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	3302      	adds	r3, #2
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	3303      	adds	r3, #3
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800ef5e:	f107 0310 	add.w	r3, r7, #16
 800ef62:	61fb      	str	r3, [r7, #28]
 800ef64:	e090      	b.n	800f088 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	3304      	adds	r3, #4
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	405a      	eors	r2, r3
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	3308      	adds	r3, #8
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	4013      	ands	r3, r2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d012      	beq.n	800efa4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 800ef84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d00b      	beq.n	800efa4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	330c      	adds	r3, #12
 800ef90:	681b      	ldr	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d003      	beq.n	800ef9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	330c      	adds	r3, #12
 800ef9a:	61bb      	str	r3, [r7, #24]
 800ef9c:	e002      	b.n	800efa4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800ef9e:	f06f 0303 	mvn.w	r3, #3
 800efa2:	e07d      	b.n	800f0a0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efa4:	4b46      	ldr	r3, [pc, #280]	; (800f0c0 <etharp_output+0x1fc>)
 800efa6:	781b      	ldrb	r3, [r3, #0]
 800efa8:	4619      	mov	r1, r3
 800efaa:	4a46      	ldr	r2, [pc, #280]	; (800f0c4 <etharp_output+0x200>)
 800efac:	460b      	mov	r3, r1
 800efae:	005b      	lsls	r3, r3, #1
 800efb0:	440b      	add	r3, r1
 800efb2:	00db      	lsls	r3, r3, #3
 800efb4:	4413      	add	r3, r2
 800efb6:	3314      	adds	r3, #20
 800efb8:	781b      	ldrb	r3, [r3, #0]
 800efba:	2b01      	cmp	r3, #1
 800efbc:	d925      	bls.n	800f00a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 800efbe:	4b40      	ldr	r3, [pc, #256]	; (800f0c0 <etharp_output+0x1fc>)
 800efc0:	781b      	ldrb	r3, [r3, #0]
 800efc2:	4619      	mov	r1, r3
 800efc4:	4a3f      	ldr	r2, [pc, #252]	; (800f0c4 <etharp_output+0x200>)
 800efc6:	460b      	mov	r3, r1
 800efc8:	005b      	lsls	r3, r3, #1
 800efca:	440b      	add	r3, r1
 800efcc:	00db      	lsls	r3, r3, #3
 800efce:	4413      	add	r3, r2
 800efd0:	3308      	adds	r3, #8
 800efd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 800efd4:	68fa      	ldr	r2, [r7, #12]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d117      	bne.n	800f00a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 800efda:	69bb      	ldr	r3, [r7, #24]
 800efdc:	681a      	ldr	r2, [r3, #0]
 800efde:	4b38      	ldr	r3, [pc, #224]	; (800f0c0 <etharp_output+0x1fc>)
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	4618      	mov	r0, r3
 800efe4:	4937      	ldr	r1, [pc, #220]	; (800f0c4 <etharp_output+0x200>)
 800efe6:	4603      	mov	r3, r0
 800efe8:	005b      	lsls	r3, r3, #1
 800efea:	4403      	add	r3, r0
 800efec:	00db      	lsls	r3, r3, #3
 800efee:	440b      	add	r3, r1
 800eff0:	3304      	adds	r3, #4
 800eff2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 800eff4:	429a      	cmp	r2, r3
 800eff6:	d108      	bne.n	800f00a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 800eff8:	4b31      	ldr	r3, [pc, #196]	; (800f0c0 <etharp_output+0x1fc>)
 800effa:	781b      	ldrb	r3, [r3, #0]
 800effc:	461a      	mov	r2, r3
 800effe:	68b9      	ldr	r1, [r7, #8]
 800f000:	68f8      	ldr	r0, [r7, #12]
 800f002:	f7ff fec5 	bl	800ed90 <etharp_output_to_arp_index>
 800f006:	4603      	mov	r3, r0
 800f008:	e04a      	b.n	800f0a0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f00a:	2300      	movs	r3, #0
 800f00c:	75fb      	strb	r3, [r7, #23]
 800f00e:	e031      	b.n	800f074 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f010:	7dfa      	ldrb	r2, [r7, #23]
 800f012:	492c      	ldr	r1, [pc, #176]	; (800f0c4 <etharp_output+0x200>)
 800f014:	4613      	mov	r3, r2
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	4413      	add	r3, r2
 800f01a:	00db      	lsls	r3, r3, #3
 800f01c:	440b      	add	r3, r1
 800f01e:	3314      	adds	r3, #20
 800f020:	781b      	ldrb	r3, [r3, #0]
 800f022:	2b01      	cmp	r3, #1
 800f024:	d923      	bls.n	800f06e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 800f026:	7dfa      	ldrb	r2, [r7, #23]
 800f028:	4926      	ldr	r1, [pc, #152]	; (800f0c4 <etharp_output+0x200>)
 800f02a:	4613      	mov	r3, r2
 800f02c:	005b      	lsls	r3, r3, #1
 800f02e:	4413      	add	r3, r2
 800f030:	00db      	lsls	r3, r3, #3
 800f032:	440b      	add	r3, r1
 800f034:	3308      	adds	r3, #8
 800f036:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 800f038:	68fa      	ldr	r2, [r7, #12]
 800f03a:	429a      	cmp	r2, r3
 800f03c:	d117      	bne.n	800f06e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 800f03e:	69bb      	ldr	r3, [r7, #24]
 800f040:	6819      	ldr	r1, [r3, #0]
 800f042:	7dfa      	ldrb	r2, [r7, #23]
 800f044:	481f      	ldr	r0, [pc, #124]	; (800f0c4 <etharp_output+0x200>)
 800f046:	4613      	mov	r3, r2
 800f048:	005b      	lsls	r3, r3, #1
 800f04a:	4413      	add	r3, r2
 800f04c:	00db      	lsls	r3, r3, #3
 800f04e:	4403      	add	r3, r0
 800f050:	3304      	adds	r3, #4
 800f052:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 800f054:	4299      	cmp	r1, r3
 800f056:	d10a      	bne.n	800f06e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 800f058:	4a19      	ldr	r2, [pc, #100]	; (800f0c0 <etharp_output+0x1fc>)
 800f05a:	7dfb      	ldrb	r3, [r7, #23]
 800f05c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 800f05e:	7dfb      	ldrb	r3, [r7, #23]
 800f060:	461a      	mov	r2, r3
 800f062:	68b9      	ldr	r1, [r7, #8]
 800f064:	68f8      	ldr	r0, [r7, #12]
 800f066:	f7ff fe93 	bl	800ed90 <etharp_output_to_arp_index>
 800f06a:	4603      	mov	r3, r0
 800f06c:	e018      	b.n	800f0a0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 800f06e:	7dfb      	ldrb	r3, [r7, #23]
 800f070:	3301      	adds	r3, #1
 800f072:	75fb      	strb	r3, [r7, #23]
 800f074:	7dfb      	ldrb	r3, [r7, #23]
 800f076:	2b09      	cmp	r3, #9
 800f078:	d9ca      	bls.n	800f010 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 800f07a:	68ba      	ldr	r2, [r7, #8]
 800f07c:	69b9      	ldr	r1, [r7, #24]
 800f07e:	68f8      	ldr	r0, [r7, #12]
 800f080:	f000 f822 	bl	800f0c8 <etharp_query>
 800f084:	4603      	mov	r3, r0
 800f086:	e00b      	b.n	800f0a0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 800f08e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	69fb      	ldr	r3, [r7, #28]
 800f096:	68b9      	ldr	r1, [r7, #8]
 800f098:	68f8      	ldr	r0, [r7, #12]
 800f09a:	f001 fd57 	bl	8010b4c <ethernet_output>
 800f09e:	4603      	mov	r3, r0
}
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	3720      	adds	r7, #32
 800f0a4:	46bd      	mov	sp, r7
 800f0a6:	bd80      	pop	{r7, pc}
 800f0a8:	08014258 	.word	0x08014258
 800f0ac:	080143a8 	.word	0x080143a8
 800f0b0:	080142d0 	.word	0x080142d0
 800f0b4:	080143f8 	.word	0x080143f8
 800f0b8:	08014398 	.word	0x08014398
 800f0bc:	08014a1c 	.word	0x08014a1c
 800f0c0:	200006ac 	.word	0x200006ac
 800f0c4:	200005bc 	.word	0x200005bc

0800f0c8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08c      	sub	sp, #48	; 0x30
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	60f8      	str	r0, [r7, #12]
 800f0d0:	60b9      	str	r1, [r7, #8]
 800f0d2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	332a      	adds	r3, #42	; 0x2a
 800f0d8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 800f0da:	23ff      	movs	r3, #255	; 0xff
 800f0dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	68f9      	ldr	r1, [r7, #12]
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	f000 fe2a 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f0f0:	4603      	mov	r3, r0
 800f0f2:	2b00      	cmp	r3, #0
 800f0f4:	d10c      	bne.n	800f110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 800f0fe:	2be0      	cmp	r3, #224	; 0xe0
 800f100:	d006      	beq.n	800f110 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 800f102:	68bb      	ldr	r3, [r7, #8]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d003      	beq.n	800f110 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 800f108:	68bb      	ldr	r3, [r7, #8]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d102      	bne.n	800f116 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 800f110:	f06f 030f 	mvn.w	r3, #15
 800f114:	e102      	b.n	800f31c <etharp_query+0x254>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 800f116:	68fa      	ldr	r2, [r7, #12]
 800f118:	2101      	movs	r1, #1
 800f11a:	68b8      	ldr	r0, [r7, #8]
 800f11c:	f7ff fb5c 	bl	800e7d8 <etharp_find_entry>
 800f120:	4603      	mov	r3, r0
 800f122:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 800f124:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da02      	bge.n	800f132 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 800f12c:	8a7b      	ldrh	r3, [r7, #18]
 800f12e:	b25b      	sxtb	r3, r3
 800f130:	e0f4      	b.n	800f31c <etharp_query+0x254>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 800f132:	8a7b      	ldrh	r3, [r7, #18]
 800f134:	2b7e      	cmp	r3, #126	; 0x7e
 800f136:	d906      	bls.n	800f146 <etharp_query+0x7e>
 800f138:	4b7a      	ldr	r3, [pc, #488]	; (800f324 <etharp_query+0x25c>)
 800f13a:	f240 32c1 	movw	r2, #961	; 0x3c1
 800f13e:	497a      	ldr	r1, [pc, #488]	; (800f328 <etharp_query+0x260>)
 800f140:	487a      	ldr	r0, [pc, #488]	; (800f32c <etharp_query+0x264>)
 800f142:	f001 fd91 	bl	8010c68 <iprintf>
  i = (netif_addr_idx_t)i_err;
 800f146:	8a7b      	ldrh	r3, [r7, #18]
 800f148:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 800f14a:	7c7a      	ldrb	r2, [r7, #17]
 800f14c:	4978      	ldr	r1, [pc, #480]	; (800f330 <etharp_query+0x268>)
 800f14e:	4613      	mov	r3, r2
 800f150:	005b      	lsls	r3, r3, #1
 800f152:	4413      	add	r3, r2
 800f154:	00db      	lsls	r3, r3, #3
 800f156:	440b      	add	r3, r1
 800f158:	3314      	adds	r3, #20
 800f15a:	781b      	ldrb	r3, [r3, #0]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d115      	bne.n	800f18c <etharp_query+0xc4>
    is_new_entry = 1;
 800f160:	2301      	movs	r3, #1
 800f162:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 800f164:	7c7a      	ldrb	r2, [r7, #17]
 800f166:	4972      	ldr	r1, [pc, #456]	; (800f330 <etharp_query+0x268>)
 800f168:	4613      	mov	r3, r2
 800f16a:	005b      	lsls	r3, r3, #1
 800f16c:	4413      	add	r3, r2
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	440b      	add	r3, r1
 800f172:	3314      	adds	r3, #20
 800f174:	2201      	movs	r2, #1
 800f176:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 800f178:	7c7a      	ldrb	r2, [r7, #17]
 800f17a:	496d      	ldr	r1, [pc, #436]	; (800f330 <etharp_query+0x268>)
 800f17c:	4613      	mov	r3, r2
 800f17e:	005b      	lsls	r3, r3, #1
 800f180:	4413      	add	r3, r2
 800f182:	00db      	lsls	r3, r3, #3
 800f184:	440b      	add	r3, r1
 800f186:	3308      	adds	r3, #8
 800f188:	68fa      	ldr	r2, [r7, #12]
 800f18a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 800f18c:	7c7a      	ldrb	r2, [r7, #17]
 800f18e:	4968      	ldr	r1, [pc, #416]	; (800f330 <etharp_query+0x268>)
 800f190:	4613      	mov	r3, r2
 800f192:	005b      	lsls	r3, r3, #1
 800f194:	4413      	add	r3, r2
 800f196:	00db      	lsls	r3, r3, #3
 800f198:	440b      	add	r3, r1
 800f19a:	3314      	adds	r3, #20
 800f19c:	781b      	ldrb	r3, [r3, #0]
 800f19e:	2b01      	cmp	r3, #1
 800f1a0:	d011      	beq.n	800f1c6 <etharp_query+0xfe>
 800f1a2:	7c7a      	ldrb	r2, [r7, #17]
 800f1a4:	4962      	ldr	r1, [pc, #392]	; (800f330 <etharp_query+0x268>)
 800f1a6:	4613      	mov	r3, r2
 800f1a8:	005b      	lsls	r3, r3, #1
 800f1aa:	4413      	add	r3, r2
 800f1ac:	00db      	lsls	r3, r3, #3
 800f1ae:	440b      	add	r3, r1
 800f1b0:	3314      	adds	r3, #20
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b01      	cmp	r3, #1
 800f1b6:	d806      	bhi.n	800f1c6 <etharp_query+0xfe>
 800f1b8:	4b5a      	ldr	r3, [pc, #360]	; (800f324 <etharp_query+0x25c>)
 800f1ba:	f240 32cf 	movw	r2, #975	; 0x3cf
 800f1be:	495d      	ldr	r1, [pc, #372]	; (800f334 <etharp_query+0x26c>)
 800f1c0:	485a      	ldr	r0, [pc, #360]	; (800f32c <etharp_query+0x264>)
 800f1c2:	f001 fd51 	bl	8010c68 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 800f1c6:	6a3b      	ldr	r3, [r7, #32]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d102      	bne.n	800f1d2 <etharp_query+0x10a>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d10c      	bne.n	800f1ec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 800f1d2:	68b9      	ldr	r1, [r7, #8]
 800f1d4:	68f8      	ldr	r0, [r7, #12]
 800f1d6:	f000 f963 	bl	800f4a0 <etharp_request>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d102      	bne.n	800f1ec <etharp_query+0x124>
      return result;
 800f1e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1ea:	e097      	b.n	800f31c <etharp_query+0x254>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d106      	bne.n	800f200 <etharp_query+0x138>
 800f1f2:	4b4c      	ldr	r3, [pc, #304]	; (800f324 <etharp_query+0x25c>)
 800f1f4:	f240 32e1 	movw	r2, #993	; 0x3e1
 800f1f8:	494f      	ldr	r1, [pc, #316]	; (800f338 <etharp_query+0x270>)
 800f1fa:	484c      	ldr	r0, [pc, #304]	; (800f32c <etharp_query+0x264>)
 800f1fc:	f001 fd34 	bl	8010c68 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 800f200:	7c7a      	ldrb	r2, [r7, #17]
 800f202:	494b      	ldr	r1, [pc, #300]	; (800f330 <etharp_query+0x268>)
 800f204:	4613      	mov	r3, r2
 800f206:	005b      	lsls	r3, r3, #1
 800f208:	4413      	add	r3, r2
 800f20a:	00db      	lsls	r3, r3, #3
 800f20c:	440b      	add	r3, r1
 800f20e:	3314      	adds	r3, #20
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	2b01      	cmp	r3, #1
 800f214:	d918      	bls.n	800f248 <etharp_query+0x180>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 800f216:	4a49      	ldr	r2, [pc, #292]	; (800f33c <etharp_query+0x274>)
 800f218:	7c7b      	ldrb	r3, [r7, #17]
 800f21a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 800f21c:	7c7a      	ldrb	r2, [r7, #17]
 800f21e:	4613      	mov	r3, r2
 800f220:	005b      	lsls	r3, r3, #1
 800f222:	4413      	add	r3, r2
 800f224:	00db      	lsls	r3, r3, #3
 800f226:	3308      	adds	r3, #8
 800f228:	4a41      	ldr	r2, [pc, #260]	; (800f330 <etharp_query+0x268>)
 800f22a:	4413      	add	r3, r2
 800f22c:	1d1a      	adds	r2, r3, #4
 800f22e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f232:	9300      	str	r3, [sp, #0]
 800f234:	4613      	mov	r3, r2
 800f236:	697a      	ldr	r2, [r7, #20]
 800f238:	6879      	ldr	r1, [r7, #4]
 800f23a:	68f8      	ldr	r0, [r7, #12]
 800f23c:	f001 fc86 	bl	8010b4c <ethernet_output>
 800f240:	4603      	mov	r3, r0
 800f242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f246:	e067      	b.n	800f318 <etharp_query+0x250>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 800f248:	7c7a      	ldrb	r2, [r7, #17]
 800f24a:	4939      	ldr	r1, [pc, #228]	; (800f330 <etharp_query+0x268>)
 800f24c:	4613      	mov	r3, r2
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	4413      	add	r3, r2
 800f252:	00db      	lsls	r3, r3, #3
 800f254:	440b      	add	r3, r1
 800f256:	3314      	adds	r3, #20
 800f258:	781b      	ldrb	r3, [r3, #0]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d15c      	bne.n	800f318 <etharp_query+0x250>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 800f25e:	2300      	movs	r3, #0
 800f260:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f266:	e01c      	b.n	800f2a2 <etharp_query+0x1da>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 800f268:	69fb      	ldr	r3, [r7, #28]
 800f26a:	895a      	ldrh	r2, [r3, #10]
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	891b      	ldrh	r3, [r3, #8]
 800f270:	429a      	cmp	r2, r3
 800f272:	d10a      	bne.n	800f28a <etharp_query+0x1c2>
 800f274:	69fb      	ldr	r3, [r7, #28]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d006      	beq.n	800f28a <etharp_query+0x1c2>
 800f27c:	4b29      	ldr	r3, [pc, #164]	; (800f324 <etharp_query+0x25c>)
 800f27e:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800f282:	492f      	ldr	r1, [pc, #188]	; (800f340 <etharp_query+0x278>)
 800f284:	4829      	ldr	r0, [pc, #164]	; (800f32c <etharp_query+0x264>)
 800f286:	f001 fcef 	bl	8010c68 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 800f28a:	69fb      	ldr	r3, [r7, #28]
 800f28c:	7b1b      	ldrb	r3, [r3, #12]
 800f28e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f292:	2b00      	cmp	r3, #0
 800f294:	d002      	beq.n	800f29c <etharp_query+0x1d4>
        copy_needed = 1;
 800f296:	2301      	movs	r3, #1
 800f298:	61bb      	str	r3, [r7, #24]
        break;
 800f29a:	e005      	b.n	800f2a8 <etharp_query+0x1e0>
      }
      p = p->next;
 800f29c:	69fb      	ldr	r3, [r7, #28]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	61fb      	str	r3, [r7, #28]
    while (p) {
 800f2a2:	69fb      	ldr	r3, [r7, #28]
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	d1df      	bne.n	800f268 <etharp_query+0x1a0>
    }
    if (copy_needed) {
 800f2a8:	69bb      	ldr	r3, [r7, #24]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	d007      	beq.n	800f2be <etharp_query+0x1f6>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 800f2ae:	687a      	ldr	r2, [r7, #4]
 800f2b0:	f44f 7120 	mov.w	r1, #640	; 0x280
 800f2b4:	200e      	movs	r0, #14
 800f2b6:	f7f6 fc2f 	bl	8005b18 <pbuf_clone>
 800f2ba:	61f8      	str	r0, [r7, #28]
 800f2bc:	e004      	b.n	800f2c8 <etharp_query+0x200>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 800f2c2:	69f8      	ldr	r0, [r7, #28]
 800f2c4:	f7f6 f924 	bl	8005510 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d021      	beq.n	800f312 <etharp_query+0x24a>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 800f2ce:	7c7a      	ldrb	r2, [r7, #17]
 800f2d0:	4917      	ldr	r1, [pc, #92]	; (800f330 <etharp_query+0x268>)
 800f2d2:	4613      	mov	r3, r2
 800f2d4:	005b      	lsls	r3, r3, #1
 800f2d6:	4413      	add	r3, r2
 800f2d8:	00db      	lsls	r3, r3, #3
 800f2da:	440b      	add	r3, r1
 800f2dc:	681b      	ldr	r3, [r3, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d00a      	beq.n	800f2f8 <etharp_query+0x230>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 800f2e2:	7c7a      	ldrb	r2, [r7, #17]
 800f2e4:	4912      	ldr	r1, [pc, #72]	; (800f330 <etharp_query+0x268>)
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	00db      	lsls	r3, r3, #3
 800f2ee:	440b      	add	r3, r1
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	4618      	mov	r0, r3
 800f2f4:	f7f6 f86c 	bl	80053d0 <pbuf_free>
      }
      arp_table[i].q = p;
 800f2f8:	7c7a      	ldrb	r2, [r7, #17]
 800f2fa:	490d      	ldr	r1, [pc, #52]	; (800f330 <etharp_query+0x268>)
 800f2fc:	4613      	mov	r3, r2
 800f2fe:	005b      	lsls	r3, r3, #1
 800f300:	4413      	add	r3, r2
 800f302:	00db      	lsls	r3, r3, #3
 800f304:	440b      	add	r3, r1
 800f306:	69fa      	ldr	r2, [r7, #28]
 800f308:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 800f30a:	2300      	movs	r3, #0
 800f30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f310:	e002      	b.n	800f318 <etharp_query+0x250>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 800f312:	23ff      	movs	r3, #255	; 0xff
 800f314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 800f318:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800f31c:	4618      	mov	r0, r3
 800f31e:	3728      	adds	r7, #40	; 0x28
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	08014258 	.word	0x08014258
 800f328:	08014404 	.word	0x08014404
 800f32c:	080142d0 	.word	0x080142d0
 800f330:	200005bc 	.word	0x200005bc
 800f334:	08014414 	.word	0x08014414
 800f338:	080143f8 	.word	0x080143f8
 800f33c:	200006ac 	.word	0x200006ac
 800f340:	0801443c 	.word	0x0801443c

0800f344 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 800f344:	b580      	push	{r7, lr}
 800f346:	b08a      	sub	sp, #40	; 0x28
 800f348:	af02      	add	r7, sp, #8
 800f34a:	60f8      	str	r0, [r7, #12]
 800f34c:	60b9      	str	r1, [r7, #8]
 800f34e:	607a      	str	r2, [r7, #4]
 800f350:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 800f352:	2300      	movs	r3, #0
 800f354:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d106      	bne.n	800f36a <etharp_raw+0x26>
 800f35c:	4b3a      	ldr	r3, [pc, #232]	; (800f448 <etharp_raw+0x104>)
 800f35e:	f240 4257 	movw	r2, #1111	; 0x457
 800f362:	493a      	ldr	r1, [pc, #232]	; (800f44c <etharp_raw+0x108>)
 800f364:	483a      	ldr	r0, [pc, #232]	; (800f450 <etharp_raw+0x10c>)
 800f366:	f001 fc7f 	bl	8010c68 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 800f36a:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f36e:	211c      	movs	r1, #28
 800f370:	200e      	movs	r0, #14
 800f372:	f7f5 fd4d 	bl	8004e10 <pbuf_alloc>
 800f376:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 800f378:	69bb      	ldr	r3, [r7, #24]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d102      	bne.n	800f384 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 800f37e:	f04f 33ff 	mov.w	r3, #4294967295
 800f382:	e05d      	b.n	800f440 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	895b      	ldrh	r3, [r3, #10]
 800f388:	2b1b      	cmp	r3, #27
 800f38a:	d806      	bhi.n	800f39a <etharp_raw+0x56>
 800f38c:	4b2e      	ldr	r3, [pc, #184]	; (800f448 <etharp_raw+0x104>)
 800f38e:	f240 4263 	movw	r2, #1123	; 0x463
 800f392:	4930      	ldr	r1, [pc, #192]	; (800f454 <etharp_raw+0x110>)
 800f394:	482e      	ldr	r0, [pc, #184]	; (800f450 <etharp_raw+0x10c>)
 800f396:	f001 fc67 	bl	8010c68 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 800f39a:	69bb      	ldr	r3, [r7, #24]
 800f39c:	685b      	ldr	r3, [r3, #4]
 800f39e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 800f3a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	f7f4 fa04 	bl	80037b0 <lwip_htons>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f3b6:	2b06      	cmp	r3, #6
 800f3b8:	d006      	beq.n	800f3c8 <etharp_raw+0x84>
 800f3ba:	4b23      	ldr	r3, [pc, #140]	; (800f448 <etharp_raw+0x104>)
 800f3bc:	f240 426a 	movw	r2, #1130	; 0x46a
 800f3c0:	4925      	ldr	r1, [pc, #148]	; (800f458 <etharp_raw+0x114>)
 800f3c2:	4823      	ldr	r0, [pc, #140]	; (800f450 <etharp_raw+0x10c>)
 800f3c4:	f001 fc50 	bl	8010c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 800f3c8:	697b      	ldr	r3, [r7, #20]
 800f3ca:	3308      	adds	r3, #8
 800f3cc:	2206      	movs	r2, #6
 800f3ce:	6839      	ldr	r1, [r7, #0]
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f001 fc36 	bl	8010c42 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 800f3d6:	697b      	ldr	r3, [r7, #20]
 800f3d8:	3312      	adds	r3, #18
 800f3da:	2206      	movs	r2, #6
 800f3dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f001 fc2f 	bl	8010c42 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 800f3e4:	697b      	ldr	r3, [r7, #20]
 800f3e6:	330e      	adds	r3, #14
 800f3e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f3ea:	6812      	ldr	r2, [r2, #0]
 800f3ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	3318      	adds	r3, #24
 800f3f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3f4:	6812      	ldr	r2, [r2, #0]
 800f3f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 800f3f8:	697b      	ldr	r3, [r7, #20]
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	701a      	strb	r2, [r3, #0]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f042 0201 	orr.w	r2, r2, #1
 800f404:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 800f406:	697b      	ldr	r3, [r7, #20]
 800f408:	2200      	movs	r2, #0
 800f40a:	f042 0208 	orr.w	r2, r2, #8
 800f40e:	709a      	strb	r2, [r3, #2]
 800f410:	2200      	movs	r2, #0
 800f412:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	2206      	movs	r2, #6
 800f418:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	2204      	movs	r2, #4
 800f41e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 800f420:	f640 0306 	movw	r3, #2054	; 0x806
 800f424:	9300      	str	r3, [sp, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	68ba      	ldr	r2, [r7, #8]
 800f42a:	69b9      	ldr	r1, [r7, #24]
 800f42c:	68f8      	ldr	r0, [r7, #12]
 800f42e:	f001 fb8d 	bl	8010b4c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 800f432:	69b8      	ldr	r0, [r7, #24]
 800f434:	f7f5 ffcc 	bl	80053d0 <pbuf_free>
  p = NULL;
 800f438:	2300      	movs	r3, #0
 800f43a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 800f43c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f440:	4618      	mov	r0, r3
 800f442:	3720      	adds	r7, #32
 800f444:	46bd      	mov	sp, r7
 800f446:	bd80      	pop	{r7, pc}
 800f448:	08014258 	.word	0x08014258
 800f44c:	080143a8 	.word	0x080143a8
 800f450:	080142d0 	.word	0x080142d0
 800f454:	08014458 	.word	0x08014458
 800f458:	0801448c 	.word	0x0801448c

0800f45c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 800f45c:	b580      	push	{r7, lr}
 800f45e:	b088      	sub	sp, #32
 800f460:	af04      	add	r7, sp, #16
 800f462:	60f8      	str	r0, [r7, #12]
 800f464:	60b9      	str	r1, [r7, #8]
 800f466:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f468:	68fb      	ldr	r3, [r7, #12]
 800f46a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 800f46e:	68fb      	ldr	r3, [r7, #12]
 800f470:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 800f478:	2201      	movs	r2, #1
 800f47a:	9203      	str	r2, [sp, #12]
 800f47c:	68ba      	ldr	r2, [r7, #8]
 800f47e:	9202      	str	r2, [sp, #8]
 800f480:	4a06      	ldr	r2, [pc, #24]	; (800f49c <etharp_request_dst+0x40>)
 800f482:	9201      	str	r2, [sp, #4]
 800f484:	9300      	str	r3, [sp, #0]
 800f486:	4603      	mov	r3, r0
 800f488:	687a      	ldr	r2, [r7, #4]
 800f48a:	68f8      	ldr	r0, [r7, #12]
 800f48c:	f7ff ff5a 	bl	800f344 <etharp_raw>
 800f490:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 800f492:	4618      	mov	r0, r3
 800f494:	3710      	adds	r7, #16
 800f496:	46bd      	mov	sp, r7
 800f498:	bd80      	pop	{r7, pc}
 800f49a:	bf00      	nop
 800f49c:	08014a24 	.word	0x08014a24

0800f4a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
 800f4a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 800f4aa:	4a05      	ldr	r2, [pc, #20]	; (800f4c0 <etharp_request+0x20>)
 800f4ac:	6839      	ldr	r1, [r7, #0]
 800f4ae:	6878      	ldr	r0, [r7, #4]
 800f4b0:	f7ff ffd4 	bl	800f45c <etharp_request_dst>
 800f4b4:	4603      	mov	r3, r0
}
 800f4b6:	4618      	mov	r0, r3
 800f4b8:	3708      	adds	r7, #8
 800f4ba:	46bd      	mov	sp, r7
 800f4bc:	bd80      	pop	{r7, pc}
 800f4be:	bf00      	nop
 800f4c0:	08014a1c 	.word	0x08014a1c

0800f4c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b08e      	sub	sp, #56	; 0x38
 800f4c8:	af04      	add	r7, sp, #16
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 800f4ce:	4b79      	ldr	r3, [pc, #484]	; (800f6b4 <icmp_input+0x1f0>)
 800f4d0:	689b      	ldr	r3, [r3, #8]
 800f4d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 800f4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	f003 030f 	and.w	r3, r3, #15
 800f4dc:	b2db      	uxtb	r3, r3
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	b2db      	uxtb	r3, r3
 800f4e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 800f4e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f4e6:	2b13      	cmp	r3, #19
 800f4e8:	f240 80cd 	bls.w	800f686 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	895b      	ldrh	r3, [r3, #10]
 800f4f0:	2b03      	cmp	r3, #3
 800f4f2:	f240 80ca 	bls.w	800f68a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	685b      	ldr	r3, [r3, #4]
 800f4fa:	781b      	ldrb	r3, [r3, #0]
 800f4fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 800f500:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800f504:	2b00      	cmp	r3, #0
 800f506:	f000 80b7 	beq.w	800f678 <icmp_input+0x1b4>
 800f50a:	2b08      	cmp	r3, #8
 800f50c:	f040 80b7 	bne.w	800f67e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 800f510:	4b69      	ldr	r3, [pc, #420]	; (800f6b8 <icmp_input+0x1f4>)
 800f512:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f514:	4b67      	ldr	r3, [pc, #412]	; (800f6b4 <icmp_input+0x1f0>)
 800f516:	695b      	ldr	r3, [r3, #20]
 800f518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f51c:	2be0      	cmp	r3, #224	; 0xe0
 800f51e:	f000 80bb 	beq.w	800f698 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 800f522:	4b64      	ldr	r3, [pc, #400]	; (800f6b4 <icmp_input+0x1f0>)
 800f524:	695a      	ldr	r2, [r3, #20]
 800f526:	4b63      	ldr	r3, [pc, #396]	; (800f6b4 <icmp_input+0x1f0>)
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	4619      	mov	r1, r3
 800f52c:	4610      	mov	r0, r2
 800f52e:	f000 fc09 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f532:	4603      	mov	r3, r0
 800f534:	2b00      	cmp	r3, #0
 800f536:	f040 80b1 	bne.w	800f69c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	891b      	ldrh	r3, [r3, #8]
 800f53e:	2b07      	cmp	r3, #7
 800f540:	f240 80a5 	bls.w	800f68e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f544:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f546:	330e      	adds	r3, #14
 800f548:	4619      	mov	r1, r3
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7f5 feaa 	bl	80052a4 <pbuf_add_header>
 800f550:	4603      	mov	r3, r0
 800f552:	2b00      	cmp	r3, #0
 800f554:	d04b      	beq.n	800f5ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	891a      	ldrh	r2, [r3, #8]
 800f55a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f55c:	4413      	add	r3, r2
 800f55e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	891b      	ldrh	r3, [r3, #8]
 800f564:	8b7a      	ldrh	r2, [r7, #26]
 800f566:	429a      	cmp	r2, r3
 800f568:	f0c0 809a 	bcc.w	800f6a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 800f56c:	8b7b      	ldrh	r3, [r7, #26]
 800f56e:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f572:	4619      	mov	r1, r3
 800f574:	200e      	movs	r0, #14
 800f576:	f7f5 fc4b 	bl	8004e10 <pbuf_alloc>
 800f57a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 800f57c:	697b      	ldr	r3, [r7, #20]
 800f57e:	2b00      	cmp	r3, #0
 800f580:	f000 8090 	beq.w	800f6a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 800f584:	697b      	ldr	r3, [r7, #20]
 800f586:	895b      	ldrh	r3, [r3, #10]
 800f588:	461a      	mov	r2, r3
 800f58a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f58c:	3308      	adds	r3, #8
 800f58e:	429a      	cmp	r2, r3
 800f590:	d203      	bcs.n	800f59a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 800f592:	6978      	ldr	r0, [r7, #20]
 800f594:	f7f5 ff1c 	bl	80053d0 <pbuf_free>
          goto icmperr;
 800f598:	e085      	b.n	800f6a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	685b      	ldr	r3, [r3, #4]
 800f59e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f5a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f001 fb4d 	bl	8010c42 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 800f5a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5aa:	4619      	mov	r1, r3
 800f5ac:	6978      	ldr	r0, [r7, #20]
 800f5ae:	f7f5 fe89 	bl	80052c4 <pbuf_remove_header>
 800f5b2:	4603      	mov	r3, r0
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d009      	beq.n	800f5cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 800f5b8:	4b40      	ldr	r3, [pc, #256]	; (800f6bc <icmp_input+0x1f8>)
 800f5ba:	22b6      	movs	r2, #182	; 0xb6
 800f5bc:	4940      	ldr	r1, [pc, #256]	; (800f6c0 <icmp_input+0x1fc>)
 800f5be:	4841      	ldr	r0, [pc, #260]	; (800f6c4 <icmp_input+0x200>)
 800f5c0:	f001 fb52 	bl	8010c68 <iprintf>
          pbuf_free(r);
 800f5c4:	6978      	ldr	r0, [r7, #20]
 800f5c6:	f7f5 ff03 	bl	80053d0 <pbuf_free>
          goto icmperr;
 800f5ca:	e06c      	b.n	800f6a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 800f5cc:	6879      	ldr	r1, [r7, #4]
 800f5ce:	6978      	ldr	r0, [r7, #20]
 800f5d0:	f7f6 f826 	bl	8005620 <pbuf_copy>
 800f5d4:	4603      	mov	r3, r0
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d003      	beq.n	800f5e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 800f5da:	6978      	ldr	r0, [r7, #20]
 800f5dc:	f7f5 fef8 	bl	80053d0 <pbuf_free>
          goto icmperr;
 800f5e0:	e061      	b.n	800f6a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 800f5e2:	6878      	ldr	r0, [r7, #4]
 800f5e4:	f7f5 fef4 	bl	80053d0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 800f5e8:	697b      	ldr	r3, [r7, #20]
 800f5ea:	607b      	str	r3, [r7, #4]
 800f5ec:	e00f      	b.n	800f60e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 800f5ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f5f0:	330e      	adds	r3, #14
 800f5f2:	4619      	mov	r1, r3
 800f5f4:	6878      	ldr	r0, [r7, #4]
 800f5f6:	f7f5 fe65 	bl	80052c4 <pbuf_remove_header>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d006      	beq.n	800f60e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 800f600:	4b2e      	ldr	r3, [pc, #184]	; (800f6bc <icmp_input+0x1f8>)
 800f602:	22c7      	movs	r2, #199	; 0xc7
 800f604:	4930      	ldr	r1, [pc, #192]	; (800f6c8 <icmp_input+0x204>)
 800f606:	482f      	ldr	r0, [pc, #188]	; (800f6c4 <icmp_input+0x200>)
 800f608:	f001 fb2e 	bl	8010c68 <iprintf>
          goto icmperr;
 800f60c:	e04b      	b.n	800f6a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 800f614:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f7f5 fe43 	bl	80052a4 <pbuf_add_header>
 800f61e:	4603      	mov	r3, r0
 800f620:	2b00      	cmp	r3, #0
 800f622:	d12b      	bne.n	800f67c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	685b      	ldr	r3, [r3, #4]
 800f628:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 800f62a:	69fb      	ldr	r3, [r7, #28]
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800f632:	4b20      	ldr	r3, [pc, #128]	; (800f6b4 <icmp_input+0x1f0>)
 800f634:	691a      	ldr	r2, [r3, #16]
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 800f640:	693b      	ldr	r3, [r7, #16]
 800f642:	2200      	movs	r2, #0
 800f644:	709a      	strb	r2, [r3, #2]
 800f646:	2200      	movs	r2, #0
 800f648:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	22ff      	movs	r2, #255	; 0xff
 800f64e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	2200      	movs	r2, #0
 800f654:	729a      	strb	r2, [r3, #10]
 800f656:	2200      	movs	r2, #0
 800f658:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800f65a:	683b      	ldr	r3, [r7, #0]
 800f65c:	9302      	str	r3, [sp, #8]
 800f65e:	2301      	movs	r3, #1
 800f660:	9301      	str	r3, [sp, #4]
 800f662:	2300      	movs	r3, #0
 800f664:	9300      	str	r3, [sp, #0]
 800f666:	23ff      	movs	r3, #255	; 0xff
 800f668:	2200      	movs	r2, #0
 800f66a:	69f9      	ldr	r1, [r7, #28]
 800f66c:	6878      	ldr	r0, [r7, #4]
 800f66e:	f000 fa91 	bl	800fb94 <ip4_output_if>
 800f672:	4603      	mov	r3, r0
 800f674:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 800f676:	e001      	b.n	800f67c <icmp_input+0x1b8>
      break;
 800f678:	bf00      	nop
 800f67a:	e000      	b.n	800f67e <icmp_input+0x1ba>
      break;
 800f67c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800f67e:	6878      	ldr	r0, [r7, #4]
 800f680:	f7f5 fea6 	bl	80053d0 <pbuf_free>
  return;
 800f684:	e013      	b.n	800f6ae <icmp_input+0x1ea>
    goto lenerr;
 800f686:	bf00      	nop
 800f688:	e002      	b.n	800f690 <icmp_input+0x1cc>
    goto lenerr;
 800f68a:	bf00      	nop
 800f68c:	e000      	b.n	800f690 <icmp_input+0x1cc>
        goto lenerr;
 800f68e:	bf00      	nop
lenerr:
  pbuf_free(p);
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f7f5 fe9d 	bl	80053d0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f696:	e00a      	b.n	800f6ae <icmp_input+0x1ea>
        goto icmperr;
 800f698:	bf00      	nop
 800f69a:	e004      	b.n	800f6a6 <icmp_input+0x1e2>
        goto icmperr;
 800f69c:	bf00      	nop
 800f69e:	e002      	b.n	800f6a6 <icmp_input+0x1e2>
          goto icmperr;
 800f6a0:	bf00      	nop
 800f6a2:	e000      	b.n	800f6a6 <icmp_input+0x1e2>
          goto icmperr;
 800f6a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f7f5 fe92 	bl	80053d0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800f6ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800f6ae:	3728      	adds	r7, #40	; 0x28
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	200038f0 	.word	0x200038f0
 800f6b8:	20003904 	.word	0x20003904
 800f6bc:	080144d0 	.word	0x080144d0
 800f6c0:	08014508 	.word	0x08014508
 800f6c4:	08014540 	.word	0x08014540
 800f6c8:	08014568 	.word	0x08014568

0800f6cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800f6cc:	b580      	push	{r7, lr}
 800f6ce:	b082      	sub	sp, #8
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	6078      	str	r0, [r7, #4]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800f6d8:	78fb      	ldrb	r3, [r7, #3]
 800f6da:	461a      	mov	r2, r3
 800f6dc:	2103      	movs	r1, #3
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 f814 	bl	800f70c <icmp_send_response>
}
 800f6e4:	bf00      	nop
 800f6e6:	3708      	adds	r7, #8
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	bd80      	pop	{r7, pc}

0800f6ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b082      	sub	sp, #8
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800f6f8:	78fb      	ldrb	r3, [r7, #3]
 800f6fa:	461a      	mov	r2, r3
 800f6fc:	210b      	movs	r1, #11
 800f6fe:	6878      	ldr	r0, [r7, #4]
 800f700:	f000 f804 	bl	800f70c <icmp_send_response>
}
 800f704:	bf00      	nop
 800f706:	3708      	adds	r7, #8
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b08c      	sub	sp, #48	; 0x30
 800f710:	af04      	add	r7, sp, #16
 800f712:	6078      	str	r0, [r7, #4]
 800f714:	460b      	mov	r3, r1
 800f716:	70fb      	strb	r3, [r7, #3]
 800f718:	4613      	mov	r3, r2
 800f71a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800f71c:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f720:	2124      	movs	r1, #36	; 0x24
 800f722:	2022      	movs	r0, #34	; 0x22
 800f724:	f7f5 fb74 	bl	8004e10 <pbuf_alloc>
 800f728:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800f72a:	69fb      	ldr	r3, [r7, #28]
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d04c      	beq.n	800f7ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800f730:	69fb      	ldr	r3, [r7, #28]
 800f732:	895b      	ldrh	r3, [r3, #10]
 800f734:	2b23      	cmp	r3, #35	; 0x23
 800f736:	d806      	bhi.n	800f746 <icmp_send_response+0x3a>
 800f738:	4b26      	ldr	r3, [pc, #152]	; (800f7d4 <icmp_send_response+0xc8>)
 800f73a:	f240 1269 	movw	r2, #361	; 0x169
 800f73e:	4926      	ldr	r1, [pc, #152]	; (800f7d8 <icmp_send_response+0xcc>)
 800f740:	4826      	ldr	r0, [pc, #152]	; (800f7dc <icmp_send_response+0xd0>)
 800f742:	f001 fa91 	bl	8010c68 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	685b      	ldr	r3, [r3, #4]
 800f74a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800f752:	697b      	ldr	r3, [r7, #20]
 800f754:	78fa      	ldrb	r2, [r7, #3]
 800f756:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800f758:	697b      	ldr	r3, [r7, #20]
 800f75a:	78ba      	ldrb	r2, [r7, #2]
 800f75c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800f75e:	697b      	ldr	r3, [r7, #20]
 800f760:	2200      	movs	r2, #0
 800f762:	711a      	strb	r2, [r3, #4]
 800f764:	2200      	movs	r2, #0
 800f766:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	2200      	movs	r2, #0
 800f76c:	719a      	strb	r2, [r3, #6]
 800f76e:	2200      	movs	r2, #0
 800f770:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800f772:	69fb      	ldr	r3, [r7, #28]
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	f103 0008 	add.w	r0, r3, #8
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	221c      	movs	r2, #28
 800f780:	4619      	mov	r1, r3
 800f782:	f001 fa5e 	bl	8010c42 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800f786:	69bb      	ldr	r3, [r7, #24]
 800f788:	68db      	ldr	r3, [r3, #12]
 800f78a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 800f78c:	f107 030c 	add.w	r3, r7, #12
 800f790:	4618      	mov	r0, r3
 800f792:	f000 f825 	bl	800f7e0 <ip4_route>
 800f796:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800f798:	693b      	ldr	r3, [r7, #16]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	d011      	beq.n	800f7c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800f79e:	697b      	ldr	r3, [r7, #20]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	709a      	strb	r2, [r3, #2]
 800f7a4:	2200      	movs	r2, #0
 800f7a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800f7a8:	f107 020c 	add.w	r2, r7, #12
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	9302      	str	r3, [sp, #8]
 800f7b0:	2301      	movs	r3, #1
 800f7b2:	9301      	str	r3, [sp, #4]
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	9300      	str	r3, [sp, #0]
 800f7b8:	23ff      	movs	r3, #255	; 0xff
 800f7ba:	2100      	movs	r1, #0
 800f7bc:	69f8      	ldr	r0, [r7, #28]
 800f7be:	f000 f9e9 	bl	800fb94 <ip4_output_if>
  }
  pbuf_free(q);
 800f7c2:	69f8      	ldr	r0, [r7, #28]
 800f7c4:	f7f5 fe04 	bl	80053d0 <pbuf_free>
 800f7c8:	e000      	b.n	800f7cc <icmp_send_response+0xc0>
    return;
 800f7ca:	bf00      	nop
}
 800f7cc:	3720      	adds	r7, #32
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	080144d0 	.word	0x080144d0
 800f7d8:	0801459c 	.word	0x0801459c
 800f7dc:	08014540 	.word	0x08014540

0800f7e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800f7e0:	b480      	push	{r7}
 800f7e2:	b085      	sub	sp, #20
 800f7e4:	af00      	add	r7, sp, #0
 800f7e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 800f7e8:	4b33      	ldr	r3, [pc, #204]	; (800f8b8 <ip4_route+0xd8>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	e036      	b.n	800f85e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f7f6:	f003 0301 	and.w	r3, r3, #1
 800f7fa:	b2db      	uxtb	r3, r3
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d02b      	beq.n	800f858 <ip4_route+0x78>
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f806:	089b      	lsrs	r3, r3, #2
 800f808:	f003 0301 	and.w	r3, r3, #1
 800f80c:	b2db      	uxtb	r3, r3
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d022      	beq.n	800f858 <ip4_route+0x78>
 800f812:	68fb      	ldr	r3, [r7, #12]
 800f814:	3304      	adds	r3, #4
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d01d      	beq.n	800f858 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	681a      	ldr	r2, [r3, #0]
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	3304      	adds	r3, #4
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	405a      	eors	r2, r3
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	3308      	adds	r3, #8
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	4013      	ands	r3, r2
 800f830:	2b00      	cmp	r3, #0
 800f832:	d101      	bne.n	800f838 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	e038      	b.n	800f8aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f83e:	f003 0302 	and.w	r3, r3, #2
 800f842:	2b00      	cmp	r3, #0
 800f844:	d108      	bne.n	800f858 <ip4_route+0x78>
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681a      	ldr	r2, [r3, #0]
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	330c      	adds	r3, #12
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	429a      	cmp	r2, r3
 800f852:	d101      	bne.n	800f858 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	e028      	b.n	800f8aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	60fb      	str	r3, [r7, #12]
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d1c5      	bne.n	800f7f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f864:	4b15      	ldr	r3, [pc, #84]	; (800f8bc <ip4_route+0xdc>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d01a      	beq.n	800f8a2 <ip4_route+0xc2>
 800f86c:	4b13      	ldr	r3, [pc, #76]	; (800f8bc <ip4_route+0xdc>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f874:	f003 0301 	and.w	r3, r3, #1
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d012      	beq.n	800f8a2 <ip4_route+0xc2>
 800f87c:	4b0f      	ldr	r3, [pc, #60]	; (800f8bc <ip4_route+0xdc>)
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f884:	f003 0304 	and.w	r3, r3, #4
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00a      	beq.n	800f8a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f88c:	4b0b      	ldr	r3, [pc, #44]	; (800f8bc <ip4_route+0xdc>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	3304      	adds	r3, #4
 800f892:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800f894:	2b00      	cmp	r3, #0
 800f896:	d004      	beq.n	800f8a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	681b      	ldr	r3, [r3, #0]
 800f89c:	b2db      	uxtb	r3, r3
 800f89e:	2b7f      	cmp	r3, #127	; 0x7f
 800f8a0:	d101      	bne.n	800f8a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e001      	b.n	800f8aa <ip4_route+0xca>
  }

  return netif_default;
 800f8a6:	4b05      	ldr	r3, [pc, #20]	; (800f8bc <ip4_route+0xdc>)
 800f8a8:	681b      	ldr	r3, [r3, #0]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3714      	adds	r7, #20
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	20006e54 	.word	0x20006e54
 800f8bc:	20006e58 	.word	0x20006e58

0800f8c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b082      	sub	sp, #8
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f8ce:	f003 0301 	and.w	r3, r3, #1
 800f8d2:	b2db      	uxtb	r3, r3
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d016      	beq.n	800f906 <ip4_input_accept+0x46>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	3304      	adds	r3, #4
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d011      	beq.n	800f906 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f8e2:	4b0b      	ldr	r3, [pc, #44]	; (800f910 <ip4_input_accept+0x50>)
 800f8e4:	695a      	ldr	r2, [r3, #20]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	3304      	adds	r3, #4
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	429a      	cmp	r2, r3
 800f8ee:	d008      	beq.n	800f902 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800f8f0:	4b07      	ldr	r3, [pc, #28]	; (800f910 <ip4_input_accept+0x50>)
 800f8f2:	695b      	ldr	r3, [r3, #20]
 800f8f4:	6879      	ldr	r1, [r7, #4]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f000 fa24 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800f8fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 800f902:	2301      	movs	r3, #1
 800f904:	e000      	b.n	800f908 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 800f906:	2300      	movs	r3, #0
}
 800f908:	4618      	mov	r0, r3
 800f90a:	3708      	adds	r7, #8
 800f90c:	46bd      	mov	sp, r7
 800f90e:	bd80      	pop	{r7, pc}
 800f910:	200038f0 	.word	0x200038f0

0800f914 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b088      	sub	sp, #32
 800f918:	af00      	add	r7, sp, #0
 800f91a:	6078      	str	r0, [r7, #4]
 800f91c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 800f91e:	2301      	movs	r3, #1
 800f920:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	685b      	ldr	r3, [r3, #4]
 800f926:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 800f928:	69fb      	ldr	r3, [r7, #28]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	091b      	lsrs	r3, r3, #4
 800f92e:	b2db      	uxtb	r3, r3
 800f930:	2b04      	cmp	r3, #4
 800f932:	d004      	beq.n	800f93e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	f7f5 fd4b 	bl	80053d0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800f93a:	2300      	movs	r3, #0
 800f93c:	e121      	b.n	800fb82 <ip4_input+0x26e>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 800f93e:	69fb      	ldr	r3, [r7, #28]
 800f940:	781b      	ldrb	r3, [r3, #0]
 800f942:	f003 030f 	and.w	r3, r3, #15
 800f946:	b2db      	uxtb	r3, r3
 800f948:	009b      	lsls	r3, r3, #2
 800f94a:	b2db      	uxtb	r3, r3
 800f94c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800f94e:	69fb      	ldr	r3, [r7, #28]
 800f950:	885b      	ldrh	r3, [r3, #2]
 800f952:	b29b      	uxth	r3, r3
 800f954:	4618      	mov	r0, r3
 800f956:	f7f3 ff2b 	bl	80037b0 <lwip_htons>
 800f95a:	4603      	mov	r3, r0
 800f95c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	891b      	ldrh	r3, [r3, #8]
 800f962:	8a3a      	ldrh	r2, [r7, #16]
 800f964:	429a      	cmp	r2, r3
 800f966:	d204      	bcs.n	800f972 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 800f968:	8a3b      	ldrh	r3, [r7, #16]
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7f5 fba9 	bl	80050c4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	895b      	ldrh	r3, [r3, #10]
 800f976:	8a7a      	ldrh	r2, [r7, #18]
 800f978:	429a      	cmp	r2, r3
 800f97a:	d807      	bhi.n	800f98c <ip4_input+0x78>
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	891b      	ldrh	r3, [r3, #8]
 800f980:	8a3a      	ldrh	r2, [r7, #16]
 800f982:	429a      	cmp	r2, r3
 800f984:	d802      	bhi.n	800f98c <ip4_input+0x78>
 800f986:	8a7b      	ldrh	r3, [r7, #18]
 800f988:	2b13      	cmp	r3, #19
 800f98a:	d804      	bhi.n	800f996 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7f5 fd1f 	bl	80053d0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800f992:	2300      	movs	r3, #0
 800f994:	e0f5      	b.n	800fb82 <ip4_input+0x26e>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800f996:	69fb      	ldr	r3, [r7, #28]
 800f998:	691b      	ldr	r3, [r3, #16]
 800f99a:	4a7c      	ldr	r2, [pc, #496]	; (800fb8c <ip4_input+0x278>)
 800f99c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800f99e:	69fb      	ldr	r3, [r7, #28]
 800f9a0:	68db      	ldr	r3, [r3, #12]
 800f9a2:	4a7a      	ldr	r2, [pc, #488]	; (800fb8c <ip4_input+0x278>)
 800f9a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800f9a6:	4b79      	ldr	r3, [pc, #484]	; (800fb8c <ip4_input+0x278>)
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9ae:	2be0      	cmp	r3, #224	; 0xe0
 800f9b0:	d112      	bne.n	800f9d8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f9b8:	f003 0301 	and.w	r3, r3, #1
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d007      	beq.n	800f9d2 <ip4_input+0xbe>
 800f9c2:	683b      	ldr	r3, [r7, #0]
 800f9c4:	3304      	adds	r3, #4
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d002      	beq.n	800f9d2 <ip4_input+0xbe>
      netif = inp;
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	61bb      	str	r3, [r7, #24]
 800f9d0:	e02a      	b.n	800fa28 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	61bb      	str	r3, [r7, #24]
 800f9d6:	e027      	b.n	800fa28 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 800f9d8:	6838      	ldr	r0, [r7, #0]
 800f9da:	f7ff ff71 	bl	800f8c0 <ip4_input_accept>
 800f9de:	4603      	mov	r3, r0
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d002      	beq.n	800f9ea <ip4_input+0xd6>
      netif = inp;
 800f9e4:	683b      	ldr	r3, [r7, #0]
 800f9e6:	61bb      	str	r3, [r7, #24]
 800f9e8:	e01e      	b.n	800fa28 <ip4_input+0x114>
    } else {
      netif = NULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 800f9ee:	4b67      	ldr	r3, [pc, #412]	; (800fb8c <ip4_input+0x278>)
 800f9f0:	695b      	ldr	r3, [r3, #20]
 800f9f2:	b2db      	uxtb	r3, r3
 800f9f4:	2b7f      	cmp	r3, #127	; 0x7f
 800f9f6:	d017      	beq.n	800fa28 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 800f9f8:	4b65      	ldr	r3, [pc, #404]	; (800fb90 <ip4_input+0x27c>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	61bb      	str	r3, [r7, #24]
 800f9fe:	e00e      	b.n	800fa1e <ip4_input+0x10a>
          if (netif == inp) {
 800fa00:	69ba      	ldr	r2, [r7, #24]
 800fa02:	683b      	ldr	r3, [r7, #0]
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d006      	beq.n	800fa16 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 800fa08:	69b8      	ldr	r0, [r7, #24]
 800fa0a:	f7ff ff59 	bl	800f8c0 <ip4_input_accept>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d108      	bne.n	800fa26 <ip4_input+0x112>
 800fa14:	e000      	b.n	800fa18 <ip4_input+0x104>
            continue;
 800fa16:	bf00      	nop
        NETIF_FOREACH(netif) {
 800fa18:	69bb      	ldr	r3, [r7, #24]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	61bb      	str	r3, [r7, #24]
 800fa1e:	69bb      	ldr	r3, [r7, #24]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d1ed      	bne.n	800fa00 <ip4_input+0xec>
 800fa24:	e000      	b.n	800fa28 <ip4_input+0x114>
            break;
 800fa26:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 800fa28:	69bb      	ldr	r3, [r7, #24]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d111      	bne.n	800fa52 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	7a5b      	ldrb	r3, [r3, #9]
 800fa32:	2b11      	cmp	r3, #17
 800fa34:	d10d      	bne.n	800fa52 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 800fa36:	8a7b      	ldrh	r3, [r7, #18]
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	4413      	add	r3, r2
 800fa3c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	885b      	ldrh	r3, [r3, #2]
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 800fa48:	d103      	bne.n	800fa52 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 800fa52:	697b      	ldr	r3, [r7, #20]
 800fa54:	2b00      	cmp	r3, #0
 800fa56:	d017      	beq.n	800fa88 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 800fa58:	4b4c      	ldr	r3, [pc, #304]	; (800fb8c <ip4_input+0x278>)
 800fa5a:	691b      	ldr	r3, [r3, #16]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d013      	beq.n	800fa88 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa60:	4b4a      	ldr	r3, [pc, #296]	; (800fb8c <ip4_input+0x278>)
 800fa62:	691b      	ldr	r3, [r3, #16]
 800fa64:	6839      	ldr	r1, [r7, #0]
 800fa66:	4618      	mov	r0, r3
 800fa68:	f000 f96c 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800fa6c:	4603      	mov	r3, r0
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d105      	bne.n	800fa7e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800fa72:	4b46      	ldr	r3, [pc, #280]	; (800fb8c <ip4_input+0x278>)
 800fa74:	691b      	ldr	r3, [r3, #16]
 800fa76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800fa7a:	2be0      	cmp	r3, #224	; 0xe0
 800fa7c:	d104      	bne.n	800fa88 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800fa7e:	6878      	ldr	r0, [r7, #4]
 800fa80:	f7f5 fca6 	bl	80053d0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800fa84:	2300      	movs	r3, #0
 800fa86:	e07c      	b.n	800fb82 <ip4_input+0x26e>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d104      	bne.n	800fa98 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800fa8e:	6878      	ldr	r0, [r7, #4]
 800fa90:	f7f5 fc9e 	bl	80053d0 <pbuf_free>
    return ERR_OK;
 800fa94:	2300      	movs	r3, #0
 800fa96:	e074      	b.n	800fb82 <ip4_input+0x26e>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800fa98:	69fb      	ldr	r3, [r7, #28]
 800fa9a:	88db      	ldrh	r3, [r3, #6]
 800fa9c:	b29b      	uxth	r3, r3
 800fa9e:	461a      	mov	r2, r3
 800faa0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800faa4:	4013      	ands	r3, r2
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d00b      	beq.n	800fac2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f000 fc90 	bl	80103d0 <ip4_reass>
 800fab0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d101      	bne.n	800fabc <ip4_input+0x1a8>
      return ERR_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	e062      	b.n	800fb82 <ip4_input+0x26e>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	685b      	ldr	r3, [r3, #4]
 800fac0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800fac2:	4a32      	ldr	r2, [pc, #200]	; (800fb8c <ip4_input+0x278>)
 800fac4:	69bb      	ldr	r3, [r7, #24]
 800fac6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800fac8:	4a30      	ldr	r2, [pc, #192]	; (800fb8c <ip4_input+0x278>)
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800face:	4a2f      	ldr	r2, [pc, #188]	; (800fb8c <ip4_input+0x278>)
 800fad0:	69fb      	ldr	r3, [r7, #28]
 800fad2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	f003 030f 	and.w	r3, r3, #15
 800fadc:	b2db      	uxtb	r3, r3
 800fade:	009b      	lsls	r3, r3, #2
 800fae0:	b2db      	uxtb	r3, r3
 800fae2:	b29a      	uxth	r2, r3
 800fae4:	4b29      	ldr	r3, [pc, #164]	; (800fb8c <ip4_input+0x278>)
 800fae6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 800fae8:	8a7b      	ldrh	r3, [r7, #18]
 800faea:	4619      	mov	r1, r3
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f7f5 fbe9 	bl	80052c4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 800faf2:	69fb      	ldr	r3, [r7, #28]
 800faf4:	7a5b      	ldrb	r3, [r3, #9]
 800faf6:	2b06      	cmp	r3, #6
 800faf8:	d009      	beq.n	800fb0e <ip4_input+0x1fa>
 800fafa:	2b11      	cmp	r3, #17
 800fafc:	d002      	beq.n	800fb04 <ip4_input+0x1f0>
 800fafe:	2b01      	cmp	r3, #1
 800fb00:	d00a      	beq.n	800fb18 <ip4_input+0x204>
 800fb02:	e00e      	b.n	800fb22 <ip4_input+0x20e>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 800fb04:	6839      	ldr	r1, [r7, #0]
 800fb06:	6878      	ldr	r0, [r7, #4]
 800fb08:	f7fc fa30 	bl	800bf6c <udp_input>
        break;
 800fb0c:	e026      	b.n	800fb5c <ip4_input+0x248>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 800fb0e:	6839      	ldr	r1, [r7, #0]
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7f7 fe0f 	bl	8007734 <tcp_input>
        break;
 800fb16:	e021      	b.n	800fb5c <ip4_input+0x248>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 800fb18:	6839      	ldr	r1, [r7, #0]
 800fb1a:	6878      	ldr	r0, [r7, #4]
 800fb1c:	f7ff fcd2 	bl	800f4c4 <icmp_input>
        break;
 800fb20:	e01c      	b.n	800fb5c <ip4_input+0x248>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb22:	4b1a      	ldr	r3, [pc, #104]	; (800fb8c <ip4_input+0x278>)
 800fb24:	695b      	ldr	r3, [r3, #20]
 800fb26:	69b9      	ldr	r1, [r7, #24]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 f90b 	bl	800fd44 <ip4_addr_isbroadcast_u32>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d10f      	bne.n	800fb54 <ip4_input+0x240>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800fb34:	4b15      	ldr	r3, [pc, #84]	; (800fb8c <ip4_input+0x278>)
 800fb36:	695b      	ldr	r3, [r3, #20]
 800fb38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800fb3c:	2be0      	cmp	r3, #224	; 0xe0
 800fb3e:	d009      	beq.n	800fb54 <ip4_input+0x240>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 800fb40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fb44:	4619      	mov	r1, r3
 800fb46:	6878      	ldr	r0, [r7, #4]
 800fb48:	f7f5 fc2f 	bl	80053aa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800fb4c:	2102      	movs	r1, #2
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f7ff fdbc 	bl	800f6cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f7f5 fc3b 	bl	80053d0 <pbuf_free>
        break;
 800fb5a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800fb5c:	4b0b      	ldr	r3, [pc, #44]	; (800fb8c <ip4_input+0x278>)
 800fb5e:	2200      	movs	r2, #0
 800fb60:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800fb62:	4b0a      	ldr	r3, [pc, #40]	; (800fb8c <ip4_input+0x278>)
 800fb64:	2200      	movs	r2, #0
 800fb66:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800fb68:	4b08      	ldr	r3, [pc, #32]	; (800fb8c <ip4_input+0x278>)
 800fb6a:	2200      	movs	r2, #0
 800fb6c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800fb6e:	4b07      	ldr	r3, [pc, #28]	; (800fb8c <ip4_input+0x278>)
 800fb70:	2200      	movs	r2, #0
 800fb72:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800fb74:	4b05      	ldr	r3, [pc, #20]	; (800fb8c <ip4_input+0x278>)
 800fb76:	2200      	movs	r2, #0
 800fb78:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800fb7a:	4b04      	ldr	r3, [pc, #16]	; (800fb8c <ip4_input+0x278>)
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800fb80:	2300      	movs	r3, #0
}
 800fb82:	4618      	mov	r0, r3
 800fb84:	3720      	adds	r7, #32
 800fb86:	46bd      	mov	sp, r7
 800fb88:	bd80      	pop	{r7, pc}
 800fb8a:	bf00      	nop
 800fb8c:	200038f0 	.word	0x200038f0
 800fb90:	20006e54 	.word	0x20006e54

0800fb94 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	; 0x28
 800fb98:	af04      	add	r7, sp, #16
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	607a      	str	r2, [r7, #4]
 800fba0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d009      	beq.n	800fbc0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800fbac:	68bb      	ldr	r3, [r7, #8]
 800fbae:	2b00      	cmp	r3, #0
 800fbb0:	d003      	beq.n	800fbba <ip4_output_if+0x26>
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d102      	bne.n	800fbc0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800fbba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbbc:	3304      	adds	r3, #4
 800fbbe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800fbc0:	78fa      	ldrb	r2, [r7, #3]
 800fbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc4:	9302      	str	r3, [sp, #8]
 800fbc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fbca:	9301      	str	r3, [sp, #4]
 800fbcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 800fbd0:	9300      	str	r3, [sp, #0]
 800fbd2:	4613      	mov	r3, r2
 800fbd4:	687a      	ldr	r2, [r7, #4]
 800fbd6:	6979      	ldr	r1, [r7, #20]
 800fbd8:	68f8      	ldr	r0, [r7, #12]
 800fbda:	f000 f805 	bl	800fbe8 <ip4_output_if_src>
 800fbde:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3718      	adds	r7, #24
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b088      	sub	sp, #32
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	60f8      	str	r0, [r7, #12]
 800fbf0:	60b9      	str	r1, [r7, #8]
 800fbf2:	607a      	str	r2, [r7, #4]
 800fbf4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	7b9b      	ldrb	r3, [r3, #14]
 800fbfa:	2b01      	cmp	r3, #1
 800fbfc:	d006      	beq.n	800fc0c <ip4_output_if_src+0x24>
 800fbfe:	4b4b      	ldr	r3, [pc, #300]	; (800fd2c <ip4_output_if_src+0x144>)
 800fc00:	f44f 7255 	mov.w	r2, #852	; 0x354
 800fc04:	494a      	ldr	r1, [pc, #296]	; (800fd30 <ip4_output_if_src+0x148>)
 800fc06:	484b      	ldr	r0, [pc, #300]	; (800fd34 <ip4_output_if_src+0x14c>)
 800fc08:	f001 f82e 	bl	8010c68 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d060      	beq.n	800fcd4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800fc12:	2314      	movs	r3, #20
 800fc14:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 800fc16:	2114      	movs	r1, #20
 800fc18:	68f8      	ldr	r0, [r7, #12]
 800fc1a:	f7f5 fb43 	bl	80052a4 <pbuf_add_header>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d002      	beq.n	800fc2a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fc24:	f06f 0301 	mvn.w	r3, #1
 800fc28:	e07c      	b.n	800fd24 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	685b      	ldr	r3, [r3, #4]
 800fc2e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	895b      	ldrh	r3, [r3, #10]
 800fc34:	2b13      	cmp	r3, #19
 800fc36:	d806      	bhi.n	800fc46 <ip4_output_if_src+0x5e>
 800fc38:	4b3c      	ldr	r3, [pc, #240]	; (800fd2c <ip4_output_if_src+0x144>)
 800fc3a:	f240 3289 	movw	r2, #905	; 0x389
 800fc3e:	493e      	ldr	r1, [pc, #248]	; (800fd38 <ip4_output_if_src+0x150>)
 800fc40:	483c      	ldr	r0, [pc, #240]	; (800fd34 <ip4_output_if_src+0x14c>)
 800fc42:	f001 f811 	bl	8010c68 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800fc46:	69fb      	ldr	r3, [r7, #28]
 800fc48:	78fa      	ldrb	r2, [r7, #3]
 800fc4a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800fc4c:	69fb      	ldr	r3, [r7, #28]
 800fc4e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800fc52:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	69fb      	ldr	r3, [r7, #28]
 800fc5a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800fc5c:	8b7b      	ldrh	r3, [r7, #26]
 800fc5e:	089b      	lsrs	r3, r3, #2
 800fc60:	b29b      	uxth	r3, r3
 800fc62:	b2db      	uxtb	r3, r3
 800fc64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc68:	b2da      	uxtb	r2, r3
 800fc6a:	69fb      	ldr	r3, [r7, #28]
 800fc6c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fc74:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	891b      	ldrh	r3, [r3, #8]
 800fc7a:	4618      	mov	r0, r3
 800fc7c:	f7f3 fd98 	bl	80037b0 <lwip_htons>
 800fc80:	4603      	mov	r3, r0
 800fc82:	461a      	mov	r2, r3
 800fc84:	69fb      	ldr	r3, [r7, #28]
 800fc86:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800fc88:	69fb      	ldr	r3, [r7, #28]
 800fc8a:	2200      	movs	r2, #0
 800fc8c:	719a      	strb	r2, [r3, #6]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800fc92:	4b2a      	ldr	r3, [pc, #168]	; (800fd3c <ip4_output_if_src+0x154>)
 800fc94:	881b      	ldrh	r3, [r3, #0]
 800fc96:	4618      	mov	r0, r3
 800fc98:	f7f3 fd8a 	bl	80037b0 <lwip_htons>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	461a      	mov	r2, r3
 800fca0:	69fb      	ldr	r3, [r7, #28]
 800fca2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800fca4:	4b25      	ldr	r3, [pc, #148]	; (800fd3c <ip4_output_if_src+0x154>)
 800fca6:	881b      	ldrh	r3, [r3, #0]
 800fca8:	3301      	adds	r3, #1
 800fcaa:	b29a      	uxth	r2, r3
 800fcac:	4b23      	ldr	r3, [pc, #140]	; (800fd3c <ip4_output_if_src+0x154>)
 800fcae:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d104      	bne.n	800fcc0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800fcb6:	4b22      	ldr	r3, [pc, #136]	; (800fd40 <ip4_output_if_src+0x158>)
 800fcb8:	681a      	ldr	r2, [r3, #0]
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	60da      	str	r2, [r3, #12]
 800fcbe:	e003      	b.n	800fcc8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	681a      	ldr	r2, [r3, #0]
 800fcc4:	69fb      	ldr	r3, [r7, #28]
 800fcc6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800fcc8:	69fb      	ldr	r3, [r7, #28]
 800fcca:	2200      	movs	r2, #0
 800fccc:	729a      	strb	r2, [r3, #10]
 800fcce:	2200      	movs	r2, #0
 800fcd0:	72da      	strb	r2, [r3, #11]
 800fcd2:	e00f      	b.n	800fcf4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	895b      	ldrh	r3, [r3, #10]
 800fcd8:	2b13      	cmp	r3, #19
 800fcda:	d802      	bhi.n	800fce2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800fcdc:	f06f 0301 	mvn.w	r3, #1
 800fce0:	e020      	b.n	800fd24 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800fce2:	68fb      	ldr	r3, [r7, #12]
 800fce4:	685b      	ldr	r3, [r3, #4]
 800fce6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800fce8:	69fb      	ldr	r3, [r7, #28]
 800fcea:	691b      	ldr	r3, [r3, #16]
 800fcec:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800fcee:	f107 0314 	add.w	r3, r7, #20
 800fcf2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800fcf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d00c      	beq.n	800fd16 <ip4_output_if_src+0x12e>
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	891a      	ldrh	r2, [r3, #8]
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d906      	bls.n	800fd16 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 800fd08:	687a      	ldr	r2, [r7, #4]
 800fd0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800fd0c:	68f8      	ldr	r0, [r7, #12]
 800fd0e:	f000 fd4b 	bl	80107a8 <ip4_frag>
 800fd12:	4603      	mov	r3, r0
 800fd14:	e006      	b.n	800fd24 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	695b      	ldr	r3, [r3, #20]
 800fd1a:	687a      	ldr	r2, [r7, #4]
 800fd1c:	68f9      	ldr	r1, [r7, #12]
 800fd1e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd20:	4798      	blx	r3
 800fd22:	4603      	mov	r3, r0
}
 800fd24:	4618      	mov	r0, r3
 800fd26:	3720      	adds	r7, #32
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	bd80      	pop	{r7, pc}
 800fd2c:	080145c8 	.word	0x080145c8
 800fd30:	080145fc 	.word	0x080145fc
 800fd34:	08014608 	.word	0x08014608
 800fd38:	08014630 	.word	0x08014630
 800fd3c:	200006ae 	.word	0x200006ae
 800fd40:	08014a14 	.word	0x08014a14

0800fd44 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800fd44:	b480      	push	{r7}
 800fd46:	b085      	sub	sp, #20
 800fd48:	af00      	add	r7, sp, #0
 800fd4a:	6078      	str	r0, [r7, #4]
 800fd4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd58:	d002      	beq.n	800fd60 <ip4_addr_isbroadcast_u32+0x1c>
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	d101      	bne.n	800fd64 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800fd60:	2301      	movs	r3, #1
 800fd62:	e02a      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800fd64:	683b      	ldr	r3, [r7, #0]
 800fd66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800fd6a:	f003 0302 	and.w	r3, r3, #2
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d101      	bne.n	800fd76 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800fd72:	2300      	movs	r3, #0
 800fd74:	e021      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	3304      	adds	r3, #4
 800fd7a:	681b      	ldr	r3, [r3, #0]
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d101      	bne.n	800fd86 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800fd82:	2300      	movs	r3, #0
 800fd84:	e019      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800fd86:	68fa      	ldr	r2, [r7, #12]
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	3304      	adds	r3, #4
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	405a      	eors	r2, r3
 800fd90:	683b      	ldr	r3, [r7, #0]
 800fd92:	3308      	adds	r3, #8
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	4013      	ands	r3, r2
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d10d      	bne.n	800fdb8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fd9c:	683b      	ldr	r3, [r7, #0]
 800fd9e:	3308      	adds	r3, #8
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	43da      	mvns	r2, r3
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	3308      	adds	r3, #8
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800fdb0:	429a      	cmp	r2, r3
 800fdb2:	d101      	bne.n	800fdb8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800fdb4:	2301      	movs	r3, #1
 800fdb6:	e000      	b.n	800fdba <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800fdb8:	2300      	movs	r3, #0
  }
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3714      	adds	r7, #20
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc4:	4770      	bx	lr
	...

0800fdc8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800fdce:	2300      	movs	r3, #0
 800fdd0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800fdd2:	4b12      	ldr	r3, [pc, #72]	; (800fe1c <ip_reass_tmr+0x54>)
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800fdd8:	e018      	b.n	800fe0c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800fdda:	68fb      	ldr	r3, [r7, #12]
 800fddc:	7fdb      	ldrb	r3, [r3, #31]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d00b      	beq.n	800fdfa <ip_reass_tmr+0x32>
      r->timer--;
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	7fdb      	ldrb	r3, [r3, #31]
 800fde6:	3b01      	subs	r3, #1
 800fde8:	b2da      	uxtb	r2, r3
 800fdea:	68fb      	ldr	r3, [r7, #12]
 800fdec:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	681b      	ldr	r3, [r3, #0]
 800fdf6:	60fb      	str	r3, [r7, #12]
 800fdf8:	e008      	b.n	800fe0c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800fe04:	68b9      	ldr	r1, [r7, #8]
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	f000 f80a 	bl	800fe20 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d1e3      	bne.n	800fdda <ip_reass_tmr+0x12>
    }
  }
}
 800fe12:	bf00      	nop
 800fe14:	3710      	adds	r7, #16
 800fe16:	46bd      	mov	sp, r7
 800fe18:	bd80      	pop	{r7, pc}
 800fe1a:	bf00      	nop
 800fe1c:	200006b0 	.word	0x200006b0

0800fe20 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800fe20:	b580      	push	{r7, lr}
 800fe22:	b088      	sub	sp, #32
 800fe24:	af00      	add	r7, sp, #0
 800fe26:	6078      	str	r0, [r7, #4]
 800fe28:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800fe2a:	2300      	movs	r3, #0
 800fe2c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800fe2e:	683a      	ldr	r2, [r7, #0]
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d105      	bne.n	800fe42 <ip_reass_free_complete_datagram+0x22>
 800fe36:	4b45      	ldr	r3, [pc, #276]	; (800ff4c <ip_reass_free_complete_datagram+0x12c>)
 800fe38:	22ab      	movs	r2, #171	; 0xab
 800fe3a:	4945      	ldr	r1, [pc, #276]	; (800ff50 <ip_reass_free_complete_datagram+0x130>)
 800fe3c:	4845      	ldr	r0, [pc, #276]	; (800ff54 <ip_reass_free_complete_datagram+0x134>)
 800fe3e:	f000 ff13 	bl	8010c68 <iprintf>
  if (prev != NULL) {
 800fe42:	683b      	ldr	r3, [r7, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d00a      	beq.n	800fe5e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800fe48:	683b      	ldr	r3, [r7, #0]
 800fe4a:	681b      	ldr	r3, [r3, #0]
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d005      	beq.n	800fe5e <ip_reass_free_complete_datagram+0x3e>
 800fe52:	4b3e      	ldr	r3, [pc, #248]	; (800ff4c <ip_reass_free_complete_datagram+0x12c>)
 800fe54:	22ad      	movs	r2, #173	; 0xad
 800fe56:	4940      	ldr	r1, [pc, #256]	; (800ff58 <ip_reass_free_complete_datagram+0x138>)
 800fe58:	483e      	ldr	r0, [pc, #248]	; (800ff54 <ip_reass_free_complete_datagram+0x134>)
 800fe5a:	f000 ff05 	bl	8010c68 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	685b      	ldr	r3, [r3, #4]
 800fe62:	685b      	ldr	r3, [r3, #4]
 800fe64:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800fe66:	697b      	ldr	r3, [r7, #20]
 800fe68:	889b      	ldrh	r3, [r3, #4]
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	2b00      	cmp	r3, #0
 800fe6e:	d12a      	bne.n	800fec6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	685b      	ldr	r3, [r3, #4]
 800fe74:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800fe76:	697b      	ldr	r3, [r7, #20]
 800fe78:	681a      	ldr	r2, [r3, #0]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800fe7e:	69bb      	ldr	r3, [r7, #24]
 800fe80:	6858      	ldr	r0, [r3, #4]
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	3308      	adds	r3, #8
 800fe86:	2214      	movs	r2, #20
 800fe88:	4619      	mov	r1, r3
 800fe8a:	f000 feda 	bl	8010c42 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800fe8e:	2101      	movs	r1, #1
 800fe90:	69b8      	ldr	r0, [r7, #24]
 800fe92:	f7ff fc2b 	bl	800f6ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800fe96:	69b8      	ldr	r0, [r7, #24]
 800fe98:	f7f5 fb22 	bl	80054e0 <pbuf_clen>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fea0:	8bfa      	ldrh	r2, [r7, #30]
 800fea2:	8a7b      	ldrh	r3, [r7, #18]
 800fea4:	4413      	add	r3, r2
 800fea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800feaa:	db05      	blt.n	800feb8 <ip_reass_free_complete_datagram+0x98>
 800feac:	4b27      	ldr	r3, [pc, #156]	; (800ff4c <ip_reass_free_complete_datagram+0x12c>)
 800feae:	22bc      	movs	r2, #188	; 0xbc
 800feb0:	492a      	ldr	r1, [pc, #168]	; (800ff5c <ip_reass_free_complete_datagram+0x13c>)
 800feb2:	4828      	ldr	r0, [pc, #160]	; (800ff54 <ip_reass_free_complete_datagram+0x134>)
 800feb4:	f000 fed8 	bl	8010c68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800feb8:	8bfa      	ldrh	r2, [r7, #30]
 800feba:	8a7b      	ldrh	r3, [r7, #18]
 800febc:	4413      	add	r3, r2
 800febe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800fec0:	69b8      	ldr	r0, [r7, #24]
 800fec2:	f7f5 fa85 	bl	80053d0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	685b      	ldr	r3, [r3, #4]
 800feca:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800fecc:	e01f      	b.n	800ff0e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800fece:	69bb      	ldr	r3, [r7, #24]
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	617b      	str	r3, [r7, #20]
    pcur = p;
 800fed4:	69bb      	ldr	r3, [r7, #24]
 800fed6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800fed8:	697b      	ldr	r3, [r7, #20]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800fede:	68f8      	ldr	r0, [r7, #12]
 800fee0:	f7f5 fafe 	bl	80054e0 <pbuf_clen>
 800fee4:	4603      	mov	r3, r0
 800fee6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800fee8:	8bfa      	ldrh	r2, [r7, #30]
 800feea:	8a7b      	ldrh	r3, [r7, #18]
 800feec:	4413      	add	r3, r2
 800feee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fef2:	db05      	blt.n	800ff00 <ip_reass_free_complete_datagram+0xe0>
 800fef4:	4b15      	ldr	r3, [pc, #84]	; (800ff4c <ip_reass_free_complete_datagram+0x12c>)
 800fef6:	22cc      	movs	r2, #204	; 0xcc
 800fef8:	4918      	ldr	r1, [pc, #96]	; (800ff5c <ip_reass_free_complete_datagram+0x13c>)
 800fefa:	4816      	ldr	r0, [pc, #88]	; (800ff54 <ip_reass_free_complete_datagram+0x134>)
 800fefc:	f000 feb4 	bl	8010c68 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 800ff00:	8bfa      	ldrh	r2, [r7, #30]
 800ff02:	8a7b      	ldrh	r3, [r7, #18]
 800ff04:	4413      	add	r3, r2
 800ff06:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800ff08:	68f8      	ldr	r0, [r7, #12]
 800ff0a:	f7f5 fa61 	bl	80053d0 <pbuf_free>
  while (p != NULL) {
 800ff0e:	69bb      	ldr	r3, [r7, #24]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d1dc      	bne.n	800fece <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800ff14:	6839      	ldr	r1, [r7, #0]
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f000 f8c2 	bl	80100a0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 800ff1c:	4b10      	ldr	r3, [pc, #64]	; (800ff60 <ip_reass_free_complete_datagram+0x140>)
 800ff1e:	881b      	ldrh	r3, [r3, #0]
 800ff20:	8bfa      	ldrh	r2, [r7, #30]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d905      	bls.n	800ff32 <ip_reass_free_complete_datagram+0x112>
 800ff26:	4b09      	ldr	r3, [pc, #36]	; (800ff4c <ip_reass_free_complete_datagram+0x12c>)
 800ff28:	22d2      	movs	r2, #210	; 0xd2
 800ff2a:	490e      	ldr	r1, [pc, #56]	; (800ff64 <ip_reass_free_complete_datagram+0x144>)
 800ff2c:	4809      	ldr	r0, [pc, #36]	; (800ff54 <ip_reass_free_complete_datagram+0x134>)
 800ff2e:	f000 fe9b 	bl	8010c68 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 800ff32:	4b0b      	ldr	r3, [pc, #44]	; (800ff60 <ip_reass_free_complete_datagram+0x140>)
 800ff34:	881a      	ldrh	r2, [r3, #0]
 800ff36:	8bfb      	ldrh	r3, [r7, #30]
 800ff38:	1ad3      	subs	r3, r2, r3
 800ff3a:	b29a      	uxth	r2, r3
 800ff3c:	4b08      	ldr	r3, [pc, #32]	; (800ff60 <ip_reass_free_complete_datagram+0x140>)
 800ff3e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800ff40:	8bfb      	ldrh	r3, [r7, #30]
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3720      	adds	r7, #32
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	08014660 	.word	0x08014660
 800ff50:	0801469c 	.word	0x0801469c
 800ff54:	080146a8 	.word	0x080146a8
 800ff58:	080146d0 	.word	0x080146d0
 800ff5c:	080146e4 	.word	0x080146e4
 800ff60:	200006b4 	.word	0x200006b4
 800ff64:	08014704 	.word	0x08014704

0800ff68 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b08a      	sub	sp, #40	; 0x28
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800ff72:	2300      	movs	r3, #0
 800ff74:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800ff76:	2300      	movs	r3, #0
 800ff78:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800ff7e:	2300      	movs	r3, #0
 800ff80:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800ff82:	2300      	movs	r3, #0
 800ff84:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800ff86:	4b28      	ldr	r3, [pc, #160]	; (8010028 <ip_reass_remove_oldest_datagram+0xc0>)
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800ff8c:	e030      	b.n	800fff0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800ff8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff90:	695a      	ldr	r2, [r3, #20]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	68db      	ldr	r3, [r3, #12]
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d10c      	bne.n	800ffb4 <ip_reass_remove_oldest_datagram+0x4c>
 800ff9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9c:	699a      	ldr	r2, [r3, #24]
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	429a      	cmp	r2, r3
 800ffa4:	d106      	bne.n	800ffb4 <ip_reass_remove_oldest_datagram+0x4c>
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa8:	899a      	ldrh	r2, [r3, #12]
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	889b      	ldrh	r3, [r3, #4]
 800ffae:	b29b      	uxth	r3, r3
 800ffb0:	429a      	cmp	r2, r3
 800ffb2:	d014      	beq.n	800ffde <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800ffb4:	693b      	ldr	r3, [r7, #16]
 800ffb6:	3301      	adds	r3, #1
 800ffb8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800ffba:	6a3b      	ldr	r3, [r7, #32]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d104      	bne.n	800ffca <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffc4:	69fb      	ldr	r3, [r7, #28]
 800ffc6:	61bb      	str	r3, [r7, #24]
 800ffc8:	e009      	b.n	800ffde <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800ffca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffcc:	7fda      	ldrb	r2, [r3, #31]
 800ffce:	6a3b      	ldr	r3, [r7, #32]
 800ffd0:	7fdb      	ldrb	r3, [r3, #31]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d803      	bhi.n	800ffde <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800ffd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800ffda:	69fb      	ldr	r3, [r7, #28]
 800ffdc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800ffde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d001      	beq.n	800ffea <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800ffe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800fff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1cb      	bne.n	800ff8e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800fff6:	6a3b      	ldr	r3, [r7, #32]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d008      	beq.n	801000e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800fffc:	69b9      	ldr	r1, [r7, #24]
 800fffe:	6a38      	ldr	r0, [r7, #32]
 8010000:	f7ff ff0e 	bl	800fe20 <ip_reass_free_complete_datagram>
 8010004:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8010006:	697a      	ldr	r2, [r7, #20]
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	4413      	add	r3, r2
 801000c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801000e:	697a      	ldr	r2, [r7, #20]
 8010010:	683b      	ldr	r3, [r7, #0]
 8010012:	429a      	cmp	r2, r3
 8010014:	da02      	bge.n	801001c <ip_reass_remove_oldest_datagram+0xb4>
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	2b01      	cmp	r3, #1
 801001a:	dcac      	bgt.n	800ff76 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801001c:	697b      	ldr	r3, [r7, #20]
}
 801001e:	4618      	mov	r0, r3
 8010020:	3728      	adds	r7, #40	; 0x28
 8010022:	46bd      	mov	sp, r7
 8010024:	bd80      	pop	{r7, pc}
 8010026:	bf00      	nop
 8010028:	200006b0 	.word	0x200006b0

0801002c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801002c:	b580      	push	{r7, lr}
 801002e:	b084      	sub	sp, #16
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
 8010034:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010036:	2004      	movs	r0, #4
 8010038:	f7f4 fb00 	bl	800463c <memp_malloc>
 801003c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d110      	bne.n	8010066 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8010044:	6839      	ldr	r1, [r7, #0]
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f7ff ff8e 	bl	800ff68 <ip_reass_remove_oldest_datagram>
 801004c:	4602      	mov	r2, r0
 801004e:	683b      	ldr	r3, [r7, #0]
 8010050:	4293      	cmp	r3, r2
 8010052:	dc03      	bgt.n	801005c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8010054:	2004      	movs	r0, #4
 8010056:	f7f4 faf1 	bl	800463c <memp_malloc>
 801005a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d101      	bne.n	8010066 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8010062:	2300      	movs	r3, #0
 8010064:	e016      	b.n	8010094 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8010066:	2220      	movs	r2, #32
 8010068:	2100      	movs	r1, #0
 801006a:	68f8      	ldr	r0, [r7, #12]
 801006c:	f000 fdf4 	bl	8010c58 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	220f      	movs	r2, #15
 8010074:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8010076:	4b09      	ldr	r3, [pc, #36]	; (801009c <ip_reass_enqueue_new_datagram+0x70>)
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801007e:	4a07      	ldr	r2, [pc, #28]	; (801009c <ip_reass_enqueue_new_datagram+0x70>)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	3308      	adds	r3, #8
 8010088:	2214      	movs	r2, #20
 801008a:	6879      	ldr	r1, [r7, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	f000 fdd8 	bl	8010c42 <memcpy>
  return ipr;
 8010092:	68fb      	ldr	r3, [r7, #12]
}
 8010094:	4618      	mov	r0, r3
 8010096:	3710      	adds	r7, #16
 8010098:	46bd      	mov	sp, r7
 801009a:	bd80      	pop	{r7, pc}
 801009c:	200006b0 	.word	0x200006b0

080100a0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b082      	sub	sp, #8
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80100aa:	4b10      	ldr	r3, [pc, #64]	; (80100ec <ip_reass_dequeue_datagram+0x4c>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	687a      	ldr	r2, [r7, #4]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d104      	bne.n	80100be <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	681b      	ldr	r3, [r3, #0]
 80100b8:	4a0c      	ldr	r2, [pc, #48]	; (80100ec <ip_reass_dequeue_datagram+0x4c>)
 80100ba:	6013      	str	r3, [r2, #0]
 80100bc:	e00d      	b.n	80100da <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80100be:	683b      	ldr	r3, [r7, #0]
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d106      	bne.n	80100d2 <ip_reass_dequeue_datagram+0x32>
 80100c4:	4b0a      	ldr	r3, [pc, #40]	; (80100f0 <ip_reass_dequeue_datagram+0x50>)
 80100c6:	f240 1245 	movw	r2, #325	; 0x145
 80100ca:	490a      	ldr	r1, [pc, #40]	; (80100f4 <ip_reass_dequeue_datagram+0x54>)
 80100cc:	480a      	ldr	r0, [pc, #40]	; (80100f8 <ip_reass_dequeue_datagram+0x58>)
 80100ce:	f000 fdcb 	bl	8010c68 <iprintf>
    prev->next = ipr->next;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	683b      	ldr	r3, [r7, #0]
 80100d8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80100da:	6879      	ldr	r1, [r7, #4]
 80100dc:	2004      	movs	r0, #4
 80100de:	f7f4 faf9 	bl	80046d4 <memp_free>
}
 80100e2:	bf00      	nop
 80100e4:	3708      	adds	r7, #8
 80100e6:	46bd      	mov	sp, r7
 80100e8:	bd80      	pop	{r7, pc}
 80100ea:	bf00      	nop
 80100ec:	200006b0 	.word	0x200006b0
 80100f0:	08014660 	.word	0x08014660
 80100f4:	08014728 	.word	0x08014728
 80100f8:	080146a8 	.word	0x080146a8

080100fc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80100fc:	b580      	push	{r7, lr}
 80100fe:	b08c      	sub	sp, #48	; 0x30
 8010100:	af00      	add	r7, sp, #0
 8010102:	60f8      	str	r0, [r7, #12]
 8010104:	60b9      	str	r1, [r7, #8]
 8010106:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8010108:	2300      	movs	r3, #0
 801010a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801010c:	2301      	movs	r3, #1
 801010e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8010110:	68bb      	ldr	r3, [r7, #8]
 8010112:	685b      	ldr	r3, [r3, #4]
 8010114:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8010116:	69fb      	ldr	r3, [r7, #28]
 8010118:	885b      	ldrh	r3, [r3, #2]
 801011a:	b29b      	uxth	r3, r3
 801011c:	4618      	mov	r0, r3
 801011e:	f7f3 fb47 	bl	80037b0 <lwip_htons>
 8010122:	4603      	mov	r3, r0
 8010124:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8010126:	69fb      	ldr	r3, [r7, #28]
 8010128:	781b      	ldrb	r3, [r3, #0]
 801012a:	f003 030f 	and.w	r3, r3, #15
 801012e:	b2db      	uxtb	r3, r3
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8010134:	7e7b      	ldrb	r3, [r7, #25]
 8010136:	b29b      	uxth	r3, r3
 8010138:	8b7a      	ldrh	r2, [r7, #26]
 801013a:	429a      	cmp	r2, r3
 801013c:	d202      	bcs.n	8010144 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801013e:	f04f 33ff 	mov.w	r3, #4294967295
 8010142:	e135      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8010144:	7e7b      	ldrb	r3, [r7, #25]
 8010146:	b29b      	uxth	r3, r3
 8010148:	8b7a      	ldrh	r2, [r7, #26]
 801014a:	1ad3      	subs	r3, r2, r3
 801014c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	88db      	ldrh	r3, [r3, #6]
 8010152:	b29b      	uxth	r3, r3
 8010154:	4618      	mov	r0, r3
 8010156:	f7f3 fb2b 	bl	80037b0 <lwip_htons>
 801015a:	4603      	mov	r3, r0
 801015c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010160:	b29b      	uxth	r3, r3
 8010162:	00db      	lsls	r3, r3, #3
 8010164:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801016c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801016e:	2200      	movs	r2, #0
 8010170:	701a      	strb	r2, [r3, #0]
 8010172:	2200      	movs	r2, #0
 8010174:	705a      	strb	r2, [r3, #1]
 8010176:	2200      	movs	r2, #0
 8010178:	709a      	strb	r2, [r3, #2]
 801017a:	2200      	movs	r2, #0
 801017c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801017e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010180:	8afa      	ldrh	r2, [r7, #22]
 8010182:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8010184:	8afa      	ldrh	r2, [r7, #22]
 8010186:	8b7b      	ldrh	r3, [r7, #26]
 8010188:	4413      	add	r3, r2
 801018a:	b29a      	uxth	r2, r3
 801018c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801018e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8010190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010192:	88db      	ldrh	r3, [r3, #6]
 8010194:	b29b      	uxth	r3, r3
 8010196:	8afa      	ldrh	r2, [r7, #22]
 8010198:	429a      	cmp	r2, r3
 801019a:	d902      	bls.n	80101a2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801019c:	f04f 33ff 	mov.w	r3, #4294967295
 80101a0:	e106      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	685b      	ldr	r3, [r3, #4]
 80101a6:	627b      	str	r3, [r7, #36]	; 0x24
 80101a8:	e068      	b.n	801027c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80101aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101ac:	685b      	ldr	r3, [r3, #4]
 80101ae:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80101b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b2:	889b      	ldrh	r3, [r3, #4]
 80101b4:	b29a      	uxth	r2, r3
 80101b6:	693b      	ldr	r3, [r7, #16]
 80101b8:	889b      	ldrh	r3, [r3, #4]
 80101ba:	b29b      	uxth	r3, r3
 80101bc:	429a      	cmp	r2, r3
 80101be:	d235      	bcs.n	801022c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80101c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80101c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	d020      	beq.n	801020e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80101cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101ce:	889b      	ldrh	r3, [r3, #4]
 80101d0:	b29a      	uxth	r2, r3
 80101d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d4:	88db      	ldrh	r3, [r3, #6]
 80101d6:	b29b      	uxth	r3, r3
 80101d8:	429a      	cmp	r2, r3
 80101da:	d307      	bcc.n	80101ec <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80101dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101de:	88db      	ldrh	r3, [r3, #6]
 80101e0:	b29a      	uxth	r2, r3
 80101e2:	693b      	ldr	r3, [r7, #16]
 80101e4:	889b      	ldrh	r3, [r3, #4]
 80101e6:	b29b      	uxth	r3, r3
 80101e8:	429a      	cmp	r2, r3
 80101ea:	d902      	bls.n	80101f2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80101ec:	f04f 33ff 	mov.w	r3, #4294967295
 80101f0:	e0de      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80101f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101f4:	68ba      	ldr	r2, [r7, #8]
 80101f6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80101f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101fa:	88db      	ldrh	r3, [r3, #6]
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010200:	889b      	ldrh	r3, [r3, #4]
 8010202:	b29b      	uxth	r3, r3
 8010204:	429a      	cmp	r2, r3
 8010206:	d03d      	beq.n	8010284 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8010208:	2300      	movs	r3, #0
 801020a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801020c:	e03a      	b.n	8010284 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801020e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010210:	88db      	ldrh	r3, [r3, #6]
 8010212:	b29a      	uxth	r2, r3
 8010214:	693b      	ldr	r3, [r7, #16]
 8010216:	889b      	ldrh	r3, [r3, #4]
 8010218:	b29b      	uxth	r3, r3
 801021a:	429a      	cmp	r2, r3
 801021c:	d902      	bls.n	8010224 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801021e:	f04f 33ff 	mov.w	r3, #4294967295
 8010222:	e0c5      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8010224:	68fb      	ldr	r3, [r7, #12]
 8010226:	68ba      	ldr	r2, [r7, #8]
 8010228:	605a      	str	r2, [r3, #4]
      break;
 801022a:	e02b      	b.n	8010284 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801022c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801022e:	889b      	ldrh	r3, [r3, #4]
 8010230:	b29a      	uxth	r2, r3
 8010232:	693b      	ldr	r3, [r7, #16]
 8010234:	889b      	ldrh	r3, [r3, #4]
 8010236:	b29b      	uxth	r3, r3
 8010238:	429a      	cmp	r2, r3
 801023a:	d102      	bne.n	8010242 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801023c:	f04f 33ff 	mov.w	r3, #4294967295
 8010240:	e0b6      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8010242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010244:	889b      	ldrh	r3, [r3, #4]
 8010246:	b29a      	uxth	r2, r3
 8010248:	693b      	ldr	r3, [r7, #16]
 801024a:	88db      	ldrh	r3, [r3, #6]
 801024c:	b29b      	uxth	r3, r3
 801024e:	429a      	cmp	r2, r3
 8010250:	d202      	bcs.n	8010258 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8010252:	f04f 33ff 	mov.w	r3, #4294967295
 8010256:	e0ab      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8010258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801025a:	2b00      	cmp	r3, #0
 801025c:	d009      	beq.n	8010272 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801025e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010260:	88db      	ldrh	r3, [r3, #6]
 8010262:	b29a      	uxth	r2, r3
 8010264:	693b      	ldr	r3, [r7, #16]
 8010266:	889b      	ldrh	r3, [r3, #4]
 8010268:	b29b      	uxth	r3, r3
 801026a:	429a      	cmp	r2, r3
 801026c:	d001      	beq.n	8010272 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801026e:	2300      	movs	r3, #0
 8010270:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8010272:	693b      	ldr	r3, [r7, #16]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8010278:	693b      	ldr	r3, [r7, #16]
 801027a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801027c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801027e:	2b00      	cmp	r3, #0
 8010280:	d193      	bne.n	80101aa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8010282:	e000      	b.n	8010286 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8010284:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8010286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010288:	2b00      	cmp	r3, #0
 801028a:	d12d      	bne.n	80102e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801028c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028e:	2b00      	cmp	r3, #0
 8010290:	d01c      	beq.n	80102cc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8010292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010294:	88db      	ldrh	r3, [r3, #6]
 8010296:	b29a      	uxth	r2, r3
 8010298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801029a:	889b      	ldrh	r3, [r3, #4]
 801029c:	b29b      	uxth	r3, r3
 801029e:	429a      	cmp	r2, r3
 80102a0:	d906      	bls.n	80102b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80102a2:	4b45      	ldr	r3, [pc, #276]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80102a4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80102a8:	4944      	ldr	r1, [pc, #272]	; (80103bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80102aa:	4845      	ldr	r0, [pc, #276]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102ac:	f000 fcdc 	bl	8010c68 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80102b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b2:	68ba      	ldr	r2, [r7, #8]
 80102b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80102b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b8:	88db      	ldrh	r3, [r3, #6]
 80102ba:	b29a      	uxth	r2, r3
 80102bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102be:	889b      	ldrh	r3, [r3, #4]
 80102c0:	b29b      	uxth	r3, r3
 80102c2:	429a      	cmp	r2, r3
 80102c4:	d010      	beq.n	80102e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80102c6:	2300      	movs	r3, #0
 80102c8:	623b      	str	r3, [r7, #32]
 80102ca:	e00d      	b.n	80102e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	685b      	ldr	r3, [r3, #4]
 80102d0:	2b00      	cmp	r3, #0
 80102d2:	d006      	beq.n	80102e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80102d4:	4b38      	ldr	r3, [pc, #224]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80102d6:	f240 12bf 	movw	r2, #447	; 0x1bf
 80102da:	493a      	ldr	r1, [pc, #232]	; (80103c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80102dc:	4838      	ldr	r0, [pc, #224]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80102de:	f000 fcc3 	bl	8010c68 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	68ba      	ldr	r2, [r7, #8]
 80102e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d105      	bne.n	80102fa <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	7f9b      	ldrb	r3, [r3, #30]
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d059      	beq.n	80103ae <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80102fa:	6a3b      	ldr	r3, [r7, #32]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d04f      	beq.n	80103a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d006      	beq.n	8010316 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	685b      	ldr	r3, [r3, #4]
 801030e:	889b      	ldrh	r3, [r3, #4]
 8010310:	b29b      	uxth	r3, r3
 8010312:	2b00      	cmp	r3, #0
 8010314:	d002      	beq.n	801031c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8010316:	2300      	movs	r3, #0
 8010318:	623b      	str	r3, [r7, #32]
 801031a:	e041      	b.n	80103a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801031c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8010320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010322:	681b      	ldr	r3, [r3, #0]
 8010324:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8010326:	e012      	b.n	801034e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8010328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032a:	685b      	ldr	r3, [r3, #4]
 801032c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801032e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010330:	88db      	ldrh	r3, [r3, #6]
 8010332:	b29a      	uxth	r2, r3
 8010334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010336:	889b      	ldrh	r3, [r3, #4]
 8010338:	b29b      	uxth	r3, r3
 801033a:	429a      	cmp	r2, r3
 801033c:	d002      	beq.n	8010344 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801033e:	2300      	movs	r3, #0
 8010340:	623b      	str	r3, [r7, #32]
            break;
 8010342:	e007      	b.n	8010354 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8010344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010346:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8010348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801034e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010350:	2b00      	cmp	r3, #0
 8010352:	d1e9      	bne.n	8010328 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d022      	beq.n	80103a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	2b00      	cmp	r3, #0
 8010360:	d106      	bne.n	8010370 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8010362:	4b15      	ldr	r3, [pc, #84]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010364:	f240 12df 	movw	r2, #479	; 0x1df
 8010368:	4917      	ldr	r1, [pc, #92]	; (80103c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801036a:	4815      	ldr	r0, [pc, #84]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801036c:	f000 fc7c 	bl	8010c68 <iprintf>
          LWIP_ASSERT("sanity check",
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010378:	429a      	cmp	r2, r3
 801037a:	d106      	bne.n	801038a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801037c:	4b0e      	ldr	r3, [pc, #56]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801037e:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010382:	4911      	ldr	r1, [pc, #68]	; (80103c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8010384:	480e      	ldr	r0, [pc, #56]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8010386:	f000 fc6f 	bl	8010c68 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801038a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	2b00      	cmp	r3, #0
 8010390:	d006      	beq.n	80103a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8010392:	4b09      	ldr	r3, [pc, #36]	; (80103b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8010394:	f240 12e3 	movw	r2, #483	; 0x1e3
 8010398:	490c      	ldr	r1, [pc, #48]	; (80103cc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801039a:	4809      	ldr	r0, [pc, #36]	; (80103c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801039c:	f000 fc64 	bl	8010c68 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80103a0:	6a3b      	ldr	r3, [r7, #32]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	bf14      	ite	ne
 80103a6:	2301      	movne	r3, #1
 80103a8:	2300      	moveq	r3, #0
 80103aa:	b2db      	uxtb	r3, r3
 80103ac:	e000      	b.n	80103b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80103ae:	2300      	movs	r3, #0
}
 80103b0:	4618      	mov	r0, r3
 80103b2:	3730      	adds	r7, #48	; 0x30
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}
 80103b8:	08014660 	.word	0x08014660
 80103bc:	08014744 	.word	0x08014744
 80103c0:	080146a8 	.word	0x080146a8
 80103c4:	08014764 	.word	0x08014764
 80103c8:	0801479c 	.word	0x0801479c
 80103cc:	080147ac 	.word	0x080147ac

080103d0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b08e      	sub	sp, #56	; 0x38
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	685b      	ldr	r3, [r3, #4]
 80103dc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80103de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	f003 030f 	and.w	r3, r3, #15
 80103e6:	b2db      	uxtb	r3, r3
 80103e8:	009b      	lsls	r3, r3, #2
 80103ea:	b2db      	uxtb	r3, r3
 80103ec:	2b14      	cmp	r3, #20
 80103ee:	f040 8167 	bne.w	80106c0 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80103f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103f4:	88db      	ldrh	r3, [r3, #6]
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	4618      	mov	r0, r3
 80103fa:	f7f3 f9d9 	bl	80037b0 <lwip_htons>
 80103fe:	4603      	mov	r3, r0
 8010400:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010404:	b29b      	uxth	r3, r3
 8010406:	00db      	lsls	r3, r3, #3
 8010408:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801040a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801040c:	885b      	ldrh	r3, [r3, #2]
 801040e:	b29b      	uxth	r3, r3
 8010410:	4618      	mov	r0, r3
 8010412:	f7f3 f9cd 	bl	80037b0 <lwip_htons>
 8010416:	4603      	mov	r3, r0
 8010418:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801041a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801041c:	781b      	ldrb	r3, [r3, #0]
 801041e:	f003 030f 	and.w	r3, r3, #15
 8010422:	b2db      	uxtb	r3, r3
 8010424:	009b      	lsls	r3, r3, #2
 8010426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801042a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801042e:	b29b      	uxth	r3, r3
 8010430:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010432:	429a      	cmp	r2, r3
 8010434:	f0c0 8146 	bcc.w	80106c4 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8010438:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801043c:	b29b      	uxth	r3, r3
 801043e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010440:	1ad3      	subs	r3, r2, r3
 8010442:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8010444:	6878      	ldr	r0, [r7, #4]
 8010446:	f7f5 f84b 	bl	80054e0 <pbuf_clen>
 801044a:	4603      	mov	r3, r0
 801044c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801044e:	4ba3      	ldr	r3, [pc, #652]	; (80106dc <ip4_reass+0x30c>)
 8010450:	881b      	ldrh	r3, [r3, #0]
 8010452:	461a      	mov	r2, r3
 8010454:	8c3b      	ldrh	r3, [r7, #32]
 8010456:	4413      	add	r3, r2
 8010458:	2b0a      	cmp	r3, #10
 801045a:	dd10      	ble.n	801047e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801045c:	8c3b      	ldrh	r3, [r7, #32]
 801045e:	4619      	mov	r1, r3
 8010460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010462:	f7ff fd81 	bl	800ff68 <ip_reass_remove_oldest_datagram>
 8010466:	4603      	mov	r3, r0
 8010468:	2b00      	cmp	r3, #0
 801046a:	f000 812d 	beq.w	80106c8 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801046e:	4b9b      	ldr	r3, [pc, #620]	; (80106dc <ip4_reass+0x30c>)
 8010470:	881b      	ldrh	r3, [r3, #0]
 8010472:	461a      	mov	r2, r3
 8010474:	8c3b      	ldrh	r3, [r7, #32]
 8010476:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8010478:	2b0a      	cmp	r3, #10
 801047a:	f300 8125 	bgt.w	80106c8 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801047e:	4b98      	ldr	r3, [pc, #608]	; (80106e0 <ip4_reass+0x310>)
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	633b      	str	r3, [r7, #48]	; 0x30
 8010484:	e015      	b.n	80104b2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	695a      	ldr	r2, [r3, #20]
 801048a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801048c:	68db      	ldr	r3, [r3, #12]
 801048e:	429a      	cmp	r2, r3
 8010490:	d10c      	bne.n	80104ac <ip4_reass+0xdc>
 8010492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010494:	699a      	ldr	r2, [r3, #24]
 8010496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010498:	691b      	ldr	r3, [r3, #16]
 801049a:	429a      	cmp	r2, r3
 801049c:	d106      	bne.n	80104ac <ip4_reass+0xdc>
 801049e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a0:	899a      	ldrh	r2, [r3, #12]
 80104a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104a4:	889b      	ldrh	r3, [r3, #4]
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	429a      	cmp	r2, r3
 80104aa:	d006      	beq.n	80104ba <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80104ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ae:	681b      	ldr	r3, [r3, #0]
 80104b0:	633b      	str	r3, [r7, #48]	; 0x30
 80104b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d1e6      	bne.n	8010486 <ip4_reass+0xb6>
 80104b8:	e000      	b.n	80104bc <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80104ba:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80104bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d109      	bne.n	80104d6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80104c2:	8c3b      	ldrh	r3, [r7, #32]
 80104c4:	4619      	mov	r1, r3
 80104c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80104c8:	f7ff fdb0 	bl	801002c <ip_reass_enqueue_new_datagram>
 80104cc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80104ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d11c      	bne.n	801050e <ip4_reass+0x13e>
      goto nullreturn;
 80104d4:	e0f9      	b.n	80106ca <ip4_reass+0x2fa>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104d8:	88db      	ldrh	r3, [r3, #6]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	4618      	mov	r0, r3
 80104de:	f7f3 f967 	bl	80037b0 <lwip_htons>
 80104e2:	4603      	mov	r3, r0
 80104e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d110      	bne.n	801050e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80104ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104ee:	89db      	ldrh	r3, [r3, #14]
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7f3 f95d 	bl	80037b0 <lwip_htons>
 80104f6:	4603      	mov	r3, r0
 80104f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d006      	beq.n	801050e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8010500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010502:	3308      	adds	r3, #8
 8010504:	2214      	movs	r2, #20
 8010506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010508:	4618      	mov	r0, r3
 801050a:	f000 fb9a 	bl	8010c42 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801050e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010510:	88db      	ldrh	r3, [r3, #6]
 8010512:	b29b      	uxth	r3, r3
 8010514:	f003 0320 	and.w	r3, r3, #32
 8010518:	2b00      	cmp	r3, #0
 801051a:	bf0c      	ite	eq
 801051c:	2301      	moveq	r3, #1
 801051e:	2300      	movne	r3, #0
 8010520:	b2db      	uxtb	r3, r3
 8010522:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d00e      	beq.n	8010548 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801052a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801052c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801052e:	4413      	add	r3, r2
 8010530:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8010532:	8b7a      	ldrh	r2, [r7, #26]
 8010534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010536:	429a      	cmp	r2, r3
 8010538:	f0c0 80a0 	bcc.w	801067c <ip4_reass+0x2ac>
 801053c:	8b7b      	ldrh	r3, [r7, #26]
 801053e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8010542:	4293      	cmp	r3, r2
 8010544:	f200 809a 	bhi.w	801067c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8010548:	69fa      	ldr	r2, [r7, #28]
 801054a:	6879      	ldr	r1, [r7, #4]
 801054c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801054e:	f7ff fdd5 	bl	80100fc <ip_reass_chain_frag_into_datagram_and_validate>
 8010552:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8010554:	697b      	ldr	r3, [r7, #20]
 8010556:	f1b3 3fff 	cmp.w	r3, #4294967295
 801055a:	f000 8091 	beq.w	8010680 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801055e:	4b5f      	ldr	r3, [pc, #380]	; (80106dc <ip4_reass+0x30c>)
 8010560:	881a      	ldrh	r2, [r3, #0]
 8010562:	8c3b      	ldrh	r3, [r7, #32]
 8010564:	4413      	add	r3, r2
 8010566:	b29a      	uxth	r2, r3
 8010568:	4b5c      	ldr	r3, [pc, #368]	; (80106dc <ip4_reass+0x30c>)
 801056a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801056c:	69fb      	ldr	r3, [r7, #28]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d00d      	beq.n	801058e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8010572:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010574:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010576:	4413      	add	r3, r2
 8010578:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801057a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801057c:	8a7a      	ldrh	r2, [r7, #18]
 801057e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8010580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010582:	7f9b      	ldrb	r3, [r3, #30]
 8010584:	f043 0301 	orr.w	r3, r3, #1
 8010588:	b2da      	uxtb	r2, r3
 801058a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801058c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801058e:	697b      	ldr	r3, [r7, #20]
 8010590:	2b01      	cmp	r3, #1
 8010592:	d171      	bne.n	8010678 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8010594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010596:	8b9b      	ldrh	r3, [r3, #28]
 8010598:	3314      	adds	r3, #20
 801059a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801059c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801059e:	685b      	ldr	r3, [r3, #4]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80105a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105a8:	685b      	ldr	r3, [r3, #4]
 80105aa:	685b      	ldr	r3, [r3, #4]
 80105ac:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80105ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105b0:	3308      	adds	r3, #8
 80105b2:	2214      	movs	r2, #20
 80105b4:	4619      	mov	r1, r3
 80105b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80105b8:	f000 fb43 	bl	8010c42 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80105bc:	8a3b      	ldrh	r3, [r7, #16]
 80105be:	4618      	mov	r0, r3
 80105c0:	f7f3 f8f6 	bl	80037b0 <lwip_htons>
 80105c4:	4603      	mov	r3, r0
 80105c6:	461a      	mov	r2, r3
 80105c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ca:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80105cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ce:	2200      	movs	r2, #0
 80105d0:	719a      	strb	r2, [r3, #6]
 80105d2:	2200      	movs	r2, #0
 80105d4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80105d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105d8:	2200      	movs	r2, #0
 80105da:	729a      	strb	r2, [r3, #10]
 80105dc:	2200      	movs	r2, #0
 80105de:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80105e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e2:	685b      	ldr	r3, [r3, #4]
 80105e4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80105e6:	e00d      	b.n	8010604 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80105e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80105ea:	685b      	ldr	r3, [r3, #4]
 80105ec:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80105ee:	2114      	movs	r1, #20
 80105f0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80105f2:	f7f4 fe67 	bl	80052c4 <pbuf_remove_header>
      pbuf_cat(p, r);
 80105f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80105f8:	6878      	ldr	r0, [r7, #4]
 80105fa:	f7f4 ffab 	bl	8005554 <pbuf_cat>
      r = iprh->next_pbuf;
 80105fe:	68fb      	ldr	r3, [r7, #12]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8010604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010606:	2b00      	cmp	r3, #0
 8010608:	d1ee      	bne.n	80105e8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801060a:	4b35      	ldr	r3, [pc, #212]	; (80106e0 <ip4_reass+0x310>)
 801060c:	681b      	ldr	r3, [r3, #0]
 801060e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010610:	429a      	cmp	r2, r3
 8010612:	d102      	bne.n	801061a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8010614:	2300      	movs	r3, #0
 8010616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010618:	e010      	b.n	801063c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801061a:	4b31      	ldr	r3, [pc, #196]	; (80106e0 <ip4_reass+0x310>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010620:	e007      	b.n	8010632 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8010622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010624:	681b      	ldr	r3, [r3, #0]
 8010626:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010628:	429a      	cmp	r2, r3
 801062a:	d006      	beq.n	801063a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801062c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801062e:	681b      	ldr	r3, [r3, #0]
 8010630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1f4      	bne.n	8010622 <ip4_reass+0x252>
 8010638:	e000      	b.n	801063c <ip4_reass+0x26c>
          break;
 801063a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801063c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801063e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010640:	f7ff fd2e 	bl	80100a0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f7f4 ff4b 	bl	80054e0 <pbuf_clen>
 801064a:	4603      	mov	r3, r0
 801064c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801064e:	4b23      	ldr	r3, [pc, #140]	; (80106dc <ip4_reass+0x30c>)
 8010650:	881b      	ldrh	r3, [r3, #0]
 8010652:	8c3a      	ldrh	r2, [r7, #32]
 8010654:	429a      	cmp	r2, r3
 8010656:	d906      	bls.n	8010666 <ip4_reass+0x296>
 8010658:	4b22      	ldr	r3, [pc, #136]	; (80106e4 <ip4_reass+0x314>)
 801065a:	f240 229b 	movw	r2, #667	; 0x29b
 801065e:	4922      	ldr	r1, [pc, #136]	; (80106e8 <ip4_reass+0x318>)
 8010660:	4822      	ldr	r0, [pc, #136]	; (80106ec <ip4_reass+0x31c>)
 8010662:	f000 fb01 	bl	8010c68 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8010666:	4b1d      	ldr	r3, [pc, #116]	; (80106dc <ip4_reass+0x30c>)
 8010668:	881a      	ldrh	r2, [r3, #0]
 801066a:	8c3b      	ldrh	r3, [r7, #32]
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	b29a      	uxth	r2, r3
 8010670:	4b1a      	ldr	r3, [pc, #104]	; (80106dc <ip4_reass+0x30c>)
 8010672:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	e02c      	b.n	80106d2 <ip4_reass+0x302>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8010678:	2300      	movs	r3, #0
 801067a:	e02a      	b.n	80106d2 <ip4_reass+0x302>

nullreturn_ipr:
 801067c:	bf00      	nop
 801067e:	e000      	b.n	8010682 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8010680:	bf00      	nop
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	2b00      	cmp	r3, #0
 8010686:	d106      	bne.n	8010696 <ip4_reass+0x2c6>
 8010688:	4b16      	ldr	r3, [pc, #88]	; (80106e4 <ip4_reass+0x314>)
 801068a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801068e:	4918      	ldr	r1, [pc, #96]	; (80106f0 <ip4_reass+0x320>)
 8010690:	4816      	ldr	r0, [pc, #88]	; (80106ec <ip4_reass+0x31c>)
 8010692:	f000 fae9 	bl	8010c68 <iprintf>
  if (ipr->p == NULL) {
 8010696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010698:	685b      	ldr	r3, [r3, #4]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d114      	bne.n	80106c8 <ip4_reass+0x2f8>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801069e:	4b10      	ldr	r3, [pc, #64]	; (80106e0 <ip4_reass+0x310>)
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80106a4:	429a      	cmp	r2, r3
 80106a6:	d006      	beq.n	80106b6 <ip4_reass+0x2e6>
 80106a8:	4b0e      	ldr	r3, [pc, #56]	; (80106e4 <ip4_reass+0x314>)
 80106aa:	f240 22ab 	movw	r2, #683	; 0x2ab
 80106ae:	4911      	ldr	r1, [pc, #68]	; (80106f4 <ip4_reass+0x324>)
 80106b0:	480e      	ldr	r0, [pc, #56]	; (80106ec <ip4_reass+0x31c>)
 80106b2:	f000 fad9 	bl	8010c68 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80106b6:	2100      	movs	r1, #0
 80106b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106ba:	f7ff fcf1 	bl	80100a0 <ip_reass_dequeue_datagram>
 80106be:	e004      	b.n	80106ca <ip4_reass+0x2fa>
    goto nullreturn;
 80106c0:	bf00      	nop
 80106c2:	e002      	b.n	80106ca <ip4_reass+0x2fa>
    goto nullreturn;
 80106c4:	bf00      	nop
 80106c6:	e000      	b.n	80106ca <ip4_reass+0x2fa>
  }

nullreturn:
 80106c8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80106ca:	6878      	ldr	r0, [r7, #4]
 80106cc:	f7f4 fe80 	bl	80053d0 <pbuf_free>
  return NULL;
 80106d0:	2300      	movs	r3, #0
}
 80106d2:	4618      	mov	r0, r3
 80106d4:	3738      	adds	r7, #56	; 0x38
 80106d6:	46bd      	mov	sp, r7
 80106d8:	bd80      	pop	{r7, pc}
 80106da:	bf00      	nop
 80106dc:	200006b4 	.word	0x200006b4
 80106e0:	200006b0 	.word	0x200006b0
 80106e4:	08014660 	.word	0x08014660
 80106e8:	080147d0 	.word	0x080147d0
 80106ec:	080146a8 	.word	0x080146a8
 80106f0:	080147ec 	.word	0x080147ec
 80106f4:	080147f8 	.word	0x080147f8

080106f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80106fc:	2005      	movs	r0, #5
 80106fe:	f7f3 ff9d 	bl	800463c <memp_malloc>
 8010702:	4603      	mov	r3, r0
}
 8010704:	4618      	mov	r0, r3
 8010706:	bd80      	pop	{r7, pc}

08010708 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8010708:	b580      	push	{r7, lr}
 801070a:	b082      	sub	sp, #8
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d106      	bne.n	8010724 <ip_frag_free_pbuf_custom_ref+0x1c>
 8010716:	4b07      	ldr	r3, [pc, #28]	; (8010734 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8010718:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801071c:	4906      	ldr	r1, [pc, #24]	; (8010738 <ip_frag_free_pbuf_custom_ref+0x30>)
 801071e:	4807      	ldr	r0, [pc, #28]	; (801073c <ip_frag_free_pbuf_custom_ref+0x34>)
 8010720:	f000 faa2 	bl	8010c68 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8010724:	6879      	ldr	r1, [r7, #4]
 8010726:	2005      	movs	r0, #5
 8010728:	f7f3 ffd4 	bl	80046d4 <memp_free>
}
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}
 8010734:	08014660 	.word	0x08014660
 8010738:	08014818 	.word	0x08014818
 801073c:	080146a8 	.word	0x080146a8

08010740 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8010740:	b580      	push	{r7, lr}
 8010742:	b084      	sub	sp, #16
 8010744:	af00      	add	r7, sp, #0
 8010746:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d106      	bne.n	8010760 <ipfrag_free_pbuf_custom+0x20>
 8010752:	4b11      	ldr	r3, [pc, #68]	; (8010798 <ipfrag_free_pbuf_custom+0x58>)
 8010754:	f240 22ce 	movw	r2, #718	; 0x2ce
 8010758:	4910      	ldr	r1, [pc, #64]	; (801079c <ipfrag_free_pbuf_custom+0x5c>)
 801075a:	4811      	ldr	r0, [pc, #68]	; (80107a0 <ipfrag_free_pbuf_custom+0x60>)
 801075c:	f000 fa84 	bl	8010c68 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8010760:	68fa      	ldr	r2, [r7, #12]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	429a      	cmp	r2, r3
 8010766:	d006      	beq.n	8010776 <ipfrag_free_pbuf_custom+0x36>
 8010768:	4b0b      	ldr	r3, [pc, #44]	; (8010798 <ipfrag_free_pbuf_custom+0x58>)
 801076a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801076e:	490d      	ldr	r1, [pc, #52]	; (80107a4 <ipfrag_free_pbuf_custom+0x64>)
 8010770:	480b      	ldr	r0, [pc, #44]	; (80107a0 <ipfrag_free_pbuf_custom+0x60>)
 8010772:	f000 fa79 	bl	8010c68 <iprintf>
  if (pcr->original != NULL) {
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	695b      	ldr	r3, [r3, #20]
 801077a:	2b00      	cmp	r3, #0
 801077c:	d004      	beq.n	8010788 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	695b      	ldr	r3, [r3, #20]
 8010782:	4618      	mov	r0, r3
 8010784:	f7f4 fe24 	bl	80053d0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	f7ff ffbd 	bl	8010708 <ip_frag_free_pbuf_custom_ref>
}
 801078e:	bf00      	nop
 8010790:	3710      	adds	r7, #16
 8010792:	46bd      	mov	sp, r7
 8010794:	bd80      	pop	{r7, pc}
 8010796:	bf00      	nop
 8010798:	08014660 	.word	0x08014660
 801079c:	08014824 	.word	0x08014824
 80107a0:	080146a8 	.word	0x080146a8
 80107a4:	08014830 	.word	0x08014830

080107a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b094      	sub	sp, #80	; 0x50
 80107ac:	af02      	add	r7, sp, #8
 80107ae:	60f8      	str	r0, [r7, #12]
 80107b0:	60b9      	str	r1, [r7, #8]
 80107b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80107b4:	2300      	movs	r3, #0
 80107b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80107ba:	68bb      	ldr	r3, [r7, #8]
 80107bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80107be:	3b14      	subs	r3, #20
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	da00      	bge.n	80107c6 <ip4_frag+0x1e>
 80107c4:	3307      	adds	r3, #7
 80107c6:	10db      	asrs	r3, r3, #3
 80107c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80107ca:	2314      	movs	r3, #20
 80107cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	685b      	ldr	r3, [r3, #4]
 80107d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80107d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80107d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107da:	781b      	ldrb	r3, [r3, #0]
 80107dc:	f003 030f 	and.w	r3, r3, #15
 80107e0:	b2db      	uxtb	r3, r3
 80107e2:	009b      	lsls	r3, r3, #2
 80107e4:	b2db      	uxtb	r3, r3
 80107e6:	2b14      	cmp	r3, #20
 80107e8:	d002      	beq.n	80107f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80107ea:	f06f 0305 	mvn.w	r3, #5
 80107ee:	e10f      	b.n	8010a10 <ip4_frag+0x268>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80107f0:	68fb      	ldr	r3, [r7, #12]
 80107f2:	895b      	ldrh	r3, [r3, #10]
 80107f4:	2b13      	cmp	r3, #19
 80107f6:	d809      	bhi.n	801080c <ip4_frag+0x64>
 80107f8:	4b87      	ldr	r3, [pc, #540]	; (8010a18 <ip4_frag+0x270>)
 80107fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80107fe:	4987      	ldr	r1, [pc, #540]	; (8010a1c <ip4_frag+0x274>)
 8010800:	4887      	ldr	r0, [pc, #540]	; (8010a20 <ip4_frag+0x278>)
 8010802:	f000 fa31 	bl	8010c68 <iprintf>
 8010806:	f06f 0305 	mvn.w	r3, #5
 801080a:	e101      	b.n	8010a10 <ip4_frag+0x268>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801080c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801080e:	88db      	ldrh	r3, [r3, #6]
 8010810:	b29b      	uxth	r3, r3
 8010812:	4618      	mov	r0, r3
 8010814:	f7f2 ffcc 	bl	80037b0 <lwip_htons>
 8010818:	4603      	mov	r3, r0
 801081a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801081c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801081e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8010822:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8010826:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010828:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801082c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	891b      	ldrh	r3, [r3, #8]
 8010832:	3b14      	subs	r3, #20
 8010834:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8010838:	e0e0      	b.n	80109fc <ip4_frag+0x254>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801083a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801083c:	00db      	lsls	r3, r3, #3
 801083e:	b29b      	uxth	r3, r3
 8010840:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010844:	4293      	cmp	r3, r2
 8010846:	bf28      	it	cs
 8010848:	4613      	movcs	r3, r2
 801084a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801084c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010850:	2114      	movs	r1, #20
 8010852:	200e      	movs	r0, #14
 8010854:	f7f4 fadc 	bl	8004e10 <pbuf_alloc>
 8010858:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801085a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801085c:	2b00      	cmp	r3, #0
 801085e:	f000 80d4 	beq.w	8010a0a <ip4_frag+0x262>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010864:	895b      	ldrh	r3, [r3, #10]
 8010866:	2b13      	cmp	r3, #19
 8010868:	d806      	bhi.n	8010878 <ip4_frag+0xd0>
 801086a:	4b6b      	ldr	r3, [pc, #428]	; (8010a18 <ip4_frag+0x270>)
 801086c:	f240 3225 	movw	r2, #805	; 0x325
 8010870:	496c      	ldr	r1, [pc, #432]	; (8010a24 <ip4_frag+0x27c>)
 8010872:	486b      	ldr	r0, [pc, #428]	; (8010a20 <ip4_frag+0x278>)
 8010874:	f000 f9f8 	bl	8010c68 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8010878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087a:	685b      	ldr	r3, [r3, #4]
 801087c:	2214      	movs	r2, #20
 801087e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010880:	4618      	mov	r0, r3
 8010882:	f000 f9de 	bl	8010c42 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8010886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010888:	685b      	ldr	r3, [r3, #4]
 801088a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801088c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801088e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8010892:	e064      	b.n	801095e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8010894:	68fb      	ldr	r3, [r7, #12]
 8010896:	895a      	ldrh	r2, [r3, #10]
 8010898:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801089a:	1ad3      	subs	r3, r2, r3
 801089c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801089e:	68fb      	ldr	r3, [r7, #12]
 80108a0:	895b      	ldrh	r3, [r3, #10]
 80108a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d906      	bls.n	80108b6 <ip4_frag+0x10e>
 80108a8:	4b5b      	ldr	r3, [pc, #364]	; (8010a18 <ip4_frag+0x270>)
 80108aa:	f240 322d 	movw	r2, #813	; 0x32d
 80108ae:	495e      	ldr	r1, [pc, #376]	; (8010a28 <ip4_frag+0x280>)
 80108b0:	485b      	ldr	r0, [pc, #364]	; (8010a20 <ip4_frag+0x278>)
 80108b2:	f000 f9d9 	bl	8010c68 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80108b6:	8bfa      	ldrh	r2, [r7, #30]
 80108b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80108bc:	4293      	cmp	r3, r2
 80108be:	bf28      	it	cs
 80108c0:	4613      	movcs	r3, r2
 80108c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80108c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d105      	bne.n	80108da <ip4_frag+0x132>
        poff = 0;
 80108ce:	2300      	movs	r3, #0
 80108d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	681b      	ldr	r3, [r3, #0]
 80108d6:	60fb      	str	r3, [r7, #12]
        continue;
 80108d8:	e041      	b.n	801095e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80108da:	f7ff ff0d 	bl	80106f8 <ip_frag_alloc_pbuf_custom_ref>
 80108de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80108e0:	69bb      	ldr	r3, [r7, #24]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d103      	bne.n	80108ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80108e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80108e8:	f7f4 fd72 	bl	80053d0 <pbuf_free>
        goto memerr;
 80108ec:	e08e      	b.n	8010a0c <ip4_frag+0x264>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80108ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80108f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80108f6:	4413      	add	r3, r2
 80108f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80108fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8010900:	9201      	str	r2, [sp, #4]
 8010902:	9300      	str	r3, [sp, #0]
 8010904:	4603      	mov	r3, r0
 8010906:	2241      	movs	r2, #65	; 0x41
 8010908:	2000      	movs	r0, #0
 801090a:	f7f4 fba7 	bl	800505c <pbuf_alloced_custom>
 801090e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8010910:	697b      	ldr	r3, [r7, #20]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d106      	bne.n	8010924 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8010916:	69b8      	ldr	r0, [r7, #24]
 8010918:	f7ff fef6 	bl	8010708 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801091c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801091e:	f7f4 fd57 	bl	80053d0 <pbuf_free>
        goto memerr;
 8010922:	e073      	b.n	8010a0c <ip4_frag+0x264>
      }
      pbuf_ref(p);
 8010924:	68f8      	ldr	r0, [r7, #12]
 8010926:	f7f4 fdf3 	bl	8005510 <pbuf_ref>
      pcr->original = p;
 801092a:	69bb      	ldr	r3, [r7, #24]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8010930:	69bb      	ldr	r3, [r7, #24]
 8010932:	4a3e      	ldr	r2, [pc, #248]	; (8010a2c <ip4_frag+0x284>)
 8010934:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8010936:	6979      	ldr	r1, [r7, #20]
 8010938:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801093a:	f7f4 fe0b 	bl	8005554 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801093e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8010942:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8010946:	1ad3      	subs	r3, r2, r3
 8010948:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801094c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010950:	2b00      	cmp	r3, #0
 8010952:	d004      	beq.n	801095e <ip4_frag+0x1b6>
        poff = 0;
 8010954:	2300      	movs	r3, #0
 8010956:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8010958:	68fb      	ldr	r3, [r7, #12]
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801095e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8010962:	2b00      	cmp	r3, #0
 8010964:	d196      	bne.n	8010894 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8010966:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010968:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801096c:	4413      	add	r3, r2
 801096e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8010970:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010978:	3b14      	subs	r3, #20
 801097a:	429a      	cmp	r2, r3
 801097c:	bfd4      	ite	le
 801097e:	2301      	movle	r3, #1
 8010980:	2300      	movgt	r3, #0
 8010982:	b2db      	uxtb	r3, r3
 8010984:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8010986:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801098a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801098e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8010990:	6a3b      	ldr	r3, [r7, #32]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d002      	beq.n	801099c <ip4_frag+0x1f4>
 8010996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <ip4_frag+0x1fc>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801099c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801099e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80109a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80109a4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80109a6:	4618      	mov	r0, r3
 80109a8:	f7f2 ff02 	bl	80037b0 <lwip_htons>
 80109ac:	4603      	mov	r3, r0
 80109ae:	461a      	mov	r2, r3
 80109b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b2:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80109b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109b6:	3314      	adds	r3, #20
 80109b8:	b29b      	uxth	r3, r3
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7f2 fef8 	bl	80037b0 <lwip_htons>
 80109c0:	4603      	mov	r3, r0
 80109c2:	461a      	mov	r2, r3
 80109c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c6:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80109c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109ca:	2200      	movs	r2, #0
 80109cc:	729a      	strb	r2, [r3, #10]
 80109ce:	2200      	movs	r2, #0
 80109d0:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	695b      	ldr	r3, [r3, #20]
 80109d6:	687a      	ldr	r2, [r7, #4]
 80109d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80109da:	68b8      	ldr	r0, [r7, #8]
 80109dc:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80109de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80109e0:	f7f4 fcf6 	bl	80053d0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80109e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80109e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80109ea:	1ad3      	subs	r3, r2, r3
 80109ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80109f0:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80109f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80109f6:	4413      	add	r3, r2
 80109f8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80109fc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	f47f af1a 	bne.w	801083a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8010a06:	2300      	movs	r3, #0
 8010a08:	e002      	b.n	8010a10 <ip4_frag+0x268>
      goto memerr;
 8010a0a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8010a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a10:	4618      	mov	r0, r3
 8010a12:	3748      	adds	r7, #72	; 0x48
 8010a14:	46bd      	mov	sp, r7
 8010a16:	bd80      	pop	{r7, pc}
 8010a18:	08014660 	.word	0x08014660
 8010a1c:	0801483c 	.word	0x0801483c
 8010a20:	080146a8 	.word	0x080146a8
 8010a24:	08014858 	.word	0x08014858
 8010a28:	08014878 	.word	0x08014878
 8010a2c:	08010741 	.word	0x08010741

08010a30 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b086      	sub	sp, #24
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
 8010a38:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8010a3a:	230e      	movs	r3, #14
 8010a3c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	895b      	ldrh	r3, [r3, #10]
 8010a42:	2b0e      	cmp	r3, #14
 8010a44:	d96e      	bls.n	8010b24 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8010a46:	687b      	ldr	r3, [r7, #4]
 8010a48:	7bdb      	ldrb	r3, [r3, #15]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d106      	bne.n	8010a5c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8010a4e:	683b      	ldr	r3, [r7, #0]
 8010a50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010a54:	3301      	adds	r3, #1
 8010a56:	b2da      	uxtb	r2, r3
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	685b      	ldr	r3, [r3, #4]
 8010a60:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8010a62:	693b      	ldr	r3, [r7, #16]
 8010a64:	7b1a      	ldrb	r2, [r3, #12]
 8010a66:	7b5b      	ldrb	r3, [r3, #13]
 8010a68:	021b      	lsls	r3, r3, #8
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8010a6e:	693b      	ldr	r3, [r7, #16]
 8010a70:	781b      	ldrb	r3, [r3, #0]
 8010a72:	f003 0301 	and.w	r3, r3, #1
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d023      	beq.n	8010ac2 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8010a7a:	693b      	ldr	r3, [r7, #16]
 8010a7c:	781b      	ldrb	r3, [r3, #0]
 8010a7e:	2b01      	cmp	r3, #1
 8010a80:	d10f      	bne.n	8010aa2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a82:	693b      	ldr	r3, [r7, #16]
 8010a84:	785b      	ldrb	r3, [r3, #1]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d11b      	bne.n	8010ac2 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8010a8a:	693b      	ldr	r3, [r7, #16]
 8010a8c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8010a8e:	2b5e      	cmp	r3, #94	; 0x5e
 8010a90:	d117      	bne.n	8010ac2 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	7b5b      	ldrb	r3, [r3, #13]
 8010a96:	f043 0310 	orr.w	r3, r3, #16
 8010a9a:	b2da      	uxtb	r2, r3
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	735a      	strb	r2, [r3, #13]
 8010aa0:	e00f      	b.n	8010ac2 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8010aa2:	693b      	ldr	r3, [r7, #16]
 8010aa4:	2206      	movs	r2, #6
 8010aa6:	4928      	ldr	r1, [pc, #160]	; (8010b48 <ethernet_input+0x118>)
 8010aa8:	4618      	mov	r0, r3
 8010aaa:	f000 f8bb 	bl	8010c24 <memcmp>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d106      	bne.n	8010ac2 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	7b5b      	ldrb	r3, [r3, #13]
 8010ab8:	f043 0308 	orr.w	r3, r3, #8
 8010abc:	b2da      	uxtb	r2, r3
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8010ac2:	89fb      	ldrh	r3, [r7, #14]
 8010ac4:	2b08      	cmp	r3, #8
 8010ac6:	d003      	beq.n	8010ad0 <ethernet_input+0xa0>
 8010ac8:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8010acc:	d014      	beq.n	8010af8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8010ace:	e032      	b.n	8010b36 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010ad6:	f003 0308 	and.w	r3, r3, #8
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	d024      	beq.n	8010b28 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010ade:	8afb      	ldrh	r3, [r7, #22]
 8010ae0:	4619      	mov	r1, r3
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7f4 fbee 	bl	80052c4 <pbuf_remove_header>
 8010ae8:	4603      	mov	r3, r0
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d11e      	bne.n	8010b2c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8010aee:	6839      	ldr	r1, [r7, #0]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7fe ff0f 	bl	800f914 <ip4_input>
      break;
 8010af6:	e013      	b.n	8010b20 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8010af8:	683b      	ldr	r3, [r7, #0]
 8010afa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010afe:	f003 0308 	and.w	r3, r3, #8
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d014      	beq.n	8010b30 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8010b06:	8afb      	ldrh	r3, [r7, #22]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	6878      	ldr	r0, [r7, #4]
 8010b0c:	f7f4 fbda 	bl	80052c4 <pbuf_remove_header>
 8010b10:	4603      	mov	r3, r0
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d10e      	bne.n	8010b34 <ethernet_input+0x104>
        etharp_input(p, netif);
 8010b16:	6839      	ldr	r1, [r7, #0]
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f7fe f8ab 	bl	800ec74 <etharp_input>
      break;
 8010b1e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8010b20:	2300      	movs	r3, #0
 8010b22:	e00c      	b.n	8010b3e <ethernet_input+0x10e>
    goto free_and_return;
 8010b24:	bf00      	nop
 8010b26:	e006      	b.n	8010b36 <ethernet_input+0x106>
        goto free_and_return;
 8010b28:	bf00      	nop
 8010b2a:	e004      	b.n	8010b36 <ethernet_input+0x106>
        goto free_and_return;
 8010b2c:	bf00      	nop
 8010b2e:	e002      	b.n	8010b36 <ethernet_input+0x106>
        goto free_and_return;
 8010b30:	bf00      	nop
 8010b32:	e000      	b.n	8010b36 <ethernet_input+0x106>
        goto free_and_return;
 8010b34:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f7f4 fc4a 	bl	80053d0 <pbuf_free>
  return ERR_OK;
 8010b3c:	2300      	movs	r3, #0
}
 8010b3e:	4618      	mov	r0, r3
 8010b40:	3718      	adds	r7, #24
 8010b42:	46bd      	mov	sp, r7
 8010b44:	bd80      	pop	{r7, pc}
 8010b46:	bf00      	nop
 8010b48:	08014a1c 	.word	0x08014a1c

08010b4c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b086      	sub	sp, #24
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	60f8      	str	r0, [r7, #12]
 8010b54:	60b9      	str	r1, [r7, #8]
 8010b56:	607a      	str	r2, [r7, #4]
 8010b58:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8010b5a:	8c3b      	ldrh	r3, [r7, #32]
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7f2 fe27 	bl	80037b0 <lwip_htons>
 8010b62:	4603      	mov	r3, r0
 8010b64:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8010b66:	210e      	movs	r1, #14
 8010b68:	68b8      	ldr	r0, [r7, #8]
 8010b6a:	f7f4 fb9b 	bl	80052a4 <pbuf_add_header>
 8010b6e:	4603      	mov	r3, r0
 8010b70:	2b00      	cmp	r3, #0
 8010b72:	d125      	bne.n	8010bc0 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8010b74:	68bb      	ldr	r3, [r7, #8]
 8010b76:	685b      	ldr	r3, [r3, #4]
 8010b78:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8010b7a:	693b      	ldr	r3, [r7, #16]
 8010b7c:	8afa      	ldrh	r2, [r7, #22]
 8010b7e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8010b80:	693b      	ldr	r3, [r7, #16]
 8010b82:	2206      	movs	r2, #6
 8010b84:	6839      	ldr	r1, [r7, #0]
 8010b86:	4618      	mov	r0, r3
 8010b88:	f000 f85b 	bl	8010c42 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	3306      	adds	r3, #6
 8010b90:	2206      	movs	r2, #6
 8010b92:	6879      	ldr	r1, [r7, #4]
 8010b94:	4618      	mov	r0, r3
 8010b96:	f000 f854 	bl	8010c42 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8010b9a:	68fb      	ldr	r3, [r7, #12]
 8010b9c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ba0:	2b06      	cmp	r3, #6
 8010ba2:	d006      	beq.n	8010bb2 <ethernet_output+0x66>
 8010ba4:	4b0a      	ldr	r3, [pc, #40]	; (8010bd0 <ethernet_output+0x84>)
 8010ba6:	f240 1233 	movw	r2, #307	; 0x133
 8010baa:	490a      	ldr	r1, [pc, #40]	; (8010bd4 <ethernet_output+0x88>)
 8010bac:	480a      	ldr	r0, [pc, #40]	; (8010bd8 <ethernet_output+0x8c>)
 8010bae:	f000 f85b 	bl	8010c68 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8010bb2:	68fb      	ldr	r3, [r7, #12]
 8010bb4:	699b      	ldr	r3, [r3, #24]
 8010bb6:	68b9      	ldr	r1, [r7, #8]
 8010bb8:	68f8      	ldr	r0, [r7, #12]
 8010bba:	4798      	blx	r3
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	e002      	b.n	8010bc6 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8010bc0:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8010bc2:	f06f 0301 	mvn.w	r3, #1
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3718      	adds	r7, #24
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}
 8010bce:	bf00      	nop
 8010bd0:	08014888 	.word	0x08014888
 8010bd4:	080148c0 	.word	0x080148c0
 8010bd8:	080148f4 	.word	0x080148f4

08010bdc <__libc_init_array>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	4e0d      	ldr	r6, [pc, #52]	; (8010c14 <__libc_init_array+0x38>)
 8010be0:	4c0d      	ldr	r4, [pc, #52]	; (8010c18 <__libc_init_array+0x3c>)
 8010be2:	1ba4      	subs	r4, r4, r6
 8010be4:	10a4      	asrs	r4, r4, #2
 8010be6:	2500      	movs	r5, #0
 8010be8:	42a5      	cmp	r5, r4
 8010bea:	d109      	bne.n	8010c00 <__libc_init_array+0x24>
 8010bec:	4e0b      	ldr	r6, [pc, #44]	; (8010c1c <__libc_init_array+0x40>)
 8010bee:	4c0c      	ldr	r4, [pc, #48]	; (8010c20 <__libc_init_array+0x44>)
 8010bf0:	f000 ff5a 	bl	8011aa8 <_init>
 8010bf4:	1ba4      	subs	r4, r4, r6
 8010bf6:	10a4      	asrs	r4, r4, #2
 8010bf8:	2500      	movs	r5, #0
 8010bfa:	42a5      	cmp	r5, r4
 8010bfc:	d105      	bne.n	8010c0a <__libc_init_array+0x2e>
 8010bfe:	bd70      	pop	{r4, r5, r6, pc}
 8010c00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010c04:	4798      	blx	r3
 8010c06:	3501      	adds	r5, #1
 8010c08:	e7ee      	b.n	8010be8 <__libc_init_array+0xc>
 8010c0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010c0e:	4798      	blx	r3
 8010c10:	3501      	adds	r5, #1
 8010c12:	e7f2      	b.n	8010bfa <__libc_init_array+0x1e>
 8010c14:	08014acc 	.word	0x08014acc
 8010c18:	08014acc 	.word	0x08014acc
 8010c1c:	08014acc 	.word	0x08014acc
 8010c20:	08014ad0 	.word	0x08014ad0

08010c24 <memcmp>:
 8010c24:	b530      	push	{r4, r5, lr}
 8010c26:	2400      	movs	r4, #0
 8010c28:	42a2      	cmp	r2, r4
 8010c2a:	d101      	bne.n	8010c30 <memcmp+0xc>
 8010c2c:	2000      	movs	r0, #0
 8010c2e:	e007      	b.n	8010c40 <memcmp+0x1c>
 8010c30:	5d03      	ldrb	r3, [r0, r4]
 8010c32:	3401      	adds	r4, #1
 8010c34:	190d      	adds	r5, r1, r4
 8010c36:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8010c3a:	42ab      	cmp	r3, r5
 8010c3c:	d0f4      	beq.n	8010c28 <memcmp+0x4>
 8010c3e:	1b58      	subs	r0, r3, r5
 8010c40:	bd30      	pop	{r4, r5, pc}

08010c42 <memcpy>:
 8010c42:	b510      	push	{r4, lr}
 8010c44:	1e43      	subs	r3, r0, #1
 8010c46:	440a      	add	r2, r1
 8010c48:	4291      	cmp	r1, r2
 8010c4a:	d100      	bne.n	8010c4e <memcpy+0xc>
 8010c4c:	bd10      	pop	{r4, pc}
 8010c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c52:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c56:	e7f7      	b.n	8010c48 <memcpy+0x6>

08010c58 <memset>:
 8010c58:	4402      	add	r2, r0
 8010c5a:	4603      	mov	r3, r0
 8010c5c:	4293      	cmp	r3, r2
 8010c5e:	d100      	bne.n	8010c62 <memset+0xa>
 8010c60:	4770      	bx	lr
 8010c62:	f803 1b01 	strb.w	r1, [r3], #1
 8010c66:	e7f9      	b.n	8010c5c <memset+0x4>

08010c68 <iprintf>:
 8010c68:	b40f      	push	{r0, r1, r2, r3}
 8010c6a:	4b0a      	ldr	r3, [pc, #40]	; (8010c94 <iprintf+0x2c>)
 8010c6c:	b513      	push	{r0, r1, r4, lr}
 8010c6e:	681c      	ldr	r4, [r3, #0]
 8010c70:	b124      	cbz	r4, 8010c7c <iprintf+0x14>
 8010c72:	69a3      	ldr	r3, [r4, #24]
 8010c74:	b913      	cbnz	r3, 8010c7c <iprintf+0x14>
 8010c76:	4620      	mov	r0, r4
 8010c78:	f000 f882 	bl	8010d80 <__sinit>
 8010c7c:	ab05      	add	r3, sp, #20
 8010c7e:	9a04      	ldr	r2, [sp, #16]
 8010c80:	68a1      	ldr	r1, [r4, #8]
 8010c82:	9301      	str	r3, [sp, #4]
 8010c84:	4620      	mov	r0, r4
 8010c86:	f000 f9df 	bl	8011048 <_vfiprintf_r>
 8010c8a:	b002      	add	sp, #8
 8010c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c90:	b004      	add	sp, #16
 8010c92:	4770      	bx	lr
 8010c94:	20000018 	.word	0x20000018

08010c98 <rand>:
 8010c98:	b538      	push	{r3, r4, r5, lr}
 8010c9a:	4b13      	ldr	r3, [pc, #76]	; (8010ce8 <rand+0x50>)
 8010c9c:	681c      	ldr	r4, [r3, #0]
 8010c9e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010ca0:	b97b      	cbnz	r3, 8010cc2 <rand+0x2a>
 8010ca2:	2018      	movs	r0, #24
 8010ca4:	f000 f8f6 	bl	8010e94 <malloc>
 8010ca8:	4a10      	ldr	r2, [pc, #64]	; (8010cec <rand+0x54>)
 8010caa:	4b11      	ldr	r3, [pc, #68]	; (8010cf0 <rand+0x58>)
 8010cac:	63a0      	str	r0, [r4, #56]	; 0x38
 8010cae:	e9c0 2300 	strd	r2, r3, [r0]
 8010cb2:	4b10      	ldr	r3, [pc, #64]	; (8010cf4 <rand+0x5c>)
 8010cb4:	6083      	str	r3, [r0, #8]
 8010cb6:	230b      	movs	r3, #11
 8010cb8:	8183      	strh	r3, [r0, #12]
 8010cba:	2201      	movs	r2, #1
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8010cc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8010cc4:	480c      	ldr	r0, [pc, #48]	; (8010cf8 <rand+0x60>)
 8010cc6:	690a      	ldr	r2, [r1, #16]
 8010cc8:	694b      	ldr	r3, [r1, #20]
 8010cca:	4c0c      	ldr	r4, [pc, #48]	; (8010cfc <rand+0x64>)
 8010ccc:	4350      	muls	r0, r2
 8010cce:	fb04 0003 	mla	r0, r4, r3, r0
 8010cd2:	fba2 2304 	umull	r2, r3, r2, r4
 8010cd6:	4403      	add	r3, r0
 8010cd8:	1c54      	adds	r4, r2, #1
 8010cda:	f143 0500 	adc.w	r5, r3, #0
 8010cde:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8010ce2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8010ce6:	bd38      	pop	{r3, r4, r5, pc}
 8010ce8:	20000018 	.word	0x20000018
 8010cec:	abcd330e 	.word	0xabcd330e
 8010cf0:	e66d1234 	.word	0xe66d1234
 8010cf4:	0005deec 	.word	0x0005deec
 8010cf8:	5851f42d 	.word	0x5851f42d
 8010cfc:	4c957f2d 	.word	0x4c957f2d

08010d00 <std>:
 8010d00:	2300      	movs	r3, #0
 8010d02:	b510      	push	{r4, lr}
 8010d04:	4604      	mov	r4, r0
 8010d06:	e9c0 3300 	strd	r3, r3, [r0]
 8010d0a:	6083      	str	r3, [r0, #8]
 8010d0c:	8181      	strh	r1, [r0, #12]
 8010d0e:	6643      	str	r3, [r0, #100]	; 0x64
 8010d10:	81c2      	strh	r2, [r0, #14]
 8010d12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010d16:	6183      	str	r3, [r0, #24]
 8010d18:	4619      	mov	r1, r3
 8010d1a:	2208      	movs	r2, #8
 8010d1c:	305c      	adds	r0, #92	; 0x5c
 8010d1e:	f7ff ff9b 	bl	8010c58 <memset>
 8010d22:	4b05      	ldr	r3, [pc, #20]	; (8010d38 <std+0x38>)
 8010d24:	6263      	str	r3, [r4, #36]	; 0x24
 8010d26:	4b05      	ldr	r3, [pc, #20]	; (8010d3c <std+0x3c>)
 8010d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d2a:	4b05      	ldr	r3, [pc, #20]	; (8010d40 <std+0x40>)
 8010d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d2e:	4b05      	ldr	r3, [pc, #20]	; (8010d44 <std+0x44>)
 8010d30:	6224      	str	r4, [r4, #32]
 8010d32:	6323      	str	r3, [r4, #48]	; 0x30
 8010d34:	bd10      	pop	{r4, pc}
 8010d36:	bf00      	nop
 8010d38:	080115a5 	.word	0x080115a5
 8010d3c:	080115c7 	.word	0x080115c7
 8010d40:	080115ff 	.word	0x080115ff
 8010d44:	08011623 	.word	0x08011623

08010d48 <_cleanup_r>:
 8010d48:	4901      	ldr	r1, [pc, #4]	; (8010d50 <_cleanup_r+0x8>)
 8010d4a:	f000 b885 	b.w	8010e58 <_fwalk_reent>
 8010d4e:	bf00      	nop
 8010d50:	080118fd 	.word	0x080118fd

08010d54 <__sfmoreglue>:
 8010d54:	b570      	push	{r4, r5, r6, lr}
 8010d56:	1e4a      	subs	r2, r1, #1
 8010d58:	2568      	movs	r5, #104	; 0x68
 8010d5a:	4355      	muls	r5, r2
 8010d5c:	460e      	mov	r6, r1
 8010d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010d62:	f000 f8ed 	bl	8010f40 <_malloc_r>
 8010d66:	4604      	mov	r4, r0
 8010d68:	b140      	cbz	r0, 8010d7c <__sfmoreglue+0x28>
 8010d6a:	2100      	movs	r1, #0
 8010d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8010d70:	300c      	adds	r0, #12
 8010d72:	60a0      	str	r0, [r4, #8]
 8010d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010d78:	f7ff ff6e 	bl	8010c58 <memset>
 8010d7c:	4620      	mov	r0, r4
 8010d7e:	bd70      	pop	{r4, r5, r6, pc}

08010d80 <__sinit>:
 8010d80:	6983      	ldr	r3, [r0, #24]
 8010d82:	b510      	push	{r4, lr}
 8010d84:	4604      	mov	r4, r0
 8010d86:	bb33      	cbnz	r3, 8010dd6 <__sinit+0x56>
 8010d88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8010d8c:	6503      	str	r3, [r0, #80]	; 0x50
 8010d8e:	4b12      	ldr	r3, [pc, #72]	; (8010dd8 <__sinit+0x58>)
 8010d90:	4a12      	ldr	r2, [pc, #72]	; (8010ddc <__sinit+0x5c>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6282      	str	r2, [r0, #40]	; 0x28
 8010d96:	4298      	cmp	r0, r3
 8010d98:	bf04      	itt	eq
 8010d9a:	2301      	moveq	r3, #1
 8010d9c:	6183      	streq	r3, [r0, #24]
 8010d9e:	f000 f81f 	bl	8010de0 <__sfp>
 8010da2:	6060      	str	r0, [r4, #4]
 8010da4:	4620      	mov	r0, r4
 8010da6:	f000 f81b 	bl	8010de0 <__sfp>
 8010daa:	60a0      	str	r0, [r4, #8]
 8010dac:	4620      	mov	r0, r4
 8010dae:	f000 f817 	bl	8010de0 <__sfp>
 8010db2:	2200      	movs	r2, #0
 8010db4:	60e0      	str	r0, [r4, #12]
 8010db6:	2104      	movs	r1, #4
 8010db8:	6860      	ldr	r0, [r4, #4]
 8010dba:	f7ff ffa1 	bl	8010d00 <std>
 8010dbe:	2201      	movs	r2, #1
 8010dc0:	2109      	movs	r1, #9
 8010dc2:	68a0      	ldr	r0, [r4, #8]
 8010dc4:	f7ff ff9c 	bl	8010d00 <std>
 8010dc8:	2202      	movs	r2, #2
 8010dca:	2112      	movs	r1, #18
 8010dcc:	68e0      	ldr	r0, [r4, #12]
 8010dce:	f7ff ff97 	bl	8010d00 <std>
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	61a3      	str	r3, [r4, #24]
 8010dd6:	bd10      	pop	{r4, pc}
 8010dd8:	08014a2c 	.word	0x08014a2c
 8010ddc:	08010d49 	.word	0x08010d49

08010de0 <__sfp>:
 8010de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010de2:	4b1b      	ldr	r3, [pc, #108]	; (8010e50 <__sfp+0x70>)
 8010de4:	681e      	ldr	r6, [r3, #0]
 8010de6:	69b3      	ldr	r3, [r6, #24]
 8010de8:	4607      	mov	r7, r0
 8010dea:	b913      	cbnz	r3, 8010df2 <__sfp+0x12>
 8010dec:	4630      	mov	r0, r6
 8010dee:	f7ff ffc7 	bl	8010d80 <__sinit>
 8010df2:	3648      	adds	r6, #72	; 0x48
 8010df4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010df8:	3b01      	subs	r3, #1
 8010dfa:	d503      	bpl.n	8010e04 <__sfp+0x24>
 8010dfc:	6833      	ldr	r3, [r6, #0]
 8010dfe:	b133      	cbz	r3, 8010e0e <__sfp+0x2e>
 8010e00:	6836      	ldr	r6, [r6, #0]
 8010e02:	e7f7      	b.n	8010df4 <__sfp+0x14>
 8010e04:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010e08:	b16d      	cbz	r5, 8010e26 <__sfp+0x46>
 8010e0a:	3468      	adds	r4, #104	; 0x68
 8010e0c:	e7f4      	b.n	8010df8 <__sfp+0x18>
 8010e0e:	2104      	movs	r1, #4
 8010e10:	4638      	mov	r0, r7
 8010e12:	f7ff ff9f 	bl	8010d54 <__sfmoreglue>
 8010e16:	6030      	str	r0, [r6, #0]
 8010e18:	2800      	cmp	r0, #0
 8010e1a:	d1f1      	bne.n	8010e00 <__sfp+0x20>
 8010e1c:	230c      	movs	r3, #12
 8010e1e:	603b      	str	r3, [r7, #0]
 8010e20:	4604      	mov	r4, r0
 8010e22:	4620      	mov	r0, r4
 8010e24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e26:	4b0b      	ldr	r3, [pc, #44]	; (8010e54 <__sfp+0x74>)
 8010e28:	6665      	str	r5, [r4, #100]	; 0x64
 8010e2a:	e9c4 5500 	strd	r5, r5, [r4]
 8010e2e:	60a5      	str	r5, [r4, #8]
 8010e30:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8010e34:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010e38:	2208      	movs	r2, #8
 8010e3a:	4629      	mov	r1, r5
 8010e3c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010e40:	f7ff ff0a 	bl	8010c58 <memset>
 8010e44:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010e48:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010e4c:	e7e9      	b.n	8010e22 <__sfp+0x42>
 8010e4e:	bf00      	nop
 8010e50:	08014a2c 	.word	0x08014a2c
 8010e54:	ffff0001 	.word	0xffff0001

08010e58 <_fwalk_reent>:
 8010e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e5c:	4680      	mov	r8, r0
 8010e5e:	4689      	mov	r9, r1
 8010e60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010e64:	2600      	movs	r6, #0
 8010e66:	b914      	cbnz	r4, 8010e6e <_fwalk_reent+0x16>
 8010e68:	4630      	mov	r0, r6
 8010e6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e6e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8010e72:	3f01      	subs	r7, #1
 8010e74:	d501      	bpl.n	8010e7a <_fwalk_reent+0x22>
 8010e76:	6824      	ldr	r4, [r4, #0]
 8010e78:	e7f5      	b.n	8010e66 <_fwalk_reent+0xe>
 8010e7a:	89ab      	ldrh	r3, [r5, #12]
 8010e7c:	2b01      	cmp	r3, #1
 8010e7e:	d907      	bls.n	8010e90 <_fwalk_reent+0x38>
 8010e80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e84:	3301      	adds	r3, #1
 8010e86:	d003      	beq.n	8010e90 <_fwalk_reent+0x38>
 8010e88:	4629      	mov	r1, r5
 8010e8a:	4640      	mov	r0, r8
 8010e8c:	47c8      	blx	r9
 8010e8e:	4306      	orrs	r6, r0
 8010e90:	3568      	adds	r5, #104	; 0x68
 8010e92:	e7ee      	b.n	8010e72 <_fwalk_reent+0x1a>

08010e94 <malloc>:
 8010e94:	4b02      	ldr	r3, [pc, #8]	; (8010ea0 <malloc+0xc>)
 8010e96:	4601      	mov	r1, r0
 8010e98:	6818      	ldr	r0, [r3, #0]
 8010e9a:	f000 b851 	b.w	8010f40 <_malloc_r>
 8010e9e:	bf00      	nop
 8010ea0:	20000018 	.word	0x20000018

08010ea4 <_free_r>:
 8010ea4:	b538      	push	{r3, r4, r5, lr}
 8010ea6:	4605      	mov	r5, r0
 8010ea8:	2900      	cmp	r1, #0
 8010eaa:	d045      	beq.n	8010f38 <_free_r+0x94>
 8010eac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010eb0:	1f0c      	subs	r4, r1, #4
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	bfb8      	it	lt
 8010eb6:	18e4      	addlt	r4, r4, r3
 8010eb8:	f000 fdc0 	bl	8011a3c <__malloc_lock>
 8010ebc:	4a1f      	ldr	r2, [pc, #124]	; (8010f3c <_free_r+0x98>)
 8010ebe:	6813      	ldr	r3, [r2, #0]
 8010ec0:	4610      	mov	r0, r2
 8010ec2:	b933      	cbnz	r3, 8010ed2 <_free_r+0x2e>
 8010ec4:	6063      	str	r3, [r4, #4]
 8010ec6:	6014      	str	r4, [r2, #0]
 8010ec8:	4628      	mov	r0, r5
 8010eca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ece:	f000 bdb6 	b.w	8011a3e <__malloc_unlock>
 8010ed2:	42a3      	cmp	r3, r4
 8010ed4:	d90c      	bls.n	8010ef0 <_free_r+0x4c>
 8010ed6:	6821      	ldr	r1, [r4, #0]
 8010ed8:	1862      	adds	r2, r4, r1
 8010eda:	4293      	cmp	r3, r2
 8010edc:	bf04      	itt	eq
 8010ede:	681a      	ldreq	r2, [r3, #0]
 8010ee0:	685b      	ldreq	r3, [r3, #4]
 8010ee2:	6063      	str	r3, [r4, #4]
 8010ee4:	bf04      	itt	eq
 8010ee6:	1852      	addeq	r2, r2, r1
 8010ee8:	6022      	streq	r2, [r4, #0]
 8010eea:	6004      	str	r4, [r0, #0]
 8010eec:	e7ec      	b.n	8010ec8 <_free_r+0x24>
 8010eee:	4613      	mov	r3, r2
 8010ef0:	685a      	ldr	r2, [r3, #4]
 8010ef2:	b10a      	cbz	r2, 8010ef8 <_free_r+0x54>
 8010ef4:	42a2      	cmp	r2, r4
 8010ef6:	d9fa      	bls.n	8010eee <_free_r+0x4a>
 8010ef8:	6819      	ldr	r1, [r3, #0]
 8010efa:	1858      	adds	r0, r3, r1
 8010efc:	42a0      	cmp	r0, r4
 8010efe:	d10b      	bne.n	8010f18 <_free_r+0x74>
 8010f00:	6820      	ldr	r0, [r4, #0]
 8010f02:	4401      	add	r1, r0
 8010f04:	1858      	adds	r0, r3, r1
 8010f06:	4282      	cmp	r2, r0
 8010f08:	6019      	str	r1, [r3, #0]
 8010f0a:	d1dd      	bne.n	8010ec8 <_free_r+0x24>
 8010f0c:	6810      	ldr	r0, [r2, #0]
 8010f0e:	6852      	ldr	r2, [r2, #4]
 8010f10:	605a      	str	r2, [r3, #4]
 8010f12:	4401      	add	r1, r0
 8010f14:	6019      	str	r1, [r3, #0]
 8010f16:	e7d7      	b.n	8010ec8 <_free_r+0x24>
 8010f18:	d902      	bls.n	8010f20 <_free_r+0x7c>
 8010f1a:	230c      	movs	r3, #12
 8010f1c:	602b      	str	r3, [r5, #0]
 8010f1e:	e7d3      	b.n	8010ec8 <_free_r+0x24>
 8010f20:	6820      	ldr	r0, [r4, #0]
 8010f22:	1821      	adds	r1, r4, r0
 8010f24:	428a      	cmp	r2, r1
 8010f26:	bf04      	itt	eq
 8010f28:	6811      	ldreq	r1, [r2, #0]
 8010f2a:	6852      	ldreq	r2, [r2, #4]
 8010f2c:	6062      	str	r2, [r4, #4]
 8010f2e:	bf04      	itt	eq
 8010f30:	1809      	addeq	r1, r1, r0
 8010f32:	6021      	streq	r1, [r4, #0]
 8010f34:	605c      	str	r4, [r3, #4]
 8010f36:	e7c7      	b.n	8010ec8 <_free_r+0x24>
 8010f38:	bd38      	pop	{r3, r4, r5, pc}
 8010f3a:	bf00      	nop
 8010f3c:	200006b8 	.word	0x200006b8

08010f40 <_malloc_r>:
 8010f40:	b570      	push	{r4, r5, r6, lr}
 8010f42:	1ccd      	adds	r5, r1, #3
 8010f44:	f025 0503 	bic.w	r5, r5, #3
 8010f48:	3508      	adds	r5, #8
 8010f4a:	2d0c      	cmp	r5, #12
 8010f4c:	bf38      	it	cc
 8010f4e:	250c      	movcc	r5, #12
 8010f50:	2d00      	cmp	r5, #0
 8010f52:	4606      	mov	r6, r0
 8010f54:	db01      	blt.n	8010f5a <_malloc_r+0x1a>
 8010f56:	42a9      	cmp	r1, r5
 8010f58:	d903      	bls.n	8010f62 <_malloc_r+0x22>
 8010f5a:	230c      	movs	r3, #12
 8010f5c:	6033      	str	r3, [r6, #0]
 8010f5e:	2000      	movs	r0, #0
 8010f60:	bd70      	pop	{r4, r5, r6, pc}
 8010f62:	f000 fd6b 	bl	8011a3c <__malloc_lock>
 8010f66:	4a21      	ldr	r2, [pc, #132]	; (8010fec <_malloc_r+0xac>)
 8010f68:	6814      	ldr	r4, [r2, #0]
 8010f6a:	4621      	mov	r1, r4
 8010f6c:	b991      	cbnz	r1, 8010f94 <_malloc_r+0x54>
 8010f6e:	4c20      	ldr	r4, [pc, #128]	; (8010ff0 <_malloc_r+0xb0>)
 8010f70:	6823      	ldr	r3, [r4, #0]
 8010f72:	b91b      	cbnz	r3, 8010f7c <_malloc_r+0x3c>
 8010f74:	4630      	mov	r0, r6
 8010f76:	f000 fb05 	bl	8011584 <_sbrk_r>
 8010f7a:	6020      	str	r0, [r4, #0]
 8010f7c:	4629      	mov	r1, r5
 8010f7e:	4630      	mov	r0, r6
 8010f80:	f000 fb00 	bl	8011584 <_sbrk_r>
 8010f84:	1c43      	adds	r3, r0, #1
 8010f86:	d124      	bne.n	8010fd2 <_malloc_r+0x92>
 8010f88:	230c      	movs	r3, #12
 8010f8a:	6033      	str	r3, [r6, #0]
 8010f8c:	4630      	mov	r0, r6
 8010f8e:	f000 fd56 	bl	8011a3e <__malloc_unlock>
 8010f92:	e7e4      	b.n	8010f5e <_malloc_r+0x1e>
 8010f94:	680b      	ldr	r3, [r1, #0]
 8010f96:	1b5b      	subs	r3, r3, r5
 8010f98:	d418      	bmi.n	8010fcc <_malloc_r+0x8c>
 8010f9a:	2b0b      	cmp	r3, #11
 8010f9c:	d90f      	bls.n	8010fbe <_malloc_r+0x7e>
 8010f9e:	600b      	str	r3, [r1, #0]
 8010fa0:	50cd      	str	r5, [r1, r3]
 8010fa2:	18cc      	adds	r4, r1, r3
 8010fa4:	4630      	mov	r0, r6
 8010fa6:	f000 fd4a 	bl	8011a3e <__malloc_unlock>
 8010faa:	f104 000b 	add.w	r0, r4, #11
 8010fae:	1d23      	adds	r3, r4, #4
 8010fb0:	f020 0007 	bic.w	r0, r0, #7
 8010fb4:	1ac3      	subs	r3, r0, r3
 8010fb6:	d0d3      	beq.n	8010f60 <_malloc_r+0x20>
 8010fb8:	425a      	negs	r2, r3
 8010fba:	50e2      	str	r2, [r4, r3]
 8010fbc:	e7d0      	b.n	8010f60 <_malloc_r+0x20>
 8010fbe:	428c      	cmp	r4, r1
 8010fc0:	684b      	ldr	r3, [r1, #4]
 8010fc2:	bf16      	itet	ne
 8010fc4:	6063      	strne	r3, [r4, #4]
 8010fc6:	6013      	streq	r3, [r2, #0]
 8010fc8:	460c      	movne	r4, r1
 8010fca:	e7eb      	b.n	8010fa4 <_malloc_r+0x64>
 8010fcc:	460c      	mov	r4, r1
 8010fce:	6849      	ldr	r1, [r1, #4]
 8010fd0:	e7cc      	b.n	8010f6c <_malloc_r+0x2c>
 8010fd2:	1cc4      	adds	r4, r0, #3
 8010fd4:	f024 0403 	bic.w	r4, r4, #3
 8010fd8:	42a0      	cmp	r0, r4
 8010fda:	d005      	beq.n	8010fe8 <_malloc_r+0xa8>
 8010fdc:	1a21      	subs	r1, r4, r0
 8010fde:	4630      	mov	r0, r6
 8010fe0:	f000 fad0 	bl	8011584 <_sbrk_r>
 8010fe4:	3001      	adds	r0, #1
 8010fe6:	d0cf      	beq.n	8010f88 <_malloc_r+0x48>
 8010fe8:	6025      	str	r5, [r4, #0]
 8010fea:	e7db      	b.n	8010fa4 <_malloc_r+0x64>
 8010fec:	200006b8 	.word	0x200006b8
 8010ff0:	200006bc 	.word	0x200006bc

08010ff4 <__sfputc_r>:
 8010ff4:	6893      	ldr	r3, [r2, #8]
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	b410      	push	{r4}
 8010ffc:	6093      	str	r3, [r2, #8]
 8010ffe:	da08      	bge.n	8011012 <__sfputc_r+0x1e>
 8011000:	6994      	ldr	r4, [r2, #24]
 8011002:	42a3      	cmp	r3, r4
 8011004:	db01      	blt.n	801100a <__sfputc_r+0x16>
 8011006:	290a      	cmp	r1, #10
 8011008:	d103      	bne.n	8011012 <__sfputc_r+0x1e>
 801100a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801100e:	f000 bb0d 	b.w	801162c <__swbuf_r>
 8011012:	6813      	ldr	r3, [r2, #0]
 8011014:	1c58      	adds	r0, r3, #1
 8011016:	6010      	str	r0, [r2, #0]
 8011018:	7019      	strb	r1, [r3, #0]
 801101a:	4608      	mov	r0, r1
 801101c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011020:	4770      	bx	lr

08011022 <__sfputs_r>:
 8011022:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011024:	4606      	mov	r6, r0
 8011026:	460f      	mov	r7, r1
 8011028:	4614      	mov	r4, r2
 801102a:	18d5      	adds	r5, r2, r3
 801102c:	42ac      	cmp	r4, r5
 801102e:	d101      	bne.n	8011034 <__sfputs_r+0x12>
 8011030:	2000      	movs	r0, #0
 8011032:	e007      	b.n	8011044 <__sfputs_r+0x22>
 8011034:	463a      	mov	r2, r7
 8011036:	f814 1b01 	ldrb.w	r1, [r4], #1
 801103a:	4630      	mov	r0, r6
 801103c:	f7ff ffda 	bl	8010ff4 <__sfputc_r>
 8011040:	1c43      	adds	r3, r0, #1
 8011042:	d1f3      	bne.n	801102c <__sfputs_r+0xa>
 8011044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011048 <_vfiprintf_r>:
 8011048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801104c:	460c      	mov	r4, r1
 801104e:	b09d      	sub	sp, #116	; 0x74
 8011050:	4617      	mov	r7, r2
 8011052:	461d      	mov	r5, r3
 8011054:	4606      	mov	r6, r0
 8011056:	b118      	cbz	r0, 8011060 <_vfiprintf_r+0x18>
 8011058:	6983      	ldr	r3, [r0, #24]
 801105a:	b90b      	cbnz	r3, 8011060 <_vfiprintf_r+0x18>
 801105c:	f7ff fe90 	bl	8010d80 <__sinit>
 8011060:	4b7c      	ldr	r3, [pc, #496]	; (8011254 <_vfiprintf_r+0x20c>)
 8011062:	429c      	cmp	r4, r3
 8011064:	d158      	bne.n	8011118 <_vfiprintf_r+0xd0>
 8011066:	6874      	ldr	r4, [r6, #4]
 8011068:	89a3      	ldrh	r3, [r4, #12]
 801106a:	0718      	lsls	r0, r3, #28
 801106c:	d55e      	bpl.n	801112c <_vfiprintf_r+0xe4>
 801106e:	6923      	ldr	r3, [r4, #16]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d05b      	beq.n	801112c <_vfiprintf_r+0xe4>
 8011074:	2300      	movs	r3, #0
 8011076:	9309      	str	r3, [sp, #36]	; 0x24
 8011078:	2320      	movs	r3, #32
 801107a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801107e:	2330      	movs	r3, #48	; 0x30
 8011080:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011084:	9503      	str	r5, [sp, #12]
 8011086:	f04f 0b01 	mov.w	fp, #1
 801108a:	46b8      	mov	r8, r7
 801108c:	4645      	mov	r5, r8
 801108e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8011092:	b10b      	cbz	r3, 8011098 <_vfiprintf_r+0x50>
 8011094:	2b25      	cmp	r3, #37	; 0x25
 8011096:	d154      	bne.n	8011142 <_vfiprintf_r+0xfa>
 8011098:	ebb8 0a07 	subs.w	sl, r8, r7
 801109c:	d00b      	beq.n	80110b6 <_vfiprintf_r+0x6e>
 801109e:	4653      	mov	r3, sl
 80110a0:	463a      	mov	r2, r7
 80110a2:	4621      	mov	r1, r4
 80110a4:	4630      	mov	r0, r6
 80110a6:	f7ff ffbc 	bl	8011022 <__sfputs_r>
 80110aa:	3001      	adds	r0, #1
 80110ac:	f000 80c2 	beq.w	8011234 <_vfiprintf_r+0x1ec>
 80110b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80110b2:	4453      	add	r3, sl
 80110b4:	9309      	str	r3, [sp, #36]	; 0x24
 80110b6:	f898 3000 	ldrb.w	r3, [r8]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	f000 80ba 	beq.w	8011234 <_vfiprintf_r+0x1ec>
 80110c0:	2300      	movs	r3, #0
 80110c2:	f04f 32ff 	mov.w	r2, #4294967295
 80110c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80110ca:	9304      	str	r3, [sp, #16]
 80110cc:	9307      	str	r3, [sp, #28]
 80110ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80110d2:	931a      	str	r3, [sp, #104]	; 0x68
 80110d4:	46a8      	mov	r8, r5
 80110d6:	2205      	movs	r2, #5
 80110d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80110dc:	485e      	ldr	r0, [pc, #376]	; (8011258 <_vfiprintf_r+0x210>)
 80110de:	f7ef f88f 	bl	8000200 <memchr>
 80110e2:	9b04      	ldr	r3, [sp, #16]
 80110e4:	bb78      	cbnz	r0, 8011146 <_vfiprintf_r+0xfe>
 80110e6:	06d9      	lsls	r1, r3, #27
 80110e8:	bf44      	itt	mi
 80110ea:	2220      	movmi	r2, #32
 80110ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80110f0:	071a      	lsls	r2, r3, #28
 80110f2:	bf44      	itt	mi
 80110f4:	222b      	movmi	r2, #43	; 0x2b
 80110f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80110fa:	782a      	ldrb	r2, [r5, #0]
 80110fc:	2a2a      	cmp	r2, #42	; 0x2a
 80110fe:	d02a      	beq.n	8011156 <_vfiprintf_r+0x10e>
 8011100:	9a07      	ldr	r2, [sp, #28]
 8011102:	46a8      	mov	r8, r5
 8011104:	2000      	movs	r0, #0
 8011106:	250a      	movs	r5, #10
 8011108:	4641      	mov	r1, r8
 801110a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801110e:	3b30      	subs	r3, #48	; 0x30
 8011110:	2b09      	cmp	r3, #9
 8011112:	d969      	bls.n	80111e8 <_vfiprintf_r+0x1a0>
 8011114:	b360      	cbz	r0, 8011170 <_vfiprintf_r+0x128>
 8011116:	e024      	b.n	8011162 <_vfiprintf_r+0x11a>
 8011118:	4b50      	ldr	r3, [pc, #320]	; (801125c <_vfiprintf_r+0x214>)
 801111a:	429c      	cmp	r4, r3
 801111c:	d101      	bne.n	8011122 <_vfiprintf_r+0xda>
 801111e:	68b4      	ldr	r4, [r6, #8]
 8011120:	e7a2      	b.n	8011068 <_vfiprintf_r+0x20>
 8011122:	4b4f      	ldr	r3, [pc, #316]	; (8011260 <_vfiprintf_r+0x218>)
 8011124:	429c      	cmp	r4, r3
 8011126:	bf08      	it	eq
 8011128:	68f4      	ldreq	r4, [r6, #12]
 801112a:	e79d      	b.n	8011068 <_vfiprintf_r+0x20>
 801112c:	4621      	mov	r1, r4
 801112e:	4630      	mov	r0, r6
 8011130:	f000 fae0 	bl	80116f4 <__swsetup_r>
 8011134:	2800      	cmp	r0, #0
 8011136:	d09d      	beq.n	8011074 <_vfiprintf_r+0x2c>
 8011138:	f04f 30ff 	mov.w	r0, #4294967295
 801113c:	b01d      	add	sp, #116	; 0x74
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	46a8      	mov	r8, r5
 8011144:	e7a2      	b.n	801108c <_vfiprintf_r+0x44>
 8011146:	4a44      	ldr	r2, [pc, #272]	; (8011258 <_vfiprintf_r+0x210>)
 8011148:	1a80      	subs	r0, r0, r2
 801114a:	fa0b f000 	lsl.w	r0, fp, r0
 801114e:	4318      	orrs	r0, r3
 8011150:	9004      	str	r0, [sp, #16]
 8011152:	4645      	mov	r5, r8
 8011154:	e7be      	b.n	80110d4 <_vfiprintf_r+0x8c>
 8011156:	9a03      	ldr	r2, [sp, #12]
 8011158:	1d11      	adds	r1, r2, #4
 801115a:	6812      	ldr	r2, [r2, #0]
 801115c:	9103      	str	r1, [sp, #12]
 801115e:	2a00      	cmp	r2, #0
 8011160:	db01      	blt.n	8011166 <_vfiprintf_r+0x11e>
 8011162:	9207      	str	r2, [sp, #28]
 8011164:	e004      	b.n	8011170 <_vfiprintf_r+0x128>
 8011166:	4252      	negs	r2, r2
 8011168:	f043 0302 	orr.w	r3, r3, #2
 801116c:	9207      	str	r2, [sp, #28]
 801116e:	9304      	str	r3, [sp, #16]
 8011170:	f898 3000 	ldrb.w	r3, [r8]
 8011174:	2b2e      	cmp	r3, #46	; 0x2e
 8011176:	d10e      	bne.n	8011196 <_vfiprintf_r+0x14e>
 8011178:	f898 3001 	ldrb.w	r3, [r8, #1]
 801117c:	2b2a      	cmp	r3, #42	; 0x2a
 801117e:	d138      	bne.n	80111f2 <_vfiprintf_r+0x1aa>
 8011180:	9b03      	ldr	r3, [sp, #12]
 8011182:	1d1a      	adds	r2, r3, #4
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	9203      	str	r2, [sp, #12]
 8011188:	2b00      	cmp	r3, #0
 801118a:	bfb8      	it	lt
 801118c:	f04f 33ff 	movlt.w	r3, #4294967295
 8011190:	f108 0802 	add.w	r8, r8, #2
 8011194:	9305      	str	r3, [sp, #20]
 8011196:	4d33      	ldr	r5, [pc, #204]	; (8011264 <_vfiprintf_r+0x21c>)
 8011198:	f898 1000 	ldrb.w	r1, [r8]
 801119c:	2203      	movs	r2, #3
 801119e:	4628      	mov	r0, r5
 80111a0:	f7ef f82e 	bl	8000200 <memchr>
 80111a4:	b140      	cbz	r0, 80111b8 <_vfiprintf_r+0x170>
 80111a6:	2340      	movs	r3, #64	; 0x40
 80111a8:	1b40      	subs	r0, r0, r5
 80111aa:	fa03 f000 	lsl.w	r0, r3, r0
 80111ae:	9b04      	ldr	r3, [sp, #16]
 80111b0:	4303      	orrs	r3, r0
 80111b2:	f108 0801 	add.w	r8, r8, #1
 80111b6:	9304      	str	r3, [sp, #16]
 80111b8:	f898 1000 	ldrb.w	r1, [r8]
 80111bc:	482a      	ldr	r0, [pc, #168]	; (8011268 <_vfiprintf_r+0x220>)
 80111be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80111c2:	2206      	movs	r2, #6
 80111c4:	f108 0701 	add.w	r7, r8, #1
 80111c8:	f7ef f81a 	bl	8000200 <memchr>
 80111cc:	2800      	cmp	r0, #0
 80111ce:	d037      	beq.n	8011240 <_vfiprintf_r+0x1f8>
 80111d0:	4b26      	ldr	r3, [pc, #152]	; (801126c <_vfiprintf_r+0x224>)
 80111d2:	bb1b      	cbnz	r3, 801121c <_vfiprintf_r+0x1d4>
 80111d4:	9b03      	ldr	r3, [sp, #12]
 80111d6:	3307      	adds	r3, #7
 80111d8:	f023 0307 	bic.w	r3, r3, #7
 80111dc:	3308      	adds	r3, #8
 80111de:	9303      	str	r3, [sp, #12]
 80111e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80111e2:	444b      	add	r3, r9
 80111e4:	9309      	str	r3, [sp, #36]	; 0x24
 80111e6:	e750      	b.n	801108a <_vfiprintf_r+0x42>
 80111e8:	fb05 3202 	mla	r2, r5, r2, r3
 80111ec:	2001      	movs	r0, #1
 80111ee:	4688      	mov	r8, r1
 80111f0:	e78a      	b.n	8011108 <_vfiprintf_r+0xc0>
 80111f2:	2300      	movs	r3, #0
 80111f4:	f108 0801 	add.w	r8, r8, #1
 80111f8:	9305      	str	r3, [sp, #20]
 80111fa:	4619      	mov	r1, r3
 80111fc:	250a      	movs	r5, #10
 80111fe:	4640      	mov	r0, r8
 8011200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011204:	3a30      	subs	r2, #48	; 0x30
 8011206:	2a09      	cmp	r2, #9
 8011208:	d903      	bls.n	8011212 <_vfiprintf_r+0x1ca>
 801120a:	2b00      	cmp	r3, #0
 801120c:	d0c3      	beq.n	8011196 <_vfiprintf_r+0x14e>
 801120e:	9105      	str	r1, [sp, #20]
 8011210:	e7c1      	b.n	8011196 <_vfiprintf_r+0x14e>
 8011212:	fb05 2101 	mla	r1, r5, r1, r2
 8011216:	2301      	movs	r3, #1
 8011218:	4680      	mov	r8, r0
 801121a:	e7f0      	b.n	80111fe <_vfiprintf_r+0x1b6>
 801121c:	ab03      	add	r3, sp, #12
 801121e:	9300      	str	r3, [sp, #0]
 8011220:	4622      	mov	r2, r4
 8011222:	4b13      	ldr	r3, [pc, #76]	; (8011270 <_vfiprintf_r+0x228>)
 8011224:	a904      	add	r1, sp, #16
 8011226:	4630      	mov	r0, r6
 8011228:	f3af 8000 	nop.w
 801122c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8011230:	4681      	mov	r9, r0
 8011232:	d1d5      	bne.n	80111e0 <_vfiprintf_r+0x198>
 8011234:	89a3      	ldrh	r3, [r4, #12]
 8011236:	065b      	lsls	r3, r3, #25
 8011238:	f53f af7e 	bmi.w	8011138 <_vfiprintf_r+0xf0>
 801123c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801123e:	e77d      	b.n	801113c <_vfiprintf_r+0xf4>
 8011240:	ab03      	add	r3, sp, #12
 8011242:	9300      	str	r3, [sp, #0]
 8011244:	4622      	mov	r2, r4
 8011246:	4b0a      	ldr	r3, [pc, #40]	; (8011270 <_vfiprintf_r+0x228>)
 8011248:	a904      	add	r1, sp, #16
 801124a:	4630      	mov	r0, r6
 801124c:	f000 f888 	bl	8011360 <_printf_i>
 8011250:	e7ec      	b.n	801122c <_vfiprintf_r+0x1e4>
 8011252:	bf00      	nop
 8011254:	08014a50 	.word	0x08014a50
 8011258:	08014a90 	.word	0x08014a90
 801125c:	08014a70 	.word	0x08014a70
 8011260:	08014a30 	.word	0x08014a30
 8011264:	08014a96 	.word	0x08014a96
 8011268:	08014a9a 	.word	0x08014a9a
 801126c:	00000000 	.word	0x00000000
 8011270:	08011023 	.word	0x08011023

08011274 <_printf_common>:
 8011274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011278:	4691      	mov	r9, r2
 801127a:	461f      	mov	r7, r3
 801127c:	688a      	ldr	r2, [r1, #8]
 801127e:	690b      	ldr	r3, [r1, #16]
 8011280:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011284:	4293      	cmp	r3, r2
 8011286:	bfb8      	it	lt
 8011288:	4613      	movlt	r3, r2
 801128a:	f8c9 3000 	str.w	r3, [r9]
 801128e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011292:	4606      	mov	r6, r0
 8011294:	460c      	mov	r4, r1
 8011296:	b112      	cbz	r2, 801129e <_printf_common+0x2a>
 8011298:	3301      	adds	r3, #1
 801129a:	f8c9 3000 	str.w	r3, [r9]
 801129e:	6823      	ldr	r3, [r4, #0]
 80112a0:	0699      	lsls	r1, r3, #26
 80112a2:	bf42      	ittt	mi
 80112a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80112a8:	3302      	addmi	r3, #2
 80112aa:	f8c9 3000 	strmi.w	r3, [r9]
 80112ae:	6825      	ldr	r5, [r4, #0]
 80112b0:	f015 0506 	ands.w	r5, r5, #6
 80112b4:	d107      	bne.n	80112c6 <_printf_common+0x52>
 80112b6:	f104 0a19 	add.w	sl, r4, #25
 80112ba:	68e3      	ldr	r3, [r4, #12]
 80112bc:	f8d9 2000 	ldr.w	r2, [r9]
 80112c0:	1a9b      	subs	r3, r3, r2
 80112c2:	42ab      	cmp	r3, r5
 80112c4:	dc28      	bgt.n	8011318 <_printf_common+0xa4>
 80112c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80112ca:	6822      	ldr	r2, [r4, #0]
 80112cc:	3300      	adds	r3, #0
 80112ce:	bf18      	it	ne
 80112d0:	2301      	movne	r3, #1
 80112d2:	0692      	lsls	r2, r2, #26
 80112d4:	d42d      	bmi.n	8011332 <_printf_common+0xbe>
 80112d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80112da:	4639      	mov	r1, r7
 80112dc:	4630      	mov	r0, r6
 80112de:	47c0      	blx	r8
 80112e0:	3001      	adds	r0, #1
 80112e2:	d020      	beq.n	8011326 <_printf_common+0xb2>
 80112e4:	6823      	ldr	r3, [r4, #0]
 80112e6:	68e5      	ldr	r5, [r4, #12]
 80112e8:	f8d9 2000 	ldr.w	r2, [r9]
 80112ec:	f003 0306 	and.w	r3, r3, #6
 80112f0:	2b04      	cmp	r3, #4
 80112f2:	bf08      	it	eq
 80112f4:	1aad      	subeq	r5, r5, r2
 80112f6:	68a3      	ldr	r3, [r4, #8]
 80112f8:	6922      	ldr	r2, [r4, #16]
 80112fa:	bf0c      	ite	eq
 80112fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011300:	2500      	movne	r5, #0
 8011302:	4293      	cmp	r3, r2
 8011304:	bfc4      	itt	gt
 8011306:	1a9b      	subgt	r3, r3, r2
 8011308:	18ed      	addgt	r5, r5, r3
 801130a:	f04f 0900 	mov.w	r9, #0
 801130e:	341a      	adds	r4, #26
 8011310:	454d      	cmp	r5, r9
 8011312:	d11a      	bne.n	801134a <_printf_common+0xd6>
 8011314:	2000      	movs	r0, #0
 8011316:	e008      	b.n	801132a <_printf_common+0xb6>
 8011318:	2301      	movs	r3, #1
 801131a:	4652      	mov	r2, sl
 801131c:	4639      	mov	r1, r7
 801131e:	4630      	mov	r0, r6
 8011320:	47c0      	blx	r8
 8011322:	3001      	adds	r0, #1
 8011324:	d103      	bne.n	801132e <_printf_common+0xba>
 8011326:	f04f 30ff 	mov.w	r0, #4294967295
 801132a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801132e:	3501      	adds	r5, #1
 8011330:	e7c3      	b.n	80112ba <_printf_common+0x46>
 8011332:	18e1      	adds	r1, r4, r3
 8011334:	1c5a      	adds	r2, r3, #1
 8011336:	2030      	movs	r0, #48	; 0x30
 8011338:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801133c:	4422      	add	r2, r4
 801133e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011342:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011346:	3302      	adds	r3, #2
 8011348:	e7c5      	b.n	80112d6 <_printf_common+0x62>
 801134a:	2301      	movs	r3, #1
 801134c:	4622      	mov	r2, r4
 801134e:	4639      	mov	r1, r7
 8011350:	4630      	mov	r0, r6
 8011352:	47c0      	blx	r8
 8011354:	3001      	adds	r0, #1
 8011356:	d0e6      	beq.n	8011326 <_printf_common+0xb2>
 8011358:	f109 0901 	add.w	r9, r9, #1
 801135c:	e7d8      	b.n	8011310 <_printf_common+0x9c>
	...

08011360 <_printf_i>:
 8011360:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011364:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011368:	460c      	mov	r4, r1
 801136a:	7e09      	ldrb	r1, [r1, #24]
 801136c:	b085      	sub	sp, #20
 801136e:	296e      	cmp	r1, #110	; 0x6e
 8011370:	4617      	mov	r7, r2
 8011372:	4606      	mov	r6, r0
 8011374:	4698      	mov	r8, r3
 8011376:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011378:	f000 80b3 	beq.w	80114e2 <_printf_i+0x182>
 801137c:	d822      	bhi.n	80113c4 <_printf_i+0x64>
 801137e:	2963      	cmp	r1, #99	; 0x63
 8011380:	d036      	beq.n	80113f0 <_printf_i+0x90>
 8011382:	d80a      	bhi.n	801139a <_printf_i+0x3a>
 8011384:	2900      	cmp	r1, #0
 8011386:	f000 80b9 	beq.w	80114fc <_printf_i+0x19c>
 801138a:	2958      	cmp	r1, #88	; 0x58
 801138c:	f000 8083 	beq.w	8011496 <_printf_i+0x136>
 8011390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011394:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011398:	e032      	b.n	8011400 <_printf_i+0xa0>
 801139a:	2964      	cmp	r1, #100	; 0x64
 801139c:	d001      	beq.n	80113a2 <_printf_i+0x42>
 801139e:	2969      	cmp	r1, #105	; 0x69
 80113a0:	d1f6      	bne.n	8011390 <_printf_i+0x30>
 80113a2:	6820      	ldr	r0, [r4, #0]
 80113a4:	6813      	ldr	r3, [r2, #0]
 80113a6:	0605      	lsls	r5, r0, #24
 80113a8:	f103 0104 	add.w	r1, r3, #4
 80113ac:	d52a      	bpl.n	8011404 <_printf_i+0xa4>
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	6011      	str	r1, [r2, #0]
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	da03      	bge.n	80113be <_printf_i+0x5e>
 80113b6:	222d      	movs	r2, #45	; 0x2d
 80113b8:	425b      	negs	r3, r3
 80113ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80113be:	486f      	ldr	r0, [pc, #444]	; (801157c <_printf_i+0x21c>)
 80113c0:	220a      	movs	r2, #10
 80113c2:	e039      	b.n	8011438 <_printf_i+0xd8>
 80113c4:	2973      	cmp	r1, #115	; 0x73
 80113c6:	f000 809d 	beq.w	8011504 <_printf_i+0x1a4>
 80113ca:	d808      	bhi.n	80113de <_printf_i+0x7e>
 80113cc:	296f      	cmp	r1, #111	; 0x6f
 80113ce:	d020      	beq.n	8011412 <_printf_i+0xb2>
 80113d0:	2970      	cmp	r1, #112	; 0x70
 80113d2:	d1dd      	bne.n	8011390 <_printf_i+0x30>
 80113d4:	6823      	ldr	r3, [r4, #0]
 80113d6:	f043 0320 	orr.w	r3, r3, #32
 80113da:	6023      	str	r3, [r4, #0]
 80113dc:	e003      	b.n	80113e6 <_printf_i+0x86>
 80113de:	2975      	cmp	r1, #117	; 0x75
 80113e0:	d017      	beq.n	8011412 <_printf_i+0xb2>
 80113e2:	2978      	cmp	r1, #120	; 0x78
 80113e4:	d1d4      	bne.n	8011390 <_printf_i+0x30>
 80113e6:	2378      	movs	r3, #120	; 0x78
 80113e8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80113ec:	4864      	ldr	r0, [pc, #400]	; (8011580 <_printf_i+0x220>)
 80113ee:	e055      	b.n	801149c <_printf_i+0x13c>
 80113f0:	6813      	ldr	r3, [r2, #0]
 80113f2:	1d19      	adds	r1, r3, #4
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	6011      	str	r1, [r2, #0]
 80113f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80113fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011400:	2301      	movs	r3, #1
 8011402:	e08c      	b.n	801151e <_printf_i+0x1be>
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	6011      	str	r1, [r2, #0]
 8011408:	f010 0f40 	tst.w	r0, #64	; 0x40
 801140c:	bf18      	it	ne
 801140e:	b21b      	sxthne	r3, r3
 8011410:	e7cf      	b.n	80113b2 <_printf_i+0x52>
 8011412:	6813      	ldr	r3, [r2, #0]
 8011414:	6825      	ldr	r5, [r4, #0]
 8011416:	1d18      	adds	r0, r3, #4
 8011418:	6010      	str	r0, [r2, #0]
 801141a:	0628      	lsls	r0, r5, #24
 801141c:	d501      	bpl.n	8011422 <_printf_i+0xc2>
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	e002      	b.n	8011428 <_printf_i+0xc8>
 8011422:	0668      	lsls	r0, r5, #25
 8011424:	d5fb      	bpl.n	801141e <_printf_i+0xbe>
 8011426:	881b      	ldrh	r3, [r3, #0]
 8011428:	4854      	ldr	r0, [pc, #336]	; (801157c <_printf_i+0x21c>)
 801142a:	296f      	cmp	r1, #111	; 0x6f
 801142c:	bf14      	ite	ne
 801142e:	220a      	movne	r2, #10
 8011430:	2208      	moveq	r2, #8
 8011432:	2100      	movs	r1, #0
 8011434:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011438:	6865      	ldr	r5, [r4, #4]
 801143a:	60a5      	str	r5, [r4, #8]
 801143c:	2d00      	cmp	r5, #0
 801143e:	f2c0 8095 	blt.w	801156c <_printf_i+0x20c>
 8011442:	6821      	ldr	r1, [r4, #0]
 8011444:	f021 0104 	bic.w	r1, r1, #4
 8011448:	6021      	str	r1, [r4, #0]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d13d      	bne.n	80114ca <_printf_i+0x16a>
 801144e:	2d00      	cmp	r5, #0
 8011450:	f040 808e 	bne.w	8011570 <_printf_i+0x210>
 8011454:	4665      	mov	r5, ip
 8011456:	2a08      	cmp	r2, #8
 8011458:	d10b      	bne.n	8011472 <_printf_i+0x112>
 801145a:	6823      	ldr	r3, [r4, #0]
 801145c:	07db      	lsls	r3, r3, #31
 801145e:	d508      	bpl.n	8011472 <_printf_i+0x112>
 8011460:	6923      	ldr	r3, [r4, #16]
 8011462:	6862      	ldr	r2, [r4, #4]
 8011464:	429a      	cmp	r2, r3
 8011466:	bfde      	ittt	le
 8011468:	2330      	movle	r3, #48	; 0x30
 801146a:	f805 3c01 	strble.w	r3, [r5, #-1]
 801146e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8011472:	ebac 0305 	sub.w	r3, ip, r5
 8011476:	6123      	str	r3, [r4, #16]
 8011478:	f8cd 8000 	str.w	r8, [sp]
 801147c:	463b      	mov	r3, r7
 801147e:	aa03      	add	r2, sp, #12
 8011480:	4621      	mov	r1, r4
 8011482:	4630      	mov	r0, r6
 8011484:	f7ff fef6 	bl	8011274 <_printf_common>
 8011488:	3001      	adds	r0, #1
 801148a:	d14d      	bne.n	8011528 <_printf_i+0x1c8>
 801148c:	f04f 30ff 	mov.w	r0, #4294967295
 8011490:	b005      	add	sp, #20
 8011492:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011496:	4839      	ldr	r0, [pc, #228]	; (801157c <_printf_i+0x21c>)
 8011498:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801149c:	6813      	ldr	r3, [r2, #0]
 801149e:	6821      	ldr	r1, [r4, #0]
 80114a0:	1d1d      	adds	r5, r3, #4
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6015      	str	r5, [r2, #0]
 80114a6:	060a      	lsls	r2, r1, #24
 80114a8:	d50b      	bpl.n	80114c2 <_printf_i+0x162>
 80114aa:	07ca      	lsls	r2, r1, #31
 80114ac:	bf44      	itt	mi
 80114ae:	f041 0120 	orrmi.w	r1, r1, #32
 80114b2:	6021      	strmi	r1, [r4, #0]
 80114b4:	b91b      	cbnz	r3, 80114be <_printf_i+0x15e>
 80114b6:	6822      	ldr	r2, [r4, #0]
 80114b8:	f022 0220 	bic.w	r2, r2, #32
 80114bc:	6022      	str	r2, [r4, #0]
 80114be:	2210      	movs	r2, #16
 80114c0:	e7b7      	b.n	8011432 <_printf_i+0xd2>
 80114c2:	064d      	lsls	r5, r1, #25
 80114c4:	bf48      	it	mi
 80114c6:	b29b      	uxthmi	r3, r3
 80114c8:	e7ef      	b.n	80114aa <_printf_i+0x14a>
 80114ca:	4665      	mov	r5, ip
 80114cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80114d0:	fb02 3311 	mls	r3, r2, r1, r3
 80114d4:	5cc3      	ldrb	r3, [r0, r3]
 80114d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80114da:	460b      	mov	r3, r1
 80114dc:	2900      	cmp	r1, #0
 80114de:	d1f5      	bne.n	80114cc <_printf_i+0x16c>
 80114e0:	e7b9      	b.n	8011456 <_printf_i+0xf6>
 80114e2:	6813      	ldr	r3, [r2, #0]
 80114e4:	6825      	ldr	r5, [r4, #0]
 80114e6:	6961      	ldr	r1, [r4, #20]
 80114e8:	1d18      	adds	r0, r3, #4
 80114ea:	6010      	str	r0, [r2, #0]
 80114ec:	0628      	lsls	r0, r5, #24
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	d501      	bpl.n	80114f6 <_printf_i+0x196>
 80114f2:	6019      	str	r1, [r3, #0]
 80114f4:	e002      	b.n	80114fc <_printf_i+0x19c>
 80114f6:	066a      	lsls	r2, r5, #25
 80114f8:	d5fb      	bpl.n	80114f2 <_printf_i+0x192>
 80114fa:	8019      	strh	r1, [r3, #0]
 80114fc:	2300      	movs	r3, #0
 80114fe:	6123      	str	r3, [r4, #16]
 8011500:	4665      	mov	r5, ip
 8011502:	e7b9      	b.n	8011478 <_printf_i+0x118>
 8011504:	6813      	ldr	r3, [r2, #0]
 8011506:	1d19      	adds	r1, r3, #4
 8011508:	6011      	str	r1, [r2, #0]
 801150a:	681d      	ldr	r5, [r3, #0]
 801150c:	6862      	ldr	r2, [r4, #4]
 801150e:	2100      	movs	r1, #0
 8011510:	4628      	mov	r0, r5
 8011512:	f7ee fe75 	bl	8000200 <memchr>
 8011516:	b108      	cbz	r0, 801151c <_printf_i+0x1bc>
 8011518:	1b40      	subs	r0, r0, r5
 801151a:	6060      	str	r0, [r4, #4]
 801151c:	6863      	ldr	r3, [r4, #4]
 801151e:	6123      	str	r3, [r4, #16]
 8011520:	2300      	movs	r3, #0
 8011522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011526:	e7a7      	b.n	8011478 <_printf_i+0x118>
 8011528:	6923      	ldr	r3, [r4, #16]
 801152a:	462a      	mov	r2, r5
 801152c:	4639      	mov	r1, r7
 801152e:	4630      	mov	r0, r6
 8011530:	47c0      	blx	r8
 8011532:	3001      	adds	r0, #1
 8011534:	d0aa      	beq.n	801148c <_printf_i+0x12c>
 8011536:	6823      	ldr	r3, [r4, #0]
 8011538:	079b      	lsls	r3, r3, #30
 801153a:	d413      	bmi.n	8011564 <_printf_i+0x204>
 801153c:	68e0      	ldr	r0, [r4, #12]
 801153e:	9b03      	ldr	r3, [sp, #12]
 8011540:	4298      	cmp	r0, r3
 8011542:	bfb8      	it	lt
 8011544:	4618      	movlt	r0, r3
 8011546:	e7a3      	b.n	8011490 <_printf_i+0x130>
 8011548:	2301      	movs	r3, #1
 801154a:	464a      	mov	r2, r9
 801154c:	4639      	mov	r1, r7
 801154e:	4630      	mov	r0, r6
 8011550:	47c0      	blx	r8
 8011552:	3001      	adds	r0, #1
 8011554:	d09a      	beq.n	801148c <_printf_i+0x12c>
 8011556:	3501      	adds	r5, #1
 8011558:	68e3      	ldr	r3, [r4, #12]
 801155a:	9a03      	ldr	r2, [sp, #12]
 801155c:	1a9b      	subs	r3, r3, r2
 801155e:	42ab      	cmp	r3, r5
 8011560:	dcf2      	bgt.n	8011548 <_printf_i+0x1e8>
 8011562:	e7eb      	b.n	801153c <_printf_i+0x1dc>
 8011564:	2500      	movs	r5, #0
 8011566:	f104 0919 	add.w	r9, r4, #25
 801156a:	e7f5      	b.n	8011558 <_printf_i+0x1f8>
 801156c:	2b00      	cmp	r3, #0
 801156e:	d1ac      	bne.n	80114ca <_printf_i+0x16a>
 8011570:	7803      	ldrb	r3, [r0, #0]
 8011572:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011576:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801157a:	e76c      	b.n	8011456 <_printf_i+0xf6>
 801157c:	08014aa1 	.word	0x08014aa1
 8011580:	08014ab2 	.word	0x08014ab2

08011584 <_sbrk_r>:
 8011584:	b538      	push	{r3, r4, r5, lr}
 8011586:	4c06      	ldr	r4, [pc, #24]	; (80115a0 <_sbrk_r+0x1c>)
 8011588:	2300      	movs	r3, #0
 801158a:	4605      	mov	r5, r0
 801158c:	4608      	mov	r0, r1
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	f7ef fa3e 	bl	8000a10 <_sbrk>
 8011594:	1c43      	adds	r3, r0, #1
 8011596:	d102      	bne.n	801159e <_sbrk_r+0x1a>
 8011598:	6823      	ldr	r3, [r4, #0]
 801159a:	b103      	cbz	r3, 801159e <_sbrk_r+0x1a>
 801159c:	602b      	str	r3, [r5, #0]
 801159e:	bd38      	pop	{r3, r4, r5, pc}
 80115a0:	20006eb4 	.word	0x20006eb4

080115a4 <__sread>:
 80115a4:	b510      	push	{r4, lr}
 80115a6:	460c      	mov	r4, r1
 80115a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115ac:	f000 fa48 	bl	8011a40 <_read_r>
 80115b0:	2800      	cmp	r0, #0
 80115b2:	bfab      	itete	ge
 80115b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80115b6:	89a3      	ldrhlt	r3, [r4, #12]
 80115b8:	181b      	addge	r3, r3, r0
 80115ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80115be:	bfac      	ite	ge
 80115c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80115c2:	81a3      	strhlt	r3, [r4, #12]
 80115c4:	bd10      	pop	{r4, pc}

080115c6 <__swrite>:
 80115c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115ca:	461f      	mov	r7, r3
 80115cc:	898b      	ldrh	r3, [r1, #12]
 80115ce:	05db      	lsls	r3, r3, #23
 80115d0:	4605      	mov	r5, r0
 80115d2:	460c      	mov	r4, r1
 80115d4:	4616      	mov	r6, r2
 80115d6:	d505      	bpl.n	80115e4 <__swrite+0x1e>
 80115d8:	2302      	movs	r3, #2
 80115da:	2200      	movs	r2, #0
 80115dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80115e0:	f000 f9b6 	bl	8011950 <_lseek_r>
 80115e4:	89a3      	ldrh	r3, [r4, #12]
 80115e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80115ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80115ee:	81a3      	strh	r3, [r4, #12]
 80115f0:	4632      	mov	r2, r6
 80115f2:	463b      	mov	r3, r7
 80115f4:	4628      	mov	r0, r5
 80115f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80115fa:	f000 b869 	b.w	80116d0 <_write_r>

080115fe <__sseek>:
 80115fe:	b510      	push	{r4, lr}
 8011600:	460c      	mov	r4, r1
 8011602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011606:	f000 f9a3 	bl	8011950 <_lseek_r>
 801160a:	1c43      	adds	r3, r0, #1
 801160c:	89a3      	ldrh	r3, [r4, #12]
 801160e:	bf15      	itete	ne
 8011610:	6560      	strne	r0, [r4, #84]	; 0x54
 8011612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801161a:	81a3      	strheq	r3, [r4, #12]
 801161c:	bf18      	it	ne
 801161e:	81a3      	strhne	r3, [r4, #12]
 8011620:	bd10      	pop	{r4, pc}

08011622 <__sclose>:
 8011622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011626:	f000 b8d3 	b.w	80117d0 <_close_r>
	...

0801162c <__swbuf_r>:
 801162c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801162e:	460e      	mov	r6, r1
 8011630:	4614      	mov	r4, r2
 8011632:	4605      	mov	r5, r0
 8011634:	b118      	cbz	r0, 801163e <__swbuf_r+0x12>
 8011636:	6983      	ldr	r3, [r0, #24]
 8011638:	b90b      	cbnz	r3, 801163e <__swbuf_r+0x12>
 801163a:	f7ff fba1 	bl	8010d80 <__sinit>
 801163e:	4b21      	ldr	r3, [pc, #132]	; (80116c4 <__swbuf_r+0x98>)
 8011640:	429c      	cmp	r4, r3
 8011642:	d12a      	bne.n	801169a <__swbuf_r+0x6e>
 8011644:	686c      	ldr	r4, [r5, #4]
 8011646:	69a3      	ldr	r3, [r4, #24]
 8011648:	60a3      	str	r3, [r4, #8]
 801164a:	89a3      	ldrh	r3, [r4, #12]
 801164c:	071a      	lsls	r2, r3, #28
 801164e:	d52e      	bpl.n	80116ae <__swbuf_r+0x82>
 8011650:	6923      	ldr	r3, [r4, #16]
 8011652:	b363      	cbz	r3, 80116ae <__swbuf_r+0x82>
 8011654:	6923      	ldr	r3, [r4, #16]
 8011656:	6820      	ldr	r0, [r4, #0]
 8011658:	1ac0      	subs	r0, r0, r3
 801165a:	6963      	ldr	r3, [r4, #20]
 801165c:	b2f6      	uxtb	r6, r6
 801165e:	4283      	cmp	r3, r0
 8011660:	4637      	mov	r7, r6
 8011662:	dc04      	bgt.n	801166e <__swbuf_r+0x42>
 8011664:	4621      	mov	r1, r4
 8011666:	4628      	mov	r0, r5
 8011668:	f000 f948 	bl	80118fc <_fflush_r>
 801166c:	bb28      	cbnz	r0, 80116ba <__swbuf_r+0x8e>
 801166e:	68a3      	ldr	r3, [r4, #8]
 8011670:	3b01      	subs	r3, #1
 8011672:	60a3      	str	r3, [r4, #8]
 8011674:	6823      	ldr	r3, [r4, #0]
 8011676:	1c5a      	adds	r2, r3, #1
 8011678:	6022      	str	r2, [r4, #0]
 801167a:	701e      	strb	r6, [r3, #0]
 801167c:	6963      	ldr	r3, [r4, #20]
 801167e:	3001      	adds	r0, #1
 8011680:	4283      	cmp	r3, r0
 8011682:	d004      	beq.n	801168e <__swbuf_r+0x62>
 8011684:	89a3      	ldrh	r3, [r4, #12]
 8011686:	07db      	lsls	r3, r3, #31
 8011688:	d519      	bpl.n	80116be <__swbuf_r+0x92>
 801168a:	2e0a      	cmp	r6, #10
 801168c:	d117      	bne.n	80116be <__swbuf_r+0x92>
 801168e:	4621      	mov	r1, r4
 8011690:	4628      	mov	r0, r5
 8011692:	f000 f933 	bl	80118fc <_fflush_r>
 8011696:	b190      	cbz	r0, 80116be <__swbuf_r+0x92>
 8011698:	e00f      	b.n	80116ba <__swbuf_r+0x8e>
 801169a:	4b0b      	ldr	r3, [pc, #44]	; (80116c8 <__swbuf_r+0x9c>)
 801169c:	429c      	cmp	r4, r3
 801169e:	d101      	bne.n	80116a4 <__swbuf_r+0x78>
 80116a0:	68ac      	ldr	r4, [r5, #8]
 80116a2:	e7d0      	b.n	8011646 <__swbuf_r+0x1a>
 80116a4:	4b09      	ldr	r3, [pc, #36]	; (80116cc <__swbuf_r+0xa0>)
 80116a6:	429c      	cmp	r4, r3
 80116a8:	bf08      	it	eq
 80116aa:	68ec      	ldreq	r4, [r5, #12]
 80116ac:	e7cb      	b.n	8011646 <__swbuf_r+0x1a>
 80116ae:	4621      	mov	r1, r4
 80116b0:	4628      	mov	r0, r5
 80116b2:	f000 f81f 	bl	80116f4 <__swsetup_r>
 80116b6:	2800      	cmp	r0, #0
 80116b8:	d0cc      	beq.n	8011654 <__swbuf_r+0x28>
 80116ba:	f04f 37ff 	mov.w	r7, #4294967295
 80116be:	4638      	mov	r0, r7
 80116c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08014a50 	.word	0x08014a50
 80116c8:	08014a70 	.word	0x08014a70
 80116cc:	08014a30 	.word	0x08014a30

080116d0 <_write_r>:
 80116d0:	b538      	push	{r3, r4, r5, lr}
 80116d2:	4c07      	ldr	r4, [pc, #28]	; (80116f0 <_write_r+0x20>)
 80116d4:	4605      	mov	r5, r0
 80116d6:	4608      	mov	r0, r1
 80116d8:	4611      	mov	r1, r2
 80116da:	2200      	movs	r2, #0
 80116dc:	6022      	str	r2, [r4, #0]
 80116de:	461a      	mov	r2, r3
 80116e0:	f7ef f803 	bl	80006ea <_write>
 80116e4:	1c43      	adds	r3, r0, #1
 80116e6:	d102      	bne.n	80116ee <_write_r+0x1e>
 80116e8:	6823      	ldr	r3, [r4, #0]
 80116ea:	b103      	cbz	r3, 80116ee <_write_r+0x1e>
 80116ec:	602b      	str	r3, [r5, #0]
 80116ee:	bd38      	pop	{r3, r4, r5, pc}
 80116f0:	20006eb4 	.word	0x20006eb4

080116f4 <__swsetup_r>:
 80116f4:	4b32      	ldr	r3, [pc, #200]	; (80117c0 <__swsetup_r+0xcc>)
 80116f6:	b570      	push	{r4, r5, r6, lr}
 80116f8:	681d      	ldr	r5, [r3, #0]
 80116fa:	4606      	mov	r6, r0
 80116fc:	460c      	mov	r4, r1
 80116fe:	b125      	cbz	r5, 801170a <__swsetup_r+0x16>
 8011700:	69ab      	ldr	r3, [r5, #24]
 8011702:	b913      	cbnz	r3, 801170a <__swsetup_r+0x16>
 8011704:	4628      	mov	r0, r5
 8011706:	f7ff fb3b 	bl	8010d80 <__sinit>
 801170a:	4b2e      	ldr	r3, [pc, #184]	; (80117c4 <__swsetup_r+0xd0>)
 801170c:	429c      	cmp	r4, r3
 801170e:	d10f      	bne.n	8011730 <__swsetup_r+0x3c>
 8011710:	686c      	ldr	r4, [r5, #4]
 8011712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011716:	b29a      	uxth	r2, r3
 8011718:	0715      	lsls	r5, r2, #28
 801171a:	d42c      	bmi.n	8011776 <__swsetup_r+0x82>
 801171c:	06d0      	lsls	r0, r2, #27
 801171e:	d411      	bmi.n	8011744 <__swsetup_r+0x50>
 8011720:	2209      	movs	r2, #9
 8011722:	6032      	str	r2, [r6, #0]
 8011724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011728:	81a3      	strh	r3, [r4, #12]
 801172a:	f04f 30ff 	mov.w	r0, #4294967295
 801172e:	e03e      	b.n	80117ae <__swsetup_r+0xba>
 8011730:	4b25      	ldr	r3, [pc, #148]	; (80117c8 <__swsetup_r+0xd4>)
 8011732:	429c      	cmp	r4, r3
 8011734:	d101      	bne.n	801173a <__swsetup_r+0x46>
 8011736:	68ac      	ldr	r4, [r5, #8]
 8011738:	e7eb      	b.n	8011712 <__swsetup_r+0x1e>
 801173a:	4b24      	ldr	r3, [pc, #144]	; (80117cc <__swsetup_r+0xd8>)
 801173c:	429c      	cmp	r4, r3
 801173e:	bf08      	it	eq
 8011740:	68ec      	ldreq	r4, [r5, #12]
 8011742:	e7e6      	b.n	8011712 <__swsetup_r+0x1e>
 8011744:	0751      	lsls	r1, r2, #29
 8011746:	d512      	bpl.n	801176e <__swsetup_r+0x7a>
 8011748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801174a:	b141      	cbz	r1, 801175e <__swsetup_r+0x6a>
 801174c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011750:	4299      	cmp	r1, r3
 8011752:	d002      	beq.n	801175a <__swsetup_r+0x66>
 8011754:	4630      	mov	r0, r6
 8011756:	f7ff fba5 	bl	8010ea4 <_free_r>
 801175a:	2300      	movs	r3, #0
 801175c:	6363      	str	r3, [r4, #52]	; 0x34
 801175e:	89a3      	ldrh	r3, [r4, #12]
 8011760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011764:	81a3      	strh	r3, [r4, #12]
 8011766:	2300      	movs	r3, #0
 8011768:	6063      	str	r3, [r4, #4]
 801176a:	6923      	ldr	r3, [r4, #16]
 801176c:	6023      	str	r3, [r4, #0]
 801176e:	89a3      	ldrh	r3, [r4, #12]
 8011770:	f043 0308 	orr.w	r3, r3, #8
 8011774:	81a3      	strh	r3, [r4, #12]
 8011776:	6923      	ldr	r3, [r4, #16]
 8011778:	b94b      	cbnz	r3, 801178e <__swsetup_r+0x9a>
 801177a:	89a3      	ldrh	r3, [r4, #12]
 801177c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011784:	d003      	beq.n	801178e <__swsetup_r+0x9a>
 8011786:	4621      	mov	r1, r4
 8011788:	4630      	mov	r0, r6
 801178a:	f000 f917 	bl	80119bc <__smakebuf_r>
 801178e:	89a2      	ldrh	r2, [r4, #12]
 8011790:	f012 0301 	ands.w	r3, r2, #1
 8011794:	d00c      	beq.n	80117b0 <__swsetup_r+0xbc>
 8011796:	2300      	movs	r3, #0
 8011798:	60a3      	str	r3, [r4, #8]
 801179a:	6963      	ldr	r3, [r4, #20]
 801179c:	425b      	negs	r3, r3
 801179e:	61a3      	str	r3, [r4, #24]
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	b953      	cbnz	r3, 80117ba <__swsetup_r+0xc6>
 80117a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80117a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80117ac:	d1ba      	bne.n	8011724 <__swsetup_r+0x30>
 80117ae:	bd70      	pop	{r4, r5, r6, pc}
 80117b0:	0792      	lsls	r2, r2, #30
 80117b2:	bf58      	it	pl
 80117b4:	6963      	ldrpl	r3, [r4, #20]
 80117b6:	60a3      	str	r3, [r4, #8]
 80117b8:	e7f2      	b.n	80117a0 <__swsetup_r+0xac>
 80117ba:	2000      	movs	r0, #0
 80117bc:	e7f7      	b.n	80117ae <__swsetup_r+0xba>
 80117be:	bf00      	nop
 80117c0:	20000018 	.word	0x20000018
 80117c4:	08014a50 	.word	0x08014a50
 80117c8:	08014a70 	.word	0x08014a70
 80117cc:	08014a30 	.word	0x08014a30

080117d0 <_close_r>:
 80117d0:	b538      	push	{r3, r4, r5, lr}
 80117d2:	4c06      	ldr	r4, [pc, #24]	; (80117ec <_close_r+0x1c>)
 80117d4:	2300      	movs	r3, #0
 80117d6:	4605      	mov	r5, r0
 80117d8:	4608      	mov	r0, r1
 80117da:	6023      	str	r3, [r4, #0]
 80117dc:	f7ef f8e3 	bl	80009a6 <_close>
 80117e0:	1c43      	adds	r3, r0, #1
 80117e2:	d102      	bne.n	80117ea <_close_r+0x1a>
 80117e4:	6823      	ldr	r3, [r4, #0]
 80117e6:	b103      	cbz	r3, 80117ea <_close_r+0x1a>
 80117e8:	602b      	str	r3, [r5, #0]
 80117ea:	bd38      	pop	{r3, r4, r5, pc}
 80117ec:	20006eb4 	.word	0x20006eb4

080117f0 <__sflush_r>:
 80117f0:	898a      	ldrh	r2, [r1, #12]
 80117f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80117f6:	4605      	mov	r5, r0
 80117f8:	0710      	lsls	r0, r2, #28
 80117fa:	460c      	mov	r4, r1
 80117fc:	d458      	bmi.n	80118b0 <__sflush_r+0xc0>
 80117fe:	684b      	ldr	r3, [r1, #4]
 8011800:	2b00      	cmp	r3, #0
 8011802:	dc05      	bgt.n	8011810 <__sflush_r+0x20>
 8011804:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011806:	2b00      	cmp	r3, #0
 8011808:	dc02      	bgt.n	8011810 <__sflush_r+0x20>
 801180a:	2000      	movs	r0, #0
 801180c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011810:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011812:	2e00      	cmp	r6, #0
 8011814:	d0f9      	beq.n	801180a <__sflush_r+0x1a>
 8011816:	2300      	movs	r3, #0
 8011818:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801181c:	682f      	ldr	r7, [r5, #0]
 801181e:	6a21      	ldr	r1, [r4, #32]
 8011820:	602b      	str	r3, [r5, #0]
 8011822:	d032      	beq.n	801188a <__sflush_r+0x9a>
 8011824:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011826:	89a3      	ldrh	r3, [r4, #12]
 8011828:	075a      	lsls	r2, r3, #29
 801182a:	d505      	bpl.n	8011838 <__sflush_r+0x48>
 801182c:	6863      	ldr	r3, [r4, #4]
 801182e:	1ac0      	subs	r0, r0, r3
 8011830:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011832:	b10b      	cbz	r3, 8011838 <__sflush_r+0x48>
 8011834:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011836:	1ac0      	subs	r0, r0, r3
 8011838:	2300      	movs	r3, #0
 801183a:	4602      	mov	r2, r0
 801183c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801183e:	6a21      	ldr	r1, [r4, #32]
 8011840:	4628      	mov	r0, r5
 8011842:	47b0      	blx	r6
 8011844:	1c43      	adds	r3, r0, #1
 8011846:	89a3      	ldrh	r3, [r4, #12]
 8011848:	d106      	bne.n	8011858 <__sflush_r+0x68>
 801184a:	6829      	ldr	r1, [r5, #0]
 801184c:	291d      	cmp	r1, #29
 801184e:	d848      	bhi.n	80118e2 <__sflush_r+0xf2>
 8011850:	4a29      	ldr	r2, [pc, #164]	; (80118f8 <__sflush_r+0x108>)
 8011852:	40ca      	lsrs	r2, r1
 8011854:	07d6      	lsls	r6, r2, #31
 8011856:	d544      	bpl.n	80118e2 <__sflush_r+0xf2>
 8011858:	2200      	movs	r2, #0
 801185a:	6062      	str	r2, [r4, #4]
 801185c:	04d9      	lsls	r1, r3, #19
 801185e:	6922      	ldr	r2, [r4, #16]
 8011860:	6022      	str	r2, [r4, #0]
 8011862:	d504      	bpl.n	801186e <__sflush_r+0x7e>
 8011864:	1c42      	adds	r2, r0, #1
 8011866:	d101      	bne.n	801186c <__sflush_r+0x7c>
 8011868:	682b      	ldr	r3, [r5, #0]
 801186a:	b903      	cbnz	r3, 801186e <__sflush_r+0x7e>
 801186c:	6560      	str	r0, [r4, #84]	; 0x54
 801186e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011870:	602f      	str	r7, [r5, #0]
 8011872:	2900      	cmp	r1, #0
 8011874:	d0c9      	beq.n	801180a <__sflush_r+0x1a>
 8011876:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801187a:	4299      	cmp	r1, r3
 801187c:	d002      	beq.n	8011884 <__sflush_r+0x94>
 801187e:	4628      	mov	r0, r5
 8011880:	f7ff fb10 	bl	8010ea4 <_free_r>
 8011884:	2000      	movs	r0, #0
 8011886:	6360      	str	r0, [r4, #52]	; 0x34
 8011888:	e7c0      	b.n	801180c <__sflush_r+0x1c>
 801188a:	2301      	movs	r3, #1
 801188c:	4628      	mov	r0, r5
 801188e:	47b0      	blx	r6
 8011890:	1c41      	adds	r1, r0, #1
 8011892:	d1c8      	bne.n	8011826 <__sflush_r+0x36>
 8011894:	682b      	ldr	r3, [r5, #0]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d0c5      	beq.n	8011826 <__sflush_r+0x36>
 801189a:	2b1d      	cmp	r3, #29
 801189c:	d001      	beq.n	80118a2 <__sflush_r+0xb2>
 801189e:	2b16      	cmp	r3, #22
 80118a0:	d101      	bne.n	80118a6 <__sflush_r+0xb6>
 80118a2:	602f      	str	r7, [r5, #0]
 80118a4:	e7b1      	b.n	801180a <__sflush_r+0x1a>
 80118a6:	89a3      	ldrh	r3, [r4, #12]
 80118a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118ac:	81a3      	strh	r3, [r4, #12]
 80118ae:	e7ad      	b.n	801180c <__sflush_r+0x1c>
 80118b0:	690f      	ldr	r7, [r1, #16]
 80118b2:	2f00      	cmp	r7, #0
 80118b4:	d0a9      	beq.n	801180a <__sflush_r+0x1a>
 80118b6:	0793      	lsls	r3, r2, #30
 80118b8:	680e      	ldr	r6, [r1, #0]
 80118ba:	bf08      	it	eq
 80118bc:	694b      	ldreq	r3, [r1, #20]
 80118be:	600f      	str	r7, [r1, #0]
 80118c0:	bf18      	it	ne
 80118c2:	2300      	movne	r3, #0
 80118c4:	eba6 0807 	sub.w	r8, r6, r7
 80118c8:	608b      	str	r3, [r1, #8]
 80118ca:	f1b8 0f00 	cmp.w	r8, #0
 80118ce:	dd9c      	ble.n	801180a <__sflush_r+0x1a>
 80118d0:	4643      	mov	r3, r8
 80118d2:	463a      	mov	r2, r7
 80118d4:	6a21      	ldr	r1, [r4, #32]
 80118d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80118d8:	4628      	mov	r0, r5
 80118da:	47b0      	blx	r6
 80118dc:	2800      	cmp	r0, #0
 80118de:	dc06      	bgt.n	80118ee <__sflush_r+0xfe>
 80118e0:	89a3      	ldrh	r3, [r4, #12]
 80118e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80118e6:	81a3      	strh	r3, [r4, #12]
 80118e8:	f04f 30ff 	mov.w	r0, #4294967295
 80118ec:	e78e      	b.n	801180c <__sflush_r+0x1c>
 80118ee:	4407      	add	r7, r0
 80118f0:	eba8 0800 	sub.w	r8, r8, r0
 80118f4:	e7e9      	b.n	80118ca <__sflush_r+0xda>
 80118f6:	bf00      	nop
 80118f8:	20400001 	.word	0x20400001

080118fc <_fflush_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	690b      	ldr	r3, [r1, #16]
 8011900:	4605      	mov	r5, r0
 8011902:	460c      	mov	r4, r1
 8011904:	b1db      	cbz	r3, 801193e <_fflush_r+0x42>
 8011906:	b118      	cbz	r0, 8011910 <_fflush_r+0x14>
 8011908:	6983      	ldr	r3, [r0, #24]
 801190a:	b90b      	cbnz	r3, 8011910 <_fflush_r+0x14>
 801190c:	f7ff fa38 	bl	8010d80 <__sinit>
 8011910:	4b0c      	ldr	r3, [pc, #48]	; (8011944 <_fflush_r+0x48>)
 8011912:	429c      	cmp	r4, r3
 8011914:	d109      	bne.n	801192a <_fflush_r+0x2e>
 8011916:	686c      	ldr	r4, [r5, #4]
 8011918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801191c:	b17b      	cbz	r3, 801193e <_fflush_r+0x42>
 801191e:	4621      	mov	r1, r4
 8011920:	4628      	mov	r0, r5
 8011922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011926:	f7ff bf63 	b.w	80117f0 <__sflush_r>
 801192a:	4b07      	ldr	r3, [pc, #28]	; (8011948 <_fflush_r+0x4c>)
 801192c:	429c      	cmp	r4, r3
 801192e:	d101      	bne.n	8011934 <_fflush_r+0x38>
 8011930:	68ac      	ldr	r4, [r5, #8]
 8011932:	e7f1      	b.n	8011918 <_fflush_r+0x1c>
 8011934:	4b05      	ldr	r3, [pc, #20]	; (801194c <_fflush_r+0x50>)
 8011936:	429c      	cmp	r4, r3
 8011938:	bf08      	it	eq
 801193a:	68ec      	ldreq	r4, [r5, #12]
 801193c:	e7ec      	b.n	8011918 <_fflush_r+0x1c>
 801193e:	2000      	movs	r0, #0
 8011940:	bd38      	pop	{r3, r4, r5, pc}
 8011942:	bf00      	nop
 8011944:	08014a50 	.word	0x08014a50
 8011948:	08014a70 	.word	0x08014a70
 801194c:	08014a30 	.word	0x08014a30

08011950 <_lseek_r>:
 8011950:	b538      	push	{r3, r4, r5, lr}
 8011952:	4c07      	ldr	r4, [pc, #28]	; (8011970 <_lseek_r+0x20>)
 8011954:	4605      	mov	r5, r0
 8011956:	4608      	mov	r0, r1
 8011958:	4611      	mov	r1, r2
 801195a:	2200      	movs	r2, #0
 801195c:	6022      	str	r2, [r4, #0]
 801195e:	461a      	mov	r2, r3
 8011960:	f7ef f848 	bl	80009f4 <_lseek>
 8011964:	1c43      	adds	r3, r0, #1
 8011966:	d102      	bne.n	801196e <_lseek_r+0x1e>
 8011968:	6823      	ldr	r3, [r4, #0]
 801196a:	b103      	cbz	r3, 801196e <_lseek_r+0x1e>
 801196c:	602b      	str	r3, [r5, #0]
 801196e:	bd38      	pop	{r3, r4, r5, pc}
 8011970:	20006eb4 	.word	0x20006eb4

08011974 <__swhatbuf_r>:
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	460e      	mov	r6, r1
 8011978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801197c:	2900      	cmp	r1, #0
 801197e:	b096      	sub	sp, #88	; 0x58
 8011980:	4614      	mov	r4, r2
 8011982:	461d      	mov	r5, r3
 8011984:	da07      	bge.n	8011996 <__swhatbuf_r+0x22>
 8011986:	2300      	movs	r3, #0
 8011988:	602b      	str	r3, [r5, #0]
 801198a:	89b3      	ldrh	r3, [r6, #12]
 801198c:	061a      	lsls	r2, r3, #24
 801198e:	d410      	bmi.n	80119b2 <__swhatbuf_r+0x3e>
 8011990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011994:	e00e      	b.n	80119b4 <__swhatbuf_r+0x40>
 8011996:	466a      	mov	r2, sp
 8011998:	f000 f864 	bl	8011a64 <_fstat_r>
 801199c:	2800      	cmp	r0, #0
 801199e:	dbf2      	blt.n	8011986 <__swhatbuf_r+0x12>
 80119a0:	9a01      	ldr	r2, [sp, #4]
 80119a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80119a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80119aa:	425a      	negs	r2, r3
 80119ac:	415a      	adcs	r2, r3
 80119ae:	602a      	str	r2, [r5, #0]
 80119b0:	e7ee      	b.n	8011990 <__swhatbuf_r+0x1c>
 80119b2:	2340      	movs	r3, #64	; 0x40
 80119b4:	2000      	movs	r0, #0
 80119b6:	6023      	str	r3, [r4, #0]
 80119b8:	b016      	add	sp, #88	; 0x58
 80119ba:	bd70      	pop	{r4, r5, r6, pc}

080119bc <__smakebuf_r>:
 80119bc:	898b      	ldrh	r3, [r1, #12]
 80119be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80119c0:	079d      	lsls	r5, r3, #30
 80119c2:	4606      	mov	r6, r0
 80119c4:	460c      	mov	r4, r1
 80119c6:	d507      	bpl.n	80119d8 <__smakebuf_r+0x1c>
 80119c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80119cc:	6023      	str	r3, [r4, #0]
 80119ce:	6123      	str	r3, [r4, #16]
 80119d0:	2301      	movs	r3, #1
 80119d2:	6163      	str	r3, [r4, #20]
 80119d4:	b002      	add	sp, #8
 80119d6:	bd70      	pop	{r4, r5, r6, pc}
 80119d8:	ab01      	add	r3, sp, #4
 80119da:	466a      	mov	r2, sp
 80119dc:	f7ff ffca 	bl	8011974 <__swhatbuf_r>
 80119e0:	9900      	ldr	r1, [sp, #0]
 80119e2:	4605      	mov	r5, r0
 80119e4:	4630      	mov	r0, r6
 80119e6:	f7ff faab 	bl	8010f40 <_malloc_r>
 80119ea:	b948      	cbnz	r0, 8011a00 <__smakebuf_r+0x44>
 80119ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80119f0:	059a      	lsls	r2, r3, #22
 80119f2:	d4ef      	bmi.n	80119d4 <__smakebuf_r+0x18>
 80119f4:	f023 0303 	bic.w	r3, r3, #3
 80119f8:	f043 0302 	orr.w	r3, r3, #2
 80119fc:	81a3      	strh	r3, [r4, #12]
 80119fe:	e7e3      	b.n	80119c8 <__smakebuf_r+0xc>
 8011a00:	4b0d      	ldr	r3, [pc, #52]	; (8011a38 <__smakebuf_r+0x7c>)
 8011a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8011a04:	89a3      	ldrh	r3, [r4, #12]
 8011a06:	6020      	str	r0, [r4, #0]
 8011a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011a0c:	81a3      	strh	r3, [r4, #12]
 8011a0e:	9b00      	ldr	r3, [sp, #0]
 8011a10:	6163      	str	r3, [r4, #20]
 8011a12:	9b01      	ldr	r3, [sp, #4]
 8011a14:	6120      	str	r0, [r4, #16]
 8011a16:	b15b      	cbz	r3, 8011a30 <__smakebuf_r+0x74>
 8011a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011a1c:	4630      	mov	r0, r6
 8011a1e:	f000 f833 	bl	8011a88 <_isatty_r>
 8011a22:	b128      	cbz	r0, 8011a30 <__smakebuf_r+0x74>
 8011a24:	89a3      	ldrh	r3, [r4, #12]
 8011a26:	f023 0303 	bic.w	r3, r3, #3
 8011a2a:	f043 0301 	orr.w	r3, r3, #1
 8011a2e:	81a3      	strh	r3, [r4, #12]
 8011a30:	89a3      	ldrh	r3, [r4, #12]
 8011a32:	431d      	orrs	r5, r3
 8011a34:	81a5      	strh	r5, [r4, #12]
 8011a36:	e7cd      	b.n	80119d4 <__smakebuf_r+0x18>
 8011a38:	08010d49 	.word	0x08010d49

08011a3c <__malloc_lock>:
 8011a3c:	4770      	bx	lr

08011a3e <__malloc_unlock>:
 8011a3e:	4770      	bx	lr

08011a40 <_read_r>:
 8011a40:	b538      	push	{r3, r4, r5, lr}
 8011a42:	4c07      	ldr	r4, [pc, #28]	; (8011a60 <_read_r+0x20>)
 8011a44:	4605      	mov	r5, r0
 8011a46:	4608      	mov	r0, r1
 8011a48:	4611      	mov	r1, r2
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	6022      	str	r2, [r4, #0]
 8011a4e:	461a      	mov	r2, r3
 8011a50:	f7ee ff8c 	bl	800096c <_read>
 8011a54:	1c43      	adds	r3, r0, #1
 8011a56:	d102      	bne.n	8011a5e <_read_r+0x1e>
 8011a58:	6823      	ldr	r3, [r4, #0]
 8011a5a:	b103      	cbz	r3, 8011a5e <_read_r+0x1e>
 8011a5c:	602b      	str	r3, [r5, #0]
 8011a5e:	bd38      	pop	{r3, r4, r5, pc}
 8011a60:	20006eb4 	.word	0x20006eb4

08011a64 <_fstat_r>:
 8011a64:	b538      	push	{r3, r4, r5, lr}
 8011a66:	4c07      	ldr	r4, [pc, #28]	; (8011a84 <_fstat_r+0x20>)
 8011a68:	2300      	movs	r3, #0
 8011a6a:	4605      	mov	r5, r0
 8011a6c:	4608      	mov	r0, r1
 8011a6e:	4611      	mov	r1, r2
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	f7ee ffa4 	bl	80009be <_fstat>
 8011a76:	1c43      	adds	r3, r0, #1
 8011a78:	d102      	bne.n	8011a80 <_fstat_r+0x1c>
 8011a7a:	6823      	ldr	r3, [r4, #0]
 8011a7c:	b103      	cbz	r3, 8011a80 <_fstat_r+0x1c>
 8011a7e:	602b      	str	r3, [r5, #0]
 8011a80:	bd38      	pop	{r3, r4, r5, pc}
 8011a82:	bf00      	nop
 8011a84:	20006eb4 	.word	0x20006eb4

08011a88 <_isatty_r>:
 8011a88:	b538      	push	{r3, r4, r5, lr}
 8011a8a:	4c06      	ldr	r4, [pc, #24]	; (8011aa4 <_isatty_r+0x1c>)
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	4605      	mov	r5, r0
 8011a90:	4608      	mov	r0, r1
 8011a92:	6023      	str	r3, [r4, #0]
 8011a94:	f7ee ffa3 	bl	80009de <_isatty>
 8011a98:	1c43      	adds	r3, r0, #1
 8011a9a:	d102      	bne.n	8011aa2 <_isatty_r+0x1a>
 8011a9c:	6823      	ldr	r3, [r4, #0]
 8011a9e:	b103      	cbz	r3, 8011aa2 <_isatty_r+0x1a>
 8011aa0:	602b      	str	r3, [r5, #0]
 8011aa2:	bd38      	pop	{r3, r4, r5, pc}
 8011aa4:	20006eb4 	.word	0x20006eb4

08011aa8 <_init>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	bf00      	nop
 8011aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aae:	bc08      	pop	{r3}
 8011ab0:	469e      	mov	lr, r3
 8011ab2:	4770      	bx	lr

08011ab4 <_fini>:
 8011ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ab6:	bf00      	nop
 8011ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aba:	bc08      	pop	{r3}
 8011abc:	469e      	mov	lr, r3
 8011abe:	4770      	bx	lr
