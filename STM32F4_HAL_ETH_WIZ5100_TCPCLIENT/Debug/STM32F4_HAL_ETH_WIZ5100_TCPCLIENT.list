
STM32F4_HAL_ETH_WIZ5100_TCPCLIENT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083bc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800856c  0800856c  0001856c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087ac  080087ac  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  080087ac  080087ac  000187ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087b4  080087b4  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087b4  080087b4  000187b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087b8  080087b8  000187b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  080087bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008ac4  200000c8  08008884  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  20008b8c  08008884  00028b8c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166f4  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000039d4  00000000  00000000  000367ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013f8  00000000  00000000  0003a1c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001260  00000000  00000000  0003b5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000271e2  00000000  00000000  0003c818  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001081c  00000000  00000000  000639fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e517d  00000000  00000000  00074216  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00159393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000057e8  00000000  00000000  00159410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008554 	.word	0x08008554

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000cc 	.word	0x200000cc
 80001ec:	08008554 	.word	0x08008554

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);	//turn on blue led when system detects stack overflow
 800059a:	2201      	movs	r2, #1
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	4803      	ldr	r0, [pc, #12]	; (80005ac <vApplicationStackOverflowHook+0x1c>)
 80005a0:	f001 f886 	bl	80016b0 <HAL_GPIO_WritePin>
}
 80005a4:	bf00      	nop
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40020400 	.word	0x40020400

080005b0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005b0:	b480      	push	{r7}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	60f8      	str	r0, [r7, #12]
 80005b8:	60b9      	str	r1, [r7, #8]
 80005ba:	607a      	str	r2, [r7, #4]
	*ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	4a07      	ldr	r2, [pc, #28]	; (80005dc <vApplicationGetIdleTaskMemory+0x2c>)
 80005c0:	601a      	str	r2, [r3, #0]
	*ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	4a06      	ldr	r2, [pc, #24]	; (80005e0 <vApplicationGetIdleTaskMemory+0x30>)
 80005c6:	601a      	str	r2, [r3, #0]
	*pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ce:	601a      	str	r2, [r3, #0]
	/* place for user code */
}                   
 80005d0:	bf00      	nop
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	200000e4 	.word	0x200000e4
 80005e0:	20000138 	.word	0x20000138

080005e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e4:	b5b0      	push	{r4, r5, r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <MX_FREERTOS_Init+0x30>)
 80005ec:	1d3c      	adds	r4, r7, #4
 80005ee:	461d      	mov	r5, r3
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2100      	movs	r1, #0
 8000600:	4618      	mov	r0, r3
 8000602:	f002 fcba 	bl	8002f7a <osThreadCreate>
 8000606:	4602      	mov	r2, r0
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <MX_FREERTOS_Init+0x34>)
 800060a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800060c:	bf00      	nop
 800060e:	3720      	adds	r7, #32
 8000610:	46bd      	mov	sp, r7
 8000612:	bdb0      	pop	{r4, r5, r7, pc}
 8000614:	08008578 	.word	0x08008578
 8000618:	200086c8 	.word	0x200086c8

0800061c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800061c:	b5b0      	push	{r4, r5, r7, lr}
 800061e:	b08a      	sub	sp, #40	; 0x28
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
	osThreadDef(wizTcpClientTask, StartWizTcpClientTask, osPriorityNormal, 0, 256);
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <StartDefaultTask+0x40>)
 8000626:	f107 040c 	add.w	r4, r7, #12
 800062a:	461d      	mov	r5, r3
 800062c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000630:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000634:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	wizTcpClientTaskHandle = osThreadCreate(osThread(wizTcpClientTask), NULL);
 8000638:	f107 030c 	add.w	r3, r7, #12
 800063c:	2100      	movs	r1, #0
 800063e:	4618      	mov	r0, r3
 8000640:	f002 fc9b 	bl	8002f7a <osThreadCreate>
 8000644:	4602      	mov	r2, r0
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <StartDefaultTask+0x44>)
 8000648:	601a      	str	r2, [r3, #0]
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800064a:	2101      	movs	r1, #1
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <StartDefaultTask+0x48>)
 800064e:	f001 f848 	bl	80016e2 <HAL_GPIO_TogglePin>
		osDelay(500);
 8000652:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000656:	f002 fcdc 	bl	8003012 <osDelay>
		HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800065a:	e7f6      	b.n	800064a <StartDefaultTask+0x2e>
 800065c:	080085a8 	.word	0x080085a8
 8000660:	200086cc 	.word	0x200086cc
 8000664:	40020400 	.word	0x40020400

08000668 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b3f      	ldr	r3, [pc, #252]	; (8000780 <MX_GPIO_Init+0x118>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a3e      	ldr	r2, [pc, #248]	; (8000780 <MX_GPIO_Init+0x118>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b3c      	ldr	r3, [pc, #240]	; (8000780 <MX_GPIO_Init+0x118>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b38      	ldr	r3, [pc, #224]	; (8000780 <MX_GPIO_Init+0x118>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a37      	ldr	r2, [pc, #220]	; (8000780 <MX_GPIO_Init+0x118>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b35      	ldr	r3, [pc, #212]	; (8000780 <MX_GPIO_Init+0x118>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b31      	ldr	r3, [pc, #196]	; (8000780 <MX_GPIO_Init+0x118>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a30      	ldr	r2, [pc, #192]	; (8000780 <MX_GPIO_Init+0x118>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2e      	ldr	r3, [pc, #184]	; (8000780 <MX_GPIO_Init+0x118>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <MX_GPIO_Init+0x118>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a29      	ldr	r2, [pc, #164]	; (8000780 <MX_GPIO_Init+0x118>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b27      	ldr	r3, [pc, #156]	; (8000780 <MX_GPIO_Init+0x118>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_GPIO_Init+0x118>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a22      	ldr	r2, [pc, #136]	; (8000780 <MX_GPIO_Init+0x118>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_GPIO_Init+0x118>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000710:	481c      	ldr	r0, [pc, #112]	; (8000784 <MX_GPIO_Init+0x11c>)
 8000712:	f000 ffcd 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIZ_SPI1_CS_GPIO_Port, WIZ_SPI1_CS_Pin, GPIO_PIN_SET);
 8000716:	2201      	movs	r2, #1
 8000718:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800071c:	481a      	ldr	r0, [pc, #104]	; (8000788 <MX_GPIO_Init+0x120>)
 800071e:	f000 ffc7 	bl	80016b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8000722:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000726:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	4619      	mov	r1, r3
 8000736:	4815      	ldr	r0, [pc, #84]	; (800078c <MX_GPIO_Init+0x124>)
 8000738:	f000 fe10 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin|LED_BLUE_Pin;
 800073c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000740:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	2301      	movs	r3, #1
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074a:	2300      	movs	r3, #0
 800074c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	4619      	mov	r1, r3
 8000754:	480b      	ldr	r0, [pc, #44]	; (8000784 <MX_GPIO_Init+0x11c>)
 8000756:	f000 fe01 	bl	800135c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WIZ_SPI1_CS_Pin;
 800075a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000760:	2301      	movs	r3, #1
 8000762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000764:	2301      	movs	r3, #1
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WIZ_SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800076c:	f107 0314 	add.w	r3, r7, #20
 8000770:	4619      	mov	r1, r3
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_GPIO_Init+0x120>)
 8000774:	f000 fdf2 	bl	800135c <HAL_GPIO_Init>

}
 8000778:	bf00      	nop
 800077a:	3728      	adds	r7, #40	; 0x28
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800
 8000784:	40020400 	.word	0x40020400
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020800 	.word	0x40020800

08000790 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000798:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800079c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80007a0:	f003 0301 	and.w	r3, r3, #1
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d013      	beq.n	80007d0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80007a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ac:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80007b0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d00b      	beq.n	80007d0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80007b8:	e000      	b.n	80007bc <ITM_SendChar+0x2c>
    {
      __NOP();
 80007ba:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80007bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d0f9      	beq.n	80007ba <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80007c6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80007d0:	687b      	ldr	r3, [r7, #4]
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr

080007de <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80007de:	b580      	push	{r7, lr}
 80007e0:	b086      	sub	sp, #24
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	60f8      	str	r0, [r7, #12]
 80007e6:	60b9      	str	r1, [r7, #8]
 80007e8:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
 80007ee:	e009      	b.n	8000804 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 80007f0:	68bb      	ldr	r3, [r7, #8]
 80007f2:	1c5a      	adds	r2, r3, #1
 80007f4:	60ba      	str	r2, [r7, #8]
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff ffc9 	bl	8000790 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007fe:	697b      	ldr	r3, [r7, #20]
 8000800:	3301      	adds	r3, #1
 8000802:	617b      	str	r3, [r7, #20]
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	429a      	cmp	r2, r3
 800080a:	dbf1      	blt.n	80007f0 <_write+0x12>
  }
  return len;
 800080c:	687b      	ldr	r3, [r7, #4]
}
 800080e:	4618      	mov	r0, r3
 8000810:	3718      	adds	r7, #24
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081c:	f000 fc7a 	bl	8001114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000820:	f000 f80e 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000824:	f7ff ff20 	bl	8000668 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000828:	f000 f88e 	bl	8000948 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  printf("Don't remove this printf to prevent hard fault.\r\n");
 800082c:	4803      	ldr	r0, [pc, #12]	; (800083c <main+0x24>)
 800082e:	f007 f865 	bl	80078fc <puts>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000832:	f7ff fed7 	bl	80005e4 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8000836:	f002 fb99 	bl	8002f6c <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800083a:	e7fe      	b.n	800083a <main+0x22>
 800083c:	080085c4 	.word	0x080085c4

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b094      	sub	sp, #80	; 0x50
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0320 	add.w	r3, r7, #32
 800084a:	2230      	movs	r2, #48	; 0x30
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f006 ff30 	bl	80076b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	f107 030c 	add.w	r3, r7, #12
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000864:	2300      	movs	r3, #0
 8000866:	60bb      	str	r3, [r7, #8]
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <SystemClock_Config+0xcc>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a27      	ldr	r2, [pc, #156]	; (800090c <SystemClock_Config+0xcc>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b25      	ldr	r3, [pc, #148]	; (800090c <SystemClock_Config+0xcc>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	2300      	movs	r3, #0
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	4b22      	ldr	r3, [pc, #136]	; (8000910 <SystemClock_Config+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <SystemClock_Config+0xd0>)
 800088a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	4b1f      	ldr	r3, [pc, #124]	; (8000910 <SystemClock_Config+0xd0>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800089c:	2301      	movs	r3, #1
 800089e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a6:	2302      	movs	r3, #2
 80008a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b0:	2304      	movs	r3, #4
 80008b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80008b4:	23a8      	movs	r3, #168	; 0xa8
 80008b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b8:	2302      	movs	r3, #2
 80008ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008bc:	2307      	movs	r3, #7
 80008be:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c0:	f107 0320 	add.w	r3, r7, #32
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 ff27 	bl	8001718 <HAL_RCC_OscConfig>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d0:	f000 f832 	bl	8000938 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d4:	230f      	movs	r3, #15
 80008d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d8:	2302      	movs	r3, #2
 80008da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008e0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ec:	f107 030c 	add.w	r3, r7, #12
 80008f0:	2105      	movs	r1, #5
 80008f2:	4618      	mov	r0, r3
 80008f4:	f001 f980 	bl	8001bf8 <HAL_RCC_ClockConfig>
 80008f8:	4603      	mov	r3, r0
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d001      	beq.n	8000902 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008fe:	f000 f81b 	bl	8000938 <Error_Handler>
  }
}
 8000902:	bf00      	nop
 8000904:	3750      	adds	r7, #80	; 0x50
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40007000 	.word	0x40007000

08000914 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a04      	ldr	r2, [pc, #16]	; (8000934 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000922:	4293      	cmp	r3, r2
 8000924:	d101      	bne.n	800092a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000926:	f000 fc17 	bl	8001158 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800092a:	bf00      	nop
 800092c:	3708      	adds	r7, #8
 800092e:	46bd      	mov	sp, r7
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40001000 	.word	0x40001000

08000938 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800093c:	bf00      	nop
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800094c:	4b17      	ldr	r3, [pc, #92]	; (80009ac <MX_SPI1_Init+0x64>)
 800094e:	4a18      	ldr	r2, [pc, #96]	; (80009b0 <MX_SPI1_Init+0x68>)
 8000950:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000952:	4b16      	ldr	r3, [pc, #88]	; (80009ac <MX_SPI1_Init+0x64>)
 8000954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000958:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800095a:	4b14      	ldr	r3, [pc, #80]	; (80009ac <MX_SPI1_Init+0x64>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <MX_SPI1_Init+0x64>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000966:	4b11      	ldr	r3, [pc, #68]	; (80009ac <MX_SPI1_Init+0x64>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <MX_SPI1_Init+0x64>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000972:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_SPI1_Init+0x64>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800097a:	4b0c      	ldr	r3, [pc, #48]	; (80009ac <MX_SPI1_Init+0x64>)
 800097c:	2220      	movs	r2, #32
 800097e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000980:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_SPI1_Init+0x64>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000986:	4b09      	ldr	r3, [pc, #36]	; (80009ac <MX_SPI1_Init+0x64>)
 8000988:	2200      	movs	r2, #0
 800098a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800098c:	4b07      	ldr	r3, [pc, #28]	; (80009ac <MX_SPI1_Init+0x64>)
 800098e:	2200      	movs	r2, #0
 8000990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000992:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_SPI1_Init+0x64>)
 8000994:	220a      	movs	r2, #10
 8000996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000998:	4804      	ldr	r0, [pc, #16]	; (80009ac <MX_SPI1_Init+0x64>)
 800099a:	f001 fb3d 	bl	8002018 <HAL_SPI_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80009a4:	f7ff ffc8 	bl	8000938 <Error_Handler>
  }

}
 80009a8:	bf00      	nop
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	200086d0 	.word	0x200086d0
 80009b0:	40013000 	.word	0x40013000

080009b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b08a      	sub	sp, #40	; 0x28
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	f107 0314 	add.w	r3, r7, #20
 80009c0:	2200      	movs	r2, #0
 80009c2:	601a      	str	r2, [r3, #0]
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	60da      	str	r2, [r3, #12]
 80009ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a19      	ldr	r2, [pc, #100]	; (8000a38 <HAL_SPI_MspInit+0x84>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d12b      	bne.n	8000a2e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009e4:	6453      	str	r3, [r2, #68]	; 0x44
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009ee:	613b      	str	r3, [r7, #16]
 80009f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	60fb      	str	r3, [r7, #12]
 80009f6:	4b11      	ldr	r3, [pc, #68]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	4a10      	ldr	r2, [pc, #64]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 80009fc:	f043 0301 	orr.w	r3, r3, #1
 8000a00:	6313      	str	r3, [r2, #48]	; 0x30
 8000a02:	4b0e      	ldr	r3, [pc, #56]	; (8000a3c <HAL_SPI_MspInit+0x88>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	f003 0301 	and.w	r3, r3, #1
 8000a0a:	60fb      	str	r3, [r7, #12]
 8000a0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = WIZ_SPI1_SCK_Pin|WIZ_SPI1_MISO_Pin|WIZ_SPI1_MOSI_Pin;
 8000a0e:	23e0      	movs	r3, #224	; 0xe0
 8000a10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a12:	2302      	movs	r3, #2
 8000a14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a1a:	2303      	movs	r3, #3
 8000a1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a1e:	2305      	movs	r3, #5
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4805      	ldr	r0, [pc, #20]	; (8000a40 <HAL_SPI_MspInit+0x8c>)
 8000a2a:	f000 fc97 	bl	800135c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3728      	adds	r7, #40	; 0x28
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40013000 	.word	0x40013000
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000

08000a44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_MspInit+0x54>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	4a11      	ldr	r2, [pc, #68]	; (8000a98 <HAL_MspInit+0x54>)
 8000a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a58:	6453      	str	r3, [r2, #68]	; 0x44
 8000a5a:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <HAL_MspInit+0x54>)
 8000a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_MspInit+0x54>)
 8000a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_MspInit+0x54>)
 8000a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a74:	6413      	str	r3, [r2, #64]	; 0x40
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_MspInit+0x54>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7e:	603b      	str	r3, [r7, #0]
 8000a80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a82:	2200      	movs	r2, #0
 8000a84:	210f      	movs	r1, #15
 8000a86:	f06f 0001 	mvn.w	r0, #1
 8000a8a:	f000 fc3d 	bl	8001308 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023800 	.word	0x40023800

08000a9c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08c      	sub	sp, #48	; 0x30
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000aac:	2200      	movs	r2, #0
 8000aae:	6879      	ldr	r1, [r7, #4]
 8000ab0:	2036      	movs	r0, #54	; 0x36
 8000ab2:	f000 fc29 	bl	8001308 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000ab6:	2036      	movs	r0, #54	; 0x36
 8000ab8:	f000 fc42 	bl	8001340 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac4:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ac6:	f043 0310 	orr.w	r3, r3, #16
 8000aca:	6413      	str	r3, [r2, #64]	; 0x40
 8000acc:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_InitTick+0xa4>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad0:	f003 0310 	and.w	r3, r3, #16
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ad8:	f107 0210 	add.w	r2, r7, #16
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fa66 	bl	8001fb4 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ae8:	f001 fa50 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8000aec:	4603      	mov	r3, r0
 8000aee:	005b      	lsls	r3, r3, #1
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af4:	4a13      	ldr	r2, [pc, #76]	; (8000b44 <HAL_InitTick+0xa8>)
 8000af6:	fba2 2303 	umull	r2, r3, r2, r3
 8000afa:	0c9b      	lsrs	r3, r3, #18
 8000afc:	3b01      	subs	r3, #1
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <HAL_InitTick+0xac>)
 8000b02:	4a12      	ldr	r2, [pc, #72]	; (8000b4c <HAL_InitTick+0xb0>)
 8000b04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000b06:	4b10      	ldr	r3, [pc, #64]	; (8000b48 <HAL_InitTick+0xac>)
 8000b08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b0c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_InitTick+0xac>)
 8000b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b12:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b14:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_InitTick+0xac>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1a:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_InitTick+0xac>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000b20:	4809      	ldr	r0, [pc, #36]	; (8000b48 <HAL_InitTick+0xac>)
 8000b22:	f001 ffcd 	bl	8002ac0 <HAL_TIM_Base_Init>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d104      	bne.n	8000b36 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_InitTick+0xac>)
 8000b2e:	f001 fffc 	bl	8002b2a <HAL_TIM_Base_Start_IT>
 8000b32:	4603      	mov	r3, r0
 8000b34:	e000      	b.n	8000b38 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000b36:	2301      	movs	r3, #1
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	3730      	adds	r7, #48	; 0x30
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40023800 	.word	0x40023800
 8000b44:	431bde83 	.word	0x431bde83
 8000b48:	20008728 	.word	0x20008728
 8000b4c:	40001000 	.word	0x40001000

08000b50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <HardFault_Handler+0x4>

08000b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b68:	e7fe      	b.n	8000b68 <MemManage_Handler+0x4>

08000b6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b6e:	e7fe      	b.n	8000b6e <BusFault_Handler+0x4>

08000b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b74:	e7fe      	b.n	8000b74 <UsageFault_Handler+0x4>

08000b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b76:	b480      	push	{r7}
 8000b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <TIM6_DAC_IRQHandler+0x10>)
 8000b8a:	f001 fff2 	bl	8002b72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20008728 	.word	0x20008728

08000b98 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b086      	sub	sp, #24
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	617b      	str	r3, [r7, #20]
 8000ba8:	e00a      	b.n	8000bc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000baa:	f3af 8000 	nop.w
 8000bae:	4601      	mov	r1, r0
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	1c5a      	adds	r2, r3, #1
 8000bb4:	60ba      	str	r2, [r7, #8]
 8000bb6:	b2ca      	uxtb	r2, r1
 8000bb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	617b      	str	r3, [r7, #20]
 8000bc0:	697a      	ldr	r2, [r7, #20]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	dbf0      	blt.n	8000baa <_read+0x12>
	}

return len;
 8000bc8:	687b      	ldr	r3, [r7, #4]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3718      	adds	r7, #24
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	b083      	sub	sp, #12
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	6078      	str	r0, [r7, #4]
	return -1;
 8000bda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bfa:	605a      	str	r2, [r3, #4]
	return 0;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr

08000c0a <_isatty>:

int _isatty(int file)
{
 8000c0a:	b480      	push	{r7}
 8000c0c:	b083      	sub	sp, #12
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
	return 1;
 8000c12:	2301      	movs	r3, #1
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	370c      	adds	r7, #12
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b085      	sub	sp, #20
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
	return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000c44:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <_sbrk+0x50>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x16>
		heap_end = &end;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <_sbrk+0x50>)
 8000c4e:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <_sbrk+0x54>)
 8000c50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <_sbrk+0x50>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <_sbrk+0x50>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4413      	add	r3, r2
 8000c60:	466a      	mov	r2, sp
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d907      	bls.n	8000c76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000c66:	f006 fcfb 	bl	8007660 <__errno>
 8000c6a:	4602      	mov	r2, r0
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000c70:	f04f 33ff 	mov.w	r3, #4294967295
 8000c74:	e006      	b.n	8000c84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <_sbrk+0x50>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a03      	ldr	r2, [pc, #12]	; (8000c8c <_sbrk+0x50>)
 8000c80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000538 	.word	0x20000538
 8000c90:	20008b90 	.word	0x20008b90

08000c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <SystemInit+0x28>)
 8000c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c9e:	4a07      	ldr	r2, [pc, #28]	; (8000cbc <SystemInit+0x28>)
 8000ca0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ca4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <SystemInit+0x28>)
 8000caa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cae:	609a      	str	r2, [r3, #8]
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <cbIPAddrAssigned>:
static uint8_t serverIP[] = {SERVER_IP1,SERVER_IP2,SERVER_IP3,SERVER_IP4};
uint8_t dhcp_buffer[1024];
uint8_t buff_size[] = {2,2,2,2};

void cbIPAddrAssigned(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	printf("IP Address is assigned.\n");
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <cbIPAddrAssigned+0x14>)
 8000cc6:	f006 fe19 	bl	80078fc <puts>
	isIPAddrAssigned = true;
 8000cca:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <cbIPAddrAssigned+0x18>)
 8000ccc:	2201      	movs	r2, #1
 8000cce:	701a      	strb	r2, [r3, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	080085f8 	.word	0x080085f8
 8000cd8:	2000053c 	.word	0x2000053c

08000cdc <cbIPAddrConfict>:

void cbIPAddrConfict(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
	printf("IP Address is conflicted.\n");
 8000ce0:	4803      	ldr	r0, [pc, #12]	; (8000cf0 <cbIPAddrConfict+0x14>)
 8000ce2:	f006 fe0b 	bl	80078fc <puts>
	isIPAddrAssigned = false;
 8000ce6:	4b03      	ldr	r3, [pc, #12]	; (8000cf4 <cbIPAddrConfict+0x18>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	701a      	strb	r2, [r3, #0]
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	08008610 	.word	0x08008610
 8000cf4:	2000053c 	.word	0x2000053c

08000cf8 <StartWizTcpClientTask>:

void StartWizTcpClientTask(void const *argument)
{
 8000cf8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000cfc:	b0d7      	sub	sp, #348	; 0x15c
 8000cfe:	af0a      	add	r7, sp, #40	; 0x28
 8000d00:	f107 030c 	add.w	r3, r7, #12
 8000d04:	6018      	str	r0, [r3, #0]
	int8_t ret;

	reg_wizchip_cs_cbfunc(WIZ_SPI_Select, WIZ_SPI_Deselect); //register chip select functions
 8000d06:	49bf      	ldr	r1, [pc, #764]	; (8001004 <StartWizTcpClientTask+0x30c>)
 8000d08:	48bf      	ldr	r0, [pc, #764]	; (8001008 <StartWizTcpClientTask+0x310>)
 8000d0a:	f004 ff61 	bl	8005bd0 <reg_wizchip_cs_cbfunc>
	reg_wizchip_spi_cbfunc(WIZ_SPI_RxByte, WIZ_SPI_TxByte); //register spi functions
 8000d0e:	49bf      	ldr	r1, [pc, #764]	; (800100c <StartWizTcpClientTask+0x314>)
 8000d10:	48bf      	ldr	r0, [pc, #764]	; (8001010 <StartWizTcpClientTask+0x318>)
 8000d12:	f004 ff81 	bl	8005c18 <reg_wizchip_spi_cbfunc>

	wizchip_init(buff_size, buff_size); //rx, tx buffer sizes
 8000d16:	49bf      	ldr	r1, [pc, #764]	; (8001014 <StartWizTcpClientTask+0x31c>)
 8000d18:	48be      	ldr	r0, [pc, #760]	; (8001014 <StartWizTcpClientTask+0x31c>)
 8000d1a:	f004 ffed 	bl	8005cf8 <wizchip_init>
	wiz_NetInfo netInfo = {
 8000d1e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d22:	2200      	movs	r2, #0
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	605a      	str	r2, [r3, #4]
 8000d28:	609a      	str	r2, [r3, #8]
 8000d2a:	60da      	str	r2, [r3, #12]
 8000d2c:	611a      	str	r2, [r3, #16]
 8000d2e:	f8c3 2013 	str.w	r2, [r3, #19]
 8000d32:	2308      	movs	r3, #8
 8000d34:	f887 3111 	strb.w	r3, [r7, #273]	; 0x111
 8000d38:	23dc      	movs	r3, #220	; 0xdc
 8000d3a:	f887 3112 	strb.w	r3, [r7, #274]	; 0x112
 8000d3e:	23ab      	movs	r3, #171	; 0xab
 8000d40:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
 8000d44:	23cd      	movs	r3, #205	; 0xcd
 8000d46:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
 8000d4a:	23ef      	movs	r3, #239	; 0xef
 8000d4c:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8000d50:	2302      	movs	r3, #2
 8000d52:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
			.mac 	= {0x00, 0x08, 0xdc, 0xab, 0xcd, 0xef},	// Mac address
			.dhcp = NETINFO_DHCP //DHCP
			};

	setSHAR(netInfo.mac); //set MAC address
 8000d56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d5a:	2206      	movs	r2, #6
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2009      	movs	r0, #9
 8000d60:	f003 fc22 	bl	80045a8 <WIZCHIP_WRITE_BUF>
	DHCP_init(DHCP_SOCKET, dhcp_buffer); //init DHCP
 8000d64:	49ac      	ldr	r1, [pc, #688]	; (8001018 <StartWizTcpClientTask+0x320>)
 8000d66:	2000      	movs	r0, #0
 8000d68:	f006 fb5a 	bl	8007420 <DHCP_init>

	reg_dhcp_cbfunc(cbIPAddrAssigned, cbIPAddrAssigned, cbIPAddrConfict); //register DHCP callbacks
 8000d6c:	4aab      	ldr	r2, [pc, #684]	; (800101c <StartWizTcpClientTask+0x324>)
 8000d6e:	49ac      	ldr	r1, [pc, #688]	; (8001020 <StartWizTcpClientTask+0x328>)
 8000d70:	48ab      	ldr	r0, [pc, #684]	; (8001020 <StartWizTcpClientTask+0x328>)
 8000d72:	f005 f91f 	bl	8005fb4 <reg_dhcp_cbfunc>

	while(!isIPAddrAssigned)
 8000d76:	e001      	b.n	8000d7c <StartWizTcpClientTask+0x84>
	{
		DHCP_run();
 8000d78:	f006 f9a4 	bl	80070c4 <DHCP_run>
	while(!isIPAddrAssigned)
 8000d7c:	4ba9      	ldr	r3, [pc, #676]	; (8001024 <StartWizTcpClientTask+0x32c>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	f083 0301 	eor.w	r3, r3, #1
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d1f6      	bne.n	8000d78 <StartWizTcpClientTask+0x80>
	}

	getIPfromDHCP(netInfo.ip);
 8000d8a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d8e:	3306      	adds	r3, #6
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 fbeb 	bl	800756c <getIPfromDHCP>
	getGWfromDHCP(netInfo.gw);
 8000d96:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d9a:	330e      	adds	r3, #14
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f006 fc05 	bl	80075ac <getGWfromDHCP>
	getSNfromDHCP(netInfo.sn);
 8000da2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000da6:	330a      	adds	r3, #10
 8000da8:	4618      	mov	r0, r3
 8000daa:	f006 fc1f 	bl	80075ec <getSNfromDHCP>

	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
			netInfo.ip[0],netInfo.ip[1],netInfo.ip[2],netInfo.ip[3],
 8000dae:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000db2:	469e      	mov	lr, r3
			netInfo.ip[0],netInfo.ip[1],netInfo.ip[2],netInfo.ip[3],
 8000db4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000db8:	4698      	mov	r8, r3
			netInfo.ip[0],netInfo.ip[1],netInfo.ip[2],netInfo.ip[3],
 8000dba:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000dbe:	4699      	mov	r9, r3
			netInfo.ip[0],netInfo.ip[1],netInfo.ip[2],netInfo.ip[3],
 8000dc0:	f897 3119 	ldrb.w	r3, [r7, #281]	; 0x119
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000dc4:	60bb      	str	r3, [r7, #8]
			netInfo.gw[0],netInfo.gw[1],netInfo.gw[2],netInfo.gw[3],
 8000dc6:	f897 211e 	ldrb.w	r2, [r7, #286]	; 0x11e
 8000dca:	f897 111f 	ldrb.w	r1, [r7, #287]	; 0x11f
 8000dce:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
 8000dd2:	f897 4121 	ldrb.w	r4, [r7, #289]	; 0x121
			netInfo.sn[0],netInfo.sn[1],netInfo.sn[2],netInfo.sn[3]
 8000dd6:	f897 511a 	ldrb.w	r5, [r7, #282]	; 0x11a
 8000dda:	f897 611b 	ldrb.w	r6, [r7, #283]	; 0x11b
 8000dde:	f897 c11c 	ldrb.w	ip, [r7, #284]	; 0x11c
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000de2:	f8c7 c004 	str.w	ip, [r7, #4]
			netInfo.sn[0],netInfo.sn[1],netInfo.sn[2],netInfo.sn[3]
 8000de6:	f897 c11d 	ldrb.w	ip, [r7, #285]	; 0x11d
	printf("IP: %03d.%03d.%03d.%03d\nGW: %03d.%03d.%03d.%03d\nNet: %03d.%03d.%03d.%03d\n",
 8000dea:	4663      	mov	r3, ip
 8000dec:	9308      	str	r3, [sp, #32]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	9307      	str	r3, [sp, #28]
 8000df2:	9606      	str	r6, [sp, #24]
 8000df4:	9505      	str	r5, [sp, #20]
 8000df6:	9404      	str	r4, [sp, #16]
 8000df8:	9003      	str	r0, [sp, #12]
 8000dfa:	9102      	str	r1, [sp, #8]
 8000dfc:	9201      	str	r2, [sp, #4]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	464b      	mov	r3, r9
 8000e04:	4642      	mov	r2, r8
 8000e06:	4671      	mov	r1, lr
 8000e08:	4887      	ldr	r0, [pc, #540]	; (8001028 <StartWizTcpClientTask+0x330>)
 8000e0a:	f006 fd03 	bl	8007814 <iprintf>
			);

	wizchip_setnetinfo(&netInfo);
 8000e0e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000e12:	4618      	mov	r0, r3
 8000e14:	f005 f852 	bl	8005ebc <wizchip_setnetinfo>

	while(1)
	{
		ret = socket(CLIENT_SOCKET, Sn_MR_TCP, 3000, 0);
 8000e18:	2300      	movs	r3, #0
 8000e1a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000e1e:	2101      	movs	r1, #1
 8000e20:	2001      	movs	r0, #1
 8000e22:	f003 fefd 	bl	8004c20 <socket>
 8000e26:	4603      	mov	r3, r0
 8000e28:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
		if(ret < 0)
 8000e2c:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	da06      	bge.n	8000e42 <StartWizTcpClientTask+0x14a>
		{
			printf("socket failed.\n");
 8000e34:	487d      	ldr	r0, [pc, #500]	; (800102c <StartWizTcpClientTask+0x334>)
 8000e36:	f006 fd61 	bl	80078fc <puts>
			close(CLIENT_SOCKET);
 8000e3a:	2001      	movs	r0, #1
 8000e3c:	f003 fff8 	bl	8004e30 <close>
			break;
 8000e40:	e0d3      	b.n	8000fea <StartWizTcpClientTask+0x2f2>
		}

		ret = connect(CLIENT_SOCKET, serverIP, SERVER_PORT);
 8000e42:	f240 42d2 	movw	r2, #1234	; 0x4d2
 8000e46:	497a      	ldr	r1, [pc, #488]	; (8001030 <StartWizTcpClientTask+0x338>)
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f004 f857 	bl	8004efc <connect>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
		if(ret < 0)
 8000e54:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	da06      	bge.n	8000e6a <StartWizTcpClientTask+0x172>
		{
			printf("connect failed.\n");
 8000e5c:	4875      	ldr	r0, [pc, #468]	; (8001034 <StartWizTcpClientTask+0x33c>)
 8000e5e:	f006 fd4d 	bl	80078fc <puts>
			close(CLIENT_SOCKET);
 8000e62:	2001      	movs	r0, #1
 8000e64:	f003 ffe4 	bl	8004e30 <close>
			break;
 8000e68:	e0bf      	b.n	8000fea <StartWizTcpClientTask+0x2f2>
		}

		struct time_packet packet;
		memset(&packet, 0, sizeof(struct time_packet));
 8000e6a:	f107 0310 	add.w	r3, r7, #16
 8000e6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fc1d 	bl	80076b4 <memset>
		packet.head = 0xAE; //head
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	22ae      	movs	r2, #174	; 0xae
 8000e80:	701a      	strb	r2, [r3, #0]
		packet.type = REQ; //request type
 8000e82:	f107 0310 	add.w	r3, r7, #16
 8000e86:	2200      	movs	r2, #0
 8000e88:	705a      	strb	r2, [r3, #1]
		packet.tail = 0xEA; //tail
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	22ea      	movs	r2, #234	; 0xea
 8000e90:	f883 20ff 	strb.w	r2, [r3, #255]	; 0xff

		uint8_t failed = 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		int16_t written = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
		int16_t read = 0;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a

		do
		{
			ret = send(CLIENT_SOCKET, (uint8_t*)(&packet + written), sizeof(struct time_packet) - written);
 8000ea6:	f9b7 312c 	ldrsh.w	r3, [r7, #300]	; 0x12c
 8000eaa:	021b      	lsls	r3, r3, #8
 8000eac:	f107 0210 	add.w	r2, r7, #16
 8000eb0:	18d1      	adds	r1, r2, r3
 8000eb2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000eb6:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	2001      	movs	r0, #1
 8000ec0:	f004 f950 	bl	8005164 <send>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
			if(ret < 0)
 8000eca:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da0c      	bge.n	8000eec <StartWizTcpClientTask+0x1f4>
			{
				printf("send failed.\n");
 8000ed2:	4859      	ldr	r0, [pc, #356]	; (8001038 <StartWizTcpClientTask+0x340>)
 8000ed4:	f006 fd12 	bl	80078fc <puts>
				disconnect(CLIENT_SOCKET);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f004 f8d5 	bl	8005088 <disconnect>
				close(CLIENT_SOCKET);
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f003 ffa6 	bl	8004e30 <close>
				failed = 1;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				break;
 8000eea:	e00c      	b.n	8000f06 <StartWizTcpClientTask+0x20e>
			}
			written += ret;
 8000eec:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000ef6:	4413      	add	r3, r2
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	f8a7 312c 	strh.w	r3, [r7, #300]	; 0x12c
		}while(written < sizeof(struct time_packet));
 8000efe:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8000f02:	2bff      	cmp	r3, #255	; 0xff
 8000f04:	d9cf      	bls.n	8000ea6 <StartWizTcpClientTask+0x1ae>

		if(failed) continue; //start again
 8000f06:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d171      	bne.n	8000ff2 <StartWizTcpClientTask+0x2fa>

		while(1)
		{
			ret = recv(CLIENT_SOCKET, (uint8_t*)(&packet + read), sizeof(struct time_packet) - read);
 8000f0e:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8000f12:	021b      	lsls	r3, r3, #8
 8000f14:	f107 0210 	add.w	r2, r7, #16
 8000f18:	18d1      	adds	r1, r2, r3
 8000f1a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000f1e:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	461a      	mov	r2, r3
 8000f26:	2001      	movs	r0, #1
 8000f28:	f004 fa10 	bl	800534c <recv>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	f887 3129 	strb.w	r3, [r7, #297]	; 0x129
			if(ret < 0)
 8000f32:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da0c      	bge.n	8000f54 <StartWizTcpClientTask+0x25c>
			{
				printf("recv failed.\n");
 8000f3a:	4840      	ldr	r0, [pc, #256]	; (800103c <StartWizTcpClientTask+0x344>)
 8000f3c:	f006 fcde 	bl	80078fc <puts>
				disconnect(CLIENT_SOCKET);
 8000f40:	2001      	movs	r0, #1
 8000f42:	f004 f8a1 	bl	8005088 <disconnect>
				close(CLIENT_SOCKET);
 8000f46:	2001      	movs	r0, #1
 8000f48:	f003 ff72 	bl	8004e30 <close>
				failed = 1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				break;
 8000f52:	e00e      	b.n	8000f72 <StartWizTcpClientTask+0x27a>
			}

			read += ret;
 8000f54:	f997 3129 	ldrsb.w	r3, [r7, #297]	; 0x129
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000f5e:	4413      	add	r3, r2
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	f8a7 312a 	strh.w	r3, [r7, #298]	; 0x12a
			if(read >= sizeof(struct time_packet)) break;
 8000f66:	f8b7 312a 	ldrh.w	r3, [r7, #298]	; 0x12a
 8000f6a:	2bff      	cmp	r3, #255	; 0xff
 8000f6c:	d800      	bhi.n	8000f70 <StartWizTcpClientTask+0x278>
			ret = recv(CLIENT_SOCKET, (uint8_t*)(&packet + read), sizeof(struct time_packet) - read);
 8000f6e:	e7ce      	b.n	8000f0e <StartWizTcpClientTask+0x216>
			if(read >= sizeof(struct time_packet)) break;
 8000f70:	bf00      	nop
		}

		if(failed) continue; //start again
 8000f72:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d13d      	bne.n	8000ff6 <StartWizTcpClientTask+0x2fe>

		if (read == sizeof(struct time_packet) && packet.type == RESP) //if received length is valid
 8000f7a:	f9b7 312a 	ldrsh.w	r3, [r7, #298]	; 0x12a
 8000f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f82:	d128      	bne.n	8000fd6 <StartWizTcpClientTask+0x2de>
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	785b      	ldrb	r3, [r3, #1]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d123      	bne.n	8000fd6 <StartWizTcpClientTask+0x2de>
		{
			printf("%04d-%02d-%02d %02d:%02d:%02d\n", packet.year + 2000, packet.month, packet.day, packet.hour, packet.minute, packet.second); //print time information
 8000f8e:	f107 0310 	add.w	r3, r7, #16
 8000f92:	789b      	ldrb	r3, [r3, #2]
 8000f94:	f503 61fa 	add.w	r1, r3, #2000	; 0x7d0
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	78db      	ldrb	r3, [r3, #3]
 8000f9e:	461c      	mov	r4, r3
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	791b      	ldrb	r3, [r3, #4]
 8000fa6:	461d      	mov	r5, r3
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	795b      	ldrb	r3, [r3, #5]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	f107 0310 	add.w	r3, r7, #16
 8000fb4:	799b      	ldrb	r3, [r3, #6]
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	79db      	ldrb	r3, [r3, #7]
 8000fbe:	9302      	str	r3, [sp, #8]
 8000fc0:	9001      	str	r0, [sp, #4]
 8000fc2:	9200      	str	r2, [sp, #0]
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	481d      	ldr	r0, [pc, #116]	; (8001040 <StartWizTcpClientTask+0x348>)
 8000fca:	f006 fc23 	bl	8007814 <iprintf>
			HAL_GPIO_TogglePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin); //toggle data led
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	481c      	ldr	r0, [pc, #112]	; (8001044 <StartWizTcpClientTask+0x34c>)
 8000fd2:	f000 fb86 	bl	80016e2 <HAL_GPIO_TogglePin>
		}

		disconnect(CLIENT_SOCKET);
 8000fd6:	2001      	movs	r0, #1
 8000fd8:	f004 f856 	bl	8005088 <disconnect>
		close(CLIENT_SOCKET);
 8000fdc:	2001      	movs	r0, #1
 8000fde:	f003 ff27 	bl	8004e30 <close>

		osDelay(100);
 8000fe2:	2064      	movs	r0, #100	; 0x64
 8000fe4:	f002 f815 	bl	8003012 <osDelay>
 8000fe8:	e716      	b.n	8000e18 <StartWizTcpClientTask+0x120>
	}

	vTaskDelete(NULL);
 8000fea:	2000      	movs	r0, #0
 8000fec:	f002 fa70 	bl	80034d0 <vTaskDelete>
}
 8000ff0:	e003      	b.n	8000ffa <StartWizTcpClientTask+0x302>
		if(failed) continue; //start again
 8000ff2:	bf00      	nop
 8000ff4:	e710      	b.n	8000e18 <StartWizTcpClientTask+0x120>
		if(failed) continue; //start again
 8000ff6:	bf00      	nop
	{
 8000ff8:	e70e      	b.n	8000e18 <StartWizTcpClientTask+0x120>
}
 8000ffa:	f507 779a 	add.w	r7, r7, #308	; 0x134
 8000ffe:	46bd      	mov	sp, r7
 8001000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001004:	08001061 	.word	0x08001061
 8001008:	08001049 	.word	0x08001049
 800100c:	08001079 	.word	0x08001079
 8001010:	0800109d 	.word	0x0800109d
 8001014:	20000008 	.word	0x20000008
 8001018:	20008768 	.word	0x20008768
 800101c:	08000cdd 	.word	0x08000cdd
 8001020:	08000cc1 	.word	0x08000cc1
 8001024:	2000053c 	.word	0x2000053c
 8001028:	0800862c 	.word	0x0800862c
 800102c:	08008678 	.word	0x08008678
 8001030:	20000004 	.word	0x20000004
 8001034:	08008688 	.word	0x08008688
 8001038:	08008698 	.word	0x08008698
 800103c:	080086a8 	.word	0x080086a8
 8001040:	080086b8 	.word	0x080086b8
 8001044:	40020400 	.word	0x40020400

08001048 <WIZ_SPI_Select>:

extern SPI_HandleTypeDef hspi1;
#define WIZ_SPI_HANDLE	&hspi1

void WIZ_SPI_Select(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZ_SPI1_CS_GPIO_Port, WIZ_SPI1_CS_Pin, GPIO_PIN_RESET);
 800104c:	2200      	movs	r2, #0
 800104e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001052:	4802      	ldr	r0, [pc, #8]	; (800105c <WIZ_SPI_Select+0x14>)
 8001054:	f000 fb2c 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40020c00 	.word	0x40020c00

08001060 <WIZ_SPI_Deselect>:

void WIZ_SPI_Deselect(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(WIZ_SPI1_CS_GPIO_Port, WIZ_SPI1_CS_Pin, GPIO_PIN_SET);
 8001064:	2201      	movs	r2, #1
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	4802      	ldr	r0, [pc, #8]	; (8001074 <WIZ_SPI_Deselect+0x14>)
 800106c:	f000 fb20 	bl	80016b0 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	40020c00 	.word	0x40020c00

08001078 <WIZ_SPI_TxByte>:

void WIZ_SPI_TxByte(uint8_t byte)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	4603      	mov	r3, r0
 8001080:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(WIZ_SPI_HANDLE, &byte, 1, HAL_MAX_DELAY);
 8001082:	1df9      	adds	r1, r7, #7
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	2201      	movs	r2, #1
 800108a:	4803      	ldr	r0, [pc, #12]	; (8001098 <WIZ_SPI_TxByte+0x20>)
 800108c:	f001 f828 	bl	80020e0 <HAL_SPI_Transmit>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	200086d0 	.word	0x200086d0

0800109c <WIZ_SPI_RxByte>:

uint8_t WIZ_SPI_RxByte(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	uint8_t ret;
	HAL_SPI_Receive(WIZ_SPI_HANDLE, &ret, 1, HAL_MAX_DELAY);
 80010a2:	1df9      	adds	r1, r7, #7
 80010a4:	f04f 33ff 	mov.w	r3, #4294967295
 80010a8:	2201      	movs	r2, #1
 80010aa:	4804      	ldr	r0, [pc, #16]	; (80010bc <WIZ_SPI_RxByte+0x20>)
 80010ac:	f001 f94c 	bl	8002348 <HAL_SPI_Receive>
	return ret;
 80010b0:	79fb      	ldrb	r3, [r7, #7]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200086d0 	.word	0x200086d0

080010c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010f8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010c6:	e003      	b.n	80010d0 <LoopCopyDataInit>

080010c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010c8:	4b0c      	ldr	r3, [pc, #48]	; (80010fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ce:	3104      	adds	r1, #4

080010d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010d0:	480b      	ldr	r0, [pc, #44]	; (8001100 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010d2:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010d8:	d3f6      	bcc.n	80010c8 <CopyDataInit>
  ldr  r2, =_sbss
 80010da:	4a0b      	ldr	r2, [pc, #44]	; (8001108 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010dc:	e002      	b.n	80010e4 <LoopFillZerobss>

080010de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010e0:	f842 3b04 	str.w	r3, [r2], #4

080010e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80010e4:	4b09      	ldr	r3, [pc, #36]	; (800110c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80010e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80010e8:	d3f9      	bcc.n	80010de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010ea:	f7ff fdd3 	bl	8000c94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010ee:	f006 fabd 	bl	800766c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f2:	f7ff fb91 	bl	8000818 <main>
  bx  lr    
 80010f6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010f8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010fc:	080087bc 	.word	0x080087bc
  ldr  r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001104:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8001108:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 800110c:	20008b8c 	.word	0x20008b8c

08001110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001110:	e7fe      	b.n	8001110 <ADC_IRQHandler>
	...

08001114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <HAL_Init+0x40>)
 800111e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001124:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <HAL_Init+0x40>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <HAL_Init+0x40>)
 800112a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800112e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x40>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x40>)
 8001136:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800113a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f8d8 	bl	80012f2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f7ff fcaa 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fc7c 	bl	8000a44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023c00 	.word	0x40023c00

08001158 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_IncTick+0x20>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	461a      	mov	r2, r3
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <HAL_IncTick+0x24>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4413      	add	r3, r2
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_IncTick+0x24>)
 800116a:	6013      	str	r3, [r2, #0]
}
 800116c:	bf00      	nop
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	20000010 	.word	0x20000010
 800117c:	20008b68 	.word	0x20008b68

08001180 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return uwTick;
 8001184:	4b03      	ldr	r3, [pc, #12]	; (8001194 <HAL_GetTick+0x14>)
 8001186:	681b      	ldr	r3, [r3, #0]
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	20008b68 	.word	0x20008b68

08001198 <__NVIC_SetPriorityGrouping>:
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f003 0307 	and.w	r3, r3, #7
 80011a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011a8:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011ae:	68ba      	ldr	r2, [r7, #8]
 80011b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b4:	4013      	ands	r3, r2
 80011b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ca:	4a04      	ldr	r2, [pc, #16]	; (80011dc <__NVIC_SetPriorityGrouping+0x44>)
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	60d3      	str	r3, [r2, #12]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <__NVIC_GetPriorityGrouping>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e4:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_GetPriorityGrouping+0x18>)
 80011e6:	68db      	ldr	r3, [r3, #12]
 80011e8:	0a1b      	lsrs	r3, r3, #8
 80011ea:	f003 0307 	and.w	r3, r3, #7
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	e000ed00 	.word	0xe000ed00

080011fc <__NVIC_EnableIRQ>:
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	2b00      	cmp	r3, #0
 800120c:	db0b      	blt.n	8001226 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	f003 021f 	and.w	r2, r3, #31
 8001214:	4907      	ldr	r1, [pc, #28]	; (8001234 <__NVIC_EnableIRQ+0x38>)
 8001216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121a:	095b      	lsrs	r3, r3, #5
 800121c:	2001      	movs	r0, #1
 800121e:	fa00 f202 	lsl.w	r2, r0, r2
 8001222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001226:	bf00      	nop
 8001228:	370c      	adds	r7, #12
 800122a:	46bd      	mov	sp, r7
 800122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000e100 	.word	0xe000e100

08001238 <__NVIC_SetPriority>:
{
 8001238:	b480      	push	{r7}
 800123a:	b083      	sub	sp, #12
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001244:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001248:	2b00      	cmp	r3, #0
 800124a:	db0a      	blt.n	8001262 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	b2da      	uxtb	r2, r3
 8001250:	490c      	ldr	r1, [pc, #48]	; (8001284 <__NVIC_SetPriority+0x4c>)
 8001252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001256:	0112      	lsls	r2, r2, #4
 8001258:	b2d2      	uxtb	r2, r2
 800125a:	440b      	add	r3, r1
 800125c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001260:	e00a      	b.n	8001278 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4908      	ldr	r1, [pc, #32]	; (8001288 <__NVIC_SetPriority+0x50>)
 8001268:	79fb      	ldrb	r3, [r7, #7]
 800126a:	f003 030f 	and.w	r3, r3, #15
 800126e:	3b04      	subs	r3, #4
 8001270:	0112      	lsls	r2, r2, #4
 8001272:	b2d2      	uxtb	r2, r2
 8001274:	440b      	add	r3, r1
 8001276:	761a      	strb	r2, [r3, #24]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	e000e100 	.word	0xe000e100
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <NVIC_EncodePriority>:
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	60f8      	str	r0, [r7, #12]
 8001294:	60b9      	str	r1, [r7, #8]
 8001296:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	f1c3 0307 	rsb	r3, r3, #7
 80012a6:	2b04      	cmp	r3, #4
 80012a8:	bf28      	it	cs
 80012aa:	2304      	movcs	r3, #4
 80012ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	3304      	adds	r3, #4
 80012b2:	2b06      	cmp	r3, #6
 80012b4:	d902      	bls.n	80012bc <NVIC_EncodePriority+0x30>
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	3b03      	subs	r3, #3
 80012ba:	e000      	b.n	80012be <NVIC_EncodePriority+0x32>
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012c0:	f04f 32ff 	mov.w	r2, #4294967295
 80012c4:	69bb      	ldr	r3, [r7, #24]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	43da      	mvns	r2, r3
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	401a      	ands	r2, r3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d4:	f04f 31ff 	mov.w	r1, #4294967295
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa01 f303 	lsl.w	r3, r1, r3
 80012de:	43d9      	mvns	r1, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	4313      	orrs	r3, r2
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3724      	adds	r7, #36	; 0x24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ff4c 	bl	8001198 <__NVIC_SetPriorityGrouping>
}
 8001300:	bf00      	nop
 8001302:	3708      	adds	r7, #8
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	4603      	mov	r3, r0
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800131a:	f7ff ff61 	bl	80011e0 <__NVIC_GetPriorityGrouping>
 800131e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	6978      	ldr	r0, [r7, #20]
 8001326:	f7ff ffb1 	bl	800128c <NVIC_EncodePriority>
 800132a:	4602      	mov	r2, r0
 800132c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff ff80 	bl	8001238 <__NVIC_SetPriority>
}
 8001338:	bf00      	nop
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff ff54 	bl	80011fc <__NVIC_EnableIRQ>
}
 8001354:	bf00      	nop
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}

0800135c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800135c:	b480      	push	{r7}
 800135e:	b089      	sub	sp, #36	; 0x24
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001366:	2300      	movs	r3, #0
 8001368:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800136e:	2300      	movs	r3, #0
 8001370:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	e177      	b.n	8001668 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	429a      	cmp	r2, r3
 8001392:	f040 8166 	bne.w	8001662 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b01      	cmp	r3, #1
 800139c:	d00b      	beq.n	80013b6 <HAL_GPIO_Init+0x5a>
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d007      	beq.n	80013b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013aa:	2b11      	cmp	r3, #17
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b12      	cmp	r3, #18
 80013b4:	d130      	bne.n	8001418 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	005b      	lsls	r3, r3, #1
 80013c0:	2203      	movs	r2, #3
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43db      	mvns	r3, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4013      	ands	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	68da      	ldr	r2, [r3, #12]
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4313      	orrs	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013ec:	2201      	movs	r2, #1
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	43db      	mvns	r3, r3
 80013f6:	69ba      	ldr	r2, [r7, #24]
 80013f8:	4013      	ands	r3, r2
 80013fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	091b      	lsrs	r3, r3, #4
 8001402:	f003 0201 	and.w	r2, r3, #1
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	fa02 f303 	lsl.w	r3, r2, r3
 800140c:	69ba      	ldr	r2, [r7, #24]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	fa02 f303 	lsl.w	r3, r2, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4313      	orrs	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2b02      	cmp	r3, #2
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0xfc>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	2b12      	cmp	r3, #18
 8001456:	d123      	bne.n	80014a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	08da      	lsrs	r2, r3, #3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3208      	adds	r2, #8
 8001460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001464:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	220f      	movs	r2, #15
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	4013      	ands	r3, r2
 800147a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	691a      	ldr	r2, [r3, #16]
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	08da      	lsrs	r2, r3, #3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3208      	adds	r2, #8
 800149a:	69b9      	ldr	r1, [r7, #24]
 800149c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	2203      	movs	r2, #3
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	4013      	ands	r3, r2
 80014b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69ba      	ldr	r2, [r7, #24]
 80014d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 80c0 	beq.w	8001662 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_GPIO_Init+0x320>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a64      	ldr	r2, [pc, #400]	; (800167c <HAL_GPIO_Init+0x320>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_GPIO_Init+0x320>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014fe:	4a60      	ldr	r2, [pc, #384]	; (8001680 <HAL_GPIO_Init+0x324>)
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	089b      	lsrs	r3, r3, #2
 8001504:	3302      	adds	r3, #2
 8001506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0303 	and.w	r3, r3, #3
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a57      	ldr	r2, [pc, #348]	; (8001684 <HAL_GPIO_Init+0x328>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d037      	beq.n	800159a <HAL_GPIO_Init+0x23e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a56      	ldr	r2, [pc, #344]	; (8001688 <HAL_GPIO_Init+0x32c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d031      	beq.n	8001596 <HAL_GPIO_Init+0x23a>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a55      	ldr	r2, [pc, #340]	; (800168c <HAL_GPIO_Init+0x330>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d02b      	beq.n	8001592 <HAL_GPIO_Init+0x236>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4a54      	ldr	r2, [pc, #336]	; (8001690 <HAL_GPIO_Init+0x334>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d025      	beq.n	800158e <HAL_GPIO_Init+0x232>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4a53      	ldr	r2, [pc, #332]	; (8001694 <HAL_GPIO_Init+0x338>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d01f      	beq.n	800158a <HAL_GPIO_Init+0x22e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a52      	ldr	r2, [pc, #328]	; (8001698 <HAL_GPIO_Init+0x33c>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d019      	beq.n	8001586 <HAL_GPIO_Init+0x22a>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a51      	ldr	r2, [pc, #324]	; (800169c <HAL_GPIO_Init+0x340>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d013      	beq.n	8001582 <HAL_GPIO_Init+0x226>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_GPIO_Init+0x344>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d00d      	beq.n	800157e <HAL_GPIO_Init+0x222>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a4f      	ldr	r2, [pc, #316]	; (80016a4 <HAL_GPIO_Init+0x348>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d007      	beq.n	800157a <HAL_GPIO_Init+0x21e>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a4e      	ldr	r2, [pc, #312]	; (80016a8 <HAL_GPIO_Init+0x34c>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d101      	bne.n	8001576 <HAL_GPIO_Init+0x21a>
 8001572:	2309      	movs	r3, #9
 8001574:	e012      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001576:	230a      	movs	r3, #10
 8001578:	e010      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157a:	2308      	movs	r3, #8
 800157c:	e00e      	b.n	800159c <HAL_GPIO_Init+0x240>
 800157e:	2307      	movs	r3, #7
 8001580:	e00c      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001582:	2306      	movs	r3, #6
 8001584:	e00a      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001586:	2305      	movs	r3, #5
 8001588:	e008      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158a:	2304      	movs	r3, #4
 800158c:	e006      	b.n	800159c <HAL_GPIO_Init+0x240>
 800158e:	2303      	movs	r3, #3
 8001590:	e004      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001592:	2302      	movs	r3, #2
 8001594:	e002      	b.n	800159c <HAL_GPIO_Init+0x240>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <HAL_GPIO_Init+0x240>
 800159a:	2300      	movs	r3, #0
 800159c:	69fa      	ldr	r2, [r7, #28]
 800159e:	f002 0203 	and.w	r2, r2, #3
 80015a2:	0092      	lsls	r2, r2, #2
 80015a4:	4093      	lsls	r3, r2
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ac:	4934      	ldr	r1, [pc, #208]	; (8001680 <HAL_GPIO_Init+0x324>)
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	089b      	lsrs	r3, r3, #2
 80015b2:	3302      	adds	r3, #2
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ba:	4b3c      	ldr	r3, [pc, #240]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015de:	4a33      	ldr	r2, [pc, #204]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_GPIO_Init+0x350>)
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	43db      	mvns	r3, r3
 80015ee:	69ba      	ldr	r2, [r7, #24]
 80015f0:	4013      	ands	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001608:	4a28      	ldr	r2, [pc, #160]	; (80016ac <HAL_GPIO_Init+0x350>)
 800160a:	69bb      	ldr	r3, [r7, #24]
 800160c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001632:	4a1e      	ldr	r2, [pc, #120]	; (80016ac <HAL_GPIO_Init+0x350>)
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001638:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <HAL_GPIO_Init+0x350>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001654:	69ba      	ldr	r2, [r7, #24]
 8001656:	693b      	ldr	r3, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800165c:	4a13      	ldr	r2, [pc, #76]	; (80016ac <HAL_GPIO_Init+0x350>)
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3301      	adds	r3, #1
 8001666:	61fb      	str	r3, [r7, #28]
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	2b0f      	cmp	r3, #15
 800166c:	f67f ae84 	bls.w	8001378 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001670:	bf00      	nop
 8001672:	3724      	adds	r7, #36	; 0x24
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40023800 	.word	0x40023800
 8001680:	40013800 	.word	0x40013800
 8001684:	40020000 	.word	0x40020000
 8001688:	40020400 	.word	0x40020400
 800168c:	40020800 	.word	0x40020800
 8001690:	40020c00 	.word	0x40020c00
 8001694:	40021000 	.word	0x40021000
 8001698:	40021400 	.word	0x40021400
 800169c:	40021800 	.word	0x40021800
 80016a0:	40021c00 	.word	0x40021c00
 80016a4:	40022000 	.word	0x40022000
 80016a8:	40022400 	.word	0x40022400
 80016ac:	40013c00 	.word	0x40013c00

080016b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	460b      	mov	r3, r1
 80016ba:	807b      	strh	r3, [r7, #2]
 80016bc:	4613      	mov	r3, r2
 80016be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c0:	787b      	ldrb	r3, [r7, #1]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016c6:	887a      	ldrh	r2, [r7, #2]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016cc:	e003      	b.n	80016d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016ce:	887b      	ldrh	r3, [r7, #2]
 80016d0:	041a      	lsls	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	619a      	str	r2, [r3, #24]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	695a      	ldr	r2, [r3, #20]
 80016f2:	887b      	ldrh	r3, [r7, #2]
 80016f4:	401a      	ands	r2, r3
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d104      	bne.n	8001706 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80016fc:	887b      	ldrh	r3, [r7, #2]
 80016fe:	041a      	lsls	r2, r3, #16
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001704:	e002      	b.n	800170c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001706:	887a      	ldrh	r2, [r7, #2]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	619a      	str	r2, [r3, #24]
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e25b      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	2b00      	cmp	r3, #0
 8001734:	d075      	beq.n	8001822 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001736:	4ba3      	ldr	r3, [pc, #652]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f003 030c 	and.w	r3, r3, #12
 800173e:	2b04      	cmp	r3, #4
 8001740:	d00c      	beq.n	800175c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001742:	4ba0      	ldr	r3, [pc, #640]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800174a:	2b08      	cmp	r3, #8
 800174c:	d112      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174e:	4b9d      	ldr	r3, [pc, #628]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001756:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800175a:	d10b      	bne.n	8001774 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800175c:	4b99      	ldr	r3, [pc, #612]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001764:	2b00      	cmp	r3, #0
 8001766:	d05b      	beq.n	8001820 <HAL_RCC_OscConfig+0x108>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d157      	bne.n	8001820 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e236      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800177c:	d106      	bne.n	800178c <HAL_RCC_OscConfig+0x74>
 800177e:	4b91      	ldr	r3, [pc, #580]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a90      	ldr	r2, [pc, #576]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001784:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	e01d      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001794:	d10c      	bne.n	80017b0 <HAL_RCC_OscConfig+0x98>
 8001796:	4b8b      	ldr	r3, [pc, #556]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a8a      	ldr	r2, [pc, #552]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800179c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017a0:	6013      	str	r3, [r2, #0]
 80017a2:	4b88      	ldr	r3, [pc, #544]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a87      	ldr	r2, [pc, #540]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_RCC_OscConfig+0xb0>
 80017b0:	4b84      	ldr	r3, [pc, #528]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a83      	ldr	r2, [pc, #524]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b81      	ldr	r3, [pc, #516]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a80      	ldr	r2, [pc, #512]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d013      	beq.n	80017f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fcd6 	bl	8001180 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fcd2 	bl	8001180 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1fb      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ea:	4b76      	ldr	r3, [pc, #472]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d0f0      	beq.n	80017d8 <HAL_RCC_OscConfig+0xc0>
 80017f6:	e014      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fcc2 	bl	8001180 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001800:	f7ff fcbe 	bl	8001180 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b64      	cmp	r3, #100	; 0x64
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e1e7      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001812:	4b6c      	ldr	r3, [pc, #432]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0xe8>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d063      	beq.n	80018f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182e:	4b65      	ldr	r3, [pc, #404]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b00      	cmp	r3, #0
 8001838:	d00b      	beq.n	8001852 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800183a:	4b62      	ldr	r3, [pc, #392]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001842:	2b08      	cmp	r3, #8
 8001844:	d11c      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001846:	4b5f      	ldr	r3, [pc, #380]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d116      	bne.n	8001880 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001852:	4b5c      	ldr	r3, [pc, #368]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d005      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d001      	beq.n	800186a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e1bb      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	691b      	ldr	r3, [r3, #16]
 8001876:	00db      	lsls	r3, r3, #3
 8001878:	4952      	ldr	r1, [pc, #328]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800187a:	4313      	orrs	r3, r2
 800187c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187e:	e03a      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	2b00      	cmp	r3, #0
 8001886:	d020      	beq.n	80018ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <HAL_RCC_OscConfig+0x2b0>)
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188e:	f7ff fc77 	bl	8001180 <HAL_GetTick>
 8001892:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001894:	e008      	b.n	80018a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001896:	f7ff fc73 	bl	8001180 <HAL_GetTick>
 800189a:	4602      	mov	r2, r0
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	1ad3      	subs	r3, r2, r3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d901      	bls.n	80018a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e19c      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a8:	4b46      	ldr	r3, [pc, #280]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0f0      	beq.n	8001896 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b43      	ldr	r3, [pc, #268]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	4940      	ldr	r1, [pc, #256]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	600b      	str	r3, [r1, #0]
 80018c8:	e015      	b.n	80018f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ca:	4b3f      	ldr	r3, [pc, #252]	; (80019c8 <HAL_RCC_OscConfig+0x2b0>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d0:	f7ff fc56 	bl	8001180 <HAL_GetTick>
 80018d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d6:	e008      	b.n	80018ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d8:	f7ff fc52 	bl	8001180 <HAL_GetTick>
 80018dc:	4602      	mov	r2, r0
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d901      	bls.n	80018ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e17b      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ea:	4b36      	ldr	r3, [pc, #216]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d1f0      	bne.n	80018d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d030      	beq.n	8001964 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	695b      	ldr	r3, [r3, #20]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d016      	beq.n	8001938 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800190a:	4b30      	ldr	r3, [pc, #192]	; (80019cc <HAL_RCC_OscConfig+0x2b4>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001910:	f7ff fc36 	bl	8001180 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001918:	f7ff fc32 	bl	8001180 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e15b      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800192a:	4b26      	ldr	r3, [pc, #152]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800192c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d0f0      	beq.n	8001918 <HAL_RCC_OscConfig+0x200>
 8001936:	e015      	b.n	8001964 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001938:	4b24      	ldr	r3, [pc, #144]	; (80019cc <HAL_RCC_OscConfig+0x2b4>)
 800193a:	2200      	movs	r2, #0
 800193c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193e:	f7ff fc1f 	bl	8001180 <HAL_GetTick>
 8001942:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	e008      	b.n	8001958 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001946:	f7ff fc1b 	bl	8001180 <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d901      	bls.n	8001958 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001954:	2303      	movs	r3, #3
 8001956:	e144      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001958:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1f0      	bne.n	8001946 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	f000 80a0 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d10f      	bne.n	80019a2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_RCC_OscConfig+0x2ac>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	60bb      	str	r3, [r7, #8]
 800199c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800199e:	2301      	movs	r3, #1
 80019a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a2:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d121      	bne.n	80019f2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ae:	4b08      	ldr	r3, [pc, #32]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a07      	ldr	r2, [pc, #28]	; (80019d0 <HAL_RCC_OscConfig+0x2b8>)
 80019b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019ba:	f7ff fbe1 	bl	8001180 <HAL_GetTick>
 80019be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c0:	e011      	b.n	80019e6 <HAL_RCC_OscConfig+0x2ce>
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470000 	.word	0x42470000
 80019cc:	42470e80 	.word	0x42470e80
 80019d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019d4:	f7ff fbd4 	bl	8001180 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e0fd      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e6:	4b81      	ldr	r3, [pc, #516]	; (8001bec <HAL_RCC_OscConfig+0x4d4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d106      	bne.n	8001a08 <HAL_RCC_OscConfig+0x2f0>
 80019fa:	4b7d      	ldr	r3, [pc, #500]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	4a7c      	ldr	r2, [pc, #496]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	6713      	str	r3, [r2, #112]	; 0x70
 8001a06:	e01c      	b.n	8001a42 <HAL_RCC_OscConfig+0x32a>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	2b05      	cmp	r3, #5
 8001a0e:	d10c      	bne.n	8001a2a <HAL_RCC_OscConfig+0x312>
 8001a10:	4b77      	ldr	r3, [pc, #476]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a14:	4a76      	ldr	r2, [pc, #472]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a16:	f043 0304 	orr.w	r3, r3, #4
 8001a1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1c:	4b74      	ldr	r3, [pc, #464]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a20:	4a73      	ldr	r2, [pc, #460]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	6713      	str	r3, [r2, #112]	; 0x70
 8001a28:	e00b      	b.n	8001a42 <HAL_RCC_OscConfig+0x32a>
 8001a2a:	4b71      	ldr	r3, [pc, #452]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a2e:	4a70      	ldr	r2, [pc, #448]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a30:	f023 0301 	bic.w	r3, r3, #1
 8001a34:	6713      	str	r3, [r2, #112]	; 0x70
 8001a36:	4b6e      	ldr	r3, [pc, #440]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a3a:	4a6d      	ldr	r2, [pc, #436]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a3c:	f023 0304 	bic.w	r3, r3, #4
 8001a40:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d015      	beq.n	8001a76 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a4a:	f7ff fb99 	bl	8001180 <HAL_GetTick>
 8001a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a50:	e00a      	b.n	8001a68 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff fb95 	bl	8001180 <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d901      	bls.n	8001a68 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001a64:	2303      	movs	r3, #3
 8001a66:	e0bc      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a68:	4b61      	ldr	r3, [pc, #388]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d0ee      	beq.n	8001a52 <HAL_RCC_OscConfig+0x33a>
 8001a74:	e014      	b.n	8001aa0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a76:	f7ff fb83 	bl	8001180 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	e00a      	b.n	8001a94 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff fb7f 	bl	8001180 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e0a6      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a94:	4b56      	ldr	r3, [pc, #344]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001a96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1ee      	bne.n	8001a7e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001aa0:	7dfb      	ldrb	r3, [r7, #23]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d105      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001aa6:	4b52      	ldr	r3, [pc, #328]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	4a51      	ldr	r2, [pc, #324]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f000 8092 	beq.w	8001be0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001abc:	4b4c      	ldr	r3, [pc, #304]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 030c 	and.w	r3, r3, #12
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d05c      	beq.n	8001b82 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d141      	bne.n	8001b54 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	4b48      	ldr	r3, [pc, #288]	; (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fb53 	bl	8001180 <HAL_GetTick>
 8001ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001adc:	e008      	b.n	8001af0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ade:	f7ff fb4f 	bl	8001180 <HAL_GetTick>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	1ad3      	subs	r3, r2, r3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d901      	bls.n	8001af0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001aec:	2303      	movs	r3, #3
 8001aee:	e078      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001af0:	4b3f      	ldr	r3, [pc, #252]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d1f0      	bne.n	8001ade <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69da      	ldr	r2, [r3, #28]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	431a      	orrs	r2, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	019b      	lsls	r3, r3, #6
 8001b0c:	431a      	orrs	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b12:	085b      	lsrs	r3, r3, #1
 8001b14:	3b01      	subs	r3, #1
 8001b16:	041b      	lsls	r3, r3, #16
 8001b18:	431a      	orrs	r2, r3
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1e:	061b      	lsls	r3, r3, #24
 8001b20:	4933      	ldr	r1, [pc, #204]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b26:	4b33      	ldr	r3, [pc, #204]	; (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b28:	2201      	movs	r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb28 	bl	8001180 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b34:	f7ff fb24 	bl	8001180 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e04d      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b46:	4b2a      	ldr	r3, [pc, #168]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x41c>
 8001b52:	e045      	b.n	8001be0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b54:	4b27      	ldr	r3, [pc, #156]	; (8001bf4 <HAL_RCC_OscConfig+0x4dc>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fb11 	bl	8001180 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b62:	f7ff fb0d 	bl	8001180 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e036      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b74:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d1f0      	bne.n	8001b62 <HAL_RCC_OscConfig+0x44a>
 8001b80:	e02e      	b.n	8001be0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d101      	bne.n	8001b8e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e029      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_RCC_OscConfig+0x4d8>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d115      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bb0:	68fa      	ldr	r2, [r7, #12]
 8001bb2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d10d      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d106      	bne.n	8001bdc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d001      	beq.n	8001be0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e000      	b.n	8001be2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40007000 	.word	0x40007000
 8001bf0:	40023800 	.word	0x40023800
 8001bf4:	42470060 	.word	0x42470060

08001bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e0cc      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c0c:	4b68      	ldr	r3, [pc, #416]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 030f 	and.w	r3, r3, #15
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d90c      	bls.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c1a:	4b65      	ldr	r3, [pc, #404]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c1c:	683a      	ldr	r2, [r7, #0]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c22:	4b63      	ldr	r3, [pc, #396]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	683a      	ldr	r2, [r7, #0]
 8001c2c:	429a      	cmp	r2, r3
 8001c2e:	d001      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	e0b8      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d020      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d005      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c4c:	4b59      	ldr	r3, [pc, #356]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	4a58      	ldr	r2, [pc, #352]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c56:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c64:	4b53      	ldr	r3, [pc, #332]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	4a52      	ldr	r2, [pc, #328]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c70:	4b50      	ldr	r3, [pc, #320]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	494d      	ldr	r1, [pc, #308]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d044      	beq.n	8001d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d107      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d119      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e07f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d003      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d107      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cb6:	4b3f      	ldr	r3, [pc, #252]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e06f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc6:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d101      	bne.n	8001cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e067      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd6:	4b37      	ldr	r3, [pc, #220]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f023 0203 	bic.w	r2, r3, #3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	4934      	ldr	r1, [pc, #208]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7ff fa4a 	bl	8001180 <HAL_GetTick>
 8001cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cee:	e00a      	b.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf0:	f7ff fa46 	bl	8001180 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e04f      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d06:	4b2b      	ldr	r3, [pc, #172]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 020c 	and.w	r2, r3, #12
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d1eb      	bne.n	8001cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d20c      	bcs.n	8001d40 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	b2d2      	uxtb	r2, r2
 8001d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2e:	4b20      	ldr	r3, [pc, #128]	; (8001db0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e032      	b.n	8001da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d008      	beq.n	8001d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d4c:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	4916      	ldr	r1, [pc, #88]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0308 	and.w	r3, r3, #8
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d6a:	4b12      	ldr	r3, [pc, #72]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	490e      	ldr	r1, [pc, #56]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d7e:	f000 f821 	bl	8001dc4 <HAL_RCC_GetSysClockFreq>
 8001d82:	4601      	mov	r1, r0
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 030f 	and.w	r3, r3, #15
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d90:	5cd3      	ldrb	r3, [r2, r3]
 8001d92:	fa21 f303 	lsr.w	r3, r1, r3
 8001d96:	4a09      	ldr	r2, [pc, #36]	; (8001dbc <HAL_RCC_ClockConfig+0x1c4>)
 8001d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d9a:	4b09      	ldr	r3, [pc, #36]	; (8001dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7fe fe7c 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023c00 	.word	0x40023c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	080086fc 	.word	0x080086fc
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	2000000c 	.word	0x2000000c

08001dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dda:	4b63      	ldr	r3, [pc, #396]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ddc:	689b      	ldr	r3, [r3, #8]
 8001dde:	f003 030c 	and.w	r3, r3, #12
 8001de2:	2b04      	cmp	r3, #4
 8001de4:	d007      	beq.n	8001df6 <HAL_RCC_GetSysClockFreq+0x32>
 8001de6:	2b08      	cmp	r3, #8
 8001de8:	d008      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x38>
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f040 80b4 	bne.w	8001f58 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001df0:	4b5e      	ldr	r3, [pc, #376]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001df2:	60bb      	str	r3, [r7, #8]
       break;
 8001df4:	e0b3      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001df6:	4b5e      	ldr	r3, [pc, #376]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001df8:	60bb      	str	r3, [r7, #8]
      break;
 8001dfa:	e0b0      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dfc:	4b5a      	ldr	r3, [pc, #360]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e04:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e06:	4b58      	ldr	r3, [pc, #352]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d04a      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e12:	4b55      	ldr	r3, [pc, #340]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	099b      	lsrs	r3, r3, #6
 8001e18:	f04f 0400 	mov.w	r4, #0
 8001e1c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	ea03 0501 	and.w	r5, r3, r1
 8001e28:	ea04 0602 	and.w	r6, r4, r2
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	4632      	mov	r2, r6
 8001e30:	f04f 0300 	mov.w	r3, #0
 8001e34:	f04f 0400 	mov.w	r4, #0
 8001e38:	0154      	lsls	r4, r2, #5
 8001e3a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001e3e:	014b      	lsls	r3, r1, #5
 8001e40:	4619      	mov	r1, r3
 8001e42:	4622      	mov	r2, r4
 8001e44:	1b49      	subs	r1, r1, r5
 8001e46:	eb62 0206 	sbc.w	r2, r2, r6
 8001e4a:	f04f 0300 	mov.w	r3, #0
 8001e4e:	f04f 0400 	mov.w	r4, #0
 8001e52:	0194      	lsls	r4, r2, #6
 8001e54:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001e58:	018b      	lsls	r3, r1, #6
 8001e5a:	1a5b      	subs	r3, r3, r1
 8001e5c:	eb64 0402 	sbc.w	r4, r4, r2
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	00e2      	lsls	r2, r4, #3
 8001e6a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001e6e:	00d9      	lsls	r1, r3, #3
 8001e70:	460b      	mov	r3, r1
 8001e72:	4614      	mov	r4, r2
 8001e74:	195b      	adds	r3, r3, r5
 8001e76:	eb44 0406 	adc.w	r4, r4, r6
 8001e7a:	f04f 0100 	mov.w	r1, #0
 8001e7e:	f04f 0200 	mov.w	r2, #0
 8001e82:	0262      	lsls	r2, r4, #9
 8001e84:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001e88:	0259      	lsls	r1, r3, #9
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4614      	mov	r4, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4621      	mov	r1, r4
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	f7fe f9f8 	bl	8000290 <__aeabi_uldivmod>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	e049      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ea8:	4b2f      	ldr	r3, [pc, #188]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	099b      	lsrs	r3, r3, #6
 8001eae:	f04f 0400 	mov.w	r4, #0
 8001eb2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	ea03 0501 	and.w	r5, r3, r1
 8001ebe:	ea04 0602 	and.w	r6, r4, r2
 8001ec2:	4629      	mov	r1, r5
 8001ec4:	4632      	mov	r2, r6
 8001ec6:	f04f 0300 	mov.w	r3, #0
 8001eca:	f04f 0400 	mov.w	r4, #0
 8001ece:	0154      	lsls	r4, r2, #5
 8001ed0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ed4:	014b      	lsls	r3, r1, #5
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4622      	mov	r2, r4
 8001eda:	1b49      	subs	r1, r1, r5
 8001edc:	eb62 0206 	sbc.w	r2, r2, r6
 8001ee0:	f04f 0300 	mov.w	r3, #0
 8001ee4:	f04f 0400 	mov.w	r4, #0
 8001ee8:	0194      	lsls	r4, r2, #6
 8001eea:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001eee:	018b      	lsls	r3, r1, #6
 8001ef0:	1a5b      	subs	r3, r3, r1
 8001ef2:	eb64 0402 	sbc.w	r4, r4, r2
 8001ef6:	f04f 0100 	mov.w	r1, #0
 8001efa:	f04f 0200 	mov.w	r2, #0
 8001efe:	00e2      	lsls	r2, r4, #3
 8001f00:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f04:	00d9      	lsls	r1, r3, #3
 8001f06:	460b      	mov	r3, r1
 8001f08:	4614      	mov	r4, r2
 8001f0a:	195b      	adds	r3, r3, r5
 8001f0c:	eb44 0406 	adc.w	r4, r4, r6
 8001f10:	f04f 0100 	mov.w	r1, #0
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	02a2      	lsls	r2, r4, #10
 8001f1a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001f1e:	0299      	lsls	r1, r3, #10
 8001f20:	460b      	mov	r3, r1
 8001f22:	4614      	mov	r4, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	4621      	mov	r1, r4
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f04f 0400 	mov.w	r4, #0
 8001f2e:	461a      	mov	r2, r3
 8001f30:	4623      	mov	r3, r4
 8001f32:	f7fe f9ad 	bl	8000290 <__aeabi_uldivmod>
 8001f36:	4603      	mov	r3, r0
 8001f38:	460c      	mov	r4, r1
 8001f3a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f3c:	4b0a      	ldr	r3, [pc, #40]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001f4c:	68fa      	ldr	r2, [r7, #12]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	60bb      	str	r3, [r7, #8]
      break;
 8001f56:	e002      	b.n	8001f5e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001f5a:	60bb      	str	r3, [r7, #8]
      break;
 8001f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f5e:	68bb      	ldr	r3, [r7, #8]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4601      	mov	r1, r0
 8001f96:	4b05      	ldr	r3, [pc, #20]	; (8001fac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a9b      	lsrs	r3, r3, #10
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4a03      	ldr	r2, [pc, #12]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	0800870c 	.word	0x0800870c

08001fb4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	220f      	movs	r2, #15
 8001fc2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001fc4:	4b12      	ldr	r3, [pc, #72]	; (8002010 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0203 	and.w	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <HAL_RCC_GetClockConfig+0x5c>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_RCC_GetClockConfig+0x5c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	08db      	lsrs	r3, r3, #3
 8001fee:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ff6:	4b07      	ldr	r3, [pc, #28]	; (8002014 <HAL_RCC_GetClockConfig+0x60>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 020f 	and.w	r2, r3, #15
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	601a      	str	r2, [r3, #0]
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e056      	b.n	80020d8 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002036:	b2db      	uxtb	r3, r3
 8002038:	2b00      	cmp	r3, #0
 800203a:	d106      	bne.n	800204a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002044:	6878      	ldr	r0, [r7, #4]
 8002046:	f7fe fcb5 	bl	80009b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2202      	movs	r2, #2
 800204e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002060:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685a      	ldr	r2, [r3, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	431a      	orrs	r2, r3
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	431a      	orrs	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	431a      	orrs	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	69db      	ldr	r3, [r3, #28]
 800208c:	431a      	orrs	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a1b      	ldr	r3, [r3, #32]
 8002092:	ea42 0103 	orr.w	r1, r2, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	699b      	ldr	r3, [r3, #24]
 80020a6:	0c1b      	lsrs	r3, r3, #16
 80020a8:	f003 0104 	and.w	r1, r3, #4
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2201      	movs	r2, #1
 80020d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b088      	sub	sp, #32
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	4613      	mov	r3, r2
 80020ee:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020f0:	2300      	movs	r3, #0
 80020f2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d101      	bne.n	8002102 <HAL_SPI_Transmit+0x22>
 80020fe:	2302      	movs	r3, #2
 8002100:	e11e      	b.n	8002340 <HAL_SPI_Transmit+0x260>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2201      	movs	r2, #1
 8002106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800210a:	f7ff f839 	bl	8001180 <HAL_GetTick>
 800210e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800211a:	b2db      	uxtb	r3, r3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d002      	beq.n	8002126 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002124:	e103      	b.n	800232e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <HAL_SPI_Transmit+0x52>
 800212c:	88fb      	ldrh	r3, [r7, #6]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002136:	e0fa      	b.n	800232e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2203      	movs	r2, #3
 800213c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	68ba      	ldr	r2, [r7, #8]
 800214a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	88fa      	ldrh	r2, [r7, #6]
 8002150:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	88fa      	ldrh	r2, [r7, #6]
 8002156:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2200      	movs	r2, #0
 800215c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2200      	movs	r2, #0
 8002174:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800217e:	d107      	bne.n	8002190 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800218e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	d007      	beq.n	80021ae <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021b6:	d14b      	bne.n	8002250 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d002      	beq.n	80021c6 <HAL_SPI_Transmit+0xe6>
 80021c0:	8afb      	ldrh	r3, [r7, #22]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d13e      	bne.n	8002244 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ca:	881a      	ldrh	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	1c9a      	adds	r2, r3, #2
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021e0:	b29b      	uxth	r3, r3
 80021e2:	3b01      	subs	r3, #1
 80021e4:	b29a      	uxth	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80021ea:	e02b      	b.n	8002244 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d112      	bne.n	8002220 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fe:	881a      	ldrh	r2, [r3, #0]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220a:	1c9a      	adds	r2, r3, #2
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002214:	b29b      	uxth	r3, r3
 8002216:	3b01      	subs	r3, #1
 8002218:	b29a      	uxth	r2, r3
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	86da      	strh	r2, [r3, #54]	; 0x36
 800221e:	e011      	b.n	8002244 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002220:	f7fe ffae 	bl	8001180 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	683a      	ldr	r2, [r7, #0]
 800222c:	429a      	cmp	r2, r3
 800222e:	d803      	bhi.n	8002238 <HAL_SPI_Transmit+0x158>
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002236:	d102      	bne.n	800223e <HAL_SPI_Transmit+0x15e>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002242:	e074      	b.n	800232e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002248:	b29b      	uxth	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d1ce      	bne.n	80021ec <HAL_SPI_Transmit+0x10c>
 800224e:	e04c      	b.n	80022ea <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <HAL_SPI_Transmit+0x17e>
 8002258:	8afb      	ldrh	r3, [r7, #22]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d140      	bne.n	80022e0 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	330c      	adds	r3, #12
 8002268:	7812      	ldrb	r2, [r2, #0]
 800226a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800227a:	b29b      	uxth	r3, r3
 800227c:	3b01      	subs	r3, #1
 800227e:	b29a      	uxth	r2, r3
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002284:	e02c      	b.n	80022e0 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 0302 	and.w	r3, r3, #2
 8002290:	2b02      	cmp	r3, #2
 8002292:	d113      	bne.n	80022bc <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	330c      	adds	r3, #12
 800229e:	7812      	ldrb	r2, [r2, #0]
 80022a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	86da      	strh	r2, [r3, #54]	; 0x36
 80022ba:	e011      	b.n	80022e0 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022bc:	f7fe ff60 	bl	8001180 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	683a      	ldr	r2, [r7, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d803      	bhi.n	80022d4 <HAL_SPI_Transmit+0x1f4>
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d2:	d102      	bne.n	80022da <HAL_SPI_Transmit+0x1fa>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d102      	bne.n	80022e0 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80022de:	e026      	b.n	800232e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1cd      	bne.n	8002286 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	6839      	ldr	r1, [r7, #0]
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f000 fba4 	bl	8002a3c <SPI_EndRxTxTransaction>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10a      	bne.n	800231e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002308:	2300      	movs	r3, #0
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68db      	ldr	r3, [r3, #12]
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	613b      	str	r3, [r7, #16]
 800231c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	77fb      	strb	r3, [r7, #31]
 800232a:	e000      	b.n	800232e <HAL_SPI_Transmit+0x24e>
  }

error:
 800232c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800233e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3720      	adds	r7, #32
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af02      	add	r7, sp, #8
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	603b      	str	r3, [r7, #0]
 8002354:	4613      	mov	r3, r2
 8002356:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002364:	d112      	bne.n	800238c <HAL_SPI_Receive+0x44>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d10e      	bne.n	800238c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2204      	movs	r2, #4
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002376:	88fa      	ldrh	r2, [r7, #6]
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	4613      	mov	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	68b9      	ldr	r1, [r7, #8]
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 f8e9 	bl	800255a <HAL_SPI_TransmitReceive>
 8002388:	4603      	mov	r3, r0
 800238a:	e0e2      	b.n	8002552 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002392:	2b01      	cmp	r3, #1
 8002394:	d101      	bne.n	800239a <HAL_SPI_Receive+0x52>
 8002396:	2302      	movs	r3, #2
 8002398:	e0db      	b.n	8002552 <HAL_SPI_Receive+0x20a>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a2:	f7fe feed 	bl	8001180 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	2b01      	cmp	r3, #1
 80023b2:	d002      	beq.n	80023ba <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80023b4:	2302      	movs	r3, #2
 80023b6:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023b8:	e0c2      	b.n	8002540 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d002      	beq.n	80023c6 <HAL_SPI_Receive+0x7e>
 80023c0:	88fb      	ldrh	r3, [r7, #6]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80023ca:	e0b9      	b.n	8002540 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2204      	movs	r2, #4
 80023d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2200      	movs	r2, #0
 80023d8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	68ba      	ldr	r2, [r7, #8]
 80023de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	88fa      	ldrh	r2, [r7, #6]
 80023e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	88fa      	ldrh	r2, [r7, #6]
 80023ea:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	2200      	movs	r2, #0
 80023f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002412:	d107      	bne.n	8002424 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002422:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242e:	2b40      	cmp	r3, #64	; 0x40
 8002430:	d007      	beq.n	8002442 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d162      	bne.n	8002510 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800244a:	e02e      	b.n	80024aa <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b01      	cmp	r3, #1
 8002458:	d115      	bne.n	8002486 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f103 020c 	add.w	r2, r3, #12
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002466:	7812      	ldrb	r2, [r2, #0]
 8002468:	b2d2      	uxtb	r2, r2
 800246a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002470:	1c5a      	adds	r2, r3, #1
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800247a:	b29b      	uxth	r3, r3
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002484:	e011      	b.n	80024aa <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002486:	f7fe fe7b 	bl	8001180 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	429a      	cmp	r2, r3
 8002494:	d803      	bhi.n	800249e <HAL_SPI_Receive+0x156>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800249c:	d102      	bne.n	80024a4 <HAL_SPI_Receive+0x15c>
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80024a8:	e04a      	b.n	8002540 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1cb      	bne.n	800244c <HAL_SPI_Receive+0x104>
 80024b4:	e031      	b.n	800251a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 0301 	and.w	r3, r3, #1
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d113      	bne.n	80024ec <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68da      	ldr	r2, [r3, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ce:	b292      	uxth	r2, r2
 80024d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d6:	1c9a      	adds	r2, r3, #2
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	3b01      	subs	r3, #1
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024ea:	e011      	b.n	8002510 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80024ec:	f7fe fe48 	bl	8001180 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d803      	bhi.n	8002504 <HAL_SPI_Receive+0x1bc>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002502:	d102      	bne.n	800250a <HAL_SPI_Receive+0x1c2>
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d102      	bne.n	8002510 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800250e:	e017      	b.n	8002540 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002514:	b29b      	uxth	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1cd      	bne.n	80024b6 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	6839      	ldr	r1, [r7, #0]
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f000 fa27 	bl	8002972 <SPI_EndRxTransaction>
 8002524:	4603      	mov	r3, r0
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2220      	movs	r2, #32
 800252e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	75fb      	strb	r3, [r7, #23]
 800253c:	e000      	b.n	8002540 <HAL_SPI_Receive+0x1f8>
  }

error :
 800253e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002550:	7dfb      	ldrb	r3, [r7, #23]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b08c      	sub	sp, #48	; 0x30
 800255e:	af00      	add	r7, sp, #0
 8002560:	60f8      	str	r0, [r7, #12]
 8002562:	60b9      	str	r1, [r7, #8]
 8002564:	607a      	str	r2, [r7, #4]
 8002566:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002568:	2301      	movs	r3, #1
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <HAL_SPI_TransmitReceive+0x26>
 800257c:	2302      	movs	r3, #2
 800257e:	e18a      	b.n	8002896 <HAL_SPI_TransmitReceive+0x33c>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002588:	f7fe fdfa 	bl	8001180 <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002594:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800259e:	887b      	ldrh	r3, [r7, #2]
 80025a0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80025a2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d00f      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x70>
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80025b0:	d107      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d103      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x68>
 80025ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d003      	beq.n	80025ca <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80025c2:	2302      	movs	r3, #2
 80025c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025c8:	e15b      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d005      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x82>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d002      	beq.n	80025dc <HAL_SPI_TransmitReceive+0x82>
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d103      	bne.n	80025e4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80025e2:	e14e      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80025ea:	b2db      	uxtb	r3, r3
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d003      	beq.n	80025f8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2205      	movs	r2, #5
 80025f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2200      	movs	r2, #0
 80025fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	887a      	ldrh	r2, [r7, #2]
 800261a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	887a      	ldrh	r2, [r7, #2]
 8002620:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002638:	2b40      	cmp	r3, #64	; 0x40
 800263a:	d007      	beq.n	800264c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002654:	d178      	bne.n	8002748 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d002      	beq.n	8002664 <HAL_SPI_TransmitReceive+0x10a>
 800265e:	8b7b      	ldrh	r3, [r7, #26]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d166      	bne.n	8002732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	1c9a      	adds	r2, r3, #2
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800267e:	b29b      	uxth	r3, r3
 8002680:	3b01      	subs	r3, #1
 8002682:	b29a      	uxth	r2, r3
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002688:	e053      	b.n	8002732 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b02      	cmp	r3, #2
 8002696:	d11b      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x176>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800269c:	b29b      	uxth	r3, r3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d016      	beq.n	80026d0 <HAL_SPI_TransmitReceive+0x176>
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d113      	bne.n	80026d0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	881a      	ldrh	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b8:	1c9a      	adds	r2, r3, #2
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	3b01      	subs	r3, #1
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d119      	bne.n	8002712 <HAL_SPI_TransmitReceive+0x1b8>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026e2:	b29b      	uxth	r3, r3
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d014      	beq.n	8002712 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f2:	b292      	uxth	r2, r2
 80026f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	1c9a      	adds	r2, r3, #2
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002704:	b29b      	uxth	r3, r3
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800270e:	2301      	movs	r3, #1
 8002710:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002712:	f7fe fd35 	bl	8001180 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800271e:	429a      	cmp	r2, r3
 8002720:	d807      	bhi.n	8002732 <HAL_SPI_TransmitReceive+0x1d8>
 8002722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002728:	d003      	beq.n	8002732 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800272a:	2303      	movs	r3, #3
 800272c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002730:	e0a7      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1a6      	bne.n	800268a <HAL_SPI_TransmitReceive+0x130>
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002740:	b29b      	uxth	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1a1      	bne.n	800268a <HAL_SPI_TransmitReceive+0x130>
 8002746:	e07c      	b.n	8002842 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <HAL_SPI_TransmitReceive+0x1fc>
 8002750:	8b7b      	ldrh	r3, [r7, #26]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d16b      	bne.n	800282e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	330c      	adds	r3, #12
 8002760:	7812      	ldrb	r2, [r2, #0]
 8002762:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29a      	uxth	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800277c:	e057      	b.n	800282e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d11c      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x26c>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002790:	b29b      	uxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d017      	beq.n	80027c6 <HAL_SPI_TransmitReceive+0x26c>
 8002796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002798:	2b01      	cmp	r3, #1
 800279a:	d114      	bne.n	80027c6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	330c      	adds	r3, #12
 80027a6:	7812      	ldrb	r2, [r2, #0]
 80027a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	1c5a      	adds	r2, r3, #1
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	3b01      	subs	r3, #1
 80027bc:	b29a      	uxth	r2, r3
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b01      	cmp	r3, #1
 80027d2:	d119      	bne.n	8002808 <HAL_SPI_TransmitReceive+0x2ae>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027d8:	b29b      	uxth	r3, r3
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d014      	beq.n	8002808 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f0:	1c5a      	adds	r2, r3, #1
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29a      	uxth	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002804:	2301      	movs	r3, #1
 8002806:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002808:	f7fe fcba 	bl	8001180 <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002814:	429a      	cmp	r2, r3
 8002816:	d803      	bhi.n	8002820 <HAL_SPI_TransmitReceive+0x2c6>
 8002818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d102      	bne.n	8002826 <HAL_SPI_TransmitReceive+0x2cc>
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	2b00      	cmp	r3, #0
 8002824:	d103      	bne.n	800282e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800282c:	e029      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002832:	b29b      	uxth	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1a2      	bne.n	800277e <HAL_SPI_TransmitReceive+0x224>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800283c:	b29b      	uxth	r3, r3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d19d      	bne.n	800277e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002842:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002844:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 f8f8 	bl	8002a3c <SPI_EndRxTxTransaction>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d006      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	2220      	movs	r2, #32
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800285e:	e010      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	617b      	str	r3, [r7, #20]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	617b      	str	r3, [r7, #20]
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	e000      	b.n	8002882 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002880:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002892:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002896:	4618      	mov	r0, r3
 8002898:	3730      	adds	r7, #48	; 0x30
 800289a:	46bd      	mov	sp, r7
 800289c:	bd80      	pop	{r7, pc}

0800289e <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800289e:	b580      	push	{r7, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
 80028a4:	60f8      	str	r0, [r7, #12]
 80028a6:	60b9      	str	r1, [r7, #8]
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	4613      	mov	r3, r2
 80028ac:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80028ae:	e04c      	b.n	800294a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b6:	d048      	beq.n	800294a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80028b8:	f7fe fc62 	bl	8001180 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d902      	bls.n	80028ce <SPI_WaitFlagStateUntilTimeout+0x30>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d13d      	bne.n	800294a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	685a      	ldr	r2, [r3, #4]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80028dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80028e6:	d111      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x6e>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80028f0:	d004      	beq.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fa:	d107      	bne.n	800290c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800290a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d10f      	bne.n	8002936 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002924:	601a      	str	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002934:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e00f      	b.n	800296a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	689a      	ldr	r2, [r3, #8]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	4013      	ands	r3, r2
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	429a      	cmp	r2, r3
 8002958:	bf0c      	ite	eq
 800295a:	2301      	moveq	r3, #1
 800295c:	2300      	movne	r3, #0
 800295e:	b2db      	uxtb	r3, r3
 8002960:	461a      	mov	r2, r3
 8002962:	79fb      	ldrb	r3, [r7, #7]
 8002964:	429a      	cmp	r2, r3
 8002966:	d1a3      	bne.n	80028b0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002968:	2300      	movs	r3, #0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002972:	b580      	push	{r7, lr}
 8002974:	b086      	sub	sp, #24
 8002976:	af02      	add	r7, sp, #8
 8002978:	60f8      	str	r0, [r7, #12]
 800297a:	60b9      	str	r1, [r7, #8]
 800297c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002986:	d111      	bne.n	80029ac <SPI_EndRxTransaction+0x3a>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002990:	d004      	beq.n	800299c <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800299a:	d107      	bne.n	80029ac <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029aa:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80029b4:	d12a      	bne.n	8002a0c <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029be:	d012      	beq.n	80029e6 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ff67 	bl	800289e <SPI_WaitFlagStateUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d02d      	beq.n	8002a32 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029da:	f043 0220 	orr.w	r2, r3, #32
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e026      	b.n	8002a34 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff54 	bl	800289e <SPI_WaitFlagStateUntilTimeout>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01a      	beq.n	8002a32 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a00:	f043 0220 	orr.w	r2, r3, #32
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	e013      	b.n	8002a34 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2200      	movs	r2, #0
 8002a14:	2101      	movs	r1, #1
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	f7ff ff41 	bl	800289e <SPI_WaitFlagStateUntilTimeout>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d007      	beq.n	8002a32 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a26:	f043 0220 	orr.w	r2, r3, #32
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e000      	b.n	8002a34 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002a32:	2300      	movs	r3, #0
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b088      	sub	sp, #32
 8002a40:	af02      	add	r7, sp, #8
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <SPI_EndRxTxTransaction+0x7c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <SPI_EndRxTxTransaction+0x80>)
 8002a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a52:	0d5b      	lsrs	r3, r3, #21
 8002a54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002a58:	fb02 f303 	mul.w	r3, r2, r3
 8002a5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a66:	d112      	bne.n	8002a8e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	2180      	movs	r1, #128	; 0x80
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ff13 	bl	800289e <SPI_WaitFlagStateUntilTimeout>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a82:	f043 0220 	orr.w	r2, r3, #32
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e00f      	b.n	8002aae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00a      	beq.n	8002aaa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa4:	2b80      	cmp	r3, #128	; 0x80
 8002aa6:	d0f2      	beq.n	8002a8e <SPI_EndRxTxTransaction+0x52>
 8002aa8:	e000      	b.n	8002aac <SPI_EndRxTxTransaction+0x70>
        break;
 8002aaa:	bf00      	nop
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	20000000 	.word	0x20000000
 8002abc:	165e9f81 	.word	0x165e9f81

08002ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e01d      	b.n	8002b0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d106      	bne.n	8002aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f000 f815 	bl	8002b16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	3304      	adds	r3, #4
 8002afc:	4619      	mov	r1, r3
 8002afe:	4610      	mov	r0, r2
 8002b00:	f000 f968 	bl	8002dd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b083      	sub	sp, #12
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b1e:	bf00      	nop
 8002b20:	370c      	adds	r7, #12
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr

08002b2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	b085      	sub	sp, #20
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	d007      	beq.n	8002b64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f042 0201 	orr.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3714      	adds	r7, #20
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr

08002b72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b082      	sub	sp, #8
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	f003 0302 	and.w	r3, r3, #2
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d122      	bne.n	8002bce <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d11b      	bne.n	8002bce <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0202 	mvn.w	r2, #2
 8002b9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	f003 0303 	and.w	r3, r3, #3
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f8ee 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002bba:	e005      	b.n	8002bc8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8e0 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f8f1 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b04      	cmp	r3, #4
 8002bda:	d122      	bne.n	8002c22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0304 	and.w	r3, r3, #4
 8002be6:	2b04      	cmp	r3, #4
 8002be8:	d11b      	bne.n	8002c22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f06f 0204 	mvn.w	r2, #4
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2202      	movs	r2, #2
 8002bf8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	699b      	ldr	r3, [r3, #24]
 8002c00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f8c4 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002c0e:	e005      	b.n	8002c1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f8b6 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8c7 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	691b      	ldr	r3, [r3, #16]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b08      	cmp	r3, #8
 8002c2e:	d122      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	f003 0308 	and.w	r3, r3, #8
 8002c3a:	2b08      	cmp	r3, #8
 8002c3c:	d11b      	bne.n	8002c76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f06f 0208 	mvn.w	r2, #8
 8002c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	69db      	ldr	r3, [r3, #28]
 8002c54:	f003 0303 	and.w	r3, r3, #3
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f000 f89a 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002c62:	e005      	b.n	8002c70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 f88c 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f000 f89d 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	f003 0310 	and.w	r3, r3, #16
 8002c80:	2b10      	cmp	r3, #16
 8002c82:	d122      	bne.n	8002cca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	f003 0310 	and.w	r3, r3, #16
 8002c8e:	2b10      	cmp	r3, #16
 8002c90:	d11b      	bne.n	8002cca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f06f 0210 	mvn.w	r2, #16
 8002c9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2208      	movs	r2, #8
 8002ca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	69db      	ldr	r3, [r3, #28]
 8002ca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f000 f870 	bl	8002d96 <HAL_TIM_IC_CaptureCallback>
 8002cb6:	e005      	b.n	8002cc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f862 	bl	8002d82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f873 	bl	8002daa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	691b      	ldr	r3, [r3, #16]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d107      	bne.n	8002cf6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f06f 0201 	mvn.w	r2, #1
 8002cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f7fd fe0f 	bl	8000914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d00:	2b80      	cmp	r3, #128	; 0x80
 8002d02:	d10e      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d107      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 f903 	bl	8002f28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d10e      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d107      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 f838 	bl	8002dbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d10e      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0220 	mvn.w	r2, #32
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f8cd 	bl	8002f14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d82:	b480      	push	{r7}
 8002d84:	b083      	sub	sp, #12
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d9e:	bf00      	nop
 8002da0:	370c      	adds	r7, #12
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b083      	sub	sp, #12
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002db2:	bf00      	nop
 8002db4:	370c      	adds	r7, #12
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dc6:	bf00      	nop
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	4a40      	ldr	r2, [pc, #256]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d013      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002df2:	d00f      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	4a3d      	ldr	r2, [pc, #244]	; (8002eec <TIM_Base_SetConfig+0x118>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4a3c      	ldr	r2, [pc, #240]	; (8002ef0 <TIM_Base_SetConfig+0x11c>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d007      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a3b      	ldr	r2, [pc, #236]	; (8002ef4 <TIM_Base_SetConfig+0x120>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d003      	beq.n	8002e14 <TIM_Base_SetConfig+0x40>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a3a      	ldr	r2, [pc, #232]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d108      	bne.n	8002e26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	68fa      	ldr	r2, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a2f      	ldr	r2, [pc, #188]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d02b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e34:	d027      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a2c      	ldr	r2, [pc, #176]	; (8002eec <TIM_Base_SetConfig+0x118>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d023      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a2b      	ldr	r2, [pc, #172]	; (8002ef0 <TIM_Base_SetConfig+0x11c>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d01f      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a2a      	ldr	r2, [pc, #168]	; (8002ef4 <TIM_Base_SetConfig+0x120>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d01b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4a29      	ldr	r2, [pc, #164]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d017      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a28      	ldr	r2, [pc, #160]	; (8002efc <TIM_Base_SetConfig+0x128>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d013      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a27      	ldr	r2, [pc, #156]	; (8002f00 <TIM_Base_SetConfig+0x12c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d00f      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	4a26      	ldr	r2, [pc, #152]	; (8002f04 <TIM_Base_SetConfig+0x130>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d00b      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a25      	ldr	r2, [pc, #148]	; (8002f08 <TIM_Base_SetConfig+0x134>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d007      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a24      	ldr	r2, [pc, #144]	; (8002f0c <TIM_Base_SetConfig+0x138>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d003      	beq.n	8002e86 <TIM_Base_SetConfig+0xb2>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a23      	ldr	r2, [pc, #140]	; (8002f10 <TIM_Base_SetConfig+0x13c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d108      	bne.n	8002e98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68fa      	ldr	r2, [r7, #12]
 8002eaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689a      	ldr	r2, [r3, #8]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a0a      	ldr	r2, [pc, #40]	; (8002ee8 <TIM_Base_SetConfig+0x114>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d003      	beq.n	8002ecc <TIM_Base_SetConfig+0xf8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	4a0c      	ldr	r2, [pc, #48]	; (8002ef8 <TIM_Base_SetConfig+0x124>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d103      	bne.n	8002ed4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	615a      	str	r2, [r3, #20]
}
 8002eda:	bf00      	nop
 8002edc:	3714      	adds	r7, #20
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	40010000 	.word	0x40010000
 8002eec:	40000400 	.word	0x40000400
 8002ef0:	40000800 	.word	0x40000800
 8002ef4:	40000c00 	.word	0x40000c00
 8002ef8:	40010400 	.word	0x40010400
 8002efc:	40014000 	.word	0x40014000
 8002f00:	40014400 	.word	0x40014400
 8002f04:	40014800 	.word	0x40014800
 8002f08:	40001800 	.word	0x40001800
 8002f0c:	40001c00 	.word	0x40001c00
 8002f10:	40002000 	.word	0x40002000

08002f14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	4603      	mov	r3, r0
 8002f44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8002f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f4e:	2b84      	cmp	r3, #132	; 0x84
 8002f50:	d005      	beq.n	8002f5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002f52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	3303      	adds	r3, #3
 8002f5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002f70:	f000 fb70 	bl	8003654 <vTaskStartScheduler>
  
  return osOK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002f7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f7c:	b089      	sub	sp, #36	; 0x24
 8002f7e:	af04      	add	r7, sp, #16
 8002f80:	6078      	str	r0, [r7, #4]
 8002f82:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d020      	beq.n	8002fce <osThreadCreate+0x54>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d01c      	beq.n	8002fce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685c      	ldr	r4, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681d      	ldr	r5, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691e      	ldr	r6, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ffc8 	bl	8002f3c <makeFreeRtosPriority>
 8002fac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695b      	ldr	r3, [r3, #20]
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fb6:	9202      	str	r2, [sp, #8]
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	9100      	str	r1, [sp, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4632      	mov	r2, r6
 8002fc0:	4629      	mov	r1, r5
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f000 f8ed 	bl	80031a2 <xTaskCreateStatic>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e01c      	b.n	8003008 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685c      	ldr	r4, [r3, #4]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002fda:	b29e      	uxth	r6, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff ffaa 	bl	8002f3c <makeFreeRtosPriority>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	f107 030c 	add.w	r3, r7, #12
 8002fee:	9301      	str	r3, [sp, #4]
 8002ff0:	9200      	str	r2, [sp, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	4632      	mov	r2, r6
 8002ff6:	4629      	mov	r1, r5
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	f000 f92c 	bl	8003256 <xTaskCreate>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b01      	cmp	r3, #1
 8003002:	d001      	beq.n	8003008 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003004:	2300      	movs	r3, #0
 8003006:	e000      	b.n	800300a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003008:	68fb      	ldr	r3, [r7, #12]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3714      	adds	r7, #20
 800300e:	46bd      	mov	sp, r7
 8003010:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003012 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b084      	sub	sp, #16
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <osDelay+0x16>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	e000      	b.n	800302a <osDelay+0x18>
 8003028:	2301      	movs	r3, #1
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fade 	bl	80035ec <vTaskDelay>
  
  return osOK;
 8003030:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003032:	4618      	mov	r0, r3
 8003034:	3710      	adds	r7, #16
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}

0800303a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800303a:	b480      	push	{r7}
 800303c:	b083      	sub	sp, #12
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f103 0208 	add.w	r2, r3, #8
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f04f 32ff 	mov.w	r2, #4294967295
 8003052:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f103 0208 	add.w	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f103 0208 	add.w	r2, r3, #8
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800306e:	bf00      	nop
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68fa      	ldr	r2, [r7, #12]
 80030a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	1c5a      	adds	r2, r3, #1
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	601a      	str	r2, [r3, #0]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
 80030e4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d103      	bne.n	80030fc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	e00c      	b.n	8003116 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3308      	adds	r3, #8
 8003100:	60fb      	str	r3, [r7, #12]
 8003102:	e002      	b.n	800310a <vListInsert+0x2e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68ba      	ldr	r2, [r7, #8]
 8003112:	429a      	cmp	r2, r3
 8003114:	d2f6      	bcs.n	8003104 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	683a      	ldr	r2, [r7, #0]
 8003124:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	683a      	ldr	r2, [r7, #0]
 8003130:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	601a      	str	r2, [r3, #0]
}
 8003142:	bf00      	nop
 8003144:	3714      	adds	r7, #20
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr

0800314e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6852      	ldr	r2, [r2, #4]
 800316e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	429a      	cmp	r2, r3
 8003178:	d103      	bne.n	8003182 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	689a      	ldr	r2, [r3, #8]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	1e5a      	subs	r2, r3, #1
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3714      	adds	r7, #20
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr

080031a2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031a2:	b580      	push	{r7, lr}
 80031a4:	b08e      	sub	sp, #56	; 0x38
 80031a6:	af04      	add	r7, sp, #16
 80031a8:	60f8      	str	r0, [r7, #12]
 80031aa:	60b9      	str	r1, [r7, #8]
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80031b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d109      	bne.n	80031ca <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	623b      	str	r3, [r7, #32]
 80031c8:	e7fe      	b.n	80031c8 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80031ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d109      	bne.n	80031e4 <xTaskCreateStatic+0x42>
 80031d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d4:	f383 8811 	msr	BASEPRI, r3
 80031d8:	f3bf 8f6f 	isb	sy
 80031dc:	f3bf 8f4f 	dsb	sy
 80031e0:	61fb      	str	r3, [r7, #28]
 80031e2:	e7fe      	b.n	80031e2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80031e4:	2354      	movs	r3, #84	; 0x54
 80031e6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b54      	cmp	r3, #84	; 0x54
 80031ec:	d009      	beq.n	8003202 <xTaskCreateStatic+0x60>
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	f383 8811 	msr	BASEPRI, r3
 80031f6:	f3bf 8f6f 	isb	sy
 80031fa:	f3bf 8f4f 	dsb	sy
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	e7fe      	b.n	8003200 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003202:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	2b00      	cmp	r3, #0
 8003208:	d01e      	beq.n	8003248 <xTaskCreateStatic+0xa6>
 800320a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003218:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	2202      	movs	r2, #2
 800321e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003222:	2300      	movs	r3, #0
 8003224:	9303      	str	r3, [sp, #12]
 8003226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003228:	9302      	str	r3, [sp, #8]
 800322a:	f107 0314 	add.w	r3, r7, #20
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	68b9      	ldr	r1, [r7, #8]
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f850 	bl	80032e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003242:	f000 f8db 	bl	80033fc <prvAddNewTaskToReadyList>
 8003246:	e001      	b.n	800324c <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800324c:	697b      	ldr	r3, [r7, #20]
	}
 800324e:	4618      	mov	r0, r3
 8003250:	3728      	adds	r7, #40	; 0x28
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003256:	b580      	push	{r7, lr}
 8003258:	b08c      	sub	sp, #48	; 0x30
 800325a:	af04      	add	r7, sp, #16
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	603b      	str	r3, [r7, #0]
 8003262:	4613      	mov	r3, r2
 8003264:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	4618      	mov	r0, r3
 800326c:	f000 ff6a 	bl	8004144 <pvPortMalloc>
 8003270:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d00e      	beq.n	8003296 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003278:	2054      	movs	r0, #84	; 0x54
 800327a:	f000 ff63 	bl	8004144 <pvPortMalloc>
 800327e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d003      	beq.n	800328e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	631a      	str	r2, [r3, #48]	; 0x30
 800328c:	e005      	b.n	800329a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800328e:	6978      	ldr	r0, [r7, #20]
 8003290:	f001 f81a 	bl	80042c8 <vPortFree>
 8003294:	e001      	b.n	800329a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003296:	2300      	movs	r3, #0
 8003298:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d017      	beq.n	80032d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80032a8:	88fa      	ldrh	r2, [r7, #6]
 80032aa:	2300      	movs	r3, #0
 80032ac:	9303      	str	r3, [sp, #12]
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	9302      	str	r3, [sp, #8]
 80032b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b4:	9301      	str	r3, [sp, #4]
 80032b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f80e 	bl	80032e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032c4:	69f8      	ldr	r0, [r7, #28]
 80032c6:	f000 f899 	bl	80033fc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032ca:	2301      	movs	r3, #1
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e002      	b.n	80032d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80032d0:	f04f 33ff 	mov.w	r3, #4294967295
 80032d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80032d6:	69bb      	ldr	r3, [r7, #24]
	}
 80032d8:	4618      	mov	r0, r3
 80032da:	3720      	adds	r7, #32
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b088      	sub	sp, #32
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
 80032ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80032ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	461a      	mov	r2, r3
 80032f8:	21a5      	movs	r1, #165	; 0xa5
 80032fa:	f004 f9db 	bl	80076b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80032fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003300:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003308:	3b01      	subs	r3, #1
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	4413      	add	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f023 0307 	bic.w	r3, r3, #7
 8003316:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <prvInitialiseNewTask+0x56>
 8003322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003326:	f383 8811 	msr	BASEPRI, r3
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	e7fe      	b.n	8003334 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01f      	beq.n	800337c <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800333c:	2300      	movs	r3, #0
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	e012      	b.n	8003368 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	4413      	add	r3, r2
 8003348:	7819      	ldrb	r1, [r3, #0]
 800334a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	4413      	add	r3, r2
 8003350:	3334      	adds	r3, #52	; 0x34
 8003352:	460a      	mov	r2, r1
 8003354:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003356:	68ba      	ldr	r2, [r7, #8]
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	781b      	ldrb	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d006      	beq.n	8003370 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3301      	adds	r3, #1
 8003366:	61fb      	str	r3, [r7, #28]
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	2b0f      	cmp	r3, #15
 800336c:	d9e9      	bls.n	8003342 <prvInitialiseNewTask+0x62>
 800336e:	e000      	b.n	8003372 <prvInitialiseNewTask+0x92>
			{
				break;
 8003370:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003374:	2200      	movs	r2, #0
 8003376:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800337a:	e003      	b.n	8003384 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800337c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800337e:	2200      	movs	r2, #0
 8003380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003386:	2b06      	cmp	r3, #6
 8003388:	d901      	bls.n	800338e <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800338a:	2306      	movs	r3, #6
 800338c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003390:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003392:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003398:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800339a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800339c:	2200      	movs	r2, #0
 800339e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a2:	3304      	adds	r3, #4
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff fe68 	bl	800307a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80033aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ac:	3318      	adds	r3, #24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f7ff fe63 	bl	800307a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80033b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033b8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	f1c3 0207 	rsb	r2, r3, #7
 80033c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80033c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	2200      	movs	r2, #0
 80033ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	68f9      	ldr	r1, [r7, #12]
 80033dc:	69b8      	ldr	r0, [r7, #24]
 80033de:	f000 fcb1 	bl	8003d44 <pxPortInitialiseStack>
 80033e2:	4602      	mov	r2, r0
 80033e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80033e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d002      	beq.n	80033f4 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80033ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033f4:	bf00      	nop
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003404:	f000 fdc2 	bl	8003f8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003408:	4b2a      	ldr	r3, [pc, #168]	; (80034b4 <prvAddNewTaskToReadyList+0xb8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	3301      	adds	r3, #1
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <prvAddNewTaskToReadyList+0xb8>)
 8003410:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003412:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <prvAddNewTaskToReadyList+0xbc>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800341a:	4a27      	ldr	r2, [pc, #156]	; (80034b8 <prvAddNewTaskToReadyList+0xbc>)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003420:	4b24      	ldr	r3, [pc, #144]	; (80034b4 <prvAddNewTaskToReadyList+0xb8>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b01      	cmp	r3, #1
 8003426:	d110      	bne.n	800344a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003428:	f000 fb6c 	bl	8003b04 <prvInitialiseTaskLists>
 800342c:	e00d      	b.n	800344a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800342e:	4b23      	ldr	r3, [pc, #140]	; (80034bc <prvAddNewTaskToReadyList+0xc0>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <prvAddNewTaskToReadyList+0xbc>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003440:	429a      	cmp	r2, r3
 8003442:	d802      	bhi.n	800344a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003444:	4a1c      	ldr	r2, [pc, #112]	; (80034b8 <prvAddNewTaskToReadyList+0xbc>)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <prvAddNewTaskToReadyList+0xc4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <prvAddNewTaskToReadyList+0xc4>)
 8003452:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003458:	2201      	movs	r2, #1
 800345a:	409a      	lsls	r2, r3
 800345c:	4b19      	ldr	r3, [pc, #100]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4313      	orrs	r3, r2
 8003462:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <prvAddNewTaskToReadyList+0xc8>)
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800346a:	4613      	mov	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	4413      	add	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4a15      	ldr	r2, [pc, #84]	; (80034c8 <prvAddNewTaskToReadyList+0xcc>)
 8003474:	441a      	add	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	4619      	mov	r1, r3
 800347c:	4610      	mov	r0, r2
 800347e:	f7ff fe09 	bl	8003094 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003482:	f000 fdb1 	bl	8003fe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003486:	4b0d      	ldr	r3, [pc, #52]	; (80034bc <prvAddNewTaskToReadyList+0xc0>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <prvAddNewTaskToReadyList+0xbc>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800349c:	4b0b      	ldr	r3, [pc, #44]	; (80034cc <prvAddNewTaskToReadyList+0xd0>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80034ac:	bf00      	nop
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000640 	.word	0x20000640
 80034b8:	20000540 	.word	0x20000540
 80034bc:	2000064c 	.word	0x2000064c
 80034c0:	2000065c 	.word	0x2000065c
 80034c4:	20000648 	.word	0x20000648
 80034c8:	20000544 	.word	0x20000544
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80034d8:	f000 fd58 	bl	8003f8c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d102      	bne.n	80034e8 <vTaskDelete+0x18>
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <vTaskDelete+0xf4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	e000      	b.n	80034ea <vTaskDelete+0x1a>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3304      	adds	r3, #4
 80034f0:	4618      	mov	r0, r3
 80034f2:	f7ff fe2c 	bl	800314e <uxListRemove>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d115      	bne.n	8003528 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	4931      	ldr	r1, [pc, #196]	; (80035c8 <vTaskDelete+0xf8>)
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d10a      	bne.n	8003528 <vTaskDelete+0x58>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	2201      	movs	r2, #1
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43da      	mvns	r2, r3
 800351e:	4b2b      	ldr	r3, [pc, #172]	; (80035cc <vTaskDelete+0xfc>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4013      	ands	r3, r2
 8003524:	4a29      	ldr	r2, [pc, #164]	; (80035cc <vTaskDelete+0xfc>)
 8003526:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	2b00      	cmp	r3, #0
 800352e:	d004      	beq.n	800353a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	3318      	adds	r3, #24
 8003534:	4618      	mov	r0, r3
 8003536:	f7ff fe0a 	bl	800314e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800353a:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <vTaskDelete+0x100>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	4a23      	ldr	r2, [pc, #140]	; (80035d0 <vTaskDelete+0x100>)
 8003542:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003544:	4b1f      	ldr	r3, [pc, #124]	; (80035c4 <vTaskDelete+0xf4>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10b      	bne.n	8003566 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	481f      	ldr	r0, [pc, #124]	; (80035d4 <vTaskDelete+0x104>)
 8003556:	f7ff fd9d 	bl	8003094 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <vTaskDelete+0x108>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	3301      	adds	r3, #1
 8003560:	4a1d      	ldr	r2, [pc, #116]	; (80035d8 <vTaskDelete+0x108>)
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	e009      	b.n	800357a <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <vTaskDelete+0x10c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3b01      	subs	r3, #1
 800356c:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <vTaskDelete+0x10c>)
 800356e:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f000 fb33 	bl	8003bdc <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003576:	f000 fb5f 	bl	8003c38 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800357a:	f000 fd35 	bl	8003fe8 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800357e:	4b18      	ldr	r3, [pc, #96]	; (80035e0 <vTaskDelete+0x110>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d01a      	beq.n	80035bc <vTaskDelete+0xec>
		{
			if( pxTCB == pxCurrentTCB )
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <vTaskDelete+0xf4>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	429a      	cmp	r2, r3
 800358e:	d115      	bne.n	80035bc <vTaskDelete+0xec>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8003590:	4b14      	ldr	r3, [pc, #80]	; (80035e4 <vTaskDelete+0x114>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d009      	beq.n	80035ac <vTaskDelete+0xdc>
 8003598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	e7fe      	b.n	80035aa <vTaskDelete+0xda>
				portYIELD_WITHIN_API();
 80035ac:	4b0e      	ldr	r3, [pc, #56]	; (80035e8 <vTaskDelete+0x118>)
 80035ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b2:	601a      	str	r2, [r3, #0]
 80035b4:	f3bf 8f4f 	dsb	sy
 80035b8:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035bc:	bf00      	nop
 80035be:	3710      	adds	r7, #16
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000540 	.word	0x20000540
 80035c8:	20000544 	.word	0x20000544
 80035cc:	20000648 	.word	0x20000648
 80035d0:	2000065c 	.word	0x2000065c
 80035d4:	20000614 	.word	0x20000614
 80035d8:	20000628 	.word	0x20000628
 80035dc:	20000640 	.word	0x20000640
 80035e0:	2000064c 	.word	0x2000064c
 80035e4:	20000668 	.word	0x20000668
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035f4:	2300      	movs	r3, #0
 80035f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d016      	beq.n	800362c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80035fe:	4b13      	ldr	r3, [pc, #76]	; (800364c <vTaskDelay+0x60>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <vTaskDelay+0x2e>
 8003606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360a:	f383 8811 	msr	BASEPRI, r3
 800360e:	f3bf 8f6f 	isb	sy
 8003612:	f3bf 8f4f 	dsb	sy
 8003616:	60bb      	str	r3, [r7, #8]
 8003618:	e7fe      	b.n	8003618 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800361a:	f000 f879 	bl	8003710 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800361e:	2100      	movs	r1, #0
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fb29 	bl	8003c78 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003626:	f000 f881 	bl	800372c <xTaskResumeAll>
 800362a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d107      	bne.n	8003642 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003632:	4b07      	ldr	r3, [pc, #28]	; (8003650 <vTaskDelay+0x64>)
 8003634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	f3bf 8f4f 	dsb	sy
 800363e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003642:	bf00      	nop
 8003644:	3710      	adds	r7, #16
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}
 800364a:	bf00      	nop
 800364c:	20000668 	.word	0x20000668
 8003650:	e000ed04 	.word	0xe000ed04

08003654 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800365e:	2300      	movs	r3, #0
 8003660:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003662:	463a      	mov	r2, r7
 8003664:	1d39      	adds	r1, r7, #4
 8003666:	f107 0308 	add.w	r3, r7, #8
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ffa0 	bl	80005b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003670:	6839      	ldr	r1, [r7, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	9202      	str	r2, [sp, #8]
 8003678:	9301      	str	r3, [sp, #4]
 800367a:	2300      	movs	r3, #0
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	2300      	movs	r3, #0
 8003680:	460a      	mov	r2, r1
 8003682:	491d      	ldr	r1, [pc, #116]	; (80036f8 <vTaskStartScheduler+0xa4>)
 8003684:	481d      	ldr	r0, [pc, #116]	; (80036fc <vTaskStartScheduler+0xa8>)
 8003686:	f7ff fd8c 	bl	80031a2 <xTaskCreateStatic>
 800368a:	4602      	mov	r2, r0
 800368c:	4b1c      	ldr	r3, [pc, #112]	; (8003700 <vTaskStartScheduler+0xac>)
 800368e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003690:	4b1b      	ldr	r3, [pc, #108]	; (8003700 <vTaskStartScheduler+0xac>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003698:	2301      	movs	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	e001      	b.n	80036a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800369e:	2300      	movs	r3, #0
 80036a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d115      	bne.n	80036d4 <vTaskStartScheduler+0x80>
 80036a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ac:	f383 8811 	msr	BASEPRI, r3
 80036b0:	f3bf 8f6f 	isb	sy
 80036b4:	f3bf 8f4f 	dsb	sy
 80036b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036ba:	4b12      	ldr	r3, [pc, #72]	; (8003704 <vTaskStartScheduler+0xb0>)
 80036bc:	f04f 32ff 	mov.w	r2, #4294967295
 80036c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036c2:	4b11      	ldr	r3, [pc, #68]	; (8003708 <vTaskStartScheduler+0xb4>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80036c8:	4b10      	ldr	r3, [pc, #64]	; (800370c <vTaskStartScheduler+0xb8>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80036ce:	f000 fbbf 	bl	8003e50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80036d2:	e00d      	b.n	80036f0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036da:	d109      	bne.n	80036f0 <vTaskStartScheduler+0x9c>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e7fe      	b.n	80036ee <vTaskStartScheduler+0x9a>
}
 80036f0:	bf00      	nop
 80036f2:	3718      	adds	r7, #24
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	080086d8 	.word	0x080086d8
 80036fc:	08003ad5 	.word	0x08003ad5
 8003700:	20000664 	.word	0x20000664
 8003704:	20000660 	.word	0x20000660
 8003708:	2000064c 	.word	0x2000064c
 800370c:	20000644 	.word	0x20000644

08003710 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003710:	b480      	push	{r7}
 8003712:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <vTaskSuspendAll+0x18>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	4a03      	ldr	r2, [pc, #12]	; (8003728 <vTaskSuspendAll+0x18>)
 800371c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	20000668 	.word	0x20000668

0800372c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800373a:	4b41      	ldr	r3, [pc, #260]	; (8003840 <xTaskResumeAll+0x114>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d109      	bne.n	8003756 <xTaskResumeAll+0x2a>
 8003742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003746:	f383 8811 	msr	BASEPRI, r3
 800374a:	f3bf 8f6f 	isb	sy
 800374e:	f3bf 8f4f 	dsb	sy
 8003752:	603b      	str	r3, [r7, #0]
 8003754:	e7fe      	b.n	8003754 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003756:	f000 fc19 	bl	8003f8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800375a:	4b39      	ldr	r3, [pc, #228]	; (8003840 <xTaskResumeAll+0x114>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	4a37      	ldr	r2, [pc, #220]	; (8003840 <xTaskResumeAll+0x114>)
 8003762:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003764:	4b36      	ldr	r3, [pc, #216]	; (8003840 <xTaskResumeAll+0x114>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d161      	bne.n	8003830 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800376c:	4b35      	ldr	r3, [pc, #212]	; (8003844 <xTaskResumeAll+0x118>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d05d      	beq.n	8003830 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003774:	e02e      	b.n	80037d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003776:	4b34      	ldr	r3, [pc, #208]	; (8003848 <xTaskResumeAll+0x11c>)
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	3318      	adds	r3, #24
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fce3 	bl	800314e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	3304      	adds	r3, #4
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fcde 	bl	800314e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003796:	2201      	movs	r2, #1
 8003798:	409a      	lsls	r2, r3
 800379a:	4b2c      	ldr	r3, [pc, #176]	; (800384c <xTaskResumeAll+0x120>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4313      	orrs	r3, r2
 80037a0:	4a2a      	ldr	r2, [pc, #168]	; (800384c <xTaskResumeAll+0x120>)
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4a27      	ldr	r2, [pc, #156]	; (8003850 <xTaskResumeAll+0x124>)
 80037b2:	441a      	add	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3304      	adds	r3, #4
 80037b8:	4619      	mov	r1, r3
 80037ba:	4610      	mov	r0, r2
 80037bc:	f7ff fc6a 	bl	8003094 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037c4:	4b23      	ldr	r3, [pc, #140]	; (8003854 <xTaskResumeAll+0x128>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d302      	bcc.n	80037d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80037ce:	4b22      	ldr	r3, [pc, #136]	; (8003858 <xTaskResumeAll+0x12c>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037d4:	4b1c      	ldr	r3, [pc, #112]	; (8003848 <xTaskResumeAll+0x11c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1cc      	bne.n	8003776 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037e2:	f000 fa29 	bl	8003c38 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <xTaskResumeAll+0x130>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d010      	beq.n	8003814 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80037f2:	f000 f837 	bl	8003864 <xTaskIncrementTick>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d002      	beq.n	8003802 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80037fc:	4b16      	ldr	r3, [pc, #88]	; (8003858 <xTaskResumeAll+0x12c>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3b01      	subs	r3, #1
 8003806:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f1      	bne.n	80037f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800380e:	4b13      	ldr	r3, [pc, #76]	; (800385c <xTaskResumeAll+0x130>)
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003814:	4b10      	ldr	r3, [pc, #64]	; (8003858 <xTaskResumeAll+0x12c>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d009      	beq.n	8003830 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800381c:	2301      	movs	r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003820:	4b0f      	ldr	r3, [pc, #60]	; (8003860 <xTaskResumeAll+0x134>)
 8003822:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003826:	601a      	str	r2, [r3, #0]
 8003828:	f3bf 8f4f 	dsb	sy
 800382c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003830:	f000 fbda 	bl	8003fe8 <vPortExitCritical>

	return xAlreadyYielded;
 8003834:	68bb      	ldr	r3, [r7, #8]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	20000668 	.word	0x20000668
 8003844:	20000640 	.word	0x20000640
 8003848:	20000600 	.word	0x20000600
 800384c:	20000648 	.word	0x20000648
 8003850:	20000544 	.word	0x20000544
 8003854:	20000540 	.word	0x20000540
 8003858:	20000654 	.word	0x20000654
 800385c:	20000650 	.word	0x20000650
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b086      	sub	sp, #24
 8003868:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800386e:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <xTaskIncrementTick+0x144>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2b00      	cmp	r3, #0
 8003874:	f040 8087 	bne.w	8003986 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003878:	4b4c      	ldr	r3, [pc, #304]	; (80039ac <xTaskIncrementTick+0x148>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003880:	4a4a      	ldr	r2, [pc, #296]	; (80039ac <xTaskIncrementTick+0x148>)
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d11f      	bne.n	80038cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800388c:	4b48      	ldr	r3, [pc, #288]	; (80039b0 <xTaskIncrementTick+0x14c>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <xTaskIncrementTick+0x46>
 8003896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389a:	f383 8811 	msr	BASEPRI, r3
 800389e:	f3bf 8f6f 	isb	sy
 80038a2:	f3bf 8f4f 	dsb	sy
 80038a6:	603b      	str	r3, [r7, #0]
 80038a8:	e7fe      	b.n	80038a8 <xTaskIncrementTick+0x44>
 80038aa:	4b41      	ldr	r3, [pc, #260]	; (80039b0 <xTaskIncrementTick+0x14c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	4b40      	ldr	r3, [pc, #256]	; (80039b4 <xTaskIncrementTick+0x150>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a3e      	ldr	r2, [pc, #248]	; (80039b0 <xTaskIncrementTick+0x14c>)
 80038b6:	6013      	str	r3, [r2, #0]
 80038b8:	4a3e      	ldr	r2, [pc, #248]	; (80039b4 <xTaskIncrementTick+0x150>)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b3e      	ldr	r3, [pc, #248]	; (80039b8 <xTaskIncrementTick+0x154>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3301      	adds	r3, #1
 80038c4:	4a3c      	ldr	r2, [pc, #240]	; (80039b8 <xTaskIncrementTick+0x154>)
 80038c6:	6013      	str	r3, [r2, #0]
 80038c8:	f000 f9b6 	bl	8003c38 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80038cc:	4b3b      	ldr	r3, [pc, #236]	; (80039bc <xTaskIncrementTick+0x158>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d348      	bcc.n	8003968 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80038d6:	4b36      	ldr	r3, [pc, #216]	; (80039b0 <xTaskIncrementTick+0x14c>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d104      	bne.n	80038ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038e0:	4b36      	ldr	r3, [pc, #216]	; (80039bc <xTaskIncrementTick+0x158>)
 80038e2:	f04f 32ff 	mov.w	r2, #4294967295
 80038e6:	601a      	str	r2, [r3, #0]
					break;
 80038e8:	e03e      	b.n	8003968 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038ea:	4b31      	ldr	r3, [pc, #196]	; (80039b0 <xTaskIncrementTick+0x14c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d203      	bcs.n	800390a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003902:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <xTaskIncrementTick+0x158>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003908:	e02e      	b.n	8003968 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	3304      	adds	r3, #4
 800390e:	4618      	mov	r0, r3
 8003910:	f7ff fc1d 	bl	800314e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	3318      	adds	r3, #24
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fc14 	bl	800314e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392a:	2201      	movs	r2, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <xTaskIncrementTick+0x15c>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4313      	orrs	r3, r2
 8003934:	4a22      	ldr	r2, [pc, #136]	; (80039c0 <xTaskIncrementTick+0x15c>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a1f      	ldr	r2, [pc, #124]	; (80039c4 <xTaskIncrementTick+0x160>)
 8003946:	441a      	add	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7ff fba0 	bl	8003094 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003958:	4b1b      	ldr	r3, [pc, #108]	; (80039c8 <xTaskIncrementTick+0x164>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395e:	429a      	cmp	r2, r3
 8003960:	d3b9      	bcc.n	80038d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003962:	2301      	movs	r3, #1
 8003964:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003966:	e7b6      	b.n	80038d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003968:	4b17      	ldr	r3, [pc, #92]	; (80039c8 <xTaskIncrementTick+0x164>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800396e:	4915      	ldr	r1, [pc, #84]	; (80039c4 <xTaskIncrementTick+0x160>)
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d907      	bls.n	8003990 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003980:	2301      	movs	r3, #1
 8003982:	617b      	str	r3, [r7, #20]
 8003984:	e004      	b.n	8003990 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003986:	4b11      	ldr	r3, [pc, #68]	; (80039cc <xTaskIncrementTick+0x168>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	3301      	adds	r3, #1
 800398c:	4a0f      	ldr	r2, [pc, #60]	; (80039cc <xTaskIncrementTick+0x168>)
 800398e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003990:	4b0f      	ldr	r3, [pc, #60]	; (80039d0 <xTaskIncrementTick+0x16c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003998:	2301      	movs	r3, #1
 800399a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800399c:	697b      	ldr	r3, [r7, #20]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	20000668 	.word	0x20000668
 80039ac:	20000644 	.word	0x20000644
 80039b0:	200005f8 	.word	0x200005f8
 80039b4:	200005fc 	.word	0x200005fc
 80039b8:	20000658 	.word	0x20000658
 80039bc:	20000660 	.word	0x20000660
 80039c0:	20000648 	.word	0x20000648
 80039c4:	20000544 	.word	0x20000544
 80039c8:	20000540 	.word	0x20000540
 80039cc:	20000650 	.word	0x20000650
 80039d0:	20000654 	.word	0x20000654

080039d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039da:	4b39      	ldr	r3, [pc, #228]	; (8003ac0 <vTaskSwitchContext+0xec>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039e2:	4b38      	ldr	r3, [pc, #224]	; (8003ac4 <vTaskSwitchContext+0xf0>)
 80039e4:	2201      	movs	r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039e8:	e065      	b.n	8003ab6 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <vTaskSwitchContext+0xf0>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80039f0:	4b35      	ldr	r3, [pc, #212]	; (8003ac8 <vTaskSwitchContext+0xf4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80039fc:	61bb      	str	r3, [r7, #24]
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d111      	bne.n	8003a2c <vTaskSwitchContext+0x58>
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d10b      	bne.n	8003a2c <vTaskSwitchContext+0x58>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3308      	adds	r3, #8
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d105      	bne.n	8003a2c <vTaskSwitchContext+0x58>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	330c      	adds	r3, #12
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d008      	beq.n	8003a3e <vTaskSwitchContext+0x6a>
 8003a2c:	4b26      	ldr	r3, [pc, #152]	; (8003ac8 <vTaskSwitchContext+0xf4>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	4b25      	ldr	r3, [pc, #148]	; (8003ac8 <vTaskSwitchContext+0xf4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3334      	adds	r3, #52	; 0x34
 8003a36:	4619      	mov	r1, r3
 8003a38:	4610      	mov	r0, r2
 8003a3a:	f7fc fda9 	bl	8000590 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <vTaskSwitchContext+0xf8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	fab3 f383 	clz	r3, r3
 8003a4a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003a4c:	7afb      	ldrb	r3, [r7, #11]
 8003a4e:	f1c3 031f 	rsb	r3, r3, #31
 8003a52:	617b      	str	r3, [r7, #20]
 8003a54:	491e      	ldr	r1, [pc, #120]	; (8003ad0 <vTaskSwitchContext+0xfc>)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <vTaskSwitchContext+0xa8>
	__asm volatile
 8003a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a6c:	f383 8811 	msr	BASEPRI, r3
 8003a70:	f3bf 8f6f 	isb	sy
 8003a74:	f3bf 8f4f 	dsb	sy
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	e7fe      	b.n	8003a7a <vTaskSwitchContext+0xa6>
 8003a7c:	697a      	ldr	r2, [r7, #20]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	4413      	add	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4a12      	ldr	r2, [pc, #72]	; (8003ad0 <vTaskSwitchContext+0xfc>)
 8003a88:	4413      	add	r3, r2
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	605a      	str	r2, [r3, #4]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3308      	adds	r3, #8
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d104      	bne.n	8003aac <vTaskSwitchContext+0xd8>
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	68db      	ldr	r3, [r3, #12]
 8003ab2:	4a05      	ldr	r2, [pc, #20]	; (8003ac8 <vTaskSwitchContext+0xf4>)
 8003ab4:	6013      	str	r3, [r2, #0]
}
 8003ab6:	bf00      	nop
 8003ab8:	3720      	adds	r7, #32
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20000668 	.word	0x20000668
 8003ac4:	20000654 	.word	0x20000654
 8003ac8:	20000540 	.word	0x20000540
 8003acc:	20000648 	.word	0x20000648
 8003ad0:	20000544 	.word	0x20000544

08003ad4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003adc:	f000 f852 	bl	8003b84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <prvIdleTask+0x28>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d9f9      	bls.n	8003adc <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <prvIdleTask+0x2c>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003af8:	e7f0      	b.n	8003adc <prvIdleTask+0x8>
 8003afa:	bf00      	nop
 8003afc:	20000544 	.word	0x20000544
 8003b00:	e000ed04 	.word	0xe000ed04

08003b04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	607b      	str	r3, [r7, #4]
 8003b0e:	e00c      	b.n	8003b2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	4413      	add	r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	4a12      	ldr	r2, [pc, #72]	; (8003b64 <prvInitialiseTaskLists+0x60>)
 8003b1c:	4413      	add	r3, r2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fa8b 	bl	800303a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	3301      	adds	r3, #1
 8003b28:	607b      	str	r3, [r7, #4]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b06      	cmp	r3, #6
 8003b2e:	d9ef      	bls.n	8003b10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b30:	480d      	ldr	r0, [pc, #52]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b32:	f7ff fa82 	bl	800303a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b36:	480d      	ldr	r0, [pc, #52]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b38:	f7ff fa7f 	bl	800303a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b3c:	480c      	ldr	r0, [pc, #48]	; (8003b70 <prvInitialiseTaskLists+0x6c>)
 8003b3e:	f7ff fa7c 	bl	800303a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b42:	480c      	ldr	r0, [pc, #48]	; (8003b74 <prvInitialiseTaskLists+0x70>)
 8003b44:	f7ff fa79 	bl	800303a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b48:	480b      	ldr	r0, [pc, #44]	; (8003b78 <prvInitialiseTaskLists+0x74>)
 8003b4a:	f7ff fa76 	bl	800303a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <prvInitialiseTaskLists+0x78>)
 8003b50:	4a05      	ldr	r2, [pc, #20]	; (8003b68 <prvInitialiseTaskLists+0x64>)
 8003b52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b54:	4b0a      	ldr	r3, [pc, #40]	; (8003b80 <prvInitialiseTaskLists+0x7c>)
 8003b56:	4a05      	ldr	r2, [pc, #20]	; (8003b6c <prvInitialiseTaskLists+0x68>)
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20000544 	.word	0x20000544
 8003b68:	200005d0 	.word	0x200005d0
 8003b6c:	200005e4 	.word	0x200005e4
 8003b70:	20000600 	.word	0x20000600
 8003b74:	20000614 	.word	0x20000614
 8003b78:	2000062c 	.word	0x2000062c
 8003b7c:	200005f8 	.word	0x200005f8
 8003b80:	200005fc 	.word	0x200005fc

08003b84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b082      	sub	sp, #8
 8003b88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b8a:	e019      	b.n	8003bc0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b8c:	f000 f9fe 	bl	8003f8c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b90:	4b0f      	ldr	r3, [pc, #60]	; (8003bd0 <prvCheckTasksWaitingTermination+0x4c>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7ff fad6 	bl	800314e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ba2:	4b0c      	ldr	r3, [pc, #48]	; (8003bd4 <prvCheckTasksWaitingTermination+0x50>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	3b01      	subs	r3, #1
 8003ba8:	4a0a      	ldr	r2, [pc, #40]	; (8003bd4 <prvCheckTasksWaitingTermination+0x50>)
 8003baa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	4a09      	ldr	r2, [pc, #36]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003bb4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003bb6:	f000 fa17 	bl	8003fe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f80e 	bl	8003bdc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bc0:	4b05      	ldr	r3, [pc, #20]	; (8003bd8 <prvCheckTasksWaitingTermination+0x54>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1e1      	bne.n	8003b8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	20000614 	.word	0x20000614
 8003bd4:	20000640 	.word	0x20000640
 8003bd8:	20000628 	.word	0x20000628

08003bdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d108      	bne.n	8003c00 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb68 	bl	80042c8 <vPortFree>
				vPortFree( pxTCB );
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fb65 	bl	80042c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bfe:	e017      	b.n	8003c30 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d103      	bne.n	8003c12 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fb5c 	bl	80042c8 <vPortFree>
	}
 8003c10:	e00e      	b.n	8003c30 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d009      	beq.n	8003c30 <prvDeleteTCB+0x54>
 8003c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c20:	f383 8811 	msr	BASEPRI, r3
 8003c24:	f3bf 8f6f 	isb	sy
 8003c28:	f3bf 8f4f 	dsb	sy
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e7fe      	b.n	8003c2e <prvDeleteTCB+0x52>
	}
 8003c30:	bf00      	nop
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c3e:	4b0c      	ldr	r3, [pc, #48]	; (8003c70 <prvResetNextTaskUnblockTime+0x38>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d104      	bne.n	8003c52 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c48:	4b0a      	ldr	r3, [pc, #40]	; (8003c74 <prvResetNextTaskUnblockTime+0x3c>)
 8003c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003c4e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c50:	e008      	b.n	8003c64 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <prvResetNextTaskUnblockTime+0x38>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	4a04      	ldr	r2, [pc, #16]	; (8003c74 <prvResetNextTaskUnblockTime+0x3c>)
 8003c62:	6013      	str	r3, [r2, #0]
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	200005f8 	.word	0x200005f8
 8003c74:	20000660 	.word	0x20000660

08003c78 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b084      	sub	sp, #16
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003c82:	4b29      	ldr	r3, [pc, #164]	; (8003d28 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c88:	4b28      	ldr	r3, [pc, #160]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f7ff fa5d 	bl	800314e <uxListRemove>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10b      	bne.n	8003cb2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003c9a:	4b24      	ldr	r3, [pc, #144]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4013      	ands	r3, r2
 8003cae:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003cb0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb8:	d10a      	bne.n	8003cd0 <prvAddCurrentTaskToDelayedList+0x58>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d007      	beq.n	8003cd0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cc0:	4b1a      	ldr	r3, [pc, #104]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	481a      	ldr	r0, [pc, #104]	; (8003d34 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003cca:	f7ff f9e3 	bl	8003094 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003cce:	e026      	b.n	8003d1e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003cd8:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003ce0:	68ba      	ldr	r2, [r7, #8]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d209      	bcs.n	8003cfc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ce8:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	4610      	mov	r0, r2
 8003cf6:	f7ff f9f1 	bl	80030dc <vListInsert>
}
 8003cfa:	e010      	b.n	8003d1e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <prvAddCurrentTaskToDelayedList+0xc4>)
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	4b0a      	ldr	r3, [pc, #40]	; (8003d2c <prvAddCurrentTaskToDelayedList+0xb4>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	3304      	adds	r3, #4
 8003d06:	4619      	mov	r1, r3
 8003d08:	4610      	mov	r0, r2
 8003d0a:	f7ff f9e7 	bl	80030dc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68ba      	ldr	r2, [r7, #8]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d202      	bcs.n	8003d1e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003d18:	4a09      	ldr	r2, [pc, #36]	; (8003d40 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	6013      	str	r3, [r2, #0]
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000644 	.word	0x20000644
 8003d2c:	20000540 	.word	0x20000540
 8003d30:	20000648 	.word	0x20000648
 8003d34:	2000062c 	.word	0x2000062c
 8003d38:	200005fc 	.word	0x200005fc
 8003d3c:	200005f8 	.word	0x200005f8
 8003d40:	20000660 	.word	0x20000660

08003d44 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3b04      	subs	r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3b04      	subs	r3, #4
 8003d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	f023 0201 	bic.w	r2, r3, #1
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3b04      	subs	r3, #4
 8003d72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d74:	4a0c      	ldr	r2, [pc, #48]	; (8003da8 <pxPortInitialiseStack+0x64>)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	3b14      	subs	r3, #20
 8003d7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	3b04      	subs	r3, #4
 8003d8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f06f 0202 	mvn.w	r2, #2
 8003d92:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3b20      	subs	r3, #32
 8003d98:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr
 8003da8:	08003dad 	.word	0x08003dad

08003dac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003dac:	b480      	push	{r7}
 8003dae:	b085      	sub	sp, #20
 8003db0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003db2:	2300      	movs	r3, #0
 8003db4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003db6:	4b11      	ldr	r3, [pc, #68]	; (8003dfc <prvTaskExitError+0x50>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbe:	d009      	beq.n	8003dd4 <prvTaskExitError+0x28>
 8003dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e7fe      	b.n	8003dd2 <prvTaskExitError+0x26>
 8003dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
 8003de4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003de6:	bf00      	nop
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0fc      	beq.n	8003de8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dee:	bf00      	nop
 8003df0:	3714      	adds	r7, #20
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000014 	.word	0x20000014

08003e00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e00:	4b07      	ldr	r3, [pc, #28]	; (8003e20 <pxCurrentTCBConst2>)
 8003e02:	6819      	ldr	r1, [r3, #0]
 8003e04:	6808      	ldr	r0, [r1, #0]
 8003e06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e0a:	f380 8809 	msr	PSP, r0
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f04f 0000 	mov.w	r0, #0
 8003e16:	f380 8811 	msr	BASEPRI, r0
 8003e1a:	4770      	bx	lr
 8003e1c:	f3af 8000 	nop.w

08003e20 <pxCurrentTCBConst2>:
 8003e20:	20000540 	.word	0x20000540
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop

08003e28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e28:	4808      	ldr	r0, [pc, #32]	; (8003e4c <prvPortStartFirstTask+0x24>)
 8003e2a:	6800      	ldr	r0, [r0, #0]
 8003e2c:	6800      	ldr	r0, [r0, #0]
 8003e2e:	f380 8808 	msr	MSP, r0
 8003e32:	f04f 0000 	mov.w	r0, #0
 8003e36:	f380 8814 	msr	CONTROL, r0
 8003e3a:	b662      	cpsie	i
 8003e3c:	b661      	cpsie	f
 8003e3e:	f3bf 8f4f 	dsb	sy
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	df00      	svc	0
 8003e48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e4a:	bf00      	nop
 8003e4c:	e000ed08 	.word	0xe000ed08

08003e50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <xPortStartScheduler+0x118>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a44      	ldr	r2, [pc, #272]	; (8003f6c <xPortStartScheduler+0x11c>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d109      	bne.n	8003e74 <xPortStartScheduler+0x24>
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	613b      	str	r3, [r7, #16]
 8003e72:	e7fe      	b.n	8003e72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e74:	4b3c      	ldr	r3, [pc, #240]	; (8003f68 <xPortStartScheduler+0x118>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a3d      	ldr	r2, [pc, #244]	; (8003f70 <xPortStartScheduler+0x120>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d109      	bne.n	8003e92 <xPortStartScheduler+0x42>
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	e7fe      	b.n	8003e90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e92:	4b38      	ldr	r3, [pc, #224]	; (8003f74 <xPortStartScheduler+0x124>)
 8003e94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	b2db      	uxtb	r3, r3
 8003e9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	22ff      	movs	r2, #255	; 0xff
 8003ea2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003eb4:	b2da      	uxtb	r2, r3
 8003eb6:	4b30      	ldr	r3, [pc, #192]	; (8003f78 <xPortStartScheduler+0x128>)
 8003eb8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eba:	4b30      	ldr	r3, [pc, #192]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003ebc:	2207      	movs	r2, #7
 8003ebe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ec0:	e009      	b.n	8003ed6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	4a2c      	ldr	r2, [pc, #176]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003eca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ecc:	78fb      	ldrb	r3, [r7, #3]
 8003ece:	b2db      	uxtb	r3, r3
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	b2db      	uxtb	r3, r3
 8003eda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ede:	2b80      	cmp	r3, #128	; 0x80
 8003ee0:	d0ef      	beq.n	8003ec2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f1c3 0307 	rsb	r3, r3, #7
 8003eea:	2b04      	cmp	r3, #4
 8003eec:	d009      	beq.n	8003f02 <xPortStartScheduler+0xb2>
 8003eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	60bb      	str	r3, [r7, #8]
 8003f00:	e7fe      	b.n	8003f00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f02:	4b1e      	ldr	r3, [pc, #120]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	021b      	lsls	r3, r3, #8
 8003f08:	4a1c      	ldr	r2, [pc, #112]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003f0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f14:	4a19      	ldr	r2, [pc, #100]	; (8003f7c <xPortStartScheduler+0x12c>)
 8003f16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	b2da      	uxtb	r2, r3
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f20:	4b17      	ldr	r3, [pc, #92]	; (8003f80 <xPortStartScheduler+0x130>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a16      	ldr	r2, [pc, #88]	; (8003f80 <xPortStartScheduler+0x130>)
 8003f26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <xPortStartScheduler+0x130>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a13      	ldr	r2, [pc, #76]	; (8003f80 <xPortStartScheduler+0x130>)
 8003f32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f38:	f000 f8d6 	bl	80040e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f3c:	4b11      	ldr	r3, [pc, #68]	; (8003f84 <xPortStartScheduler+0x134>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f42:	f000 f8f5 	bl	8004130 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f46:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <xPortStartScheduler+0x138>)
 8003f4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f52:	f7ff ff69 	bl	8003e28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f56:	f7ff fd3d 	bl	80039d4 <vTaskSwitchContext>
	prvTaskExitError();
 8003f5a:	f7ff ff27 	bl	8003dac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3718      	adds	r7, #24
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	e000ed00 	.word	0xe000ed00
 8003f6c:	410fc271 	.word	0x410fc271
 8003f70:	410fc270 	.word	0x410fc270
 8003f74:	e000e400 	.word	0xe000e400
 8003f78:	2000066c 	.word	0x2000066c
 8003f7c:	20000670 	.word	0x20000670
 8003f80:	e000ed20 	.word	0xe000ed20
 8003f84:	20000014 	.word	0x20000014
 8003f88:	e000ef34 	.word	0xe000ef34

08003f8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fa4:	4b0e      	ldr	r3, [pc, #56]	; (8003fe0 <vPortEnterCritical+0x54>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	4a0d      	ldr	r2, [pc, #52]	; (8003fe0 <vPortEnterCritical+0x54>)
 8003fac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <vPortEnterCritical+0x54>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d10e      	bne.n	8003fd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fb6:	4b0b      	ldr	r3, [pc, #44]	; (8003fe4 <vPortEnterCritical+0x58>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d009      	beq.n	8003fd4 <vPortEnterCritical+0x48>
 8003fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	e7fe      	b.n	8003fd2 <vPortEnterCritical+0x46>
	}
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	20000014 	.word	0x20000014
 8003fe4:	e000ed04 	.word	0xe000ed04

08003fe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <vPortExitCritical+0x4c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d109      	bne.n	800400a <vPortExitCritical+0x22>
 8003ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ffa:	f383 8811 	msr	BASEPRI, r3
 8003ffe:	f3bf 8f6f 	isb	sy
 8004002:	f3bf 8f4f 	dsb	sy
 8004006:	607b      	str	r3, [r7, #4]
 8004008:	e7fe      	b.n	8004008 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800400a:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <vPortExitCritical+0x4c>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3b01      	subs	r3, #1
 8004010:	4a08      	ldr	r2, [pc, #32]	; (8004034 <vPortExitCritical+0x4c>)
 8004012:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <vPortExitCritical+0x4c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d104      	bne.n	8004026 <vPortExitCritical+0x3e>
 800401c:	2300      	movs	r3, #0
 800401e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000014 	.word	0x20000014
	...

08004040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004040:	f3ef 8009 	mrs	r0, PSP
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <pxCurrentTCBConst>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f01e 0f10 	tst.w	lr, #16
 8004050:	bf08      	it	eq
 8004052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004064:	f380 8811 	msr	BASEPRI, r0
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f7ff fcb0 	bl	80039d4 <vTaskSwitchContext>
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f380 8811 	msr	BASEPRI, r0
 800407c:	bc09      	pop	{r0, r3}
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	6808      	ldr	r0, [r1, #0]
 8004082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004086:	f01e 0f10 	tst.w	lr, #16
 800408a:	bf08      	it	eq
 800408c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004090:	f380 8809 	msr	PSP, r0
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w

080040a0 <pxCurrentTCBConst>:
 80040a0:	20000540 	.word	0x20000540
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040c0:	f7ff fbd0 	bl	8003864 <xTaskIncrementTick>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040ca:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <SysTick_Handler+0x3c>)
 80040cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d0:	601a      	str	r2, [r3, #0]
 80040d2:	2300      	movs	r3, #0
 80040d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040e8:	b480      	push	{r7}
 80040ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040ec:	4b0b      	ldr	r3, [pc, #44]	; (800411c <vPortSetupTimerInterrupt+0x34>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040f2:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <vPortSetupTimerInterrupt+0x38>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040f8:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <vPortSetupTimerInterrupt+0x3c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <vPortSetupTimerInterrupt+0x40>)
 80040fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004102:	099b      	lsrs	r3, r3, #6
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <vPortSetupTimerInterrupt+0x44>)
 8004106:	3b01      	subs	r3, #1
 8004108:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800410a:	4b04      	ldr	r3, [pc, #16]	; (800411c <vPortSetupTimerInterrupt+0x34>)
 800410c:	2207      	movs	r2, #7
 800410e:	601a      	str	r2, [r3, #0]
}
 8004110:	bf00      	nop
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	e000e010 	.word	0xe000e010
 8004120:	e000e018 	.word	0xe000e018
 8004124:	20000000 	.word	0x20000000
 8004128:	10624dd3 	.word	0x10624dd3
 800412c:	e000e014 	.word	0xe000e014

08004130 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004130:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004140 <vPortEnableVFP+0x10>
 8004134:	6801      	ldr	r1, [r0, #0]
 8004136:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800413a:	6001      	str	r1, [r0, #0]
 800413c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800413e:	bf00      	nop
 8004140:	e000ed88 	.word	0xe000ed88

08004144 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b08a      	sub	sp, #40	; 0x28
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800414c:	2300      	movs	r3, #0
 800414e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004150:	f7ff fade 	bl	8003710 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <pvPortMalloc+0x170>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800415c:	f000 f90c 	bl	8004378 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004160:	4b55      	ldr	r3, [pc, #340]	; (80042b8 <pvPortMalloc+0x174>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4013      	ands	r3, r2
 8004168:	2b00      	cmp	r3, #0
 800416a:	f040 808c 	bne.w	8004286 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d01c      	beq.n	80041ae <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004174:	2208      	movs	r2, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4413      	add	r3, r2
 800417a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f003 0307 	and.w	r3, r3, #7
 8004182:	2b00      	cmp	r3, #0
 8004184:	d013      	beq.n	80041ae <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f023 0307 	bic.w	r3, r3, #7
 800418c:	3308      	adds	r3, #8
 800418e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f003 0307 	and.w	r3, r3, #7
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <pvPortMalloc+0x6a>
	__asm volatile
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	617b      	str	r3, [r7, #20]
 80041ac:	e7fe      	b.n	80041ac <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d068      	beq.n	8004286 <pvPortMalloc+0x142>
 80041b4:	4b41      	ldr	r3, [pc, #260]	; (80042bc <pvPortMalloc+0x178>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d863      	bhi.n	8004286 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80041be:	4b40      	ldr	r3, [pc, #256]	; (80042c0 <pvPortMalloc+0x17c>)
 80041c0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80041c2:	4b3f      	ldr	r3, [pc, #252]	; (80042c0 <pvPortMalloc+0x17c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041c8:	e004      	b.n	80041d4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d903      	bls.n	80041e6 <pvPortMalloc+0xa2>
 80041de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1f1      	bne.n	80041ca <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80041e6:	4b33      	ldr	r3, [pc, #204]	; (80042b4 <pvPortMalloc+0x170>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d04a      	beq.n	8004286 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2208      	movs	r2, #8
 80041f6:	4413      	add	r3, r2
 80041f8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	1ad2      	subs	r2, r2, r3
 800420a:	2308      	movs	r3, #8
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	429a      	cmp	r2, r3
 8004210:	d91e      	bls.n	8004250 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4413      	add	r3, r2
 8004218:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	f003 0307 	and.w	r3, r3, #7
 8004220:	2b00      	cmp	r3, #0
 8004222:	d009      	beq.n	8004238 <pvPortMalloc+0xf4>
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	e7fe      	b.n	8004236 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	1ad2      	subs	r2, r2, r3
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800424a:	69b8      	ldr	r0, [r7, #24]
 800424c:	f000 f8f6 	bl	800443c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004250:	4b1a      	ldr	r3, [pc, #104]	; (80042bc <pvPortMalloc+0x178>)
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	4a18      	ldr	r2, [pc, #96]	; (80042bc <pvPortMalloc+0x178>)
 800425c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800425e:	4b17      	ldr	r3, [pc, #92]	; (80042bc <pvPortMalloc+0x178>)
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	4b18      	ldr	r3, [pc, #96]	; (80042c4 <pvPortMalloc+0x180>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d203      	bcs.n	8004272 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <pvPortMalloc+0x178>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a15      	ldr	r2, [pc, #84]	; (80042c4 <pvPortMalloc+0x180>)
 8004270:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <pvPortMalloc+0x174>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	431a      	orrs	r2, r3
 800427c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	2200      	movs	r2, #0
 8004284:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004286:	f7ff fa51 	bl	800372c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	2b00      	cmp	r3, #0
 8004292:	d009      	beq.n	80042a8 <pvPortMalloc+0x164>
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	e7fe      	b.n	80042a6 <pvPortMalloc+0x162>
	return pvReturn;
 80042a8:	69fb      	ldr	r3, [r7, #28]
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3728      	adds	r7, #40	; 0x28
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	2000867c 	.word	0x2000867c
 80042b8:	20008688 	.word	0x20008688
 80042bc:	20008680 	.word	0x20008680
 80042c0:	20008674 	.word	0x20008674
 80042c4:	20008684 	.word	0x20008684

080042c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b086      	sub	sp, #24
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d046      	beq.n	8004368 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80042da:	2308      	movs	r3, #8
 80042dc:	425b      	negs	r3, r3
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4413      	add	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	685a      	ldr	r2, [r3, #4]
 80042ec:	4b20      	ldr	r3, [pc, #128]	; (8004370 <vPortFree+0xa8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4013      	ands	r3, r2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d109      	bne.n	800430a <vPortFree+0x42>
 80042f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042fa:	f383 8811 	msr	BASEPRI, r3
 80042fe:	f3bf 8f6f 	isb	sy
 8004302:	f3bf 8f4f 	dsb	sy
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	e7fe      	b.n	8004308 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d009      	beq.n	8004326 <vPortFree+0x5e>
 8004312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60bb      	str	r3, [r7, #8]
 8004324:	e7fe      	b.n	8004324 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	4b11      	ldr	r3, [pc, #68]	; (8004370 <vPortFree+0xa8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4013      	ands	r3, r2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d019      	beq.n	8004368 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d115      	bne.n	8004368 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <vPortFree+0xa8>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	43db      	mvns	r3, r3
 8004346:	401a      	ands	r2, r3
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800434c:	f7ff f9e0 	bl	8003710 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	685a      	ldr	r2, [r3, #4]
 8004354:	4b07      	ldr	r3, [pc, #28]	; (8004374 <vPortFree+0xac>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4413      	add	r3, r2
 800435a:	4a06      	ldr	r2, [pc, #24]	; (8004374 <vPortFree+0xac>)
 800435c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800435e:	6938      	ldr	r0, [r7, #16]
 8004360:	f000 f86c 	bl	800443c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004364:	f7ff f9e2 	bl	800372c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004368:	bf00      	nop
 800436a:	3718      	adds	r7, #24
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20008688 	.word	0x20008688
 8004374:	20008680 	.word	0x20008680

08004378 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800437e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004382:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004384:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvHeapInit+0xac>)
 8004386:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f003 0307 	and.w	r3, r3, #7
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	3307      	adds	r3, #7
 8004396:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0307 	bic.w	r3, r3, #7
 800439e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043a0:	68ba      	ldr	r2, [r7, #8]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	4a1f      	ldr	r2, [pc, #124]	; (8004424 <prvHeapInit+0xac>)
 80043a8:	4413      	add	r3, r2
 80043aa:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043b0:	4a1d      	ldr	r2, [pc, #116]	; (8004428 <prvHeapInit+0xb0>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80043b6:	4b1c      	ldr	r3, [pc, #112]	; (8004428 <prvHeapInit+0xb0>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	68ba      	ldr	r2, [r7, #8]
 80043c0:	4413      	add	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80043c4:	2208      	movs	r2, #8
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f023 0307 	bic.w	r3, r3, #7
 80043d2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <prvHeapInit+0xb4>)
 80043d8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <prvHeapInit+0xb4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2200      	movs	r2, #0
 80043e0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80043e2:	4b12      	ldr	r3, [pc, #72]	; (800442c <prvHeapInit+0xb4>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68fa      	ldr	r2, [r7, #12]
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043f8:	4b0c      	ldr	r3, [pc, #48]	; (800442c <prvHeapInit+0xb4>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	4a0a      	ldr	r2, [pc, #40]	; (8004430 <prvHeapInit+0xb8>)
 8004406:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	4a09      	ldr	r2, [pc, #36]	; (8004434 <prvHeapInit+0xbc>)
 800440e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004410:	4b09      	ldr	r3, [pc, #36]	; (8004438 <prvHeapInit+0xc0>)
 8004412:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004416:	601a      	str	r2, [r3, #0]
}
 8004418:	bf00      	nop
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	20000674 	.word	0x20000674
 8004428:	20008674 	.word	0x20008674
 800442c:	2000867c 	.word	0x2000867c
 8004430:	20008684 	.word	0x20008684
 8004434:	20008680 	.word	0x20008680
 8004438:	20008688 	.word	0x20008688

0800443c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004444:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <prvInsertBlockIntoFreeList+0xac>)
 8004446:	60fb      	str	r3, [r7, #12]
 8004448:	e002      	b.n	8004450 <prvInsertBlockIntoFreeList+0x14>
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	429a      	cmp	r2, r3
 8004458:	d8f7      	bhi.n	800444a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	68ba      	ldr	r2, [r7, #8]
 8004464:	4413      	add	r3, r2
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	d108      	bne.n	800447e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	68ba      	ldr	r2, [r7, #8]
 8004488:	441a      	add	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d118      	bne.n	80044c4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <prvInsertBlockIntoFreeList+0xb0>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	429a      	cmp	r2, r3
 800449c:	d00d      	beq.n	80044ba <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	685a      	ldr	r2, [r3, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	441a      	add	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	e008      	b.n	80044cc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80044ba:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <prvInsertBlockIntoFreeList+0xb0>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	601a      	str	r2, [r3, #0]
 80044c2:	e003      	b.n	80044cc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d002      	beq.n	80044da <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044da:	bf00      	nop
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr
 80044e6:	bf00      	nop
 80044e8:	20008674 	.word	0x20008674
 80044ec:	2000867c 	.word	0x2000867c

080044f0 <WIZCHIP_WRITE>:
#if   (_WIZCHIP_ == 5100)
/**
@brief  This function writes the data into W5100 registers.
*/
void     WIZCHIP_WRITE(uint32_t AddrSel, uint8_t wb )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	460b      	mov	r3, r1
 80044fa:	70fb      	strb	r3, [r7, #3]
   WIZCHIP_CRITICAL_ENTER();
 80044fc:	4b12      	ldr	r3, [pc, #72]	; (8004548 <WIZCHIP_WRITE+0x58>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4798      	blx	r3
   WIZCHIP.CS._select();
 8004502:	4b11      	ldr	r3, [pc, #68]	; (8004548 <WIZCHIP_WRITE+0x58>)
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0xF0);
 8004508:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <WIZCHIP_WRITE+0x58>)
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	20f0      	movs	r0, #240	; 0xf0
 800450e:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8004510:	4b0d      	ldr	r3, [pc, #52]	; (8004548 <WIZCHIP_WRITE+0x58>)
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	0a12      	lsrs	r2, r2, #8
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	4610      	mov	r0, r2
 800451c:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 800451e:	4b0a      	ldr	r3, [pc, #40]	; (8004548 <WIZCHIP_WRITE+0x58>)
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	687a      	ldr	r2, [r7, #4]
 8004524:	b2d2      	uxtb	r2, r2
 8004526:	4610      	mov	r0, r2
 8004528:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte(wb);    // Data write (write 1byte data)
 800452a:	4b07      	ldr	r3, [pc, #28]	; (8004548 <WIZCHIP_WRITE+0x58>)
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	78fa      	ldrb	r2, [r7, #3]
 8004530:	4610      	mov	r0, r2
 8004532:	4798      	blx	r3
   WIZCHIP.IF.BUS._write_data(IDM_DR,wb);
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"
#endif

   WIZCHIP.CS._deselect();
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <WIZCHIP_WRITE+0x58>)
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 800453a:	4b03      	ldr	r3, [pc, #12]	; (8004548 <WIZCHIP_WRITE+0x58>)
 800453c:	691b      	ldr	r3, [r3, #16]
 800453e:	4798      	blx	r3
}
 8004540:	bf00      	nop
 8004542:	3708      	adds	r7, #8
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	2000001c 	.word	0x2000001c

0800454c <WIZCHIP_READ>:
/**
@brief  This function reads the value from W5100 registers.
*/
uint8_t  WIZCHIP_READ(uint32_t AddrSel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
   uint8_t ret;

   WIZCHIP_CRITICAL_ENTER();
 8004554:	4b13      	ldr	r3, [pc, #76]	; (80045a4 <WIZCHIP_READ+0x58>)
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	4798      	blx	r3
   WIZCHIP.CS._select();
 800455a:	4b12      	ldr	r3, [pc, #72]	; (80045a4 <WIZCHIP_READ+0x58>)
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   WIZCHIP.IF.SPI._write_byte(0x0F);
 8004560:	4b10      	ldr	r3, [pc, #64]	; (80045a4 <WIZCHIP_READ+0x58>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	200f      	movs	r0, #15
 8004566:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0xFF00) >>  8);
 8004568:	4b0e      	ldr	r3, [pc, #56]	; (80045a4 <WIZCHIP_READ+0x58>)
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	0a12      	lsrs	r2, r2, #8
 8004570:	b2d2      	uxtb	r2, r2
 8004572:	4610      	mov	r0, r2
 8004574:	4798      	blx	r3
   WIZCHIP.IF.SPI._write_byte((AddrSel & 0x00FF) >>  0);
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <WIZCHIP_READ+0x58>)
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	b2d2      	uxtb	r2, r2
 800457e:	4610      	mov	r0, r2
 8004580:	4798      	blx	r3
   ret = WIZCHIP.IF.SPI._read_byte(); 
 8004582:	4b08      	ldr	r3, [pc, #32]	; (80045a4 <WIZCHIP_READ+0x58>)
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	4798      	blx	r3
 8004588:	4603      	mov	r3, r0
 800458a:	73fb      	strb	r3, [r7, #15]

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!"   
#endif

   WIZCHIP.CS._deselect();
 800458c:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <WIZCHIP_READ+0x58>)
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004592:	4b04      	ldr	r3, [pc, #16]	; (80045a4 <WIZCHIP_READ+0x58>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4798      	blx	r3
   return ret;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	2000001c 	.word	0x2000001c

080045a8 <WIZCHIP_WRITE_BUF>:

/**
@brief  This function writes into W5100 memory(Buffer)
*/ 
void     WIZCHIP_WRITE_BUF(uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b086      	sub	sp, #24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	4613      	mov	r3, r2
 80045b4:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 80045b6:	2300      	movs	r3, #0
 80045b8:	82fb      	strh	r3, [r7, #22]

   WIZCHIP_CRITICAL_ENTER();
 80045ba:	4b21      	ldr	r3, [pc, #132]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 80045c0:	4b1f      	ldr	r3, [pc, #124]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	4798      	blx	r3

#if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
  for(i = 0; i < len; i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	82fb      	strh	r3, [r7, #22]
 80045ca:	e02a      	b.n	8004622 <WIZCHIP_WRITE_BUF+0x7a>
  {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 80045cc:	4b1c      	ldr	r3, [pc, #112]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(0xF0);
 80045d2:	4b1b      	ldr	r3, [pc, #108]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	20f0      	movs	r0, #240	; 0xf0
 80045d8:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0xFF00) >>  8);
 80045da:	4b19      	ldr	r3, [pc, #100]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045dc:	6a1b      	ldr	r3, [r3, #32]
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	b291      	uxth	r1, r2
 80045e2:	8afa      	ldrh	r2, [r7, #22]
 80045e4:	440a      	add	r2, r1
 80045e6:	b292      	uxth	r2, r2
 80045e8:	0a12      	lsrs	r2, r2, #8
 80045ea:	b292      	uxth	r2, r2
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	4610      	mov	r0, r2
 80045f0:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte((((uint16_t)(AddrSel+i)) & 0x00FF) >>  0);
 80045f2:	4b13      	ldr	r3, [pc, #76]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	68fa      	ldr	r2, [r7, #12]
 80045f8:	b2d1      	uxtb	r1, r2
 80045fa:	8afa      	ldrh	r2, [r7, #22]
 80045fc:	b2d2      	uxtb	r2, r2
 80045fe:	440a      	add	r2, r1
 8004600:	b2d2      	uxtb	r2, r2
 8004602:	4610      	mov	r0, r2
 8004604:	4798      	blx	r3
     WIZCHIP.IF.SPI._write_byte(pBuf[i]);    // Data write (write 1byte data)
 8004606:	4b0e      	ldr	r3, [pc, #56]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	8afa      	ldrh	r2, [r7, #22]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	440a      	add	r2, r1
 8004610:	7812      	ldrb	r2, [r2, #0]
 8004612:	4610      	mov	r0, r2
 8004614:	4798      	blx	r3
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 8004616:	4b0a      	ldr	r3, [pc, #40]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	4798      	blx	r3
  for(i = 0; i < len; i++)
 800461c:	8afb      	ldrh	r3, [r7, #22]
 800461e:	3301      	adds	r3, #1
 8004620:	82fb      	strh	r3, [r7, #22]
 8004622:	8afa      	ldrh	r2, [r7, #22]
 8004624:	88fb      	ldrh	r3, [r7, #6]
 8004626:	429a      	cmp	r2, r3
 8004628:	d3d0      	bcc.n	80045cc <WIZCHIP_WRITE_BUF+0x24>

#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif
   
   WIZCHIP.CS._deselect();  //M20150601 : Moved here.
 800462a:	4b05      	ldr	r3, [pc, #20]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 8004630:	4b03      	ldr	r3, [pc, #12]	; (8004640 <WIZCHIP_WRITE_BUF+0x98>)
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	4798      	blx	r3
}
 8004636:	bf00      	nop
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	2000001c 	.word	0x2000001c

08004644 <WIZCHIP_READ_BUF>:
/**
@brief  This function reads into W5100 memory(Buffer)
*/ 

void     WIZCHIP_READ_BUF (uint32_t AddrSel, uint8_t* pBuf, uint16_t len)
{
 8004644:	b590      	push	{r4, r7, lr}
 8004646:	b087      	sub	sp, #28
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	4613      	mov	r3, r2
 8004650:	80fb      	strh	r3, [r7, #6]
   uint16_t i = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	82fb      	strh	r3, [r7, #22]
   WIZCHIP_CRITICAL_ENTER();
 8004656:	4b21      	ldr	r3, [pc, #132]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4798      	blx	r3
   WIZCHIP.CS._select();   //M20150601 : Moved here.
 800465c:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 800465e:	695b      	ldr	r3, [r3, #20]
 8004660:	4798      	blx	r3
   
   #if( (_WIZCHIP_IO_MODE_ & _WIZCHIP_IO_MODE_SPI_))
   for(i = 0; i < len; i++)
 8004662:	2300      	movs	r3, #0
 8004664:	82fb      	strh	r3, [r7, #22]
 8004666:	e02a      	b.n	80046be <WIZCHIP_READ_BUF+0x7a>
   {
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
     //            CS should be controlled every SPI frames
     WIZCHIP.CS._select();
 8004668:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte(0x0F);
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	200f      	movs	r0, #15
 8004674:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0xFF00) >>  8);
 8004676:	4b19      	ldr	r3, [pc, #100]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 8004678:	6a1b      	ldr	r3, [r3, #32]
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	b291      	uxth	r1, r2
 800467e:	8afa      	ldrh	r2, [r7, #22]
 8004680:	440a      	add	r2, r1
 8004682:	b292      	uxth	r2, r2
 8004684:	0a12      	lsrs	r2, r2, #8
 8004686:	b292      	uxth	r2, r2
 8004688:	b2d2      	uxtb	r2, r2
 800468a:	4610      	mov	r0, r2
 800468c:	4798      	blx	r3
      WIZCHIP.IF.SPI._write_byte((uint16_t)((AddrSel+i) & 0x00FF) >>  0);
 800468e:	4b13      	ldr	r3, [pc, #76]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	b2d1      	uxtb	r1, r2
 8004696:	8afa      	ldrh	r2, [r7, #22]
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	440a      	add	r2, r1
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3
      pBuf[i] = WIZCHIP.IF.SPI._read_byte(); 
 80046a2:	4b0e      	ldr	r3, [pc, #56]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 80046a4:	69db      	ldr	r3, [r3, #28]
 80046a6:	8afa      	ldrh	r2, [r7, #22]
 80046a8:	68b9      	ldr	r1, [r7, #8]
 80046aa:	188c      	adds	r4, r1, r2
 80046ac:	4798      	blx	r3
 80046ae:	4603      	mov	r3, r0
 80046b0:	7023      	strb	r3, [r4, #0]
     //M20160715 : Depricated "M20150601 : Remove _select() to top-side"
	  WIZCHIP.CS._deselect();
 80046b2:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	4798      	blx	r3
   for(i = 0; i < len; i++)
 80046b8:	8afb      	ldrh	r3, [r7, #22]
 80046ba:	3301      	adds	r3, #1
 80046bc:	82fb      	strh	r3, [r7, #22]
 80046be:	8afa      	ldrh	r2, [r7, #22]
 80046c0:	88fb      	ldrh	r3, [r7, #6]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d3d0      	bcc.n	8004668 <WIZCHIP_READ_BUF+0x24>
   
#else
   #error "Unknown _WIZCHIP_IO_MODE_ in W5100. !!!!"
#endif

   WIZCHIP.CS._deselect();    //M20150601 : Moved Here.
 80046c6:	4b05      	ldr	r3, [pc, #20]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 80046c8:	699b      	ldr	r3, [r3, #24]
 80046ca:	4798      	blx	r3
   WIZCHIP_CRITICAL_EXIT();
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <WIZCHIP_READ_BUF+0x98>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4798      	blx	r3
}
 80046d2:	bf00      	nop
 80046d4:	371c      	adds	r7, #28
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd90      	pop	{r4, r7, pc}
 80046da:	bf00      	nop
 80046dc:	2000001c 	.word	0x2000001c

080046e0 <getSn_TX_FSR>:
///////////////////////////////////
// Socket N regsiter IO function //
///////////////////////////////////

uint16_t getSn_TX_FSR(uint8_t sn)
{
 80046e0:	b590      	push	{r4, r7, lr}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	4603      	mov	r3, r0
 80046e8:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 80046ea:	2300      	movs	r3, #0
 80046ec:	81fb      	strh	r3, [r7, #14]
 80046ee:	2300      	movs	r3, #0
 80046f0:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_TX_FSR(sn));
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	3304      	adds	r3, #4
 80046f6:	021b      	lsls	r3, r3, #8
 80046f8:	3320      	adds	r3, #32
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7ff ff26 	bl	800454c <WIZCHIP_READ>
 8004700:	4603      	mov	r3, r0
 8004702:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004704:	89bb      	ldrh	r3, [r7, #12]
 8004706:	021b      	lsls	r3, r3, #8
 8004708:	b29c      	uxth	r4, r3
 800470a:	79fb      	ldrb	r3, [r7, #7]
 800470c:	3304      	adds	r3, #4
 800470e:	021b      	lsls	r3, r3, #8
 8004710:	3321      	adds	r3, #33	; 0x21
 8004712:	4618      	mov	r0, r3
 8004714:	f7ff ff1a 	bl	800454c <WIZCHIP_READ>
 8004718:	4603      	mov	r3, r0
 800471a:	b29b      	uxth	r3, r3
 800471c:	4423      	add	r3, r4
 800471e:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 8004720:	89bb      	ldrh	r3, [r7, #12]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d016      	beq.n	8004754 <getSn_TX_FSR+0x74>
      {
        val = WIZCHIP_READ(Sn_TX_FSR(sn));
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	3304      	adds	r3, #4
 800472a:	021b      	lsls	r3, r3, #8
 800472c:	3320      	adds	r3, #32
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff ff0c 	bl	800454c <WIZCHIP_READ>
 8004734:	4603      	mov	r3, r0
 8004736:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_TX_FSR(sn),1));
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	b29c      	uxth	r4, r3
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	3304      	adds	r3, #4
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	3321      	adds	r3, #33	; 0x21
 8004746:	4618      	mov	r0, r3
 8004748:	f7ff ff00 	bl	800454c <WIZCHIP_READ>
 800474c:	4603      	mov	r3, r0
 800474e:	b29b      	uxth	r3, r3
 8004750:	4423      	add	r3, r4
 8004752:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 8004754:	89fa      	ldrh	r2, [r7, #14]
 8004756:	89bb      	ldrh	r3, [r7, #12]
 8004758:	429a      	cmp	r2, r3
 800475a:	d1ca      	bne.n	80046f2 <getSn_TX_FSR+0x12>
   return val;
 800475c:	89fb      	ldrh	r3, [r7, #14]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3714      	adds	r7, #20
 8004762:	46bd      	mov	sp, r7
 8004764:	bd90      	pop	{r4, r7, pc}

08004766 <getSn_RX_RSR>:


uint16_t getSn_RX_RSR(uint8_t sn)
{
 8004766:	b590      	push	{r4, r7, lr}
 8004768:	b085      	sub	sp, #20
 800476a:	af00      	add	r7, sp, #0
 800476c:	4603      	mov	r3, r0
 800476e:	71fb      	strb	r3, [r7, #7]
   uint16_t val=0,val1=0;
 8004770:	2300      	movs	r3, #0
 8004772:	81fb      	strh	r3, [r7, #14]
 8004774:	2300      	movs	r3, #0
 8004776:	81bb      	strh	r3, [r7, #12]
   do
   {
      val1 = WIZCHIP_READ(Sn_RX_RSR(sn));
 8004778:	79fb      	ldrb	r3, [r7, #7]
 800477a:	3304      	adds	r3, #4
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	3326      	adds	r3, #38	; 0x26
 8004780:	4618      	mov	r0, r3
 8004782:	f7ff fee3 	bl	800454c <WIZCHIP_READ>
 8004786:	4603      	mov	r3, r0
 8004788:	81bb      	strh	r3, [r7, #12]
      val1 = (val1 << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 800478a:	89bb      	ldrh	r3, [r7, #12]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	b29c      	uxth	r4, r3
 8004790:	79fb      	ldrb	r3, [r7, #7]
 8004792:	3304      	adds	r3, #4
 8004794:	021b      	lsls	r3, r3, #8
 8004796:	3327      	adds	r3, #39	; 0x27
 8004798:	4618      	mov	r0, r3
 800479a:	f7ff fed7 	bl	800454c <WIZCHIP_READ>
 800479e:	4603      	mov	r3, r0
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	4423      	add	r3, r4
 80047a4:	81bb      	strh	r3, [r7, #12]
      if (val1 != 0)
 80047a6:	89bb      	ldrh	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d016      	beq.n	80047da <getSn_RX_RSR+0x74>
      {
        val = WIZCHIP_READ(Sn_RX_RSR(sn));
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	3304      	adds	r3, #4
 80047b0:	021b      	lsls	r3, r3, #8
 80047b2:	3326      	adds	r3, #38	; 0x26
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff fec9 	bl	800454c <WIZCHIP_READ>
 80047ba:	4603      	mov	r3, r0
 80047bc:	81fb      	strh	r3, [r7, #14]
        val = (val << 8) + WIZCHIP_READ(WIZCHIP_OFFSET_INC(Sn_RX_RSR(sn),1));
 80047be:	89fb      	ldrh	r3, [r7, #14]
 80047c0:	021b      	lsls	r3, r3, #8
 80047c2:	b29c      	uxth	r4, r3
 80047c4:	79fb      	ldrb	r3, [r7, #7]
 80047c6:	3304      	adds	r3, #4
 80047c8:	021b      	lsls	r3, r3, #8
 80047ca:	3327      	adds	r3, #39	; 0x27
 80047cc:	4618      	mov	r0, r3
 80047ce:	f7ff febd 	bl	800454c <WIZCHIP_READ>
 80047d2:	4603      	mov	r3, r0
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4423      	add	r3, r4
 80047d8:	81fb      	strh	r3, [r7, #14]
      }
   }while (val != val1);
 80047da:	89fa      	ldrh	r2, [r7, #14]
 80047dc:	89bb      	ldrh	r3, [r7, #12]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d1ca      	bne.n	8004778 <getSn_RX_RSR+0x12>
   return val;
 80047e2:	89fb      	ldrh	r3, [r7, #14]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3714      	adds	r7, #20
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd90      	pop	{r4, r7, pc}

080047ec <getSn_RxBASE>:

/////////////////////////////////////
// Sn_TXBUF & Sn_RXBUF IO function //
/////////////////////////////////////
uint32_t getSn_RxBASE(uint8_t sn)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b084      	sub	sp, #16
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	4603      	mov	r3, r0
 80047f4:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t rxbase = _W5100_IO_BASE_ + _WIZCHIP_IO_RXBUF_;
#else   
   uint32_t rxbase = _WIZCHIP_IO_RXBUF_;
 80047f6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80047fa:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
 8004800:	e020      	b.n	8004844 <getSn_RxBASE+0x58>
      rxbase += getSn_RxMAX(i);
 8004802:	201a      	movs	r0, #26
 8004804:	f7ff fea2 	bl	800454c <WIZCHIP_READ>
 8004808:	4603      	mov	r3, r0
 800480a:	4619      	mov	r1, r3
 800480c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004810:	005b      	lsls	r3, r3, #1
 8004812:	2203      	movs	r2, #3
 8004814:	fa02 f303 	lsl.w	r3, r2, r3
 8004818:	ea01 0203 	and.w	r2, r1, r3
 800481c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	fa42 f303 	asr.w	r3, r2, r3
 8004826:	2201      	movs	r2, #1
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	b29b      	uxth	r3, r3
 800482e:	029b      	lsls	r3, r3, #10
 8004830:	461a      	mov	r2, r3
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	4413      	add	r3, r2
 8004836:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 8004838:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	3301      	adds	r3, #1
 8004840:	b2db      	uxtb	r3, r3
 8004842:	73fb      	strb	r3, [r7, #15]
 8004844:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	429a      	cmp	r2, r3
 800484c:	dbd9      	blt.n	8004802 <getSn_RxBASE+0x16>

   return rxbase;
 800484e:	68bb      	ldr	r3, [r7, #8]
}
 8004850:	4618      	mov	r0, r3
 8004852:	3710      	adds	r7, #16
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <getSn_TxBASE>:

uint32_t getSn_TxBASE(uint8_t sn)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	71fb      	strb	r3, [r7, #7]
   int8_t  i;
#if ( _WIZCHIP_IO_MODE_ == _WIZCHIP_IO_MODE_BUS_DIR_)
   uint32_t txbase = _W5100_IO_BASE_ + _WIZCHIP_IO_TXBUF_;
#else   
   uint32_t txbase = _WIZCHIP_IO_TXBUF_;
 8004862:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004866:	60bb      	str	r3, [r7, #8]
#endif   
   for(i = 0; i < sn; i++)
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e020      	b.n	80048b0 <getSn_TxBASE+0x58>
      txbase += getSn_TxMAX(i);
 800486e:	201b      	movs	r0, #27
 8004870:	f7ff fe6c 	bl	800454c <WIZCHIP_READ>
 8004874:	4603      	mov	r3, r0
 8004876:	4619      	mov	r1, r3
 8004878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	ea01 0203 	and.w	r2, r1, r3
 8004888:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	fa42 f303 	asr.w	r3, r2, r3
 8004892:	2201      	movs	r2, #1
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	b29b      	uxth	r3, r3
 800489a:	029b      	lsls	r3, r3, #10
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4413      	add	r3, r2
 80048a2:	60bb      	str	r3, [r7, #8]
   for(i = 0; i < sn; i++)
 80048a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	73fb      	strb	r3, [r7, #15]
 80048b0:	f997 200f 	ldrsb.w	r2, [r7, #15]
 80048b4:	79fb      	ldrb	r3, [r7, #7]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	dbd9      	blt.n	800486e <getSn_TxBASE+0x16>
   return txbase;
 80048ba:	68bb      	ldr	r3, [r7, #8]
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3710      	adds	r7, #16
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <wiz_send_data>:
the data in transmite buffer. Here also take care of the condition while it exceed
the Tx memory uper-bound of socket.

*/
void wiz_send_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 80048c4:	b590      	push	{r4, r7, lr}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	6039      	str	r1, [r7, #0]
 80048ce:	71fb      	strb	r3, [r7, #7]
 80048d0:	4613      	mov	r3, r2
 80048d2:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t dst_mask;
  uint16_t dst_ptr;

  ptr = getSn_TX_WR(sn);
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	3304      	adds	r3, #4
 80048d8:	021b      	lsls	r3, r3, #8
 80048da:	3324      	adds	r3, #36	; 0x24
 80048dc:	4618      	mov	r0, r3
 80048de:	f7ff fe35 	bl	800454c <WIZCHIP_READ>
 80048e2:	4603      	mov	r3, r0
 80048e4:	b29b      	uxth	r3, r3
 80048e6:	021b      	lsls	r3, r3, #8
 80048e8:	b29c      	uxth	r4, r3
 80048ea:	79fb      	ldrb	r3, [r7, #7]
 80048ec:	3304      	adds	r3, #4
 80048ee:	021b      	lsls	r3, r3, #8
 80048f0:	3325      	adds	r3, #37	; 0x25
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7ff fe2a 	bl	800454c <WIZCHIP_READ>
 80048f8:	4603      	mov	r3, r0
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	4423      	add	r3, r4
 80048fe:	81fb      	strh	r3, [r7, #14]

  dst_mask = ptr & getSn_TxMASK(sn);
 8004900:	201b      	movs	r0, #27
 8004902:	f7ff fe23 	bl	800454c <WIZCHIP_READ>
 8004906:	4603      	mov	r3, r0
 8004908:	4619      	mov	r1, r3
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	2203      	movs	r2, #3
 8004910:	fa02 f303 	lsl.w	r3, r2, r3
 8004914:	ea01 0203 	and.w	r2, r1, r3
 8004918:	79fb      	ldrb	r3, [r7, #7]
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	fa42 f303 	asr.w	r3, r2, r3
 8004920:	2201      	movs	r2, #1
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	b29b      	uxth	r3, r3
 8004928:	029b      	lsls	r3, r3, #10
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29b      	uxth	r3, r3
 8004930:	b21a      	sxth	r2, r3
 8004932:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004936:	4013      	ands	r3, r2
 8004938:	b21b      	sxth	r3, r3
 800493a:	81bb      	strh	r3, [r7, #12]
  dst_ptr = getSn_TxBASE(sn) + dst_mask;
 800493c:	79fb      	ldrb	r3, [r7, #7]
 800493e:	4618      	mov	r0, r3
 8004940:	f7ff ff8a 	bl	8004858 <getSn_TxBASE>
 8004944:	4603      	mov	r3, r0
 8004946:	b29a      	uxth	r2, r3
 8004948:	89bb      	ldrh	r3, [r7, #12]
 800494a:	4413      	add	r3, r2
 800494c:	817b      	strh	r3, [r7, #10]
  
  if (dst_mask + len > getSn_TxMAX(sn)) 
 800494e:	89ba      	ldrh	r2, [r7, #12]
 8004950:	88bb      	ldrh	r3, [r7, #4]
 8004952:	18d4      	adds	r4, r2, r3
 8004954:	201b      	movs	r0, #27
 8004956:	f7ff fdf9 	bl	800454c <WIZCHIP_READ>
 800495a:	4603      	mov	r3, r0
 800495c:	4619      	mov	r1, r3
 800495e:	79fb      	ldrb	r3, [r7, #7]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	ea01 0203 	and.w	r2, r1, r3
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	005b      	lsls	r3, r3, #1
 8004970:	fa42 f303 	asr.w	r3, r2, r3
 8004974:	2201      	movs	r2, #1
 8004976:	fa02 f303 	lsl.w	r3, r2, r3
 800497a:	b29b      	uxth	r3, r3
 800497c:	029b      	lsls	r3, r3, #10
 800497e:	429c      	cmp	r4, r3
 8004980:	dd33      	ble.n	80049ea <wiz_send_data+0x126>
  {
    size = getSn_TxMAX(sn) - dst_mask;
 8004982:	201b      	movs	r0, #27
 8004984:	f7ff fde2 	bl	800454c <WIZCHIP_READ>
 8004988:	4603      	mov	r3, r0
 800498a:	4619      	mov	r1, r3
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	005b      	lsls	r3, r3, #1
 8004990:	2203      	movs	r2, #3
 8004992:	fa02 f303 	lsl.w	r3, r2, r3
 8004996:	ea01 0203 	and.w	r2, r1, r3
 800499a:	79fb      	ldrb	r3, [r7, #7]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	fa42 f303 	asr.w	r3, r2, r3
 80049a2:	2201      	movs	r2, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	029b      	lsls	r3, r3, #10
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	89bb      	ldrh	r3, [r7, #12]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	813b      	strh	r3, [r7, #8]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80049b4:	897b      	ldrh	r3, [r7, #10]
 80049b6:	893a      	ldrh	r2, [r7, #8]
 80049b8:	6839      	ldr	r1, [r7, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fdf4 	bl	80045a8 <WIZCHIP_WRITE_BUF>
    wizdata += size;
 80049c0:	893b      	ldrh	r3, [r7, #8]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	4413      	add	r3, r2
 80049c6:	603b      	str	r3, [r7, #0]
    size = len - size;
 80049c8:	88ba      	ldrh	r2, [r7, #4]
 80049ca:	893b      	ldrh	r3, [r7, #8]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	813b      	strh	r3, [r7, #8]
    dst_ptr = getSn_TxBASE(sn);
 80049d0:	79fb      	ldrb	r3, [r7, #7]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff ff40 	bl	8004858 <getSn_TxBASE>
 80049d8:	4603      	mov	r3, r0
 80049da:	817b      	strh	r3, [r7, #10]
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, size);
 80049dc:	897b      	ldrh	r3, [r7, #10]
 80049de:	893a      	ldrh	r2, [r7, #8]
 80049e0:	6839      	ldr	r1, [r7, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7ff fde0 	bl	80045a8 <WIZCHIP_WRITE_BUF>
 80049e8:	e005      	b.n	80049f6 <wiz_send_data+0x132>
  } 
  else
  {
    WIZCHIP_WRITE_BUF(dst_ptr, wizdata, len);
 80049ea:	897b      	ldrh	r3, [r7, #10]
 80049ec:	88ba      	ldrh	r2, [r7, #4]
 80049ee:	6839      	ldr	r1, [r7, #0]
 80049f0:	4618      	mov	r0, r3
 80049f2:	f7ff fdd9 	bl	80045a8 <WIZCHIP_WRITE_BUF>
  }

  ptr += len;
 80049f6:	89fa      	ldrh	r2, [r7, #14]
 80049f8:	88bb      	ldrh	r3, [r7, #4]
 80049fa:	4413      	add	r3, r2
 80049fc:	81fb      	strh	r3, [r7, #14]

  setSn_TX_WR(sn, ptr);  
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	3304      	adds	r3, #4
 8004a02:	021b      	lsls	r3, r3, #8
 8004a04:	3324      	adds	r3, #36	; 0x24
 8004a06:	461a      	mov	r2, r3
 8004a08:	89fb      	ldrh	r3, [r7, #14]
 8004a0a:	0a1b      	lsrs	r3, r3, #8
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7ff fd6c 	bl	80044f0 <WIZCHIP_WRITE>
 8004a18:	79fb      	ldrb	r3, [r7, #7]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	021b      	lsls	r3, r3, #8
 8004a1e:	3325      	adds	r3, #37	; 0x25
 8004a20:	461a      	mov	r2, r3
 8004a22:	89fb      	ldrh	r3, [r7, #14]
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	4619      	mov	r1, r3
 8004a28:	4610      	mov	r0, r2
 8004a2a:	f7ff fd61 	bl	80044f0 <WIZCHIP_WRITE>
}
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd90      	pop	{r4, r7, pc}

08004a36 <wiz_recv_data>:
It calculate the actual physical address where one has to read
the data from Receive buffer. Here also take care of the condition while it exceed
the Rx memory uper-bound of socket.
*/
void wiz_recv_data(uint8_t sn, uint8_t *wizdata, uint16_t len)
{
 8004a36:	b590      	push	{r4, r7, lr}
 8004a38:	b085      	sub	sp, #20
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	6039      	str	r1, [r7, #0]
 8004a40:	71fb      	strb	r3, [r7, #7]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;
  uint16_t size;
  uint16_t src_mask;
  uint16_t src_ptr;

  ptr = getSn_RX_RD(sn);
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	3328      	adds	r3, #40	; 0x28
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f7ff fd7c 	bl	800454c <WIZCHIP_READ>
 8004a54:	4603      	mov	r3, r0
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	b29c      	uxth	r4, r3
 8004a5c:	79fb      	ldrb	r3, [r7, #7]
 8004a5e:	3304      	adds	r3, #4
 8004a60:	021b      	lsls	r3, r3, #8
 8004a62:	3329      	adds	r3, #41	; 0x29
 8004a64:	4618      	mov	r0, r3
 8004a66:	f7ff fd71 	bl	800454c <WIZCHIP_READ>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	4423      	add	r3, r4
 8004a70:	81fb      	strh	r3, [r7, #14]
  
  src_mask = (uint32_t)ptr & getSn_RxMASK(sn);
 8004a72:	201a      	movs	r0, #26
 8004a74:	f7ff fd6a 	bl	800454c <WIZCHIP_READ>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	79fb      	ldrb	r3, [r7, #7]
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	2203      	movs	r2, #3
 8004a82:	fa02 f303 	lsl.w	r3, r2, r3
 8004a86:	ea01 0203 	and.w	r2, r1, r3
 8004a8a:	79fb      	ldrb	r3, [r7, #7]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	fa42 f303 	asr.w	r3, r2, r3
 8004a92:	2201      	movs	r2, #1
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	029b      	lsls	r3, r3, #10
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	81bb      	strh	r3, [r7, #12]
  src_ptr = (getSn_RxBASE(sn) + src_mask);
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff fe9e 	bl	80047ec <getSn_RxBASE>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	89bb      	ldrh	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	817b      	strh	r3, [r7, #10]

  
  if( (src_mask + len) > getSn_RxMAX(sn) ) 
 8004aba:	89ba      	ldrh	r2, [r7, #12]
 8004abc:	88bb      	ldrh	r3, [r7, #4]
 8004abe:	18d4      	adds	r4, r2, r3
 8004ac0:	201a      	movs	r0, #26
 8004ac2:	f7ff fd43 	bl	800454c <WIZCHIP_READ>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4619      	mov	r1, r3
 8004aca:	79fb      	ldrb	r3, [r7, #7]
 8004acc:	005b      	lsls	r3, r3, #1
 8004ace:	2203      	movs	r2, #3
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	ea01 0203 	and.w	r2, r1, r3
 8004ad8:	79fb      	ldrb	r3, [r7, #7]
 8004ada:	005b      	lsls	r3, r3, #1
 8004adc:	fa42 f303 	asr.w	r3, r2, r3
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ae6:	b29b      	uxth	r3, r3
 8004ae8:	029b      	lsls	r3, r3, #10
 8004aea:	429c      	cmp	r4, r3
 8004aec:	dd33      	ble.n	8004b56 <wiz_recv_data+0x120>
  {
    size = getSn_RxMAX(sn) - src_mask;
 8004aee:	201a      	movs	r0, #26
 8004af0:	f7ff fd2c 	bl	800454c <WIZCHIP_READ>
 8004af4:	4603      	mov	r3, r0
 8004af6:	4619      	mov	r1, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	ea01 0203 	and.w	r2, r1, r3
 8004b06:	79fb      	ldrb	r3, [r7, #7]
 8004b08:	005b      	lsls	r3, r3, #1
 8004b0a:	fa42 f303 	asr.w	r3, r2, r3
 8004b0e:	2201      	movs	r2, #1
 8004b10:	fa02 f303 	lsl.w	r3, r2, r3
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	029b      	lsls	r3, r3, #10
 8004b18:	b29a      	uxth	r2, r3
 8004b1a:	89bb      	ldrh	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	813b      	strh	r3, [r7, #8]
    WIZCHIP_READ_BUF((uint32_t)src_ptr, (uint8_t*)wizdata, size);
 8004b20:	897b      	ldrh	r3, [r7, #10]
 8004b22:	893a      	ldrh	r2, [r7, #8]
 8004b24:	6839      	ldr	r1, [r7, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f7ff fd8c 	bl	8004644 <WIZCHIP_READ_BUF>
    wizdata += size;
 8004b2c:	893b      	ldrh	r3, [r7, #8]
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	4413      	add	r3, r2
 8004b32:	603b      	str	r3, [r7, #0]
    size = len - size;
 8004b34:	88ba      	ldrh	r2, [r7, #4]
 8004b36:	893b      	ldrh	r3, [r7, #8]
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	813b      	strh	r3, [r7, #8]
	src_ptr = getSn_RxBASE(sn);
 8004b3c:	79fb      	ldrb	r3, [r7, #7]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fe54 	bl	80047ec <getSn_RxBASE>
 8004b44:	4603      	mov	r3, r0
 8004b46:	817b      	strh	r3, [r7, #10]
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, size);
 8004b48:	897b      	ldrh	r3, [r7, #10]
 8004b4a:	893a      	ldrh	r2, [r7, #8]
 8004b4c:	6839      	ldr	r1, [r7, #0]
 8004b4e:	4618      	mov	r0, r3
 8004b50:	f7ff fd78 	bl	8004644 <WIZCHIP_READ_BUF>
 8004b54:	e005      	b.n	8004b62 <wiz_recv_data+0x12c>
  } 
  else
  {
    WIZCHIP_READ_BUF(src_ptr, (uint8_t*)wizdata, len);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	88ba      	ldrh	r2, [r7, #4]
 8004b5a:	6839      	ldr	r1, [r7, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff fd71 	bl	8004644 <WIZCHIP_READ_BUF>
  }
    
  ptr += len;
 8004b62:	89fa      	ldrh	r2, [r7, #14]
 8004b64:	88bb      	ldrh	r3, [r7, #4]
 8004b66:	4413      	add	r3, r2
 8004b68:	81fb      	strh	r3, [r7, #14]
  
  setSn_RX_RD(sn, ptr);
 8004b6a:	79fb      	ldrb	r3, [r7, #7]
 8004b6c:	3304      	adds	r3, #4
 8004b6e:	021b      	lsls	r3, r3, #8
 8004b70:	3328      	adds	r3, #40	; 0x28
 8004b72:	461a      	mov	r2, r3
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	4610      	mov	r0, r2
 8004b80:	f7ff fcb6 	bl	80044f0 <WIZCHIP_WRITE>
 8004b84:	79fb      	ldrb	r3, [r7, #7]
 8004b86:	3304      	adds	r3, #4
 8004b88:	021b      	lsls	r3, r3, #8
 8004b8a:	3329      	adds	r3, #41	; 0x29
 8004b8c:	461a      	mov	r2, r3
 8004b8e:	89fb      	ldrh	r3, [r7, #14]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	4619      	mov	r1, r3
 8004b94:	4610      	mov	r0, r2
 8004b96:	f7ff fcab 	bl	80044f0 <WIZCHIP_WRITE>
}
 8004b9a:	bf00      	nop
 8004b9c:	3714      	adds	r7, #20
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd90      	pop	{r4, r7, pc}

08004ba2 <wiz_recv_ignore>:

void wiz_recv_ignore(uint8_t sn, uint16_t len)
{
 8004ba2:	b590      	push	{r4, r7, lr}
 8004ba4:	b085      	sub	sp, #20
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	4603      	mov	r3, r0
 8004baa:	460a      	mov	r2, r1
 8004bac:	71fb      	strb	r3, [r7, #7]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	80bb      	strh	r3, [r7, #4]
  uint16_t ptr;

  ptr = getSn_RX_RD(sn);
 8004bb2:	79fb      	ldrb	r3, [r7, #7]
 8004bb4:	3304      	adds	r3, #4
 8004bb6:	021b      	lsls	r3, r3, #8
 8004bb8:	3328      	adds	r3, #40	; 0x28
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff fcc6 	bl	800454c <WIZCHIP_READ>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	021b      	lsls	r3, r3, #8
 8004bc6:	b29c      	uxth	r4, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	021b      	lsls	r3, r3, #8
 8004bce:	3329      	adds	r3, #41	; 0x29
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7ff fcbb 	bl	800454c <WIZCHIP_READ>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	4423      	add	r3, r4
 8004bdc:	81fb      	strh	r3, [r7, #14]
  
  ptr += len;
 8004bde:	89fa      	ldrh	r2, [r7, #14]
 8004be0:	88bb      	ldrh	r3, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	81fb      	strh	r3, [r7, #14]
  setSn_RX_RD(sn,ptr);
 8004be6:	79fb      	ldrb	r3, [r7, #7]
 8004be8:	3304      	adds	r3, #4
 8004bea:	021b      	lsls	r3, r3, #8
 8004bec:	3328      	adds	r3, #40	; 0x28
 8004bee:	461a      	mov	r2, r3
 8004bf0:	89fb      	ldrh	r3, [r7, #14]
 8004bf2:	0a1b      	lsrs	r3, r3, #8
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	b2db      	uxtb	r3, r3
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4610      	mov	r0, r2
 8004bfc:	f7ff fc78 	bl	80044f0 <WIZCHIP_WRITE>
 8004c00:	79fb      	ldrb	r3, [r7, #7]
 8004c02:	3304      	adds	r3, #4
 8004c04:	021b      	lsls	r3, r3, #8
 8004c06:	3329      	adds	r3, #41	; 0x29
 8004c08:	461a      	mov	r2, r3
 8004c0a:	89fb      	ldrh	r3, [r7, #14]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	4619      	mov	r1, r3
 8004c10:	4610      	mov	r0, r2
 8004c12:	f7ff fc6d 	bl	80044f0 <WIZCHIP_WRITE>
}
 8004c16:	bf00      	nop
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd90      	pop	{r4, r7, pc}
	...

08004c20 <socket>:
   }while(0);              \



int8_t socket(uint8_t sn, uint8_t protocol, uint16_t port, uint8_t flag)
{
 8004c20:	b590      	push	{r4, r7, lr}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	4604      	mov	r4, r0
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4623      	mov	r3, r4
 8004c30:	71fb      	strb	r3, [r7, #7]
 8004c32:	4603      	mov	r3, r0
 8004c34:	71bb      	strb	r3, [r7, #6]
 8004c36:	460b      	mov	r3, r1
 8004c38:	80bb      	strh	r3, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	70fb      	strb	r3, [r7, #3]
	CHECK_SOCKNUM();
 8004c3e:	79fb      	ldrb	r3, [r7, #7]
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d902      	bls.n	8004c4a <socket+0x2a>
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	e0e4      	b.n	8004e14 <socket+0x1f4>
	switch(protocol)
 8004c4a:	79bb      	ldrb	r3, [r7, #6]
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d819      	bhi.n	8004c86 <socket+0x66>
 8004c52:	a201      	add	r2, pc, #4	; (adr r2, 8004c58 <socket+0x38>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c6d 	.word	0x08004c6d
 8004c5c:	08004c8d 	.word	0x08004c8d
 8004c60:	08004c8d 	.word	0x08004c8d
 8004c64:	08004c8d 	.word	0x08004c8d
 8004c68:	08004c8d 	.word	0x08004c8d
		    /*
            uint8_t taddr[4];
            getSIPR(taddr);
            */
            uint32_t taddr;
            getSIPR((uint8_t*)&taddr);
 8004c6c:	f107 030c 	add.w	r3, r7, #12
 8004c70:	2204      	movs	r2, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	200f      	movs	r0, #15
 8004c76:	f7ff fce5 	bl	8004644 <WIZCHIP_READ_BUF>
            if(taddr == 0) return SOCKERR_SOCKINIT;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d107      	bne.n	8004c90 <socket+0x70>
 8004c80:	f06f 0302 	mvn.w	r3, #2
 8004c84:	e0c6      	b.n	8004e14 <socket+0x1f4>
   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_PPPoE :
         break;
   #endif
      default :
         return SOCKERR_SOCKMODE;
 8004c86:	f06f 0304 	mvn.w	r3, #4
 8004c8a:	e0c3      	b.n	8004e14 <socket+0x1f4>
         break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <socket+0x72>
	    break;
 8004c90:	bf00      	nop
	}
	//M20150601 : For SF_TCP_ALIGN & W5300
	//if((flag & 0x06) != 0) return SOCKERR_SOCKFLAG;
	if((flag & 0x04) != 0) return SOCKERR_SOCKFLAG;
 8004c92:	78fb      	ldrb	r3, [r7, #3]
 8004c94:	f003 0304 	and.w	r3, r3, #4
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <socket+0x82>
 8004c9c:	f06f 0305 	mvn.w	r3, #5
 8004ca0:	e0b8      	b.n	8004e14 <socket+0x1f4>
#if _WIZCHIP_ == 5200
   if(flag & 0x10) return SOCKERR_SOCKFLAG;
#endif
	   
	if(flag != 0)
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d019      	beq.n	8004cdc <socket+0xbc>
	{
   	switch(protocol)
 8004ca8:	79bb      	ldrb	r3, [r7, #6]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d002      	beq.n	8004cb4 <socket+0x94>
 8004cae:	2b02      	cmp	r3, #2
 8004cb0:	d008      	beq.n	8004cc4 <socket+0xa4>
      	         if((flag & SF_MULTI_ENABLE) == 0) return SOCKERR_SOCKFLAG;
      	      }
   	      #endif
   	      break;
   	   default:
   	      break;
 8004cb2:	e018      	b.n	8004ce6 <socket+0xc6>
   		     if((flag & (SF_TCP_NODELAY|SF_IO_NONBLOCK))==0) return SOCKERR_SOCKFLAG;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d110      	bne.n	8004ce0 <socket+0xc0>
 8004cbe:	f06f 0305 	mvn.w	r3, #5
 8004cc2:	e0a7      	b.n	8004e14 <socket+0x1f4>
   	      if(flag & SF_IGMP_VER2)
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	f003 0320 	and.w	r3, r3, #32
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00a      	beq.n	8004ce4 <socket+0xc4>
   	         if((flag & SF_MULTI_ENABLE)==0) return SOCKERR_SOCKFLAG;
 8004cce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	db06      	blt.n	8004ce4 <socket+0xc4>
 8004cd6:	f06f 0305 	mvn.w	r3, #5
 8004cda:	e09b      	b.n	8004e14 <socket+0x1f4>
   	}
   }
 8004cdc:	bf00      	nop
 8004cde:	e002      	b.n	8004ce6 <socket+0xc6>
   	      break;
 8004ce0:	bf00      	nop
 8004ce2:	e000      	b.n	8004ce6 <socket+0xc6>
   	      break;
 8004ce4:	bf00      	nop
	close(sn);
 8004ce6:	79fb      	ldrb	r3, [r7, #7]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f000 f8a1 	bl	8004e30 <close>
	//M20150601
	#if _WIZCHIP_ == 5300
	   setSn_MR(sn, ((uint16_t)(protocol | (flag & 0xF0))) | (((uint16_t)(flag & 0x02)) << 7) );
    #else
	   setSn_MR(sn, (protocol | (flag & 0xF0)));
 8004cee:	79fb      	ldrb	r3, [r7, #7]
 8004cf0:	3304      	adds	r3, #4
 8004cf2:	021b      	lsls	r3, r3, #8
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cfa:	f023 030f 	bic.w	r3, r3, #15
 8004cfe:	b25a      	sxtb	r2, r3
 8004d00:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	b25b      	sxtb	r3, r3
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	4619      	mov	r1, r3
 8004d0c:	f7ff fbf0 	bl	80044f0 <WIZCHIP_WRITE>
    #endif
	if(!port)
 8004d10:	88bb      	ldrh	r3, [r7, #4]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d110      	bne.n	8004d38 <socket+0x118>
	{
	   port = sock_any_port++;
 8004d16:	4b41      	ldr	r3, [pc, #260]	; (8004e1c <socket+0x1fc>)
 8004d18:	881b      	ldrh	r3, [r3, #0]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	b291      	uxth	r1, r2
 8004d1e:	4a3f      	ldr	r2, [pc, #252]	; (8004e1c <socket+0x1fc>)
 8004d20:	8011      	strh	r1, [r2, #0]
 8004d22:	80bb      	strh	r3, [r7, #4]
	   if(sock_any_port == 0xFFF0) sock_any_port = SOCK_ANY_PORT_NUM;
 8004d24:	4b3d      	ldr	r3, [pc, #244]	; (8004e1c <socket+0x1fc>)
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d103      	bne.n	8004d38 <socket+0x118>
 8004d30:	4b3a      	ldr	r3, [pc, #232]	; (8004e1c <socket+0x1fc>)
 8004d32:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004d36:	801a      	strh	r2, [r3, #0]
	}
   setSn_PORT(sn,port);	
 8004d38:	79fb      	ldrb	r3, [r7, #7]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	021b      	lsls	r3, r3, #8
 8004d3e:	3304      	adds	r3, #4
 8004d40:	461a      	mov	r2, r3
 8004d42:	88bb      	ldrh	r3, [r7, #4]
 8004d44:	0a1b      	lsrs	r3, r3, #8
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f7ff fbcf 	bl	80044f0 <WIZCHIP_WRITE>
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	3304      	adds	r3, #4
 8004d56:	021b      	lsls	r3, r3, #8
 8004d58:	3305      	adds	r3, #5
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	88bb      	ldrh	r3, [r7, #4]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	4619      	mov	r1, r3
 8004d62:	4610      	mov	r0, r2
 8004d64:	f7ff fbc4 	bl	80044f0 <WIZCHIP_WRITE>
   setSn_CR(sn,Sn_CR_OPEN);
 8004d68:	79fb      	ldrb	r3, [r7, #7]
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	3301      	adds	r3, #1
 8004d70:	2101      	movs	r1, #1
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7ff fbbc 	bl	80044f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004d78:	bf00      	nop
 8004d7a:	79fb      	ldrb	r3, [r7, #7]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	3301      	adds	r3, #1
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7ff fbe2 	bl	800454c <WIZCHIP_READ>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1f5      	bne.n	8004d7a <socket+0x15a>
   //A20150401 : For release the previous sock_io_mode
   sock_io_mode &= ~(1 <<sn);
 8004d8e:	79fb      	ldrb	r3, [r7, #7]
 8004d90:	2201      	movs	r2, #1
 8004d92:	fa02 f303 	lsl.w	r3, r2, r3
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	43db      	mvns	r3, r3
 8004d9a:	b21a      	sxth	r2, r3
 8004d9c:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <socket+0x200>)
 8004d9e:	881b      	ldrh	r3, [r3, #0]
 8004da0:	b21b      	sxth	r3, r3
 8004da2:	4013      	ands	r3, r2
 8004da4:	b21b      	sxth	r3, r3
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <socket+0x200>)
 8004daa:	801a      	strh	r2, [r3, #0]
   //
	sock_io_mode |= ((flag & SF_IO_NONBLOCK) << sn);   
 8004dac:	78fb      	ldrb	r3, [r7, #3]
 8004dae:	f003 0201 	and.w	r2, r3, #1
 8004db2:	79fb      	ldrb	r3, [r7, #7]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	b21a      	sxth	r2, r3
 8004dba:	4b19      	ldr	r3, [pc, #100]	; (8004e20 <socket+0x200>)
 8004dbc:	881b      	ldrh	r3, [r3, #0]
 8004dbe:	b21b      	sxth	r3, r3
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	b21b      	sxth	r3, r3
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	4b16      	ldr	r3, [pc, #88]	; (8004e20 <socket+0x200>)
 8004dc8:	801a      	strh	r2, [r3, #0]
   sock_is_sending &= ~(1<<sn);
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	b21a      	sxth	r2, r3
 8004dd8:	4b12      	ldr	r3, [pc, #72]	; (8004e24 <socket+0x204>)
 8004dda:	881b      	ldrh	r3, [r3, #0]
 8004ddc:	b21b      	sxth	r3, r3
 8004dde:	4013      	ands	r3, r2
 8004de0:	b21b      	sxth	r3, r3
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	4b0f      	ldr	r3, [pc, #60]	; (8004e24 <socket+0x204>)
 8004de6:	801a      	strh	r2, [r3, #0]
   sock_remained_size[sn] = 0;
 8004de8:	79fb      	ldrb	r3, [r7, #7]
 8004dea:	4a0f      	ldr	r2, [pc, #60]	; (8004e28 <socket+0x208>)
 8004dec:	2100      	movs	r1, #0
 8004dee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   //M20150601 : repalce 0 with PACK_COMPLETED
   //sock_pack_info[sn] = 0;
   sock_pack_info[sn] = PACK_COMPLETED;
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <socket+0x20c>)
 8004df6:	2100      	movs	r1, #0
 8004df8:	54d1      	strb	r1, [r2, r3]
   //
   while(getSn_SR(sn) == SOCK_CLOSED);
 8004dfa:	bf00      	nop
 8004dfc:	79fb      	ldrb	r3, [r7, #7]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	3303      	adds	r3, #3
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7ff fba1 	bl	800454c <WIZCHIP_READ>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f5      	beq.n	8004dfc <socket+0x1dc>
   return (int8_t)sn;
 8004e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
}	   
 8004e14:	4618      	mov	r0, r3
 8004e16:	3714      	adds	r7, #20
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd90      	pop	{r4, r7, pc}
 8004e1c:	20000018 	.word	0x20000018
 8004e20:	2000868c 	.word	0x2000868c
 8004e24:	2000868e 	.word	0x2000868e
 8004e28:	20008690 	.word	0x20008690
 8004e2c:	20008698 	.word	0x20008698

08004e30 <close>:

int8_t close(uint8_t sn)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	71fb      	strb	r3, [r7, #7]
	CHECK_SOCKNUM();
 8004e3a:	79fb      	ldrb	r3, [r7, #7]
 8004e3c:	2b04      	cmp	r3, #4
 8004e3e:	d902      	bls.n	8004e46 <close+0x16>
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	e04d      	b.n	8004ee2 <close+0xb2>
      while(getSn_CR(sn) != 0);
      while(getSn_SR(sn) != SOCK_UDP);
      sendto(sn,destip,1,destip,0x3000); // send the dummy data to an unknown destination(0.0.0.1).
   };   
#endif 
	setSn_CR(sn,Sn_CR_CLOSE);
 8004e46:	79fb      	ldrb	r3, [r7, #7]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	2110      	movs	r1, #16
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7ff fb4d 	bl	80044f0 <WIZCHIP_WRITE>
   /* wait to process the command... */
	while( getSn_CR(sn) );
 8004e56:	bf00      	nop
 8004e58:	79fb      	ldrb	r3, [r7, #7]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	3301      	adds	r3, #1
 8004e60:	4618      	mov	r0, r3
 8004e62:	f7ff fb73 	bl	800454c <WIZCHIP_READ>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1f5      	bne.n	8004e58 <close+0x28>
	/* clear all interrupt of the socket. */
	setSn_IR(sn, 0xFF);
 8004e6c:	79fb      	ldrb	r3, [r7, #7]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	021b      	lsls	r3, r3, #8
 8004e72:	3302      	adds	r3, #2
 8004e74:	21ff      	movs	r1, #255	; 0xff
 8004e76:	4618      	mov	r0, r3
 8004e78:	f7ff fb3a 	bl	80044f0 <WIZCHIP_WRITE>
	//A20150401 : Release the sock_io_mode of socket n.
	sock_io_mode &= ~(1<<sn);
 8004e7c:	79fb      	ldrb	r3, [r7, #7]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	b21b      	sxth	r3, r3
 8004e86:	43db      	mvns	r3, r3
 8004e88:	b21a      	sxth	r2, r3
 8004e8a:	4b18      	ldr	r3, [pc, #96]	; (8004eec <close+0xbc>)
 8004e8c:	881b      	ldrh	r3, [r3, #0]
 8004e8e:	b21b      	sxth	r3, r3
 8004e90:	4013      	ands	r3, r2
 8004e92:	b21b      	sxth	r3, r3
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	4b15      	ldr	r3, [pc, #84]	; (8004eec <close+0xbc>)
 8004e98:	801a      	strh	r2, [r3, #0]
	//
	sock_is_sending &= ~(1<<sn);
 8004e9a:	79fb      	ldrb	r3, [r7, #7]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea2:	b21b      	sxth	r3, r3
 8004ea4:	43db      	mvns	r3, r3
 8004ea6:	b21a      	sxth	r2, r3
 8004ea8:	4b11      	ldr	r3, [pc, #68]	; (8004ef0 <close+0xc0>)
 8004eaa:	881b      	ldrh	r3, [r3, #0]
 8004eac:	b21b      	sxth	r3, r3
 8004eae:	4013      	ands	r3, r2
 8004eb0:	b21b      	sxth	r3, r3
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <close+0xc0>)
 8004eb6:	801a      	strh	r2, [r3, #0]
	sock_remained_size[sn] = 0;
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	4a0e      	ldr	r2, [pc, #56]	; (8004ef4 <close+0xc4>)
 8004ebc:	2100      	movs	r1, #0
 8004ebe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	sock_pack_info[sn] = 0;
 8004ec2:	79fb      	ldrb	r3, [r7, #7]
 8004ec4:	4a0c      	ldr	r2, [pc, #48]	; (8004ef8 <close+0xc8>)
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	54d1      	strb	r1, [r2, r3]
	while(getSn_SR(sn) != SOCK_CLOSED);
 8004eca:	bf00      	nop
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	021b      	lsls	r3, r3, #8
 8004ed2:	3303      	adds	r3, #3
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	f7ff fb39 	bl	800454c <WIZCHIP_READ>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1f5      	bne.n	8004ecc <close+0x9c>
	return SOCK_OK;
 8004ee0:	2301      	movs	r3, #1
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3708      	adds	r7, #8
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	2000868c 	.word	0x2000868c
 8004ef0:	2000868e 	.word	0x2000868e
 8004ef4:	20008690 	.word	0x20008690
 8004ef8:	20008698 	.word	0x20008698

08004efc <connect>:
   return SOCK_OK;
}


int8_t connect(uint8_t sn, uint8_t * addr, uint16_t port)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	4603      	mov	r3, r0
 8004f04:	6039      	str	r1, [r7, #0]
 8004f06:	71fb      	strb	r3, [r7, #7]
 8004f08:	4613      	mov	r3, r2
 8004f0a:	80bb      	strh	r3, [r7, #4]
   CHECK_SOCKNUM();
 8004f0c:	79fb      	ldrb	r3, [r7, #7]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d902      	bls.n	8004f18 <connect+0x1c>
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	e0b1      	b.n	800507c <connect+0x180>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8004f18:	79fb      	ldrb	r3, [r7, #7]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	021b      	lsls	r3, r3, #8
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7ff fb14 	bl	800454c <WIZCHIP_READ>
 8004f24:	4603      	mov	r3, r0
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d002      	beq.n	8004f34 <connect+0x38>
 8004f2e:	f06f 0304 	mvn.w	r3, #4
 8004f32:	e0a3      	b.n	800507c <connect+0x180>
   CHECK_SOCKINIT();
 8004f34:	79fb      	ldrb	r3, [r7, #7]
 8004f36:	3304      	adds	r3, #4
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	3303      	adds	r3, #3
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f7ff fb05 	bl	800454c <WIZCHIP_READ>
 8004f42:	4603      	mov	r3, r0
 8004f44:	2b13      	cmp	r3, #19
 8004f46:	d002      	beq.n	8004f4e <connect+0x52>
 8004f48:	f06f 0302 	mvn.w	r3, #2
 8004f4c:	e096      	b.n	800507c <connect+0x180>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if( *((uint32_t*)addr) == 0xFFFFFFFF || *((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   {
      uint32_t taddr;
      taddr = ((uint32_t)addr[0] & 0x000000FF);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	683a      	ldr	r2, [r7, #0]
 8004f5a:	3201      	adds	r2, #1
 8004f5c:	7812      	ldrb	r2, [r2, #0]
 8004f5e:	4413      	add	r3, r2
 8004f60:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	3202      	adds	r2, #2
 8004f6a:	7812      	ldrb	r2, [r2, #0]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	3203      	adds	r2, #3
 8004f78:	7812      	ldrb	r2, [r2, #0]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
      if( taddr == 0xFFFFFFFF || taddr == 0) return SOCKERR_IPINVALID;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f84:	d002      	beq.n	8004f8c <connect+0x90>
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d102      	bne.n	8004f92 <connect+0x96>
 8004f8c:	f06f 030b 	mvn.w	r3, #11
 8004f90:	e074      	b.n	800507c <connect+0x180>
   }
   //
	
	if(port == 0) return SOCKERR_PORTZERO;
 8004f92:	88bb      	ldrh	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d102      	bne.n	8004f9e <connect+0xa2>
 8004f98:	f06f 030a 	mvn.w	r3, #10
 8004f9c:	e06e      	b.n	800507c <connect+0x180>
	setSn_DIPR(sn,addr);
 8004f9e:	79fb      	ldrb	r3, [r7, #7]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	021b      	lsls	r3, r3, #8
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	2204      	movs	r2, #4
 8004fa8:	6839      	ldr	r1, [r7, #0]
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7ff fafc 	bl	80045a8 <WIZCHIP_WRITE_BUF>
	setSn_DPORT(sn,port);
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	3304      	adds	r3, #4
 8004fb4:	021b      	lsls	r3, r3, #8
 8004fb6:	3310      	adds	r3, #16
 8004fb8:	461a      	mov	r2, r3
 8004fba:	88bb      	ldrh	r3, [r7, #4]
 8004fbc:	0a1b      	lsrs	r3, r3, #8
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4610      	mov	r0, r2
 8004fc6:	f7ff fa93 	bl	80044f0 <WIZCHIP_WRITE>
 8004fca:	79fb      	ldrb	r3, [r7, #7]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	021b      	lsls	r3, r3, #8
 8004fd0:	3311      	adds	r3, #17
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	88bb      	ldrh	r3, [r7, #4]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	4610      	mov	r0, r2
 8004fdc:	f7ff fa88 	bl	80044f0 <WIZCHIP_WRITE>
	setSn_CR(sn,Sn_CR_CONNECT);
 8004fe0:	79fb      	ldrb	r3, [r7, #7]
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	021b      	lsls	r3, r3, #8
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	2104      	movs	r1, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7ff fa80 	bl	80044f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 8004ff0:	bf00      	nop
 8004ff2:	79fb      	ldrb	r3, [r7, #7]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7ff faa6 	bl	800454c <WIZCHIP_READ>
 8005000:	4603      	mov	r3, r0
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f5      	bne.n	8004ff2 <connect+0xf6>
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 8005006:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <connect+0x188>)
 8005008:	881b      	ldrh	r3, [r3, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	79fb      	ldrb	r3, [r7, #7]
 800500e:	fa42 f303 	asr.w	r3, r2, r3
 8005012:	f003 0301 	and.w	r3, r3, #1
 8005016:	2b00      	cmp	r3, #0
 8005018:	d025      	beq.n	8005066 <connect+0x16a>
 800501a:	2300      	movs	r3, #0
 800501c:	e02e      	b.n	800507c <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
   {
		if (getSn_IR(sn) & Sn_IR_TIMEOUT)
 800501e:	79fb      	ldrb	r3, [r7, #7]
 8005020:	3304      	adds	r3, #4
 8005022:	021b      	lsls	r3, r3, #8
 8005024:	3302      	adds	r3, #2
 8005026:	4618      	mov	r0, r3
 8005028:	f7ff fa90 	bl	800454c <WIZCHIP_READ>
 800502c:	4603      	mov	r3, r0
 800502e:	f003 0308 	and.w	r3, r3, #8
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00a      	beq.n	800504c <connect+0x150>
		{
			setSn_IR(sn, Sn_IR_TIMEOUT);
 8005036:	79fb      	ldrb	r3, [r7, #7]
 8005038:	3304      	adds	r3, #4
 800503a:	021b      	lsls	r3, r3, #8
 800503c:	3302      	adds	r3, #2
 800503e:	2108      	movs	r1, #8
 8005040:	4618      	mov	r0, r3
 8005042:	f7ff fa55 	bl	80044f0 <WIZCHIP_WRITE>
            return SOCKERR_TIMEOUT;
 8005046:	f06f 030c 	mvn.w	r3, #12
 800504a:	e017      	b.n	800507c <connect+0x180>
		}

		if (getSn_SR(sn) == SOCK_CLOSED)
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	3304      	adds	r3, #4
 8005050:	021b      	lsls	r3, r3, #8
 8005052:	3303      	adds	r3, #3
 8005054:	4618      	mov	r0, r3
 8005056:	f7ff fa79 	bl	800454c <WIZCHIP_READ>
 800505a:	4603      	mov	r3, r0
 800505c:	2b00      	cmp	r3, #0
 800505e:	d102      	bne.n	8005066 <connect+0x16a>
		{
			return SOCKERR_SOCKCLOSED;
 8005060:	f06f 0303 	mvn.w	r3, #3
 8005064:	e00a      	b.n	800507c <connect+0x180>
   while(getSn_SR(sn) != SOCK_ESTABLISHED)
 8005066:	79fb      	ldrb	r3, [r7, #7]
 8005068:	3304      	adds	r3, #4
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	3303      	adds	r3, #3
 800506e:	4618      	mov	r0, r3
 8005070:	f7ff fa6c 	bl	800454c <WIZCHIP_READ>
 8005074:	4603      	mov	r3, r0
 8005076:	2b17      	cmp	r3, #23
 8005078:	d1d1      	bne.n	800501e <connect+0x122>
		}
	}
   
   return SOCK_OK;
 800507a:	2301      	movs	r3, #1
}
 800507c:	4618      	mov	r0, r3
 800507e:	3710      	adds	r7, #16
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}
 8005084:	2000868c 	.word	0x2000868c

08005088 <disconnect>:

int8_t disconnect(uint8_t sn)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b082      	sub	sp, #8
 800508c:	af00      	add	r7, sp, #0
 800508e:	4603      	mov	r3, r0
 8005090:	71fb      	strb	r3, [r7, #7]
   CHECK_SOCKNUM();
 8005092:	79fb      	ldrb	r3, [r7, #7]
 8005094:	2b04      	cmp	r3, #4
 8005096:	d902      	bls.n	800509e <disconnect+0x16>
 8005098:	f04f 33ff 	mov.w	r3, #4294967295
 800509c:	e059      	b.n	8005152 <disconnect+0xca>
   CHECK_SOCKMODE(Sn_MR_TCP);
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	3304      	adds	r3, #4
 80050a2:	021b      	lsls	r3, r3, #8
 80050a4:	4618      	mov	r0, r3
 80050a6:	f7ff fa51 	bl	800454c <WIZCHIP_READ>
 80050aa:	4603      	mov	r3, r0
 80050ac:	f003 030f 	and.w	r3, r3, #15
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d002      	beq.n	80050ba <disconnect+0x32>
 80050b4:	f06f 0304 	mvn.w	r3, #4
 80050b8:	e04b      	b.n	8005152 <disconnect+0xca>
	setSn_CR(sn,Sn_CR_DISCON);
 80050ba:	79fb      	ldrb	r3, [r7, #7]
 80050bc:	3304      	adds	r3, #4
 80050be:	021b      	lsls	r3, r3, #8
 80050c0:	3301      	adds	r3, #1
 80050c2:	2108      	movs	r1, #8
 80050c4:	4618      	mov	r0, r3
 80050c6:	f7ff fa13 	bl	80044f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80050ca:	bf00      	nop
 80050cc:	79fb      	ldrb	r3, [r7, #7]
 80050ce:	3304      	adds	r3, #4
 80050d0:	021b      	lsls	r3, r3, #8
 80050d2:	3301      	adds	r3, #1
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff fa39 	bl	800454c <WIZCHIP_READ>
 80050da:	4603      	mov	r3, r0
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1f5      	bne.n	80050cc <disconnect+0x44>
	sock_is_sending &= ~(1<<sn);
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	2201      	movs	r2, #1
 80050e4:	fa02 f303 	lsl.w	r3, r2, r3
 80050e8:	b21b      	sxth	r3, r3
 80050ea:	43db      	mvns	r3, r3
 80050ec:	b21a      	sxth	r2, r3
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <disconnect+0xd4>)
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	b21b      	sxth	r3, r3
 80050f4:	4013      	ands	r3, r2
 80050f6:	b21b      	sxth	r3, r3
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	4b18      	ldr	r3, [pc, #96]	; (800515c <disconnect+0xd4>)
 80050fc:	801a      	strh	r2, [r3, #0]
   if(sock_io_mode & (1<<sn)) return SOCK_BUSY;
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <disconnect+0xd8>)
 8005100:	881b      	ldrh	r3, [r3, #0]
 8005102:	461a      	mov	r2, r3
 8005104:	79fb      	ldrb	r3, [r7, #7]
 8005106:	fa42 f303 	asr.w	r3, r2, r3
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d014      	beq.n	800513c <disconnect+0xb4>
 8005112:	2300      	movs	r3, #0
 8005114:	e01d      	b.n	8005152 <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
	{
	   if(getSn_IR(sn) & Sn_IR_TIMEOUT)
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	3304      	adds	r3, #4
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	3302      	adds	r3, #2
 800511e:	4618      	mov	r0, r3
 8005120:	f7ff fa14 	bl	800454c <WIZCHIP_READ>
 8005124:	4603      	mov	r3, r0
 8005126:	f003 0308 	and.w	r3, r3, #8
 800512a:	2b00      	cmp	r3, #0
 800512c:	d006      	beq.n	800513c <disconnect+0xb4>
	   {
	      close(sn);
 800512e:	79fb      	ldrb	r3, [r7, #7]
 8005130:	4618      	mov	r0, r3
 8005132:	f7ff fe7d 	bl	8004e30 <close>
	      return SOCKERR_TIMEOUT;
 8005136:	f06f 030c 	mvn.w	r3, #12
 800513a:	e00a      	b.n	8005152 <disconnect+0xca>
	while(getSn_SR(sn) != SOCK_CLOSED)
 800513c:	79fb      	ldrb	r3, [r7, #7]
 800513e:	3304      	adds	r3, #4
 8005140:	021b      	lsls	r3, r3, #8
 8005142:	3303      	adds	r3, #3
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff fa01 	bl	800454c <WIZCHIP_READ>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1e2      	bne.n	8005116 <disconnect+0x8e>
	   }
	}
	return SOCK_OK;
 8005150:	2301      	movs	r3, #1
}
 8005152:	4618      	mov	r0, r3
 8005154:	3708      	adds	r7, #8
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	2000868e 	.word	0x2000868e
 8005160:	2000868c 	.word	0x2000868c

08005164 <send>:

int32_t send(uint8_t sn, uint8_t * buf, uint16_t len)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	6039      	str	r1, [r7, #0]
 800516e:	71fb      	strb	r3, [r7, #7]
 8005170:	4613      	mov	r3, r2
 8005172:	80bb      	strh	r3, [r7, #4]
   uint8_t tmp=0;
 8005174:	2300      	movs	r3, #0
 8005176:	73fb      	strb	r3, [r7, #15]
   uint16_t freesize=0;
 8005178:	2300      	movs	r3, #0
 800517a:	81bb      	strh	r3, [r7, #12]
   
   CHECK_SOCKNUM();
 800517c:	79fb      	ldrb	r3, [r7, #7]
 800517e:	2b04      	cmp	r3, #4
 8005180:	d902      	bls.n	8005188 <send+0x24>
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	e0d8      	b.n	800533a <send+0x1d6>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005188:	79fb      	ldrb	r3, [r7, #7]
 800518a:	3304      	adds	r3, #4
 800518c:	021b      	lsls	r3, r3, #8
 800518e:	4618      	mov	r0, r3
 8005190:	f7ff f9dc 	bl	800454c <WIZCHIP_READ>
 8005194:	4603      	mov	r3, r0
 8005196:	f003 030f 	and.w	r3, r3, #15
 800519a:	2b01      	cmp	r3, #1
 800519c:	d002      	beq.n	80051a4 <send+0x40>
 800519e:	f06f 0304 	mvn.w	r3, #4
 80051a2:	e0ca      	b.n	800533a <send+0x1d6>
   CHECK_SOCKDATA();
 80051a4:	88bb      	ldrh	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d102      	bne.n	80051b0 <send+0x4c>
 80051aa:	f06f 030d 	mvn.w	r3, #13
 80051ae:	e0c4      	b.n	800533a <send+0x1d6>
   tmp = getSn_SR(sn);
 80051b0:	79fb      	ldrb	r3, [r7, #7]
 80051b2:	3304      	adds	r3, #4
 80051b4:	021b      	lsls	r3, r3, #8
 80051b6:	3303      	adds	r3, #3
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7ff f9c7 	bl	800454c <WIZCHIP_READ>
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
   if(tmp != SOCK_ESTABLISHED && tmp != SOCK_CLOSE_WAIT) return SOCKERR_SOCKSTATUS;
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b17      	cmp	r3, #23
 80051c6:	d005      	beq.n	80051d4 <send+0x70>
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b1c      	cmp	r3, #28
 80051cc:	d002      	beq.n	80051d4 <send+0x70>
 80051ce:	f06f 0306 	mvn.w	r3, #6
 80051d2:	e0b2      	b.n	800533a <send+0x1d6>
   if( sock_is_sending & (1<<sn) )
 80051d4:	4b5b      	ldr	r3, [pc, #364]	; (8005344 <send+0x1e0>)
 80051d6:	881b      	ldrh	r3, [r3, #0]
 80051d8:	461a      	mov	r2, r3
 80051da:	79fb      	ldrb	r3, [r7, #7]
 80051dc:	fa42 f303 	asr.w	r3, r2, r3
 80051e0:	f003 0301 	and.w	r3, r3, #1
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d033      	beq.n	8005250 <send+0xec>
   {
      tmp = getSn_IR(sn);
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	3304      	adds	r3, #4
 80051ec:	021b      	lsls	r3, r3, #8
 80051ee:	3302      	adds	r3, #2
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7ff f9ab 	bl	800454c <WIZCHIP_READ>
 80051f6:	4603      	mov	r3, r0
 80051f8:	73fb      	strb	r3, [r7, #15]
      if(tmp & Sn_IR_SENDOK)
 80051fa:	7bfb      	ldrb	r3, [r7, #15]
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	d017      	beq.n	8005234 <send+0xd0>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	3304      	adds	r3, #4
 8005208:	021b      	lsls	r3, r3, #8
 800520a:	3302      	adds	r3, #2
 800520c:	2110      	movs	r1, #16
 800520e:	4618      	mov	r0, r3
 8005210:	f7ff f96e 	bl	80044f0 <WIZCHIP_WRITE>
               setSn_CR(sn,Sn_CR_SEND);
               while(getSn_CR(sn));
               return SOCK_BUSY;
            }
         #endif
         sock_is_sending &= ~(1<<sn);         
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2201      	movs	r2, #1
 8005218:	fa02 f303 	lsl.w	r3, r2, r3
 800521c:	b21b      	sxth	r3, r3
 800521e:	43db      	mvns	r3, r3
 8005220:	b21a      	sxth	r2, r3
 8005222:	4b48      	ldr	r3, [pc, #288]	; (8005344 <send+0x1e0>)
 8005224:	881b      	ldrh	r3, [r3, #0]
 8005226:	b21b      	sxth	r3, r3
 8005228:	4013      	ands	r3, r2
 800522a:	b21b      	sxth	r3, r3
 800522c:	b29a      	uxth	r2, r3
 800522e:	4b45      	ldr	r3, [pc, #276]	; (8005344 <send+0x1e0>)
 8005230:	801a      	strh	r2, [r3, #0]
 8005232:	e00d      	b.n	8005250 <send+0xec>
      }
      else if(tmp & Sn_IR_TIMEOUT)
 8005234:	7bfb      	ldrb	r3, [r7, #15]
 8005236:	f003 0308 	and.w	r3, r3, #8
 800523a:	2b00      	cmp	r3, #0
 800523c:	d006      	beq.n	800524c <send+0xe8>
      {
         close(sn);
 800523e:	79fb      	ldrb	r3, [r7, #7]
 8005240:	4618      	mov	r0, r3
 8005242:	f7ff fdf5 	bl	8004e30 <close>
         return SOCKERR_TIMEOUT;
 8005246:	f06f 030c 	mvn.w	r3, #12
 800524a:	e076      	b.n	800533a <send+0x1d6>
      }
      else return SOCK_BUSY;
 800524c:	2300      	movs	r3, #0
 800524e:	e074      	b.n	800533a <send+0x1d6>
   }
   freesize = getSn_TxMAX(sn);
 8005250:	201b      	movs	r0, #27
 8005252:	f7ff f97b 	bl	800454c <WIZCHIP_READ>
 8005256:	4603      	mov	r3, r0
 8005258:	4619      	mov	r1, r3
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	2203      	movs	r2, #3
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	ea01 0203 	and.w	r2, r1, r3
 8005268:	79fb      	ldrb	r3, [r7, #7]
 800526a:	005b      	lsls	r3, r3, #1
 800526c:	fa42 f303 	asr.w	r3, r2, r3
 8005270:	2201      	movs	r2, #1
 8005272:	fa02 f303 	lsl.w	r3, r2, r3
 8005276:	b29b      	uxth	r3, r3
 8005278:	029b      	lsls	r3, r3, #10
 800527a:	81bb      	strh	r3, [r7, #12]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800527c:	88ba      	ldrh	r2, [r7, #4]
 800527e:	89bb      	ldrh	r3, [r7, #12]
 8005280:	429a      	cmp	r2, r3
 8005282:	d901      	bls.n	8005288 <send+0x124>
 8005284:	89bb      	ldrh	r3, [r7, #12]
 8005286:	80bb      	strh	r3, [r7, #4]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 8005288:	79fb      	ldrb	r3, [r7, #7]
 800528a:	4618      	mov	r0, r3
 800528c:	f7ff fa28 	bl	80046e0 <getSn_TX_FSR>
 8005290:	4603      	mov	r3, r0
 8005292:	81bb      	strh	r3, [r7, #12]
      tmp = getSn_SR(sn);
 8005294:	79fb      	ldrb	r3, [r7, #7]
 8005296:	3304      	adds	r3, #4
 8005298:	021b      	lsls	r3, r3, #8
 800529a:	3303      	adds	r3, #3
 800529c:	4618      	mov	r0, r3
 800529e:	f7ff f955 	bl	800454c <WIZCHIP_READ>
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]
      if ((tmp != SOCK_ESTABLISHED) && (tmp != SOCK_CLOSE_WAIT))
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
 80052a8:	2b17      	cmp	r3, #23
 80052aa:	d009      	beq.n	80052c0 <send+0x15c>
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b1c      	cmp	r3, #28
 80052b0:	d006      	beq.n	80052c0 <send+0x15c>
      {
         close(sn);
 80052b2:	79fb      	ldrb	r3, [r7, #7]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f7ff fdbb 	bl	8004e30 <close>
         return SOCKERR_SOCKSTATUS;
 80052ba:	f06f 0306 	mvn.w	r3, #6
 80052be:	e03c      	b.n	800533a <send+0x1d6>
      }
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 80052c0:	4b21      	ldr	r3, [pc, #132]	; (8005348 <send+0x1e4>)
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	461a      	mov	r2, r3
 80052c6:	79fb      	ldrb	r3, [r7, #7]
 80052c8:	fa42 f303 	asr.w	r3, r2, r3
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d005      	beq.n	80052e0 <send+0x17c>
 80052d4:	88ba      	ldrh	r2, [r7, #4]
 80052d6:	89bb      	ldrh	r3, [r7, #12]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d901      	bls.n	80052e0 <send+0x17c>
 80052dc:	2300      	movs	r3, #0
 80052de:	e02c      	b.n	800533a <send+0x1d6>
      if(len <= freesize) break;
 80052e0:	88ba      	ldrh	r2, [r7, #4]
 80052e2:	89bb      	ldrh	r3, [r7, #12]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d900      	bls.n	80052ea <send+0x186>
      freesize = getSn_TX_FSR(sn);
 80052e8:	e7ce      	b.n	8005288 <send+0x124>
      if(len <= freesize) break;
 80052ea:	bf00      	nop
   }
   wiz_send_data(sn, buf, len);
 80052ec:	88ba      	ldrh	r2, [r7, #4]
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	6839      	ldr	r1, [r7, #0]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff fae6 	bl	80048c4 <wiz_send_data>

   #if _WIZCHIP_ == 5300
      setSn_TX_WRSR(sn,len);
   #endif
   
   setSn_CR(sn,Sn_CR_SEND);
 80052f8:	79fb      	ldrb	r3, [r7, #7]
 80052fa:	3304      	adds	r3, #4
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	3301      	adds	r3, #1
 8005300:	2120      	movs	r1, #32
 8005302:	4618      	mov	r0, r3
 8005304:	f7ff f8f4 	bl	80044f0 <WIZCHIP_WRITE>
   /* wait to process the command... */
   while(getSn_CR(sn));
 8005308:	bf00      	nop
 800530a:	79fb      	ldrb	r3, [r7, #7]
 800530c:	3304      	adds	r3, #4
 800530e:	021b      	lsls	r3, r3, #8
 8005310:	3301      	adds	r3, #1
 8005312:	4618      	mov	r0, r3
 8005314:	f7ff f91a 	bl	800454c <WIZCHIP_READ>
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1f5      	bne.n	800530a <send+0x1a6>
   sock_is_sending |= (1 << sn);
 800531e:	79fb      	ldrb	r3, [r7, #7]
 8005320:	2201      	movs	r2, #1
 8005322:	fa02 f303 	lsl.w	r3, r2, r3
 8005326:	b21a      	sxth	r2, r3
 8005328:	4b06      	ldr	r3, [pc, #24]	; (8005344 <send+0x1e0>)
 800532a:	881b      	ldrh	r3, [r3, #0]
 800532c:	b21b      	sxth	r3, r3
 800532e:	4313      	orrs	r3, r2
 8005330:	b21b      	sxth	r3, r3
 8005332:	b29a      	uxth	r2, r3
 8005334:	4b03      	ldr	r3, [pc, #12]	; (8005344 <send+0x1e0>)
 8005336:	801a      	strh	r2, [r3, #0]
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005338:	88bb      	ldrh	r3, [r7, #4]
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2000868e 	.word	0x2000868e
 8005348:	2000868c 	.word	0x2000868c

0800534c <recv>:


int32_t recv(uint8_t sn, uint8_t * buf, uint16_t len)
{
 800534c:	b590      	push	{r4, r7, lr}
 800534e:	b085      	sub	sp, #20
 8005350:	af00      	add	r7, sp, #0
 8005352:	4603      	mov	r3, r0
 8005354:	6039      	str	r1, [r7, #0]
 8005356:	71fb      	strb	r3, [r7, #7]
 8005358:	4613      	mov	r3, r2
 800535a:	80bb      	strh	r3, [r7, #4]
   uint8_t  tmp = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	73fb      	strb	r3, [r7, #15]
   uint16_t recvsize = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	81bb      	strh	r3, [r7, #12]
#if   _WIZCHIP_ == 5300
   uint8_t head[2];
   uint16_t mr;
#endif
//
   CHECK_SOCKNUM();
 8005364:	79fb      	ldrb	r3, [r7, #7]
 8005366:	2b04      	cmp	r3, #4
 8005368:	d902      	bls.n	8005370 <recv+0x24>
 800536a:	f04f 33ff 	mov.w	r3, #4294967295
 800536e:	e0a8      	b.n	80054c2 <recv+0x176>
   CHECK_SOCKMODE(Sn_MR_TCP);
 8005370:	79fb      	ldrb	r3, [r7, #7]
 8005372:	3304      	adds	r3, #4
 8005374:	021b      	lsls	r3, r3, #8
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f8e8 	bl	800454c <WIZCHIP_READ>
 800537c:	4603      	mov	r3, r0
 800537e:	f003 030f 	and.w	r3, r3, #15
 8005382:	2b01      	cmp	r3, #1
 8005384:	d002      	beq.n	800538c <recv+0x40>
 8005386:	f06f 0304 	mvn.w	r3, #4
 800538a:	e09a      	b.n	80054c2 <recv+0x176>
   CHECK_SOCKDATA();
 800538c:	88bb      	ldrh	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d102      	bne.n	8005398 <recv+0x4c>
 8005392:	f06f 030d 	mvn.w	r3, #13
 8005396:	e094      	b.n	80054c2 <recv+0x176>
   
   recvsize = getSn_RxMAX(sn);
 8005398:	201a      	movs	r0, #26
 800539a:	f7ff f8d7 	bl	800454c <WIZCHIP_READ>
 800539e:	4603      	mov	r3, r0
 80053a0:	4619      	mov	r1, r3
 80053a2:	79fb      	ldrb	r3, [r7, #7]
 80053a4:	005b      	lsls	r3, r3, #1
 80053a6:	2203      	movs	r2, #3
 80053a8:	fa02 f303 	lsl.w	r3, r2, r3
 80053ac:	ea01 0203 	and.w	r2, r1, r3
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	fa42 f303 	asr.w	r3, r2, r3
 80053b8:	2201      	movs	r2, #1
 80053ba:	fa02 f303 	lsl.w	r3, r2, r3
 80053be:	b29b      	uxth	r3, r3
 80053c0:	029b      	lsls	r3, r3, #10
 80053c2:	81bb      	strh	r3, [r7, #12]
   if(recvsize < len) len = recvsize;
 80053c4:	89ba      	ldrh	r2, [r7, #12]
 80053c6:	88bb      	ldrh	r3, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d201      	bcs.n	80053d0 <recv+0x84>
 80053cc:	89bb      	ldrh	r3, [r7, #12]
 80053ce:	80bb      	strh	r3, [r7, #4]
   {
#endif
//
      while(1)
      {
         recvsize = getSn_RX_RSR(sn);
 80053d0:	79fb      	ldrb	r3, [r7, #7]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7ff f9c7 	bl	8004766 <getSn_RX_RSR>
 80053d8:	4603      	mov	r3, r0
 80053da:	81bb      	strh	r3, [r7, #12]
         tmp = getSn_SR(sn);
 80053dc:	79fb      	ldrb	r3, [r7, #7]
 80053de:	3304      	adds	r3, #4
 80053e0:	021b      	lsls	r3, r3, #8
 80053e2:	3303      	adds	r3, #3
 80053e4:	4618      	mov	r0, r3
 80053e6:	f7ff f8b1 	bl	800454c <WIZCHIP_READ>
 80053ea:	4603      	mov	r3, r0
 80053ec:	73fb      	strb	r3, [r7, #15]
         if (tmp != SOCK_ESTABLISHED)
 80053ee:	7bfb      	ldrb	r3, [r7, #15]
 80053f0:	2b17      	cmp	r3, #23
 80053f2:	d030      	beq.n	8005456 <recv+0x10a>
         {
            if(tmp == SOCK_CLOSE_WAIT)
 80053f4:	7bfb      	ldrb	r3, [r7, #15]
 80053f6:	2b1c      	cmp	r3, #28
 80053f8:	d126      	bne.n	8005448 <recv+0xfc>
            {
               if(recvsize != 0) break;
 80053fa:	89bb      	ldrh	r3, [r7, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d13d      	bne.n	800547c <recv+0x130>
               else if(getSn_TX_FSR(sn) == getSn_TxMAX(sn))
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff f96c 	bl	80046e0 <getSn_TX_FSR>
 8005408:	4603      	mov	r3, r0
 800540a:	461c      	mov	r4, r3
 800540c:	201b      	movs	r0, #27
 800540e:	f7ff f89d 	bl	800454c <WIZCHIP_READ>
 8005412:	4603      	mov	r3, r0
 8005414:	4619      	mov	r1, r3
 8005416:	79fb      	ldrb	r3, [r7, #7]
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	2203      	movs	r2, #3
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	ea01 0203 	and.w	r2, r1, r3
 8005424:	79fb      	ldrb	r3, [r7, #7]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fa42 f303 	asr.w	r3, r2, r3
 800542c:	2201      	movs	r2, #1
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	b29b      	uxth	r3, r3
 8005434:	029b      	lsls	r3, r3, #10
 8005436:	429c      	cmp	r4, r3
 8005438:	d10d      	bne.n	8005456 <recv+0x10a>
               {
                  close(sn);
 800543a:	79fb      	ldrb	r3, [r7, #7]
 800543c:	4618      	mov	r0, r3
 800543e:	f7ff fcf7 	bl	8004e30 <close>
                  return SOCKERR_SOCKSTATUS;
 8005442:	f06f 0306 	mvn.w	r3, #6
 8005446:	e03c      	b.n	80054c2 <recv+0x176>
               }
            }
            else
            {
               close(sn);
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	4618      	mov	r0, r3
 800544c:	f7ff fcf0 	bl	8004e30 <close>
               return SOCKERR_SOCKSTATUS;
 8005450:	f06f 0306 	mvn.w	r3, #6
 8005454:	e035      	b.n	80054c2 <recv+0x176>
            }
         }
         if((sock_io_mode & (1<<sn)) && (recvsize == 0)) return SOCK_BUSY;
 8005456:	4b1d      	ldr	r3, [pc, #116]	; (80054cc <recv+0x180>)
 8005458:	881b      	ldrh	r3, [r3, #0]
 800545a:	461a      	mov	r2, r3
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	fa42 f303 	asr.w	r3, r2, r3
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	2b00      	cmp	r3, #0
 8005468:	d004      	beq.n	8005474 <recv+0x128>
 800546a:	89bb      	ldrh	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d101      	bne.n	8005474 <recv+0x128>
 8005470:	2300      	movs	r3, #0
 8005472:	e026      	b.n	80054c2 <recv+0x176>
         if(recvsize != 0) break;
 8005474:	89bb      	ldrh	r3, [r7, #12]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d102      	bne.n	8005480 <recv+0x134>
         recvsize = getSn_RX_RSR(sn);
 800547a:	e7a9      	b.n	80053d0 <recv+0x84>
               if(recvsize != 0) break;
 800547c:	bf00      	nop
 800547e:	e000      	b.n	8005482 <recv+0x136>
         if(recvsize != 0) break;
 8005480:	bf00      	nop
   }
   else sock_pack_info[sn] = PACK_COMPLETED;
   if(getSn_MR(sn) & Sn_MR_ALIGN) sock_remained_size[sn] = 0;
   //len = recvsize;
#else   
   if(recvsize < len) len = recvsize;   
 8005482:	89ba      	ldrh	r2, [r7, #12]
 8005484:	88bb      	ldrh	r3, [r7, #4]
 8005486:	429a      	cmp	r2, r3
 8005488:	d201      	bcs.n	800548e <recv+0x142>
 800548a:	89bb      	ldrh	r3, [r7, #12]
 800548c:	80bb      	strh	r3, [r7, #4]
   wiz_recv_data(sn, buf, len);
 800548e:	88ba      	ldrh	r2, [r7, #4]
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	6839      	ldr	r1, [r7, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f7ff face 	bl	8004a36 <wiz_recv_data>
   setSn_CR(sn,Sn_CR_RECV);
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	3304      	adds	r3, #4
 800549e:	021b      	lsls	r3, r3, #8
 80054a0:	3301      	adds	r3, #1
 80054a2:	2140      	movs	r1, #64	; 0x40
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7ff f823 	bl	80044f0 <WIZCHIP_WRITE>
   while(getSn_CR(sn));
 80054aa:	bf00      	nop
 80054ac:	79fb      	ldrb	r3, [r7, #7]
 80054ae:	3304      	adds	r3, #4
 80054b0:	021b      	lsls	r3, r3, #8
 80054b2:	3301      	adds	r3, #1
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7ff f849 	bl	800454c <WIZCHIP_READ>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1f5      	bne.n	80054ac <recv+0x160>
#endif
     
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 80054c0:	88bb      	ldrh	r3, [r7, #4]
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bd90      	pop	{r4, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	2000868c 	.word	0x2000868c

080054d0 <sendto>:

int32_t sendto(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t port)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b086      	sub	sp, #24
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	60b9      	str	r1, [r7, #8]
 80054d8:	607b      	str	r3, [r7, #4]
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
 80054de:	4613      	mov	r3, r2
 80054e0:	81bb      	strh	r3, [r7, #12]
   uint8_t tmp = 0;
 80054e2:	2300      	movs	r3, #0
 80054e4:	75fb      	strb	r3, [r7, #23]
   uint16_t freesize = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	82bb      	strh	r3, [r7, #20]
   uint32_t taddr;

   CHECK_SOCKNUM();
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	2b04      	cmp	r3, #4
 80054ee:	d902      	bls.n	80054f6 <sendto+0x26>
 80054f0:	f04f 33ff 	mov.w	r3, #4294967295
 80054f4:	e139      	b.n	800576a <sendto+0x29a>
   switch(getSn_MR(sn) & 0x0F)
 80054f6:	7bfb      	ldrb	r3, [r7, #15]
 80054f8:	3304      	adds	r3, #4
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7ff f825 	bl	800454c <WIZCHIP_READ>
 8005502:	4603      	mov	r3, r0
 8005504:	f003 030f 	and.w	r3, r3, #15
 8005508:	3b02      	subs	r3, #2
 800550a:	2b02      	cmp	r3, #2
 800550c:	d902      	bls.n	8005514 <sendto+0x44>
//   #if ( _WIZCHIP_ < 5200 )
      case Sn_MR_IPRAW:
         break;
//   #endif
      default:
         return SOCKERR_SOCKMODE;
 800550e:	f06f 0304 	mvn.w	r3, #4
 8005512:	e12a      	b.n	800576a <sendto+0x29a>
         break;
 8005514:	bf00      	nop
   }
   CHECK_SOCKDATA();
 8005516:	89bb      	ldrh	r3, [r7, #12]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d102      	bne.n	8005522 <sendto+0x52>
 800551c:	f06f 030d 	mvn.w	r3, #13
 8005520:	e123      	b.n	800576a <sendto+0x29a>
   //M20140501 : For avoiding fatal error on memory align mismatched
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   //{
      //uint32_t taddr;
      taddr = ((uint32_t)addr[0]) & 0x000000FF;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[1] & 0x000000FF);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	3201      	adds	r2, #1
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	4413      	add	r3, r2
 8005534:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[2] & 0x000000FF);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	021b      	lsls	r3, r3, #8
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	3202      	adds	r2, #2
 800553e:	7812      	ldrb	r2, [r2, #0]
 8005540:	4413      	add	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
      taddr = (taddr << 8) + ((uint32_t)addr[3] & 0x000000FF);
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	021b      	lsls	r3, r3, #8
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	3203      	adds	r2, #3
 800554c:	7812      	ldrb	r2, [r2, #0]
 800554e:	4413      	add	r3, r2
 8005550:	613b      	str	r3, [r7, #16]
   //}
   //
   //if(*((uint32_t*)addr) == 0) return SOCKERR_IPINVALID;
   if((taddr == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_IPINVALID;
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10d      	bne.n	8005574 <sendto+0xa4>
 8005558:	7bfb      	ldrb	r3, [r7, #15]
 800555a:	3304      	adds	r3, #4
 800555c:	021b      	lsls	r3, r3, #8
 800555e:	4618      	mov	r0, r3
 8005560:	f7fe fff4 	bl	800454c <WIZCHIP_READ>
 8005564:	4603      	mov	r3, r0
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b04      	cmp	r3, #4
 800556c:	d002      	beq.n	8005574 <sendto+0xa4>
 800556e:	f06f 030b 	mvn.w	r3, #11
 8005572:	e0fa      	b.n	800576a <sendto+0x29a>
   if((port  == 0) && ((getSn_MR(sn)&Sn_MR_MACRAW) != Sn_MR_MACRAW)) return SOCKERR_PORTZERO;
 8005574:	8c3b      	ldrh	r3, [r7, #32]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10d      	bne.n	8005596 <sendto+0xc6>
 800557a:	7bfb      	ldrb	r3, [r7, #15]
 800557c:	3304      	adds	r3, #4
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe ffe3 	bl	800454c <WIZCHIP_READ>
 8005586:	4603      	mov	r3, r0
 8005588:	f003 0304 	and.w	r3, r3, #4
 800558c:	2b04      	cmp	r3, #4
 800558e:	d002      	beq.n	8005596 <sendto+0xc6>
 8005590:	f06f 030a 	mvn.w	r3, #10
 8005594:	e0e9      	b.n	800576a <sendto+0x29a>
   tmp = getSn_SR(sn);
 8005596:	7bfb      	ldrb	r3, [r7, #15]
 8005598:	3304      	adds	r3, #4
 800559a:	021b      	lsls	r3, r3, #8
 800559c:	3303      	adds	r3, #3
 800559e:	4618      	mov	r0, r3
 80055a0:	f7fe ffd4 	bl	800454c <WIZCHIP_READ>
 80055a4:	4603      	mov	r3, r0
 80055a6:	75fb      	strb	r3, [r7, #23]
//#if ( _WIZCHIP_ < 5200 )
   if((tmp != SOCK_MACRAW) && (tmp != SOCK_UDP) && (tmp != SOCK_IPRAW)) return SOCKERR_SOCKSTATUS;
 80055a8:	7dfb      	ldrb	r3, [r7, #23]
 80055aa:	2b42      	cmp	r3, #66	; 0x42
 80055ac:	d008      	beq.n	80055c0 <sendto+0xf0>
 80055ae:	7dfb      	ldrb	r3, [r7, #23]
 80055b0:	2b22      	cmp	r3, #34	; 0x22
 80055b2:	d005      	beq.n	80055c0 <sendto+0xf0>
 80055b4:	7dfb      	ldrb	r3, [r7, #23]
 80055b6:	2b32      	cmp	r3, #50	; 0x32
 80055b8:	d002      	beq.n	80055c0 <sendto+0xf0>
 80055ba:	f06f 0306 	mvn.w	r3, #6
 80055be:	e0d4      	b.n	800576a <sendto+0x29a>
//#else
//   if(tmp != SOCK_MACRAW && tmp != SOCK_UDP) return SOCKERR_SOCKSTATUS;
//#endif
      
   setSn_DIPR(sn,addr);
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	3304      	adds	r3, #4
 80055c4:	021b      	lsls	r3, r3, #8
 80055c6:	330c      	adds	r3, #12
 80055c8:	2204      	movs	r2, #4
 80055ca:	6879      	ldr	r1, [r7, #4]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fe ffeb 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSn_DPORT(sn,port);      
 80055d2:	7bfb      	ldrb	r3, [r7, #15]
 80055d4:	3304      	adds	r3, #4
 80055d6:	021b      	lsls	r3, r3, #8
 80055d8:	3310      	adds	r3, #16
 80055da:	461a      	mov	r2, r3
 80055dc:	8c3b      	ldrh	r3, [r7, #32]
 80055de:	0a1b      	lsrs	r3, r3, #8
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	4619      	mov	r1, r3
 80055e6:	4610      	mov	r0, r2
 80055e8:	f7fe ff82 	bl	80044f0 <WIZCHIP_WRITE>
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	3304      	adds	r3, #4
 80055f0:	021b      	lsls	r3, r3, #8
 80055f2:	3311      	adds	r3, #17
 80055f4:	461a      	mov	r2, r3
 80055f6:	8c3b      	ldrh	r3, [r7, #32]
 80055f8:	b2db      	uxtb	r3, r3
 80055fa:	4619      	mov	r1, r3
 80055fc:	4610      	mov	r0, r2
 80055fe:	f7fe ff77 	bl	80044f0 <WIZCHIP_WRITE>
   freesize = getSn_TxMAX(sn);
 8005602:	201b      	movs	r0, #27
 8005604:	f7fe ffa2 	bl	800454c <WIZCHIP_READ>
 8005608:	4603      	mov	r3, r0
 800560a:	4619      	mov	r1, r3
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	2203      	movs	r2, #3
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	ea01 0203 	and.w	r2, r1, r3
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	005b      	lsls	r3, r3, #1
 800561e:	fa42 f303 	asr.w	r3, r2, r3
 8005622:	2201      	movs	r2, #1
 8005624:	fa02 f303 	lsl.w	r3, r2, r3
 8005628:	b29b      	uxth	r3, r3
 800562a:	029b      	lsls	r3, r3, #10
 800562c:	82bb      	strh	r3, [r7, #20]
   if (len > freesize) len = freesize; // check size not to exceed MAX size.
 800562e:	89ba      	ldrh	r2, [r7, #12]
 8005630:	8abb      	ldrh	r3, [r7, #20]
 8005632:	429a      	cmp	r2, r3
 8005634:	d901      	bls.n	800563a <sendto+0x16a>
 8005636:	8abb      	ldrh	r3, [r7, #20]
 8005638:	81bb      	strh	r3, [r7, #12]
   while(1)
   {
      freesize = getSn_TX_FSR(sn);
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	4618      	mov	r0, r3
 800563e:	f7ff f84f 	bl	80046e0 <getSn_TX_FSR>
 8005642:	4603      	mov	r3, r0
 8005644:	82bb      	strh	r3, [r7, #20]
      if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 8005646:	7bfb      	ldrb	r3, [r7, #15]
 8005648:	3304      	adds	r3, #4
 800564a:	021b      	lsls	r3, r3, #8
 800564c:	3303      	adds	r3, #3
 800564e:	4618      	mov	r0, r3
 8005650:	f7fe ff7c 	bl	800454c <WIZCHIP_READ>
 8005654:	4603      	mov	r3, r0
 8005656:	2b00      	cmp	r3, #0
 8005658:	d102      	bne.n	8005660 <sendto+0x190>
 800565a:	f06f 0303 	mvn.w	r3, #3
 800565e:	e084      	b.n	800576a <sendto+0x29a>
      if( (sock_io_mode & (1<<sn)) && (len > freesize) ) return SOCK_BUSY;
 8005660:	4b44      	ldr	r3, [pc, #272]	; (8005774 <sendto+0x2a4>)
 8005662:	881b      	ldrh	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	7bfb      	ldrb	r3, [r7, #15]
 8005668:	fa42 f303 	asr.w	r3, r2, r3
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	d005      	beq.n	8005680 <sendto+0x1b0>
 8005674:	89ba      	ldrh	r2, [r7, #12]
 8005676:	8abb      	ldrh	r3, [r7, #20]
 8005678:	429a      	cmp	r2, r3
 800567a:	d901      	bls.n	8005680 <sendto+0x1b0>
 800567c:	2300      	movs	r3, #0
 800567e:	e074      	b.n	800576a <sendto+0x29a>
      if(len <= freesize) break;
 8005680:	89ba      	ldrh	r2, [r7, #12]
 8005682:	8abb      	ldrh	r3, [r7, #20]
 8005684:	429a      	cmp	r2, r3
 8005686:	d900      	bls.n	800568a <sendto+0x1ba>
      freesize = getSn_TX_FSR(sn);
 8005688:	e7d7      	b.n	800563a <sendto+0x16a>
      if(len <= freesize) break;
 800568a:	bf00      	nop
   };
	wiz_send_data(sn, buf, len);
 800568c:	89ba      	ldrh	r2, [r7, #12]
 800568e:	7bfb      	ldrb	r3, [r7, #15]
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	4618      	mov	r0, r3
 8005694:	f7ff f916 	bl	80048c4 <wiz_send_data>

   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      getSIPR((uint8_t*)&taddr);
 8005698:	f107 0310 	add.w	r3, r7, #16
 800569c:	2204      	movs	r2, #4
 800569e:	4619      	mov	r1, r3
 80056a0:	200f      	movs	r0, #15
 80056a2:	f7fe ffcf 	bl	8004644 <WIZCHIP_READ_BUF>
      if(taddr == 0)
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d10c      	bne.n	80056c6 <sendto+0x1f6>
      {
         getSUBR((uint8_t*)&taddr);
 80056ac:	f107 0310 	add.w	r3, r7, #16
 80056b0:	2204      	movs	r2, #4
 80056b2:	4619      	mov	r1, r3
 80056b4:	2005      	movs	r0, #5
 80056b6:	f7fe ffc5 	bl	8004644 <WIZCHIP_READ_BUF>
         setSUBR((uint8_t*)"\x00\x00\x00\x00");
 80056ba:	2204      	movs	r2, #4
 80056bc:	492e      	ldr	r1, [pc, #184]	; (8005778 <sendto+0x2a8>)
 80056be:	2005      	movs	r0, #5
 80056c0:	f7fe ff72 	bl	80045a8 <WIZCHIP_WRITE_BUF>
 80056c4:	e001      	b.n	80056ca <sendto+0x1fa>
      }
      else taddr = 0;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]
//A20150601 : For W5300
#if _WIZCHIP_ == 5300
   setSn_TX_WRSR(sn, len);
#endif
//   
	setSn_CR(sn,Sn_CR_SEND);
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
 80056cc:	3304      	adds	r3, #4
 80056ce:	021b      	lsls	r3, r3, #8
 80056d0:	3301      	adds	r3, #1
 80056d2:	2120      	movs	r1, #32
 80056d4:	4618      	mov	r0, r3
 80056d6:	f7fe ff0b 	bl	80044f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn));
 80056da:	bf00      	nop
 80056dc:	7bfb      	ldrb	r3, [r7, #15]
 80056de:	3304      	adds	r3, #4
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	3301      	adds	r3, #1
 80056e4:	4618      	mov	r0, r3
 80056e6:	f7fe ff31 	bl	800454c <WIZCHIP_READ>
 80056ea:	4603      	mov	r3, r0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d1f5      	bne.n	80056dc <sendto+0x20c>
   while(1)
   {
      tmp = getSn_IR(sn);
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	3304      	adds	r3, #4
 80056f4:	021b      	lsls	r3, r3, #8
 80056f6:	3302      	adds	r3, #2
 80056f8:	4618      	mov	r0, r3
 80056fa:	f7fe ff27 	bl	800454c <WIZCHIP_READ>
 80056fe:	4603      	mov	r3, r0
 8005700:	75fb      	strb	r3, [r7, #23]
      if(tmp & Sn_IR_SENDOK)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <sendto+0x256>
      {
         setSn_IR(sn, Sn_IR_SENDOK);
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	3304      	adds	r3, #4
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	3302      	adds	r3, #2
 8005714:	2110      	movs	r1, #16
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe feea 	bl	80044f0 <WIZCHIP_WRITE>
         break;
 800571c:	bf00      	nop
         return SOCKERR_TIMEOUT;
      }
      ////////////
   }
   #if _WIZCHIP_ < 5500   //M20150401 : for WIZCHIP Errata #4, #5 (ARP errata)
      if(taddr) setSUBR((uint8_t*)&taddr);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d021      	beq.n	8005768 <sendto+0x298>
 8005724:	e019      	b.n	800575a <sendto+0x28a>
      else if(tmp & Sn_IR_TIMEOUT)
 8005726:	7dfb      	ldrb	r3, [r7, #23]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d0df      	beq.n	80056f0 <sendto+0x220>
         setSn_IR(sn, Sn_IR_TIMEOUT);
 8005730:	7bfb      	ldrb	r3, [r7, #15]
 8005732:	3304      	adds	r3, #4
 8005734:	021b      	lsls	r3, r3, #8
 8005736:	3302      	adds	r3, #2
 8005738:	2108      	movs	r1, #8
 800573a:	4618      	mov	r0, r3
 800573c:	f7fe fed8 	bl	80044f0 <WIZCHIP_WRITE>
            if(taddr) setSUBR((uint8_t*)&taddr);
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d006      	beq.n	8005754 <sendto+0x284>
 8005746:	f107 0310 	add.w	r3, r7, #16
 800574a:	2204      	movs	r2, #4
 800574c:	4619      	mov	r1, r3
 800574e:	2005      	movs	r0, #5
 8005750:	f7fe ff2a 	bl	80045a8 <WIZCHIP_WRITE_BUF>
         return SOCKERR_TIMEOUT;
 8005754:	f06f 030c 	mvn.w	r3, #12
 8005758:	e007      	b.n	800576a <sendto+0x29a>
      if(taddr) setSUBR((uint8_t*)&taddr);
 800575a:	f107 0310 	add.w	r3, r7, #16
 800575e:	2204      	movs	r2, #4
 8005760:	4619      	mov	r1, r3
 8005762:	2005      	movs	r0, #5
 8005764:	f7fe ff20 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   #endif
   //M20150409 : Explicit Type Casting
   //return len;
   return (int32_t)len;
 8005768:	89bb      	ldrh	r3, [r7, #12]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	2000868c 	.word	0x2000868c
 8005778:	080086e0 	.word	0x080086e0

0800577c <recvfrom>:



int32_t recvfrom(uint8_t sn, uint8_t * buf, uint16_t len, uint8_t * addr, uint16_t *port)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b088      	sub	sp, #32
 8005780:	af00      	add	r7, sp, #0
 8005782:	60b9      	str	r1, [r7, #8]
 8005784:	607b      	str	r3, [r7, #4]
 8005786:	4603      	mov	r3, r0
 8005788:	73fb      	strb	r3, [r7, #15]
 800578a:	4613      	mov	r3, r2
 800578c:	81bb      	strh	r3, [r7, #12]
#else   
   uint8_t  mr;
#endif
//   
   uint8_t  head[8];
	uint16_t pack_len=0;
 800578e:	2300      	movs	r3, #0
 8005790:	83fb      	strh	r3, [r7, #30]

   CHECK_SOCKNUM();
 8005792:	7bfb      	ldrb	r3, [r7, #15]
 8005794:	2b04      	cmp	r3, #4
 8005796:	d902      	bls.n	800579e <recvfrom+0x22>
 8005798:	f04f 33ff 	mov.w	r3, #4294967295
 800579c:	e1c3      	b.n	8005b26 <recvfrom+0x3aa>
//A20150601
#if _WIZCHIP_ == 5300
   mr1 = getMR();
#endif   

   switch((mr=getSn_MR(sn)) & 0x0F)
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	3304      	adds	r3, #4
 80057a2:	021b      	lsls	r3, r3, #8
 80057a4:	4618      	mov	r0, r3
 80057a6:	f7fe fed1 	bl	800454c <WIZCHIP_READ>
 80057aa:	4603      	mov	r3, r0
 80057ac:	777b      	strb	r3, [r7, #29]
 80057ae:	7f7b      	ldrb	r3, [r7, #29]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	db03      	blt.n	80057c0 <recvfrom+0x44>
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	dd04      	ble.n	80057c6 <recvfrom+0x4a>
 80057bc:	2b05      	cmp	r3, #5
 80057be:	d004      	beq.n	80057ca <recvfrom+0x4e>
   #if ( _WIZCHIP_ < 5200 )         
      case Sn_MR_PPPoE:
         break;
   #endif
      default:
         return SOCKERR_SOCKMODE;
 80057c0:	f06f 0304 	mvn.w	r3, #4
 80057c4:	e1af      	b.n	8005b26 <recvfrom+0x3aa>
         break;
 80057c6:	bf00      	nop
 80057c8:	e000      	b.n	80057cc <recvfrom+0x50>
         break;
 80057ca:	bf00      	nop
   }
   CHECK_SOCKDATA();
 80057cc:	89bb      	ldrh	r3, [r7, #12]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d102      	bne.n	80057d8 <recvfrom+0x5c>
 80057d2:	f06f 030d 	mvn.w	r3, #13
 80057d6:	e1a6      	b.n	8005b26 <recvfrom+0x3aa>
   if(sock_remained_size[sn] == 0)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	4aaa      	ldr	r2, [pc, #680]	; (8005a84 <recvfrom+0x308>)
 80057dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d126      	bne.n	8005832 <recvfrom+0xb6>
   {
      while(1)
      {
         pack_len = getSn_RX_RSR(sn);
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe ffbd 	bl	8004766 <getSn_RX_RSR>
 80057ec:	4603      	mov	r3, r0
 80057ee:	83fb      	strh	r3, [r7, #30]
         if(getSn_SR(sn) == SOCK_CLOSED) return SOCKERR_SOCKCLOSED;
 80057f0:	7bfb      	ldrb	r3, [r7, #15]
 80057f2:	3304      	adds	r3, #4
 80057f4:	021b      	lsls	r3, r3, #8
 80057f6:	3303      	adds	r3, #3
 80057f8:	4618      	mov	r0, r3
 80057fa:	f7fe fea7 	bl	800454c <WIZCHIP_READ>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <recvfrom+0x8e>
 8005804:	f06f 0303 	mvn.w	r3, #3
 8005808:	e18d      	b.n	8005b26 <recvfrom+0x3aa>
         if( (sock_io_mode & (1<<sn)) && (pack_len == 0) ) return SOCK_BUSY;
 800580a:	4b9f      	ldr	r3, [pc, #636]	; (8005a88 <recvfrom+0x30c>)
 800580c:	881b      	ldrh	r3, [r3, #0]
 800580e:	461a      	mov	r2, r3
 8005810:	7bfb      	ldrb	r3, [r7, #15]
 8005812:	fa42 f303 	asr.w	r3, r2, r3
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <recvfrom+0xac>
 800581e:	8bfb      	ldrh	r3, [r7, #30]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <recvfrom+0xac>
 8005824:	2300      	movs	r3, #0
 8005826:	e17e      	b.n	8005b26 <recvfrom+0x3aa>
         if(pack_len != 0) break;
 8005828:	8bfb      	ldrh	r3, [r7, #30]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d100      	bne.n	8005830 <recvfrom+0xb4>
         pack_len = getSn_RX_RSR(sn);
 800582e:	e7d9      	b.n	80057e4 <recvfrom+0x68>
         if(pack_len != 0) break;
 8005830:	bf00      	nop
      };
   }
//D20150601 : Move it to bottom
// sock_pack_info[sn] = PACK_COMPLETED;
	switch (mr & 0x07)
 8005832:	7f7b      	ldrb	r3, [r7, #29]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	2b03      	cmp	r3, #3
 800583a:	f000 80d1 	beq.w	80059e0 <recvfrom+0x264>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d06f      	beq.n	8005922 <recvfrom+0x1a6>
 8005842:	2b02      	cmp	r3, #2
 8005844:	f040 8130 	bne.w	8005aa8 <recvfrom+0x32c>
	{
	   case Sn_MR_UDP :
	      if(sock_remained_size[sn] == 0)
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	4a8e      	ldr	r2, [pc, #568]	; (8005a84 <recvfrom+0x308>)
 800584c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d14e      	bne.n	80058f2 <recvfrom+0x176>
	      {
   			wiz_recv_data(sn, head, 8);
 8005854:	f107 0114 	add.w	r1, r7, #20
 8005858:	7bfb      	ldrb	r3, [r7, #15]
 800585a:	2208      	movs	r2, #8
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f8ea 	bl	8004a36 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	3304      	adds	r3, #4
 8005866:	021b      	lsls	r3, r3, #8
 8005868:	3301      	adds	r3, #1
 800586a:	2140      	movs	r1, #64	; 0x40
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe fe3f 	bl	80044f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005872:	bf00      	nop
 8005874:	7bfb      	ldrb	r3, [r7, #15]
 8005876:	3304      	adds	r3, #4
 8005878:	021b      	lsls	r3, r3, #8
 800587a:	3301      	adds	r3, #1
 800587c:	4618      	mov	r0, r3
 800587e:	f7fe fe65 	bl	800454c <WIZCHIP_READ>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f5      	bne.n	8005874 <recvfrom+0xf8>
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[6];
   		   }
            else
            {
         #endif
               addr[0] = head[0];
 8005888:	7d3a      	ldrb	r2, [r7, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	701a      	strb	r2, [r3, #0]
      			addr[1] = head[1];
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3301      	adds	r3, #1
 8005892:	7d7a      	ldrb	r2, [r7, #21]
 8005894:	701a      	strb	r2, [r3, #0]
      			addr[2] = head[2];
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	3302      	adds	r3, #2
 800589a:	7dba      	ldrb	r2, [r7, #22]
 800589c:	701a      	strb	r2, [r3, #0]
      			addr[3] = head[3];
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	3303      	adds	r3, #3
 80058a2:	7dfa      	ldrb	r2, [r7, #23]
 80058a4:	701a      	strb	r2, [r3, #0]
      			*port = head[4];
 80058a6:	7e3b      	ldrb	r3, [r7, #24]
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ac:	801a      	strh	r2, [r3, #0]
      			*port = (*port << 8) + head[5];
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	021b      	lsls	r3, r3, #8
 80058b4:	b29a      	uxth	r2, r3
 80058b6:	7e7b      	ldrb	r3, [r7, #25]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	4413      	add	r3, r2
 80058bc:	b29a      	uxth	r2, r3
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	801a      	strh	r2, [r3, #0]
      			sock_remained_size[sn] = head[6];
 80058c2:	7eba      	ldrb	r2, [r7, #26]
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	b291      	uxth	r1, r2
 80058c8:	4a6e      	ldr	r2, [pc, #440]	; (8005a84 <recvfrom+0x308>)
 80058ca:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[7];
 80058ce:	7bfb      	ldrb	r3, [r7, #15]
 80058d0:	4a6c      	ldr	r2, [pc, #432]	; (8005a84 <recvfrom+0x308>)
 80058d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058d6:	021b      	lsls	r3, r3, #8
 80058d8:	b299      	uxth	r1, r3
 80058da:	7efb      	ldrb	r3, [r7, #27]
 80058dc:	b29a      	uxth	r2, r3
 80058de:	7bfb      	ldrb	r3, [r7, #15]
 80058e0:	440a      	add	r2, r1
 80058e2:	b291      	uxth	r1, r2
 80058e4:	4a67      	ldr	r2, [pc, #412]	; (8005a84 <recvfrom+0x308>)
 80058e6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
         #if _WIZCHIP_ == 5300
            }
         #endif
   			sock_pack_info[sn] = PACK_FIRST;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
 80058ec:	4a67      	ldr	r2, [pc, #412]	; (8005a8c <recvfrom+0x310>)
 80058ee:	2180      	movs	r1, #128	; 0x80
 80058f0:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	4a63      	ldr	r2, [pc, #396]	; (8005a84 <recvfrom+0x308>)
 80058f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058fa:	89ba      	ldrh	r2, [r7, #12]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d202      	bcs.n	8005906 <recvfrom+0x18a>
 8005900:	89bb      	ldrh	r3, [r7, #12]
 8005902:	83fb      	strh	r3, [r7, #30]
 8005904:	e004      	b.n	8005910 <recvfrom+0x194>
			else pack_len = sock_remained_size[sn];
 8005906:	7bfb      	ldrb	r3, [r7, #15]
 8005908:	4a5e      	ldr	r2, [pc, #376]	; (8005a84 <recvfrom+0x308>)
 800590a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800590e:	83fb      	strh	r3, [r7, #30]
			//A20150601 : For W5300
			len = pack_len;
 8005910:	8bfb      	ldrh	r3, [r7, #30]
 8005912:	81bb      	strh	r3, [r7, #12]
			   }
			#endif
			//
			// Need to packet length check (default 1472)
			//
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005914:	8bfa      	ldrh	r2, [r7, #30]
 8005916:	7bfb      	ldrb	r3, [r7, #15]
 8005918:	68b9      	ldr	r1, [r7, #8]
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff f88b 	bl	8004a36 <wiz_recv_data>
			break;
 8005920:	e0ce      	b.n	8005ac0 <recvfrom+0x344>
	   case Sn_MR_MACRAW :
	      if(sock_remained_size[sn] == 0)
 8005922:	7bfb      	ldrb	r3, [r7, #15]
 8005924:	4a57      	ldr	r2, [pc, #348]	; (8005a84 <recvfrom+0x308>)
 8005926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d142      	bne.n	80059b4 <recvfrom+0x238>
	      {
   			wiz_recv_data(sn, head, 2);
 800592e:	f107 0114 	add.w	r1, r7, #20
 8005932:	7bfb      	ldrb	r3, [r7, #15]
 8005934:	2202      	movs	r2, #2
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff f87d 	bl	8004a36 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	3304      	adds	r3, #4
 8005940:	021b      	lsls	r3, r3, #8
 8005942:	3301      	adds	r3, #1
 8005944:	2140      	movs	r1, #64	; 0x40
 8005946:	4618      	mov	r0, r3
 8005948:	f7fe fdd2 	bl	80044f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 800594c:	bf00      	nop
 800594e:	7bfb      	ldrb	r3, [r7, #15]
 8005950:	3304      	adds	r3, #4
 8005952:	021b      	lsls	r3, r3, #8
 8005954:	3301      	adds	r3, #1
 8005956:	4618      	mov	r0, r3
 8005958:	f7fe fdf8 	bl	800454c <WIZCHIP_READ>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1f5      	bne.n	800594e <recvfrom+0x1d2>
   			// read peer's IP address, port number & packet length
    			sock_remained_size[sn] = head[0];
 8005962:	7d3a      	ldrb	r2, [r7, #20]
 8005964:	7bfb      	ldrb	r3, [r7, #15]
 8005966:	b291      	uxth	r1, r2
 8005968:	4a46      	ldr	r2, [pc, #280]	; (8005a84 <recvfrom+0x308>)
 800596a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_remained_size[sn] = (sock_remained_size[sn] <<8) + head[1] -2;
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	4a44      	ldr	r2, [pc, #272]	; (8005a84 <recvfrom+0x308>)
 8005972:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005976:	021b      	lsls	r3, r3, #8
 8005978:	b29a      	uxth	r2, r3
 800597a:	7d7b      	ldrb	r3, [r7, #21]
 800597c:	b29b      	uxth	r3, r3
 800597e:	4413      	add	r3, r2
 8005980:	b29a      	uxth	r2, r3
 8005982:	7bfb      	ldrb	r3, [r7, #15]
 8005984:	3a02      	subs	r2, #2
 8005986:	b291      	uxth	r1, r2
 8005988:	4a3e      	ldr	r2, [pc, #248]	; (8005a84 <recvfrom+0x308>)
 800598a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			if(sock_remained_size[sn] & 0x01)
   				sock_remained_size[sn] = sock_remained_size[sn] + 1 - 4;
   			else
   				sock_remained_size[sn] -= 4;
			#endif
   			if(sock_remained_size[sn] > 1514) 
 800598e:	7bfb      	ldrb	r3, [r7, #15]
 8005990:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <recvfrom+0x308>)
 8005992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005996:	f240 52ea 	movw	r2, #1514	; 0x5ea
 800599a:	4293      	cmp	r3, r2
 800599c:	d906      	bls.n	80059ac <recvfrom+0x230>
   			{
   			   close(sn);
 800599e:	7bfb      	ldrb	r3, [r7, #15]
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fa45 	bl	8004e30 <close>
   			   return SOCKFATAL_PACKLEN;
 80059a6:	f46f 737a 	mvn.w	r3, #1000	; 0x3e8
 80059aa:	e0bc      	b.n	8005b26 <recvfrom+0x3aa>
   			}
   			sock_pack_info[sn] = PACK_FIRST;
 80059ac:	7bfb      	ldrb	r3, [r7, #15]
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <recvfrom+0x310>)
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	54d1      	strb	r1, [r2, r3]
   	   }
			if(len < sock_remained_size[sn]) pack_len = len;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	4a33      	ldr	r2, [pc, #204]	; (8005a84 <recvfrom+0x308>)
 80059b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059bc:	89ba      	ldrh	r2, [r7, #12]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d202      	bcs.n	80059c8 <recvfrom+0x24c>
 80059c2:	89bb      	ldrh	r3, [r7, #12]
 80059c4:	83fb      	strh	r3, [r7, #30]
 80059c6:	e004      	b.n	80059d2 <recvfrom+0x256>
			else pack_len = sock_remained_size[sn];
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
 80059ca:	4a2e      	ldr	r2, [pc, #184]	; (8005a84 <recvfrom+0x308>)
 80059cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059d0:	83fb      	strh	r3, [r7, #30]
			wiz_recv_data(sn,buf,pack_len);
 80059d2:	8bfa      	ldrh	r2, [r7, #30]
 80059d4:	7bfb      	ldrb	r3, [r7, #15]
 80059d6:	68b9      	ldr	r1, [r7, #8]
 80059d8:	4618      	mov	r0, r3
 80059da:	f7ff f82c 	bl	8004a36 <wiz_recv_data>
		   break;
 80059de:	e06f      	b.n	8005ac0 <recvfrom+0x344>
   //#if ( _WIZCHIP_ < 5200 )
		case Sn_MR_IPRAW:
		   if(sock_remained_size[sn] == 0)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	4a28      	ldr	r2, [pc, #160]	; (8005a84 <recvfrom+0x308>)
 80059e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d140      	bne.n	8005a6e <recvfrom+0x2f2>
		   {
   			wiz_recv_data(sn, head, 6);
 80059ec:	f107 0114 	add.w	r1, r7, #20
 80059f0:	7bfb      	ldrb	r3, [r7, #15]
 80059f2:	2206      	movs	r2, #6
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff f81e 	bl	8004a36 <wiz_recv_data>
   			setSn_CR(sn,Sn_CR_RECV);
 80059fa:	7bfb      	ldrb	r3, [r7, #15]
 80059fc:	3304      	adds	r3, #4
 80059fe:	021b      	lsls	r3, r3, #8
 8005a00:	3301      	adds	r3, #1
 8005a02:	2140      	movs	r1, #64	; 0x40
 8005a04:	4618      	mov	r0, r3
 8005a06:	f7fe fd73 	bl	80044f0 <WIZCHIP_WRITE>
   			while(getSn_CR(sn));
 8005a0a:	bf00      	nop
 8005a0c:	7bfb      	ldrb	r3, [r7, #15]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	3301      	adds	r3, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe fd99 	bl	800454c <WIZCHIP_READ>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1f5      	bne.n	8005a0c <recvfrom+0x290>
   			addr[0] = head[0];
 8005a20:	7d3a      	ldrb	r2, [r7, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	701a      	strb	r2, [r3, #0]
   			addr[1] = head[1];
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	7d7a      	ldrb	r2, [r7, #21]
 8005a2c:	701a      	strb	r2, [r3, #0]
   			addr[2] = head[2];
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	3302      	adds	r3, #2
 8005a32:	7dba      	ldrb	r2, [r7, #22]
 8005a34:	701a      	strb	r2, [r3, #0]
   			addr[3] = head[3];
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	3303      	adds	r3, #3
 8005a3a:	7dfa      	ldrb	r2, [r7, #23]
 8005a3c:	701a      	strb	r2, [r3, #0]
   			sock_remained_size[sn] = head[4];
 8005a3e:	7e3a      	ldrb	r2, [r7, #24]
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
 8005a42:	b291      	uxth	r1, r2
 8005a44:	4a0f      	ldr	r2, [pc, #60]	; (8005a84 <recvfrom+0x308>)
 8005a46:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			//M20150401 : For Typing Error
   			//sock_remaiend_size[sn] = (sock_remained_size[sn] << 8) + head[5];
   			sock_remained_size[sn] = (sock_remained_size[sn] << 8) + head[5];
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	4a0d      	ldr	r2, [pc, #52]	; (8005a84 <recvfrom+0x308>)
 8005a4e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a52:	021b      	lsls	r3, r3, #8
 8005a54:	b299      	uxth	r1, r3
 8005a56:	7e7b      	ldrb	r3, [r7, #25]
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	7bfb      	ldrb	r3, [r7, #15]
 8005a5c:	440a      	add	r2, r1
 8005a5e:	b291      	uxth	r1, r2
 8005a60:	4a08      	ldr	r2, [pc, #32]	; (8005a84 <recvfrom+0x308>)
 8005a62:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
   			sock_pack_info[sn] = PACK_FIRST;
 8005a66:	7bfb      	ldrb	r3, [r7, #15]
 8005a68:	4a08      	ldr	r2, [pc, #32]	; (8005a8c <recvfrom+0x310>)
 8005a6a:	2180      	movs	r1, #128	; 0x80
 8005a6c:	54d1      	strb	r1, [r2, r3]
         }
			//
			// Need to packet length check
			//
			if(len < sock_remained_size[sn]) pack_len = len;
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	4a04      	ldr	r2, [pc, #16]	; (8005a84 <recvfrom+0x308>)
 8005a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a76:	89ba      	ldrh	r2, [r7, #12]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d209      	bcs.n	8005a90 <recvfrom+0x314>
 8005a7c:	89bb      	ldrh	r3, [r7, #12]
 8005a7e:	83fb      	strh	r3, [r7, #30]
 8005a80:	e00b      	b.n	8005a9a <recvfrom+0x31e>
 8005a82:	bf00      	nop
 8005a84:	20008690 	.word	0x20008690
 8005a88:	2000868c 	.word	0x2000868c
 8005a8c:	20008698 	.word	0x20008698
			else pack_len = sock_remained_size[sn];
 8005a90:	7bfb      	ldrb	r3, [r7, #15]
 8005a92:	4a27      	ldr	r2, [pc, #156]	; (8005b30 <recvfrom+0x3b4>)
 8005a94:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005a98:	83fb      	strh	r3, [r7, #30]
   		wiz_recv_data(sn, buf, pack_len); // data copy.
 8005a9a:	8bfa      	ldrh	r2, [r7, #30]
 8005a9c:	7bfb      	ldrb	r3, [r7, #15]
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fe ffc8 	bl	8004a36 <wiz_recv_data>
			break;
 8005aa6:	e00b      	b.n	8005ac0 <recvfrom+0x344>
   //#endif
      default:
         wiz_recv_ignore(sn, pack_len); // data copy.
 8005aa8:	8bfa      	ldrh	r2, [r7, #30]
 8005aaa:	7bfb      	ldrb	r3, [r7, #15]
 8005aac:	4611      	mov	r1, r2
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff f877 	bl	8004ba2 <wiz_recv_ignore>
         sock_remained_size[sn] = pack_len;
 8005ab4:	7bfb      	ldrb	r3, [r7, #15]
 8005ab6:	491e      	ldr	r1, [pc, #120]	; (8005b30 <recvfrom+0x3b4>)
 8005ab8:	8bfa      	ldrh	r2, [r7, #30]
 8005aba:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
         break;
 8005abe:	bf00      	nop
   }
	setSn_CR(sn,Sn_CR_RECV);
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	2140      	movs	r1, #64	; 0x40
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fd10 	bl	80044f0 <WIZCHIP_WRITE>
	/* wait to process the command... */
	while(getSn_CR(sn)) ;
 8005ad0:	bf00      	nop
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	021b      	lsls	r3, r3, #8
 8005ad8:	3301      	adds	r3, #1
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe fd36 	bl	800454c <WIZCHIP_READ>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f5      	bne.n	8005ad2 <recvfrom+0x356>
	sock_remained_size[sn] -= pack_len;
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	4a11      	ldr	r2, [pc, #68]	; (8005b30 <recvfrom+0x3b4>)
 8005aea:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	8bfa      	ldrh	r2, [r7, #30]
 8005af2:	1a8a      	subs	r2, r1, r2
 8005af4:	b291      	uxth	r1, r2
 8005af6:	4a0e      	ldr	r2, [pc, #56]	; (8005b30 <recvfrom+0x3b4>)
 8005af8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	//M20150601 : 
	//if(sock_remained_size[sn] != 0) sock_pack_info[sn] |= 0x01;
	if(sock_remained_size[sn] != 0)
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <recvfrom+0x3b4>)
 8005b00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d009      	beq.n	8005b1c <recvfrom+0x3a0>
	{
	   sock_pack_info[sn] |= PACK_REMAINED;
 8005b08:	7bfb      	ldrb	r3, [r7, #15]
 8005b0a:	4a0a      	ldr	r2, [pc, #40]	; (8005b34 <recvfrom+0x3b8>)
 8005b0c:	5cd2      	ldrb	r2, [r2, r3]
 8005b0e:	7bfb      	ldrb	r3, [r7, #15]
 8005b10:	f042 0201 	orr.w	r2, r2, #1
 8005b14:	b2d1      	uxtb	r1, r2
 8005b16:	4a07      	ldr	r2, [pc, #28]	; (8005b34 <recvfrom+0x3b8>)
 8005b18:	54d1      	strb	r1, [r2, r3]
 8005b1a:	e003      	b.n	8005b24 <recvfrom+0x3a8>
   #if _WIZCHIP_ == 5300	   
	   if(pack_len & 0x01) sock_pack_info[sn] |= PACK_FIFOBYTE;
   #endif	      
	}
	else sock_pack_info[sn] = PACK_COMPLETED;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	4a05      	ldr	r2, [pc, #20]	; (8005b34 <recvfrom+0x3b8>)
 8005b20:	2100      	movs	r1, #0
 8005b22:	54d1      	strb	r1, [r2, r3]
   pack_len = len;
#endif
   //
   //M20150409 : Explicit Type Casting
   //return pack_len;
   return (int32_t)pack_len;
 8005b24:	8bfb      	ldrh	r3, [r7, #30]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20008690 	.word	0x20008690
 8005b34:	20008698 	.word	0x20008698

08005b38 <wizchip_cris_enter>:
 * @brief Default function to enable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_enter(void)           {};
void 	  wizchip_cris_enter(void)           {}
 8005b38:	b480      	push	{r7}
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr

08005b46 <wizchip_cris_exit>:
 * @brief Default function to disable interrupt.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	  wizchip_cris_exit(void)          {};
void 	  wizchip_cris_exit(void)          {}
 8005b46:	b480      	push	{r7}
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	bf00      	nop
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <wizchip_cs_select>:
 * @brief Default function to select chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_select(void)            {};
void 	wizchip_cs_select(void)            {}
 8005b54:	b480      	push	{r7}
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	bf00      	nop
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <wizchip_cs_deselect>:
 * @brief Default function to deselect chip.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_cs_deselect(void)          {};
void 	wizchip_cs_deselect(void)          {}
 8005b62:	b480      	push	{r7}
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	bf00      	nop
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <wizchip_bus_readdata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
 //M20150601 : Rename the function for integrating with W5300
//uint8_t wizchip_bus_readbyte(uint32_t AddrSel) { return * ((volatile uint8_t *)((ptrdiff_t) AddrSel)); }
iodata_t wizchip_bus_readdata(uint32_t AddrSel) { return * ((volatile iodata_t *)((ptrdiff_t) AddrSel)); }
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4618      	mov	r0, r3
 8005b80:	370c      	adds	r7, #12
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <wizchip_bus_writedata>:
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//M20150601 : Rename the function for integrating with W5300
//void 	wizchip_bus_writebyte(uint32_t AddrSel, uint8_t wb)  { *((volatile uint8_t*)((ptrdiff_t)AddrSel)) = wb; }
void 	wizchip_bus_writedata(uint32_t AddrSel, iodata_t wb)  { *((volatile iodata_t*)((ptrdiff_t)AddrSel)) = wb; }
 8005b8a:	b480      	push	{r7}
 8005b8c:	b083      	sub	sp, #12
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	460b      	mov	r3, r1
 8005b94:	70fb      	strb	r3, [r7, #3]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	701a      	strb	r2, [r3, #0]
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <wizchip_spi_readbyte>:
 * @brief Default function to read in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//uint8_t wizchip_spi_readbyte(void)        {return 0;};
uint8_t wizchip_spi_readbyte(void)        {return 0;}
 8005ba8:	b480      	push	{r7}
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	2300      	movs	r3, #0
 8005bae:	4618      	mov	r0, r3
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <wizchip_spi_writebyte>:
 * @brief Default function to write in SPI interface.
 * @note This function help not to access wrong address. If you do not describe this function or register any functions,
 * null function is called.
 */
//void 	wizchip_spi_writebyte(uint8_t wb) {};
void 	wizchip_spi_writebyte(uint8_t wb) {}
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	71fb      	strb	r3, [r7, #7]
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <reg_wizchip_cs_cbfunc>:
      WIZCHIP.CRIS._exit  = cris_ex;
   }
}

void reg_wizchip_cs_cbfunc(void(*cs_sel)(void), void(*cs_desel)(void))
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
   if(!cs_sel || !cs_desel)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <reg_wizchip_cs_cbfunc+0x16>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d106      	bne.n	8005bf4 <reg_wizchip_cs_cbfunc+0x24>
   {
      WIZCHIP.CS._select   = wizchip_cs_select;
 8005be6:	4b09      	ldr	r3, [pc, #36]	; (8005c0c <reg_wizchip_cs_cbfunc+0x3c>)
 8005be8:	4a09      	ldr	r2, [pc, #36]	; (8005c10 <reg_wizchip_cs_cbfunc+0x40>)
 8005bea:	615a      	str	r2, [r3, #20]
      WIZCHIP.CS._deselect = wizchip_cs_deselect;
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <reg_wizchip_cs_cbfunc+0x3c>)
 8005bee:	4a09      	ldr	r2, [pc, #36]	; (8005c14 <reg_wizchip_cs_cbfunc+0x44>)
 8005bf0:	619a      	str	r2, [r3, #24]
 8005bf2:	e005      	b.n	8005c00 <reg_wizchip_cs_cbfunc+0x30>
   }
   else
   {
      WIZCHIP.CS._select   = cs_sel;
 8005bf4:	4a05      	ldr	r2, [pc, #20]	; (8005c0c <reg_wizchip_cs_cbfunc+0x3c>)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6153      	str	r3, [r2, #20]
      WIZCHIP.CS._deselect = cs_desel;
 8005bfa:	4a04      	ldr	r2, [pc, #16]	; (8005c0c <reg_wizchip_cs_cbfunc+0x3c>)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	6193      	str	r3, [r2, #24]
   }
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	2000001c 	.word	0x2000001c
 8005c10:	08005b55 	.word	0x08005b55
 8005c14:	08005b63 	.word	0x08005b63

08005c18 <reg_wizchip_spi_cbfunc>:
      WIZCHIP.IF.BUS._write_data  = bus_wb;
   }
}

void reg_wizchip_spi_cbfunc(uint8_t (*spi_rb)(void), void (*spi_wb)(uint8_t wb))
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
   while(!(WIZCHIP.if_mode & _WIZCHIP_IO_MODE_SPI_));
 8005c22:	bf00      	nop
 8005c24:	4b0f      	ldr	r3, [pc, #60]	; (8005c64 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d0f9      	beq.n	8005c24 <reg_wizchip_spi_cbfunc+0xc>
   
   if(!spi_rb || !spi_wb)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <reg_wizchip_spi_cbfunc+0x24>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <reg_wizchip_spi_cbfunc+0x32>
   {
      WIZCHIP.IF.SPI._read_byte   = wizchip_spi_readbyte;
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c3e:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <reg_wizchip_spi_cbfunc+0x50>)
 8005c40:	61da      	str	r2, [r3, #28]
      WIZCHIP.IF.SPI._write_byte  = wizchip_spi_writebyte;
 8005c42:	4b08      	ldr	r3, [pc, #32]	; (8005c64 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c44:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <reg_wizchip_spi_cbfunc+0x54>)
 8005c46:	621a      	str	r2, [r3, #32]
 8005c48:	e005      	b.n	8005c56 <reg_wizchip_spi_cbfunc+0x3e>
   }
   else
   {
      WIZCHIP.IF.SPI._read_byte   = spi_rb;
 8005c4a:	4a06      	ldr	r2, [pc, #24]	; (8005c64 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	61d3      	str	r3, [r2, #28]
      WIZCHIP.IF.SPI._write_byte  = spi_wb;
 8005c50:	4a04      	ldr	r2, [pc, #16]	; (8005c64 <reg_wizchip_spi_cbfunc+0x4c>)
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	6213      	str	r3, [r2, #32]
   }
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	2000001c 	.word	0x2000001c
 8005c68:	08005ba9 	.word	0x08005ba9
 8005c6c:	08005bb9 	.word	0x08005bb9

08005c70 <wizchip_sw_reset>:
   }
   return 0;
}

void wizchip_sw_reset(void)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   uint16_t mr = (uint16_t)getMR();
   setMR(mr | MR_IND);
#endif
//
   getSHAR(mac);
 8005c76:	1d3b      	adds	r3, r7, #4
 8005c78:	2206      	movs	r2, #6
 8005c7a:	4619      	mov	r1, r3
 8005c7c:	2009      	movs	r0, #9
 8005c7e:	f7fe fce1 	bl	8004644 <WIZCHIP_READ_BUF>
   getGAR(gw);  getSUBR(sn);  getSIPR(sip);
 8005c82:	f107 0314 	add.w	r3, r7, #20
 8005c86:	2204      	movs	r2, #4
 8005c88:	4619      	mov	r1, r3
 8005c8a:	2001      	movs	r0, #1
 8005c8c:	f7fe fcda 	bl	8004644 <WIZCHIP_READ_BUF>
 8005c90:	f107 0310 	add.w	r3, r7, #16
 8005c94:	2204      	movs	r2, #4
 8005c96:	4619      	mov	r1, r3
 8005c98:	2005      	movs	r0, #5
 8005c9a:	f7fe fcd3 	bl	8004644 <WIZCHIP_READ_BUF>
 8005c9e:	f107 030c 	add.w	r3, r7, #12
 8005ca2:	2204      	movs	r2, #4
 8005ca4:	4619      	mov	r1, r3
 8005ca6:	200f      	movs	r0, #15
 8005ca8:	f7fe fccc 	bl	8004644 <WIZCHIP_READ_BUF>
   setMR(MR_RST);
 8005cac:	2180      	movs	r1, #128	; 0x80
 8005cae:	2000      	movs	r0, #0
 8005cb0:	f7fe fc1e 	bl	80044f0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f7fe fc49 	bl	800454c <WIZCHIP_READ>
//A2015051 : For indirect bus mode 
#if _WIZCHIP_IO_MODE_  == _WIZCHIP_IO_MODE_BUS_INDIR_
   setMR(mr | MR_IND);
#endif
//
   setSHAR(mac);
 8005cba:	1d3b      	adds	r3, r7, #4
 8005cbc:	2206      	movs	r2, #6
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	2009      	movs	r0, #9
 8005cc2:	f7fe fc71 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setGAR(gw);
 8005cc6:	f107 0314 	add.w	r3, r7, #20
 8005cca:	2204      	movs	r2, #4
 8005ccc:	4619      	mov	r1, r3
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7fe fc6a 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSUBR(sn);
 8005cd4:	f107 0310 	add.w	r3, r7, #16
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4619      	mov	r1, r3
 8005cdc:	2005      	movs	r0, #5
 8005cde:	f7fe fc63 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSIPR(sip);
 8005ce2:	f107 030c 	add.w	r3, r7, #12
 8005ce6:	2204      	movs	r2, #4
 8005ce8:	4619      	mov	r1, r3
 8005cea:	200f      	movs	r0, #15
 8005cec:	f7fe fc5c 	bl	80045a8 <WIZCHIP_WRITE_BUF>
}
 8005cf0:	bf00      	nop
 8005cf2:	3718      	adds	r7, #24
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <wizchip_init>:

int8_t wizchip_init(uint8_t* txsize, uint8_t* rxsize)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
   int8_t i;
#if _WIZCHIP_ < W5200
   int8_t j;
#endif
   int8_t tmp = 0;
 8005d02:	2300      	movs	r3, #0
 8005d04:	737b      	strb	r3, [r7, #13]
   wizchip_sw_reset();
 8005d06:	f7ff ffb3 	bl	8005c70 <wizchip_sw_reset>
   if(txsize)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d066      	beq.n	8005dde <wizchip_init+0xe6>
   {
      tmp = 0;
 8005d10:	2300      	movs	r3, #0
 8005d12:	737b      	strb	r3, [r7, #13]
			tmp += txsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d14:	2300      	movs	r3, #0
 8005d16:	73fb      	strb	r3, [r7, #15]
 8005d18:	e015      	b.n	8005d46 <wizchip_init+0x4e>
		{
			tmp += txsize[i];
 8005d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d1e:	687a      	ldr	r2, [r7, #4]
 8005d20:	4413      	add	r3, r2
 8005d22:	781a      	ldrb	r2, [r3, #0]
 8005d24:	7b7b      	ldrb	r3, [r7, #13]
 8005d26:	4413      	add	r3, r2
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	737b      	strb	r3, [r7, #13]

		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8005d2c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	dd02      	ble.n	8005d3a <wizchip_init+0x42>
 8005d34:	f04f 33ff 	mov.w	r3, #4294967295
 8005d38:	e0bc      	b.n	8005eb4 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d3e:	b2db      	uxtb	r3, r3
 8005d40:	3301      	adds	r3, #1
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	73fb      	strb	r3, [r7, #15]
 8005d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d4a:	2b03      	cmp	r3, #3
 8005d4c:	dde5      	ble.n	8005d1a <wizchip_init+0x22>
		#else
			if(tmp > 16) return -1;
		#endif
		}
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005d4e:	2300      	movs	r3, #0
 8005d50:	73fb      	strb	r3, [r7, #15]
 8005d52:	e040      	b.n	8005dd6 <wizchip_init+0xde>
		{
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100
			j = 0;
 8005d54:	2300      	movs	r3, #0
 8005d56:	73bb      	strb	r3, [r7, #14]
			while((txsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8005d58:	e005      	b.n	8005d66 <wizchip_init+0x6e>
 8005d5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	3301      	adds	r3, #1
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	73bb      	strb	r3, [r7, #14]
 8005d66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d6a:	687a      	ldr	r2, [r7, #4]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	461a      	mov	r2, r3
 8005d72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d76:	fa42 f303 	asr.w	r3, r2, r3
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d006      	beq.n	8005d8c <wizchip_init+0x94>
 8005d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	4413      	add	r3, r2
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1e6      	bne.n	8005d5a <wizchip_init+0x62>
			setSn_TXBUF_SIZE(i, j);
 8005d8c:	201b      	movs	r0, #27
 8005d8e:	f7fe fbdd 	bl	800454c <WIZCHIP_READ>
 8005d92:	4603      	mov	r3, r0
 8005d94:	b25a      	sxtb	r2, r3
 8005d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d9a:	005b      	lsls	r3, r3, #1
 8005d9c:	2103      	movs	r1, #3
 8005d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8005da2:	b25b      	sxtb	r3, r3
 8005da4:	43db      	mvns	r3, r3
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	4013      	ands	r3, r2
 8005daa:	b25a      	sxtb	r2, r3
 8005dac:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005db0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dba:	b25b      	sxtb	r3, r3
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b25b      	sxtb	r3, r3
 8005dc0:	b2db      	uxtb	r3, r3
 8005dc2:	4619      	mov	r1, r3
 8005dc4:	201b      	movs	r0, #27
 8005dc6:	f7fe fb93 	bl	80044f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	b2db      	uxtb	r3, r3
 8005dd4:	73fb      	strb	r3, [r7, #15]
 8005dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	ddba      	ble.n	8005d54 <wizchip_init+0x5c>
		}

	#endif
   }

   if(rxsize)
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d066      	beq.n	8005eb2 <wizchip_init+0x1ba>
   {
      tmp = 0;
 8005de4:	2300      	movs	r3, #0
 8005de6:	737b      	strb	r3, [r7, #13]
			tmp += rxsize[i];
			if(tmp > 128) return -1;
		}
		if(tmp % 8) return -1;
   #else
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005de8:	2300      	movs	r3, #0
 8005dea:	73fb      	strb	r3, [r7, #15]
 8005dec:	e015      	b.n	8005e1a <wizchip_init+0x122>
		{
			tmp += rxsize[i];
 8005dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005df2:	683a      	ldr	r2, [r7, #0]
 8005df4:	4413      	add	r3, r2
 8005df6:	781a      	ldrb	r2, [r3, #0]
 8005df8:	7b7b      	ldrb	r3, [r7, #13]
 8005dfa:	4413      	add	r3, r2
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	737b      	strb	r3, [r7, #13]
		#if _WIZCHIP_ < W5200	//2016.10.28 peter add condition for w5100 and w5100s
			if(tmp > 8) return -1;
 8005e00:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8005e04:	2b08      	cmp	r3, #8
 8005e06:	dd02      	ble.n	8005e0e <wizchip_init+0x116>
 8005e08:	f04f 33ff 	mov.w	r3, #4294967295
 8005e0c:	e052      	b.n	8005eb4 <wizchip_init+0x1bc>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	3301      	adds	r3, #1
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	73fb      	strb	r3, [r7, #15]
 8005e1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e1e:	2b03      	cmp	r3, #3
 8005e20:	dde5      	ble.n	8005dee <wizchip_init+0xf6>
		#else
			if(tmp > 16) return -1;
		#endif
		}

		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e22:	2300      	movs	r3, #0
 8005e24:	73fb      	strb	r3, [r7, #15]
 8005e26:	e040      	b.n	8005eaa <wizchip_init+0x1b2>
		{
		#if _WIZCHIP_ < W5200	// add condition for w5100
			j = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	73bb      	strb	r3, [r7, #14]
			while((rxsize[i] >> j != 1)&&(txsize[i] !=0)){j++;}
 8005e2c:	e005      	b.n	8005e3a <wizchip_init+0x142>
 8005e2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	3301      	adds	r3, #1
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	73bb      	strb	r3, [r7, #14]
 8005e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	4413      	add	r3, r2
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	461a      	mov	r2, r3
 8005e46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e4a:	fa42 f303 	asr.w	r3, r2, r3
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d006      	beq.n	8005e60 <wizchip_init+0x168>
 8005e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e56:	687a      	ldr	r2, [r7, #4]
 8005e58:	4413      	add	r3, r2
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e6      	bne.n	8005e2e <wizchip_init+0x136>
			setSn_RXBUF_SIZE(i, j);
 8005e60:	201a      	movs	r0, #26
 8005e62:	f7fe fb73 	bl	800454c <WIZCHIP_READ>
 8005e66:	4603      	mov	r3, r0
 8005e68:	b25a      	sxtb	r2, r3
 8005e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	2103      	movs	r1, #3
 8005e72:	fa01 f303 	lsl.w	r3, r1, r3
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	43db      	mvns	r3, r3
 8005e7a:	b25b      	sxtb	r3, r3
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	b25a      	sxtb	r2, r3
 8005e80:	f997 100e 	ldrsb.w	r1, [r7, #14]
 8005e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005e88:	005b      	lsls	r3, r3, #1
 8005e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8e:	b25b      	sxtb	r3, r3
 8005e90:	4313      	orrs	r3, r2
 8005e92:	b25b      	sxtb	r3, r3
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	4619      	mov	r1, r3
 8005e98:	201a      	movs	r0, #26
 8005e9a:	f7fe fb29 	bl	80044f0 <WIZCHIP_WRITE>
		for(i = 0 ; i < _WIZCHIP_SOCK_NUM_; i++)
 8005e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	3301      	adds	r3, #1
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	73fb      	strb	r3, [r7, #15]
 8005eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005eae:	2b03      	cmp	r3, #3
 8005eb0:	ddba      	ble.n	8005e28 <wizchip_init+0x130>
			setSn_RXBUF_SIZE(i, rxsize[i]);
		#endif
		}
	#endif
   }
   return 0;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3710      	adds	r7, #16
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <wizchip_setnetinfo>:
}
#endif


void wizchip_setnetinfo(wiz_NetInfo* pnetinfo)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
   setSHAR(pnetinfo->mac);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2206      	movs	r2, #6
 8005ec8:	4619      	mov	r1, r3
 8005eca:	2009      	movs	r0, #9
 8005ecc:	f7fe fb6c 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setGAR(pnetinfo->gw);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	330e      	adds	r3, #14
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	4619      	mov	r1, r3
 8005ed8:	2001      	movs	r0, #1
 8005eda:	f7fe fb65 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSUBR(pnetinfo->sn);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	330a      	adds	r3, #10
 8005ee2:	2204      	movs	r2, #4
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	2005      	movs	r0, #5
 8005ee8:	f7fe fb5e 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSIPR(pnetinfo->ip);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3306      	adds	r3, #6
 8005ef0:	2204      	movs	r2, #4
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	200f      	movs	r0, #15
 8005ef6:	f7fe fb57 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   _DNS_[0] = pnetinfo->dns[0];
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	7c9a      	ldrb	r2, [r3, #18]
 8005efe:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <wizchip_setnetinfo+0x70>)
 8005f00:	701a      	strb	r2, [r3, #0]
   _DNS_[1] = pnetinfo->dns[1];
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	7cda      	ldrb	r2, [r3, #19]
 8005f06:	4b09      	ldr	r3, [pc, #36]	; (8005f2c <wizchip_setnetinfo+0x70>)
 8005f08:	705a      	strb	r2, [r3, #1]
   _DNS_[2] = pnetinfo->dns[2];
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	7d1a      	ldrb	r2, [r3, #20]
 8005f0e:	4b07      	ldr	r3, [pc, #28]	; (8005f2c <wizchip_setnetinfo+0x70>)
 8005f10:	709a      	strb	r2, [r3, #2]
   _DNS_[3] = pnetinfo->dns[3];
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	7d5a      	ldrb	r2, [r3, #21]
 8005f16:	4b05      	ldr	r3, [pc, #20]	; (8005f2c <wizchip_setnetinfo+0x70>)
 8005f18:	70da      	strb	r2, [r3, #3]
   _DHCP_   = pnetinfo->dhcp;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	7d9a      	ldrb	r2, [r3, #22]
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <wizchip_setnetinfo+0x74>)
 8005f20:	701a      	strb	r2, [r3, #0]
}
 8005f22:	bf00      	nop
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	2000869c 	.word	0x2000869c
 8005f30:	200086a0 	.word	0x200086a0

08005f34 <default_ip_assign>:
/* Parse message as OFFER and ACK and NACK from DHCP server.*/
int8_t   parseDHCPCMSG(void);

/* The default handler of ip assign first */
void default_ip_assign(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
   setSIPR(DHCP_allocated_ip);
 8005f38:	2204      	movs	r2, #4
 8005f3a:	4908      	ldr	r1, [pc, #32]	; (8005f5c <default_ip_assign+0x28>)
 8005f3c:	200f      	movs	r0, #15
 8005f3e:	f7fe fb33 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setSUBR(DHCP_allocated_sn);
 8005f42:	2204      	movs	r2, #4
 8005f44:	4906      	ldr	r1, [pc, #24]	; (8005f60 <default_ip_assign+0x2c>)
 8005f46:	2005      	movs	r0, #5
 8005f48:	f7fe fb2e 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   setGAR (DHCP_allocated_gw);
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	4905      	ldr	r1, [pc, #20]	; (8005f64 <default_ip_assign+0x30>)
 8005f50:	2001      	movs	r0, #1
 8005f52:	f7fe fb29 	bl	80045a8 <WIZCHIP_WRITE_BUF>
}
 8005f56:	bf00      	nop
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	200086a8 	.word	0x200086a8
 8005f60:	200086b0 	.word	0x200086b0
 8005f64:	200086ac 	.word	0x200086ac

08005f68 <default_ip_update>:

/* The default handler of ip changed */
void default_ip_update(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
	/* WIZchip Software Reset */
   setMR(MR_RST);
 8005f6c:	2180      	movs	r1, #128	; 0x80
 8005f6e:	2000      	movs	r0, #0
 8005f70:	f7fe fabe 	bl	80044f0 <WIZCHIP_WRITE>
   getMR(); // for delay
 8005f74:	2000      	movs	r0, #0
 8005f76:	f7fe fae9 	bl	800454c <WIZCHIP_READ>
   default_ip_assign();
 8005f7a:	f7ff ffdb 	bl	8005f34 <default_ip_assign>
   setSHAR(DHCP_CHADDR);
 8005f7e:	2206      	movs	r2, #6
 8005f80:	4902      	ldr	r1, [pc, #8]	; (8005f8c <default_ip_update+0x24>)
 8005f82:	2009      	movs	r0, #9
 8005f84:	f7fe fb10 	bl	80045a8 <WIZCHIP_WRITE_BUF>
}
 8005f88:	bf00      	nop
 8005f8a:	bd80      	pop	{r7, pc}
 8005f8c:	20008b6c 	.word	0x20008b6c

08005f90 <default_ip_conflict>:

/* The default handler of ip changed */
void default_ip_conflict(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
	// WIZchip Software Reset
	setMR(MR_RST);
 8005f94:	2180      	movs	r1, #128	; 0x80
 8005f96:	2000      	movs	r0, #0
 8005f98:	f7fe faaa 	bl	80044f0 <WIZCHIP_WRITE>
	getMR(); // for delay
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	f7fe fad5 	bl	800454c <WIZCHIP_READ>
	setSHAR(DHCP_CHADDR);
 8005fa2:	2206      	movs	r2, #6
 8005fa4:	4902      	ldr	r1, [pc, #8]	; (8005fb0 <default_ip_conflict+0x20>)
 8005fa6:	2009      	movs	r0, #9
 8005fa8:	f7fe fafe 	bl	80045a8 <WIZCHIP_WRITE_BUF>
}
 8005fac:	bf00      	nop
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	20008b6c 	.word	0x20008b6c

08005fb4 <reg_dhcp_cbfunc>:

/* register the call back func. */
void reg_dhcp_cbfunc(void(*ip_assign)(void), void(*ip_update)(void), void(*ip_conflict)(void))
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
   dhcp_ip_assign   = default_ip_assign;
 8005fc0:	4b10      	ldr	r3, [pc, #64]	; (8006004 <reg_dhcp_cbfunc+0x50>)
 8005fc2:	4a11      	ldr	r2, [pc, #68]	; (8006008 <reg_dhcp_cbfunc+0x54>)
 8005fc4:	601a      	str	r2, [r3, #0]
   dhcp_ip_update   = default_ip_update;
 8005fc6:	4b11      	ldr	r3, [pc, #68]	; (800600c <reg_dhcp_cbfunc+0x58>)
 8005fc8:	4a11      	ldr	r2, [pc, #68]	; (8006010 <reg_dhcp_cbfunc+0x5c>)
 8005fca:	601a      	str	r2, [r3, #0]
   dhcp_ip_conflict = default_ip_conflict;
 8005fcc:	4b11      	ldr	r3, [pc, #68]	; (8006014 <reg_dhcp_cbfunc+0x60>)
 8005fce:	4a12      	ldr	r2, [pc, #72]	; (8006018 <reg_dhcp_cbfunc+0x64>)
 8005fd0:	601a      	str	r2, [r3, #0]
   if(ip_assign)   dhcp_ip_assign = ip_assign;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <reg_dhcp_cbfunc+0x2a>
 8005fd8:	4a0a      	ldr	r2, [pc, #40]	; (8006004 <reg_dhcp_cbfunc+0x50>)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6013      	str	r3, [r2, #0]
   if(ip_update)   dhcp_ip_update = ip_update;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d002      	beq.n	8005fea <reg_dhcp_cbfunc+0x36>
 8005fe4:	4a09      	ldr	r2, [pc, #36]	; (800600c <reg_dhcp_cbfunc+0x58>)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	6013      	str	r3, [r2, #0]
   if(ip_conflict) dhcp_ip_conflict = ip_conflict;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d002      	beq.n	8005ff6 <reg_dhcp_cbfunc+0x42>
 8005ff0:	4a08      	ldr	r2, [pc, #32]	; (8006014 <reg_dhcp_cbfunc+0x60>)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6013      	str	r3, [r2, #0]
}
 8005ff6:	bf00      	nop
 8005ff8:	3714      	adds	r7, #20
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr
 8006002:	bf00      	nop
 8006004:	20000058 	.word	0x20000058
 8006008:	08005f35 	.word	0x08005f35
 800600c:	2000005c 	.word	0x2000005c
 8006010:	08005f69 	.word	0x08005f69
 8006014:	20000060 	.word	0x20000060
 8006018:	08005f91 	.word	0x08005f91

0800601c <makeDHCPMSG>:

/* make the common DHCP message */
void makeDHCPMSG(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
   uint8_t  bk_mac[6];
   uint8_t* ptmp;
   uint8_t  i;
   getSHAR(bk_mac);
 8006022:	463b      	mov	r3, r7
 8006024:	2206      	movs	r2, #6
 8006026:	4619      	mov	r1, r3
 8006028:	2009      	movs	r0, #9
 800602a:	f7fe fb0b 	bl	8004644 <WIZCHIP_READ_BUF>
	pDHCPMSG->op      = DHCP_BOOTREQUEST;
 800602e:	4b72      	ldr	r3, [pc, #456]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2201      	movs	r2, #1
 8006034:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->htype   = DHCP_HTYPE10MB;
 8006036:	4b70      	ldr	r3, [pc, #448]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	2201      	movs	r2, #1
 800603c:	705a      	strb	r2, [r3, #1]
	pDHCPMSG->hlen    = DHCP_HLENETHERNET;
 800603e:	4b6e      	ldr	r3, [pc, #440]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2206      	movs	r2, #6
 8006044:	709a      	strb	r2, [r3, #2]
	pDHCPMSG->hops    = DHCP_HOPS;
 8006046:	4b6c      	ldr	r3, [pc, #432]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	2200      	movs	r2, #0
 800604c:	70da      	strb	r2, [r3, #3]
	ptmp              = (uint8_t*)(&pDHCPMSG->xid);
 800604e:	4b6a      	ldr	r3, [pc, #424]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_XID & 0xFF000000) >> 24);
 8006056:	4b69      	ldr	r3, [pc, #420]	; (80061fc <makeDHCPMSG+0x1e0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	0e1b      	lsrs	r3, r3, #24
 800605c:	b2da      	uxtb	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_XID & 0x00FF0000) >> 16);
 8006062:	4b66      	ldr	r3, [pc, #408]	; (80061fc <makeDHCPMSG+0x1e0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	0c1a      	lsrs	r2, r3, #16
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	3301      	adds	r3, #1
 800606c:	b2d2      	uxtb	r2, r2
 800606e:	701a      	strb	r2, [r3, #0]
   *(ptmp+2)         = (uint8_t)((DHCP_XID & 0x0000FF00) >>  8);
 8006070:	4b62      	ldr	r3, [pc, #392]	; (80061fc <makeDHCPMSG+0x1e0>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	0a1a      	lsrs	r2, r3, #8
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	3302      	adds	r3, #2
 800607a:	b2d2      	uxtb	r2, r2
 800607c:	701a      	strb	r2, [r3, #0]
	*(ptmp+3)         = (uint8_t)((DHCP_XID & 0x000000FF) >>  0);   
 800607e:	4b5f      	ldr	r3, [pc, #380]	; (80061fc <makeDHCPMSG+0x1e0>)
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3303      	adds	r3, #3
 8006086:	b2d2      	uxtb	r2, r2
 8006088:	701a      	strb	r2, [r3, #0]
	pDHCPMSG->secs    = DHCP_SECS;
 800608a:	4b5b      	ldr	r3, [pc, #364]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	2200      	movs	r2, #0
 8006090:	811a      	strh	r2, [r3, #8]
	ptmp              = (uint8_t*)(&pDHCPMSG->flags);	
 8006092:	4b59      	ldr	r3, [pc, #356]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	330a      	adds	r3, #10
 8006098:	60bb      	str	r3, [r7, #8]
	*(ptmp+0)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0xFF00) >> 8);
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	2280      	movs	r2, #128	; 0x80
 800609e:	701a      	strb	r2, [r3, #0]
	*(ptmp+1)         = (uint8_t)((DHCP_FLAGSBROADCAST & 0x00FF) >> 0);
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	3301      	adds	r3, #1
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]

	pDHCPMSG->ciaddr[0] = 0;
 80060a8:	4b53      	ldr	r3, [pc, #332]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	2200      	movs	r2, #0
 80060ae:	731a      	strb	r2, [r3, #12]
	pDHCPMSG->ciaddr[1] = 0;
 80060b0:	4b51      	ldr	r3, [pc, #324]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	2200      	movs	r2, #0
 80060b6:	735a      	strb	r2, [r3, #13]
	pDHCPMSG->ciaddr[2] = 0;
 80060b8:	4b4f      	ldr	r3, [pc, #316]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2200      	movs	r2, #0
 80060be:	739a      	strb	r2, [r3, #14]
	pDHCPMSG->ciaddr[3] = 0;
 80060c0:	4b4d      	ldr	r3, [pc, #308]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2200      	movs	r2, #0
 80060c6:	73da      	strb	r2, [r3, #15]

	pDHCPMSG->yiaddr[0] = 0;
 80060c8:	4b4b      	ldr	r3, [pc, #300]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	741a      	strb	r2, [r3, #16]
	pDHCPMSG->yiaddr[1] = 0;
 80060d0:	4b49      	ldr	r3, [pc, #292]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2200      	movs	r2, #0
 80060d6:	745a      	strb	r2, [r3, #17]
	pDHCPMSG->yiaddr[2] = 0;
 80060d8:	4b47      	ldr	r3, [pc, #284]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2200      	movs	r2, #0
 80060de:	749a      	strb	r2, [r3, #18]
	pDHCPMSG->yiaddr[3] = 0;
 80060e0:	4b45      	ldr	r3, [pc, #276]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2200      	movs	r2, #0
 80060e6:	74da      	strb	r2, [r3, #19]

	pDHCPMSG->siaddr[0] = 0;
 80060e8:	4b43      	ldr	r3, [pc, #268]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	2200      	movs	r2, #0
 80060ee:	751a      	strb	r2, [r3, #20]
	pDHCPMSG->siaddr[1] = 0;
 80060f0:	4b41      	ldr	r3, [pc, #260]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	2200      	movs	r2, #0
 80060f6:	755a      	strb	r2, [r3, #21]
	pDHCPMSG->siaddr[2] = 0;
 80060f8:	4b3f      	ldr	r3, [pc, #252]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2200      	movs	r2, #0
 80060fe:	759a      	strb	r2, [r3, #22]
	pDHCPMSG->siaddr[3] = 0;
 8006100:	4b3d      	ldr	r3, [pc, #244]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	2200      	movs	r2, #0
 8006106:	75da      	strb	r2, [r3, #23]

	pDHCPMSG->giaddr[0] = 0;
 8006108:	4b3b      	ldr	r3, [pc, #236]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2200      	movs	r2, #0
 800610e:	761a      	strb	r2, [r3, #24]
	pDHCPMSG->giaddr[1] = 0;
 8006110:	4b39      	ldr	r3, [pc, #228]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	2200      	movs	r2, #0
 8006116:	765a      	strb	r2, [r3, #25]
	pDHCPMSG->giaddr[2] = 0;
 8006118:	4b37      	ldr	r3, [pc, #220]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2200      	movs	r2, #0
 800611e:	769a      	strb	r2, [r3, #26]
	pDHCPMSG->giaddr[3] = 0;
 8006120:	4b35      	ldr	r3, [pc, #212]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	76da      	strb	r2, [r3, #27]

	pDHCPMSG->chaddr[0] = DHCP_CHADDR[0];
 8006128:	4b33      	ldr	r3, [pc, #204]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a34      	ldr	r2, [pc, #208]	; (8006200 <makeDHCPMSG+0x1e4>)
 800612e:	7812      	ldrb	r2, [r2, #0]
 8006130:	771a      	strb	r2, [r3, #28]
	pDHCPMSG->chaddr[1] = DHCP_CHADDR[1];
 8006132:	4b31      	ldr	r3, [pc, #196]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a32      	ldr	r2, [pc, #200]	; (8006200 <makeDHCPMSG+0x1e4>)
 8006138:	7852      	ldrb	r2, [r2, #1]
 800613a:	775a      	strb	r2, [r3, #29]
	pDHCPMSG->chaddr[2] = DHCP_CHADDR[2];
 800613c:	4b2e      	ldr	r3, [pc, #184]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a2f      	ldr	r2, [pc, #188]	; (8006200 <makeDHCPMSG+0x1e4>)
 8006142:	7892      	ldrb	r2, [r2, #2]
 8006144:	779a      	strb	r2, [r3, #30]
	pDHCPMSG->chaddr[3] = DHCP_CHADDR[3];
 8006146:	4b2c      	ldr	r3, [pc, #176]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a2d      	ldr	r2, [pc, #180]	; (8006200 <makeDHCPMSG+0x1e4>)
 800614c:	78d2      	ldrb	r2, [r2, #3]
 800614e:	77da      	strb	r2, [r3, #31]
	pDHCPMSG->chaddr[4] = DHCP_CHADDR[4];
 8006150:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <makeDHCPMSG+0x1e4>)
 8006156:	7912      	ldrb	r2, [r2, #4]
 8006158:	f883 2020 	strb.w	r2, [r3, #32]
	pDHCPMSG->chaddr[5] = DHCP_CHADDR[5];
 800615c:	4b26      	ldr	r3, [pc, #152]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a27      	ldr	r2, [pc, #156]	; (8006200 <makeDHCPMSG+0x1e4>)
 8006162:	7952      	ldrb	r2, [r2, #5]
 8006164:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	for (i = 6; i < 16; i++)  pDHCPMSG->chaddr[i] = 0;
 8006168:	2306      	movs	r3, #6
 800616a:	73fb      	strb	r3, [r7, #15]
 800616c:	e008      	b.n	8006180 <makeDHCPMSG+0x164>
 800616e:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <makeDHCPMSG+0x1dc>)
 8006170:	681a      	ldr	r2, [r3, #0]
 8006172:	7bfb      	ldrb	r3, [r7, #15]
 8006174:	4413      	add	r3, r2
 8006176:	2200      	movs	r2, #0
 8006178:	771a      	strb	r2, [r3, #28]
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	3301      	adds	r3, #1
 800617e:	73fb      	strb	r3, [r7, #15]
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	2b0f      	cmp	r3, #15
 8006184:	d9f3      	bls.n	800616e <makeDHCPMSG+0x152>
	for (i = 0; i < 64; i++)  pDHCPMSG->sname[i]  = 0;
 8006186:	2300      	movs	r3, #0
 8006188:	73fb      	strb	r3, [r7, #15]
 800618a:	e009      	b.n	80061a0 <makeDHCPMSG+0x184>
 800618c:	4b1a      	ldr	r3, [pc, #104]	; (80061f8 <makeDHCPMSG+0x1dc>)
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	7bfb      	ldrb	r3, [r7, #15]
 8006192:	4413      	add	r3, r2
 8006194:	2200      	movs	r2, #0
 8006196:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800619a:	7bfb      	ldrb	r3, [r7, #15]
 800619c:	3301      	adds	r3, #1
 800619e:	73fb      	strb	r3, [r7, #15]
 80061a0:	7bfb      	ldrb	r3, [r7, #15]
 80061a2:	2b3f      	cmp	r3, #63	; 0x3f
 80061a4:	d9f2      	bls.n	800618c <makeDHCPMSG+0x170>
	for (i = 0; i < 128; i++) pDHCPMSG->file[i]   = 0;
 80061a6:	2300      	movs	r3, #0
 80061a8:	73fb      	strb	r3, [r7, #15]
 80061aa:	e009      	b.n	80061c0 <makeDHCPMSG+0x1a4>
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	7bfb      	ldrb	r3, [r7, #15]
 80061b2:	4413      	add	r3, r2
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80061ba:	7bfb      	ldrb	r3, [r7, #15]
 80061bc:	3301      	adds	r3, #1
 80061be:	73fb      	strb	r3, [r7, #15]
 80061c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	daf1      	bge.n	80061ac <makeDHCPMSG+0x190>

	// MAGIC_COOKIE
	pDHCPMSG->OPT[0] = (uint8_t)((MAGIC_COOKIE & 0xFF000000) >> 24);
 80061c8:	4b0b      	ldr	r3, [pc, #44]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2263      	movs	r2, #99	; 0x63
 80061ce:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[1] = (uint8_t)((MAGIC_COOKIE & 0x00FF0000) >> 16);
 80061d2:	4b09      	ldr	r3, [pc, #36]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2282      	movs	r2, #130	; 0x82
 80061d8:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	pDHCPMSG->OPT[2] = (uint8_t)((MAGIC_COOKIE & 0x0000FF00) >>  8);
 80061dc:	4b06      	ldr	r3, [pc, #24]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2253      	movs	r2, #83	; 0x53
 80061e2:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
	pDHCPMSG->OPT[3] = (uint8_t) (MAGIC_COOKIE & 0x000000FF) >>  0;
 80061e6:	4b04      	ldr	r3, [pc, #16]	; (80061f8 <makeDHCPMSG+0x1dc>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2263      	movs	r2, #99	; 0x63
 80061ec:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
}
 80061f0:	bf00      	nop
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}
 80061f8:	20008b80 	.word	0x20008b80
 80061fc:	20008b74 	.word	0x20008b74
 8006200:	20008b6c 	.word	0x20008b6c

08006204 <send_DHCP_DISCOVER>:

/* SEND DHCP DISCOVER */
void send_DHCP_DISCOVER(void)
{
 8006204:	b5b0      	push	{r4, r5, r7, lr}
 8006206:	b084      	sub	sp, #16
 8006208:	af02      	add	r7, sp, #8
	uint16_t i;
	uint8_t ip[4];
	uint16_t k = 0;
 800620a:	2300      	movs	r3, #0
 800620c:	80bb      	strh	r3, [r7, #4]
   
   makeDHCPMSG();
 800620e:	f7ff ff05 	bl	800601c <makeDHCPMSG>
   DHCP_SIP[0]=0;
 8006212:	4b56      	ldr	r3, [pc, #344]	; (800636c <send_DHCP_DISCOVER+0x168>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
   DHCP_SIP[1]=0;
 8006218:	4b54      	ldr	r3, [pc, #336]	; (800636c <send_DHCP_DISCOVER+0x168>)
 800621a:	2200      	movs	r2, #0
 800621c:	705a      	strb	r2, [r3, #1]
   DHCP_SIP[2]=0;
 800621e:	4b53      	ldr	r3, [pc, #332]	; (800636c <send_DHCP_DISCOVER+0x168>)
 8006220:	2200      	movs	r2, #0
 8006222:	709a      	strb	r2, [r3, #2]
   DHCP_SIP[3]=0;
 8006224:	4b51      	ldr	r3, [pc, #324]	; (800636c <send_DHCP_DISCOVER+0x168>)
 8006226:	2200      	movs	r2, #0
 8006228:	70da      	strb	r2, [r3, #3]
   DHCP_REAL_SIP[0]=0;
 800622a:	4b51      	ldr	r3, [pc, #324]	; (8006370 <send_DHCP_DISCOVER+0x16c>)
 800622c:	2200      	movs	r2, #0
 800622e:	701a      	strb	r2, [r3, #0]
   DHCP_REAL_SIP[1]=0;
 8006230:	4b4f      	ldr	r3, [pc, #316]	; (8006370 <send_DHCP_DISCOVER+0x16c>)
 8006232:	2200      	movs	r2, #0
 8006234:	705a      	strb	r2, [r3, #1]
   DHCP_REAL_SIP[2]=0;
 8006236:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <send_DHCP_DISCOVER+0x16c>)
 8006238:	2200      	movs	r2, #0
 800623a:	709a      	strb	r2, [r3, #2]
   DHCP_REAL_SIP[3]=0;
 800623c:	4b4c      	ldr	r3, [pc, #304]	; (8006370 <send_DHCP_DISCOVER+0x16c>)
 800623e:	2200      	movs	r2, #0
 8006240:	70da      	strb	r2, [r3, #3]

   k = 4;     // because MAGIC_COOKIE already made by makeDHCPMSG()
 8006242:	2304      	movs	r3, #4
 8006244:	80bb      	strh	r3, [r7, #4]
   
	// Option Request Param
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006246:	4b4b      	ldr	r3, [pc, #300]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	88bb      	ldrh	r3, [r7, #4]
 800624c:	1c59      	adds	r1, r3, #1
 800624e:	80b9      	strh	r1, [r7, #4]
 8006250:	4413      	add	r3, r2
 8006252:	2235      	movs	r2, #53	; 0x35
 8006254:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006258:	4b46      	ldr	r3, [pc, #280]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	88bb      	ldrh	r3, [r7, #4]
 800625e:	1c59      	adds	r1, r3, #1
 8006260:	80b9      	strh	r1, [r7, #4]
 8006262:	4413      	add	r3, r2
 8006264:	2201      	movs	r2, #1
 8006266:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DISCOVER;
 800626a:	4b42      	ldr	r3, [pc, #264]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	88bb      	ldrh	r3, [r7, #4]
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	80b9      	strh	r1, [r7, #4]
 8006274:	4413      	add	r3, r2
 8006276:	2201      	movs	r2, #1
 8006278:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// Client identifier
	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800627c:	4b3d      	ldr	r3, [pc, #244]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	88bb      	ldrh	r3, [r7, #4]
 8006282:	1c59      	adds	r1, r3, #1
 8006284:	80b9      	strh	r1, [r7, #4]
 8006286:	4413      	add	r3, r2
 8006288:	223d      	movs	r2, #61	; 0x3d
 800628a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800628e:	4b39      	ldr	r3, [pc, #228]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	88bb      	ldrh	r3, [r7, #4]
 8006294:	1c59      	adds	r1, r3, #1
 8006296:	80b9      	strh	r1, [r7, #4]
 8006298:	4413      	add	r3, r2
 800629a:	2207      	movs	r2, #7
 800629c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 80062a0:	4b34      	ldr	r3, [pc, #208]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	88bb      	ldrh	r3, [r7, #4]
 80062a6:	1c59      	adds	r1, r3, #1
 80062a8:	80b9      	strh	r1, [r7, #4]
 80062aa:	4413      	add	r3, r2
 80062ac:	2201      	movs	r2, #1
 80062ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80062b2:	4b30      	ldr	r3, [pc, #192]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	88bb      	ldrh	r3, [r7, #4]
 80062b8:	1c59      	adds	r1, r3, #1
 80062ba:	80b9      	strh	r1, [r7, #4]
 80062bc:	4618      	mov	r0, r3
 80062be:	4b2e      	ldr	r3, [pc, #184]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 80062c0:	7819      	ldrb	r1, [r3, #0]
 80062c2:	1813      	adds	r3, r2, r0
 80062c4:	460a      	mov	r2, r1
 80062c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80062ca:	4b2a      	ldr	r3, [pc, #168]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	88bb      	ldrh	r3, [r7, #4]
 80062d0:	1c59      	adds	r1, r3, #1
 80062d2:	80b9      	strh	r1, [r7, #4]
 80062d4:	4618      	mov	r0, r3
 80062d6:	4b28      	ldr	r3, [pc, #160]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 80062d8:	7859      	ldrb	r1, [r3, #1]
 80062da:	1813      	adds	r3, r2, r0
 80062dc:	460a      	mov	r2, r1
 80062de:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80062e2:	4b24      	ldr	r3, [pc, #144]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	88bb      	ldrh	r3, [r7, #4]
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	80b9      	strh	r1, [r7, #4]
 80062ec:	4618      	mov	r0, r3
 80062ee:	4b22      	ldr	r3, [pc, #136]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 80062f0:	7899      	ldrb	r1, [r3, #2]
 80062f2:	1813      	adds	r3, r2, r0
 80062f4:	460a      	mov	r2, r1
 80062f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80062fa:	4b1e      	ldr	r3, [pc, #120]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	88bb      	ldrh	r3, [r7, #4]
 8006300:	1c59      	adds	r1, r3, #1
 8006302:	80b9      	strh	r1, [r7, #4]
 8006304:	4618      	mov	r0, r3
 8006306:	4b1c      	ldr	r3, [pc, #112]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 8006308:	78d9      	ldrb	r1, [r3, #3]
 800630a:	1813      	adds	r3, r2, r0
 800630c:	460a      	mov	r2, r1
 800630e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8006312:	4b18      	ldr	r3, [pc, #96]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	88bb      	ldrh	r3, [r7, #4]
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	80b9      	strh	r1, [r7, #4]
 800631c:	4618      	mov	r0, r3
 800631e:	4b16      	ldr	r3, [pc, #88]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 8006320:	7919      	ldrb	r1, [r3, #4]
 8006322:	1813      	adds	r3, r2, r0
 8006324:	460a      	mov	r2, r1
 8006326:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 800632a:	4b12      	ldr	r3, [pc, #72]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	88bb      	ldrh	r3, [r7, #4]
 8006330:	1c59      	adds	r1, r3, #1
 8006332:	80b9      	strh	r1, [r7, #4]
 8006334:	4618      	mov	r0, r3
 8006336:	4b10      	ldr	r3, [pc, #64]	; (8006378 <send_DHCP_DISCOVER+0x174>)
 8006338:	7959      	ldrb	r1, [r3, #5]
 800633a:	1813      	adds	r3, r2, r0
 800633c:	460a      	mov	r2, r1
 800633e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	88bb      	ldrh	r3, [r7, #4]
 8006348:	1c59      	adds	r1, r3, #1
 800634a:	80b9      	strh	r1, [r7, #4]
 800634c:	4413      	add	r3, r2
 800634e:	220c      	movs	r2, #12
 8006350:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0;          // fill zero length of hostname 
 8006354:	4b07      	ldr	r3, [pc, #28]	; (8006374 <send_DHCP_DISCOVER+0x170>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	88bb      	ldrh	r3, [r7, #4]
 800635a:	1c59      	adds	r1, r3, #1
 800635c:	80b9      	strh	r1, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	2200      	movs	r2, #0
 8006362:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006366:	2300      	movs	r3, #0
 8006368:	80fb      	strh	r3, [r7, #6]
 800636a:	e017      	b.n	800639c <send_DHCP_DISCOVER+0x198>
 800636c:	20008b7c 	.word	0x20008b7c
 8006370:	20008b78 	.word	0x20008b78
 8006374:	20008b80 	.word	0x20008b80
 8006378:	20008b6c 	.word	0x20008b6c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800637c:	88f9      	ldrh	r1, [r7, #6]
 800637e:	4b81      	ldr	r3, [pc, #516]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	88bb      	ldrh	r3, [r7, #4]
 8006384:	1c58      	adds	r0, r3, #1
 8006386:	80b8      	strh	r0, [r7, #4]
 8006388:	4618      	mov	r0, r3
 800638a:	4b7f      	ldr	r3, [pc, #508]	; (8006588 <send_DHCP_DISCOVER+0x384>)
 800638c:	5c59      	ldrb	r1, [r3, r1]
 800638e:	1813      	adds	r3, r2, r0
 8006390:	460a      	mov	r2, r1
 8006392:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006396:	88fb      	ldrh	r3, [r7, #6]
 8006398:	3301      	adds	r3, #1
 800639a:	80fb      	strh	r3, [r7, #6]
 800639c:	88fb      	ldrh	r3, [r7, #6]
 800639e:	4a7a      	ldr	r2, [pc, #488]	; (8006588 <send_DHCP_DISCOVER+0x384>)
 80063a0:	5cd3      	ldrb	r3, [r2, r3]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d1ea      	bne.n	800637c <send_DHCP_DISCOVER+0x178>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80063a6:	4b79      	ldr	r3, [pc, #484]	; (800658c <send_DHCP_DISCOVER+0x388>)
 80063a8:	78db      	ldrb	r3, [r3, #3]
 80063aa:	091b      	lsrs	r3, r3, #4
 80063ac:	b2da      	uxtb	r2, r3
 80063ae:	4b75      	ldr	r3, [pc, #468]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80063b0:	681c      	ldr	r4, [r3, #0]
 80063b2:	88bb      	ldrh	r3, [r7, #4]
 80063b4:	1c59      	adds	r1, r3, #1
 80063b6:	80b9      	strh	r1, [r7, #4]
 80063b8:	461d      	mov	r5, r3
 80063ba:	4610      	mov	r0, r2
 80063bc:	f001 f936 	bl	800762c <NibbleToHex>
 80063c0:	4603      	mov	r3, r0
 80063c2:	461a      	mov	r2, r3
 80063c4:	1963      	adds	r3, r4, r5
 80063c6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80063ca:	4b70      	ldr	r3, [pc, #448]	; (800658c <send_DHCP_DISCOVER+0x388>)
 80063cc:	78da      	ldrb	r2, [r3, #3]
 80063ce:	4b6d      	ldr	r3, [pc, #436]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80063d0:	681c      	ldr	r4, [r3, #0]
 80063d2:	88bb      	ldrh	r3, [r7, #4]
 80063d4:	1c59      	adds	r1, r3, #1
 80063d6:	80b9      	strh	r1, [r7, #4]
 80063d8:	461d      	mov	r5, r3
 80063da:	4610      	mov	r0, r2
 80063dc:	f001 f926 	bl	800762c <NibbleToHex>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	1963      	adds	r3, r4, r5
 80063e6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80063ea:	4b68      	ldr	r3, [pc, #416]	; (800658c <send_DHCP_DISCOVER+0x388>)
 80063ec:	791b      	ldrb	r3, [r3, #4]
 80063ee:	091b      	lsrs	r3, r3, #4
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	4b64      	ldr	r3, [pc, #400]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80063f4:	681c      	ldr	r4, [r3, #0]
 80063f6:	88bb      	ldrh	r3, [r7, #4]
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	80b9      	strh	r1, [r7, #4]
 80063fc:	461d      	mov	r5, r3
 80063fe:	4610      	mov	r0, r2
 8006400:	f001 f914 	bl	800762c <NibbleToHex>
 8006404:	4603      	mov	r3, r0
 8006406:	461a      	mov	r2, r3
 8006408:	1963      	adds	r3, r4, r5
 800640a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 800640e:	4b5f      	ldr	r3, [pc, #380]	; (800658c <send_DHCP_DISCOVER+0x388>)
 8006410:	791a      	ldrb	r2, [r3, #4]
 8006412:	4b5c      	ldr	r3, [pc, #368]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006414:	681c      	ldr	r4, [r3, #0]
 8006416:	88bb      	ldrh	r3, [r7, #4]
 8006418:	1c59      	adds	r1, r3, #1
 800641a:	80b9      	strh	r1, [r7, #4]
 800641c:	461d      	mov	r5, r3
 800641e:	4610      	mov	r0, r2
 8006420:	f001 f904 	bl	800762c <NibbleToHex>
 8006424:	4603      	mov	r3, r0
 8006426:	461a      	mov	r2, r3
 8006428:	1963      	adds	r3, r4, r5
 800642a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 800642e:	4b57      	ldr	r3, [pc, #348]	; (800658c <send_DHCP_DISCOVER+0x388>)
 8006430:	795b      	ldrb	r3, [r3, #5]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	b2da      	uxtb	r2, r3
 8006436:	4b53      	ldr	r3, [pc, #332]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006438:	681c      	ldr	r4, [r3, #0]
 800643a:	88bb      	ldrh	r3, [r7, #4]
 800643c:	1c59      	adds	r1, r3, #1
 800643e:	80b9      	strh	r1, [r7, #4]
 8006440:	461d      	mov	r5, r3
 8006442:	4610      	mov	r0, r2
 8006444:	f001 f8f2 	bl	800762c <NibbleToHex>
 8006448:	4603      	mov	r3, r0
 800644a:	461a      	mov	r2, r3
 800644c:	1963      	adds	r3, r4, r5
 800644e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8006452:	4b4e      	ldr	r3, [pc, #312]	; (800658c <send_DHCP_DISCOVER+0x388>)
 8006454:	795a      	ldrb	r2, [r3, #5]
 8006456:	4b4b      	ldr	r3, [pc, #300]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006458:	681c      	ldr	r4, [r3, #0]
 800645a:	88bb      	ldrh	r3, [r7, #4]
 800645c:	1c59      	adds	r1, r3, #1
 800645e:	80b9      	strh	r1, [r7, #4]
 8006460:	461d      	mov	r5, r3
 8006462:	4610      	mov	r0, r2
 8006464:	f001 f8e2 	bl	800762c <NibbleToHex>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	1963      	adds	r3, r4, r5
 800646e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8006472:	88fb      	ldrh	r3, [r7, #6]
 8006474:	b2d9      	uxtb	r1, r3
 8006476:	4b43      	ldr	r3, [pc, #268]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	88b8      	ldrh	r0, [r7, #4]
 800647c:	88fb      	ldrh	r3, [r7, #6]
 800647e:	3307      	adds	r3, #7
 8006480:	1ac3      	subs	r3, r0, r3
 8006482:	3106      	adds	r1, #6
 8006484:	b2c9      	uxtb	r1, r1
 8006486:	4413      	add	r3, r2
 8006488:	460a      	mov	r2, r1
 800648a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 800648e:	4b3d      	ldr	r3, [pc, #244]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006490:	681a      	ldr	r2, [r3, #0]
 8006492:	88bb      	ldrh	r3, [r7, #4]
 8006494:	1c59      	adds	r1, r3, #1
 8006496:	80b9      	strh	r1, [r7, #4]
 8006498:	4413      	add	r3, r2
 800649a:	2237      	movs	r2, #55	; 0x37
 800649c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x06;	// length of request
 80064a0:	4b38      	ldr	r3, [pc, #224]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	88bb      	ldrh	r3, [r7, #4]
 80064a6:	1c59      	adds	r1, r3, #1
 80064a8:	80b9      	strh	r1, [r7, #4]
 80064aa:	4413      	add	r3, r2
 80064ac:	2206      	movs	r2, #6
 80064ae:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80064b2:	4b34      	ldr	r3, [pc, #208]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	88bb      	ldrh	r3, [r7, #4]
 80064b8:	1c59      	adds	r1, r3, #1
 80064ba:	80b9      	strh	r1, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80064c4:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	88bb      	ldrh	r3, [r7, #4]
 80064ca:	1c59      	adds	r1, r3, #1
 80064cc:	80b9      	strh	r1, [r7, #4]
 80064ce:	4413      	add	r3, r2
 80064d0:	2203      	movs	r2, #3
 80064d2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80064d6:	4b2b      	ldr	r3, [pc, #172]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	88bb      	ldrh	r3, [r7, #4]
 80064dc:	1c59      	adds	r1, r3, #1
 80064de:	80b9      	strh	r1, [r7, #4]
 80064e0:	4413      	add	r3, r2
 80064e2:	2206      	movs	r2, #6
 80064e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80064e8:	4b26      	ldr	r3, [pc, #152]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	88bb      	ldrh	r3, [r7, #4]
 80064ee:	1c59      	adds	r1, r3, #1
 80064f0:	80b9      	strh	r1, [r7, #4]
 80064f2:	4413      	add	r3, r2
 80064f4:	220f      	movs	r2, #15
 80064f6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80064fa:	4b22      	ldr	r3, [pc, #136]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 80064fc:	681a      	ldr	r2, [r3, #0]
 80064fe:	88bb      	ldrh	r3, [r7, #4]
 8006500:	1c59      	adds	r1, r3, #1
 8006502:	80b9      	strh	r1, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	223a      	movs	r2, #58	; 0x3a
 8006508:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 800650c:	4b1d      	ldr	r3, [pc, #116]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	88bb      	ldrh	r3, [r7, #4]
 8006512:	1c59      	adds	r1, r3, #1
 8006514:	80b9      	strh	r1, [r7, #4]
 8006516:	4413      	add	r3, r2
 8006518:	223b      	movs	r2, #59	; 0x3b
 800651a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 800651e:	4b19      	ldr	r3, [pc, #100]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	88bb      	ldrh	r3, [r7, #4]
 8006524:	1c59      	adds	r1, r3, #1
 8006526:	80b9      	strh	r1, [r7, #4]
 8006528:	4413      	add	r3, r2
 800652a:	22ff      	movs	r2, #255	; 0xff
 800652c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006530:	88bb      	ldrh	r3, [r7, #4]
 8006532:	80fb      	strh	r3, [r7, #6]
 8006534:	e009      	b.n	800654a <send_DHCP_DISCOVER+0x346>
 8006536:	4b13      	ldr	r3, [pc, #76]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	4413      	add	r3, r2
 800653e:	2200      	movs	r2, #0
 8006540:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8006544:	88fb      	ldrh	r3, [r7, #6]
 8006546:	3301      	adds	r3, #1
 8006548:	80fb      	strh	r3, [r7, #6]
 800654a:	88fb      	ldrh	r3, [r7, #6]
 800654c:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8006550:	d3f1      	bcc.n	8006536 <send_DHCP_DISCOVER+0x332>

	// send broadcasting packet
	ip[0] = 255;
 8006552:	23ff      	movs	r3, #255	; 0xff
 8006554:	703b      	strb	r3, [r7, #0]
	ip[1] = 255;
 8006556:	23ff      	movs	r3, #255	; 0xff
 8006558:	707b      	strb	r3, [r7, #1]
	ip[2] = 255;
 800655a:	23ff      	movs	r3, #255	; 0xff
 800655c:	70bb      	strb	r3, [r7, #2]
	ip[3] = 255;
 800655e:	23ff      	movs	r3, #255	; 0xff
 8006560:	70fb      	strb	r3, [r7, #3]

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_DISCOVER\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8006562:	4b0b      	ldr	r3, [pc, #44]	; (8006590 <send_DHCP_DISCOVER+0x38c>)
 8006564:	7818      	ldrb	r0, [r3, #0]
 8006566:	4b07      	ldr	r3, [pc, #28]	; (8006584 <send_DHCP_DISCOVER+0x380>)
 8006568:	6819      	ldr	r1, [r3, #0]
 800656a:	463a      	mov	r2, r7
 800656c:	2343      	movs	r3, #67	; 0x43
 800656e:	9300      	str	r3, [sp, #0]
 8006570:	4613      	mov	r3, r2
 8006572:	f44f 7209 	mov.w	r2, #548	; 0x224
 8006576:	f7fe ffab 	bl	80054d0 <sendto>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bdb0      	pop	{r4, r5, r7, pc}
 8006582:	bf00      	nop
 8006584:	20008b80 	.word	0x20008b80
 8006588:	20000050 	.word	0x20000050
 800658c:	20008b6c 	.word	0x20008b6c
 8006590:	20008b84 	.word	0x20008b84

08006594 <send_DHCP_REQUEST>:

/* SEND DHCP REQUEST */
void send_DHCP_REQUEST(void)
{
 8006594:	b5b0      	push	{r4, r5, r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 800659a:	2300      	movs	r3, #0
 800659c:	817b      	strh	r3, [r7, #10]

   makeDHCPMSG();
 800659e:	f7ff fd3d 	bl	800601c <makeDHCPMSG>

   if(dhcp_state == STATE_DHCP_LEASED || dhcp_state == STATE_DHCP_REREQUEST)
 80065a2:	4b1b      	ldr	r3, [pc, #108]	; (8006610 <send_DHCP_REQUEST+0x7c>)
 80065a4:	f993 3000 	ldrsb.w	r3, [r3]
 80065a8:	2b03      	cmp	r3, #3
 80065aa:	d004      	beq.n	80065b6 <send_DHCP_REQUEST+0x22>
 80065ac:	4b18      	ldr	r3, [pc, #96]	; (8006610 <send_DHCP_REQUEST+0x7c>)
 80065ae:	f993 3000 	ldrsb.w	r3, [r3]
 80065b2:	2b04      	cmp	r3, #4
 80065b4:	d134      	bne.n	8006620 <send_DHCP_REQUEST+0x8c>
   {
   	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 80065b6:	4b17      	ldr	r3, [pc, #92]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	330a      	adds	r3, #10
 80065bc:	2200      	movs	r2, #0
 80065be:	701a      	strb	r2, [r3, #0]
   	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 80065c0:	4b14      	ldr	r3, [pc, #80]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	330a      	adds	r3, #10
 80065c6:	3301      	adds	r3, #1
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
   	pDHCPMSG->ciaddr[0] = DHCP_allocated_ip[0];
 80065cc:	4b11      	ldr	r3, [pc, #68]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a11      	ldr	r2, [pc, #68]	; (8006618 <send_DHCP_REQUEST+0x84>)
 80065d2:	7812      	ldrb	r2, [r2, #0]
 80065d4:	731a      	strb	r2, [r3, #12]
   	pDHCPMSG->ciaddr[1] = DHCP_allocated_ip[1];
 80065d6:	4b0f      	ldr	r3, [pc, #60]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a0f      	ldr	r2, [pc, #60]	; (8006618 <send_DHCP_REQUEST+0x84>)
 80065dc:	7852      	ldrb	r2, [r2, #1]
 80065de:	735a      	strb	r2, [r3, #13]
   	pDHCPMSG->ciaddr[2] = DHCP_allocated_ip[2];
 80065e0:	4b0c      	ldr	r3, [pc, #48]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <send_DHCP_REQUEST+0x84>)
 80065e6:	7892      	ldrb	r2, [r2, #2]
 80065e8:	739a      	strb	r2, [r3, #14]
   	pDHCPMSG->ciaddr[3] = DHCP_allocated_ip[3];
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <send_DHCP_REQUEST+0x80>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a0a      	ldr	r2, [pc, #40]	; (8006618 <send_DHCP_REQUEST+0x84>)
 80065f0:	78d2      	ldrb	r2, [r2, #3]
 80065f2:	73da      	strb	r2, [r3, #15]
   	ip[0] = DHCP_SIP[0];
 80065f4:	4b09      	ldr	r3, [pc, #36]	; (800661c <send_DHCP_REQUEST+0x88>)
 80065f6:	781b      	ldrb	r3, [r3, #0]
 80065f8:	713b      	strb	r3, [r7, #4]
   	ip[1] = DHCP_SIP[1];
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <send_DHCP_REQUEST+0x88>)
 80065fc:	785b      	ldrb	r3, [r3, #1]
 80065fe:	717b      	strb	r3, [r7, #5]
   	ip[2] = DHCP_SIP[2];
 8006600:	4b06      	ldr	r3, [pc, #24]	; (800661c <send_DHCP_REQUEST+0x88>)
 8006602:	789b      	ldrb	r3, [r3, #2]
 8006604:	71bb      	strb	r3, [r7, #6]
   	ip[3] = DHCP_SIP[3];   	   	   	
 8006606:	4b05      	ldr	r3, [pc, #20]	; (800661c <send_DHCP_REQUEST+0x88>)
 8006608:	78db      	ldrb	r3, [r3, #3]
 800660a:	71fb      	strb	r3, [r7, #7]
 800660c:	e010      	b.n	8006630 <send_DHCP_REQUEST+0x9c>
 800660e:	bf00      	nop
 8006610:	200086b8 	.word	0x200086b8
 8006614:	20008b80 	.word	0x20008b80
 8006618:	200086a8 	.word	0x200086a8
 800661c:	20008b7c 	.word	0x20008b7c
   }
   else
   {
   	ip[0] = 255;
 8006620:	23ff      	movs	r3, #255	; 0xff
 8006622:	713b      	strb	r3, [r7, #4]
   	ip[1] = 255;
 8006624:	23ff      	movs	r3, #255	; 0xff
 8006626:	717b      	strb	r3, [r7, #5]
   	ip[2] = 255;
 8006628:	23ff      	movs	r3, #255	; 0xff
 800662a:	71bb      	strb	r3, [r7, #6]
   	ip[3] = 255;   	   	   	
 800662c:	23ff      	movs	r3, #255	; 0xff
 800662e:	71fb      	strb	r3, [r7, #7]
   }
   
   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8006630:	2304      	movs	r3, #4
 8006632:	817b      	strh	r3, [r7, #10]
	
	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006634:	4b8d      	ldr	r3, [pc, #564]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	897b      	ldrh	r3, [r7, #10]
 800663a:	1c59      	adds	r1, r3, #1
 800663c:	8179      	strh	r1, [r7, #10]
 800663e:	4413      	add	r3, r2
 8006640:	2235      	movs	r2, #53	; 0x35
 8006642:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006646:	4b89      	ldr	r3, [pc, #548]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	897b      	ldrh	r3, [r7, #10]
 800664c:	1c59      	adds	r1, r3, #1
 800664e:	8179      	strh	r1, [r7, #10]
 8006650:	4413      	add	r3, r2
 8006652:	2201      	movs	r2, #1
 8006654:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_REQUEST;
 8006658:	4b84      	ldr	r3, [pc, #528]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	897b      	ldrh	r3, [r7, #10]
 800665e:	1c59      	adds	r1, r3, #1
 8006660:	8179      	strh	r1, [r7, #10]
 8006662:	4413      	add	r3, r2
 8006664:	2203      	movs	r2, #3
 8006666:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 800666a:	4b80      	ldr	r3, [pc, #512]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	897b      	ldrh	r3, [r7, #10]
 8006670:	1c59      	adds	r1, r3, #1
 8006672:	8179      	strh	r1, [r7, #10]
 8006674:	4413      	add	r3, r2
 8006676:	223d      	movs	r2, #61	; 0x3d
 8006678:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 800667c:	4b7b      	ldr	r3, [pc, #492]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	897b      	ldrh	r3, [r7, #10]
 8006682:	1c59      	adds	r1, r3, #1
 8006684:	8179      	strh	r1, [r7, #10]
 8006686:	4413      	add	r3, r2
 8006688:	2207      	movs	r2, #7
 800668a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 800668e:	4b77      	ldr	r3, [pc, #476]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	897b      	ldrh	r3, [r7, #10]
 8006694:	1c59      	adds	r1, r3, #1
 8006696:	8179      	strh	r1, [r7, #10]
 8006698:	4413      	add	r3, r2
 800669a:	2201      	movs	r2, #1
 800669c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 80066a0:	4b72      	ldr	r3, [pc, #456]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	897b      	ldrh	r3, [r7, #10]
 80066a6:	1c59      	adds	r1, r3, #1
 80066a8:	8179      	strh	r1, [r7, #10]
 80066aa:	4618      	mov	r0, r3
 80066ac:	4b70      	ldr	r3, [pc, #448]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 80066ae:	7819      	ldrb	r1, [r3, #0]
 80066b0:	1813      	adds	r3, r2, r0
 80066b2:	460a      	mov	r2, r1
 80066b4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 80066b8:	4b6c      	ldr	r3, [pc, #432]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	897b      	ldrh	r3, [r7, #10]
 80066be:	1c59      	adds	r1, r3, #1
 80066c0:	8179      	strh	r1, [r7, #10]
 80066c2:	4618      	mov	r0, r3
 80066c4:	4b6a      	ldr	r3, [pc, #424]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 80066c6:	7859      	ldrb	r1, [r3, #1]
 80066c8:	1813      	adds	r3, r2, r0
 80066ca:	460a      	mov	r2, r1
 80066cc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 80066d0:	4b66      	ldr	r3, [pc, #408]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	897b      	ldrh	r3, [r7, #10]
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	8179      	strh	r1, [r7, #10]
 80066da:	4618      	mov	r0, r3
 80066dc:	4b64      	ldr	r3, [pc, #400]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 80066de:	7899      	ldrb	r1, [r3, #2]
 80066e0:	1813      	adds	r3, r2, r0
 80066e2:	460a      	mov	r2, r1
 80066e4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 80066e8:	4b60      	ldr	r3, [pc, #384]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	897b      	ldrh	r3, [r7, #10]
 80066ee:	1c59      	adds	r1, r3, #1
 80066f0:	8179      	strh	r1, [r7, #10]
 80066f2:	4618      	mov	r0, r3
 80066f4:	4b5e      	ldr	r3, [pc, #376]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 80066f6:	78d9      	ldrb	r1, [r3, #3]
 80066f8:	1813      	adds	r3, r2, r0
 80066fa:	460a      	mov	r2, r1
 80066fc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8006700:	4b5a      	ldr	r3, [pc, #360]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	897b      	ldrh	r3, [r7, #10]
 8006706:	1c59      	adds	r1, r3, #1
 8006708:	8179      	strh	r1, [r7, #10]
 800670a:	4618      	mov	r0, r3
 800670c:	4b58      	ldr	r3, [pc, #352]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 800670e:	7919      	ldrb	r1, [r3, #4]
 8006710:	1813      	adds	r3, r2, r0
 8006712:	460a      	mov	r2, r1
 8006714:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8006718:	4b54      	ldr	r3, [pc, #336]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	897b      	ldrh	r3, [r7, #10]
 800671e:	1c59      	adds	r1, r3, #1
 8006720:	8179      	strh	r1, [r7, #10]
 8006722:	4618      	mov	r0, r3
 8006724:	4b52      	ldr	r3, [pc, #328]	; (8006870 <send_DHCP_REQUEST+0x2dc>)
 8006726:	7959      	ldrb	r1, [r3, #5]
 8006728:	1813      	adds	r3, r2, r0
 800672a:	460a      	mov	r2, r1
 800672c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

   if(ip[3] == 255)  // if(dchp_state == STATE_DHCP_LEASED || dchp_state == DHCP_REREQUEST_STATE)
 8006730:	79fb      	ldrb	r3, [r7, #7]
 8006732:	2bff      	cmp	r3, #255	; 0xff
 8006734:	f040 8084 	bne.w	8006840 <send_DHCP_REQUEST+0x2ac>
   {
		pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8006738:	4b4c      	ldr	r3, [pc, #304]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	897b      	ldrh	r3, [r7, #10]
 800673e:	1c59      	adds	r1, r3, #1
 8006740:	8179      	strh	r1, [r7, #10]
 8006742:	4413      	add	r3, r2
 8006744:	2232      	movs	r2, #50	; 0x32
 8006746:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 800674a:	4b48      	ldr	r3, [pc, #288]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800674c:	681a      	ldr	r2, [r3, #0]
 800674e:	897b      	ldrh	r3, [r7, #10]
 8006750:	1c59      	adds	r1, r3, #1
 8006752:	8179      	strh	r1, [r7, #10]
 8006754:	4413      	add	r3, r2
 8006756:	2204      	movs	r2, #4
 8006758:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 800675c:	4b43      	ldr	r3, [pc, #268]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	897b      	ldrh	r3, [r7, #10]
 8006762:	1c59      	adds	r1, r3, #1
 8006764:	8179      	strh	r1, [r7, #10]
 8006766:	4618      	mov	r0, r3
 8006768:	4b42      	ldr	r3, [pc, #264]	; (8006874 <send_DHCP_REQUEST+0x2e0>)
 800676a:	7819      	ldrb	r1, [r3, #0]
 800676c:	1813      	adds	r3, r2, r0
 800676e:	460a      	mov	r2, r1
 8006770:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8006774:	4b3d      	ldr	r3, [pc, #244]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	897b      	ldrh	r3, [r7, #10]
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	8179      	strh	r1, [r7, #10]
 800677e:	4618      	mov	r0, r3
 8006780:	4b3c      	ldr	r3, [pc, #240]	; (8006874 <send_DHCP_REQUEST+0x2e0>)
 8006782:	7859      	ldrb	r1, [r3, #1]
 8006784:	1813      	adds	r3, r2, r0
 8006786:	460a      	mov	r2, r1
 8006788:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 800678c:	4b37      	ldr	r3, [pc, #220]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800678e:	681a      	ldr	r2, [r3, #0]
 8006790:	897b      	ldrh	r3, [r7, #10]
 8006792:	1c59      	adds	r1, r3, #1
 8006794:	8179      	strh	r1, [r7, #10]
 8006796:	4618      	mov	r0, r3
 8006798:	4b36      	ldr	r3, [pc, #216]	; (8006874 <send_DHCP_REQUEST+0x2e0>)
 800679a:	7899      	ldrb	r1, [r3, #2]
 800679c:	1813      	adds	r3, r2, r0
 800679e:	460a      	mov	r2, r1
 80067a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 80067a4:	4b31      	ldr	r3, [pc, #196]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80067a6:	681a      	ldr	r2, [r3, #0]
 80067a8:	897b      	ldrh	r3, [r7, #10]
 80067aa:	1c59      	adds	r1, r3, #1
 80067ac:	8179      	strh	r1, [r7, #10]
 80067ae:	4618      	mov	r0, r3
 80067b0:	4b30      	ldr	r3, [pc, #192]	; (8006874 <send_DHCP_REQUEST+0x2e0>)
 80067b2:	78d9      	ldrb	r1, [r3, #3]
 80067b4:	1813      	adds	r3, r2, r0
 80067b6:	460a      	mov	r2, r1
 80067b8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
		pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 80067bc:	4b2b      	ldr	r3, [pc, #172]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	897b      	ldrh	r3, [r7, #10]
 80067c2:	1c59      	adds	r1, r3, #1
 80067c4:	8179      	strh	r1, [r7, #10]
 80067c6:	4413      	add	r3, r2
 80067c8:	2236      	movs	r2, #54	; 0x36
 80067ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = 0x04;
 80067ce:	4b27      	ldr	r3, [pc, #156]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	897b      	ldrh	r3, [r7, #10]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	8179      	strh	r1, [r7, #10]
 80067d8:	4413      	add	r3, r2
 80067da:	2204      	movs	r2, #4
 80067dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 80067e0:	4b22      	ldr	r3, [pc, #136]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	897b      	ldrh	r3, [r7, #10]
 80067e6:	1c59      	adds	r1, r3, #1
 80067e8:	8179      	strh	r1, [r7, #10]
 80067ea:	4618      	mov	r0, r3
 80067ec:	4b22      	ldr	r3, [pc, #136]	; (8006878 <send_DHCP_REQUEST+0x2e4>)
 80067ee:	7819      	ldrb	r1, [r3, #0]
 80067f0:	1813      	adds	r3, r2, r0
 80067f2:	460a      	mov	r2, r1
 80067f4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 80067f8:	4b1c      	ldr	r3, [pc, #112]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	897b      	ldrh	r3, [r7, #10]
 80067fe:	1c59      	adds	r1, r3, #1
 8006800:	8179      	strh	r1, [r7, #10]
 8006802:	4618      	mov	r0, r3
 8006804:	4b1c      	ldr	r3, [pc, #112]	; (8006878 <send_DHCP_REQUEST+0x2e4>)
 8006806:	7859      	ldrb	r1, [r3, #1]
 8006808:	1813      	adds	r3, r2, r0
 800680a:	460a      	mov	r2, r1
 800680c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8006810:	4b16      	ldr	r3, [pc, #88]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	897b      	ldrh	r3, [r7, #10]
 8006816:	1c59      	adds	r1, r3, #1
 8006818:	8179      	strh	r1, [r7, #10]
 800681a:	4618      	mov	r0, r3
 800681c:	4b16      	ldr	r3, [pc, #88]	; (8006878 <send_DHCP_REQUEST+0x2e4>)
 800681e:	7899      	ldrb	r1, [r3, #2]
 8006820:	1813      	adds	r3, r2, r0
 8006822:	460a      	mov	r2, r1
 8006824:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
		pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8006828:	4b10      	ldr	r3, [pc, #64]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	897b      	ldrh	r3, [r7, #10]
 800682e:	1c59      	adds	r1, r3, #1
 8006830:	8179      	strh	r1, [r7, #10]
 8006832:	4618      	mov	r0, r3
 8006834:	4b10      	ldr	r3, [pc, #64]	; (8006878 <send_DHCP_REQUEST+0x2e4>)
 8006836:	78d9      	ldrb	r1, [r3, #3]
 8006838:	1813      	adds	r3, r2, r0
 800683a:	460a      	mov	r2, r1
 800683c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	}

	// host name
	pDHCPMSG->OPT[k++] = hostName;
 8006840:	4b0a      	ldr	r3, [pc, #40]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	897b      	ldrh	r3, [r7, #10]
 8006846:	1c59      	adds	r1, r3, #1
 8006848:	8179      	strh	r1, [r7, #10]
 800684a:	4413      	add	r3, r2
 800684c:	220c      	movs	r2, #12
 800684e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0; // length of hostname
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <send_DHCP_REQUEST+0x2d8>)
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	897b      	ldrh	r3, [r7, #10]
 8006858:	1c59      	adds	r1, r3, #1
 800685a:	8179      	strh	r1, [r7, #10]
 800685c:	4413      	add	r3, r2
 800685e:	2200      	movs	r2, #0
 8006860:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006864:	2300      	movs	r3, #0
 8006866:	60fb      	str	r3, [r7, #12]
 8006868:	e019      	b.n	800689e <send_DHCP_REQUEST+0x30a>
 800686a:	bf00      	nop
 800686c:	20008b80 	.word	0x20008b80
 8006870:	20008b6c 	.word	0x20008b6c
 8006874:	200086a8 	.word	0x200086a8
 8006878:	20008b7c 	.word	0x20008b7c
   	pDHCPMSG->OPT[k++] = HOST_NAME[i];
 800687c:	4b87      	ldr	r3, [pc, #540]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 800687e:	681a      	ldr	r2, [r3, #0]
 8006880:	897b      	ldrh	r3, [r7, #10]
 8006882:	1c59      	adds	r1, r3, #1
 8006884:	8179      	strh	r1, [r7, #10]
 8006886:	4618      	mov	r0, r3
 8006888:	4985      	ldr	r1, [pc, #532]	; (8006aa0 <send_DHCP_REQUEST+0x50c>)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	440b      	add	r3, r1
 800688e:	7819      	ldrb	r1, [r3, #0]
 8006890:	1813      	adds	r3, r2, r0
 8006892:	460a      	mov	r2, r1
 8006894:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	for(i = 0 ; HOST_NAME[i] != 0; i++)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
 800689e:	4a80      	ldr	r2, [pc, #512]	; (8006aa0 <send_DHCP_REQUEST+0x50c>)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4413      	add	r3, r2
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e8      	bne.n	800687c <send_DHCP_REQUEST+0x2e8>
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3] >> 4); 
 80068aa:	4b7e      	ldr	r3, [pc, #504]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 80068ac:	78db      	ldrb	r3, [r3, #3]
 80068ae:	091b      	lsrs	r3, r3, #4
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	4b7a      	ldr	r3, [pc, #488]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80068b4:	681c      	ldr	r4, [r3, #0]
 80068b6:	897b      	ldrh	r3, [r7, #10]
 80068b8:	1c59      	adds	r1, r3, #1
 80068ba:	8179      	strh	r1, [r7, #10]
 80068bc:	461d      	mov	r5, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f000 feb4 	bl	800762c <NibbleToHex>
 80068c4:	4603      	mov	r3, r0
 80068c6:	461a      	mov	r2, r3
 80068c8:	1963      	adds	r3, r4, r5
 80068ca:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[3]);
 80068ce:	4b75      	ldr	r3, [pc, #468]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 80068d0:	78da      	ldrb	r2, [r3, #3]
 80068d2:	4b72      	ldr	r3, [pc, #456]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80068d4:	681c      	ldr	r4, [r3, #0]
 80068d6:	897b      	ldrh	r3, [r7, #10]
 80068d8:	1c59      	adds	r1, r3, #1
 80068da:	8179      	strh	r1, [r7, #10]
 80068dc:	461d      	mov	r5, r3
 80068de:	4610      	mov	r0, r2
 80068e0:	f000 fea4 	bl	800762c <NibbleToHex>
 80068e4:	4603      	mov	r3, r0
 80068e6:	461a      	mov	r2, r3
 80068e8:	1963      	adds	r3, r4, r5
 80068ea:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4] >> 4); 
 80068ee:	4b6d      	ldr	r3, [pc, #436]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 80068f0:	791b      	ldrb	r3, [r3, #4]
 80068f2:	091b      	lsrs	r3, r3, #4
 80068f4:	b2da      	uxtb	r2, r3
 80068f6:	4b69      	ldr	r3, [pc, #420]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80068f8:	681c      	ldr	r4, [r3, #0]
 80068fa:	897b      	ldrh	r3, [r7, #10]
 80068fc:	1c59      	adds	r1, r3, #1
 80068fe:	8179      	strh	r1, [r7, #10]
 8006900:	461d      	mov	r5, r3
 8006902:	4610      	mov	r0, r2
 8006904:	f000 fe92 	bl	800762c <NibbleToHex>
 8006908:	4603      	mov	r3, r0
 800690a:	461a      	mov	r2, r3
 800690c:	1963      	adds	r3, r4, r5
 800690e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[4]);
 8006912:	4b64      	ldr	r3, [pc, #400]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 8006914:	791a      	ldrb	r2, [r3, #4]
 8006916:	4b61      	ldr	r3, [pc, #388]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006918:	681c      	ldr	r4, [r3, #0]
 800691a:	897b      	ldrh	r3, [r7, #10]
 800691c:	1c59      	adds	r1, r3, #1
 800691e:	8179      	strh	r1, [r7, #10]
 8006920:	461d      	mov	r5, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 fe82 	bl	800762c <NibbleToHex>
 8006928:	4603      	mov	r3, r0
 800692a:	461a      	mov	r2, r3
 800692c:	1963      	adds	r3, r4, r5
 800692e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5] >> 4); 
 8006932:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 8006934:	795b      	ldrb	r3, [r3, #5]
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	b2da      	uxtb	r2, r3
 800693a:	4b58      	ldr	r3, [pc, #352]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 800693c:	681c      	ldr	r4, [r3, #0]
 800693e:	897b      	ldrh	r3, [r7, #10]
 8006940:	1c59      	adds	r1, r3, #1
 8006942:	8179      	strh	r1, [r7, #10]
 8006944:	461d      	mov	r5, r3
 8006946:	4610      	mov	r0, r2
 8006948:	f000 fe70 	bl	800762c <NibbleToHex>
 800694c:	4603      	mov	r3, r0
 800694e:	461a      	mov	r2, r3
 8006950:	1963      	adds	r3, r4, r5
 8006952:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = NibbleToHex(DHCP_CHADDR[5]);
 8006956:	4b53      	ldr	r3, [pc, #332]	; (8006aa4 <send_DHCP_REQUEST+0x510>)
 8006958:	795a      	ldrb	r2, [r3, #5]
 800695a:	4b50      	ldr	r3, [pc, #320]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 800695c:	681c      	ldr	r4, [r3, #0]
 800695e:	897b      	ldrh	r3, [r7, #10]
 8006960:	1c59      	adds	r1, r3, #1
 8006962:	8179      	strh	r1, [r7, #10]
 8006964:	461d      	mov	r5, r3
 8006966:	4610      	mov	r0, r2
 8006968:	f000 fe60 	bl	800762c <NibbleToHex>
 800696c:	4603      	mov	r3, r0
 800696e:	461a      	mov	r2, r3
 8006970:	1963      	adds	r3, r4, r5
 8006972:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k - (i+6+1)] = i+6; // length of hostname
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	b2d9      	uxtb	r1, r3
 800697a:	4b48      	ldr	r3, [pc, #288]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	8978      	ldrh	r0, [r7, #10]
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	3307      	adds	r3, #7
 8006984:	1ac3      	subs	r3, r0, r3
 8006986:	3106      	adds	r1, #6
 8006988:	b2c9      	uxtb	r1, r1
 800698a:	4413      	add	r3, r2
 800698c:	460a      	mov	r2, r1
 800698e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	
	pDHCPMSG->OPT[k++] = dhcpParamRequest;
 8006992:	4b42      	ldr	r3, [pc, #264]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006994:	681a      	ldr	r2, [r3, #0]
 8006996:	897b      	ldrh	r3, [r7, #10]
 8006998:	1c59      	adds	r1, r3, #1
 800699a:	8179      	strh	r1, [r7, #10]
 800699c:	4413      	add	r3, r2
 800699e:	2237      	movs	r2, #55	; 0x37
 80069a0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x08;
 80069a4:	4b3d      	ldr	r3, [pc, #244]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	897b      	ldrh	r3, [r7, #10]
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	8179      	strh	r1, [r7, #10]
 80069ae:	4413      	add	r3, r2
 80069b0:	2208      	movs	r2, #8
 80069b2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = subnetMask;
 80069b6:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80069b8:	681a      	ldr	r2, [r3, #0]
 80069ba:	897b      	ldrh	r3, [r7, #10]
 80069bc:	1c59      	adds	r1, r3, #1
 80069be:	8179      	strh	r1, [r7, #10]
 80069c0:	4413      	add	r3, r2
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = routersOnSubnet;
 80069c8:	4b34      	ldr	r3, [pc, #208]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	897b      	ldrh	r3, [r7, #10]
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	8179      	strh	r1, [r7, #10]
 80069d2:	4413      	add	r3, r2
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dns;
 80069da:	4b30      	ldr	r3, [pc, #192]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	897b      	ldrh	r3, [r7, #10]
 80069e0:	1c59      	adds	r1, r3, #1
 80069e2:	8179      	strh	r1, [r7, #10]
 80069e4:	4413      	add	r3, r2
 80069e6:	2206      	movs	r2, #6
 80069e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = domainName;
 80069ec:	4b2b      	ldr	r3, [pc, #172]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	897b      	ldrh	r3, [r7, #10]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	8179      	strh	r1, [r7, #10]
 80069f6:	4413      	add	r3, r2
 80069f8:	220f      	movs	r2, #15
 80069fa:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT1value;
 80069fe:	4b27      	ldr	r3, [pc, #156]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	897b      	ldrh	r3, [r7, #10]
 8006a04:	1c59      	adds	r1, r3, #1
 8006a06:	8179      	strh	r1, [r7, #10]
 8006a08:	4413      	add	r3, r2
 8006a0a:	223a      	movs	r2, #58	; 0x3a
 8006a0c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = dhcpT2value;
 8006a10:	4b22      	ldr	r3, [pc, #136]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a12:	681a      	ldr	r2, [r3, #0]
 8006a14:	897b      	ldrh	r3, [r7, #10]
 8006a16:	1c59      	adds	r1, r3, #1
 8006a18:	8179      	strh	r1, [r7, #10]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	223b      	movs	r2, #59	; 0x3b
 8006a1e:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = performRouterDiscovery;
 8006a22:	4b1e      	ldr	r3, [pc, #120]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	897b      	ldrh	r3, [r7, #10]
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	8179      	strh	r1, [r7, #10]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	221f      	movs	r2, #31
 8006a30:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = staticRoute;
 8006a34:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	897b      	ldrh	r3, [r7, #10]
 8006a3a:	1c59      	adds	r1, r3, #1
 8006a3c:	8179      	strh	r1, [r7, #10]
 8006a3e:	4413      	add	r3, r2
 8006a40:	2221      	movs	r2, #33	; 0x21
 8006a42:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = endOption;
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	897b      	ldrh	r3, [r7, #10]
 8006a4c:	1c59      	adds	r1, r3, #1
 8006a4e:	8179      	strh	r1, [r7, #10]
 8006a50:	4413      	add	r3, r2
 8006a52:	22ff      	movs	r2, #255	; 0xff
 8006a54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006a58:	897b      	ldrh	r3, [r7, #10]
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	e009      	b.n	8006a72 <send_DHCP_REQUEST+0x4de>
 8006a5e:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a60:	681a      	ldr	r2, [r3, #0]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	4413      	add	r3, r2
 8006a66:	33ec      	adds	r3, #236	; 0xec
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	3301      	adds	r3, #1
 8006a70:	60fb      	str	r3, [r7, #12]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8006a78:	dbf1      	blt.n	8006a5e <send_DHCP_REQUEST+0x4ca>

#ifdef _DHCP_DEBUG_
	printf("> Send DHCP_REQUEST\r\n");
#endif
	
	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8006a7a:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <send_DHCP_REQUEST+0x514>)
 8006a7c:	7818      	ldrb	r0, [r3, #0]
 8006a7e:	4b07      	ldr	r3, [pc, #28]	; (8006a9c <send_DHCP_REQUEST+0x508>)
 8006a80:	6819      	ldr	r1, [r3, #0]
 8006a82:	1d3a      	adds	r2, r7, #4
 8006a84:	2343      	movs	r3, #67	; 0x43
 8006a86:	9300      	str	r3, [sp, #0]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	f44f 7209 	mov.w	r2, #548	; 0x224
 8006a8e:	f7fe fd1f 	bl	80054d0 <sendto>

}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bdb0      	pop	{r4, r5, r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	20008b80 	.word	0x20008b80
 8006aa0:	20000050 	.word	0x20000050
 8006aa4:	20008b6c 	.word	0x20008b6c
 8006aa8:	20008b84 	.word	0x20008b84

08006aac <send_DHCP_DECLINE>:

/* SEND DHCP DHCPDECLINE */
void send_DHCP_DECLINE(void)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b086      	sub	sp, #24
 8006ab0:	af02      	add	r7, sp, #8
	int i;
	uint8_t ip[4];
	uint16_t k = 0;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	817b      	strh	r3, [r7, #10]
	
	makeDHCPMSG();
 8006ab6:	f7ff fab1 	bl	800601c <makeDHCPMSG>

   k = 4;      // because MAGIC_COOKIE already made by makeDHCPMSG()
 8006aba:	2304      	movs	r3, #4
 8006abc:	817b      	strh	r3, [r7, #10]
   
	*((uint8_t*)(&pDHCPMSG->flags))   = ((DHCP_FLAGSUNICAST & 0xFF00)>> 8);
 8006abe:	4b9f      	ldr	r3, [pc, #636]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	330a      	adds	r3, #10
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
	*((uint8_t*)(&pDHCPMSG->flags)+1) = (DHCP_FLAGSUNICAST & 0x00FF);
 8006ac8:	4b9c      	ldr	r3, [pc, #624]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	330a      	adds	r3, #10
 8006ace:	3301      	adds	r3, #1
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	701a      	strb	r2, [r3, #0]

	// Option Request Param.
	pDHCPMSG->OPT[k++] = dhcpMessageType;
 8006ad4:	4b99      	ldr	r3, [pc, #612]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	897b      	ldrh	r3, [r7, #10]
 8006ada:	1c59      	adds	r1, r3, #1
 8006adc:	8179      	strh	r1, [r7, #10]
 8006ade:	4413      	add	r3, r2
 8006ae0:	2235      	movs	r2, #53	; 0x35
 8006ae2:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006ae6:	4b95      	ldr	r3, [pc, #596]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	897b      	ldrh	r3, [r7, #10]
 8006aec:	1c59      	adds	r1, r3, #1
 8006aee:	8179      	strh	r1, [r7, #10]
 8006af0:	4413      	add	r3, r2
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_DECLINE;
 8006af8:	4b90      	ldr	r3, [pc, #576]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006afa:	681a      	ldr	r2, [r3, #0]
 8006afc:	897b      	ldrh	r3, [r7, #10]
 8006afe:	1c59      	adds	r1, r3, #1
 8006b00:	8179      	strh	r1, [r7, #10]
 8006b02:	4413      	add	r3, r2
 8006b04:	2204      	movs	r2, #4
 8006b06:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpClientIdentifier;
 8006b0a:	4b8c      	ldr	r3, [pc, #560]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	897b      	ldrh	r3, [r7, #10]
 8006b10:	1c59      	adds	r1, r3, #1
 8006b12:	8179      	strh	r1, [r7, #10]
 8006b14:	4413      	add	r3, r2
 8006b16:	223d      	movs	r2, #61	; 0x3d
 8006b18:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x07;
 8006b1c:	4b87      	ldr	r3, [pc, #540]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	897b      	ldrh	r3, [r7, #10]
 8006b22:	1c59      	adds	r1, r3, #1
 8006b24:	8179      	strh	r1, [r7, #10]
 8006b26:	4413      	add	r3, r2
 8006b28:	2207      	movs	r2, #7
 8006b2a:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x01;
 8006b2e:	4b83      	ldr	r3, [pc, #524]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	897b      	ldrh	r3, [r7, #10]
 8006b34:	1c59      	adds	r1, r3, #1
 8006b36:	8179      	strh	r1, [r7, #10]
 8006b38:	4413      	add	r3, r2
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[0];
 8006b40:	4b7e      	ldr	r3, [pc, #504]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b42:	681a      	ldr	r2, [r3, #0]
 8006b44:	897b      	ldrh	r3, [r7, #10]
 8006b46:	1c59      	adds	r1, r3, #1
 8006b48:	8179      	strh	r1, [r7, #10]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	4b7c      	ldr	r3, [pc, #496]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006b4e:	7819      	ldrb	r1, [r3, #0]
 8006b50:	1813      	adds	r3, r2, r0
 8006b52:	460a      	mov	r2, r1
 8006b54:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[1];
 8006b58:	4b78      	ldr	r3, [pc, #480]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	897b      	ldrh	r3, [r7, #10]
 8006b5e:	1c59      	adds	r1, r3, #1
 8006b60:	8179      	strh	r1, [r7, #10]
 8006b62:	4618      	mov	r0, r3
 8006b64:	4b76      	ldr	r3, [pc, #472]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006b66:	7859      	ldrb	r1, [r3, #1]
 8006b68:	1813      	adds	r3, r2, r0
 8006b6a:	460a      	mov	r2, r1
 8006b6c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[2];
 8006b70:	4b72      	ldr	r3, [pc, #456]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	897b      	ldrh	r3, [r7, #10]
 8006b76:	1c59      	adds	r1, r3, #1
 8006b78:	8179      	strh	r1, [r7, #10]
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	4b70      	ldr	r3, [pc, #448]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006b7e:	7899      	ldrb	r1, [r3, #2]
 8006b80:	1813      	adds	r3, r2, r0
 8006b82:	460a      	mov	r2, r1
 8006b84:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[3];
 8006b88:	4b6c      	ldr	r3, [pc, #432]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	897b      	ldrh	r3, [r7, #10]
 8006b8e:	1c59      	adds	r1, r3, #1
 8006b90:	8179      	strh	r1, [r7, #10]
 8006b92:	4618      	mov	r0, r3
 8006b94:	4b6a      	ldr	r3, [pc, #424]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006b96:	78d9      	ldrb	r1, [r3, #3]
 8006b98:	1813      	adds	r3, r2, r0
 8006b9a:	460a      	mov	r2, r1
 8006b9c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[4];
 8006ba0:	4b66      	ldr	r3, [pc, #408]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	897b      	ldrh	r3, [r7, #10]
 8006ba6:	1c59      	adds	r1, r3, #1
 8006ba8:	8179      	strh	r1, [r7, #10]
 8006baa:	4618      	mov	r0, r3
 8006bac:	4b64      	ldr	r3, [pc, #400]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006bae:	7919      	ldrb	r1, [r3, #4]
 8006bb0:	1813      	adds	r3, r2, r0
 8006bb2:	460a      	mov	r2, r1
 8006bb4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_CHADDR[5];
 8006bb8:	4b60      	ldr	r3, [pc, #384]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	897b      	ldrh	r3, [r7, #10]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	8179      	strh	r1, [r7, #10]
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	4b5e      	ldr	r3, [pc, #376]	; (8006d40 <send_DHCP_DECLINE+0x294>)
 8006bc6:	7959      	ldrb	r1, [r3, #5]
 8006bc8:	1813      	adds	r3, r2, r0
 8006bca:	460a      	mov	r2, r1
 8006bcc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpRequestedIPaddr;
 8006bd0:	4b5a      	ldr	r3, [pc, #360]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	897b      	ldrh	r3, [r7, #10]
 8006bd6:	1c59      	adds	r1, r3, #1
 8006bd8:	8179      	strh	r1, [r7, #10]
 8006bda:	4413      	add	r3, r2
 8006bdc:	2232      	movs	r2, #50	; 0x32
 8006bde:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8006be2:	4b56      	ldr	r3, [pc, #344]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	897b      	ldrh	r3, [r7, #10]
 8006be8:	1c59      	adds	r1, r3, #1
 8006bea:	8179      	strh	r1, [r7, #10]
 8006bec:	4413      	add	r3, r2
 8006bee:	2204      	movs	r2, #4
 8006bf0:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[0];
 8006bf4:	4b51      	ldr	r3, [pc, #324]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	897b      	ldrh	r3, [r7, #10]
 8006bfa:	1c59      	adds	r1, r3, #1
 8006bfc:	8179      	strh	r1, [r7, #10]
 8006bfe:	4618      	mov	r0, r3
 8006c00:	4b50      	ldr	r3, [pc, #320]	; (8006d44 <send_DHCP_DECLINE+0x298>)
 8006c02:	7819      	ldrb	r1, [r3, #0]
 8006c04:	1813      	adds	r3, r2, r0
 8006c06:	460a      	mov	r2, r1
 8006c08:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[1];
 8006c0c:	4b4b      	ldr	r3, [pc, #300]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	897b      	ldrh	r3, [r7, #10]
 8006c12:	1c59      	adds	r1, r3, #1
 8006c14:	8179      	strh	r1, [r7, #10]
 8006c16:	4618      	mov	r0, r3
 8006c18:	4b4a      	ldr	r3, [pc, #296]	; (8006d44 <send_DHCP_DECLINE+0x298>)
 8006c1a:	7859      	ldrb	r1, [r3, #1]
 8006c1c:	1813      	adds	r3, r2, r0
 8006c1e:	460a      	mov	r2, r1
 8006c20:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[2];
 8006c24:	4b45      	ldr	r3, [pc, #276]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	897b      	ldrh	r3, [r7, #10]
 8006c2a:	1c59      	adds	r1, r3, #1
 8006c2c:	8179      	strh	r1, [r7, #10]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	4b44      	ldr	r3, [pc, #272]	; (8006d44 <send_DHCP_DECLINE+0x298>)
 8006c32:	7899      	ldrb	r1, [r3, #2]
 8006c34:	1813      	adds	r3, r2, r0
 8006c36:	460a      	mov	r2, r1
 8006c38:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_allocated_ip[3];
 8006c3c:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	897b      	ldrh	r3, [r7, #10]
 8006c42:	1c59      	adds	r1, r3, #1
 8006c44:	8179      	strh	r1, [r7, #10]
 8006c46:	4618      	mov	r0, r3
 8006c48:	4b3e      	ldr	r3, [pc, #248]	; (8006d44 <send_DHCP_DECLINE+0x298>)
 8006c4a:	78d9      	ldrb	r1, [r3, #3]
 8006c4c:	1813      	adds	r3, r2, r0
 8006c4e:	460a      	mov	r2, r1
 8006c50:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = dhcpServerIdentifier;
 8006c54:	4b39      	ldr	r3, [pc, #228]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	897b      	ldrh	r3, [r7, #10]
 8006c5a:	1c59      	adds	r1, r3, #1
 8006c5c:	8179      	strh	r1, [r7, #10]
 8006c5e:	4413      	add	r3, r2
 8006c60:	2236      	movs	r2, #54	; 0x36
 8006c62:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = 0x04;
 8006c66:	4b35      	ldr	r3, [pc, #212]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	897b      	ldrh	r3, [r7, #10]
 8006c6c:	1c59      	adds	r1, r3, #1
 8006c6e:	8179      	strh	r1, [r7, #10]
 8006c70:	4413      	add	r3, r2
 8006c72:	2204      	movs	r2, #4
 8006c74:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[0];
 8006c78:	4b30      	ldr	r3, [pc, #192]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c7a:	681a      	ldr	r2, [r3, #0]
 8006c7c:	897b      	ldrh	r3, [r7, #10]
 8006c7e:	1c59      	adds	r1, r3, #1
 8006c80:	8179      	strh	r1, [r7, #10]
 8006c82:	4618      	mov	r0, r3
 8006c84:	4b30      	ldr	r3, [pc, #192]	; (8006d48 <send_DHCP_DECLINE+0x29c>)
 8006c86:	7819      	ldrb	r1, [r3, #0]
 8006c88:	1813      	adds	r3, r2, r0
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[1];
 8006c90:	4b2a      	ldr	r3, [pc, #168]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	897b      	ldrh	r3, [r7, #10]
 8006c96:	1c59      	adds	r1, r3, #1
 8006c98:	8179      	strh	r1, [r7, #10]
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <send_DHCP_DECLINE+0x29c>)
 8006c9e:	7859      	ldrb	r1, [r3, #1]
 8006ca0:	1813      	adds	r3, r2, r0
 8006ca2:	460a      	mov	r2, r1
 8006ca4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[2];
 8006ca8:	4b24      	ldr	r3, [pc, #144]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	897b      	ldrh	r3, [r7, #10]
 8006cae:	1c59      	adds	r1, r3, #1
 8006cb0:	8179      	strh	r1, [r7, #10]
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	4b24      	ldr	r3, [pc, #144]	; (8006d48 <send_DHCP_DECLINE+0x29c>)
 8006cb6:	7899      	ldrb	r1, [r3, #2]
 8006cb8:	1813      	adds	r3, r2, r0
 8006cba:	460a      	mov	r2, r1
 8006cbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
	pDHCPMSG->OPT[k++] = DHCP_SIP[3];
 8006cc0:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	897b      	ldrh	r3, [r7, #10]
 8006cc6:	1c59      	adds	r1, r3, #1
 8006cc8:	8179      	strh	r1, [r7, #10]
 8006cca:	4618      	mov	r0, r3
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <send_DHCP_DECLINE+0x29c>)
 8006cce:	78d9      	ldrb	r1, [r3, #3]
 8006cd0:	1813      	adds	r3, r2, r0
 8006cd2:	460a      	mov	r2, r1
 8006cd4:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	pDHCPMSG->OPT[k++] = endOption;
 8006cd8:	4b18      	ldr	r3, [pc, #96]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	897b      	ldrh	r3, [r7, #10]
 8006cde:	1c59      	adds	r1, r3, #1
 8006ce0:	8179      	strh	r1, [r7, #10]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	22ff      	movs	r2, #255	; 0xff
 8006ce6:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec

	for (i = k; i < OPT_SIZE; i++) pDHCPMSG->OPT[i] = 0;
 8006cea:	897b      	ldrh	r3, [r7, #10]
 8006cec:	60fb      	str	r3, [r7, #12]
 8006cee:	e009      	b.n	8006d04 <send_DHCP_DECLINE+0x258>
 8006cf0:	4b12      	ldr	r3, [pc, #72]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	33ec      	adds	r3, #236	; 0xec
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	701a      	strb	r2, [r3, #0]
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	3301      	adds	r3, #1
 8006d02:	60fb      	str	r3, [r7, #12]
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f5b3 7f9c 	cmp.w	r3, #312	; 0x138
 8006d0a:	dbf1      	blt.n	8006cf0 <send_DHCP_DECLINE+0x244>

	//send broadcasting packet
	ip[0] = 0xFF;
 8006d0c:	23ff      	movs	r3, #255	; 0xff
 8006d0e:	713b      	strb	r3, [r7, #4]
	ip[1] = 0xFF;
 8006d10:	23ff      	movs	r3, #255	; 0xff
 8006d12:	717b      	strb	r3, [r7, #5]
	ip[2] = 0xFF;
 8006d14:	23ff      	movs	r3, #255	; 0xff
 8006d16:	71bb      	strb	r3, [r7, #6]
	ip[3] = 0xFF;
 8006d18:	23ff      	movs	r3, #255	; 0xff
 8006d1a:	71fb      	strb	r3, [r7, #7]

#ifdef _DHCP_DEBUG_
	printf("\r\n> Send DHCP_DECLINE\r\n");
#endif

	sendto(DHCP_SOCKET, (uint8_t *)pDHCPMSG, RIP_MSG_SIZE, ip, DHCP_SERVER_PORT);
 8006d1c:	4b0b      	ldr	r3, [pc, #44]	; (8006d4c <send_DHCP_DECLINE+0x2a0>)
 8006d1e:	7818      	ldrb	r0, [r3, #0]
 8006d20:	4b06      	ldr	r3, [pc, #24]	; (8006d3c <send_DHCP_DECLINE+0x290>)
 8006d22:	6819      	ldr	r1, [r3, #0]
 8006d24:	1d3a      	adds	r2, r7, #4
 8006d26:	2343      	movs	r3, #67	; 0x43
 8006d28:	9300      	str	r3, [sp, #0]
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8006d30:	f7fe fbce 	bl	80054d0 <sendto>
}
 8006d34:	bf00      	nop
 8006d36:	3710      	adds	r7, #16
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bd80      	pop	{r7, pc}
 8006d3c:	20008b80 	.word	0x20008b80
 8006d40:	20008b6c 	.word	0x20008b6c
 8006d44:	200086a8 	.word	0x200086a8
 8006d48:	20008b7c 	.word	0x20008b7c
 8006d4c:	20008b84 	.word	0x20008b84

08006d50 <parseDHCPMSG>:

/* PARSE REPLY pDHCPMSG */
int8_t parseDHCPMSG(void)
{
 8006d50:	b590      	push	{r4, r7, lr}
 8006d52:	b089      	sub	sp, #36	; 0x24
 8006d54:	af02      	add	r7, sp, #8
	uint16_t  svr_port;
	uint16_t len;

	uint8_t * p;
	uint8_t * e;
	uint8_t type = 0;
 8006d56:	2300      	movs	r3, #0
 8006d58:	74fb      	strb	r3, [r7, #19]
	uint8_t opt_len;
   
   if((len = getSn_RX_RSR(DHCP_SOCKET)) > 0)
 8006d5a:	4b95      	ldr	r3, [pc, #596]	; (8006fb0 <parseDHCPMSG+0x260>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7fd fd01 	bl	8004766 <getSn_RX_RSR>
 8006d64:	4603      	mov	r3, r0
 8006d66:	823b      	strh	r3, [r7, #16]
 8006d68:	8a3b      	ldrh	r3, [r7, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d011      	beq.n	8006d92 <parseDHCPMSG+0x42>
   {
   	len = recvfrom(DHCP_SOCKET, (uint8_t *)pDHCPMSG, len, svr_addr, &svr_port);
 8006d6e:	4b90      	ldr	r3, [pc, #576]	; (8006fb0 <parseDHCPMSG+0x260>)
 8006d70:	7818      	ldrb	r0, [r3, #0]
 8006d72:	4b90      	ldr	r3, [pc, #576]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006d74:	6819      	ldr	r1, [r3, #0]
 8006d76:	1d3c      	adds	r4, r7, #4
 8006d78:	8a3a      	ldrh	r2, [r7, #16]
 8006d7a:	1cbb      	adds	r3, r7, #2
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	4623      	mov	r3, r4
 8006d80:	f7fe fcfc 	bl	800577c <recvfrom>
 8006d84:	4603      	mov	r3, r0
 8006d86:	823b      	strh	r3, [r7, #16]
   #ifdef _DHCP_DEBUG_   
      printf("DHCP message : %d.%d.%d.%d(%d) %d received. \r\n",svr_addr[0],svr_addr[1],svr_addr[2], svr_addr[3],svr_port, len);
   #endif   
   }
   else return 0;
	if (svr_port == DHCP_SERVER_PORT) {
 8006d88:	887b      	ldrh	r3, [r7, #2]
 8006d8a:	2b43      	cmp	r3, #67	; 0x43
 8006d8c:	f040 818d 	bne.w	80070aa <parseDHCPMSG+0x35a>
 8006d90:	e001      	b.n	8006d96 <parseDHCPMSG+0x46>
   else return 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	e18b      	b.n	80070ae <parseDHCPMSG+0x35e>
      // compare mac address
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8006d96:	4b87      	ldr	r3, [pc, #540]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	7f1a      	ldrb	r2, [r3, #28]
 8006d9c:	4b86      	ldr	r3, [pc, #536]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d124      	bne.n	8006dee <parseDHCPMSG+0x9e>
 8006da4:	4b83      	ldr	r3, [pc, #524]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	7f5a      	ldrb	r2, [r3, #29]
 8006daa:	4b83      	ldr	r3, [pc, #524]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006dac:	785b      	ldrb	r3, [r3, #1]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d11d      	bne.n	8006dee <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8006db2:	4b80      	ldr	r3, [pc, #512]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	7f9a      	ldrb	r2, [r3, #30]
 8006db8:	4b7f      	ldr	r3, [pc, #508]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006dba:	789b      	ldrb	r3, [r3, #2]
		if ( (pDHCPMSG->chaddr[0] != DHCP_CHADDR[0]) || (pDHCPMSG->chaddr[1] != DHCP_CHADDR[1]) ||
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d116      	bne.n	8006dee <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8006dc0:	4b7c      	ldr	r3, [pc, #496]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	7fda      	ldrb	r2, [r3, #31]
 8006dc6:	4b7c      	ldr	r3, [pc, #496]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006dc8:	78db      	ldrb	r3, [r3, #3]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d10f      	bne.n	8006dee <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8006dce:	4b79      	ldr	r3, [pc, #484]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f893 2020 	ldrb.w	r2, [r3, #32]
 8006dd6:	4b78      	ldr	r3, [pc, #480]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006dd8:	791b      	ldrb	r3, [r3, #4]
		     (pDHCPMSG->chaddr[2] != DHCP_CHADDR[2]) || (pDHCPMSG->chaddr[3] != DHCP_CHADDR[3]) ||
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d107      	bne.n	8006dee <parseDHCPMSG+0x9e>
		     (pDHCPMSG->chaddr[4] != DHCP_CHADDR[4]) || (pDHCPMSG->chaddr[5] != DHCP_CHADDR[5])   )
 8006dde:	4b75      	ldr	r3, [pc, #468]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8006de6:	4b74      	ldr	r3, [pc, #464]	; (8006fb8 <parseDHCPMSG+0x268>)
 8006de8:	795b      	ldrb	r3, [r3, #5]
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d001      	beq.n	8006df2 <parseDHCPMSG+0xa2>
		{
#ifdef _DHCP_DEBUG_
            printf("No My DHCP Message. This message is ignored.\r\n");
#endif
         return 0;
 8006dee:	2300      	movs	r3, #0
 8006df0:	e15d      	b.n	80070ae <parseDHCPMSG+0x35e>
		}
        //compare DHCP server ip address
        if((DHCP_SIP[0]!=0) || (DHCP_SIP[1]!=0) || (DHCP_SIP[2]!=0) || (DHCP_SIP[3]!=0)){
 8006df2:	4b72      	ldr	r3, [pc, #456]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d10b      	bne.n	8006e12 <parseDHCPMSG+0xc2>
 8006dfa:	4b70      	ldr	r3, [pc, #448]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006dfc:	785b      	ldrb	r3, [r3, #1]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d107      	bne.n	8006e12 <parseDHCPMSG+0xc2>
 8006e02:	4b6e      	ldr	r3, [pc, #440]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e04:	789b      	ldrb	r3, [r3, #2]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d103      	bne.n	8006e12 <parseDHCPMSG+0xc2>
 8006e0a:	4b6c      	ldr	r3, [pc, #432]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d029      	beq.n	8006e66 <parseDHCPMSG+0x116>
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8006e12:	793a      	ldrb	r2, [r7, #4]
 8006e14:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d10e      	bne.n	8006e3a <parseDHCPMSG+0xea>
 8006e1c:	797a      	ldrb	r2, [r7, #5]
 8006e1e:	4b67      	ldr	r3, [pc, #412]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e20:	785b      	ldrb	r3, [r3, #1]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d109      	bne.n	8006e3a <parseDHCPMSG+0xea>
 8006e26:	79ba      	ldrb	r2, [r7, #6]
 8006e28:	4b64      	ldr	r3, [pc, #400]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e2a:	789b      	ldrb	r3, [r3, #2]
 8006e2c:	429a      	cmp	r2, r3
 8006e2e:	d104      	bne.n	8006e3a <parseDHCPMSG+0xea>
 8006e30:	79fa      	ldrb	r2, [r7, #7]
 8006e32:	4b62      	ldr	r3, [pc, #392]	; (8006fbc <parseDHCPMSG+0x26c>)
 8006e34:	78db      	ldrb	r3, [r3, #3]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d015      	beq.n	8006e66 <parseDHCPMSG+0x116>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8006e3a:	793a      	ldrb	r2, [r7, #4]
 8006e3c:	4b60      	ldr	r3, [pc, #384]	; (8006fc0 <parseDHCPMSG+0x270>)
 8006e3e:	781b      	ldrb	r3, [r3, #0]
            if( ((svr_addr[0]!=DHCP_SIP[0])|| (svr_addr[1]!=DHCP_SIP[1])|| (svr_addr[2]!=DHCP_SIP[2])|| (svr_addr[3]!=DHCP_SIP[3])) &&
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d10e      	bne.n	8006e62 <parseDHCPMSG+0x112>
                ((svr_addr[0]!=DHCP_REAL_SIP[0])|| (svr_addr[1]!=DHCP_REAL_SIP[1])|| (svr_addr[2]!=DHCP_REAL_SIP[2])|| (svr_addr[3]!=DHCP_REAL_SIP[3]))  )
 8006e44:	797a      	ldrb	r2, [r7, #5]
 8006e46:	4b5e      	ldr	r3, [pc, #376]	; (8006fc0 <parseDHCPMSG+0x270>)
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d109      	bne.n	8006e62 <parseDHCPMSG+0x112>
 8006e4e:	79ba      	ldrb	r2, [r7, #6]
 8006e50:	4b5b      	ldr	r3, [pc, #364]	; (8006fc0 <parseDHCPMSG+0x270>)
 8006e52:	789b      	ldrb	r3, [r3, #2]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d104      	bne.n	8006e62 <parseDHCPMSG+0x112>
 8006e58:	79fa      	ldrb	r2, [r7, #7]
 8006e5a:	4b59      	ldr	r3, [pc, #356]	; (8006fc0 <parseDHCPMSG+0x270>)
 8006e5c:	78db      	ldrb	r3, [r3, #3]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d001      	beq.n	8006e66 <parseDHCPMSG+0x116>
            {
#ifdef _DHCP_DEBUG_
                printf("Another DHCP sever send a response message. This is ignored.\r\n");
#endif
                return 0;
 8006e62:	2300      	movs	r3, #0
 8006e64:	e123      	b.n	80070ae <parseDHCPMSG+0x35e>
            }
        }
		p = (uint8_t *)(&pDHCPMSG->op);
 8006e66:	4b53      	ldr	r3, [pc, #332]	; (8006fb4 <parseDHCPMSG+0x264>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	617b      	str	r3, [r7, #20]
		p = p + 240;      // 240 = sizeof(RIP_MSG) + MAGIC_COOKIE size in RIP_MSG.opt - sizeof(RIP_MSG.opt)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	33f0      	adds	r3, #240	; 0xf0
 8006e70:	617b      	str	r3, [r7, #20]
		e = p + (len - 240);
 8006e72:	8a3b      	ldrh	r3, [r7, #16]
 8006e74:	3bf0      	subs	r3, #240	; 0xf0
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4413      	add	r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]

		while ( p < e ) {
 8006e7c:	e110      	b.n	80070a0 <parseDHCPMSG+0x350>

			switch ( *p ) {
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	2b06      	cmp	r3, #6
 8006e84:	d06e      	beq.n	8006f64 <parseDHCPMSG+0x214>
 8006e86:	2b06      	cmp	r3, #6
 8006e88:	dc06      	bgt.n	8006e98 <parseDHCPMSG+0x148>
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d025      	beq.n	8006eda <parseDHCPMSG+0x18a>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d042      	beq.n	8006f18 <parseDHCPMSG+0x1c8>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d011      	beq.n	8006eba <parseDHCPMSG+0x16a>
 8006e96:	e0f6      	b.n	8007086 <parseDHCPMSG+0x336>
 8006e98:	2b35      	cmp	r3, #53	; 0x35
 8006e9a:	d012      	beq.n	8006ec2 <parseDHCPMSG+0x172>
 8006e9c:	2b35      	cmp	r3, #53	; 0x35
 8006e9e:	dc03      	bgt.n	8006ea8 <parseDHCPMSG+0x158>
 8006ea0:	2b33      	cmp	r3, #51	; 0x33
 8006ea2:	f000 8095 	beq.w	8006fd0 <parseDHCPMSG+0x280>
 8006ea6:	e0ee      	b.n	8007086 <parseDHCPMSG+0x336>
 8006ea8:	2b36      	cmp	r3, #54	; 0x36
 8006eaa:	f000 80bf 	beq.w	800702c <parseDHCPMSG+0x2dc>
 8006eae:	2bff      	cmp	r3, #255	; 0xff
 8006eb0:	f040 80e9 	bne.w	8007086 <parseDHCPMSG+0x336>

   			case endOption :
   			   p = e;   // for break while(p < e)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	617b      	str	r3, [r7, #20]
   				break;
 8006eb8:	e0f2      	b.n	80070a0 <parseDHCPMSG+0x350>
            case padOption :
   				p++;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	617b      	str	r3, [r7, #20]
   				break;
 8006ec0:	e0ee      	b.n	80070a0 <parseDHCPMSG+0x350>
   			case dhcpMessageType :
   				p++;
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
   				p++;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	3301      	adds	r3, #1
 8006ecc:	617b      	str	r3, [r7, #20]
   				type = *p++;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	617a      	str	r2, [r7, #20]
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	74fb      	strb	r3, [r7, #19]
   				break;
 8006ed8:	e0e2      	b.n	80070a0 <parseDHCPMSG+0x350>
   			case subnetMask :
   				p++;
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	3301      	adds	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
   				p++;
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	617b      	str	r3, [r7, #20]
   				DHCP_allocated_sn[0] = *p++;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	617a      	str	r2, [r7, #20]
 8006eec:	781a      	ldrb	r2, [r3, #0]
 8006eee:	4b35      	ldr	r3, [pc, #212]	; (8006fc4 <parseDHCPMSG+0x274>)
 8006ef0:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_sn[1] = *p++;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	617a      	str	r2, [r7, #20]
 8006ef8:	781a      	ldrb	r2, [r3, #0]
 8006efa:	4b32      	ldr	r3, [pc, #200]	; (8006fc4 <parseDHCPMSG+0x274>)
 8006efc:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_sn[2] = *p++;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	617a      	str	r2, [r7, #20]
 8006f04:	781a      	ldrb	r2, [r3, #0]
 8006f06:	4b2f      	ldr	r3, [pc, #188]	; (8006fc4 <parseDHCPMSG+0x274>)
 8006f08:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_sn[3] = *p++;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	1c5a      	adds	r2, r3, #1
 8006f0e:	617a      	str	r2, [r7, #20]
 8006f10:	781a      	ldrb	r2, [r3, #0]
 8006f12:	4b2c      	ldr	r3, [pc, #176]	; (8006fc4 <parseDHCPMSG+0x274>)
 8006f14:	70da      	strb	r2, [r3, #3]
   				break;
 8006f16:	e0c3      	b.n	80070a0 <parseDHCPMSG+0x350>
   			case routersOnSubnet :
   				p++;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	3301      	adds	r3, #1
 8006f1c:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	1c5a      	adds	r2, r3, #1
 8006f22:	617a      	str	r2, [r7, #20]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_gw[0] = *p++;
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	617a      	str	r2, [r7, #20]
 8006f2e:	781a      	ldrb	r2, [r3, #0]
 8006f30:	4b25      	ldr	r3, [pc, #148]	; (8006fc8 <parseDHCPMSG+0x278>)
 8006f32:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_gw[1] = *p++;
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	617a      	str	r2, [r7, #20]
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	4b22      	ldr	r3, [pc, #136]	; (8006fc8 <parseDHCPMSG+0x278>)
 8006f3e:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_gw[2] = *p++;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	617a      	str	r2, [r7, #20]
 8006f46:	781a      	ldrb	r2, [r3, #0]
 8006f48:	4b1f      	ldr	r3, [pc, #124]	; (8006fc8 <parseDHCPMSG+0x278>)
 8006f4a:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_gw[3] = *p++;
 8006f4c:	697b      	ldr	r3, [r7, #20]
 8006f4e:	1c5a      	adds	r2, r3, #1
 8006f50:	617a      	str	r2, [r7, #20]
 8006f52:	781a      	ldrb	r2, [r3, #0]
 8006f54:	4b1c      	ldr	r3, [pc, #112]	; (8006fc8 <parseDHCPMSG+0x278>)
 8006f56:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8006f58:	7afb      	ldrb	r3, [r7, #11]
 8006f5a:	3b04      	subs	r3, #4
 8006f5c:	697a      	ldr	r2, [r7, #20]
 8006f5e:	4413      	add	r3, r2
 8006f60:	617b      	str	r3, [r7, #20]
   				break;
 8006f62:	e09d      	b.n	80070a0 <parseDHCPMSG+0x350>
   			case dns :
   				p++;                  
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	3301      	adds	r3, #1
 8006f68:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;       
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	1c5a      	adds	r2, r3, #1
 8006f6e:	617a      	str	r2, [r7, #20]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	72fb      	strb	r3, [r7, #11]
   				DHCP_allocated_dns[0] = *p++;
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	1c5a      	adds	r2, r3, #1
 8006f78:	617a      	str	r2, [r7, #20]
 8006f7a:	781a      	ldrb	r2, [r3, #0]
 8006f7c:	4b13      	ldr	r3, [pc, #76]	; (8006fcc <parseDHCPMSG+0x27c>)
 8006f7e:	701a      	strb	r2, [r3, #0]
   				DHCP_allocated_dns[1] = *p++;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	617a      	str	r2, [r7, #20]
 8006f86:	781a      	ldrb	r2, [r3, #0]
 8006f88:	4b10      	ldr	r3, [pc, #64]	; (8006fcc <parseDHCPMSG+0x27c>)
 8006f8a:	705a      	strb	r2, [r3, #1]
   				DHCP_allocated_dns[2] = *p++;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	617a      	str	r2, [r7, #20]
 8006f92:	781a      	ldrb	r2, [r3, #0]
 8006f94:	4b0d      	ldr	r3, [pc, #52]	; (8006fcc <parseDHCPMSG+0x27c>)
 8006f96:	709a      	strb	r2, [r3, #2]
   				DHCP_allocated_dns[3] = *p++;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	617a      	str	r2, [r7, #20]
 8006f9e:	781a      	ldrb	r2, [r3, #0]
 8006fa0:	4b0a      	ldr	r3, [pc, #40]	; (8006fcc <parseDHCPMSG+0x27c>)
 8006fa2:	70da      	strb	r2, [r3, #3]
   				p = p + (opt_len - 4);
 8006fa4:	7afb      	ldrb	r3, [r7, #11]
 8006fa6:	3b04      	subs	r3, #4
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4413      	add	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
   				break;
 8006fae:	e077      	b.n	80070a0 <parseDHCPMSG+0x350>
 8006fb0:	20008b84 	.word	0x20008b84
 8006fb4:	20008b80 	.word	0x20008b80
 8006fb8:	20008b6c 	.word	0x20008b6c
 8006fbc:	20008b7c 	.word	0x20008b7c
 8006fc0:	20008b78 	.word	0x20008b78
 8006fc4:	200086b0 	.word	0x200086b0
 8006fc8:	200086ac 	.word	0x200086ac
 8006fcc:	200086b4 	.word	0x200086b4
   			case dhcpIPaddrLeaseTime :
   				p++;
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	3301      	adds	r3, #1
 8006fd4:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	1c5a      	adds	r2, r3, #1
 8006fda:	617a      	str	r2, [r7, #20]
 8006fdc:	781b      	ldrb	r3, [r3, #0]
 8006fde:	72fb      	strb	r3, [r7, #11]
   				dhcp_lease_time  = *p++;
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	1c5a      	adds	r2, r3, #1
 8006fe4:	617a      	str	r2, [r7, #20]
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	4b33      	ldr	r3, [pc, #204]	; (80070b8 <parseDHCPMSG+0x368>)
 8006fec:	601a      	str	r2, [r3, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8006fee:	4b32      	ldr	r3, [pc, #200]	; (80070b8 <parseDHCPMSG+0x368>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	021a      	lsls	r2, r3, #8
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	1c59      	adds	r1, r3, #1
 8006ff8:	6179      	str	r1, [r7, #20]
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	4a2e      	ldr	r2, [pc, #184]	; (80070b8 <parseDHCPMSG+0x368>)
 8007000:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007002:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <parseDHCPMSG+0x368>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	021a      	lsls	r2, r3, #8
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	1c59      	adds	r1, r3, #1
 800700c:	6179      	str	r1, [r7, #20]
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	4413      	add	r3, r2
 8007012:	4a29      	ldr	r2, [pc, #164]	; (80070b8 <parseDHCPMSG+0x368>)
 8007014:	6013      	str	r3, [r2, #0]
   				dhcp_lease_time  = (dhcp_lease_time << 8) + *p++;
 8007016:	4b28      	ldr	r3, [pc, #160]	; (80070b8 <parseDHCPMSG+0x368>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	021a      	lsls	r2, r3, #8
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	1c59      	adds	r1, r3, #1
 8007020:	6179      	str	r1, [r7, #20]
 8007022:	781b      	ldrb	r3, [r3, #0]
 8007024:	4413      	add	r3, r2
 8007026:	4a24      	ldr	r2, [pc, #144]	; (80070b8 <parseDHCPMSG+0x368>)
 8007028:	6013      	str	r3, [r2, #0]
            #ifdef _DHCP_DEBUG_  
               dhcp_lease_time = 10;
 				#endif
   				break;
 800702a:	e039      	b.n	80070a0 <parseDHCPMSG+0x350>
   			case dhcpServerIdentifier :
   				p++;
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	3301      	adds	r3, #1
 8007030:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	1c5a      	adds	r2, r3, #1
 8007036:	617a      	str	r2, [r7, #20]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	72fb      	strb	r3, [r7, #11]
   				DHCP_SIP[0] = *p++;
 800703c:	697b      	ldr	r3, [r7, #20]
 800703e:	1c5a      	adds	r2, r3, #1
 8007040:	617a      	str	r2, [r7, #20]
 8007042:	781a      	ldrb	r2, [r3, #0]
 8007044:	4b1d      	ldr	r3, [pc, #116]	; (80070bc <parseDHCPMSG+0x36c>)
 8007046:	701a      	strb	r2, [r3, #0]
   				DHCP_SIP[1] = *p++;
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	1c5a      	adds	r2, r3, #1
 800704c:	617a      	str	r2, [r7, #20]
 800704e:	781a      	ldrb	r2, [r3, #0]
 8007050:	4b1a      	ldr	r3, [pc, #104]	; (80070bc <parseDHCPMSG+0x36c>)
 8007052:	705a      	strb	r2, [r3, #1]
   				DHCP_SIP[2] = *p++;
 8007054:	697b      	ldr	r3, [r7, #20]
 8007056:	1c5a      	adds	r2, r3, #1
 8007058:	617a      	str	r2, [r7, #20]
 800705a:	781a      	ldrb	r2, [r3, #0]
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <parseDHCPMSG+0x36c>)
 800705e:	709a      	strb	r2, [r3, #2]
   				DHCP_SIP[3] = *p++;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	617a      	str	r2, [r7, #20]
 8007066:	781a      	ldrb	r2, [r3, #0]
 8007068:	4b14      	ldr	r3, [pc, #80]	; (80070bc <parseDHCPMSG+0x36c>)
 800706a:	70da      	strb	r2, [r3, #3]
                DHCP_REAL_SIP[0]=svr_addr[0];
 800706c:	793a      	ldrb	r2, [r7, #4]
 800706e:	4b14      	ldr	r3, [pc, #80]	; (80070c0 <parseDHCPMSG+0x370>)
 8007070:	701a      	strb	r2, [r3, #0]
                DHCP_REAL_SIP[1]=svr_addr[1];
 8007072:	797a      	ldrb	r2, [r7, #5]
 8007074:	4b12      	ldr	r3, [pc, #72]	; (80070c0 <parseDHCPMSG+0x370>)
 8007076:	705a      	strb	r2, [r3, #1]
                DHCP_REAL_SIP[2]=svr_addr[2];
 8007078:	79ba      	ldrb	r2, [r7, #6]
 800707a:	4b11      	ldr	r3, [pc, #68]	; (80070c0 <parseDHCPMSG+0x370>)
 800707c:	709a      	strb	r2, [r3, #2]
                DHCP_REAL_SIP[3]=svr_addr[3];
 800707e:	79fa      	ldrb	r2, [r7, #7]
 8007080:	4b0f      	ldr	r3, [pc, #60]	; (80070c0 <parseDHCPMSG+0x370>)
 8007082:	70da      	strb	r2, [r3, #3]
   				break;
 8007084:	e00c      	b.n	80070a0 <parseDHCPMSG+0x350>
   			default :
   				p++;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	3301      	adds	r3, #1
 800708a:	617b      	str	r3, [r7, #20]
   				opt_len = *p++;
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	1c5a      	adds	r2, r3, #1
 8007090:	617a      	str	r2, [r7, #20]
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	72fb      	strb	r3, [r7, #11]
   				p += opt_len;
 8007096:	7afb      	ldrb	r3, [r7, #11]
 8007098:	697a      	ldr	r2, [r7, #20]
 800709a:	4413      	add	r3, r2
 800709c:	617b      	str	r3, [r7, #20]
   				break;
 800709e:	bf00      	nop
		while ( p < e ) {
 80070a0:	697a      	ldr	r2, [r7, #20]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	429a      	cmp	r2, r3
 80070a6:	f4ff aeea 	bcc.w	8006e7e <parseDHCPMSG+0x12e>
			} // switch
		} // while
	} // if
	return	type;
 80070aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80070ae:	4618      	mov	r0, r3
 80070b0:	371c      	adds	r7, #28
 80070b2:	46bd      	mov	sp, r7
 80070b4:	bd90      	pop	{r4, r7, pc}
 80070b6:	bf00      	nop
 80070b8:	20000048 	.word	0x20000048
 80070bc:	20008b7c 	.word	0x20008b7c
 80070c0:	20008b78 	.word	0x20008b78

080070c4 <DHCP_run>:

uint8_t DHCP_run(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	b082      	sub	sp, #8
 80070c8:	af00      	add	r7, sp, #0
	uint8_t  type;
	uint8_t  ret;

	if(dhcp_state == STATE_DHCP_STOP) return DHCP_STOPPED;
 80070ca:	4b7e      	ldr	r3, [pc, #504]	; (80072c4 <DHCP_run+0x200>)
 80070cc:	f993 3000 	ldrsb.w	r3, [r3]
 80070d0:	2b06      	cmp	r3, #6
 80070d2:	d101      	bne.n	80070d8 <DHCP_run+0x14>
 80070d4:	2305      	movs	r3, #5
 80070d6:	e0f1      	b.n	80072bc <DHCP_run+0x1f8>

	if(getSn_SR(DHCP_SOCKET) != SOCK_UDP)
 80070d8:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <DHCP_run+0x204>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	3304      	adds	r3, #4
 80070de:	021b      	lsls	r3, r3, #8
 80070e0:	3303      	adds	r3, #3
 80070e2:	4618      	mov	r0, r3
 80070e4:	f7fd fa32 	bl	800454c <WIZCHIP_READ>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b22      	cmp	r3, #34	; 0x22
 80070ec:	d006      	beq.n	80070fc <DHCP_run+0x38>
	   socket(DHCP_SOCKET, Sn_MR_UDP, DHCP_CLIENT_PORT, 0x00);
 80070ee:	4b76      	ldr	r3, [pc, #472]	; (80072c8 <DHCP_run+0x204>)
 80070f0:	7818      	ldrb	r0, [r3, #0]
 80070f2:	2300      	movs	r3, #0
 80070f4:	2244      	movs	r2, #68	; 0x44
 80070f6:	2102      	movs	r1, #2
 80070f8:	f7fd fd92 	bl	8004c20 <socket>

	ret = DHCP_RUNNING;
 80070fc:	2301      	movs	r3, #1
 80070fe:	71fb      	strb	r3, [r7, #7]
	type = parseDHCPMSG();
 8007100:	f7ff fe26 	bl	8006d50 <parseDHCPMSG>
 8007104:	4603      	mov	r3, r0
 8007106:	71bb      	strb	r3, [r7, #6]

	switch ( dhcp_state ) {
 8007108:	4b6e      	ldr	r3, [pc, #440]	; (80072c4 <DHCP_run+0x200>)
 800710a:	f993 3000 	ldrsb.w	r3, [r3]
 800710e:	2b04      	cmp	r3, #4
 8007110:	f200 80d0 	bhi.w	80072b4 <DHCP_run+0x1f0>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <DHCP_run+0x58>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	08007131 	.word	0x08007131
 8007120:	08007155 	.word	0x08007155
 8007124:	08007199 	.word	0x08007199
 8007128:	080071e9 	.word	0x080071e9
 800712c:	08007243 	.word	0x08007243
	   case STATE_DHCP_INIT     :
         DHCP_allocated_ip[0] = 0;
 8007130:	4b66      	ldr	r3, [pc, #408]	; (80072cc <DHCP_run+0x208>)
 8007132:	2200      	movs	r2, #0
 8007134:	701a      	strb	r2, [r3, #0]
         DHCP_allocated_ip[1] = 0;
 8007136:	4b65      	ldr	r3, [pc, #404]	; (80072cc <DHCP_run+0x208>)
 8007138:	2200      	movs	r2, #0
 800713a:	705a      	strb	r2, [r3, #1]
         DHCP_allocated_ip[2] = 0;
 800713c:	4b63      	ldr	r3, [pc, #396]	; (80072cc <DHCP_run+0x208>)
 800713e:	2200      	movs	r2, #0
 8007140:	709a      	strb	r2, [r3, #2]
         DHCP_allocated_ip[3] = 0;
 8007142:	4b62      	ldr	r3, [pc, #392]	; (80072cc <DHCP_run+0x208>)
 8007144:	2200      	movs	r2, #0
 8007146:	70da      	strb	r2, [r3, #3]
   		send_DHCP_DISCOVER();
 8007148:	f7ff f85c 	bl	8006204 <send_DHCP_DISCOVER>
   		dhcp_state = STATE_DHCP_DISCOVER;
 800714c:	4b5d      	ldr	r3, [pc, #372]	; (80072c4 <DHCP_run+0x200>)
 800714e:	2201      	movs	r2, #1
 8007150:	701a      	strb	r2, [r3, #0]
   		break;
 8007152:	e0b2      	b.n	80072ba <DHCP_run+0x1f6>
		case STATE_DHCP_DISCOVER :
			if (type == DHCP_OFFER){
 8007154:	79bb      	ldrb	r3, [r7, #6]
 8007156:	2b02      	cmp	r3, #2
 8007158:	d119      	bne.n	800718e <DHCP_run+0xca>
#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_OFFER\r\n");
#endif
            DHCP_allocated_ip[0] = pDHCPMSG->yiaddr[0];
 800715a:	4b5d      	ldr	r3, [pc, #372]	; (80072d0 <DHCP_run+0x20c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	7c1a      	ldrb	r2, [r3, #16]
 8007160:	4b5a      	ldr	r3, [pc, #360]	; (80072cc <DHCP_run+0x208>)
 8007162:	701a      	strb	r2, [r3, #0]
            DHCP_allocated_ip[1] = pDHCPMSG->yiaddr[1];
 8007164:	4b5a      	ldr	r3, [pc, #360]	; (80072d0 <DHCP_run+0x20c>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	7c5a      	ldrb	r2, [r3, #17]
 800716a:	4b58      	ldr	r3, [pc, #352]	; (80072cc <DHCP_run+0x208>)
 800716c:	705a      	strb	r2, [r3, #1]
            DHCP_allocated_ip[2] = pDHCPMSG->yiaddr[2];
 800716e:	4b58      	ldr	r3, [pc, #352]	; (80072d0 <DHCP_run+0x20c>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	7c9a      	ldrb	r2, [r3, #18]
 8007174:	4b55      	ldr	r3, [pc, #340]	; (80072cc <DHCP_run+0x208>)
 8007176:	709a      	strb	r2, [r3, #2]
            DHCP_allocated_ip[3] = pDHCPMSG->yiaddr[3];
 8007178:	4b55      	ldr	r3, [pc, #340]	; (80072d0 <DHCP_run+0x20c>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	7cda      	ldrb	r2, [r3, #19]
 800717e:	4b53      	ldr	r3, [pc, #332]	; (80072cc <DHCP_run+0x208>)
 8007180:	70da      	strb	r2, [r3, #3]

				send_DHCP_REQUEST();
 8007182:	f7ff fa07 	bl	8006594 <send_DHCP_REQUEST>
				dhcp_state = STATE_DHCP_REQUEST;
 8007186:	4b4f      	ldr	r3, [pc, #316]	; (80072c4 <DHCP_run+0x200>)
 8007188:	2202      	movs	r2, #2
 800718a:	701a      	strb	r2, [r3, #0]
			} else ret = check_DHCP_timeout();
         break;
 800718c:	e095      	b.n	80072ba <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 800718e:	f000 f8b1 	bl	80072f4 <check_DHCP_timeout>
 8007192:	4603      	mov	r3, r0
 8007194:	71fb      	strb	r3, [r7, #7]
         break;
 8007196:	e090      	b.n	80072ba <DHCP_run+0x1f6>

		case STATE_DHCP_REQUEST :
			if (type == DHCP_ACK) {
 8007198:	79bb      	ldrb	r3, [r7, #6]
 800719a:	2b05      	cmp	r3, #5
 800719c:	d116      	bne.n	80071cc <DHCP_run+0x108>

#ifdef _DHCP_DEBUG_
				printf("> Receive DHCP_ACK\r\n");
#endif
				if (check_DHCP_leasedIP()) {
 800719e:	f000 f903 	bl	80073a8 <check_DHCP_leasedIP>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d008      	beq.n	80071ba <DHCP_run+0xf6>
					// Network info assignment from DHCP
					dhcp_ip_assign();
 80071a8:	4b4a      	ldr	r3, [pc, #296]	; (80072d4 <DHCP_run+0x210>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4798      	blx	r3
					reset_DHCP_timeout();
 80071ae:	f000 f9c7 	bl	8007540 <reset_DHCP_timeout>

					dhcp_state = STATE_DHCP_LEASED;
 80071b2:	4b44      	ldr	r3, [pc, #272]	; (80072c4 <DHCP_run+0x200>)
 80071b4:	2203      	movs	r2, #3
 80071b6:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
		break;
 80071b8:	e07f      	b.n	80072ba <DHCP_run+0x1f6>
					reset_DHCP_timeout();
 80071ba:	f000 f9c1 	bl	8007540 <reset_DHCP_timeout>
					dhcp_ip_conflict();
 80071be:	4b46      	ldr	r3, [pc, #280]	; (80072d8 <DHCP_run+0x214>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4798      	blx	r3
				    dhcp_state = STATE_DHCP_INIT;
 80071c4:	4b3f      	ldr	r3, [pc, #252]	; (80072c4 <DHCP_run+0x200>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	701a      	strb	r2, [r3, #0]
		break;
 80071ca:	e076      	b.n	80072ba <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 80071cc:	79bb      	ldrb	r3, [r7, #6]
 80071ce:	2b06      	cmp	r3, #6
 80071d0:	d105      	bne.n	80071de <DHCP_run+0x11a>
				reset_DHCP_timeout();
 80071d2:	f000 f9b5 	bl	8007540 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80071d6:	4b3b      	ldr	r3, [pc, #236]	; (80072c4 <DHCP_run+0x200>)
 80071d8:	2201      	movs	r2, #1
 80071da:	701a      	strb	r2, [r3, #0]
		break;
 80071dc:	e06d      	b.n	80072ba <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 80071de:	f000 f889 	bl	80072f4 <check_DHCP_timeout>
 80071e2:	4603      	mov	r3, r0
 80071e4:	71fb      	strb	r3, [r7, #7]
		break;
 80071e6:	e068      	b.n	80072ba <DHCP_run+0x1f6>

		case STATE_DHCP_LEASED :
		   ret = DHCP_IP_LEASED;
 80071e8:	2304      	movs	r3, #4
 80071ea:	71fb      	strb	r3, [r7, #7]
			if ((dhcp_lease_time != INFINITE_LEASETIME) && ((dhcp_lease_time/2) < dhcp_tick_1s)) {
 80071ec:	4b3b      	ldr	r3, [pc, #236]	; (80072dc <DHCP_run+0x218>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d060      	beq.n	80072b8 <DHCP_run+0x1f4>
 80071f6:	4b39      	ldr	r3, [pc, #228]	; (80072dc <DHCP_run+0x218>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	085a      	lsrs	r2, r3, #1
 80071fc:	4b38      	ldr	r3, [pc, #224]	; (80072e0 <DHCP_run+0x21c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	429a      	cmp	r2, r3
 8007202:	d259      	bcs.n	80072b8 <DHCP_run+0x1f4>
				
#ifdef _DHCP_DEBUG_
 				printf("> Maintains the IP address \r\n");
#endif

				type = 0;
 8007204:	2300      	movs	r3, #0
 8007206:	71bb      	strb	r3, [r7, #6]
				OLD_allocated_ip[0] = DHCP_allocated_ip[0];
 8007208:	4b30      	ldr	r3, [pc, #192]	; (80072cc <DHCP_run+0x208>)
 800720a:	781a      	ldrb	r2, [r3, #0]
 800720c:	4b35      	ldr	r3, [pc, #212]	; (80072e4 <DHCP_run+0x220>)
 800720e:	701a      	strb	r2, [r3, #0]
				OLD_allocated_ip[1] = DHCP_allocated_ip[1];
 8007210:	4b2e      	ldr	r3, [pc, #184]	; (80072cc <DHCP_run+0x208>)
 8007212:	785a      	ldrb	r2, [r3, #1]
 8007214:	4b33      	ldr	r3, [pc, #204]	; (80072e4 <DHCP_run+0x220>)
 8007216:	705a      	strb	r2, [r3, #1]
				OLD_allocated_ip[2] = DHCP_allocated_ip[2];
 8007218:	4b2c      	ldr	r3, [pc, #176]	; (80072cc <DHCP_run+0x208>)
 800721a:	789a      	ldrb	r2, [r3, #2]
 800721c:	4b31      	ldr	r3, [pc, #196]	; (80072e4 <DHCP_run+0x220>)
 800721e:	709a      	strb	r2, [r3, #2]
				OLD_allocated_ip[3] = DHCP_allocated_ip[3];
 8007220:	4b2a      	ldr	r3, [pc, #168]	; (80072cc <DHCP_run+0x208>)
 8007222:	78da      	ldrb	r2, [r3, #3]
 8007224:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <DHCP_run+0x220>)
 8007226:	70da      	strb	r2, [r3, #3]
				
				DHCP_XID++;
 8007228:	4b2f      	ldr	r3, [pc, #188]	; (80072e8 <DHCP_run+0x224>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3301      	adds	r3, #1
 800722e:	4a2e      	ldr	r2, [pc, #184]	; (80072e8 <DHCP_run+0x224>)
 8007230:	6013      	str	r3, [r2, #0]

				send_DHCP_REQUEST();
 8007232:	f7ff f9af 	bl	8006594 <send_DHCP_REQUEST>

				reset_DHCP_timeout();
 8007236:	f000 f983 	bl	8007540 <reset_DHCP_timeout>

				dhcp_state = STATE_DHCP_REREQUEST;
 800723a:	4b22      	ldr	r3, [pc, #136]	; (80072c4 <DHCP_run+0x200>)
 800723c:	2204      	movs	r2, #4
 800723e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8007240:	e03a      	b.n	80072b8 <DHCP_run+0x1f4>

		case STATE_DHCP_REREQUEST :
		   ret = DHCP_IP_LEASED;
 8007242:	2304      	movs	r3, #4
 8007244:	71fb      	strb	r3, [r7, #7]
			if (type == DHCP_ACK) {
 8007246:	79bb      	ldrb	r3, [r7, #6]
 8007248:	2b05      	cmp	r3, #5
 800724a:	d125      	bne.n	8007298 <DHCP_run+0x1d4>
				dhcp_retry_count = 0;
 800724c:	4b27      	ldr	r3, [pc, #156]	; (80072ec <DHCP_run+0x228>)
 800724e:	2200      	movs	r2, #0
 8007250:	701a      	strb	r2, [r3, #0]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8007252:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <DHCP_run+0x220>)
 8007254:	781a      	ldrb	r2, [r3, #0]
 8007256:	4b1d      	ldr	r3, [pc, #116]	; (80072cc <DHCP_run+0x208>)
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	429a      	cmp	r2, r3
 800725c:	d111      	bne.n	8007282 <DHCP_run+0x1be>
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 800725e:	4b21      	ldr	r3, [pc, #132]	; (80072e4 <DHCP_run+0x220>)
 8007260:	785a      	ldrb	r2, [r3, #1]
 8007262:	4b1a      	ldr	r3, [pc, #104]	; (80072cc <DHCP_run+0x208>)
 8007264:	785b      	ldrb	r3, [r3, #1]
				if (OLD_allocated_ip[0] != DHCP_allocated_ip[0] || 
 8007266:	429a      	cmp	r2, r3
 8007268:	d10b      	bne.n	8007282 <DHCP_run+0x1be>
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <DHCP_run+0x220>)
 800726c:	789a      	ldrb	r2, [r3, #2]
 800726e:	4b17      	ldr	r3, [pc, #92]	; (80072cc <DHCP_run+0x208>)
 8007270:	789b      	ldrb	r3, [r3, #2]
				    OLD_allocated_ip[1] != DHCP_allocated_ip[1] ||
 8007272:	429a      	cmp	r2, r3
 8007274:	d105      	bne.n	8007282 <DHCP_run+0x1be>
				    OLD_allocated_ip[3] != DHCP_allocated_ip[3]) 
 8007276:	4b1b      	ldr	r3, [pc, #108]	; (80072e4 <DHCP_run+0x220>)
 8007278:	78da      	ldrb	r2, [r3, #3]
 800727a:	4b14      	ldr	r3, [pc, #80]	; (80072cc <DHCP_run+0x208>)
 800727c:	78db      	ldrb	r3, [r3, #3]
				    OLD_allocated_ip[2] != DHCP_allocated_ip[2] ||
 800727e:	429a      	cmp	r2, r3
 8007280:	d004      	beq.n	800728c <DHCP_run+0x1c8>
				{
					ret = DHCP_IP_CHANGED;
 8007282:	2303      	movs	r3, #3
 8007284:	71fb      	strb	r3, [r7, #7]
					dhcp_ip_update();
 8007286:	4b1a      	ldr	r3, [pc, #104]	; (80072f0 <DHCP_run+0x22c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4798      	blx	r3
					
				}
         #ifdef _DHCP_DEBUG_
            else printf(">IP is continued.\r\n");
         #endif            				
				reset_DHCP_timeout();
 800728c:	f000 f958 	bl	8007540 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_LEASED;
 8007290:	4b0c      	ldr	r3, [pc, #48]	; (80072c4 <DHCP_run+0x200>)
 8007292:	2203      	movs	r2, #3
 8007294:	701a      	strb	r2, [r3, #0]

				reset_DHCP_timeout();

				dhcp_state = STATE_DHCP_DISCOVER;
			} else ret = check_DHCP_timeout();
	   	break;
 8007296:	e010      	b.n	80072ba <DHCP_run+0x1f6>
			} else if (type == DHCP_NAK) {
 8007298:	79bb      	ldrb	r3, [r7, #6]
 800729a:	2b06      	cmp	r3, #6
 800729c:	d105      	bne.n	80072aa <DHCP_run+0x1e6>
				reset_DHCP_timeout();
 800729e:	f000 f94f 	bl	8007540 <reset_DHCP_timeout>
				dhcp_state = STATE_DHCP_DISCOVER;
 80072a2:	4b08      	ldr	r3, [pc, #32]	; (80072c4 <DHCP_run+0x200>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
	   	break;
 80072a8:	e007      	b.n	80072ba <DHCP_run+0x1f6>
			} else ret = check_DHCP_timeout();
 80072aa:	f000 f823 	bl	80072f4 <check_DHCP_timeout>
 80072ae:	4603      	mov	r3, r0
 80072b0:	71fb      	strb	r3, [r7, #7]
	   	break;
 80072b2:	e002      	b.n	80072ba <DHCP_run+0x1f6>
		default :
   		break;
 80072b4:	bf00      	nop
 80072b6:	e000      	b.n	80072ba <DHCP_run+0x1f6>
		break;
 80072b8:	bf00      	nop
	}

	return ret;
 80072ba:	79fb      	ldrb	r3, [r7, #7]
}
 80072bc:	4618      	mov	r0, r3
 80072be:	3708      	adds	r7, #8
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}
 80072c4:	200086b8 	.word	0x200086b8
 80072c8:	20008b84 	.word	0x20008b84
 80072cc:	200086a8 	.word	0x200086a8
 80072d0:	20008b80 	.word	0x20008b80
 80072d4:	20000058 	.word	0x20000058
 80072d8:	20000060 	.word	0x20000060
 80072dc:	20000048 	.word	0x20000048
 80072e0:	200086bc 	.word	0x200086bc
 80072e4:	200086a4 	.word	0x200086a4
 80072e8:	20008b74 	.word	0x20008b74
 80072ec:	200086b9 	.word	0x200086b9
 80072f0:	2000005c 	.word	0x2000005c

080072f4 <check_DHCP_timeout>:
   close(DHCP_SOCKET);
   dhcp_state = STATE_DHCP_STOP;
}

uint8_t check_DHCP_timeout(void)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b082      	sub	sp, #8
 80072f8:	af00      	add	r7, sp, #0
	uint8_t ret = DHCP_RUNNING;
 80072fa:	2301      	movs	r3, #1
 80072fc:	71fb      	strb	r3, [r7, #7]
	
	if (dhcp_retry_count < MAX_DHCP_RETRY) {
 80072fe:	4b26      	ldr	r3, [pc, #152]	; (8007398 <check_DHCP_timeout+0xa4>)
 8007300:	f993 3000 	ldrsb.w	r3, [r3]
 8007304:	2b01      	cmp	r3, #1
 8007306:	dc2a      	bgt.n	800735e <check_DHCP_timeout+0x6a>
		if (dhcp_tick_next < dhcp_tick_1s) {
 8007308:	4b24      	ldr	r3, [pc, #144]	; (800739c <check_DHCP_timeout+0xa8>)
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	4b24      	ldr	r3, [pc, #144]	; (80073a0 <check_DHCP_timeout+0xac>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d23c      	bcs.n	800738e <check_DHCP_timeout+0x9a>

			switch ( dhcp_state ) {
 8007314:	4b23      	ldr	r3, [pc, #140]	; (80073a4 <check_DHCP_timeout+0xb0>)
 8007316:	f993 3000 	ldrsb.w	r3, [r3]
 800731a:	2b02      	cmp	r3, #2
 800731c:	d007      	beq.n	800732e <check_DHCP_timeout+0x3a>
 800731e:	2b04      	cmp	r3, #4
 8007320:	d008      	beq.n	8007334 <check_DHCP_timeout+0x40>
 8007322:	2b01      	cmp	r3, #1
 8007324:	d000      	beq.n	8007328 <check_DHCP_timeout+0x34>
					
					send_DHCP_REQUEST();
				break;
		
				default :
				break;
 8007326:	e008      	b.n	800733a <check_DHCP_timeout+0x46>
					send_DHCP_DISCOVER();
 8007328:	f7fe ff6c 	bl	8006204 <send_DHCP_DISCOVER>
				break;
 800732c:	e005      	b.n	800733a <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 800732e:	f7ff f931 	bl	8006594 <send_DHCP_REQUEST>
				break;
 8007332:	e002      	b.n	800733a <check_DHCP_timeout+0x46>
					send_DHCP_REQUEST();
 8007334:	f7ff f92e 	bl	8006594 <send_DHCP_REQUEST>
				break;
 8007338:	bf00      	nop
			}

			dhcp_tick_1s = 0;
 800733a:	4b19      	ldr	r3, [pc, #100]	; (80073a0 <check_DHCP_timeout+0xac>)
 800733c:	2200      	movs	r2, #0
 800733e:	601a      	str	r2, [r3, #0]
			dhcp_tick_next = dhcp_tick_1s + DHCP_WAIT_TIME;
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <check_DHCP_timeout+0xac>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	330a      	adds	r3, #10
 8007346:	4a15      	ldr	r2, [pc, #84]	; (800739c <check_DHCP_timeout+0xa8>)
 8007348:	6013      	str	r3, [r2, #0]
			dhcp_retry_count++;
 800734a:	4b13      	ldr	r3, [pc, #76]	; (8007398 <check_DHCP_timeout+0xa4>)
 800734c:	f993 3000 	ldrsb.w	r3, [r3]
 8007350:	b2db      	uxtb	r3, r3
 8007352:	3301      	adds	r3, #1
 8007354:	b2db      	uxtb	r3, r3
 8007356:	b25a      	sxtb	r2, r3
 8007358:	4b0f      	ldr	r3, [pc, #60]	; (8007398 <check_DHCP_timeout+0xa4>)
 800735a:	701a      	strb	r2, [r3, #0]
 800735c:	e017      	b.n	800738e <check_DHCP_timeout+0x9a>
		}
	} else { // timeout occurred

		switch(dhcp_state) {
 800735e:	4b11      	ldr	r3, [pc, #68]	; (80073a4 <check_DHCP_timeout+0xb0>)
 8007360:	f993 3000 	ldrsb.w	r3, [r3]
 8007364:	2b02      	cmp	r3, #2
 8007366:	d00a      	beq.n	800737e <check_DHCP_timeout+0x8a>
 8007368:	2b04      	cmp	r3, #4
 800736a:	d008      	beq.n	800737e <check_DHCP_timeout+0x8a>
 800736c:	2b01      	cmp	r3, #1
 800736e:	d000      	beq.n	8007372 <check_DHCP_timeout+0x7e>
			case STATE_DHCP_REREQUEST:
				send_DHCP_DISCOVER();
				dhcp_state = STATE_DHCP_DISCOVER;
				break;
			default :
				break;
 8007370:	e00b      	b.n	800738a <check_DHCP_timeout+0x96>
				dhcp_state = STATE_DHCP_INIT;
 8007372:	4b0c      	ldr	r3, [pc, #48]	; (80073a4 <check_DHCP_timeout+0xb0>)
 8007374:	2200      	movs	r2, #0
 8007376:	701a      	strb	r2, [r3, #0]
				ret = DHCP_FAILED;
 8007378:	2300      	movs	r3, #0
 800737a:	71fb      	strb	r3, [r7, #7]
				break;
 800737c:	e005      	b.n	800738a <check_DHCP_timeout+0x96>
				send_DHCP_DISCOVER();
 800737e:	f7fe ff41 	bl	8006204 <send_DHCP_DISCOVER>
				dhcp_state = STATE_DHCP_DISCOVER;
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <check_DHCP_timeout+0xb0>)
 8007384:	2201      	movs	r2, #1
 8007386:	701a      	strb	r2, [r3, #0]
				break;
 8007388:	bf00      	nop
		}
		reset_DHCP_timeout();
 800738a:	f000 f8d9 	bl	8007540 <reset_DHCP_timeout>
	}
	return ret;
 800738e:	79fb      	ldrb	r3, [r7, #7]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	200086b9 	.word	0x200086b9
 800739c:	2000004c 	.word	0x2000004c
 80073a0:	200086bc 	.word	0x200086bc
 80073a4:	200086b8 	.word	0x200086b8

080073a8 <check_DHCP_leasedIP>:

int8_t check_DHCP_leasedIP(void)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af02      	add	r7, sp, #8
	uint8_t tmp;
	int32_t ret;

	//WIZchip RCR value changed for ARP Timeout count control
	tmp = getRCR();
 80073ae:	2019      	movs	r0, #25
 80073b0:	f7fd f8cc 	bl	800454c <WIZCHIP_READ>
 80073b4:	4603      	mov	r3, r0
 80073b6:	71fb      	strb	r3, [r7, #7]
	setRCR(0x03);
 80073b8:	2103      	movs	r1, #3
 80073ba:	2019      	movs	r0, #25
 80073bc:	f7fd f898 	bl	80044f0 <WIZCHIP_WRITE>

	// IP conflict detection : ARP request - ARP reply
	// Broadcasting ARP Request for check the IP conflict using UDP sendto() function
	ret = sendto(DHCP_SOCKET, (uint8_t *)"CHECK_IP_CONFLICT", 17, DHCP_allocated_ip, 5000);
 80073c0:	4b13      	ldr	r3, [pc, #76]	; (8007410 <check_DHCP_leasedIP+0x68>)
 80073c2:	7818      	ldrb	r0, [r3, #0]
 80073c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <check_DHCP_leasedIP+0x6c>)
 80073cc:	2211      	movs	r2, #17
 80073ce:	4912      	ldr	r1, [pc, #72]	; (8007418 <check_DHCP_leasedIP+0x70>)
 80073d0:	f7fe f87e 	bl	80054d0 <sendto>
 80073d4:	6038      	str	r0, [r7, #0]

	// RCR value restore
	setRCR(tmp);
 80073d6:	79fb      	ldrb	r3, [r7, #7]
 80073d8:	4619      	mov	r1, r3
 80073da:	2019      	movs	r0, #25
 80073dc:	f7fd f888 	bl	80044f0 <WIZCHIP_WRITE>

	if(ret == SOCKERR_TIMEOUT) {
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	f113 0f0d 	cmn.w	r3, #13
 80073e6:	d101      	bne.n	80073ec <check_DHCP_leasedIP+0x44>

#ifdef _DHCP_DEBUG_
		printf("\r\n> Check leased IP - OK\r\n");
#endif

		return 1;
 80073e8:	2301      	movs	r3, #1
 80073ea:	e00c      	b.n	8007406 <check_DHCP_leasedIP+0x5e>
	} else {
		// Received ARP reply or etc : IP address conflict occur, DHCP Failed
		send_DHCP_DECLINE();
 80073ec:	f7ff fb5e 	bl	8006aac <send_DHCP_DECLINE>

		ret = dhcp_tick_1s;
 80073f0:	4b0a      	ldr	r3, [pc, #40]	; (800741c <check_DHCP_leasedIP+0x74>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	603b      	str	r3, [r7, #0]
		while((dhcp_tick_1s - ret) < 2) ;   // wait for 1s over; wait to complete to send DECLINE message;
 80073f6:	bf00      	nop
 80073f8:	4b08      	ldr	r3, [pc, #32]	; (800741c <check_DHCP_leasedIP+0x74>)
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	1ad3      	subs	r3, r2, r3
 8007400:	2b01      	cmp	r3, #1
 8007402:	d9f9      	bls.n	80073f8 <check_DHCP_leasedIP+0x50>

		return 0;
 8007404:	2300      	movs	r3, #0
	}
}	
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
 800740e:	bf00      	nop
 8007410:	20008b84 	.word	0x20008b84
 8007414:	200086a8 	.word	0x200086a8
 8007418:	080086e8 	.word	0x080086e8
 800741c:	200086bc 	.word	0x200086bc

08007420 <DHCP_init>:

void DHCP_init(uint8_t s, uint8_t * buf)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	4603      	mov	r3, r0
 8007428:	6039      	str	r1, [r7, #0]
 800742a:	71fb      	strb	r3, [r7, #7]
   uint8_t zeroip[4] = {0,0,0,0};
 800742c:	2300      	movs	r3, #0
 800742e:	60fb      	str	r3, [r7, #12]
   getSHAR(DHCP_CHADDR);
 8007430:	2206      	movs	r2, #6
 8007432:	493d      	ldr	r1, [pc, #244]	; (8007528 <DHCP_init+0x108>)
 8007434:	2009      	movs	r0, #9
 8007436:	f7fd f905 	bl	8004644 <WIZCHIP_READ_BUF>
   if((DHCP_CHADDR[0] | DHCP_CHADDR[1]  | DHCP_CHADDR[2] | DHCP_CHADDR[3] | DHCP_CHADDR[4] | DHCP_CHADDR[5]) == 0x00)
 800743a:	4b3b      	ldr	r3, [pc, #236]	; (8007528 <DHCP_init+0x108>)
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	4b3a      	ldr	r3, [pc, #232]	; (8007528 <DHCP_init+0x108>)
 8007440:	785b      	ldrb	r3, [r3, #1]
 8007442:	4313      	orrs	r3, r2
 8007444:	b2da      	uxtb	r2, r3
 8007446:	4b38      	ldr	r3, [pc, #224]	; (8007528 <DHCP_init+0x108>)
 8007448:	789b      	ldrb	r3, [r3, #2]
 800744a:	4313      	orrs	r3, r2
 800744c:	b2da      	uxtb	r2, r3
 800744e:	4b36      	ldr	r3, [pc, #216]	; (8007528 <DHCP_init+0x108>)
 8007450:	78db      	ldrb	r3, [r3, #3]
 8007452:	4313      	orrs	r3, r2
 8007454:	b2da      	uxtb	r2, r3
 8007456:	4b34      	ldr	r3, [pc, #208]	; (8007528 <DHCP_init+0x108>)
 8007458:	791b      	ldrb	r3, [r3, #4]
 800745a:	4313      	orrs	r3, r2
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4b32      	ldr	r3, [pc, #200]	; (8007528 <DHCP_init+0x108>)
 8007460:	795b      	ldrb	r3, [r3, #5]
 8007462:	4313      	orrs	r3, r2
 8007464:	b2db      	uxtb	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d116      	bne.n	8007498 <DHCP_init+0x78>
   {
      // assigning temporary mac address, you should be set SHAR before call this function. 
      DHCP_CHADDR[0] = 0x00;
 800746a:	4b2f      	ldr	r3, [pc, #188]	; (8007528 <DHCP_init+0x108>)
 800746c:	2200      	movs	r2, #0
 800746e:	701a      	strb	r2, [r3, #0]
      DHCP_CHADDR[1] = 0x08;
 8007470:	4b2d      	ldr	r3, [pc, #180]	; (8007528 <DHCP_init+0x108>)
 8007472:	2208      	movs	r2, #8
 8007474:	705a      	strb	r2, [r3, #1]
      DHCP_CHADDR[2] = 0xdc;      
 8007476:	4b2c      	ldr	r3, [pc, #176]	; (8007528 <DHCP_init+0x108>)
 8007478:	22dc      	movs	r2, #220	; 0xdc
 800747a:	709a      	strb	r2, [r3, #2]
      DHCP_CHADDR[3] = 0x00;
 800747c:	4b2a      	ldr	r3, [pc, #168]	; (8007528 <DHCP_init+0x108>)
 800747e:	2200      	movs	r2, #0
 8007480:	70da      	strb	r2, [r3, #3]
      DHCP_CHADDR[4] = 0x00;
 8007482:	4b29      	ldr	r3, [pc, #164]	; (8007528 <DHCP_init+0x108>)
 8007484:	2200      	movs	r2, #0
 8007486:	711a      	strb	r2, [r3, #4]
      DHCP_CHADDR[5] = 0x00; 
 8007488:	4b27      	ldr	r3, [pc, #156]	; (8007528 <DHCP_init+0x108>)
 800748a:	2200      	movs	r2, #0
 800748c:	715a      	strb	r2, [r3, #5]
      setSHAR(DHCP_CHADDR);     
 800748e:	2206      	movs	r2, #6
 8007490:	4925      	ldr	r1, [pc, #148]	; (8007528 <DHCP_init+0x108>)
 8007492:	2009      	movs	r0, #9
 8007494:	f7fd f888 	bl	80045a8 <WIZCHIP_WRITE_BUF>
   }

	DHCP_SOCKET = s; // SOCK_DHCP
 8007498:	4a24      	ldr	r2, [pc, #144]	; (800752c <DHCP_init+0x10c>)
 800749a:	79fb      	ldrb	r3, [r7, #7]
 800749c:	7013      	strb	r3, [r2, #0]
	pDHCPMSG = (RIP_MSG*)buf;
 800749e:	4a24      	ldr	r2, [pc, #144]	; (8007530 <DHCP_init+0x110>)
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6013      	str	r3, [r2, #0]
	DHCP_XID = 0x12345678;
 80074a4:	4b23      	ldr	r3, [pc, #140]	; (8007534 <DHCP_init+0x114>)
 80074a6:	4a24      	ldr	r2, [pc, #144]	; (8007538 <DHCP_init+0x118>)
 80074a8:	601a      	str	r2, [r3, #0]
	{
		DHCP_XID += DHCP_CHADDR[3];
 80074aa:	4b1f      	ldr	r3, [pc, #124]	; (8007528 <DHCP_init+0x108>)
 80074ac:	78db      	ldrb	r3, [r3, #3]
 80074ae:	461a      	mov	r2, r3
 80074b0:	4b20      	ldr	r3, [pc, #128]	; (8007534 <DHCP_init+0x114>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	4413      	add	r3, r2
 80074b6:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <DHCP_init+0x114>)
 80074b8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[4];
 80074ba:	4b1b      	ldr	r3, [pc, #108]	; (8007528 <DHCP_init+0x108>)
 80074bc:	791b      	ldrb	r3, [r3, #4]
 80074be:	461a      	mov	r2, r3
 80074c0:	4b1c      	ldr	r3, [pc, #112]	; (8007534 <DHCP_init+0x114>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4413      	add	r3, r2
 80074c6:	4a1b      	ldr	r2, [pc, #108]	; (8007534 <DHCP_init+0x114>)
 80074c8:	6013      	str	r3, [r2, #0]
		DHCP_XID += DHCP_CHADDR[5];
 80074ca:	4b17      	ldr	r3, [pc, #92]	; (8007528 <DHCP_init+0x108>)
 80074cc:	795b      	ldrb	r3, [r3, #5]
 80074ce:	461a      	mov	r2, r3
 80074d0:	4b18      	ldr	r3, [pc, #96]	; (8007534 <DHCP_init+0x114>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a17      	ldr	r2, [pc, #92]	; (8007534 <DHCP_init+0x114>)
 80074d8:	6013      	str	r3, [r2, #0]
		DHCP_XID += (DHCP_CHADDR[3] ^ DHCP_CHADDR[4] ^ DHCP_CHADDR[5]);
 80074da:	4b13      	ldr	r3, [pc, #76]	; (8007528 <DHCP_init+0x108>)
 80074dc:	78da      	ldrb	r2, [r3, #3]
 80074de:	4b12      	ldr	r3, [pc, #72]	; (8007528 <DHCP_init+0x108>)
 80074e0:	791b      	ldrb	r3, [r3, #4]
 80074e2:	4053      	eors	r3, r2
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	4b10      	ldr	r3, [pc, #64]	; (8007528 <DHCP_init+0x108>)
 80074e8:	795b      	ldrb	r3, [r3, #5]
 80074ea:	4053      	eors	r3, r2
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	461a      	mov	r2, r3
 80074f0:	4b10      	ldr	r3, [pc, #64]	; (8007534 <DHCP_init+0x114>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4413      	add	r3, r2
 80074f6:	4a0f      	ldr	r2, [pc, #60]	; (8007534 <DHCP_init+0x114>)
 80074f8:	6013      	str	r3, [r2, #0]
	}
	// WIZchip Netinfo Clear
	setSIPR(zeroip);
 80074fa:	f107 030c 	add.w	r3, r7, #12
 80074fe:	2204      	movs	r2, #4
 8007500:	4619      	mov	r1, r3
 8007502:	200f      	movs	r0, #15
 8007504:	f7fd f850 	bl	80045a8 <WIZCHIP_WRITE_BUF>
	setGAR(zeroip);
 8007508:	f107 030c 	add.w	r3, r7, #12
 800750c:	2204      	movs	r2, #4
 800750e:	4619      	mov	r1, r3
 8007510:	2001      	movs	r0, #1
 8007512:	f7fd f849 	bl	80045a8 <WIZCHIP_WRITE_BUF>

	reset_DHCP_timeout();
 8007516:	f000 f813 	bl	8007540 <reset_DHCP_timeout>
	dhcp_state = STATE_DHCP_INIT;
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <DHCP_init+0x11c>)
 800751c:	2200      	movs	r2, #0
 800751e:	701a      	strb	r2, [r3, #0]
}
 8007520:	bf00      	nop
 8007522:	3710      	adds	r7, #16
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	20008b6c 	.word	0x20008b6c
 800752c:	20008b84 	.word	0x20008b84
 8007530:	20008b80 	.word	0x20008b80
 8007534:	20008b74 	.word	0x20008b74
 8007538:	12345678 	.word	0x12345678
 800753c:	200086b8 	.word	0x200086b8

08007540 <reset_DHCP_timeout>:


/* Reset the DHCP timeout count and retry count. */
void reset_DHCP_timeout(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
	dhcp_tick_1s = 0;
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <reset_DHCP_timeout+0x20>)
 8007546:	2200      	movs	r2, #0
 8007548:	601a      	str	r2, [r3, #0]
	dhcp_tick_next = DHCP_WAIT_TIME;
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <reset_DHCP_timeout+0x24>)
 800754c:	220a      	movs	r2, #10
 800754e:	601a      	str	r2, [r3, #0]
	dhcp_retry_count = 0;
 8007550:	4b05      	ldr	r3, [pc, #20]	; (8007568 <reset_DHCP_timeout+0x28>)
 8007552:	2200      	movs	r2, #0
 8007554:	701a      	strb	r2, [r3, #0]
}
 8007556:	bf00      	nop
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	200086bc 	.word	0x200086bc
 8007564:	2000004c 	.word	0x2000004c
 8007568:	200086b9 	.word	0x200086b9

0800756c <getIPfromDHCP>:
{
	dhcp_tick_1s++;
}

void getIPfromDHCP(uint8_t* ip)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	ip[0] = DHCP_allocated_ip[0];
 8007574:	4b0c      	ldr	r3, [pc, #48]	; (80075a8 <getIPfromDHCP+0x3c>)
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	701a      	strb	r2, [r3, #0]
	ip[1] = DHCP_allocated_ip[1];
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	3301      	adds	r3, #1
 8007580:	4a09      	ldr	r2, [pc, #36]	; (80075a8 <getIPfromDHCP+0x3c>)
 8007582:	7852      	ldrb	r2, [r2, #1]
 8007584:	701a      	strb	r2, [r3, #0]
	ip[2] = DHCP_allocated_ip[2];	
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	3302      	adds	r3, #2
 800758a:	4a07      	ldr	r2, [pc, #28]	; (80075a8 <getIPfromDHCP+0x3c>)
 800758c:	7892      	ldrb	r2, [r2, #2]
 800758e:	701a      	strb	r2, [r3, #0]
	ip[3] = DHCP_allocated_ip[3];
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	3303      	adds	r3, #3
 8007594:	4a04      	ldr	r2, [pc, #16]	; (80075a8 <getIPfromDHCP+0x3c>)
 8007596:	78d2      	ldrb	r2, [r2, #3]
 8007598:	701a      	strb	r2, [r3, #0]
}
 800759a:	bf00      	nop
 800759c:	370c      	adds	r7, #12
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
 80075a6:	bf00      	nop
 80075a8:	200086a8 	.word	0x200086a8

080075ac <getGWfromDHCP>:

void getGWfromDHCP(uint8_t* ip)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
	ip[0] =DHCP_allocated_gw[0];
 80075b4:	4b0c      	ldr	r3, [pc, #48]	; (80075e8 <getGWfromDHCP+0x3c>)
 80075b6:	781a      	ldrb	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	701a      	strb	r2, [r3, #0]
	ip[1] =DHCP_allocated_gw[1];
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	3301      	adds	r3, #1
 80075c0:	4a09      	ldr	r2, [pc, #36]	; (80075e8 <getGWfromDHCP+0x3c>)
 80075c2:	7852      	ldrb	r2, [r2, #1]
 80075c4:	701a      	strb	r2, [r3, #0]
	ip[2] =DHCP_allocated_gw[2];
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3302      	adds	r3, #2
 80075ca:	4a07      	ldr	r2, [pc, #28]	; (80075e8 <getGWfromDHCP+0x3c>)
 80075cc:	7892      	ldrb	r2, [r2, #2]
 80075ce:	701a      	strb	r2, [r3, #0]
	ip[3] =DHCP_allocated_gw[3];			
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3303      	adds	r3, #3
 80075d4:	4a04      	ldr	r2, [pc, #16]	; (80075e8 <getGWfromDHCP+0x3c>)
 80075d6:	78d2      	ldrb	r2, [r2, #3]
 80075d8:	701a      	strb	r2, [r3, #0]
}
 80075da:	bf00      	nop
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	200086ac 	.word	0x200086ac

080075ec <getSNfromDHCP>:

void getSNfromDHCP(uint8_t* ip)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
   ip[0] = DHCP_allocated_sn[0];
 80075f4:	4b0c      	ldr	r3, [pc, #48]	; (8007628 <getSNfromDHCP+0x3c>)
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	701a      	strb	r2, [r3, #0]
   ip[1] = DHCP_allocated_sn[1];
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3301      	adds	r3, #1
 8007600:	4a09      	ldr	r2, [pc, #36]	; (8007628 <getSNfromDHCP+0x3c>)
 8007602:	7852      	ldrb	r2, [r2, #1]
 8007604:	701a      	strb	r2, [r3, #0]
   ip[2] = DHCP_allocated_sn[2];
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	3302      	adds	r3, #2
 800760a:	4a07      	ldr	r2, [pc, #28]	; (8007628 <getSNfromDHCP+0x3c>)
 800760c:	7892      	ldrb	r2, [r2, #2]
 800760e:	701a      	strb	r2, [r3, #0]
   ip[3] = DHCP_allocated_sn[3];         
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	3303      	adds	r3, #3
 8007614:	4a04      	ldr	r2, [pc, #16]	; (8007628 <getSNfromDHCP+0x3c>)
 8007616:	78d2      	ldrb	r2, [r2, #3]
 8007618:	701a      	strb	r2, [r3, #0]
}
 800761a:	bf00      	nop
 800761c:	370c      	adds	r7, #12
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
 8007626:	bf00      	nop
 8007628:	200086b0 	.word	0x200086b0

0800762c <NibbleToHex>:
{
	return dhcp_lease_time;
}

char NibbleToHex(uint8_t nibble)
{
 800762c:	b480      	push	{r7}
 800762e:	b083      	sub	sp, #12
 8007630:	af00      	add	r7, sp, #0
 8007632:	4603      	mov	r3, r0
 8007634:	71fb      	strb	r3, [r7, #7]
  nibble &= 0x0F;
 8007636:	79fb      	ldrb	r3, [r7, #7]
 8007638:	f003 030f 	and.w	r3, r3, #15
 800763c:	71fb      	strb	r3, [r7, #7]
  if (nibble <= 9)
 800763e:	79fb      	ldrb	r3, [r7, #7]
 8007640:	2b09      	cmp	r3, #9
 8007642:	d803      	bhi.n	800764c <NibbleToHex+0x20>
    return nibble + '0';
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	3330      	adds	r3, #48	; 0x30
 8007648:	b2db      	uxtb	r3, r3
 800764a:	e002      	b.n	8007652 <NibbleToHex+0x26>
  else 
    return nibble + ('A'-0x0A);
 800764c:	79fb      	ldrb	r3, [r7, #7]
 800764e:	3337      	adds	r3, #55	; 0x37
 8007650:	b2db      	uxtb	r3, r3
}
 8007652:	4618      	mov	r0, r3
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
	...

08007660 <__errno>:
 8007660:	4b01      	ldr	r3, [pc, #4]	; (8007668 <__errno+0x8>)
 8007662:	6818      	ldr	r0, [r3, #0]
 8007664:	4770      	bx	lr
 8007666:	bf00      	nop
 8007668:	20000064 	.word	0x20000064

0800766c <__libc_init_array>:
 800766c:	b570      	push	{r4, r5, r6, lr}
 800766e:	4e0d      	ldr	r6, [pc, #52]	; (80076a4 <__libc_init_array+0x38>)
 8007670:	4c0d      	ldr	r4, [pc, #52]	; (80076a8 <__libc_init_array+0x3c>)
 8007672:	1ba4      	subs	r4, r4, r6
 8007674:	10a4      	asrs	r4, r4, #2
 8007676:	2500      	movs	r5, #0
 8007678:	42a5      	cmp	r5, r4
 800767a:	d109      	bne.n	8007690 <__libc_init_array+0x24>
 800767c:	4e0b      	ldr	r6, [pc, #44]	; (80076ac <__libc_init_array+0x40>)
 800767e:	4c0c      	ldr	r4, [pc, #48]	; (80076b0 <__libc_init_array+0x44>)
 8007680:	f000 ff68 	bl	8008554 <_init>
 8007684:	1ba4      	subs	r4, r4, r6
 8007686:	10a4      	asrs	r4, r4, #2
 8007688:	2500      	movs	r5, #0
 800768a:	42a5      	cmp	r5, r4
 800768c:	d105      	bne.n	800769a <__libc_init_array+0x2e>
 800768e:	bd70      	pop	{r4, r5, r6, pc}
 8007690:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007694:	4798      	blx	r3
 8007696:	3501      	adds	r5, #1
 8007698:	e7ee      	b.n	8007678 <__libc_init_array+0xc>
 800769a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800769e:	4798      	blx	r3
 80076a0:	3501      	adds	r5, #1
 80076a2:	e7f2      	b.n	800768a <__libc_init_array+0x1e>
 80076a4:	080087b4 	.word	0x080087b4
 80076a8:	080087b4 	.word	0x080087b4
 80076ac:	080087b4 	.word	0x080087b4
 80076b0:	080087b8 	.word	0x080087b8

080076b4 <memset>:
 80076b4:	4402      	add	r2, r0
 80076b6:	4603      	mov	r3, r0
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d100      	bne.n	80076be <memset+0xa>
 80076bc:	4770      	bx	lr
 80076be:	f803 1b01 	strb.w	r1, [r3], #1
 80076c2:	e7f9      	b.n	80076b8 <memset+0x4>

080076c4 <_free_r>:
 80076c4:	b538      	push	{r3, r4, r5, lr}
 80076c6:	4605      	mov	r5, r0
 80076c8:	2900      	cmp	r1, #0
 80076ca:	d045      	beq.n	8007758 <_free_r+0x94>
 80076cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076d0:	1f0c      	subs	r4, r1, #4
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	bfb8      	it	lt
 80076d6:	18e4      	addlt	r4, r4, r3
 80076d8:	f000 fc3e 	bl	8007f58 <__malloc_lock>
 80076dc:	4a1f      	ldr	r2, [pc, #124]	; (800775c <_free_r+0x98>)
 80076de:	6813      	ldr	r3, [r2, #0]
 80076e0:	4610      	mov	r0, r2
 80076e2:	b933      	cbnz	r3, 80076f2 <_free_r+0x2e>
 80076e4:	6063      	str	r3, [r4, #4]
 80076e6:	6014      	str	r4, [r2, #0]
 80076e8:	4628      	mov	r0, r5
 80076ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076ee:	f000 bc34 	b.w	8007f5a <__malloc_unlock>
 80076f2:	42a3      	cmp	r3, r4
 80076f4:	d90c      	bls.n	8007710 <_free_r+0x4c>
 80076f6:	6821      	ldr	r1, [r4, #0]
 80076f8:	1862      	adds	r2, r4, r1
 80076fa:	4293      	cmp	r3, r2
 80076fc:	bf04      	itt	eq
 80076fe:	681a      	ldreq	r2, [r3, #0]
 8007700:	685b      	ldreq	r3, [r3, #4]
 8007702:	6063      	str	r3, [r4, #4]
 8007704:	bf04      	itt	eq
 8007706:	1852      	addeq	r2, r2, r1
 8007708:	6022      	streq	r2, [r4, #0]
 800770a:	6004      	str	r4, [r0, #0]
 800770c:	e7ec      	b.n	80076e8 <_free_r+0x24>
 800770e:	4613      	mov	r3, r2
 8007710:	685a      	ldr	r2, [r3, #4]
 8007712:	b10a      	cbz	r2, 8007718 <_free_r+0x54>
 8007714:	42a2      	cmp	r2, r4
 8007716:	d9fa      	bls.n	800770e <_free_r+0x4a>
 8007718:	6819      	ldr	r1, [r3, #0]
 800771a:	1858      	adds	r0, r3, r1
 800771c:	42a0      	cmp	r0, r4
 800771e:	d10b      	bne.n	8007738 <_free_r+0x74>
 8007720:	6820      	ldr	r0, [r4, #0]
 8007722:	4401      	add	r1, r0
 8007724:	1858      	adds	r0, r3, r1
 8007726:	4282      	cmp	r2, r0
 8007728:	6019      	str	r1, [r3, #0]
 800772a:	d1dd      	bne.n	80076e8 <_free_r+0x24>
 800772c:	6810      	ldr	r0, [r2, #0]
 800772e:	6852      	ldr	r2, [r2, #4]
 8007730:	605a      	str	r2, [r3, #4]
 8007732:	4401      	add	r1, r0
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	e7d7      	b.n	80076e8 <_free_r+0x24>
 8007738:	d902      	bls.n	8007740 <_free_r+0x7c>
 800773a:	230c      	movs	r3, #12
 800773c:	602b      	str	r3, [r5, #0]
 800773e:	e7d3      	b.n	80076e8 <_free_r+0x24>
 8007740:	6820      	ldr	r0, [r4, #0]
 8007742:	1821      	adds	r1, r4, r0
 8007744:	428a      	cmp	r2, r1
 8007746:	bf04      	itt	eq
 8007748:	6811      	ldreq	r1, [r2, #0]
 800774a:	6852      	ldreq	r2, [r2, #4]
 800774c:	6062      	str	r2, [r4, #4]
 800774e:	bf04      	itt	eq
 8007750:	1809      	addeq	r1, r1, r0
 8007752:	6021      	streq	r1, [r4, #0]
 8007754:	605c      	str	r4, [r3, #4]
 8007756:	e7c7      	b.n	80076e8 <_free_r+0x24>
 8007758:	bd38      	pop	{r3, r4, r5, pc}
 800775a:	bf00      	nop
 800775c:	200086c0 	.word	0x200086c0

08007760 <_malloc_r>:
 8007760:	b570      	push	{r4, r5, r6, lr}
 8007762:	1ccd      	adds	r5, r1, #3
 8007764:	f025 0503 	bic.w	r5, r5, #3
 8007768:	3508      	adds	r5, #8
 800776a:	2d0c      	cmp	r5, #12
 800776c:	bf38      	it	cc
 800776e:	250c      	movcc	r5, #12
 8007770:	2d00      	cmp	r5, #0
 8007772:	4606      	mov	r6, r0
 8007774:	db01      	blt.n	800777a <_malloc_r+0x1a>
 8007776:	42a9      	cmp	r1, r5
 8007778:	d903      	bls.n	8007782 <_malloc_r+0x22>
 800777a:	230c      	movs	r3, #12
 800777c:	6033      	str	r3, [r6, #0]
 800777e:	2000      	movs	r0, #0
 8007780:	bd70      	pop	{r4, r5, r6, pc}
 8007782:	f000 fbe9 	bl	8007f58 <__malloc_lock>
 8007786:	4a21      	ldr	r2, [pc, #132]	; (800780c <_malloc_r+0xac>)
 8007788:	6814      	ldr	r4, [r2, #0]
 800778a:	4621      	mov	r1, r4
 800778c:	b991      	cbnz	r1, 80077b4 <_malloc_r+0x54>
 800778e:	4c20      	ldr	r4, [pc, #128]	; (8007810 <_malloc_r+0xb0>)
 8007790:	6823      	ldr	r3, [r4, #0]
 8007792:	b91b      	cbnz	r3, 800779c <_malloc_r+0x3c>
 8007794:	4630      	mov	r0, r6
 8007796:	f000 f8b9 	bl	800790c <_sbrk_r>
 800779a:	6020      	str	r0, [r4, #0]
 800779c:	4629      	mov	r1, r5
 800779e:	4630      	mov	r0, r6
 80077a0:	f000 f8b4 	bl	800790c <_sbrk_r>
 80077a4:	1c43      	adds	r3, r0, #1
 80077a6:	d124      	bne.n	80077f2 <_malloc_r+0x92>
 80077a8:	230c      	movs	r3, #12
 80077aa:	6033      	str	r3, [r6, #0]
 80077ac:	4630      	mov	r0, r6
 80077ae:	f000 fbd4 	bl	8007f5a <__malloc_unlock>
 80077b2:	e7e4      	b.n	800777e <_malloc_r+0x1e>
 80077b4:	680b      	ldr	r3, [r1, #0]
 80077b6:	1b5b      	subs	r3, r3, r5
 80077b8:	d418      	bmi.n	80077ec <_malloc_r+0x8c>
 80077ba:	2b0b      	cmp	r3, #11
 80077bc:	d90f      	bls.n	80077de <_malloc_r+0x7e>
 80077be:	600b      	str	r3, [r1, #0]
 80077c0:	50cd      	str	r5, [r1, r3]
 80077c2:	18cc      	adds	r4, r1, r3
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 fbc8 	bl	8007f5a <__malloc_unlock>
 80077ca:	f104 000b 	add.w	r0, r4, #11
 80077ce:	1d23      	adds	r3, r4, #4
 80077d0:	f020 0007 	bic.w	r0, r0, #7
 80077d4:	1ac3      	subs	r3, r0, r3
 80077d6:	d0d3      	beq.n	8007780 <_malloc_r+0x20>
 80077d8:	425a      	negs	r2, r3
 80077da:	50e2      	str	r2, [r4, r3]
 80077dc:	e7d0      	b.n	8007780 <_malloc_r+0x20>
 80077de:	428c      	cmp	r4, r1
 80077e0:	684b      	ldr	r3, [r1, #4]
 80077e2:	bf16      	itet	ne
 80077e4:	6063      	strne	r3, [r4, #4]
 80077e6:	6013      	streq	r3, [r2, #0]
 80077e8:	460c      	movne	r4, r1
 80077ea:	e7eb      	b.n	80077c4 <_malloc_r+0x64>
 80077ec:	460c      	mov	r4, r1
 80077ee:	6849      	ldr	r1, [r1, #4]
 80077f0:	e7cc      	b.n	800778c <_malloc_r+0x2c>
 80077f2:	1cc4      	adds	r4, r0, #3
 80077f4:	f024 0403 	bic.w	r4, r4, #3
 80077f8:	42a0      	cmp	r0, r4
 80077fa:	d005      	beq.n	8007808 <_malloc_r+0xa8>
 80077fc:	1a21      	subs	r1, r4, r0
 80077fe:	4630      	mov	r0, r6
 8007800:	f000 f884 	bl	800790c <_sbrk_r>
 8007804:	3001      	adds	r0, #1
 8007806:	d0cf      	beq.n	80077a8 <_malloc_r+0x48>
 8007808:	6025      	str	r5, [r4, #0]
 800780a:	e7db      	b.n	80077c4 <_malloc_r+0x64>
 800780c:	200086c0 	.word	0x200086c0
 8007810:	200086c4 	.word	0x200086c4

08007814 <iprintf>:
 8007814:	b40f      	push	{r0, r1, r2, r3}
 8007816:	4b0a      	ldr	r3, [pc, #40]	; (8007840 <iprintf+0x2c>)
 8007818:	b513      	push	{r0, r1, r4, lr}
 800781a:	681c      	ldr	r4, [r3, #0]
 800781c:	b124      	cbz	r4, 8007828 <iprintf+0x14>
 800781e:	69a3      	ldr	r3, [r4, #24]
 8007820:	b913      	cbnz	r3, 8007828 <iprintf+0x14>
 8007822:	4620      	mov	r0, r4
 8007824:	f000 fa98 	bl	8007d58 <__sinit>
 8007828:	ab05      	add	r3, sp, #20
 800782a:	9a04      	ldr	r2, [sp, #16]
 800782c:	68a1      	ldr	r1, [r4, #8]
 800782e:	9301      	str	r3, [sp, #4]
 8007830:	4620      	mov	r0, r4
 8007832:	f000 fbbd 	bl	8007fb0 <_vfiprintf_r>
 8007836:	b002      	add	sp, #8
 8007838:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800783c:	b004      	add	sp, #16
 800783e:	4770      	bx	lr
 8007840:	20000064 	.word	0x20000064

08007844 <_puts_r>:
 8007844:	b570      	push	{r4, r5, r6, lr}
 8007846:	460e      	mov	r6, r1
 8007848:	4605      	mov	r5, r0
 800784a:	b118      	cbz	r0, 8007854 <_puts_r+0x10>
 800784c:	6983      	ldr	r3, [r0, #24]
 800784e:	b90b      	cbnz	r3, 8007854 <_puts_r+0x10>
 8007850:	f000 fa82 	bl	8007d58 <__sinit>
 8007854:	69ab      	ldr	r3, [r5, #24]
 8007856:	68ac      	ldr	r4, [r5, #8]
 8007858:	b913      	cbnz	r3, 8007860 <_puts_r+0x1c>
 800785a:	4628      	mov	r0, r5
 800785c:	f000 fa7c 	bl	8007d58 <__sinit>
 8007860:	4b23      	ldr	r3, [pc, #140]	; (80078f0 <_puts_r+0xac>)
 8007862:	429c      	cmp	r4, r3
 8007864:	d117      	bne.n	8007896 <_puts_r+0x52>
 8007866:	686c      	ldr	r4, [r5, #4]
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	071b      	lsls	r3, r3, #28
 800786c:	d51d      	bpl.n	80078aa <_puts_r+0x66>
 800786e:	6923      	ldr	r3, [r4, #16]
 8007870:	b1db      	cbz	r3, 80078aa <_puts_r+0x66>
 8007872:	3e01      	subs	r6, #1
 8007874:	68a3      	ldr	r3, [r4, #8]
 8007876:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800787a:	3b01      	subs	r3, #1
 800787c:	60a3      	str	r3, [r4, #8]
 800787e:	b9e9      	cbnz	r1, 80078bc <_puts_r+0x78>
 8007880:	2b00      	cmp	r3, #0
 8007882:	da2e      	bge.n	80078e2 <_puts_r+0x9e>
 8007884:	4622      	mov	r2, r4
 8007886:	210a      	movs	r1, #10
 8007888:	4628      	mov	r0, r5
 800788a:	f000 f893 	bl	80079b4 <__swbuf_r>
 800788e:	3001      	adds	r0, #1
 8007890:	d011      	beq.n	80078b6 <_puts_r+0x72>
 8007892:	200a      	movs	r0, #10
 8007894:	e011      	b.n	80078ba <_puts_r+0x76>
 8007896:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <_puts_r+0xb0>)
 8007898:	429c      	cmp	r4, r3
 800789a:	d101      	bne.n	80078a0 <_puts_r+0x5c>
 800789c:	68ac      	ldr	r4, [r5, #8]
 800789e:	e7e3      	b.n	8007868 <_puts_r+0x24>
 80078a0:	4b15      	ldr	r3, [pc, #84]	; (80078f8 <_puts_r+0xb4>)
 80078a2:	429c      	cmp	r4, r3
 80078a4:	bf08      	it	eq
 80078a6:	68ec      	ldreq	r4, [r5, #12]
 80078a8:	e7de      	b.n	8007868 <_puts_r+0x24>
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 f8e5 	bl	8007a7c <__swsetup_r>
 80078b2:	2800      	cmp	r0, #0
 80078b4:	d0dd      	beq.n	8007872 <_puts_r+0x2e>
 80078b6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ba:	bd70      	pop	{r4, r5, r6, pc}
 80078bc:	2b00      	cmp	r3, #0
 80078be:	da04      	bge.n	80078ca <_puts_r+0x86>
 80078c0:	69a2      	ldr	r2, [r4, #24]
 80078c2:	429a      	cmp	r2, r3
 80078c4:	dc06      	bgt.n	80078d4 <_puts_r+0x90>
 80078c6:	290a      	cmp	r1, #10
 80078c8:	d004      	beq.n	80078d4 <_puts_r+0x90>
 80078ca:	6823      	ldr	r3, [r4, #0]
 80078cc:	1c5a      	adds	r2, r3, #1
 80078ce:	6022      	str	r2, [r4, #0]
 80078d0:	7019      	strb	r1, [r3, #0]
 80078d2:	e7cf      	b.n	8007874 <_puts_r+0x30>
 80078d4:	4622      	mov	r2, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	f000 f86c 	bl	80079b4 <__swbuf_r>
 80078dc:	3001      	adds	r0, #1
 80078de:	d1c9      	bne.n	8007874 <_puts_r+0x30>
 80078e0:	e7e9      	b.n	80078b6 <_puts_r+0x72>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	200a      	movs	r0, #10
 80078e6:	1c5a      	adds	r2, r3, #1
 80078e8:	6022      	str	r2, [r4, #0]
 80078ea:	7018      	strb	r0, [r3, #0]
 80078ec:	e7e5      	b.n	80078ba <_puts_r+0x76>
 80078ee:	bf00      	nop
 80078f0:	08008738 	.word	0x08008738
 80078f4:	08008758 	.word	0x08008758
 80078f8:	08008718 	.word	0x08008718

080078fc <puts>:
 80078fc:	4b02      	ldr	r3, [pc, #8]	; (8007908 <puts+0xc>)
 80078fe:	4601      	mov	r1, r0
 8007900:	6818      	ldr	r0, [r3, #0]
 8007902:	f7ff bf9f 	b.w	8007844 <_puts_r>
 8007906:	bf00      	nop
 8007908:	20000064 	.word	0x20000064

0800790c <_sbrk_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4c06      	ldr	r4, [pc, #24]	; (8007928 <_sbrk_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4605      	mov	r5, r0
 8007914:	4608      	mov	r0, r1
 8007916:	6023      	str	r3, [r4, #0]
 8007918:	f7f9 f990 	bl	8000c3c <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_sbrk_r+0x1a>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	b103      	cbz	r3, 8007926 <_sbrk_r+0x1a>
 8007924:	602b      	str	r3, [r5, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	20008b88 	.word	0x20008b88

0800792c <__sread>:
 800792c:	b510      	push	{r4, lr}
 800792e:	460c      	mov	r4, r1
 8007930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007934:	f000 fdda 	bl	80084ec <_read_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	bfab      	itete	ge
 800793c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800793e:	89a3      	ldrhlt	r3, [r4, #12]
 8007940:	181b      	addge	r3, r3, r0
 8007942:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007946:	bfac      	ite	ge
 8007948:	6563      	strge	r3, [r4, #84]	; 0x54
 800794a:	81a3      	strhlt	r3, [r4, #12]
 800794c:	bd10      	pop	{r4, pc}

0800794e <__swrite>:
 800794e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007952:	461f      	mov	r7, r3
 8007954:	898b      	ldrh	r3, [r1, #12]
 8007956:	05db      	lsls	r3, r3, #23
 8007958:	4605      	mov	r5, r0
 800795a:	460c      	mov	r4, r1
 800795c:	4616      	mov	r6, r2
 800795e:	d505      	bpl.n	800796c <__swrite+0x1e>
 8007960:	2302      	movs	r3, #2
 8007962:	2200      	movs	r2, #0
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	f000 fa80 	bl	8007e6c <_lseek_r>
 800796c:	89a3      	ldrh	r3, [r4, #12]
 800796e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007972:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007976:	81a3      	strh	r3, [r4, #12]
 8007978:	4632      	mov	r2, r6
 800797a:	463b      	mov	r3, r7
 800797c:	4628      	mov	r0, r5
 800797e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007982:	f000 b869 	b.w	8007a58 <_write_r>

08007986 <__sseek>:
 8007986:	b510      	push	{r4, lr}
 8007988:	460c      	mov	r4, r1
 800798a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800798e:	f000 fa6d 	bl	8007e6c <_lseek_r>
 8007992:	1c43      	adds	r3, r0, #1
 8007994:	89a3      	ldrh	r3, [r4, #12]
 8007996:	bf15      	itete	ne
 8007998:	6560      	strne	r0, [r4, #84]	; 0x54
 800799a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800799e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079a2:	81a3      	strheq	r3, [r4, #12]
 80079a4:	bf18      	it	ne
 80079a6:	81a3      	strhne	r3, [r4, #12]
 80079a8:	bd10      	pop	{r4, pc}

080079aa <__sclose>:
 80079aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ae:	f000 b8d3 	b.w	8007b58 <_close_r>
	...

080079b4 <__swbuf_r>:
 80079b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	4614      	mov	r4, r2
 80079ba:	4605      	mov	r5, r0
 80079bc:	b118      	cbz	r0, 80079c6 <__swbuf_r+0x12>
 80079be:	6983      	ldr	r3, [r0, #24]
 80079c0:	b90b      	cbnz	r3, 80079c6 <__swbuf_r+0x12>
 80079c2:	f000 f9c9 	bl	8007d58 <__sinit>
 80079c6:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <__swbuf_r+0x98>)
 80079c8:	429c      	cmp	r4, r3
 80079ca:	d12a      	bne.n	8007a22 <__swbuf_r+0x6e>
 80079cc:	686c      	ldr	r4, [r5, #4]
 80079ce:	69a3      	ldr	r3, [r4, #24]
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	89a3      	ldrh	r3, [r4, #12]
 80079d4:	071a      	lsls	r2, r3, #28
 80079d6:	d52e      	bpl.n	8007a36 <__swbuf_r+0x82>
 80079d8:	6923      	ldr	r3, [r4, #16]
 80079da:	b363      	cbz	r3, 8007a36 <__swbuf_r+0x82>
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	6820      	ldr	r0, [r4, #0]
 80079e0:	1ac0      	subs	r0, r0, r3
 80079e2:	6963      	ldr	r3, [r4, #20]
 80079e4:	b2f6      	uxtb	r6, r6
 80079e6:	4283      	cmp	r3, r0
 80079e8:	4637      	mov	r7, r6
 80079ea:	dc04      	bgt.n	80079f6 <__swbuf_r+0x42>
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f948 	bl	8007c84 <_fflush_r>
 80079f4:	bb28      	cbnz	r0, 8007a42 <__swbuf_r+0x8e>
 80079f6:	68a3      	ldr	r3, [r4, #8]
 80079f8:	3b01      	subs	r3, #1
 80079fa:	60a3      	str	r3, [r4, #8]
 80079fc:	6823      	ldr	r3, [r4, #0]
 80079fe:	1c5a      	adds	r2, r3, #1
 8007a00:	6022      	str	r2, [r4, #0]
 8007a02:	701e      	strb	r6, [r3, #0]
 8007a04:	6963      	ldr	r3, [r4, #20]
 8007a06:	3001      	adds	r0, #1
 8007a08:	4283      	cmp	r3, r0
 8007a0a:	d004      	beq.n	8007a16 <__swbuf_r+0x62>
 8007a0c:	89a3      	ldrh	r3, [r4, #12]
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d519      	bpl.n	8007a46 <__swbuf_r+0x92>
 8007a12:	2e0a      	cmp	r6, #10
 8007a14:	d117      	bne.n	8007a46 <__swbuf_r+0x92>
 8007a16:	4621      	mov	r1, r4
 8007a18:	4628      	mov	r0, r5
 8007a1a:	f000 f933 	bl	8007c84 <_fflush_r>
 8007a1e:	b190      	cbz	r0, 8007a46 <__swbuf_r+0x92>
 8007a20:	e00f      	b.n	8007a42 <__swbuf_r+0x8e>
 8007a22:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <__swbuf_r+0x9c>)
 8007a24:	429c      	cmp	r4, r3
 8007a26:	d101      	bne.n	8007a2c <__swbuf_r+0x78>
 8007a28:	68ac      	ldr	r4, [r5, #8]
 8007a2a:	e7d0      	b.n	80079ce <__swbuf_r+0x1a>
 8007a2c:	4b09      	ldr	r3, [pc, #36]	; (8007a54 <__swbuf_r+0xa0>)
 8007a2e:	429c      	cmp	r4, r3
 8007a30:	bf08      	it	eq
 8007a32:	68ec      	ldreq	r4, [r5, #12]
 8007a34:	e7cb      	b.n	80079ce <__swbuf_r+0x1a>
 8007a36:	4621      	mov	r1, r4
 8007a38:	4628      	mov	r0, r5
 8007a3a:	f000 f81f 	bl	8007a7c <__swsetup_r>
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d0cc      	beq.n	80079dc <__swbuf_r+0x28>
 8007a42:	f04f 37ff 	mov.w	r7, #4294967295
 8007a46:	4638      	mov	r0, r7
 8007a48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a4a:	bf00      	nop
 8007a4c:	08008738 	.word	0x08008738
 8007a50:	08008758 	.word	0x08008758
 8007a54:	08008718 	.word	0x08008718

08007a58 <_write_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4c07      	ldr	r4, [pc, #28]	; (8007a78 <_write_r+0x20>)
 8007a5c:	4605      	mov	r5, r0
 8007a5e:	4608      	mov	r0, r1
 8007a60:	4611      	mov	r1, r2
 8007a62:	2200      	movs	r2, #0
 8007a64:	6022      	str	r2, [r4, #0]
 8007a66:	461a      	mov	r2, r3
 8007a68:	f7f8 feb9 	bl	80007de <_write>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d102      	bne.n	8007a76 <_write_r+0x1e>
 8007a70:	6823      	ldr	r3, [r4, #0]
 8007a72:	b103      	cbz	r3, 8007a76 <_write_r+0x1e>
 8007a74:	602b      	str	r3, [r5, #0]
 8007a76:	bd38      	pop	{r3, r4, r5, pc}
 8007a78:	20008b88 	.word	0x20008b88

08007a7c <__swsetup_r>:
 8007a7c:	4b32      	ldr	r3, [pc, #200]	; (8007b48 <__swsetup_r+0xcc>)
 8007a7e:	b570      	push	{r4, r5, r6, lr}
 8007a80:	681d      	ldr	r5, [r3, #0]
 8007a82:	4606      	mov	r6, r0
 8007a84:	460c      	mov	r4, r1
 8007a86:	b125      	cbz	r5, 8007a92 <__swsetup_r+0x16>
 8007a88:	69ab      	ldr	r3, [r5, #24]
 8007a8a:	b913      	cbnz	r3, 8007a92 <__swsetup_r+0x16>
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	f000 f963 	bl	8007d58 <__sinit>
 8007a92:	4b2e      	ldr	r3, [pc, #184]	; (8007b4c <__swsetup_r+0xd0>)
 8007a94:	429c      	cmp	r4, r3
 8007a96:	d10f      	bne.n	8007ab8 <__swsetup_r+0x3c>
 8007a98:	686c      	ldr	r4, [r5, #4]
 8007a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a9e:	b29a      	uxth	r2, r3
 8007aa0:	0715      	lsls	r5, r2, #28
 8007aa2:	d42c      	bmi.n	8007afe <__swsetup_r+0x82>
 8007aa4:	06d0      	lsls	r0, r2, #27
 8007aa6:	d411      	bmi.n	8007acc <__swsetup_r+0x50>
 8007aa8:	2209      	movs	r2, #9
 8007aaa:	6032      	str	r2, [r6, #0]
 8007aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ab0:	81a3      	strh	r3, [r4, #12]
 8007ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ab6:	e03e      	b.n	8007b36 <__swsetup_r+0xba>
 8007ab8:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <__swsetup_r+0xd4>)
 8007aba:	429c      	cmp	r4, r3
 8007abc:	d101      	bne.n	8007ac2 <__swsetup_r+0x46>
 8007abe:	68ac      	ldr	r4, [r5, #8]
 8007ac0:	e7eb      	b.n	8007a9a <__swsetup_r+0x1e>
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <__swsetup_r+0xd8>)
 8007ac4:	429c      	cmp	r4, r3
 8007ac6:	bf08      	it	eq
 8007ac8:	68ec      	ldreq	r4, [r5, #12]
 8007aca:	e7e6      	b.n	8007a9a <__swsetup_r+0x1e>
 8007acc:	0751      	lsls	r1, r2, #29
 8007ace:	d512      	bpl.n	8007af6 <__swsetup_r+0x7a>
 8007ad0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007ad2:	b141      	cbz	r1, 8007ae6 <__swsetup_r+0x6a>
 8007ad4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ad8:	4299      	cmp	r1, r3
 8007ada:	d002      	beq.n	8007ae2 <__swsetup_r+0x66>
 8007adc:	4630      	mov	r0, r6
 8007ade:	f7ff fdf1 	bl	80076c4 <_free_r>
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6363      	str	r3, [r4, #52]	; 0x34
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	2300      	movs	r3, #0
 8007af0:	6063      	str	r3, [r4, #4]
 8007af2:	6923      	ldr	r3, [r4, #16]
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	89a3      	ldrh	r3, [r4, #12]
 8007af8:	f043 0308 	orr.w	r3, r3, #8
 8007afc:	81a3      	strh	r3, [r4, #12]
 8007afe:	6923      	ldr	r3, [r4, #16]
 8007b00:	b94b      	cbnz	r3, 8007b16 <__swsetup_r+0x9a>
 8007b02:	89a3      	ldrh	r3, [r4, #12]
 8007b04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007b08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b0c:	d003      	beq.n	8007b16 <__swsetup_r+0x9a>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4630      	mov	r0, r6
 8007b12:	f000 f9e1 	bl	8007ed8 <__smakebuf_r>
 8007b16:	89a2      	ldrh	r2, [r4, #12]
 8007b18:	f012 0301 	ands.w	r3, r2, #1
 8007b1c:	d00c      	beq.n	8007b38 <__swsetup_r+0xbc>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	60a3      	str	r3, [r4, #8]
 8007b22:	6963      	ldr	r3, [r4, #20]
 8007b24:	425b      	negs	r3, r3
 8007b26:	61a3      	str	r3, [r4, #24]
 8007b28:	6923      	ldr	r3, [r4, #16]
 8007b2a:	b953      	cbnz	r3, 8007b42 <__swsetup_r+0xc6>
 8007b2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b30:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007b34:	d1ba      	bne.n	8007aac <__swsetup_r+0x30>
 8007b36:	bd70      	pop	{r4, r5, r6, pc}
 8007b38:	0792      	lsls	r2, r2, #30
 8007b3a:	bf58      	it	pl
 8007b3c:	6963      	ldrpl	r3, [r4, #20]
 8007b3e:	60a3      	str	r3, [r4, #8]
 8007b40:	e7f2      	b.n	8007b28 <__swsetup_r+0xac>
 8007b42:	2000      	movs	r0, #0
 8007b44:	e7f7      	b.n	8007b36 <__swsetup_r+0xba>
 8007b46:	bf00      	nop
 8007b48:	20000064 	.word	0x20000064
 8007b4c:	08008738 	.word	0x08008738
 8007b50:	08008758 	.word	0x08008758
 8007b54:	08008718 	.word	0x08008718

08007b58 <_close_r>:
 8007b58:	b538      	push	{r3, r4, r5, lr}
 8007b5a:	4c06      	ldr	r4, [pc, #24]	; (8007b74 <_close_r+0x1c>)
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	4605      	mov	r5, r0
 8007b60:	4608      	mov	r0, r1
 8007b62:	6023      	str	r3, [r4, #0]
 8007b64:	f7f9 f835 	bl	8000bd2 <_close>
 8007b68:	1c43      	adds	r3, r0, #1
 8007b6a:	d102      	bne.n	8007b72 <_close_r+0x1a>
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	b103      	cbz	r3, 8007b72 <_close_r+0x1a>
 8007b70:	602b      	str	r3, [r5, #0]
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	20008b88 	.word	0x20008b88

08007b78 <__sflush_r>:
 8007b78:	898a      	ldrh	r2, [r1, #12]
 8007b7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b7e:	4605      	mov	r5, r0
 8007b80:	0710      	lsls	r0, r2, #28
 8007b82:	460c      	mov	r4, r1
 8007b84:	d458      	bmi.n	8007c38 <__sflush_r+0xc0>
 8007b86:	684b      	ldr	r3, [r1, #4]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	dc05      	bgt.n	8007b98 <__sflush_r+0x20>
 8007b8c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	dc02      	bgt.n	8007b98 <__sflush_r+0x20>
 8007b92:	2000      	movs	r0, #0
 8007b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b9a:	2e00      	cmp	r6, #0
 8007b9c:	d0f9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007ba4:	682f      	ldr	r7, [r5, #0]
 8007ba6:	6a21      	ldr	r1, [r4, #32]
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	d032      	beq.n	8007c12 <__sflush_r+0x9a>
 8007bac:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007bae:	89a3      	ldrh	r3, [r4, #12]
 8007bb0:	075a      	lsls	r2, r3, #29
 8007bb2:	d505      	bpl.n	8007bc0 <__sflush_r+0x48>
 8007bb4:	6863      	ldr	r3, [r4, #4]
 8007bb6:	1ac0      	subs	r0, r0, r3
 8007bb8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007bba:	b10b      	cbz	r3, 8007bc0 <__sflush_r+0x48>
 8007bbc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007bbe:	1ac0      	subs	r0, r0, r3
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007bc6:	6a21      	ldr	r1, [r4, #32]
 8007bc8:	4628      	mov	r0, r5
 8007bca:	47b0      	blx	r6
 8007bcc:	1c43      	adds	r3, r0, #1
 8007bce:	89a3      	ldrh	r3, [r4, #12]
 8007bd0:	d106      	bne.n	8007be0 <__sflush_r+0x68>
 8007bd2:	6829      	ldr	r1, [r5, #0]
 8007bd4:	291d      	cmp	r1, #29
 8007bd6:	d848      	bhi.n	8007c6a <__sflush_r+0xf2>
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <__sflush_r+0x108>)
 8007bda:	40ca      	lsrs	r2, r1
 8007bdc:	07d6      	lsls	r6, r2, #31
 8007bde:	d544      	bpl.n	8007c6a <__sflush_r+0xf2>
 8007be0:	2200      	movs	r2, #0
 8007be2:	6062      	str	r2, [r4, #4]
 8007be4:	04d9      	lsls	r1, r3, #19
 8007be6:	6922      	ldr	r2, [r4, #16]
 8007be8:	6022      	str	r2, [r4, #0]
 8007bea:	d504      	bpl.n	8007bf6 <__sflush_r+0x7e>
 8007bec:	1c42      	adds	r2, r0, #1
 8007bee:	d101      	bne.n	8007bf4 <__sflush_r+0x7c>
 8007bf0:	682b      	ldr	r3, [r5, #0]
 8007bf2:	b903      	cbnz	r3, 8007bf6 <__sflush_r+0x7e>
 8007bf4:	6560      	str	r0, [r4, #84]	; 0x54
 8007bf6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007bf8:	602f      	str	r7, [r5, #0]
 8007bfa:	2900      	cmp	r1, #0
 8007bfc:	d0c9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007bfe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007c02:	4299      	cmp	r1, r3
 8007c04:	d002      	beq.n	8007c0c <__sflush_r+0x94>
 8007c06:	4628      	mov	r0, r5
 8007c08:	f7ff fd5c 	bl	80076c4 <_free_r>
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	6360      	str	r0, [r4, #52]	; 0x34
 8007c10:	e7c0      	b.n	8007b94 <__sflush_r+0x1c>
 8007c12:	2301      	movs	r3, #1
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b0      	blx	r6
 8007c18:	1c41      	adds	r1, r0, #1
 8007c1a:	d1c8      	bne.n	8007bae <__sflush_r+0x36>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0c5      	beq.n	8007bae <__sflush_r+0x36>
 8007c22:	2b1d      	cmp	r3, #29
 8007c24:	d001      	beq.n	8007c2a <__sflush_r+0xb2>
 8007c26:	2b16      	cmp	r3, #22
 8007c28:	d101      	bne.n	8007c2e <__sflush_r+0xb6>
 8007c2a:	602f      	str	r7, [r5, #0]
 8007c2c:	e7b1      	b.n	8007b92 <__sflush_r+0x1a>
 8007c2e:	89a3      	ldrh	r3, [r4, #12]
 8007c30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c34:	81a3      	strh	r3, [r4, #12]
 8007c36:	e7ad      	b.n	8007b94 <__sflush_r+0x1c>
 8007c38:	690f      	ldr	r7, [r1, #16]
 8007c3a:	2f00      	cmp	r7, #0
 8007c3c:	d0a9      	beq.n	8007b92 <__sflush_r+0x1a>
 8007c3e:	0793      	lsls	r3, r2, #30
 8007c40:	680e      	ldr	r6, [r1, #0]
 8007c42:	bf08      	it	eq
 8007c44:	694b      	ldreq	r3, [r1, #20]
 8007c46:	600f      	str	r7, [r1, #0]
 8007c48:	bf18      	it	ne
 8007c4a:	2300      	movne	r3, #0
 8007c4c:	eba6 0807 	sub.w	r8, r6, r7
 8007c50:	608b      	str	r3, [r1, #8]
 8007c52:	f1b8 0f00 	cmp.w	r8, #0
 8007c56:	dd9c      	ble.n	8007b92 <__sflush_r+0x1a>
 8007c58:	4643      	mov	r3, r8
 8007c5a:	463a      	mov	r2, r7
 8007c5c:	6a21      	ldr	r1, [r4, #32]
 8007c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b0      	blx	r6
 8007c64:	2800      	cmp	r0, #0
 8007c66:	dc06      	bgt.n	8007c76 <__sflush_r+0xfe>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	f04f 30ff 	mov.w	r0, #4294967295
 8007c74:	e78e      	b.n	8007b94 <__sflush_r+0x1c>
 8007c76:	4407      	add	r7, r0
 8007c78:	eba8 0800 	sub.w	r8, r8, r0
 8007c7c:	e7e9      	b.n	8007c52 <__sflush_r+0xda>
 8007c7e:	bf00      	nop
 8007c80:	20400001 	.word	0x20400001

08007c84 <_fflush_r>:
 8007c84:	b538      	push	{r3, r4, r5, lr}
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	460c      	mov	r4, r1
 8007c8c:	b1db      	cbz	r3, 8007cc6 <_fflush_r+0x42>
 8007c8e:	b118      	cbz	r0, 8007c98 <_fflush_r+0x14>
 8007c90:	6983      	ldr	r3, [r0, #24]
 8007c92:	b90b      	cbnz	r3, 8007c98 <_fflush_r+0x14>
 8007c94:	f000 f860 	bl	8007d58 <__sinit>
 8007c98:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <_fflush_r+0x48>)
 8007c9a:	429c      	cmp	r4, r3
 8007c9c:	d109      	bne.n	8007cb2 <_fflush_r+0x2e>
 8007c9e:	686c      	ldr	r4, [r5, #4]
 8007ca0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ca4:	b17b      	cbz	r3, 8007cc6 <_fflush_r+0x42>
 8007ca6:	4621      	mov	r1, r4
 8007ca8:	4628      	mov	r0, r5
 8007caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cae:	f7ff bf63 	b.w	8007b78 <__sflush_r>
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <_fflush_r+0x4c>)
 8007cb4:	429c      	cmp	r4, r3
 8007cb6:	d101      	bne.n	8007cbc <_fflush_r+0x38>
 8007cb8:	68ac      	ldr	r4, [r5, #8]
 8007cba:	e7f1      	b.n	8007ca0 <_fflush_r+0x1c>
 8007cbc:	4b05      	ldr	r3, [pc, #20]	; (8007cd4 <_fflush_r+0x50>)
 8007cbe:	429c      	cmp	r4, r3
 8007cc0:	bf08      	it	eq
 8007cc2:	68ec      	ldreq	r4, [r5, #12]
 8007cc4:	e7ec      	b.n	8007ca0 <_fflush_r+0x1c>
 8007cc6:	2000      	movs	r0, #0
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	08008738 	.word	0x08008738
 8007cd0:	08008758 	.word	0x08008758
 8007cd4:	08008718 	.word	0x08008718

08007cd8 <std>:
 8007cd8:	2300      	movs	r3, #0
 8007cda:	b510      	push	{r4, lr}
 8007cdc:	4604      	mov	r4, r0
 8007cde:	e9c0 3300 	strd	r3, r3, [r0]
 8007ce2:	6083      	str	r3, [r0, #8]
 8007ce4:	8181      	strh	r1, [r0, #12]
 8007ce6:	6643      	str	r3, [r0, #100]	; 0x64
 8007ce8:	81c2      	strh	r2, [r0, #14]
 8007cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007cee:	6183      	str	r3, [r0, #24]
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	2208      	movs	r2, #8
 8007cf4:	305c      	adds	r0, #92	; 0x5c
 8007cf6:	f7ff fcdd 	bl	80076b4 <memset>
 8007cfa:	4b05      	ldr	r3, [pc, #20]	; (8007d10 <std+0x38>)
 8007cfc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cfe:	4b05      	ldr	r3, [pc, #20]	; (8007d14 <std+0x3c>)
 8007d00:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d02:	4b05      	ldr	r3, [pc, #20]	; (8007d18 <std+0x40>)
 8007d04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <std+0x44>)
 8007d08:	6224      	str	r4, [r4, #32]
 8007d0a:	6323      	str	r3, [r4, #48]	; 0x30
 8007d0c:	bd10      	pop	{r4, pc}
 8007d0e:	bf00      	nop
 8007d10:	0800792d 	.word	0x0800792d
 8007d14:	0800794f 	.word	0x0800794f
 8007d18:	08007987 	.word	0x08007987
 8007d1c:	080079ab 	.word	0x080079ab

08007d20 <_cleanup_r>:
 8007d20:	4901      	ldr	r1, [pc, #4]	; (8007d28 <_cleanup_r+0x8>)
 8007d22:	f000 b885 	b.w	8007e30 <_fwalk_reent>
 8007d26:	bf00      	nop
 8007d28:	08007c85 	.word	0x08007c85

08007d2c <__sfmoreglue>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	1e4a      	subs	r2, r1, #1
 8007d30:	2568      	movs	r5, #104	; 0x68
 8007d32:	4355      	muls	r5, r2
 8007d34:	460e      	mov	r6, r1
 8007d36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007d3a:	f7ff fd11 	bl	8007760 <_malloc_r>
 8007d3e:	4604      	mov	r4, r0
 8007d40:	b140      	cbz	r0, 8007d54 <__sfmoreglue+0x28>
 8007d42:	2100      	movs	r1, #0
 8007d44:	e9c0 1600 	strd	r1, r6, [r0]
 8007d48:	300c      	adds	r0, #12
 8007d4a:	60a0      	str	r0, [r4, #8]
 8007d4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007d50:	f7ff fcb0 	bl	80076b4 <memset>
 8007d54:	4620      	mov	r0, r4
 8007d56:	bd70      	pop	{r4, r5, r6, pc}

08007d58 <__sinit>:
 8007d58:	6983      	ldr	r3, [r0, #24]
 8007d5a:	b510      	push	{r4, lr}
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	bb33      	cbnz	r3, 8007dae <__sinit+0x56>
 8007d60:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007d64:	6503      	str	r3, [r0, #80]	; 0x50
 8007d66:	4b12      	ldr	r3, [pc, #72]	; (8007db0 <__sinit+0x58>)
 8007d68:	4a12      	ldr	r2, [pc, #72]	; (8007db4 <__sinit+0x5c>)
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d6e:	4298      	cmp	r0, r3
 8007d70:	bf04      	itt	eq
 8007d72:	2301      	moveq	r3, #1
 8007d74:	6183      	streq	r3, [r0, #24]
 8007d76:	f000 f81f 	bl	8007db8 <__sfp>
 8007d7a:	6060      	str	r0, [r4, #4]
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	f000 f81b 	bl	8007db8 <__sfp>
 8007d82:	60a0      	str	r0, [r4, #8]
 8007d84:	4620      	mov	r0, r4
 8007d86:	f000 f817 	bl	8007db8 <__sfp>
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	60e0      	str	r0, [r4, #12]
 8007d8e:	2104      	movs	r1, #4
 8007d90:	6860      	ldr	r0, [r4, #4]
 8007d92:	f7ff ffa1 	bl	8007cd8 <std>
 8007d96:	2201      	movs	r2, #1
 8007d98:	2109      	movs	r1, #9
 8007d9a:	68a0      	ldr	r0, [r4, #8]
 8007d9c:	f7ff ff9c 	bl	8007cd8 <std>
 8007da0:	2202      	movs	r2, #2
 8007da2:	2112      	movs	r1, #18
 8007da4:	68e0      	ldr	r0, [r4, #12]
 8007da6:	f7ff ff97 	bl	8007cd8 <std>
 8007daa:	2301      	movs	r3, #1
 8007dac:	61a3      	str	r3, [r4, #24]
 8007dae:	bd10      	pop	{r4, pc}
 8007db0:	08008714 	.word	0x08008714
 8007db4:	08007d21 	.word	0x08007d21

08007db8 <__sfp>:
 8007db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dba:	4b1b      	ldr	r3, [pc, #108]	; (8007e28 <__sfp+0x70>)
 8007dbc:	681e      	ldr	r6, [r3, #0]
 8007dbe:	69b3      	ldr	r3, [r6, #24]
 8007dc0:	4607      	mov	r7, r0
 8007dc2:	b913      	cbnz	r3, 8007dca <__sfp+0x12>
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff ffc7 	bl	8007d58 <__sinit>
 8007dca:	3648      	adds	r6, #72	; 0x48
 8007dcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	d503      	bpl.n	8007ddc <__sfp+0x24>
 8007dd4:	6833      	ldr	r3, [r6, #0]
 8007dd6:	b133      	cbz	r3, 8007de6 <__sfp+0x2e>
 8007dd8:	6836      	ldr	r6, [r6, #0]
 8007dda:	e7f7      	b.n	8007dcc <__sfp+0x14>
 8007ddc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007de0:	b16d      	cbz	r5, 8007dfe <__sfp+0x46>
 8007de2:	3468      	adds	r4, #104	; 0x68
 8007de4:	e7f4      	b.n	8007dd0 <__sfp+0x18>
 8007de6:	2104      	movs	r1, #4
 8007de8:	4638      	mov	r0, r7
 8007dea:	f7ff ff9f 	bl	8007d2c <__sfmoreglue>
 8007dee:	6030      	str	r0, [r6, #0]
 8007df0:	2800      	cmp	r0, #0
 8007df2:	d1f1      	bne.n	8007dd8 <__sfp+0x20>
 8007df4:	230c      	movs	r3, #12
 8007df6:	603b      	str	r3, [r7, #0]
 8007df8:	4604      	mov	r4, r0
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfe:	4b0b      	ldr	r3, [pc, #44]	; (8007e2c <__sfp+0x74>)
 8007e00:	6665      	str	r5, [r4, #100]	; 0x64
 8007e02:	e9c4 5500 	strd	r5, r5, [r4]
 8007e06:	60a5      	str	r5, [r4, #8]
 8007e08:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007e0c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007e10:	2208      	movs	r2, #8
 8007e12:	4629      	mov	r1, r5
 8007e14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007e18:	f7ff fc4c 	bl	80076b4 <memset>
 8007e1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007e20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e24:	e7e9      	b.n	8007dfa <__sfp+0x42>
 8007e26:	bf00      	nop
 8007e28:	08008714 	.word	0x08008714
 8007e2c:	ffff0001 	.word	0xffff0001

08007e30 <_fwalk_reent>:
 8007e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e3c:	2600      	movs	r6, #0
 8007e3e:	b914      	cbnz	r4, 8007e46 <_fwalk_reent+0x16>
 8007e40:	4630      	mov	r0, r6
 8007e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e46:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007e4a:	3f01      	subs	r7, #1
 8007e4c:	d501      	bpl.n	8007e52 <_fwalk_reent+0x22>
 8007e4e:	6824      	ldr	r4, [r4, #0]
 8007e50:	e7f5      	b.n	8007e3e <_fwalk_reent+0xe>
 8007e52:	89ab      	ldrh	r3, [r5, #12]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d907      	bls.n	8007e68 <_fwalk_reent+0x38>
 8007e58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e5c:	3301      	adds	r3, #1
 8007e5e:	d003      	beq.n	8007e68 <_fwalk_reent+0x38>
 8007e60:	4629      	mov	r1, r5
 8007e62:	4640      	mov	r0, r8
 8007e64:	47c8      	blx	r9
 8007e66:	4306      	orrs	r6, r0
 8007e68:	3568      	adds	r5, #104	; 0x68
 8007e6a:	e7ee      	b.n	8007e4a <_fwalk_reent+0x1a>

08007e6c <_lseek_r>:
 8007e6c:	b538      	push	{r3, r4, r5, lr}
 8007e6e:	4c07      	ldr	r4, [pc, #28]	; (8007e8c <_lseek_r+0x20>)
 8007e70:	4605      	mov	r5, r0
 8007e72:	4608      	mov	r0, r1
 8007e74:	4611      	mov	r1, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	6022      	str	r2, [r4, #0]
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	f7f8 fed0 	bl	8000c20 <_lseek>
 8007e80:	1c43      	adds	r3, r0, #1
 8007e82:	d102      	bne.n	8007e8a <_lseek_r+0x1e>
 8007e84:	6823      	ldr	r3, [r4, #0]
 8007e86:	b103      	cbz	r3, 8007e8a <_lseek_r+0x1e>
 8007e88:	602b      	str	r3, [r5, #0]
 8007e8a:	bd38      	pop	{r3, r4, r5, pc}
 8007e8c:	20008b88 	.word	0x20008b88

08007e90 <__swhatbuf_r>:
 8007e90:	b570      	push	{r4, r5, r6, lr}
 8007e92:	460e      	mov	r6, r1
 8007e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	b096      	sub	sp, #88	; 0x58
 8007e9c:	4614      	mov	r4, r2
 8007e9e:	461d      	mov	r5, r3
 8007ea0:	da07      	bge.n	8007eb2 <__swhatbuf_r+0x22>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	602b      	str	r3, [r5, #0]
 8007ea6:	89b3      	ldrh	r3, [r6, #12]
 8007ea8:	061a      	lsls	r2, r3, #24
 8007eaa:	d410      	bmi.n	8007ece <__swhatbuf_r+0x3e>
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	e00e      	b.n	8007ed0 <__swhatbuf_r+0x40>
 8007eb2:	466a      	mov	r2, sp
 8007eb4:	f000 fb2c 	bl	8008510 <_fstat_r>
 8007eb8:	2800      	cmp	r0, #0
 8007eba:	dbf2      	blt.n	8007ea2 <__swhatbuf_r+0x12>
 8007ebc:	9a01      	ldr	r2, [sp, #4]
 8007ebe:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007ec2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007ec6:	425a      	negs	r2, r3
 8007ec8:	415a      	adcs	r2, r3
 8007eca:	602a      	str	r2, [r5, #0]
 8007ecc:	e7ee      	b.n	8007eac <__swhatbuf_r+0x1c>
 8007ece:	2340      	movs	r3, #64	; 0x40
 8007ed0:	2000      	movs	r0, #0
 8007ed2:	6023      	str	r3, [r4, #0]
 8007ed4:	b016      	add	sp, #88	; 0x58
 8007ed6:	bd70      	pop	{r4, r5, r6, pc}

08007ed8 <__smakebuf_r>:
 8007ed8:	898b      	ldrh	r3, [r1, #12]
 8007eda:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007edc:	079d      	lsls	r5, r3, #30
 8007ede:	4606      	mov	r6, r0
 8007ee0:	460c      	mov	r4, r1
 8007ee2:	d507      	bpl.n	8007ef4 <__smakebuf_r+0x1c>
 8007ee4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007ee8:	6023      	str	r3, [r4, #0]
 8007eea:	6123      	str	r3, [r4, #16]
 8007eec:	2301      	movs	r3, #1
 8007eee:	6163      	str	r3, [r4, #20]
 8007ef0:	b002      	add	sp, #8
 8007ef2:	bd70      	pop	{r4, r5, r6, pc}
 8007ef4:	ab01      	add	r3, sp, #4
 8007ef6:	466a      	mov	r2, sp
 8007ef8:	f7ff ffca 	bl	8007e90 <__swhatbuf_r>
 8007efc:	9900      	ldr	r1, [sp, #0]
 8007efe:	4605      	mov	r5, r0
 8007f00:	4630      	mov	r0, r6
 8007f02:	f7ff fc2d 	bl	8007760 <_malloc_r>
 8007f06:	b948      	cbnz	r0, 8007f1c <__smakebuf_r+0x44>
 8007f08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f0c:	059a      	lsls	r2, r3, #22
 8007f0e:	d4ef      	bmi.n	8007ef0 <__smakebuf_r+0x18>
 8007f10:	f023 0303 	bic.w	r3, r3, #3
 8007f14:	f043 0302 	orr.w	r3, r3, #2
 8007f18:	81a3      	strh	r3, [r4, #12]
 8007f1a:	e7e3      	b.n	8007ee4 <__smakebuf_r+0xc>
 8007f1c:	4b0d      	ldr	r3, [pc, #52]	; (8007f54 <__smakebuf_r+0x7c>)
 8007f1e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007f20:	89a3      	ldrh	r3, [r4, #12]
 8007f22:	6020      	str	r0, [r4, #0]
 8007f24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f28:	81a3      	strh	r3, [r4, #12]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	6163      	str	r3, [r4, #20]
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	6120      	str	r0, [r4, #16]
 8007f32:	b15b      	cbz	r3, 8007f4c <__smakebuf_r+0x74>
 8007f34:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f000 fafb 	bl	8008534 <_isatty_r>
 8007f3e:	b128      	cbz	r0, 8007f4c <__smakebuf_r+0x74>
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	f043 0301 	orr.w	r3, r3, #1
 8007f4a:	81a3      	strh	r3, [r4, #12]
 8007f4c:	89a3      	ldrh	r3, [r4, #12]
 8007f4e:	431d      	orrs	r5, r3
 8007f50:	81a5      	strh	r5, [r4, #12]
 8007f52:	e7cd      	b.n	8007ef0 <__smakebuf_r+0x18>
 8007f54:	08007d21 	.word	0x08007d21

08007f58 <__malloc_lock>:
 8007f58:	4770      	bx	lr

08007f5a <__malloc_unlock>:
 8007f5a:	4770      	bx	lr

08007f5c <__sfputc_r>:
 8007f5c:	6893      	ldr	r3, [r2, #8]
 8007f5e:	3b01      	subs	r3, #1
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	b410      	push	{r4}
 8007f64:	6093      	str	r3, [r2, #8]
 8007f66:	da08      	bge.n	8007f7a <__sfputc_r+0x1e>
 8007f68:	6994      	ldr	r4, [r2, #24]
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	db01      	blt.n	8007f72 <__sfputc_r+0x16>
 8007f6e:	290a      	cmp	r1, #10
 8007f70:	d103      	bne.n	8007f7a <__sfputc_r+0x1e>
 8007f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f76:	f7ff bd1d 	b.w	80079b4 <__swbuf_r>
 8007f7a:	6813      	ldr	r3, [r2, #0]
 8007f7c:	1c58      	adds	r0, r3, #1
 8007f7e:	6010      	str	r0, [r2, #0]
 8007f80:	7019      	strb	r1, [r3, #0]
 8007f82:	4608      	mov	r0, r1
 8007f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f88:	4770      	bx	lr

08007f8a <__sfputs_r>:
 8007f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f8c:	4606      	mov	r6, r0
 8007f8e:	460f      	mov	r7, r1
 8007f90:	4614      	mov	r4, r2
 8007f92:	18d5      	adds	r5, r2, r3
 8007f94:	42ac      	cmp	r4, r5
 8007f96:	d101      	bne.n	8007f9c <__sfputs_r+0x12>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e007      	b.n	8007fac <__sfputs_r+0x22>
 8007f9c:	463a      	mov	r2, r7
 8007f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f7ff ffda 	bl	8007f5c <__sfputc_r>
 8007fa8:	1c43      	adds	r3, r0, #1
 8007faa:	d1f3      	bne.n	8007f94 <__sfputs_r+0xa>
 8007fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007fb0 <_vfiprintf_r>:
 8007fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	b09d      	sub	sp, #116	; 0x74
 8007fb8:	4617      	mov	r7, r2
 8007fba:	461d      	mov	r5, r3
 8007fbc:	4606      	mov	r6, r0
 8007fbe:	b118      	cbz	r0, 8007fc8 <_vfiprintf_r+0x18>
 8007fc0:	6983      	ldr	r3, [r0, #24]
 8007fc2:	b90b      	cbnz	r3, 8007fc8 <_vfiprintf_r+0x18>
 8007fc4:	f7ff fec8 	bl	8007d58 <__sinit>
 8007fc8:	4b7c      	ldr	r3, [pc, #496]	; (80081bc <_vfiprintf_r+0x20c>)
 8007fca:	429c      	cmp	r4, r3
 8007fcc:	d158      	bne.n	8008080 <_vfiprintf_r+0xd0>
 8007fce:	6874      	ldr	r4, [r6, #4]
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	0718      	lsls	r0, r3, #28
 8007fd4:	d55e      	bpl.n	8008094 <_vfiprintf_r+0xe4>
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d05b      	beq.n	8008094 <_vfiprintf_r+0xe4>
 8007fdc:	2300      	movs	r3, #0
 8007fde:	9309      	str	r3, [sp, #36]	; 0x24
 8007fe0:	2320      	movs	r3, #32
 8007fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fe6:	2330      	movs	r3, #48	; 0x30
 8007fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fec:	9503      	str	r5, [sp, #12]
 8007fee:	f04f 0b01 	mov.w	fp, #1
 8007ff2:	46b8      	mov	r8, r7
 8007ff4:	4645      	mov	r5, r8
 8007ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007ffa:	b10b      	cbz	r3, 8008000 <_vfiprintf_r+0x50>
 8007ffc:	2b25      	cmp	r3, #37	; 0x25
 8007ffe:	d154      	bne.n	80080aa <_vfiprintf_r+0xfa>
 8008000:	ebb8 0a07 	subs.w	sl, r8, r7
 8008004:	d00b      	beq.n	800801e <_vfiprintf_r+0x6e>
 8008006:	4653      	mov	r3, sl
 8008008:	463a      	mov	r2, r7
 800800a:	4621      	mov	r1, r4
 800800c:	4630      	mov	r0, r6
 800800e:	f7ff ffbc 	bl	8007f8a <__sfputs_r>
 8008012:	3001      	adds	r0, #1
 8008014:	f000 80c2 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800801a:	4453      	add	r3, sl
 800801c:	9309      	str	r3, [sp, #36]	; 0x24
 800801e:	f898 3000 	ldrb.w	r3, [r8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	f000 80ba 	beq.w	800819c <_vfiprintf_r+0x1ec>
 8008028:	2300      	movs	r3, #0
 800802a:	f04f 32ff 	mov.w	r2, #4294967295
 800802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008032:	9304      	str	r3, [sp, #16]
 8008034:	9307      	str	r3, [sp, #28]
 8008036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800803a:	931a      	str	r3, [sp, #104]	; 0x68
 800803c:	46a8      	mov	r8, r5
 800803e:	2205      	movs	r2, #5
 8008040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008044:	485e      	ldr	r0, [pc, #376]	; (80081c0 <_vfiprintf_r+0x210>)
 8008046:	f7f8 f8d3 	bl	80001f0 <memchr>
 800804a:	9b04      	ldr	r3, [sp, #16]
 800804c:	bb78      	cbnz	r0, 80080ae <_vfiprintf_r+0xfe>
 800804e:	06d9      	lsls	r1, r3, #27
 8008050:	bf44      	itt	mi
 8008052:	2220      	movmi	r2, #32
 8008054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008058:	071a      	lsls	r2, r3, #28
 800805a:	bf44      	itt	mi
 800805c:	222b      	movmi	r2, #43	; 0x2b
 800805e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008062:	782a      	ldrb	r2, [r5, #0]
 8008064:	2a2a      	cmp	r2, #42	; 0x2a
 8008066:	d02a      	beq.n	80080be <_vfiprintf_r+0x10e>
 8008068:	9a07      	ldr	r2, [sp, #28]
 800806a:	46a8      	mov	r8, r5
 800806c:	2000      	movs	r0, #0
 800806e:	250a      	movs	r5, #10
 8008070:	4641      	mov	r1, r8
 8008072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008076:	3b30      	subs	r3, #48	; 0x30
 8008078:	2b09      	cmp	r3, #9
 800807a:	d969      	bls.n	8008150 <_vfiprintf_r+0x1a0>
 800807c:	b360      	cbz	r0, 80080d8 <_vfiprintf_r+0x128>
 800807e:	e024      	b.n	80080ca <_vfiprintf_r+0x11a>
 8008080:	4b50      	ldr	r3, [pc, #320]	; (80081c4 <_vfiprintf_r+0x214>)
 8008082:	429c      	cmp	r4, r3
 8008084:	d101      	bne.n	800808a <_vfiprintf_r+0xda>
 8008086:	68b4      	ldr	r4, [r6, #8]
 8008088:	e7a2      	b.n	8007fd0 <_vfiprintf_r+0x20>
 800808a:	4b4f      	ldr	r3, [pc, #316]	; (80081c8 <_vfiprintf_r+0x218>)
 800808c:	429c      	cmp	r4, r3
 800808e:	bf08      	it	eq
 8008090:	68f4      	ldreq	r4, [r6, #12]
 8008092:	e79d      	b.n	8007fd0 <_vfiprintf_r+0x20>
 8008094:	4621      	mov	r1, r4
 8008096:	4630      	mov	r0, r6
 8008098:	f7ff fcf0 	bl	8007a7c <__swsetup_r>
 800809c:	2800      	cmp	r0, #0
 800809e:	d09d      	beq.n	8007fdc <_vfiprintf_r+0x2c>
 80080a0:	f04f 30ff 	mov.w	r0, #4294967295
 80080a4:	b01d      	add	sp, #116	; 0x74
 80080a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080aa:	46a8      	mov	r8, r5
 80080ac:	e7a2      	b.n	8007ff4 <_vfiprintf_r+0x44>
 80080ae:	4a44      	ldr	r2, [pc, #272]	; (80081c0 <_vfiprintf_r+0x210>)
 80080b0:	1a80      	subs	r0, r0, r2
 80080b2:	fa0b f000 	lsl.w	r0, fp, r0
 80080b6:	4318      	orrs	r0, r3
 80080b8:	9004      	str	r0, [sp, #16]
 80080ba:	4645      	mov	r5, r8
 80080bc:	e7be      	b.n	800803c <_vfiprintf_r+0x8c>
 80080be:	9a03      	ldr	r2, [sp, #12]
 80080c0:	1d11      	adds	r1, r2, #4
 80080c2:	6812      	ldr	r2, [r2, #0]
 80080c4:	9103      	str	r1, [sp, #12]
 80080c6:	2a00      	cmp	r2, #0
 80080c8:	db01      	blt.n	80080ce <_vfiprintf_r+0x11e>
 80080ca:	9207      	str	r2, [sp, #28]
 80080cc:	e004      	b.n	80080d8 <_vfiprintf_r+0x128>
 80080ce:	4252      	negs	r2, r2
 80080d0:	f043 0302 	orr.w	r3, r3, #2
 80080d4:	9207      	str	r2, [sp, #28]
 80080d6:	9304      	str	r3, [sp, #16]
 80080d8:	f898 3000 	ldrb.w	r3, [r8]
 80080dc:	2b2e      	cmp	r3, #46	; 0x2e
 80080de:	d10e      	bne.n	80080fe <_vfiprintf_r+0x14e>
 80080e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80080e4:	2b2a      	cmp	r3, #42	; 0x2a
 80080e6:	d138      	bne.n	800815a <_vfiprintf_r+0x1aa>
 80080e8:	9b03      	ldr	r3, [sp, #12]
 80080ea:	1d1a      	adds	r2, r3, #4
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	9203      	str	r2, [sp, #12]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	bfb8      	it	lt
 80080f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80080f8:	f108 0802 	add.w	r8, r8, #2
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4d33      	ldr	r5, [pc, #204]	; (80081cc <_vfiprintf_r+0x21c>)
 8008100:	f898 1000 	ldrb.w	r1, [r8]
 8008104:	2203      	movs	r2, #3
 8008106:	4628      	mov	r0, r5
 8008108:	f7f8 f872 	bl	80001f0 <memchr>
 800810c:	b140      	cbz	r0, 8008120 <_vfiprintf_r+0x170>
 800810e:	2340      	movs	r3, #64	; 0x40
 8008110:	1b40      	subs	r0, r0, r5
 8008112:	fa03 f000 	lsl.w	r0, r3, r0
 8008116:	9b04      	ldr	r3, [sp, #16]
 8008118:	4303      	orrs	r3, r0
 800811a:	f108 0801 	add.w	r8, r8, #1
 800811e:	9304      	str	r3, [sp, #16]
 8008120:	f898 1000 	ldrb.w	r1, [r8]
 8008124:	482a      	ldr	r0, [pc, #168]	; (80081d0 <_vfiprintf_r+0x220>)
 8008126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800812a:	2206      	movs	r2, #6
 800812c:	f108 0701 	add.w	r7, r8, #1
 8008130:	f7f8 f85e 	bl	80001f0 <memchr>
 8008134:	2800      	cmp	r0, #0
 8008136:	d037      	beq.n	80081a8 <_vfiprintf_r+0x1f8>
 8008138:	4b26      	ldr	r3, [pc, #152]	; (80081d4 <_vfiprintf_r+0x224>)
 800813a:	bb1b      	cbnz	r3, 8008184 <_vfiprintf_r+0x1d4>
 800813c:	9b03      	ldr	r3, [sp, #12]
 800813e:	3307      	adds	r3, #7
 8008140:	f023 0307 	bic.w	r3, r3, #7
 8008144:	3308      	adds	r3, #8
 8008146:	9303      	str	r3, [sp, #12]
 8008148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800814a:	444b      	add	r3, r9
 800814c:	9309      	str	r3, [sp, #36]	; 0x24
 800814e:	e750      	b.n	8007ff2 <_vfiprintf_r+0x42>
 8008150:	fb05 3202 	mla	r2, r5, r2, r3
 8008154:	2001      	movs	r0, #1
 8008156:	4688      	mov	r8, r1
 8008158:	e78a      	b.n	8008070 <_vfiprintf_r+0xc0>
 800815a:	2300      	movs	r3, #0
 800815c:	f108 0801 	add.w	r8, r8, #1
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	4619      	mov	r1, r3
 8008164:	250a      	movs	r5, #10
 8008166:	4640      	mov	r0, r8
 8008168:	f810 2b01 	ldrb.w	r2, [r0], #1
 800816c:	3a30      	subs	r2, #48	; 0x30
 800816e:	2a09      	cmp	r2, #9
 8008170:	d903      	bls.n	800817a <_vfiprintf_r+0x1ca>
 8008172:	2b00      	cmp	r3, #0
 8008174:	d0c3      	beq.n	80080fe <_vfiprintf_r+0x14e>
 8008176:	9105      	str	r1, [sp, #20]
 8008178:	e7c1      	b.n	80080fe <_vfiprintf_r+0x14e>
 800817a:	fb05 2101 	mla	r1, r5, r1, r2
 800817e:	2301      	movs	r3, #1
 8008180:	4680      	mov	r8, r0
 8008182:	e7f0      	b.n	8008166 <_vfiprintf_r+0x1b6>
 8008184:	ab03      	add	r3, sp, #12
 8008186:	9300      	str	r3, [sp, #0]
 8008188:	4622      	mov	r2, r4
 800818a:	4b13      	ldr	r3, [pc, #76]	; (80081d8 <_vfiprintf_r+0x228>)
 800818c:	a904      	add	r1, sp, #16
 800818e:	4630      	mov	r0, r6
 8008190:	f3af 8000 	nop.w
 8008194:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008198:	4681      	mov	r9, r0
 800819a:	d1d5      	bne.n	8008148 <_vfiprintf_r+0x198>
 800819c:	89a3      	ldrh	r3, [r4, #12]
 800819e:	065b      	lsls	r3, r3, #25
 80081a0:	f53f af7e 	bmi.w	80080a0 <_vfiprintf_r+0xf0>
 80081a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081a6:	e77d      	b.n	80080a4 <_vfiprintf_r+0xf4>
 80081a8:	ab03      	add	r3, sp, #12
 80081aa:	9300      	str	r3, [sp, #0]
 80081ac:	4622      	mov	r2, r4
 80081ae:	4b0a      	ldr	r3, [pc, #40]	; (80081d8 <_vfiprintf_r+0x228>)
 80081b0:	a904      	add	r1, sp, #16
 80081b2:	4630      	mov	r0, r6
 80081b4:	f000 f888 	bl	80082c8 <_printf_i>
 80081b8:	e7ec      	b.n	8008194 <_vfiprintf_r+0x1e4>
 80081ba:	bf00      	nop
 80081bc:	08008738 	.word	0x08008738
 80081c0:	08008778 	.word	0x08008778
 80081c4:	08008758 	.word	0x08008758
 80081c8:	08008718 	.word	0x08008718
 80081cc:	0800877e 	.word	0x0800877e
 80081d0:	08008782 	.word	0x08008782
 80081d4:	00000000 	.word	0x00000000
 80081d8:	08007f8b 	.word	0x08007f8b

080081dc <_printf_common>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	4691      	mov	r9, r2
 80081e2:	461f      	mov	r7, r3
 80081e4:	688a      	ldr	r2, [r1, #8]
 80081e6:	690b      	ldr	r3, [r1, #16]
 80081e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80081ec:	4293      	cmp	r3, r2
 80081ee:	bfb8      	it	lt
 80081f0:	4613      	movlt	r3, r2
 80081f2:	f8c9 3000 	str.w	r3, [r9]
 80081f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80081fa:	4606      	mov	r6, r0
 80081fc:	460c      	mov	r4, r1
 80081fe:	b112      	cbz	r2, 8008206 <_printf_common+0x2a>
 8008200:	3301      	adds	r3, #1
 8008202:	f8c9 3000 	str.w	r3, [r9]
 8008206:	6823      	ldr	r3, [r4, #0]
 8008208:	0699      	lsls	r1, r3, #26
 800820a:	bf42      	ittt	mi
 800820c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008210:	3302      	addmi	r3, #2
 8008212:	f8c9 3000 	strmi.w	r3, [r9]
 8008216:	6825      	ldr	r5, [r4, #0]
 8008218:	f015 0506 	ands.w	r5, r5, #6
 800821c:	d107      	bne.n	800822e <_printf_common+0x52>
 800821e:	f104 0a19 	add.w	sl, r4, #25
 8008222:	68e3      	ldr	r3, [r4, #12]
 8008224:	f8d9 2000 	ldr.w	r2, [r9]
 8008228:	1a9b      	subs	r3, r3, r2
 800822a:	42ab      	cmp	r3, r5
 800822c:	dc28      	bgt.n	8008280 <_printf_common+0xa4>
 800822e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008232:	6822      	ldr	r2, [r4, #0]
 8008234:	3300      	adds	r3, #0
 8008236:	bf18      	it	ne
 8008238:	2301      	movne	r3, #1
 800823a:	0692      	lsls	r2, r2, #26
 800823c:	d42d      	bmi.n	800829a <_printf_common+0xbe>
 800823e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008242:	4639      	mov	r1, r7
 8008244:	4630      	mov	r0, r6
 8008246:	47c0      	blx	r8
 8008248:	3001      	adds	r0, #1
 800824a:	d020      	beq.n	800828e <_printf_common+0xb2>
 800824c:	6823      	ldr	r3, [r4, #0]
 800824e:	68e5      	ldr	r5, [r4, #12]
 8008250:	f8d9 2000 	ldr.w	r2, [r9]
 8008254:	f003 0306 	and.w	r3, r3, #6
 8008258:	2b04      	cmp	r3, #4
 800825a:	bf08      	it	eq
 800825c:	1aad      	subeq	r5, r5, r2
 800825e:	68a3      	ldr	r3, [r4, #8]
 8008260:	6922      	ldr	r2, [r4, #16]
 8008262:	bf0c      	ite	eq
 8008264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008268:	2500      	movne	r5, #0
 800826a:	4293      	cmp	r3, r2
 800826c:	bfc4      	itt	gt
 800826e:	1a9b      	subgt	r3, r3, r2
 8008270:	18ed      	addgt	r5, r5, r3
 8008272:	f04f 0900 	mov.w	r9, #0
 8008276:	341a      	adds	r4, #26
 8008278:	454d      	cmp	r5, r9
 800827a:	d11a      	bne.n	80082b2 <_printf_common+0xd6>
 800827c:	2000      	movs	r0, #0
 800827e:	e008      	b.n	8008292 <_printf_common+0xb6>
 8008280:	2301      	movs	r3, #1
 8008282:	4652      	mov	r2, sl
 8008284:	4639      	mov	r1, r7
 8008286:	4630      	mov	r0, r6
 8008288:	47c0      	blx	r8
 800828a:	3001      	adds	r0, #1
 800828c:	d103      	bne.n	8008296 <_printf_common+0xba>
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008296:	3501      	adds	r5, #1
 8008298:	e7c3      	b.n	8008222 <_printf_common+0x46>
 800829a:	18e1      	adds	r1, r4, r3
 800829c:	1c5a      	adds	r2, r3, #1
 800829e:	2030      	movs	r0, #48	; 0x30
 80082a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80082a4:	4422      	add	r2, r4
 80082a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80082aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80082ae:	3302      	adds	r3, #2
 80082b0:	e7c5      	b.n	800823e <_printf_common+0x62>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4622      	mov	r2, r4
 80082b6:	4639      	mov	r1, r7
 80082b8:	4630      	mov	r0, r6
 80082ba:	47c0      	blx	r8
 80082bc:	3001      	adds	r0, #1
 80082be:	d0e6      	beq.n	800828e <_printf_common+0xb2>
 80082c0:	f109 0901 	add.w	r9, r9, #1
 80082c4:	e7d8      	b.n	8008278 <_printf_common+0x9c>
	...

080082c8 <_printf_i>:
 80082c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80082cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80082d0:	460c      	mov	r4, r1
 80082d2:	7e09      	ldrb	r1, [r1, #24]
 80082d4:	b085      	sub	sp, #20
 80082d6:	296e      	cmp	r1, #110	; 0x6e
 80082d8:	4617      	mov	r7, r2
 80082da:	4606      	mov	r6, r0
 80082dc:	4698      	mov	r8, r3
 80082de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082e0:	f000 80b3 	beq.w	800844a <_printf_i+0x182>
 80082e4:	d822      	bhi.n	800832c <_printf_i+0x64>
 80082e6:	2963      	cmp	r1, #99	; 0x63
 80082e8:	d036      	beq.n	8008358 <_printf_i+0x90>
 80082ea:	d80a      	bhi.n	8008302 <_printf_i+0x3a>
 80082ec:	2900      	cmp	r1, #0
 80082ee:	f000 80b9 	beq.w	8008464 <_printf_i+0x19c>
 80082f2:	2958      	cmp	r1, #88	; 0x58
 80082f4:	f000 8083 	beq.w	80083fe <_printf_i+0x136>
 80082f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80082fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008300:	e032      	b.n	8008368 <_printf_i+0xa0>
 8008302:	2964      	cmp	r1, #100	; 0x64
 8008304:	d001      	beq.n	800830a <_printf_i+0x42>
 8008306:	2969      	cmp	r1, #105	; 0x69
 8008308:	d1f6      	bne.n	80082f8 <_printf_i+0x30>
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	6813      	ldr	r3, [r2, #0]
 800830e:	0605      	lsls	r5, r0, #24
 8008310:	f103 0104 	add.w	r1, r3, #4
 8008314:	d52a      	bpl.n	800836c <_printf_i+0xa4>
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6011      	str	r1, [r2, #0]
 800831a:	2b00      	cmp	r3, #0
 800831c:	da03      	bge.n	8008326 <_printf_i+0x5e>
 800831e:	222d      	movs	r2, #45	; 0x2d
 8008320:	425b      	negs	r3, r3
 8008322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008326:	486f      	ldr	r0, [pc, #444]	; (80084e4 <_printf_i+0x21c>)
 8008328:	220a      	movs	r2, #10
 800832a:	e039      	b.n	80083a0 <_printf_i+0xd8>
 800832c:	2973      	cmp	r1, #115	; 0x73
 800832e:	f000 809d 	beq.w	800846c <_printf_i+0x1a4>
 8008332:	d808      	bhi.n	8008346 <_printf_i+0x7e>
 8008334:	296f      	cmp	r1, #111	; 0x6f
 8008336:	d020      	beq.n	800837a <_printf_i+0xb2>
 8008338:	2970      	cmp	r1, #112	; 0x70
 800833a:	d1dd      	bne.n	80082f8 <_printf_i+0x30>
 800833c:	6823      	ldr	r3, [r4, #0]
 800833e:	f043 0320 	orr.w	r3, r3, #32
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	e003      	b.n	800834e <_printf_i+0x86>
 8008346:	2975      	cmp	r1, #117	; 0x75
 8008348:	d017      	beq.n	800837a <_printf_i+0xb2>
 800834a:	2978      	cmp	r1, #120	; 0x78
 800834c:	d1d4      	bne.n	80082f8 <_printf_i+0x30>
 800834e:	2378      	movs	r3, #120	; 0x78
 8008350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008354:	4864      	ldr	r0, [pc, #400]	; (80084e8 <_printf_i+0x220>)
 8008356:	e055      	b.n	8008404 <_printf_i+0x13c>
 8008358:	6813      	ldr	r3, [r2, #0]
 800835a:	1d19      	adds	r1, r3, #4
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6011      	str	r1, [r2, #0]
 8008360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008368:	2301      	movs	r3, #1
 800836a:	e08c      	b.n	8008486 <_printf_i+0x1be>
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6011      	str	r1, [r2, #0]
 8008370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008374:	bf18      	it	ne
 8008376:	b21b      	sxthne	r3, r3
 8008378:	e7cf      	b.n	800831a <_printf_i+0x52>
 800837a:	6813      	ldr	r3, [r2, #0]
 800837c:	6825      	ldr	r5, [r4, #0]
 800837e:	1d18      	adds	r0, r3, #4
 8008380:	6010      	str	r0, [r2, #0]
 8008382:	0628      	lsls	r0, r5, #24
 8008384:	d501      	bpl.n	800838a <_printf_i+0xc2>
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	e002      	b.n	8008390 <_printf_i+0xc8>
 800838a:	0668      	lsls	r0, r5, #25
 800838c:	d5fb      	bpl.n	8008386 <_printf_i+0xbe>
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	4854      	ldr	r0, [pc, #336]	; (80084e4 <_printf_i+0x21c>)
 8008392:	296f      	cmp	r1, #111	; 0x6f
 8008394:	bf14      	ite	ne
 8008396:	220a      	movne	r2, #10
 8008398:	2208      	moveq	r2, #8
 800839a:	2100      	movs	r1, #0
 800839c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80083a0:	6865      	ldr	r5, [r4, #4]
 80083a2:	60a5      	str	r5, [r4, #8]
 80083a4:	2d00      	cmp	r5, #0
 80083a6:	f2c0 8095 	blt.w	80084d4 <_printf_i+0x20c>
 80083aa:	6821      	ldr	r1, [r4, #0]
 80083ac:	f021 0104 	bic.w	r1, r1, #4
 80083b0:	6021      	str	r1, [r4, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d13d      	bne.n	8008432 <_printf_i+0x16a>
 80083b6:	2d00      	cmp	r5, #0
 80083b8:	f040 808e 	bne.w	80084d8 <_printf_i+0x210>
 80083bc:	4665      	mov	r5, ip
 80083be:	2a08      	cmp	r2, #8
 80083c0:	d10b      	bne.n	80083da <_printf_i+0x112>
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	07db      	lsls	r3, r3, #31
 80083c6:	d508      	bpl.n	80083da <_printf_i+0x112>
 80083c8:	6923      	ldr	r3, [r4, #16]
 80083ca:	6862      	ldr	r2, [r4, #4]
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bfde      	ittt	le
 80083d0:	2330      	movle	r3, #48	; 0x30
 80083d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80083d6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80083da:	ebac 0305 	sub.w	r3, ip, r5
 80083de:	6123      	str	r3, [r4, #16]
 80083e0:	f8cd 8000 	str.w	r8, [sp]
 80083e4:	463b      	mov	r3, r7
 80083e6:	aa03      	add	r2, sp, #12
 80083e8:	4621      	mov	r1, r4
 80083ea:	4630      	mov	r0, r6
 80083ec:	f7ff fef6 	bl	80081dc <_printf_common>
 80083f0:	3001      	adds	r0, #1
 80083f2:	d14d      	bne.n	8008490 <_printf_i+0x1c8>
 80083f4:	f04f 30ff 	mov.w	r0, #4294967295
 80083f8:	b005      	add	sp, #20
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	4839      	ldr	r0, [pc, #228]	; (80084e4 <_printf_i+0x21c>)
 8008400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008404:	6813      	ldr	r3, [r2, #0]
 8008406:	6821      	ldr	r1, [r4, #0]
 8008408:	1d1d      	adds	r5, r3, #4
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	6015      	str	r5, [r2, #0]
 800840e:	060a      	lsls	r2, r1, #24
 8008410:	d50b      	bpl.n	800842a <_printf_i+0x162>
 8008412:	07ca      	lsls	r2, r1, #31
 8008414:	bf44      	itt	mi
 8008416:	f041 0120 	orrmi.w	r1, r1, #32
 800841a:	6021      	strmi	r1, [r4, #0]
 800841c:	b91b      	cbnz	r3, 8008426 <_printf_i+0x15e>
 800841e:	6822      	ldr	r2, [r4, #0]
 8008420:	f022 0220 	bic.w	r2, r2, #32
 8008424:	6022      	str	r2, [r4, #0]
 8008426:	2210      	movs	r2, #16
 8008428:	e7b7      	b.n	800839a <_printf_i+0xd2>
 800842a:	064d      	lsls	r5, r1, #25
 800842c:	bf48      	it	mi
 800842e:	b29b      	uxthmi	r3, r3
 8008430:	e7ef      	b.n	8008412 <_printf_i+0x14a>
 8008432:	4665      	mov	r5, ip
 8008434:	fbb3 f1f2 	udiv	r1, r3, r2
 8008438:	fb02 3311 	mls	r3, r2, r1, r3
 800843c:	5cc3      	ldrb	r3, [r0, r3]
 800843e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008442:	460b      	mov	r3, r1
 8008444:	2900      	cmp	r1, #0
 8008446:	d1f5      	bne.n	8008434 <_printf_i+0x16c>
 8008448:	e7b9      	b.n	80083be <_printf_i+0xf6>
 800844a:	6813      	ldr	r3, [r2, #0]
 800844c:	6825      	ldr	r5, [r4, #0]
 800844e:	6961      	ldr	r1, [r4, #20]
 8008450:	1d18      	adds	r0, r3, #4
 8008452:	6010      	str	r0, [r2, #0]
 8008454:	0628      	lsls	r0, r5, #24
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	d501      	bpl.n	800845e <_printf_i+0x196>
 800845a:	6019      	str	r1, [r3, #0]
 800845c:	e002      	b.n	8008464 <_printf_i+0x19c>
 800845e:	066a      	lsls	r2, r5, #25
 8008460:	d5fb      	bpl.n	800845a <_printf_i+0x192>
 8008462:	8019      	strh	r1, [r3, #0]
 8008464:	2300      	movs	r3, #0
 8008466:	6123      	str	r3, [r4, #16]
 8008468:	4665      	mov	r5, ip
 800846a:	e7b9      	b.n	80083e0 <_printf_i+0x118>
 800846c:	6813      	ldr	r3, [r2, #0]
 800846e:	1d19      	adds	r1, r3, #4
 8008470:	6011      	str	r1, [r2, #0]
 8008472:	681d      	ldr	r5, [r3, #0]
 8008474:	6862      	ldr	r2, [r4, #4]
 8008476:	2100      	movs	r1, #0
 8008478:	4628      	mov	r0, r5
 800847a:	f7f7 feb9 	bl	80001f0 <memchr>
 800847e:	b108      	cbz	r0, 8008484 <_printf_i+0x1bc>
 8008480:	1b40      	subs	r0, r0, r5
 8008482:	6060      	str	r0, [r4, #4]
 8008484:	6863      	ldr	r3, [r4, #4]
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	2300      	movs	r3, #0
 800848a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800848e:	e7a7      	b.n	80083e0 <_printf_i+0x118>
 8008490:	6923      	ldr	r3, [r4, #16]
 8008492:	462a      	mov	r2, r5
 8008494:	4639      	mov	r1, r7
 8008496:	4630      	mov	r0, r6
 8008498:	47c0      	blx	r8
 800849a:	3001      	adds	r0, #1
 800849c:	d0aa      	beq.n	80083f4 <_printf_i+0x12c>
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	079b      	lsls	r3, r3, #30
 80084a2:	d413      	bmi.n	80084cc <_printf_i+0x204>
 80084a4:	68e0      	ldr	r0, [r4, #12]
 80084a6:	9b03      	ldr	r3, [sp, #12]
 80084a8:	4298      	cmp	r0, r3
 80084aa:	bfb8      	it	lt
 80084ac:	4618      	movlt	r0, r3
 80084ae:	e7a3      	b.n	80083f8 <_printf_i+0x130>
 80084b0:	2301      	movs	r3, #1
 80084b2:	464a      	mov	r2, r9
 80084b4:	4639      	mov	r1, r7
 80084b6:	4630      	mov	r0, r6
 80084b8:	47c0      	blx	r8
 80084ba:	3001      	adds	r0, #1
 80084bc:	d09a      	beq.n	80083f4 <_printf_i+0x12c>
 80084be:	3501      	adds	r5, #1
 80084c0:	68e3      	ldr	r3, [r4, #12]
 80084c2:	9a03      	ldr	r2, [sp, #12]
 80084c4:	1a9b      	subs	r3, r3, r2
 80084c6:	42ab      	cmp	r3, r5
 80084c8:	dcf2      	bgt.n	80084b0 <_printf_i+0x1e8>
 80084ca:	e7eb      	b.n	80084a4 <_printf_i+0x1dc>
 80084cc:	2500      	movs	r5, #0
 80084ce:	f104 0919 	add.w	r9, r4, #25
 80084d2:	e7f5      	b.n	80084c0 <_printf_i+0x1f8>
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1ac      	bne.n	8008432 <_printf_i+0x16a>
 80084d8:	7803      	ldrb	r3, [r0, #0]
 80084da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80084de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e2:	e76c      	b.n	80083be <_printf_i+0xf6>
 80084e4:	08008789 	.word	0x08008789
 80084e8:	0800879a 	.word	0x0800879a

080084ec <_read_r>:
 80084ec:	b538      	push	{r3, r4, r5, lr}
 80084ee:	4c07      	ldr	r4, [pc, #28]	; (800850c <_read_r+0x20>)
 80084f0:	4605      	mov	r5, r0
 80084f2:	4608      	mov	r0, r1
 80084f4:	4611      	mov	r1, r2
 80084f6:	2200      	movs	r2, #0
 80084f8:	6022      	str	r2, [r4, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	f7f8 fb4c 	bl	8000b98 <_read>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d102      	bne.n	800850a <_read_r+0x1e>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	b103      	cbz	r3, 800850a <_read_r+0x1e>
 8008508:	602b      	str	r3, [r5, #0]
 800850a:	bd38      	pop	{r3, r4, r5, pc}
 800850c:	20008b88 	.word	0x20008b88

08008510 <_fstat_r>:
 8008510:	b538      	push	{r3, r4, r5, lr}
 8008512:	4c07      	ldr	r4, [pc, #28]	; (8008530 <_fstat_r+0x20>)
 8008514:	2300      	movs	r3, #0
 8008516:	4605      	mov	r5, r0
 8008518:	4608      	mov	r0, r1
 800851a:	4611      	mov	r1, r2
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	f7f8 fb64 	bl	8000bea <_fstat>
 8008522:	1c43      	adds	r3, r0, #1
 8008524:	d102      	bne.n	800852c <_fstat_r+0x1c>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	b103      	cbz	r3, 800852c <_fstat_r+0x1c>
 800852a:	602b      	str	r3, [r5, #0]
 800852c:	bd38      	pop	{r3, r4, r5, pc}
 800852e:	bf00      	nop
 8008530:	20008b88 	.word	0x20008b88

08008534 <_isatty_r>:
 8008534:	b538      	push	{r3, r4, r5, lr}
 8008536:	4c06      	ldr	r4, [pc, #24]	; (8008550 <_isatty_r+0x1c>)
 8008538:	2300      	movs	r3, #0
 800853a:	4605      	mov	r5, r0
 800853c:	4608      	mov	r0, r1
 800853e:	6023      	str	r3, [r4, #0]
 8008540:	f7f8 fb63 	bl	8000c0a <_isatty>
 8008544:	1c43      	adds	r3, r0, #1
 8008546:	d102      	bne.n	800854e <_isatty_r+0x1a>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	b103      	cbz	r3, 800854e <_isatty_r+0x1a>
 800854c:	602b      	str	r3, [r5, #0]
 800854e:	bd38      	pop	{r3, r4, r5, pc}
 8008550:	20008b88 	.word	0x20008b88

08008554 <_init>:
 8008554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008556:	bf00      	nop
 8008558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800855a:	bc08      	pop	{r3}
 800855c:	469e      	mov	lr, r3
 800855e:	4770      	bx	lr

08008560 <_fini>:
 8008560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008562:	bf00      	nop
 8008564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008566:	bc08      	pop	{r3}
 8008568:	469e      	mov	lr, r3
 800856a:	4770      	bx	lr
