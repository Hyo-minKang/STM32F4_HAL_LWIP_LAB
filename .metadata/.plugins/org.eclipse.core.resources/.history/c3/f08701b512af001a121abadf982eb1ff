#include "MQTTInterface.h"
#include "stm32f4xx_hal.h"

#include MBEDTLS_CONFIG_FILE
#include "mbedtls/platform.h"

#include <string.h>
#include "lwip.h"
#include "lwip/api.h"
#include "lwip/sockets.h"

#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
#include "mbedtls/memory_buffer_alloc.h"
#endif
#include "mbedtls/net_sockets.h"
#include "mbedtls/debug.h"
#include "mbedtls/ssl.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/error.h"
#include "mbedtls/certs.h"

#include <string.h>

#define DEBUG_LEVEL 1

const char mbedtls_aws_root_certificate[] =
		"-----BEGIN CERTIFICATE-----\r\n"	\
		"MIIDQTCCAimgAwIBAgITBmyfz5m/jAo54vB4ikPmljZbyjANBgkqhkiG9w0BAQsF\r\n"	\
		"ADA5MQswCQYDVQQGEwJVUzEPMA0GA1UEChMGQW1hem9uMRkwFwYDVQQDExBBbWF6\r\n"	\
		"b24gUm9vdCBDQSAxMB4XDTE1MDUyNjAwMDAwMFoXDTM4MDExNzAwMDAwMFowOTEL\r\n"	\
		"MAkGA1UEBhMCVVMxDzANBgNVBAoTBkFtYXpvbjEZMBcGA1UEAxMQQW1hem9uIFJv\r\n"	\
		"b3QgQ0EgMTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALJ4gHHKeNXj\r\n"	\
		"ca9HgFB0fW7Y14h29Jlo91ghYPl0hAEvrAIthtOgQ3pOsqTQNroBvo3bSMgHFzZM\r\n"	\
		"9O6II8c+6zf1tRn4SWiw3te5djgdYZ6k/oI2peVKVuRF4fn9tBb6dNqcmzU5L/qw\r\n"	\
		"IFAGbHrQgLKm+a/sRxmPUDgH3KKHOVj4utWp+UhnMJbulHheb4mjUcAwhmahRWa6\r\n"	\
		"VOujw5H5SNz/0egwLX0tdHA114gk957EWW67c4cX8jJGKLhD+rcdqsq08p8kDi1L\r\n"	\
		"93FcXmn/6pUCyziKrlA4b9v7LWIbxcceVOF34GfID5yHI9Y/QCB/IIDEgEw+OyQm\r\n"	\
		"jgSubJrIqg0CAwEAAaNCMEAwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMC\r\n"	\
		"AYYwHQYDVR0OBBYEFIQYzIU07LwMlJQuCFmcx7IQTgoIMA0GCSqGSIb3DQEBCwUA\r\n"	\
		"A4IBAQCY8jdaQZChGsV2USggNiMOruYou6r4lK5IpDB/G/wkjUu0yKGX9rbxenDI\r\n"	\
		"U5PMCCjjmCXPI6T53iHTfIUJrU6adTrCC2qJeHZERxhlbI1Bjjt/msv0tadQ1wUs\r\n"	\
		"N+gDS63pYaACbvXy8MWy7Vu33PqUXHeeE6V/Uq2V8viTO96LXFvKWlJbYK8U90vv\r\n"	\
		"o/ufQJVtMVT8QtPHRh8jrdkPSHCa2XV4cdFyQzR1bldZwgJcJmApzyMZFo6IQ6XU\r\n"	\
		"5MsI+yMRQ+hDKXJioaldXgjUkK642M4UwtBV8ob2xJNDd2ZhwLnoQdeXeGADbkpy\r\n"	\
		"rqXRfboQnoZsG4q5WTP468SQvvG5\r\n"	\
		"-----END CERTIFICATE-----\r\n";

const char mbedtls_client_certificate[] =
		"-----BEGIN CERTIFICATE-----\r\n" \
		"MIIDWTCCAkGgAwIBAgIUFJMvKGqxo3UU9wf/aBsDjiZiAvEwDQYJKoZIhvcNAQEL\r\n" \
		"BQAwTTFLMEkGA1UECwxCQW1hem9uIFdlYiBTZXJ2aWNlcyBPPUFtYXpvbi5jb20g\r\n" \
		"SW5jLiBMPVNlYXR0bGUgU1Q9V2FzaGluZ3RvbiBDPVVTMB4XDTIwMDYxNTEyMTEy\r\n" \
		"N1oXDTQ5MTIzMTIzNTk1OVowHjEcMBoGA1UEAwwTQVdTIElvVCBDZXJ0aWZpY2F0\r\n" \
		"ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBALaONoLxOyk1LhTJ2bVU\r\n" \
		"TATrR6gUw7Fiu90Gjr9EMT2btxinlLnhB0wTCzihBREzmtXJK4hrvpPcesB7tO1r\r\n" \
		"6o6np07axJb7EiMCRfZrDxnc1voDgXY88B1QAAe+qAonqI21FwuDItvzC96WZxgU\r\n" \
		"XbcxSmWSHEF8+GWeADjge4KYJTI/8Q3x1TB+alMj9Fk26l6kt3OPMDgNs+MkJlj9\r\n" \
		"m7nHxZB4ZJOb0BriBDNL5g+oIHRjnuEvbmZZ0E3IJai1dJletruGgjqzyFRSfYAT\r\n" \
		"MNzuoq3j4GepKKdZ+MSh7Mz7oXmh4HPgajnvjYknwSajmE+zfkAqjClxkVyaslsV\r\n" \
		"MfMCAwEAAaNgMF4wHwYDVR0jBBgwFoAUvcPbZxRkW6cqb36fW1bsAiCFTfswHQYD\r\n" \
		"VR0OBBYEFFYp2KdoIjrS289//UDSHAUgsm3uMAwGA1UdEwEB/wQCMAAwDgYDVR0P\r\n" \
		"AQH/BAQDAgeAMA0GCSqGSIb3DQEBCwUAA4IBAQArFyqT915+3Y/Bf9lBHaJIANIS\r\n" \
		"m94mCucCOVs/GIln6P0pJcaCJ91C1QMZ2QjaJzwKUhLEutYFyefpzyAzdqgE/dCF\r\n" \
		"nix+Bz2hA9W3oYixliPFZRSTIEOqJN3T9lBP9hSd0Ru5kHBhohofOzNj+tosw5eJ\r\n" \
		"Jj6JmuXlNZSVAty9xPWkd+Iqy/ojoxOuvbcHHXrmsqlGl+dSrQ5fwNK+Ln+78uot\r\n" \
		"MLcG58UieL8NstAA7kGQzvWAPiXseVI4AFu8/BSqCCn0h0VxS1Q0HjjoZpcQFbbL\r\n" \
		"A6RcFQgF7h8zZSaQdFJ6itcSi0R0I1SvSn5JZhk+RFXIpKpOm9SO4VlKqmXd\r\n" \
		"-----END CERTIFICATE-----\r\n";

const char mbedtls_client_key[] =
		"-----BEGIN RSA PRIVATE KEY-----\r\n" \
		"MIIEpAIBAAKCAQEAto42gvE7KTUuFMnZtVRMBOtHqBTDsWK73QaOv0QxPZu3GKeU\r\n" \
		"ueEHTBMLOKEFETOa1ckriGu+k9x6wHu07WvqjqenTtrElvsSIwJF9msPGdzW+gOB\r\n" \
		"djzwHVAAB76oCieojbUXC4Mi2/ML3pZnGBRdtzFKZZIcQXz4ZZ4AOOB7gpglMj/x\r\n" \
		"DfHVMH5qUyP0WTbqXqS3c48wOA2z4yQmWP2bucfFkHhkk5vQGuIEM0vmD6ggdGOe\r\n" \
		"4S9uZlnQTcglqLV0mV62u4aCOrPIVFJ9gBMw3O6irePgZ6kop1n4xKHszPuheaHg\r\n" \
		"c+BqOe+NiSfBJqOYT7N+QCqMKXGRXJqyWxUx8wIDAQABAoIBAQCG1iehM7g0yZjN\r\n" \
		"tgFdk3PKtlVo6l1YacrEiBFraFzOWnM0fKK3YGRZZj+FhjkN6YXVng7PZnWPFOx9\r\n" \
		"u2F5c5n94AsNjTxjH/LXdNhkF9NBkQIgC/LVeFEJ9YrwLXxEc+JlOHpbAHMA7lW4\r\n" \
		"BHMFMBXAN2Hx/6drH3kA5WDYocXYQHQrBI+4dBEBHB0BHz1CBoNE8wdDcdbfK+O+\r\n" \
		"pHiEzfVjKOBTwxyV78l/Up0hrNqCBo9NXHkP+oDJcM9Y8x7+RhNBWYLHLmkkScjM\r\n" \
		"Wv6xqGvN7qYMvYP5sGkhah7SfyfvzU4eyuW4402qaMkeqVXpxg8KlRpKAhDg/W7k\r\n" \
		"rs19UEshAoGBAOewNteS1+uTDWTeQYAax6ezDlZFV+NibIbWSZeCqKWql/mDabBJ\r\n" \
		"x4v5ORg6KKLnVfGYAkInuH35cs2qdx2e+bfLBGMQDpJK0C3L/dKGYjmRAQ8xO7Za\r\n" \
		"cEd7B8fRLvfACgbvAYm6RltdRx1hygK+yv/yZqYBQat5Mg9kWLyGblJ5AoGBAMm2\r\n" \
		"J/hxYcQvyB+8ASA+X1MGhJ6OuiYl+FESxp0hgGPgYZYwQuahXTZP0XOCByhhyARB\r\n" \
		"navRgkYckhelQqAkMR1+zDNHXA3VykwXXgiiDaK9lpbdQsHBCwtS/snqShBAA7ZW\r\n" \
		"fxo8MWzqet+/BQpSq7DOEtL7pbqa3rH37m5jlSzLAoGBAIopCbspxPqk2WLiKrsi\r\n" \
		"vRai7xTBCzT8V21c0cu4zark/PV8yQSoKoes2cA5xkvGmfiUxhv/JcRxgWVlltyi\r\n" \
		"FZXlSbttMtNIK7Zzo+vr2R0s/C28FTib28K0eiJM+q4g5ZnW4trnqtcG28aIrvdO\r\n" \
		"IS3Zth6eNzPy9Mg69bOOkrE5AoGAMR9DLKWwAW8BdXj7bTbDUBzOPy7S9mdYyaWg\r\n" \
		"6LM36RrDqSenozK42HknsNGBnLvzUdYI58blyt06VrfQOd+WdnBimjpOmK/vzAgE\r\n" \
		"xmVwnKk++w53K2gvoFpd4h5EWyC7xrPZ0DHId5XCxqpmN9VaKnyE6QyPl5oPkZen\r\n" \
		"YQqvUXECgYBWRKcdKLFThasFfYeqPy5HoV72bDGXB07Httni7VCsSPqJsU/tZ91D\r\n" \
		"Sqo/yzuFZEOl3xSmeGfck3HjSdT/WAgiVfFkRt11cupC375L09gGzJqud1EfK6NU\r\n" \
		"524wMrpsI//ItzDRJ6pLI+dj3Qnqjfb4mFI4FIsV2kWsEpqWQAxIQQ==\r\n" \
		"-----END RSA PRIVATE KEY-----\r\n";

const size_t mbedtls_aws_root_certificate_len = strlen(mbedtls_aws_root_certificate)+1;
const size_t mbedtls_client_certificate_len = strlen(mbedtls_client_certificate)+1;
const size_t mbedtls_client_key_len = strlen(mbedtls_client_key)+1;

/*
 * Amazon Profile
 */
const mbedtls_x509_crt_profile mbedtls_x509_crt_amazon_suite =
{
		/* Only SHA-256 and 384 */
		MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA256 ) |
		MBEDTLS_X509_ID_FLAG( MBEDTLS_MD_SHA384 ),
		/* Only ECDSA */
		MBEDTLS_X509_ID_FLAG(MBEDTLS_PK_RSA) | /* */
		MBEDTLS_X509_ID_FLAG(MBEDTLS_PK_ECKEY) | /* */
		MBEDTLS_X509_ID_FLAG( MBEDTLS_PK_ECDSA ),

		/* Only NIST P-256 and P-384 */
		MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP256R1 ) |
		MBEDTLS_X509_ID_FLAG( MBEDTLS_ECP_DP_SECP384R1 ),

		2048
};

#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
#define MEMORY_HEAP_SIZE      65536
uint8_t alloc_buf[MEMORY_HEAP_SIZE];
#endif

mbedtls_net_context server_fd;
const char *pers = "mbedtls";

mbedtls_entropy_context entropy;
mbedtls_ctr_drbg_context ctr_drbg;
mbedtls_ssl_context ssl;
mbedtls_ssl_config conf;
mbedtls_x509_crt cacert;
mbedtls_x509_crt cli_cert;
mbedtls_pk_context cli_key;

void *mbedtls_calloc( size_t n, size_t size )
{
	const size_t poolSize = n * size;
	void *p = pvPortMalloc(poolSize);
	if (p != NULL)
	{
		memset(p, 0, poolSize);
	}
	return p;
}

void mbedtls_free( void *ptr )
{
	vPortFree(ptr);
}

static void my_debug(void *ctx, int level, const char *file, int line, const char *str) {
	((void) level);
	mbedtls_fprintf((FILE*) ctx, "%s:%04d: %s", file, line, str);
	fflush((FILE*) ctx);
}

int net_init(Network *n, char *host) {
	int ret;

	//initialize mbedTLS realted variables
#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
	mbedtls_memory_buffer_alloc_init(alloc_buf, sizeof(alloc_buf));
#endif

#if defined(MBEDTLS_DEBUG_C)
	mbedtls_debug_set_threshold(DEBUG_LEVEL);
#endif

	//mbedtls_net_init(&server_fd); //MX_LWIP_Init() is called already
	mbedtls_ssl_init(&ssl);
	mbedtls_ssl_config_init(&conf);

	mbedtls_x509_crt_init(&cacert);
	mbedtls_x509_crt_init(&cli_cert);
	mbedtls_pk_init(&cli_key);

	mbedtls_ctr_drbg_init(&ctr_drbg);
	mbedtls_entropy_init(&entropy);

	if ((ret = mbedtls_ctr_drbg_seed(&ctr_drbg, mbedtls_entropy_func, &entropy, (const unsigned char*) pers,
			strlen(pers))) != 0) {
		return -1;
	}

	// SSL/TLS connection process. refer to ssl client1 example
	ret = mbedtls_x509_crt_parse(&cacert, (const unsigned char*) mbedtls_aws_root_certificate, mbedtls_aws_root_certificate_len);
	if (ret < 0) {
		printf("mbedtls_x509_crt_parse failed.\n");
		return -1;
	}

	ret = mbedtls_x509_crt_parse(&cli_cert, (const unsigned char *) mbedtls_client_certificate, mbedtls_client_certificate_len);
	if (ret < 0) {
		printf("mbedtls_x509_crt_parse failed.\n");
		return -1;
	}

	ret = mbedtls_pk_parse_key(&cli_key, (const unsigned char *)mbedtls_client_key, mbedtls_client_key_len , (unsigned char const *)"", 0);
	if (ret < 0) {
		printf("mbedtls_pk_parse_key failed.\n");
		return -1;
	}

	ret = mbedtls_ssl_config_defaults(&conf, MBEDTLS_SSL_IS_CLIENT,
			MBEDTLS_SSL_TRANSPORT_STREAM, MBEDTLS_SSL_PRESET_DEFAULT);
	if (ret < 0) {
		printf("mbedtls_ssl_config_defaults failed.\n");
		return -1;
	}

	mbedtls_ssl_conf_cert_profile( &conf, &mbedtls_x509_crt_amazon_suite );

	mbedtls_ssl_conf_authmode(&conf, MBEDTLS_SSL_VERIFY_OPTIONAL);
	mbedtls_ssl_conf_ca_chain(&conf, &cacert, NULL);
	mbedtls_ssl_conf_rng(&conf, mbedtls_ctr_drbg_random, &ctr_drbg);
	mbedtls_ssl_conf_dbg(&conf, my_debug, stdout);

	ret = mbedtls_ssl_conf_own_cert(&conf, &cli_cert, &cli_key);
	if (ret < 0) {
		printf("mbedtls_ssl_conf_own_cert failed.\n");
		return -1;
	}

	ret = mbedtls_ssl_setup(&ssl, &conf);
	if (ret < 0) {
		printf("mbedtls_ssl_setup failed.\n");
		return -1;
	}

	ret = mbedtls_ssl_set_hostname(&ssl, host);
	if (ret < 0) {
		printf("mbedtls_ssl_set_hostname failed.\n");
		return -1;
	}

	mbedtls_ssl_set_bio(&ssl, &server_fd, mbedtls_net_send, mbedtls_net_recv,
			NULL);

	//register functions
	n->mqttread = net_read; //receive function
	n->mqttwrite = net_write; //send function
	n->disconnect = net_disconnect; //disconnection function

	return 0;
}

int net_connect(Network *n, char *host, char* port) {
	int ret;

	ret = mbedtls_net_connect(&server_fd, host, port, MBEDTLS_NET_PROTO_TCP);
	if (ret < 0) {
		printf("mbedtls_net_connect failed.\n");
		return -1;
	}

	while ((ret = mbedtls_ssl_handshake(&ssl)) != 0) {
		if (ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE) {
			if(ret == MBEDTLS_ERR_X509_CERT_VERIFY_FAILED)
			{
				printf("mbedtls_ssl_handshake certificate verification failed.\n", ret);
			}
			else
			{
				printf("mbedtls_ssl_handshake failed.\n", ret);
			}

			return -1;
		}
	}

	ret = mbedtls_ssl_get_verify_result(&ssl);
	if (ret < 0) {
		printf("mbedtls_ssl_get_verify_result failed.\n");
		return -1;
	}

	return 0;
}

int net_read(Network *n, unsigned char *buffer, int len, int timeout_ms) {
	int ret;
	int received = 0;
	int error = 0;
	int complete = 0;

	//set timeout
	if (timeout_ms != 0) {
		mbedtls_ssl_conf_read_timeout(&conf, timeout_ms);
	}

	//read until received length is bigger than variable len
	do {
		ret = mbedtls_ssl_read(&ssl, buffer, len);
		if (ret > 0) {
			received += ret;
		} else if (ret != MBEDTLS_ERR_SSL_WANT_READ) {
			error = 1;
		}
		if (received >= len) {
			complete = 1;
		}
	} while (!error && !complete);

	return received;
}

int net_write(Network *n, unsigned char *buffer, int len, int timeout_ms) {
	int ret;
	int written;

	//check all bytes are written
	for (written = 0; written < len; written += ret) {
		while ((ret = mbedtls_ssl_write(&ssl, buffer + written, len - written)) <= 0) {
			if (ret != MBEDTLS_ERR_SSL_WANT_READ && ret != MBEDTLS_ERR_SSL_WANT_WRITE) {
				return ret;
			}
		}
	}

	return written;
}

void net_disconnect(Network *n) {
	int ret;

	do {
		ret = mbedtls_ssl_close_notify(&ssl);
	} while (ret == MBEDTLS_ERR_SSL_WANT_WRITE);

	mbedtls_ssl_session_reset(&ssl);
	mbedtls_net_free(&server_fd);
}

void net_clear() {
	mbedtls_net_free(&server_fd);
	mbedtls_x509_crt_free(&cacert);
	mbedtls_x509_crt_free(&cli_cert);
	mbedtls_ssl_free(&ssl);
	mbedtls_ssl_config_free(&conf);
	mbedtls_ctr_drbg_free(&ctr_drbg);
	mbedtls_entropy_free(&entropy);

#if defined(MBEDTLS_MEMORY_BUFFER_ALLOC_C)
	mbedtls_memory_buffer_alloc_free();
#endif
}

uint32_t MilliTimer;

//Timer functions
char TimerIsExpired(Timer *timer) {
	long left = timer->end_time - MilliTimer;
	return (left < 0);
}

void TimerCountdownMS(Timer *timer, unsigned int timeout) {
	timer->end_time = MilliTimer + timeout;
}

void TimerCountdown(Timer *timer, unsigned int timeout) {
	timer->end_time = MilliTimer + (timeout * 1000);
}

int TimerLeftMS(Timer *timer) {
	long left = timer->end_time - MilliTimer;
	return (left < 0) ? 0 : left;
}

void TimerInit(Timer *timer) {
	timer->end_time = 0;
}

